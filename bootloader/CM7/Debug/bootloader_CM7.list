
bootloader_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017ba4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  08017e44  08017e44  00027e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801804c  0801804c  000300d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801804c  0801804c  0002804c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018054  08018054  000300d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018054  08018054  00028054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018058  08018058  00028058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  24000000  0801805c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015454  240000e0  08018130  000300e0  2**5
                  ALLOC
 10 ._user_heap_stack 00000604  24015534  08018130  00035534  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000300d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0005ada4  00000000  00000000  00030102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000bab6  00000000  00000000  0008aea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021b0  00000000  00000000  00096960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a20  00000000  00000000  00098b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004d19b  00000000  00000000  0009a530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00047ecc  00000000  00000000  000e76cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b7634  00000000  00000000  0012f597  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002e6bcb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007714  00000000  00000000  002e6c1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000e0 	.word	0x240000e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08017e2c 	.word	0x08017e2c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000e4 	.word	0x240000e4
 80002dc:	08017e2c 	.word	0x08017e2c

080002e0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80002e0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002e2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002e6:	4919      	ldr	r1, [pc, #100]	; (800034c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80002e8:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002ec:	4818      	ldr	r0, [pc, #96]	; (8000350 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002ee:	4917      	ldr	r1, [pc, #92]	; (800034c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 80002f0:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 80002f2:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80002f4:	4817      	ldr	r0, [pc, #92]	; (8000354 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 80002f6:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 80002f8:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 80002fc:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002fe:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000302:	4915      	ldr	r1, [pc, #84]	; (8000358 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000304:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000306:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800030a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800030c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000310:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000314:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000318:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800031c:	490f      	ldr	r1, [pc, #60]	; (800035c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800031e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000322:	4770      	bx	lr

08000324 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000324:	f7ff bffe 	b.w	8000324 <__tx_BadHandler>

08000328 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000328:	f7ff bffe 	b.w	8000328 <__tx_HardfaultHandler>

0800032c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800032c:	f7ff bffe 	b.w	800032c <__tx_SVCallHandler>

08000330 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000330:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000332:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000336:	4770      	bx	lr

08000338 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000338:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800033a:	f000 f891 	bl	8000460 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800033e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000342:	4770      	bx	lr

08000344 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000344:	f7ff bffe 	b.w	8000344 <__tx_NMIHandler>

08000348 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000348:	f7ff bffe 	b.w	8000348 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800034c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000350:	24014f18 	.word	0x24014f18
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000354:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000358:	0009c3ff 	.word	0x0009c3ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800035c:	40ff0000 	.word	0x40ff0000

08000360 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000360:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000364:	4a2a      	ldr	r2, [pc, #168]	; (8000410 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000366:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000368:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800036c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000370:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000374:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000376:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800037a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800037e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000382:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000386:	f3bf 8f6f 	isb	sy

0800038a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800038a:	e7fe      	b.n	800038a <__tx_wait_here>

0800038c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800038c:	4821      	ldr	r0, [pc, #132]	; (8000414 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800038e:	4a22      	ldr	r2, [pc, #136]	; (8000418 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 8000390:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000394:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000396:	b191      	cbz	r1, 80003be <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000398:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800039a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800039e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003a2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80003a6:	d101      	bne.n	80003ac <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80003a8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080003ac <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ac:	4c1b      	ldr	r4, [pc, #108]	; (800041c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80003ae:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80003b2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80003b4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80003b8:	b10d      	cbz	r5, 80003be <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80003ba:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80003bc:	6023      	str	r3, [r4, #0]

080003be <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003be:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80003c0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80003c2:	b1b1      	cbz	r1, 80003f2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80003c4:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003c6:	b662      	cpsie	i

080003c8 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80003c8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ca:	4c14      	ldr	r4, [pc, #80]	; (800041c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80003cc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80003ce:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80003d2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80003d4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80003d6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80003da:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003de:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80003e2:	d101      	bne.n	80003e8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80003e4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003e8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003e8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003ec:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 80003f0:	4770      	bx	lr

080003f2 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003f2:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003f4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003f6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003f8:	b909      	cbnz	r1, 80003fe <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003fa:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003fc:	e7f9      	b.n	80003f2 <__tx_ts_wait>

080003fe <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003fe:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000402:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000406:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800040a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800040c:	e7dc      	b.n	80003c8 <__tx_ts_restore>

0800040e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800040e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000410:	24014fb4 	.word	0x24014fb4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000414:	24014f1c 	.word	0x24014f1c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000418:	24014f20 	.word	0x24014f20
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800041c:	24015520 	.word	0x24015520

08000420 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000420:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000422:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000426:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800042a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800042e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000430:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000434:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000436:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000438:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800043a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800043c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800043e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000440:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000442:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000444:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000446:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000448:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800044a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800044c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800044e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000452:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000454:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000456:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800045a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800045c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800045e:	4770      	bx	lr

08000460 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000460:	4922      	ldr	r1, [pc, #136]	; (80004ec <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000462:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000464:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000468:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800046a:	4b21      	ldr	r3, [pc, #132]	; (80004f0 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800046c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800046e:	b13a      	cbz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000470:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000474:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000476:	b91a      	cbnz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800047a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800047e:	6018      	str	r0, [r3, #0]

08000480 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000480:	491d      	ldr	r1, [pc, #116]	; (80004f8 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000482:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000484:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000486:	b122      	cbz	r2, 8000492 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000488:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800048a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800048e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000490:	e008      	b.n	80004a4 <__tx_timer_done>

08000492 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000492:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000496:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000498:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800049a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800049c:	d101      	bne.n	80004a2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800049e:	4b19      	ldr	r3, [pc, #100]	; (8000504 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80004a0:	6818      	ldr	r0, [r3, #0]

080004a2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80004a2:	6008      	str	r0, [r1, #0]

080004a4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80004a4:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80004a6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80004a8:	b912      	cbnz	r2, 80004b0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80004aa:	4914      	ldr	r1, [pc, #80]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004ac:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80004ae:	b1d0      	cbz	r0, 80004e6 <__tx_timer_nothing_expired>

080004b0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80004b0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80004b4:	4911      	ldr	r1, [pc, #68]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004b6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80004b8:	b108      	cbz	r0, 80004be <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80004ba:	f015 fdbf 	bl	801603c <_tx_timer_expiration_process>

080004be <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80004c0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004c2:	b172      	cbz	r2, 80004e2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004c4:	f015 fcaa 	bl	8015e1c <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004c8:	480f      	ldr	r0, [pc, #60]	; (8000508 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004ca:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004cc:	b949      	cbnz	r1, 80004e2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004ce:	480f      	ldr	r0, [pc, #60]	; (800050c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80004d0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004d2:	4a0f      	ldr	r2, [pc, #60]	; (8000510 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80004d4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004d6:	480f      	ldr	r0, [pc, #60]	; (8000514 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80004d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80004dc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80004de:	d000      	beq.n	80004e2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80004e0:	6002      	str	r2, [r0, #0]

080004e2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80004e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004e6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004e6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004ea:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004ec:	24014fc0 	.word	0x24014fc0
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004f0:	24015520 	.word	0x24015520
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004f4:	24014fc4 	.word	0x24014fc4
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004f8:	24015050 	.word	0x24015050
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004fc:	24015054 	.word	0x24015054
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000500:	2401504c 	.word	0x2401504c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000504:	24015048 	.word	0x24015048
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000508:	24014fb4 	.word	0x24014fb4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800050c:	24014f1c 	.word	0x24014f1c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000510:	24014f20 	.word	0x24014f20
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000514:	e000ed04 	.word	0xe000ed04
	...

08000520 <memchr>:
 8000520:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000524:	2a10      	cmp	r2, #16
 8000526:	db2b      	blt.n	8000580 <memchr+0x60>
 8000528:	f010 0f07 	tst.w	r0, #7
 800052c:	d008      	beq.n	8000540 <memchr+0x20>
 800052e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000532:	3a01      	subs	r2, #1
 8000534:	428b      	cmp	r3, r1
 8000536:	d02d      	beq.n	8000594 <memchr+0x74>
 8000538:	f010 0f07 	tst.w	r0, #7
 800053c:	b342      	cbz	r2, 8000590 <memchr+0x70>
 800053e:	d1f6      	bne.n	800052e <memchr+0xe>
 8000540:	b4f0      	push	{r4, r5, r6, r7}
 8000542:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000546:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800054a:	f022 0407 	bic.w	r4, r2, #7
 800054e:	f07f 0700 	mvns.w	r7, #0
 8000552:	2300      	movs	r3, #0
 8000554:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000558:	3c08      	subs	r4, #8
 800055a:	ea85 0501 	eor.w	r5, r5, r1
 800055e:	ea86 0601 	eor.w	r6, r6, r1
 8000562:	fa85 f547 	uadd8	r5, r5, r7
 8000566:	faa3 f587 	sel	r5, r3, r7
 800056a:	fa86 f647 	uadd8	r6, r6, r7
 800056e:	faa5 f687 	sel	r6, r5, r7
 8000572:	b98e      	cbnz	r6, 8000598 <memchr+0x78>
 8000574:	d1ee      	bne.n	8000554 <memchr+0x34>
 8000576:	bcf0      	pop	{r4, r5, r6, r7}
 8000578:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800057c:	f002 0207 	and.w	r2, r2, #7
 8000580:	b132      	cbz	r2, 8000590 <memchr+0x70>
 8000582:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000586:	3a01      	subs	r2, #1
 8000588:	ea83 0301 	eor.w	r3, r3, r1
 800058c:	b113      	cbz	r3, 8000594 <memchr+0x74>
 800058e:	d1f8      	bne.n	8000582 <memchr+0x62>
 8000590:	2000      	movs	r0, #0
 8000592:	4770      	bx	lr
 8000594:	3801      	subs	r0, #1
 8000596:	4770      	bx	lr
 8000598:	2d00      	cmp	r5, #0
 800059a:	bf06      	itte	eq
 800059c:	4635      	moveq	r5, r6
 800059e:	3803      	subeq	r0, #3
 80005a0:	3807      	subne	r0, #7
 80005a2:	f015 0f01 	tst.w	r5, #1
 80005a6:	d107      	bne.n	80005b8 <memchr+0x98>
 80005a8:	3001      	adds	r0, #1
 80005aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80005ae:	bf02      	ittt	eq
 80005b0:	3001      	addeq	r0, #1
 80005b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80005b6:	3001      	addeq	r0, #1
 80005b8:	bcf0      	pop	{r4, r5, r6, r7}
 80005ba:	3801      	subs	r0, #1
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <__aeabi_uldivmod>:
 80005c0:	b953      	cbnz	r3, 80005d8 <__aeabi_uldivmod+0x18>
 80005c2:	b94a      	cbnz	r2, 80005d8 <__aeabi_uldivmod+0x18>
 80005c4:	2900      	cmp	r1, #0
 80005c6:	bf08      	it	eq
 80005c8:	2800      	cmpeq	r0, #0
 80005ca:	bf1c      	itt	ne
 80005cc:	f04f 31ff 	movne.w	r1, #4294967295
 80005d0:	f04f 30ff 	movne.w	r0, #4294967295
 80005d4:	f000 b974 	b.w	80008c0 <__aeabi_idiv0>
 80005d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005e0:	f000 f806 	bl	80005f0 <__udivmoddi4>
 80005e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005ec:	b004      	add	sp, #16
 80005ee:	4770      	bx	lr

080005f0 <__udivmoddi4>:
 80005f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005f4:	9d08      	ldr	r5, [sp, #32]
 80005f6:	4604      	mov	r4, r0
 80005f8:	468e      	mov	lr, r1
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d14d      	bne.n	800069a <__udivmoddi4+0xaa>
 80005fe:	428a      	cmp	r2, r1
 8000600:	4694      	mov	ip, r2
 8000602:	d969      	bls.n	80006d8 <__udivmoddi4+0xe8>
 8000604:	fab2 f282 	clz	r2, r2
 8000608:	b152      	cbz	r2, 8000620 <__udivmoddi4+0x30>
 800060a:	fa01 f302 	lsl.w	r3, r1, r2
 800060e:	f1c2 0120 	rsb	r1, r2, #32
 8000612:	fa20 f101 	lsr.w	r1, r0, r1
 8000616:	fa0c fc02 	lsl.w	ip, ip, r2
 800061a:	ea41 0e03 	orr.w	lr, r1, r3
 800061e:	4094      	lsls	r4, r2
 8000620:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000624:	0c21      	lsrs	r1, r4, #16
 8000626:	fbbe f6f8 	udiv	r6, lr, r8
 800062a:	fa1f f78c 	uxth.w	r7, ip
 800062e:	fb08 e316 	mls	r3, r8, r6, lr
 8000632:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000636:	fb06 f107 	mul.w	r1, r6, r7
 800063a:	4299      	cmp	r1, r3
 800063c:	d90a      	bls.n	8000654 <__udivmoddi4+0x64>
 800063e:	eb1c 0303 	adds.w	r3, ip, r3
 8000642:	f106 30ff 	add.w	r0, r6, #4294967295
 8000646:	f080 811f 	bcs.w	8000888 <__udivmoddi4+0x298>
 800064a:	4299      	cmp	r1, r3
 800064c:	f240 811c 	bls.w	8000888 <__udivmoddi4+0x298>
 8000650:	3e02      	subs	r6, #2
 8000652:	4463      	add	r3, ip
 8000654:	1a5b      	subs	r3, r3, r1
 8000656:	b2a4      	uxth	r4, r4
 8000658:	fbb3 f0f8 	udiv	r0, r3, r8
 800065c:	fb08 3310 	mls	r3, r8, r0, r3
 8000660:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000664:	fb00 f707 	mul.w	r7, r0, r7
 8000668:	42a7      	cmp	r7, r4
 800066a:	d90a      	bls.n	8000682 <__udivmoddi4+0x92>
 800066c:	eb1c 0404 	adds.w	r4, ip, r4
 8000670:	f100 33ff 	add.w	r3, r0, #4294967295
 8000674:	f080 810a 	bcs.w	800088c <__udivmoddi4+0x29c>
 8000678:	42a7      	cmp	r7, r4
 800067a:	f240 8107 	bls.w	800088c <__udivmoddi4+0x29c>
 800067e:	4464      	add	r4, ip
 8000680:	3802      	subs	r0, #2
 8000682:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000686:	1be4      	subs	r4, r4, r7
 8000688:	2600      	movs	r6, #0
 800068a:	b11d      	cbz	r5, 8000694 <__udivmoddi4+0xa4>
 800068c:	40d4      	lsrs	r4, r2
 800068e:	2300      	movs	r3, #0
 8000690:	e9c5 4300 	strd	r4, r3, [r5]
 8000694:	4631      	mov	r1, r6
 8000696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800069a:	428b      	cmp	r3, r1
 800069c:	d909      	bls.n	80006b2 <__udivmoddi4+0xc2>
 800069e:	2d00      	cmp	r5, #0
 80006a0:	f000 80ef 	beq.w	8000882 <__udivmoddi4+0x292>
 80006a4:	2600      	movs	r6, #0
 80006a6:	e9c5 0100 	strd	r0, r1, [r5]
 80006aa:	4630      	mov	r0, r6
 80006ac:	4631      	mov	r1, r6
 80006ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006b2:	fab3 f683 	clz	r6, r3
 80006b6:	2e00      	cmp	r6, #0
 80006b8:	d14a      	bne.n	8000750 <__udivmoddi4+0x160>
 80006ba:	428b      	cmp	r3, r1
 80006bc:	d302      	bcc.n	80006c4 <__udivmoddi4+0xd4>
 80006be:	4282      	cmp	r2, r0
 80006c0:	f200 80f9 	bhi.w	80008b6 <__udivmoddi4+0x2c6>
 80006c4:	1a84      	subs	r4, r0, r2
 80006c6:	eb61 0303 	sbc.w	r3, r1, r3
 80006ca:	2001      	movs	r0, #1
 80006cc:	469e      	mov	lr, r3
 80006ce:	2d00      	cmp	r5, #0
 80006d0:	d0e0      	beq.n	8000694 <__udivmoddi4+0xa4>
 80006d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80006d6:	e7dd      	b.n	8000694 <__udivmoddi4+0xa4>
 80006d8:	b902      	cbnz	r2, 80006dc <__udivmoddi4+0xec>
 80006da:	deff      	udf	#255	; 0xff
 80006dc:	fab2 f282 	clz	r2, r2
 80006e0:	2a00      	cmp	r2, #0
 80006e2:	f040 8092 	bne.w	800080a <__udivmoddi4+0x21a>
 80006e6:	eba1 010c 	sub.w	r1, r1, ip
 80006ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006ee:	fa1f fe8c 	uxth.w	lr, ip
 80006f2:	2601      	movs	r6, #1
 80006f4:	0c20      	lsrs	r0, r4, #16
 80006f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80006fa:	fb07 1113 	mls	r1, r7, r3, r1
 80006fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000702:	fb0e f003 	mul.w	r0, lr, r3
 8000706:	4288      	cmp	r0, r1
 8000708:	d908      	bls.n	800071c <__udivmoddi4+0x12c>
 800070a:	eb1c 0101 	adds.w	r1, ip, r1
 800070e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000712:	d202      	bcs.n	800071a <__udivmoddi4+0x12a>
 8000714:	4288      	cmp	r0, r1
 8000716:	f200 80cb 	bhi.w	80008b0 <__udivmoddi4+0x2c0>
 800071a:	4643      	mov	r3, r8
 800071c:	1a09      	subs	r1, r1, r0
 800071e:	b2a4      	uxth	r4, r4
 8000720:	fbb1 f0f7 	udiv	r0, r1, r7
 8000724:	fb07 1110 	mls	r1, r7, r0, r1
 8000728:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800072c:	fb0e fe00 	mul.w	lr, lr, r0
 8000730:	45a6      	cmp	lr, r4
 8000732:	d908      	bls.n	8000746 <__udivmoddi4+0x156>
 8000734:	eb1c 0404 	adds.w	r4, ip, r4
 8000738:	f100 31ff 	add.w	r1, r0, #4294967295
 800073c:	d202      	bcs.n	8000744 <__udivmoddi4+0x154>
 800073e:	45a6      	cmp	lr, r4
 8000740:	f200 80bb 	bhi.w	80008ba <__udivmoddi4+0x2ca>
 8000744:	4608      	mov	r0, r1
 8000746:	eba4 040e 	sub.w	r4, r4, lr
 800074a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800074e:	e79c      	b.n	800068a <__udivmoddi4+0x9a>
 8000750:	f1c6 0720 	rsb	r7, r6, #32
 8000754:	40b3      	lsls	r3, r6
 8000756:	fa22 fc07 	lsr.w	ip, r2, r7
 800075a:	ea4c 0c03 	orr.w	ip, ip, r3
 800075e:	fa20 f407 	lsr.w	r4, r0, r7
 8000762:	fa01 f306 	lsl.w	r3, r1, r6
 8000766:	431c      	orrs	r4, r3
 8000768:	40f9      	lsrs	r1, r7
 800076a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800076e:	fa00 f306 	lsl.w	r3, r0, r6
 8000772:	fbb1 f8f9 	udiv	r8, r1, r9
 8000776:	0c20      	lsrs	r0, r4, #16
 8000778:	fa1f fe8c 	uxth.w	lr, ip
 800077c:	fb09 1118 	mls	r1, r9, r8, r1
 8000780:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000784:	fb08 f00e 	mul.w	r0, r8, lr
 8000788:	4288      	cmp	r0, r1
 800078a:	fa02 f206 	lsl.w	r2, r2, r6
 800078e:	d90b      	bls.n	80007a8 <__udivmoddi4+0x1b8>
 8000790:	eb1c 0101 	adds.w	r1, ip, r1
 8000794:	f108 3aff 	add.w	sl, r8, #4294967295
 8000798:	f080 8088 	bcs.w	80008ac <__udivmoddi4+0x2bc>
 800079c:	4288      	cmp	r0, r1
 800079e:	f240 8085 	bls.w	80008ac <__udivmoddi4+0x2bc>
 80007a2:	f1a8 0802 	sub.w	r8, r8, #2
 80007a6:	4461      	add	r1, ip
 80007a8:	1a09      	subs	r1, r1, r0
 80007aa:	b2a4      	uxth	r4, r4
 80007ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80007b0:	fb09 1110 	mls	r1, r9, r0, r1
 80007b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007bc:	458e      	cmp	lr, r1
 80007be:	d908      	bls.n	80007d2 <__udivmoddi4+0x1e2>
 80007c0:	eb1c 0101 	adds.w	r1, ip, r1
 80007c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80007c8:	d26c      	bcs.n	80008a4 <__udivmoddi4+0x2b4>
 80007ca:	458e      	cmp	lr, r1
 80007cc:	d96a      	bls.n	80008a4 <__udivmoddi4+0x2b4>
 80007ce:	3802      	subs	r0, #2
 80007d0:	4461      	add	r1, ip
 80007d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007d6:	fba0 9402 	umull	r9, r4, r0, r2
 80007da:	eba1 010e 	sub.w	r1, r1, lr
 80007de:	42a1      	cmp	r1, r4
 80007e0:	46c8      	mov	r8, r9
 80007e2:	46a6      	mov	lr, r4
 80007e4:	d356      	bcc.n	8000894 <__udivmoddi4+0x2a4>
 80007e6:	d053      	beq.n	8000890 <__udivmoddi4+0x2a0>
 80007e8:	b15d      	cbz	r5, 8000802 <__udivmoddi4+0x212>
 80007ea:	ebb3 0208 	subs.w	r2, r3, r8
 80007ee:	eb61 010e 	sbc.w	r1, r1, lr
 80007f2:	fa01 f707 	lsl.w	r7, r1, r7
 80007f6:	fa22 f306 	lsr.w	r3, r2, r6
 80007fa:	40f1      	lsrs	r1, r6
 80007fc:	431f      	orrs	r7, r3
 80007fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000802:	2600      	movs	r6, #0
 8000804:	4631      	mov	r1, r6
 8000806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800080a:	f1c2 0320 	rsb	r3, r2, #32
 800080e:	40d8      	lsrs	r0, r3
 8000810:	fa0c fc02 	lsl.w	ip, ip, r2
 8000814:	fa21 f303 	lsr.w	r3, r1, r3
 8000818:	4091      	lsls	r1, r2
 800081a:	4301      	orrs	r1, r0
 800081c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000820:	fa1f fe8c 	uxth.w	lr, ip
 8000824:	fbb3 f0f7 	udiv	r0, r3, r7
 8000828:	fb07 3610 	mls	r6, r7, r0, r3
 800082c:	0c0b      	lsrs	r3, r1, #16
 800082e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000832:	fb00 f60e 	mul.w	r6, r0, lr
 8000836:	429e      	cmp	r6, r3
 8000838:	fa04 f402 	lsl.w	r4, r4, r2
 800083c:	d908      	bls.n	8000850 <__udivmoddi4+0x260>
 800083e:	eb1c 0303 	adds.w	r3, ip, r3
 8000842:	f100 38ff 	add.w	r8, r0, #4294967295
 8000846:	d22f      	bcs.n	80008a8 <__udivmoddi4+0x2b8>
 8000848:	429e      	cmp	r6, r3
 800084a:	d92d      	bls.n	80008a8 <__udivmoddi4+0x2b8>
 800084c:	3802      	subs	r0, #2
 800084e:	4463      	add	r3, ip
 8000850:	1b9b      	subs	r3, r3, r6
 8000852:	b289      	uxth	r1, r1
 8000854:	fbb3 f6f7 	udiv	r6, r3, r7
 8000858:	fb07 3316 	mls	r3, r7, r6, r3
 800085c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000860:	fb06 f30e 	mul.w	r3, r6, lr
 8000864:	428b      	cmp	r3, r1
 8000866:	d908      	bls.n	800087a <__udivmoddi4+0x28a>
 8000868:	eb1c 0101 	adds.w	r1, ip, r1
 800086c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000870:	d216      	bcs.n	80008a0 <__udivmoddi4+0x2b0>
 8000872:	428b      	cmp	r3, r1
 8000874:	d914      	bls.n	80008a0 <__udivmoddi4+0x2b0>
 8000876:	3e02      	subs	r6, #2
 8000878:	4461      	add	r1, ip
 800087a:	1ac9      	subs	r1, r1, r3
 800087c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000880:	e738      	b.n	80006f4 <__udivmoddi4+0x104>
 8000882:	462e      	mov	r6, r5
 8000884:	4628      	mov	r0, r5
 8000886:	e705      	b.n	8000694 <__udivmoddi4+0xa4>
 8000888:	4606      	mov	r6, r0
 800088a:	e6e3      	b.n	8000654 <__udivmoddi4+0x64>
 800088c:	4618      	mov	r0, r3
 800088e:	e6f8      	b.n	8000682 <__udivmoddi4+0x92>
 8000890:	454b      	cmp	r3, r9
 8000892:	d2a9      	bcs.n	80007e8 <__udivmoddi4+0x1f8>
 8000894:	ebb9 0802 	subs.w	r8, r9, r2
 8000898:	eb64 0e0c 	sbc.w	lr, r4, ip
 800089c:	3801      	subs	r0, #1
 800089e:	e7a3      	b.n	80007e8 <__udivmoddi4+0x1f8>
 80008a0:	4646      	mov	r6, r8
 80008a2:	e7ea      	b.n	800087a <__udivmoddi4+0x28a>
 80008a4:	4620      	mov	r0, r4
 80008a6:	e794      	b.n	80007d2 <__udivmoddi4+0x1e2>
 80008a8:	4640      	mov	r0, r8
 80008aa:	e7d1      	b.n	8000850 <__udivmoddi4+0x260>
 80008ac:	46d0      	mov	r8, sl
 80008ae:	e77b      	b.n	80007a8 <__udivmoddi4+0x1b8>
 80008b0:	3b02      	subs	r3, #2
 80008b2:	4461      	add	r1, ip
 80008b4:	e732      	b.n	800071c <__udivmoddi4+0x12c>
 80008b6:	4630      	mov	r0, r6
 80008b8:	e709      	b.n	80006ce <__udivmoddi4+0xde>
 80008ba:	4464      	add	r4, ip
 80008bc:	3802      	subs	r0, #2
 80008be:	e742      	b.n	8000746 <__udivmoddi4+0x156>

080008c0 <__aeabi_idiv0>:
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop

080008c4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af02      	add	r7, sp, #8
 80008ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80008d0:	2334      	movs	r3, #52	; 0x34
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008d8:	4a15      	ldr	r2, [pc, #84]	; (8000930 <tx_application_define+0x6c>)
 80008da:	4916      	ldr	r1, [pc, #88]	; (8000934 <tx_application_define+0x70>)
 80008dc:	4816      	ldr	r0, [pc, #88]	; (8000938 <tx_application_define+0x74>)
 80008de:	f015 fe57 	bl	8016590 <_txe_byte_pool_create>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d109      	bne.n	80008fc <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <tx_application_define+0x74>)
 80008ea:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80008ec:	68b8      	ldr	r0, [r7, #8]
 80008ee:	f000 f8c1 	bl	8000a74 <App_ThreadX_Init>
 80008f2:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d000      	beq.n	80008fc <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80008fa:	e7fe      	b.n	80008fa <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&fx_app_byte_pool, "Fx App memory pool", fx_byte_pool_buffer, FX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80008fc:	2334      	movs	r3, #52	; 0x34
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000904:	4a0d      	ldr	r2, [pc, #52]	; (800093c <tx_application_define+0x78>)
 8000906:	490e      	ldr	r1, [pc, #56]	; (8000940 <tx_application_define+0x7c>)
 8000908:	480e      	ldr	r0, [pc, #56]	; (8000944 <tx_application_define+0x80>)
 800090a:	f015 fe41 	bl	8016590 <_txe_byte_pool_create>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d109      	bne.n	8000928 <tx_application_define+0x64>
  {
    /* USER CODE BEGIN FX_Byte_Pool_Success */

    /* USER CODE END FX_Byte_Pool_Success */

    memory_ptr = (VOID *)&fx_app_byte_pool;
 8000914:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <tx_application_define+0x80>)
 8000916:	60bb      	str	r3, [r7, #8]
    status = MX_FileX_Init(memory_ptr);
 8000918:	68b8      	ldr	r0, [r7, #8]
 800091a:	f009 f9ad 	bl	8009c78 <MX_FileX_Init>
 800091e:	60f8      	str	r0, [r7, #12]
    if (status != FX_SUCCESS)
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d000      	beq.n	8000928 <tx_application_define+0x64>
    {
      /* USER CODE BEGIN  MX_FileX_Init_Error */
      while(1)
 8000926:	e7fe      	b.n	8000926 <tx_application_define+0x62>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	240000fc 	.word	0x240000fc
 8000934:	08017e44 	.word	0x08017e44
 8000938:	240080fc 	.word	0x240080fc
 800093c:	24008130 	.word	0x24008130
 8000940:	08017e58 	.word	0x08017e58
 8000944:	24012130 	.word	0x24012130

08000948 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800094c:	4b3d      	ldr	r3, [pc, #244]	; (8000a44 <SystemInit+0xfc>)
 800094e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000952:	4a3c      	ldr	r2, [pc, #240]	; (8000a44 <SystemInit+0xfc>)
 8000954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800095c:	4b39      	ldr	r3, [pc, #228]	; (8000a44 <SystemInit+0xfc>)
 800095e:	691b      	ldr	r3, [r3, #16]
 8000960:	4a38      	ldr	r2, [pc, #224]	; (8000a44 <SystemInit+0xfc>)
 8000962:	f043 0310 	orr.w	r3, r3, #16
 8000966:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000968:	4b37      	ldr	r3, [pc, #220]	; (8000a48 <SystemInit+0x100>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f003 030f 	and.w	r3, r3, #15
 8000970:	2b06      	cmp	r3, #6
 8000972:	d807      	bhi.n	8000984 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000974:	4b34      	ldr	r3, [pc, #208]	; (8000a48 <SystemInit+0x100>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f023 030f 	bic.w	r3, r3, #15
 800097c:	4a32      	ldr	r2, [pc, #200]	; (8000a48 <SystemInit+0x100>)
 800097e:	f043 0307 	orr.w	r3, r3, #7
 8000982:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000984:	4b31      	ldr	r3, [pc, #196]	; (8000a4c <SystemInit+0x104>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a30      	ldr	r2, [pc, #192]	; (8000a4c <SystemInit+0x104>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000990:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <SystemInit+0x104>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000996:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <SystemInit+0x104>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	492c      	ldr	r1, [pc, #176]	; (8000a4c <SystemInit+0x104>)
 800099c:	4b2c      	ldr	r3, [pc, #176]	; (8000a50 <SystemInit+0x108>)
 800099e:	4013      	ands	r3, r2
 80009a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009a2:	4b29      	ldr	r3, [pc, #164]	; (8000a48 <SystemInit+0x100>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d007      	beq.n	80009be <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009ae:	4b26      	ldr	r3, [pc, #152]	; (8000a48 <SystemInit+0x100>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f023 030f 	bic.w	r3, r3, #15
 80009b6:	4a24      	ldr	r2, [pc, #144]	; (8000a48 <SystemInit+0x100>)
 80009b8:	f043 0307 	orr.w	r3, r3, #7
 80009bc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009be:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <SystemInit+0x104>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009c4:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <SystemInit+0x104>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009ca:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <SystemInit+0x104>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <SystemInit+0x104>)
 80009d2:	4a20      	ldr	r2, [pc, #128]	; (8000a54 <SystemInit+0x10c>)
 80009d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <SystemInit+0x104>)
 80009d8:	4a1f      	ldr	r2, [pc, #124]	; (8000a58 <SystemInit+0x110>)
 80009da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <SystemInit+0x104>)
 80009de:	4a1f      	ldr	r2, [pc, #124]	; (8000a5c <SystemInit+0x114>)
 80009e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <SystemInit+0x104>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <SystemInit+0x104>)
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <SystemInit+0x114>)
 80009ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <SystemInit+0x104>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <SystemInit+0x104>)
 80009f6:	4a19      	ldr	r2, [pc, #100]	; (8000a5c <SystemInit+0x114>)
 80009f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <SystemInit+0x104>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <SystemInit+0x104>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a11      	ldr	r2, [pc, #68]	; (8000a4c <SystemInit+0x104>)
 8000a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <SystemInit+0x104>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000a12:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <SystemInit+0x118>)
 8000a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <SystemInit+0x118>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1c:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <SystemInit+0x11c>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <SystemInit+0x120>)
 8000a24:	4013      	ands	r3, r2
 8000a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a2a:	d202      	bcs.n	8000a32 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <SystemInit+0x124>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <SystemInit+0x128>)
 8000a34:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a38:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00
 8000a48:	52002000 	.word	0x52002000
 8000a4c:	58024400 	.word	0x58024400
 8000a50:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a54:	02020200 	.word	0x02020200
 8000a58:	01ff0000 	.word	0x01ff0000
 8000a5c:	01010280 	.word	0x01010280
 8000a60:	580000c0 	.word	0x580000c0
 8000a64:	5c001000 	.word	0x5c001000
 8000a68:	ffff0000 	.word	0xffff0000
 8000a6c:	51008108 	.word	0x51008108
 8000a70:	52004000 	.word	0x52004000

08000a74 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN App_ThreadX_Init */

  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000a80:	68fb      	ldr	r3, [r7, #12]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000a92:	f013 f821 	bl	8013ad8 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000aa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aa6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000aa8:	bf00      	nop
 8000aaa:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <main+0xac>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d004      	beq.n	8000ac0 <main+0x24>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	1e5a      	subs	r2, r3, #1
 8000aba:	607a      	str	r2, [r7, #4]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	dcf4      	bgt.n	8000aaa <main+0xe>
  if ( timeout < 0 )
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	da01      	bge.n	8000aca <main+0x2e>
  {
  Error_Handler();
 8000ac6:	f000 fa9d 	bl	8001004 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aca:	f000 fd71 	bl	80015b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ace:	f000 f83f 	bl	8000b50 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <main+0xac>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	; (8000b48 <main+0xac>)
 8000ada:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae2:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <main+0xac>)
 8000ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000af0:	2000      	movs	r0, #0
 8000af2:	f001 fa1b 	bl	8001f2c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000af6:	2100      	movs	r1, #0
 8000af8:	2000      	movs	r0, #0
 8000afa:	f001 fa31 	bl	8001f60 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000afe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b02:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000b04:	bf00      	nop
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <main+0xac>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d104      	bne.n	8000b1c <main+0x80>
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	1e5a      	subs	r2, r3, #1
 8000b16:	607a      	str	r2, [r7, #4]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	dcf4      	bgt.n	8000b06 <main+0x6a>
if ( timeout < 0 )
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	da01      	bge.n	8000b26 <main+0x8a>
{
Error_Handler();
 8000b22:	f000 fa6f 	bl	8001004 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b26:	f000 f905 	bl	8000d34 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b2a:	f000 f8b7 	bl	8000c9c <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 8000b2e:	f000 f893 	bl	8000c58 <MX_SDMMC1_SD_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Bootloader v%d.%d (CM7)\r\n",bootloader_ver[0], bootloader_ver[1]);
 8000b32:	2300      	movs	r3, #0
 8000b34:	2201      	movs	r2, #1
 8000b36:	4619      	mov	r1, r3
 8000b38:	4804      	ldr	r0, [pc, #16]	; (8000b4c <main+0xb0>)
 8000b3a:	f016 f973 	bl	8016e24 <iprintf>

  /* Jump to applicationdirectly for now */
  goto_application();
 8000b3e:	f000 f9a7 	bl	8000e90 <goto_application>

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000b42:	f7ff ffa4 	bl	8000a8e <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <main+0xaa>
 8000b48:	58024400 	.word	0x58024400
 8000b4c:	08017e6c 	.word	0x08017e6c

08000b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b09c      	sub	sp, #112	; 0x70
 8000b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b5a:	224c      	movs	r2, #76	; 0x4c
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f016 f958 	bl	8016e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b64:	1d3b      	adds	r3, r7, #4
 8000b66:	2220      	movs	r2, #32
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f016 f952 	bl	8016e14 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000b70:	2004      	movs	r0, #4
 8000b72:	f001 fa09 	bl	8001f88 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	4b35      	ldr	r3, [pc, #212]	; (8000c50 <SystemClock_Config+0x100>)
 8000b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b7e:	4a34      	ldr	r2, [pc, #208]	; (8000c50 <SystemClock_Config+0x100>)
 8000b80:	f023 0301 	bic.w	r3, r3, #1
 8000b84:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b86:	4b32      	ldr	r3, [pc, #200]	; (8000c50 <SystemClock_Config+0x100>)
 8000b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	4b30      	ldr	r3, [pc, #192]	; (8000c54 <SystemClock_Config+0x104>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	4a2f      	ldr	r2, [pc, #188]	; (8000c54 <SystemClock_Config+0x104>)
 8000b96:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b9a:	6193      	str	r3, [r2, #24]
 8000b9c:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <SystemClock_Config+0x104>)
 8000b9e:	699b      	ldr	r3, [r3, #24]
 8000ba0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ba8:	bf00      	nop
 8000baa:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <SystemClock_Config+0x104>)
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000bb6:	d1f8      	bne.n	8000baa <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc6:	2340      	movs	r3, #64	; 0x40
 8000bc8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000bd2:	2305      	movs	r3, #5
 8000bd4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000bd6:	2330      	movs	r3, #48	; 0x30
 8000bd8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000bde:	2305      	movs	r3, #5
 8000be0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000be2:	2302      	movs	r3, #2
 8000be4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000be6:	2308      	movs	r3, #8
 8000be8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f001 fb4a 	bl	8002290 <HAL_RCC_OscConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000c02:	f000 f9ff 	bl	8001004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c06:	233f      	movs	r3, #63	; 0x3f
 8000c08:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f001 ff8a 	bl	8002b44 <HAL_RCC_ClockConfig>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000c36:	f000 f9e5 	bl	8001004 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000c3a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c3e:	2100      	movs	r1, #0
 8000c40:	2000      	movs	r0, #0
 8000c42:	f002 f935 	bl	8002eb0 <HAL_RCC_MCOConfig>
}
 8000c46:	bf00      	nop
 8000c48:	3770      	adds	r7, #112	; 0x70
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	58000400 	.word	0x58000400
 8000c54:	58024800 	.word	0x58024800

08000c58 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <MX_SDMMC1_SD_Init+0x3c>)
 8000c5e:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <MX_SDMMC1_SD_Init+0x40>)
 8000c60:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_SDMMC1_SD_Init+0x3c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <MX_SDMMC1_SD_Init+0x3c>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_SDMMC1_SD_Init+0x3c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <MX_SDMMC1_SD_Init+0x3c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_SDMMC1_SD_Init+0x3c>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000c80:	4804      	ldr	r0, [pc, #16]	; (8000c94 <MX_SDMMC1_SD_Init+0x3c>)
 8000c82:	f005 f8d5 	bl	8005e30 <HAL_SD_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_SDMMC1_SD_Init+0x38>
  {
    Error_Handler();
 8000c8c:	f000 f9ba 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	24012164 	.word	0x24012164
 8000c98:	52007000 	.word	0x52007000

08000c9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ca0:	4b22      	ldr	r3, [pc, #136]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000ca2:	4a23      	ldr	r2, [pc, #140]	; (8000d30 <MX_USART1_UART_Init+0x94>)
 8000ca4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ca6:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000ca8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cae:	4b1f      	ldr	r3, [pc, #124]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cba:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cc0:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000cc2:	220c      	movs	r2, #12
 8000cc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cde:	4b13      	ldr	r3, [pc, #76]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ce4:	4811      	ldr	r0, [pc, #68]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000ce6:	f007 f849 	bl	8007d7c <HAL_UART_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000cf0:	f000 f988 	bl	8001004 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	480d      	ldr	r0, [pc, #52]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000cf8:	f008 f919 	bl	8008f2e <HAL_UARTEx_SetTxFifoThreshold>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d02:	f000 f97f 	bl	8001004 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d06:	2100      	movs	r1, #0
 8000d08:	4808      	ldr	r0, [pc, #32]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000d0a:	f008 f94e 	bl	8008faa <HAL_UARTEx_SetRxFifoThreshold>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d14:	f000 f976 	bl	8001004 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d18:	4804      	ldr	r0, [pc, #16]	; (8000d2c <MX_USART1_UART_Init+0x90>)
 8000d1a:	f008 f8cf 	bl	8008ebc <HAL_UARTEx_DisableFifoMode>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d24:	f000 f96e 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	240121e0 	.word	0x240121e0
 8000d30:	40011000 	.word	0x40011000

08000d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3a:	f107 0314 	add.w	r3, r7, #20
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
 8000d48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4a:	4b45      	ldr	r3, [pc, #276]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d50:	4a43      	ldr	r2, [pc, #268]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d5a:	4b41      	ldr	r3, [pc, #260]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d60:	f003 0304 	and.w	r3, r3, #4
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d68:	4b3d      	ldr	r3, [pc, #244]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000d6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6e:	4a3c      	ldr	r2, [pc, #240]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d78:	4b39      	ldr	r3, [pc, #228]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	4b36      	ldr	r3, [pc, #216]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8c:	4a34      	ldr	r2, [pc, #208]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d96:	4b32      	ldr	r3, [pc, #200]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000da4:	4b2e      	ldr	r3, [pc, #184]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000da6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000daa:	4a2d      	ldr	r2, [pc, #180]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000db0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db4:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc2:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc8:	4a25      	ldr	r2, [pc, #148]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000dca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd2:	4b23      	ldr	r3, [pc, #140]	; (8000e60 <MX_GPIO_Init+0x12c>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ddc:	603b      	str	r3, [r7, #0]
 8000dde:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000de6:	481f      	ldr	r0, [pc, #124]	; (8000e64 <MX_GPIO_Init+0x130>)
 8000de8:	f001 f852 	bl	8001e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000df2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000df6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4619      	mov	r1, r3
 8000e02:	4818      	ldr	r0, [pc, #96]	; (8000e64 <MX_GPIO_Init+0x130>)
 8000e04:	f000 fd72 	bl	80018ec <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000e08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	4810      	ldr	r0, [pc, #64]	; (8000e68 <MX_GPIO_Init+0x134>)
 8000e26:	f000 fd61 	bl	80018ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8000e2a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000e2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e30:	2301      	movs	r3, #1
 8000e32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e34:	2302      	movs	r3, #2
 8000e36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4619      	mov	r1, r3
 8000e42:	4808      	ldr	r0, [pc, #32]	; (8000e64 <MX_GPIO_Init+0x130>)
 8000e44:	f000 fd52 	bl	80018ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 14, 0);
 8000e48:	2200      	movs	r2, #0
 8000e4a:	210e      	movs	r1, #14
 8000e4c:	2017      	movs	r0, #23
 8000e4e:	f000 fd17 	bl	8001880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e52:	2017      	movs	r0, #23
 8000e54:	f000 fd2e 	bl	80018b4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e58:	bf00      	nop
 8000e5a:	3728      	adds	r7, #40	; 0x28
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	58024400 	.word	0x58024400
 8000e64:	58022000 	.word	0x58022000
 8000e68:	58020000 	.word	0x58020000

08000e6c <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e74:	1d39      	adds	r1, r7, #4
 8000e76:	f04f 33ff 	mov.w	r3, #4294967295
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	4803      	ldr	r0, [pc, #12]	; (8000e8c <__io_putchar+0x20>)
 8000e7e:	f007 f80c 	bl	8007e9a <HAL_UART_Transmit>

  return ch;
 8000e82:	687b      	ldr	r3, [r7, #4]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3708      	adds	r7, #8
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	240121e0 	.word	0x240121e0

08000e90 <goto_application>:

static void goto_application()
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
	printf("Jumping to application\r\n");
 8000e96:	4849      	ldr	r0, [pc, #292]	; (8000fbc <goto_application+0x12c>)
 8000e98:	f016 f84a 	bl	8016f30 <puts>
	void (*app_reset_hanlder) (void) = (void*) (*(volatile uint32_t *) (APP_FLASH_ADDR + 4U));
 8000e9c:	4b48      	ldr	r3, [pc, #288]	; (8000fc0 <goto_application+0x130>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	60fb      	str	r3, [r7, #12]

	/* Deinitialize peripherals before jump */
	HAL_SD_DeInit(&hsd1);
 8000ea2:	4848      	ldr	r0, [pc, #288]	; (8000fc4 <goto_application+0x134>)
 8000ea4:	f005 f8e4 	bl	8006070 <HAL_SD_DeInit>
	HAL_UART_DeInit(&huart1);
 8000ea8:	4847      	ldr	r0, [pc, #284]	; (8000fc8 <goto_application+0x138>)
 8000eaa:	f006 ffb7 	bl	8007e1c <HAL_UART_DeInit>

	/* TODO: Replace by HAL GPIO DeInit function */
	__HAL_RCC_GPIOF_CLK_DISABLE();
 8000eae:	4b47      	ldr	r3, [pc, #284]	; (8000fcc <goto_application+0x13c>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb4:	4a45      	ldr	r2, [pc, #276]	; (8000fcc <goto_application+0x13c>)
 8000eb6:	f023 0320 	bic.w	r3, r3, #32
 8000eba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_GPIOH_CLK_DISABLE();
 8000ebe:	4b43      	ldr	r3, [pc, #268]	; (8000fcc <goto_application+0x13c>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec4:	4a41      	ldr	r2, [pc, #260]	; (8000fcc <goto_application+0x13c>)
 8000ec6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000eca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_GPIOI_CLK_DISABLE();
 8000ece:	4b3f      	ldr	r3, [pc, #252]	; (8000fcc <goto_application+0x13c>)
 8000ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed4:	4a3d      	ldr	r2, [pc, #244]	; (8000fcc <goto_application+0x13c>)
 8000ed6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000eda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_GPIOA_CLK_DISABLE();
 8000ede:	4b3b      	ldr	r3, [pc, #236]	; (8000fcc <goto_application+0x13c>)
 8000ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee4:	4a39      	ldr	r2, [pc, #228]	; (8000fcc <goto_application+0x13c>)
 8000ee6:	f023 0301 	bic.w	r3, r3, #1
 8000eea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_GPIOE_CLK_DISABLE();
 8000eee:	4b37      	ldr	r3, [pc, #220]	; (8000fcc <goto_application+0x13c>)
 8000ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef4:	4a35      	ldr	r2, [pc, #212]	; (8000fcc <goto_application+0x13c>)
 8000ef6:	f023 0310 	bic.w	r3, r3, #16
 8000efa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_GPIOC_CLK_DISABLE();
 8000efe:	4b33      	ldr	r3, [pc, #204]	; (8000fcc <goto_application+0x13c>)
 8000f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f04:	4a31      	ldr	r2, [pc, #196]	; (8000fcc <goto_application+0x13c>)
 8000f06:	f023 0304 	bic.w	r3, r3, #4
 8000f0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_GPIOG_CLK_DISABLE();
 8000f0e:	4b2f      	ldr	r3, [pc, #188]	; (8000fcc <goto_application+0x13c>)
 8000f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f14:	4a2d      	ldr	r2, [pc, #180]	; (8000fcc <goto_application+0x13c>)
 8000f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_GPIOB_CLK_DISABLE();
 8000f1e:	4b2b      	ldr	r3, [pc, #172]	; (8000fcc <goto_application+0x13c>)
 8000f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f24:	4a29      	ldr	r2, [pc, #164]	; (8000fcc <goto_application+0x13c>)
 8000f26:	f023 0302 	bic.w	r3, r3, #2
 8000f2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_HSEM_CLK_DISABLE();
 8000f2e:	4b27      	ldr	r3, [pc, #156]	; (8000fcc <goto_application+0x13c>)
 8000f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f34:	4a25      	ldr	r2, [pc, #148]	; (8000fcc <goto_application+0x13c>)
 8000f36:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	HAL_RCC_DeInit();
 8000f3e:	f001 f87d 	bl	800203c <HAL_RCC_DeInit>
	HAL_TIM_Base_DeInit(&htim6);
 8000f42:	4823      	ldr	r0, [pc, #140]	; (8000fd0 <goto_application+0x140>)
 8000f44:	f006 fc31 	bl	80077aa <HAL_TIM_Base_DeInit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f48:	b672      	cpsid	i
}
 8000f4a:	bf00      	nop
	/* Stop all interrupts */
	__disable_irq();

	/* TODO: Why 8 registers? */
	/* Disable IRQs */
	for (int i = 0; i < 8; i++) {
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	e009      	b.n	8000f66 <goto_application+0xd6>
		NVIC->ICER[i] = 0xFFFFFFFF;
 8000f52:	4a20      	ldr	r2, [pc, #128]	; (8000fd4 <goto_application+0x144>)
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	3320      	adds	r3, #32
 8000f58:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 8; i++) {
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	3301      	adds	r3, #1
 8000f64:	617b      	str	r3, [r7, #20]
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	2b07      	cmp	r3, #7
 8000f6a:	ddf2      	ble.n	8000f52 <goto_application+0xc2>
	}

	/* Clear pending IRQs */
	for (int i = 0; i < 8; i++) {
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	e009      	b.n	8000f86 <goto_application+0xf6>
		NVIC->ICPR[i] = 0xFFFFFFFF;
 8000f72:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <goto_application+0x144>)
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	3360      	adds	r3, #96	; 0x60
 8000f78:	f04f 31ff 	mov.w	r1, #4294967295
 8000f7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 8; i++) {
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	3301      	adds	r3, #1
 8000f84:	613b      	str	r3, [r7, #16]
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	2b07      	cmp	r3, #7
 8000f8a:	ddf2      	ble.n	8000f72 <goto_application+0xe2>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f8c:	b662      	cpsie	i
}
 8000f8e:	bf00      	nop

	/* Reenable all interrupts */
	__enable_irq();

	/* Disable Systick timer interrupt*/
	SysTick->CTRL = 0;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <goto_application+0x148>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f383 8814 	msr	CONTROL, r3
}
 8000fa0:	bf00      	nop
	/* TODO: Why is CR needed to be set to 0? */
	/* Change from PSP to MSP */
	__set_CONTROL(0);

	/* Set main stack pointer of application (also done in linkerscript by CubeMX) */
	__set_MSP((*(volatile uint32_t *) APP_FLASH_ADDR));
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <goto_application+0x14c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	f383 8808 	msr	MSP, r3
}
 8000fae:	bf00      	nop

	/* Call app reset handler */
	app_reset_hanlder();
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4798      	blx	r3
}
 8000fb4:	bf00      	nop
 8000fb6:	3718      	adds	r7, #24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	08017e90 	.word	0x08017e90
 8000fc0:	08040004 	.word	0x08040004
 8000fc4:	24012164 	.word	0x24012164
 8000fc8:	240121e0 	.word	0x240121e0
 8000fcc:	58024400 	.word	0x58024400
 8000fd0:	24012274 	.word	0x24012274
 8000fd4:	e000e100 	.word	0xe000e100
 8000fd8:	e000e010 	.word	0xe000e010
 8000fdc:	08040000 	.word	0x08040000

08000fe0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d101      	bne.n	8000ff6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ff2:	f000 fb19 	bl	8001628 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40001000 	.word	0x40001000

08001004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001008:	b672      	cpsid	i
}
 800100a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800100c:	e7fe      	b.n	800100c <Error_Handler+0x8>
	...

08001010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <HAL_MspInit+0x30>)
 8001018:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800101c:	4a08      	ldr	r2, [pc, #32]	; (8001040 <HAL_MspInit+0x30>)
 800101e:	f043 0302 	orr.w	r3, r3, #2
 8001022:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_MspInit+0x30>)
 8001028:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	58024400 	.word	0x58024400

08001044 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b0be      	sub	sp, #248	; 0xf8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800105c:	f107 0318 	add.w	r3, r7, #24
 8001060:	22c8      	movs	r2, #200	; 0xc8
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f015 fed5 	bl	8016e14 <memset>
  if(hsd->Instance==SDMMC1)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a3c      	ldr	r2, [pc, #240]	; (8001160 <HAL_SD_MspInit+0x11c>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d171      	bne.n	8001158 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001074:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001078:	f04f 0300 	mov.w	r3, #0
 800107c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001080:	2300      	movs	r3, #0
 8001082:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001084:	f107 0318 	add.w	r3, r7, #24
 8001088:	4618      	mov	r0, r3
 800108a:	f002 f993 	bl	80033b4 <HAL_RCCEx_PeriphCLKConfig>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8001094:	f7ff ffb6 	bl	8001004 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001098:	4b32      	ldr	r3, [pc, #200]	; (8001164 <HAL_SD_MspInit+0x120>)
 800109a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800109e:	4a31      	ldr	r2, [pc, #196]	; (8001164 <HAL_SD_MspInit+0x120>)
 80010a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a4:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80010a8:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <HAL_SD_MspInit+0x120>)
 80010aa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80010ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010b6:	4b2b      	ldr	r3, [pc, #172]	; (8001164 <HAL_SD_MspInit+0x120>)
 80010b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010bc:	4a29      	ldr	r2, [pc, #164]	; (8001164 <HAL_SD_MspInit+0x120>)
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010c6:	4b27      	ldr	r3, [pc, #156]	; (8001164 <HAL_SD_MspInit+0x120>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d4:	4b23      	ldr	r3, [pc, #140]	; (8001164 <HAL_SD_MspInit+0x120>)
 80010d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010da:	4a22      	ldr	r2, [pc, #136]	; (8001164 <HAL_SD_MspInit+0x120>)
 80010dc:	f043 0308 	orr.w	r3, r3, #8
 80010e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e4:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <HAL_SD_MspInit+0x120>)
 80010e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ea:	f003 0308 	and.w	r3, r3, #8
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin;
 80010f2:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 80010f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001106:	2303      	movs	r3, #3
 8001108:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800110c:	230c      	movs	r3, #12
 800110e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001112:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001116:	4619      	mov	r1, r3
 8001118:	4813      	ldr	r0, [pc, #76]	; (8001168 <HAL_SD_MspInit+0x124>)
 800111a:	f000 fbe7 	bl	80018ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 800111e:	2304      	movs	r3, #4
 8001120:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001136:	230c      	movs	r3, #12
 8001138:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 800113c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001140:	4619      	mov	r1, r3
 8001142:	480a      	ldr	r0, [pc, #40]	; (800116c <HAL_SD_MspInit+0x128>)
 8001144:	f000 fbd2 	bl	80018ec <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001148:	2200      	movs	r2, #0
 800114a:	2100      	movs	r1, #0
 800114c:	2031      	movs	r0, #49	; 0x31
 800114e:	f000 fb97 	bl	8001880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001152:	2031      	movs	r0, #49	; 0x31
 8001154:	f000 fbae 	bl	80018b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001158:	bf00      	nop
 800115a:	37f8      	adds	r7, #248	; 0xf8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	52007000 	.word	0x52007000
 8001164:	58024400 	.word	0x58024400
 8001168:	58020800 	.word	0x58020800
 800116c:	58020c00 	.word	0x58020c00

08001170 <HAL_SD_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspDeInit(SD_HandleTypeDef* hsd)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  if(hsd->Instance==SDMMC1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <HAL_SD_MspDeInit+0x44>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d113      	bne.n	80011aa <HAL_SD_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN SDMMC1_MspDeInit 0 */

  /* USER CODE END SDMMC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <HAL_SD_MspDeInit+0x48>)
 8001184:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001188:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <HAL_SD_MspDeInit+0x48>)
 800118a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800118e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    HAL_GPIO_DeInit(GPIOC, SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin);
 8001192:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8001196:	4809      	ldr	r0, [pc, #36]	; (80011bc <HAL_SD_MspDeInit+0x4c>)
 8001198:	f000 fd58 	bl	8001c4c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SDIO1_CMD_GPIO_Port, SDIO1_CMD_Pin);
 800119c:	2104      	movs	r1, #4
 800119e:	4808      	ldr	r0, [pc, #32]	; (80011c0 <HAL_SD_MspDeInit+0x50>)
 80011a0:	f000 fd54 	bl	8001c4c <HAL_GPIO_DeInit>

    /* SDMMC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 80011a4:	2031      	movs	r0, #49	; 0x31
 80011a6:	f000 fb93 	bl	80018d0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SDMMC1_MspDeInit 1 */

  /* USER CODE END SDMMC1_MspDeInit 1 */
  }

}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	52007000 	.word	0x52007000
 80011b8:	58024400 	.word	0x58024400
 80011bc:	58020800 	.word	0x58020800
 80011c0:	58020c00 	.word	0x58020c00

080011c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b0bc      	sub	sp, #240	; 0xf0
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	22c8      	movs	r2, #200	; 0xc8
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f015 fe15 	bl	8016e14 <memset>
  if(huart->Instance==USART1)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a27      	ldr	r2, [pc, #156]	; (800128c <HAL_UART_MspInit+0xc8>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d146      	bne.n	8001282 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011f4:	f04f 0201 	mov.w	r2, #1
 80011f8:	f04f 0300 	mov.w	r3, #0
 80011fc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001206:	f107 0310 	add.w	r3, r7, #16
 800120a:	4618      	mov	r0, r3
 800120c:	f002 f8d2 	bl	80033b4 <HAL_RCCEx_PeriphCLKConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001216:	f7ff fef5 	bl	8001004 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800121a:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <HAL_UART_MspInit+0xcc>)
 800121c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001220:	4a1b      	ldr	r2, [pc, #108]	; (8001290 <HAL_UART_MspInit+0xcc>)
 8001222:	f043 0310 	orr.w	r3, r3, #16
 8001226:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <HAL_UART_MspInit+0xcc>)
 800122c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001230:	f003 0310 	and.w	r3, r3, #16
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <HAL_UART_MspInit+0xcc>)
 800123a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123e:	4a14      	ldr	r2, [pc, #80]	; (8001290 <HAL_UART_MspInit+0xcc>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <HAL_UART_MspInit+0xcc>)
 800124a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001256:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800125a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001264:	2300      	movs	r3, #0
 8001266:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2300      	movs	r3, #0
 800126c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001270:	2307      	movs	r3, #7
 8001272:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001276:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800127a:	4619      	mov	r1, r3
 800127c:	4805      	ldr	r0, [pc, #20]	; (8001294 <HAL_UART_MspInit+0xd0>)
 800127e:	f000 fb35 	bl	80018ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001282:	bf00      	nop
 8001284:	37f0      	adds	r7, #240	; 0xf0
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40011000 	.word	0x40011000
 8001290:	58024400 	.word	0x58024400
 8001294:	58020000 	.word	0x58020000

08001298 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a09      	ldr	r2, [pc, #36]	; (80012cc <HAL_UART_MspDeInit+0x34>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d10c      	bne.n	80012c4 <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <HAL_UART_MspDeInit+0x38>)
 80012ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012b0:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <HAL_UART_MspDeInit+0x38>)
 80012b2:	f023 0310 	bic.w	r3, r3, #16
 80012b6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, STLINK_TX_Pin|STLINK_RX_Pin);
 80012ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <HAL_UART_MspDeInit+0x3c>)
 80012c0:	f000 fcc4 	bl	8001c4c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40011000 	.word	0x40011000
 80012d0:	58024400 	.word	0x58024400
 80012d4:	58020000 	.word	0x58020000

080012d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b090      	sub	sp, #64	; 0x40
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2b0f      	cmp	r3, #15
 80012e4:	d827      	bhi.n	8001336 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80012e6:	2200      	movs	r2, #0
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	2036      	movs	r0, #54	; 0x36
 80012ec:	f000 fac8 	bl	8001880 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012f0:	2036      	movs	r0, #54	; 0x36
 80012f2:	f000 fadf 	bl	80018b4 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80012f6:	4a29      	ldr	r2, [pc, #164]	; (800139c <HAL_InitTick+0xc4>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012fc:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <HAL_InitTick+0xc8>)
 80012fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001302:	4a27      	ldr	r2, [pc, #156]	; (80013a0 <HAL_InitTick+0xc8>)
 8001304:	f043 0310 	orr.w	r3, r3, #16
 8001308:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800130c:	4b24      	ldr	r3, [pc, #144]	; (80013a0 <HAL_InitTick+0xc8>)
 800130e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001312:	f003 0310 	and.w	r3, r3, #16
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800131a:	f107 0210 	add.w	r2, r7, #16
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f002 f803 	bl	8003330 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800132a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800132e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001330:	2b00      	cmp	r3, #0
 8001332:	d106      	bne.n	8001342 <HAL_InitTick+0x6a>
 8001334:	e001      	b.n	800133a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e02b      	b.n	8001392 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800133a:	f001 ffcd 	bl	80032d8 <HAL_RCC_GetPCLK1Freq>
 800133e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001340:	e004      	b.n	800134c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001342:	f001 ffc9 	bl	80032d8 <HAL_RCC_GetPCLK1Freq>
 8001346:	4603      	mov	r3, r0
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800134c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800134e:	4a15      	ldr	r2, [pc, #84]	; (80013a4 <HAL_InitTick+0xcc>)
 8001350:	fba2 2303 	umull	r2, r3, r2, r3
 8001354:	0c9b      	lsrs	r3, r3, #18
 8001356:	3b01      	subs	r3, #1
 8001358:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800135a:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <HAL_InitTick+0xd0>)
 800135c:	4a13      	ldr	r2, [pc, #76]	; (80013ac <HAL_InitTick+0xd4>)
 800135e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001360:	4b11      	ldr	r3, [pc, #68]	; (80013a8 <HAL_InitTick+0xd0>)
 8001362:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001366:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001368:	4a0f      	ldr	r2, [pc, #60]	; (80013a8 <HAL_InitTick+0xd0>)
 800136a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800136c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800136e:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <HAL_InitTick+0xd0>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <HAL_InitTick+0xd0>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800137a:	480b      	ldr	r0, [pc, #44]	; (80013a8 <HAL_InitTick+0xd0>)
 800137c:	f006 f9be 	bl	80076fc <HAL_TIM_Base_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d104      	bne.n	8001390 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001386:	4808      	ldr	r0, [pc, #32]	; (80013a8 <HAL_InitTick+0xd0>)
 8001388:	f006 fa80 	bl	800788c <HAL_TIM_Base_Start_IT>
 800138c:	4603      	mov	r3, r0
 800138e:	e000      	b.n	8001392 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
}
 8001392:	4618      	mov	r0, r3
 8001394:	3740      	adds	r7, #64	; 0x40
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	24000008 	.word	0x24000008
 80013a0:	58024400 	.word	0x58024400
 80013a4:	431bde83 	.word	0x431bde83
 80013a8:	24012274 	.word	0x24012274
 80013ac:	40001000 	.word	0x40001000

080013b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <NMI_Handler+0x4>

080013b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <HardFault_Handler+0x4>

080013bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <MemManage_Handler+0x4>

080013c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c6:	e7fe      	b.n	80013c6 <BusFault_Handler+0x4>

080013c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013cc:	e7fe      	b.n	80013cc <UsageFault_Handler+0x4>

080013ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(uSD_Detect_Pin);
 80013e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013e4:	f000 fd87 	bl	8001ef6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}

080013ec <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80013f0:	4802      	ldr	r0, [pc, #8]	; (80013fc <SDMMC1_IRQHandler+0x10>)
 80013f2:	f004 ffad 	bl	8006350 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	24012164 	.word	0x24012164

08001400 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001404:	4802      	ldr	r0, [pc, #8]	; (8001410 <TIM6_DAC_IRQHandler+0x10>)
 8001406:	f006 fab9 	bl	800797c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	24012274 	.word	0x24012274

08001414 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	e00a      	b.n	800143c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001426:	f3af 8000 	nop.w
 800142a:	4601      	mov	r1, r0
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	1c5a      	adds	r2, r3, #1
 8001430:	60ba      	str	r2, [r7, #8]
 8001432:	b2ca      	uxtb	r2, r1
 8001434:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3301      	adds	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	429a      	cmp	r2, r3
 8001442:	dbf0      	blt.n	8001426 <_read+0x12>
  }

  return len;
 8001444:	687b      	ldr	r3, [r7, #4]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	e009      	b.n	8001474 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	60ba      	str	r2, [r7, #8]
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fcff 	bl	8000e6c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	3301      	adds	r3, #1
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	429a      	cmp	r2, r3
 800147a:	dbf1      	blt.n	8001460 <_write+0x12>
  }
  return len;
 800147c:	687b      	ldr	r3, [r7, #4]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <_close>:

int _close(int file)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014ae:	605a      	str	r2, [r3, #4]
  return 0;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <_isatty>:

int _isatty(int file)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014c6:	2301      	movs	r3, #1
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f8:	4a14      	ldr	r2, [pc, #80]	; (800154c <_sbrk+0x5c>)
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <_sbrk+0x60>)
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d102      	bne.n	8001512 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <_sbrk+0x64>)
 800150e:	4a12      	ldr	r2, [pc, #72]	; (8001558 <_sbrk+0x68>)
 8001510:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	429a      	cmp	r2, r3
 800151e:	d207      	bcs.n	8001530 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001520:	f015 fc40 	bl	8016da4 <__errno>
 8001524:	4603      	mov	r3, r0
 8001526:	220c      	movs	r2, #12
 8001528:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	e009      	b.n	8001544 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <_sbrk+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001536:	4b07      	ldr	r3, [pc, #28]	; (8001554 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	4a05      	ldr	r2, [pc, #20]	; (8001554 <_sbrk+0x64>)
 8001540:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001542:	68fb      	ldr	r3, [r7, #12]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	24080000 	.word	0x24080000
 8001550:	00000400 	.word	0x00000400
 8001554:	240122c0 	.word	0x240122c0
 8001558:	24015538 	.word	0x24015538

0800155c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800155c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001594 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001560:	f7ff f9f2 	bl	8000948 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001564:	480c      	ldr	r0, [pc, #48]	; (8001598 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001566:	490d      	ldr	r1, [pc, #52]	; (800159c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001568:	4a0d      	ldr	r2, [pc, #52]	; (80015a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800156a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800156c:	e002      	b.n	8001574 <LoopCopyDataInit>

0800156e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800156e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001570:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001572:	3304      	adds	r3, #4

08001574 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001574:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001576:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001578:	d3f9      	bcc.n	800156e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800157c:	4c0a      	ldr	r4, [pc, #40]	; (80015a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001580:	e001      	b.n	8001586 <LoopFillZerobss>

08001582 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001582:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001584:	3204      	adds	r2, #4

08001586 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001586:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001588:	d3fb      	bcc.n	8001582 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800158a:	f015 fc11 	bl	8016db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800158e:	f7ff fa85 	bl	8000a9c <main>
  bx  lr
 8001592:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001594:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001598:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800159c:	240000d4 	.word	0x240000d4
  ldr r2, =_sidata
 80015a0:	0801805c 	.word	0x0801805c
  ldr r2, =_sbss
 80015a4:	240000e0 	.word	0x240000e0
  ldr r4, =_ebss
 80015a8:	24015534 	.word	0x24015534

080015ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015ac:	e7fe      	b.n	80015ac <ADC3_IRQHandler>
	...

080015b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b6:	2003      	movs	r0, #3
 80015b8:	f000 f957 	bl	800186a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80015bc:	f001 fce2 	bl	8002f84 <HAL_RCC_GetSysClockFreq>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <HAL_Init+0x68>)
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	0a1b      	lsrs	r3, r3, #8
 80015c8:	f003 030f 	and.w	r3, r3, #15
 80015cc:	4913      	ldr	r1, [pc, #76]	; (800161c <HAL_Init+0x6c>)
 80015ce:	5ccb      	ldrb	r3, [r1, r3]
 80015d0:	f003 031f 	and.w	r3, r3, #31
 80015d4:	fa22 f303 	lsr.w	r3, r2, r3
 80015d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80015da:	4b0f      	ldr	r3, [pc, #60]	; (8001618 <HAL_Init+0x68>)
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	4a0e      	ldr	r2, [pc, #56]	; (800161c <HAL_Init+0x6c>)
 80015e4:	5cd3      	ldrb	r3, [r2, r3]
 80015e6:	f003 031f 	and.w	r3, r3, #31
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	fa22 f303 	lsr.w	r3, r2, r3
 80015f0:	4a0b      	ldr	r2, [pc, #44]	; (8001620 <HAL_Init+0x70>)
 80015f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80015f4:	4a0b      	ldr	r2, [pc, #44]	; (8001624 <HAL_Init+0x74>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015fa:	200f      	movs	r0, #15
 80015fc:	f7ff fe6c 	bl	80012d8 <HAL_InitTick>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e002      	b.n	8001610 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800160a:	f7ff fd01 	bl	8001010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	58024400 	.word	0x58024400
 800161c:	08017f7c 	.word	0x08017f7c
 8001620:	24000004 	.word	0x24000004
 8001624:	24000000 	.word	0x24000000

08001628 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_IncTick+0x20>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	461a      	mov	r2, r3
 8001632:	4b06      	ldr	r3, [pc, #24]	; (800164c <HAL_IncTick+0x24>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4413      	add	r3, r2
 8001638:	4a04      	ldr	r2, [pc, #16]	; (800164c <HAL_IncTick+0x24>)
 800163a:	6013      	str	r3, [r2, #0]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	2400000c 	.word	0x2400000c
 800164c:	240122c4 	.word	0x240122c4

08001650 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  return uwTick;
 8001654:	4b03      	ldr	r3, [pc, #12]	; (8001664 <HAL_GetTick+0x14>)
 8001656:	681b      	ldr	r3, [r3, #0]
}
 8001658:	4618      	mov	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	240122c4 	.word	0x240122c4

08001668 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001670:	f7ff ffee 	bl	8001650 <HAL_GetTick>
 8001674:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001680:	d005      	beq.n	800168e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001682:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <HAL_Delay+0x44>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4413      	add	r3, r2
 800168c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800168e:	bf00      	nop
 8001690:	f7ff ffde 	bl	8001650 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	429a      	cmp	r2, r3
 800169e:	d8f7      	bhi.n	8001690 <HAL_Delay+0x28>
  {
  }
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	2400000c 	.word	0x2400000c

080016b0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <HAL_GetREVID+0x14>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	0c1b      	lsrs	r3, r3, #16
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	5c001000 	.word	0x5c001000

080016c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <__NVIC_SetPriorityGrouping+0x40>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e4:	4013      	ands	r3, r2
 80016e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f6:	4a04      	ldr	r2, [pc, #16]	; (8001708 <__NVIC_SetPriorityGrouping+0x40>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	60d3      	str	r3, [r2, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00
 800170c:	05fa0000 	.word	0x05fa0000

08001710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <__NVIC_GetPriorityGrouping+0x18>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	f003 0307 	and.w	r3, r3, #7
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001736:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800173a:	2b00      	cmp	r3, #0
 800173c:	db0b      	blt.n	8001756 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173e:	88fb      	ldrh	r3, [r7, #6]
 8001740:	f003 021f 	and.w	r2, r3, #31
 8001744:	4907      	ldr	r1, [pc, #28]	; (8001764 <__NVIC_EnableIRQ+0x38>)
 8001746:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	2001      	movs	r0, #1
 800174e:	fa00 f202 	lsl.w	r2, r0, r2
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000e100 	.word	0xe000e100

08001768 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001772:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001776:	2b00      	cmp	r3, #0
 8001778:	db12      	blt.n	80017a0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800177a:	88fb      	ldrh	r3, [r7, #6]
 800177c:	f003 021f 	and.w	r2, r3, #31
 8001780:	490a      	ldr	r1, [pc, #40]	; (80017ac <__NVIC_DisableIRQ+0x44>)
 8001782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001786:	095b      	lsrs	r3, r3, #5
 8001788:	2001      	movs	r0, #1
 800178a:	fa00 f202 	lsl.w	r2, r0, r2
 800178e:	3320      	adds	r3, #32
 8001790:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001794:	f3bf 8f4f 	dsb	sy
}
 8001798:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800179a:	f3bf 8f6f 	isb	sy
}
 800179e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr
 80017ac:	e000e100 	.word	0xe000e100

080017b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4603      	mov	r3, r0
 80017b8:	6039      	str	r1, [r7, #0]
 80017ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80017bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	db0a      	blt.n	80017da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	b2da      	uxtb	r2, r3
 80017c8:	490c      	ldr	r1, [pc, #48]	; (80017fc <__NVIC_SetPriority+0x4c>)
 80017ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ce:	0112      	lsls	r2, r2, #4
 80017d0:	b2d2      	uxtb	r2, r2
 80017d2:	440b      	add	r3, r1
 80017d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d8:	e00a      	b.n	80017f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	b2da      	uxtb	r2, r3
 80017de:	4908      	ldr	r1, [pc, #32]	; (8001800 <__NVIC_SetPriority+0x50>)
 80017e0:	88fb      	ldrh	r3, [r7, #6]
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	3b04      	subs	r3, #4
 80017e8:	0112      	lsls	r2, r2, #4
 80017ea:	b2d2      	uxtb	r2, r2
 80017ec:	440b      	add	r3, r1
 80017ee:	761a      	strb	r2, [r3, #24]
}
 80017f0:	bf00      	nop
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000e100 	.word	0xe000e100
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001804:	b480      	push	{r7}
 8001806:	b089      	sub	sp, #36	; 0x24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f1c3 0307 	rsb	r3, r3, #7
 800181e:	2b04      	cmp	r3, #4
 8001820:	bf28      	it	cs
 8001822:	2304      	movcs	r3, #4
 8001824:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3304      	adds	r3, #4
 800182a:	2b06      	cmp	r3, #6
 800182c:	d902      	bls.n	8001834 <NVIC_EncodePriority+0x30>
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	3b03      	subs	r3, #3
 8001832:	e000      	b.n	8001836 <NVIC_EncodePriority+0x32>
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001838:	f04f 32ff 	mov.w	r2, #4294967295
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43da      	mvns	r2, r3
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	401a      	ands	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800184c:	f04f 31ff 	mov.w	r1, #4294967295
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	fa01 f303 	lsl.w	r3, r1, r3
 8001856:	43d9      	mvns	r1, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800185c:	4313      	orrs	r3, r2
         );
}
 800185e:	4618      	mov	r0, r3
 8001860:	3724      	adds	r7, #36	; 0x24
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b082      	sub	sp, #8
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7ff ff28 	bl	80016c8 <__NVIC_SetPriorityGrouping>
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	60b9      	str	r1, [r7, #8]
 800188a:	607a      	str	r2, [r7, #4]
 800188c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800188e:	f7ff ff3f 	bl	8001710 <__NVIC_GetPriorityGrouping>
 8001892:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	68b9      	ldr	r1, [r7, #8]
 8001898:	6978      	ldr	r0, [r7, #20]
 800189a:	f7ff ffb3 	bl	8001804 <NVIC_EncodePriority>
 800189e:	4602      	mov	r2, r0
 80018a0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018a4:	4611      	mov	r1, r2
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7ff ff82 	bl	80017b0 <__NVIC_SetPriority>
}
 80018ac:	bf00      	nop
 80018ae:	3718      	adds	r7, #24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff ff32 	bl	800172c <__NVIC_EnableIRQ>
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80018da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff ff42 	bl	8001768 <__NVIC_DisableIRQ>
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	; 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80018fa:	4b89      	ldr	r3, [pc, #548]	; (8001b20 <HAL_GPIO_Init+0x234>)
 80018fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80018fe:	e194      	b.n	8001c2a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	2101      	movs	r1, #1
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	fa01 f303 	lsl.w	r3, r1, r3
 800190c:	4013      	ands	r3, r2
 800190e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	2b00      	cmp	r3, #0
 8001914:	f000 8186 	beq.w	8001c24 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	2b01      	cmp	r3, #1
 8001922:	d005      	beq.n	8001930 <HAL_GPIO_Init+0x44>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d130      	bne.n	8001992 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	2203      	movs	r2, #3
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4013      	ands	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	68da      	ldr	r2, [r3, #12]
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001966:	2201      	movs	r2, #1
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	091b      	lsrs	r3, r3, #4
 800197c:	f003 0201 	and.w	r2, r3, #1
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 0303 	and.w	r3, r3, #3
 800199a:	2b03      	cmp	r3, #3
 800199c:	d017      	beq.n	80019ce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	2203      	movs	r2, #3
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	69ba      	ldr	r2, [r7, #24]
 80019b2:	4013      	ands	r3, r2
 80019b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d123      	bne.n	8001a22 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	08da      	lsrs	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3208      	adds	r2, #8
 80019e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	220f      	movs	r2, #15
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4013      	ands	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	691a      	ldr	r2, [r3, #16]
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	08da      	lsrs	r2, r3, #3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	3208      	adds	r2, #8
 8001a1c:	69b9      	ldr	r1, [r7, #24]
 8001a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0203 	and.w	r2, r3, #3
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f000 80e0 	beq.w	8001c24 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a64:	4b2f      	ldr	r3, [pc, #188]	; (8001b24 <HAL_GPIO_Init+0x238>)
 8001a66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a6a:	4a2e      	ldr	r2, [pc, #184]	; (8001b24 <HAL_GPIO_Init+0x238>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a74:	4b2b      	ldr	r3, [pc, #172]	; (8001b24 <HAL_GPIO_Init+0x238>)
 8001a76:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a82:	4a29      	ldr	r2, [pc, #164]	; (8001b28 <HAL_GPIO_Init+0x23c>)
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	089b      	lsrs	r3, r3, #2
 8001a88:	3302      	adds	r3, #2
 8001a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	220f      	movs	r2, #15
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a20      	ldr	r2, [pc, #128]	; (8001b2c <HAL_GPIO_Init+0x240>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d052      	beq.n	8001b54 <HAL_GPIO_Init+0x268>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a1f      	ldr	r2, [pc, #124]	; (8001b30 <HAL_GPIO_Init+0x244>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d031      	beq.n	8001b1a <HAL_GPIO_Init+0x22e>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a1e      	ldr	r2, [pc, #120]	; (8001b34 <HAL_GPIO_Init+0x248>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d02b      	beq.n	8001b16 <HAL_GPIO_Init+0x22a>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a1d      	ldr	r2, [pc, #116]	; (8001b38 <HAL_GPIO_Init+0x24c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d025      	beq.n	8001b12 <HAL_GPIO_Init+0x226>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a1c      	ldr	r2, [pc, #112]	; (8001b3c <HAL_GPIO_Init+0x250>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d01f      	beq.n	8001b0e <HAL_GPIO_Init+0x222>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a1b      	ldr	r2, [pc, #108]	; (8001b40 <HAL_GPIO_Init+0x254>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d019      	beq.n	8001b0a <HAL_GPIO_Init+0x21e>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a1a      	ldr	r2, [pc, #104]	; (8001b44 <HAL_GPIO_Init+0x258>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d013      	beq.n	8001b06 <HAL_GPIO_Init+0x21a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a19      	ldr	r2, [pc, #100]	; (8001b48 <HAL_GPIO_Init+0x25c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d00d      	beq.n	8001b02 <HAL_GPIO_Init+0x216>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a18      	ldr	r2, [pc, #96]	; (8001b4c <HAL_GPIO_Init+0x260>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d007      	beq.n	8001afe <HAL_GPIO_Init+0x212>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a17      	ldr	r2, [pc, #92]	; (8001b50 <HAL_GPIO_Init+0x264>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d101      	bne.n	8001afa <HAL_GPIO_Init+0x20e>
 8001af6:	2309      	movs	r3, #9
 8001af8:	e02d      	b.n	8001b56 <HAL_GPIO_Init+0x26a>
 8001afa:	230a      	movs	r3, #10
 8001afc:	e02b      	b.n	8001b56 <HAL_GPIO_Init+0x26a>
 8001afe:	2308      	movs	r3, #8
 8001b00:	e029      	b.n	8001b56 <HAL_GPIO_Init+0x26a>
 8001b02:	2307      	movs	r3, #7
 8001b04:	e027      	b.n	8001b56 <HAL_GPIO_Init+0x26a>
 8001b06:	2306      	movs	r3, #6
 8001b08:	e025      	b.n	8001b56 <HAL_GPIO_Init+0x26a>
 8001b0a:	2305      	movs	r3, #5
 8001b0c:	e023      	b.n	8001b56 <HAL_GPIO_Init+0x26a>
 8001b0e:	2304      	movs	r3, #4
 8001b10:	e021      	b.n	8001b56 <HAL_GPIO_Init+0x26a>
 8001b12:	2303      	movs	r3, #3
 8001b14:	e01f      	b.n	8001b56 <HAL_GPIO_Init+0x26a>
 8001b16:	2302      	movs	r3, #2
 8001b18:	e01d      	b.n	8001b56 <HAL_GPIO_Init+0x26a>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e01b      	b.n	8001b56 <HAL_GPIO_Init+0x26a>
 8001b1e:	bf00      	nop
 8001b20:	58000080 	.word	0x58000080
 8001b24:	58024400 	.word	0x58024400
 8001b28:	58000400 	.word	0x58000400
 8001b2c:	58020000 	.word	0x58020000
 8001b30:	58020400 	.word	0x58020400
 8001b34:	58020800 	.word	0x58020800
 8001b38:	58020c00 	.word	0x58020c00
 8001b3c:	58021000 	.word	0x58021000
 8001b40:	58021400 	.word	0x58021400
 8001b44:	58021800 	.word	0x58021800
 8001b48:	58021c00 	.word	0x58021c00
 8001b4c:	58022000 	.word	0x58022000
 8001b50:	58022400 	.word	0x58022400
 8001b54:	2300      	movs	r3, #0
 8001b56:	69fa      	ldr	r2, [r7, #28]
 8001b58:	f002 0203 	and.w	r2, r2, #3
 8001b5c:	0092      	lsls	r2, r2, #2
 8001b5e:	4093      	lsls	r3, r2
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b66:	4938      	ldr	r1, [pc, #224]	; (8001c48 <HAL_GPIO_Init+0x35c>)
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	089b      	lsrs	r3, r3, #2
 8001b6c:	3302      	adds	r3, #2
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001b9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001ba2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	43db      	mvns	r3, r3
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d003      	beq.n	8001bc8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001bc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	3301      	adds	r3, #1
 8001c28:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	fa22 f303 	lsr.w	r3, r2, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f47f ae63 	bne.w	8001900 <HAL_GPIO_Init+0x14>
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	bf00      	nop
 8001c3e:	3724      	adds	r7, #36	; 0x24
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	58000400 	.word	0x58000400

08001c4c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b087      	sub	sp, #28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c5a:	4b75      	ldr	r3, [pc, #468]	; (8001e30 <HAL_GPIO_DeInit+0x1e4>)
 8001c5c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8001c5e:	e0d9      	b.n	8001e14 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8001c60:	2201      	movs	r2, #1
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80cc 	beq.w	8001e0e <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001c76:	4a6f      	ldr	r2, [pc, #444]	; (8001e34 <HAL_GPIO_DeInit+0x1e8>)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c82:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	220f      	movs	r2, #15
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	4013      	ands	r3, r2
 8001c96:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a67      	ldr	r2, [pc, #412]	; (8001e38 <HAL_GPIO_DeInit+0x1ec>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d037      	beq.n	8001d10 <HAL_GPIO_DeInit+0xc4>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a66      	ldr	r2, [pc, #408]	; (8001e3c <HAL_GPIO_DeInit+0x1f0>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d031      	beq.n	8001d0c <HAL_GPIO_DeInit+0xc0>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a65      	ldr	r2, [pc, #404]	; (8001e40 <HAL_GPIO_DeInit+0x1f4>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d02b      	beq.n	8001d08 <HAL_GPIO_DeInit+0xbc>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a64      	ldr	r2, [pc, #400]	; (8001e44 <HAL_GPIO_DeInit+0x1f8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d025      	beq.n	8001d04 <HAL_GPIO_DeInit+0xb8>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a63      	ldr	r2, [pc, #396]	; (8001e48 <HAL_GPIO_DeInit+0x1fc>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d01f      	beq.n	8001d00 <HAL_GPIO_DeInit+0xb4>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a62      	ldr	r2, [pc, #392]	; (8001e4c <HAL_GPIO_DeInit+0x200>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d019      	beq.n	8001cfc <HAL_GPIO_DeInit+0xb0>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a61      	ldr	r2, [pc, #388]	; (8001e50 <HAL_GPIO_DeInit+0x204>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d013      	beq.n	8001cf8 <HAL_GPIO_DeInit+0xac>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a60      	ldr	r2, [pc, #384]	; (8001e54 <HAL_GPIO_DeInit+0x208>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d00d      	beq.n	8001cf4 <HAL_GPIO_DeInit+0xa8>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a5f      	ldr	r2, [pc, #380]	; (8001e58 <HAL_GPIO_DeInit+0x20c>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d007      	beq.n	8001cf0 <HAL_GPIO_DeInit+0xa4>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a5e      	ldr	r2, [pc, #376]	; (8001e5c <HAL_GPIO_DeInit+0x210>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d101      	bne.n	8001cec <HAL_GPIO_DeInit+0xa0>
 8001ce8:	2309      	movs	r3, #9
 8001cea:	e012      	b.n	8001d12 <HAL_GPIO_DeInit+0xc6>
 8001cec:	230a      	movs	r3, #10
 8001cee:	e010      	b.n	8001d12 <HAL_GPIO_DeInit+0xc6>
 8001cf0:	2308      	movs	r3, #8
 8001cf2:	e00e      	b.n	8001d12 <HAL_GPIO_DeInit+0xc6>
 8001cf4:	2307      	movs	r3, #7
 8001cf6:	e00c      	b.n	8001d12 <HAL_GPIO_DeInit+0xc6>
 8001cf8:	2306      	movs	r3, #6
 8001cfa:	e00a      	b.n	8001d12 <HAL_GPIO_DeInit+0xc6>
 8001cfc:	2305      	movs	r3, #5
 8001cfe:	e008      	b.n	8001d12 <HAL_GPIO_DeInit+0xc6>
 8001d00:	2304      	movs	r3, #4
 8001d02:	e006      	b.n	8001d12 <HAL_GPIO_DeInit+0xc6>
 8001d04:	2303      	movs	r3, #3
 8001d06:	e004      	b.n	8001d12 <HAL_GPIO_DeInit+0xc6>
 8001d08:	2302      	movs	r3, #2
 8001d0a:	e002      	b.n	8001d12 <HAL_GPIO_DeInit+0xc6>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <HAL_GPIO_DeInit+0xc6>
 8001d10:	2300      	movs	r3, #0
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	f002 0203 	and.w	r2, r2, #3
 8001d18:	0092      	lsls	r2, r2, #2
 8001d1a:	4093      	lsls	r3, r2
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d136      	bne.n	8001d90 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	401a      	ands	r2, r3
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	43db      	mvns	r3, r3
 8001d38:	401a      	ands	r2, r3
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	43db      	mvns	r3, r3
 8001d48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8001d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d5e:	4013      	ands	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	220f      	movs	r2, #15
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001d72:	4a30      	ldr	r2, [pc, #192]	; (8001e34 <HAL_GPIO_DeInit+0x1e8>)
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	089b      	lsrs	r3, r3, #2
 8001d78:	3302      	adds	r3, #2
 8001d7a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	43da      	mvns	r2, r3
 8001d82:	482c      	ldr	r0, [pc, #176]	; (8001e34 <HAL_GPIO_DeInit+0x1e8>)
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	089b      	lsrs	r3, r3, #2
 8001d88:	400a      	ands	r2, r1
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	2103      	movs	r1, #3
 8001d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9e:	431a      	orrs	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	08da      	lsrs	r2, r3, #3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3208      	adds	r2, #8
 8001dac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	220f      	movs	r2, #15
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	08d2      	lsrs	r2, r2, #3
 8001dc4:	4019      	ands	r1, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3208      	adds	r2, #8
 8001dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	2103      	movs	r1, #3
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	401a      	ands	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	2101      	movs	r1, #1
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	fa01 f303 	lsl.w	r3, r1, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	401a      	ands	r2, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	2103      	movs	r1, #3
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	401a      	ands	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	3301      	adds	r3, #1
 8001e12:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	fa22 f303 	lsr.w	r3, r2, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	f47f af1f 	bne.w	8001c60 <HAL_GPIO_DeInit+0x14>
  }
}
 8001e22:	bf00      	nop
 8001e24:	bf00      	nop
 8001e26:	371c      	adds	r7, #28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	58000080 	.word	0x58000080
 8001e34:	58000400 	.word	0x58000400
 8001e38:	58020000 	.word	0x58020000
 8001e3c:	58020400 	.word	0x58020400
 8001e40:	58020800 	.word	0x58020800
 8001e44:	58020c00 	.word	0x58020c00
 8001e48:	58021000 	.word	0x58021000
 8001e4c:	58021400 	.word	0x58021400
 8001e50:	58021800 	.word	0x58021800
 8001e54:	58021c00 	.word	0x58021c00
 8001e58:	58022000 	.word	0x58022000
 8001e5c:	58022400 	.word	0x58022400

08001e60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	460b      	mov	r3, r1
 8001e6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	887b      	ldrh	r3, [r7, #2]
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	73fb      	strb	r3, [r7, #15]
 8001e7c:	e001      	b.n	8001e82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	460b      	mov	r3, r1
 8001e9a:	807b      	strh	r3, [r7, #2]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ea0:	787b      	ldrb	r3, [r7, #1]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ea6:	887a      	ldrh	r2, [r7, #2]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001eac:	e003      	b.n	8001eb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001eae:	887b      	ldrh	r3, [r7, #2]
 8001eb0:	041a      	lsls	r2, r3, #16
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	619a      	str	r2, [r3, #24]
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b085      	sub	sp, #20
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ed4:	887a      	ldrh	r2, [r7, #2]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	041a      	lsls	r2, r3, #16
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	43d9      	mvns	r1, r3
 8001ee0:	887b      	ldrh	r3, [r7, #2]
 8001ee2:	400b      	ands	r3, r1
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	619a      	str	r2, [r3, #24]
}
 8001eea:	bf00      	nop
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8001f00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f04:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f08:	88fb      	ldrh	r3, [r7, #6]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d008      	beq.n	8001f22 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f14:	88fb      	ldrh	r3, [r7, #6]
 8001f16:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f1a:	88fb      	ldrh	r3, [r7, #6]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f008 f823 	bl	8009f68 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8001f22:	bf00      	nop
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001f34:	4a08      	ldr	r2, [pc, #32]	; (8001f58 <HAL_HSEM_FastTake+0x2c>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	3320      	adds	r3, #32
 8001f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3e:	4a07      	ldr	r2, [pc, #28]	; (8001f5c <HAL_HSEM_FastTake+0x30>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d101      	bne.n	8001f48 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	e000      	b.n	8001f4a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	58026400 	.word	0x58026400
 8001f5c:	80000300 	.word	0x80000300

08001f60 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001f6a:	4906      	ldr	r1, [pc, #24]	; (8001f84 <HAL_HSEM_Release+0x24>)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001f78:	bf00      	nop
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	58026400 	.word	0x58026400

08001f88 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001f90:	4b29      	ldr	r3, [pc, #164]	; (8002038 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	2b06      	cmp	r3, #6
 8001f9a:	d00a      	beq.n	8001fb2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001f9c:	4b26      	ldr	r3, [pc, #152]	; (8002038 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d001      	beq.n	8001fae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e040      	b.n	8002030 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e03e      	b.n	8002030 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001fb2:	4b21      	ldr	r3, [pc, #132]	; (8002038 <HAL_PWREx_ConfigSupply+0xb0>)
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001fba:	491f      	ldr	r1, [pc, #124]	; (8002038 <HAL_PWREx_ConfigSupply+0xb0>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001fc2:	f7ff fb45 	bl	8001650 <HAL_GetTick>
 8001fc6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001fc8:	e009      	b.n	8001fde <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001fca:	f7ff fb41 	bl	8001650 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fd8:	d901      	bls.n	8001fde <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e028      	b.n	8002030 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001fde:	4b16      	ldr	r3, [pc, #88]	; (8002038 <HAL_PWREx_ConfigSupply+0xb0>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fea:	d1ee      	bne.n	8001fca <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b1e      	cmp	r3, #30
 8001ff0:	d008      	beq.n	8002004 <HAL_PWREx_ConfigSupply+0x7c>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b2e      	cmp	r3, #46	; 0x2e
 8001ff6:	d005      	beq.n	8002004 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b1d      	cmp	r3, #29
 8001ffc:	d002      	beq.n	8002004 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b2d      	cmp	r3, #45	; 0x2d
 8002002:	d114      	bne.n	800202e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002004:	f7ff fb24 	bl	8001650 <HAL_GetTick>
 8002008:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800200a:	e009      	b.n	8002020 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800200c:	f7ff fb20 	bl	8001650 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800201a:	d901      	bls.n	8002020 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e007      	b.n	8002030 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002020:	4b05      	ldr	r3, [pc, #20]	; (8002038 <HAL_PWREx_ConfigSupply+0xb0>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202c:	d1ee      	bne.n	800200c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	58024800 	.word	0x58024800

0800203c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Increasing the CPU frequency */
  if (FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
 8002042:	4b89      	ldr	r3, [pc, #548]	; (8002268 <HAL_RCC_DeInit+0x22c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	2b06      	cmp	r3, #6
 800204c:	d80f      	bhi.n	800206e <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 800204e:	4b86      	ldr	r3, [pc, #536]	; (8002268 <HAL_RCC_DeInit+0x22c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 030f 	bic.w	r3, r3, #15
 8002056:	4a84      	ldr	r2, [pc, #528]	; (8002268 <HAL_RCC_DeInit+0x22c>)
 8002058:	f043 0307 	orr.w	r3, r3, #7
 800205c:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 800205e:	4b82      	ldr	r3, [pc, #520]	; (8002268 <HAL_RCC_DeInit+0x22c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	2b07      	cmp	r3, #7
 8002068:	d001      	beq.n	800206e <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e0f7      	b.n	800225e <HAL_RCC_DeInit+0x222>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800206e:	f7ff faef 	bl	8001650 <HAL_GetTick>
 8002072:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002074:	4b7d      	ldr	r3, [pc, #500]	; (800226c <HAL_RCC_DeInit+0x230>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a7c      	ldr	r2, [pc, #496]	; (800226c <HAL_RCC_DeInit+0x230>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002080:	e008      	b.n	8002094 <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002082:	f7ff fae5 	bl	8001650 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e0e4      	b.n	800225e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002094:	4b75      	ldr	r3, [pc, #468]	; (800226c <HAL_RCC_DeInit+0x230>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0f0      	beq.n	8002082 <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
 80020a0:	4b72      	ldr	r3, [pc, #456]	; (800226c <HAL_RCC_DeInit+0x230>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4a71      	ldr	r2, [pc, #452]	; (800226c <HAL_RCC_DeInit+0x230>)
 80020a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80020aa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80020ac:	4b6f      	ldr	r3, [pc, #444]	; (800226c <HAL_RCC_DeInit+0x230>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
 80020b2:	4b6f      	ldr	r3, [pc, #444]	; (8002270 <HAL_RCC_DeInit+0x234>)
 80020b4:	4a6f      	ldr	r2, [pc, #444]	; (8002274 <HAL_RCC_DeInit+0x238>)
 80020b6:	601a      	str	r2, [r3, #0]
  SystemD2Clock = HSI_VALUE;
 80020b8:	4b6f      	ldr	r3, [pc, #444]	; (8002278 <HAL_RCC_DeInit+0x23c>)
 80020ba:	4a6e      	ldr	r2, [pc, #440]	; (8002274 <HAL_RCC_DeInit+0x238>)
 80020bc:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020be:	4b6f      	ldr	r3, [pc, #444]	; (800227c <HAL_RCC_DeInit+0x240>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff f908 	bl	80012d8 <HAL_InitTick>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_RCC_DeInit+0x96>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e0c5      	b.n	800225e <HAL_RCC_DeInit+0x222>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80020d2:	f7ff fabd 	bl	8001650 <HAL_GetTick>
 80020d6:	6078      	str	r0, [r7, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 80020d8:	e00a      	b.n	80020f0 <HAL_RCC_DeInit+0xb4>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020da:	f7ff fab9 	bl	8001650 <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_DeInit+0xb4>
    {
      return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e0b6      	b.n	800225e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 80020f0:	4b5e      	ldr	r3, [pc, #376]	; (800226c <HAL_RCC_DeInit+0x230>)
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1ee      	bne.n	80020da <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80020fc:	f7ff faa8 	bl	8001650 <HAL_GetTick>
 8002100:	6078      	str	r0, [r7, #4]

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON | RCC_CR_HSIDIV | RCC_CR_HSIDIVF | RCC_CR_CSION | RCC_CR_CSIKERON  \
 8002102:	4b5a      	ldr	r3, [pc, #360]	; (800226c <HAL_RCC_DeInit+0x230>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	4959      	ldr	r1, [pc, #356]	; (800226c <HAL_RCC_DeInit+0x230>)
 8002108:	4b5d      	ldr	r3, [pc, #372]	; (8002280 <HAL_RCC_DeInit+0x244>)
 800210a:	4013      	ands	r3, r2
 800210c:	600b      	str	r3, [r1, #0]
            | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_DeInit+0xe6>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002110:	f7ff fa9e 	bl	8001650 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b64      	cmp	r3, #100	; 0x64
 800211c:	d901      	bls.n	8002122 <HAL_RCC_DeInit+0xe6>
    {
      return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e09d      	b.n	800225e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002122:	4b52      	ldr	r3, [pc, #328]	; (800226c <HAL_RCC_DeInit+0x230>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f0      	bne.n	8002110 <HAL_RCC_DeInit+0xd4>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800212e:	f7ff fa8f 	bl	8001650 <HAL_GetTick>
 8002132:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 8002134:	4b4d      	ldr	r3, [pc, #308]	; (800226c <HAL_RCC_DeInit+0x230>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a4c      	ldr	r2, [pc, #304]	; (800226c <HAL_RCC_DeInit+0x230>)
 800213a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800213e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002140:	e008      	b.n	8002154 <HAL_RCC_DeInit+0x118>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002142:	f7ff fa85 	bl	8001650 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_DeInit+0x118>
    {
      return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e084      	b.n	800225e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002154:	4b45      	ldr	r3, [pc, #276]	; (800226c <HAL_RCC_DeInit+0x230>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1f0      	bne.n	8002142 <HAL_RCC_DeInit+0x106>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002160:	f7ff fa76 	bl	8001650 <HAL_GetTick>
 8002164:	6078      	str	r0, [r7, #4]

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 8002166:	4b41      	ldr	r3, [pc, #260]	; (800226c <HAL_RCC_DeInit+0x230>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a40      	ldr	r2, [pc, #256]	; (800226c <HAL_RCC_DeInit+0x230>)
 800216c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002170:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_DeInit+0x14a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002174:	f7ff fa6c 	bl	8001650 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_DeInit+0x14a>
    {
      return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e06b      	b.n	800225e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 8002186:	4b39      	ldr	r3, [pc, #228]	; (800226c <HAL_RCC_DeInit+0x230>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f0      	bne.n	8002174 <HAL_RCC_DeInit+0x138>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002192:	f7ff fa5d 	bl	8001650 <HAL_GetTick>
 8002196:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 8002198:	4b34      	ldr	r3, [pc, #208]	; (800226c <HAL_RCC_DeInit+0x230>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a33      	ldr	r2, [pc, #204]	; (800226c <HAL_RCC_DeInit+0x230>)
 800219e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a2:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_DeInit+0x17c>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a6:	f7ff fa53 	bl	8001650 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_DeInit+0x17c>
    {
      return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e052      	b.n	800225e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 80021b8:	4b2c      	ldr	r3, [pc, #176]	; (800226c <HAL_RCC_DeInit+0x230>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f0      	bne.n	80021a6 <HAL_RCC_DeInit+0x16a>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
 80021c4:	4b29      	ldr	r3, [pc, #164]	; (800226c <HAL_RCC_DeInit+0x230>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
 80021ca:	4b28      	ldr	r3, [pc, #160]	; (800226c <HAL_RCC_DeInit+0x230>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
 80021d0:	4b26      	ldr	r3, [pc, #152]	; (800226c <HAL_RCC_DeInit+0x230>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR = RCC_PLLCKSELR_DIVM1_5 | RCC_PLLCKSELR_DIVM2_5 | RCC_PLLCKSELR_DIVM3_5;
 80021d6:	4b25      	ldr	r3, [pc, #148]	; (800226c <HAL_RCC_DeInit+0x230>)
 80021d8:	4a2a      	ldr	r2, [pc, #168]	; (8002284 <HAL_RCC_DeInit+0x248>)
 80021da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
 80021dc:	4b23      	ldr	r3, [pc, #140]	; (800226c <HAL_RCC_DeInit+0x230>)
 80021de:	4a2a      	ldr	r2, [pc, #168]	; (8002288 <HAL_RCC_DeInit+0x24c>)
 80021e0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR, 0x01010280U);
 80021e2:	4b22      	ldr	r3, [pc, #136]	; (800226c <HAL_RCC_DeInit+0x230>)
 80021e4:	4a29      	ldr	r2, [pc, #164]	; (800228c <HAL_RCC_DeInit+0x250>)
 80021e6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
 80021e8:	4b20      	ldr	r3, [pc, #128]	; (800226c <HAL_RCC_DeInit+0x230>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR, 0x01010280U);
 80021ee:	4b1f      	ldr	r3, [pc, #124]	; (800226c <HAL_RCC_DeInit+0x230>)
 80021f0:	4a26      	ldr	r2, [pc, #152]	; (800228c <HAL_RCC_DeInit+0x250>)
 80021f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
 80021f4:	4b1d      	ldr	r3, [pc, #116]	; (800226c <HAL_RCC_DeInit+0x230>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR, 0x01010280U);
 80021fa:	4b1c      	ldr	r3, [pc, #112]	; (800226c <HAL_RCC_DeInit+0x230>)
 80021fc:	4a23      	ldr	r2, [pc, #140]	; (800228c <HAL_RCC_DeInit+0x250>)
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
 8002200:	4b1a      	ldr	r3, [pc, #104]	; (800226c <HAL_RCC_DeInit+0x230>)
 8002202:	2200      	movs	r2, #0
 8002204:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset HSEEXT  */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
#endif /* RCC_CR_HSEEXT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002206:	4b19      	ldr	r3, [pc, #100]	; (800226c <HAL_RCC_DeInit+0x230>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a18      	ldr	r2, [pc, #96]	; (800226c <HAL_RCC_DeInit+0x230>)
 800220c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002210:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8002212:	4b16      	ldr	r3, [pc, #88]	; (800226c <HAL_RCC_DeInit+0x230>)
 8002214:	2200      	movs	r2, #0
 8002216:	661a      	str	r2, [r3, #96]	; 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8002218:	4b14      	ldr	r3, [pc, #80]	; (800226c <HAL_RCC_DeInit+0x230>)
 800221a:	f04f 32ff 	mov.w	r2, #4294967295
 800221e:	669a      	str	r2, [r3, #104]	; 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_RCC_DeInit+0x230>)
 8002222:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002226:	4a11      	ldr	r2, [pc, #68]	; (800226c <HAL_RCC_DeInit+0x230>)
 8002228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222c:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
 8002230:	4b0d      	ldr	r3, [pc, #52]	; (8002268 <HAL_RCC_DeInit+0x22c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00f      	beq.n	800225c <HAL_RCC_DeInit+0x220>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 800223c:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <HAL_RCC_DeInit+0x22c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f023 030f 	bic.w	r3, r3, #15
 8002244:	4a08      	ldr	r2, [pc, #32]	; (8002268 <HAL_RCC_DeInit+0x22c>)
 8002246:	f043 0307 	orr.w	r3, r3, #7
 800224a:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_RCC_DeInit+0x22c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 030f 	and.w	r3, r3, #15
 8002254:	2b07      	cmp	r3, #7
 8002256:	d001      	beq.n	800225c <HAL_RCC_DeInit+0x220>
    {
      return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <HAL_RCC_DeInit+0x222>
    }

  }

  return HAL_OK;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	52002000 	.word	0x52002000
 800226c:	58024400 	.word	0x58024400
 8002270:	24000000 	.word	0x24000000
 8002274:	03d09000 	.word	0x03d09000
 8002278:	24000004 	.word	0x24000004
 800227c:	24000008 	.word	0x24000008
 8002280:	fff6ed45 	.word	0xfff6ed45
 8002284:	02020200 	.word	0x02020200
 8002288:	01ff0000 	.word	0x01ff0000
 800228c:	01010280 	.word	0x01010280

08002290 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08c      	sub	sp, #48	; 0x30
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d102      	bne.n	80022a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	f000 bc48 	b.w	8002b34 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 8088 	beq.w	80023c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022b2:	4b99      	ldr	r3, [pc, #612]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022bc:	4b96      	ldr	r3, [pc, #600]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80022c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c4:	2b10      	cmp	r3, #16
 80022c6:	d007      	beq.n	80022d8 <HAL_RCC_OscConfig+0x48>
 80022c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ca:	2b18      	cmp	r3, #24
 80022cc:	d111      	bne.n	80022f2 <HAL_RCC_OscConfig+0x62>
 80022ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d10c      	bne.n	80022f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022d8:	4b8f      	ldr	r3, [pc, #572]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d06d      	beq.n	80023c0 <HAL_RCC_OscConfig+0x130>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d169      	bne.n	80023c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	f000 bc21 	b.w	8002b34 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fa:	d106      	bne.n	800230a <HAL_RCC_OscConfig+0x7a>
 80022fc:	4b86      	ldr	r3, [pc, #536]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a85      	ldr	r2, [pc, #532]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 8002302:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	e02e      	b.n	8002368 <HAL_RCC_OscConfig+0xd8>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d10c      	bne.n	800232c <HAL_RCC_OscConfig+0x9c>
 8002312:	4b81      	ldr	r3, [pc, #516]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a80      	ldr	r2, [pc, #512]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 8002318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800231c:	6013      	str	r3, [r2, #0]
 800231e:	4b7e      	ldr	r3, [pc, #504]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a7d      	ldr	r2, [pc, #500]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 8002324:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	e01d      	b.n	8002368 <HAL_RCC_OscConfig+0xd8>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002334:	d10c      	bne.n	8002350 <HAL_RCC_OscConfig+0xc0>
 8002336:	4b78      	ldr	r3, [pc, #480]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a77      	ldr	r2, [pc, #476]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 800233c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	4b75      	ldr	r3, [pc, #468]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a74      	ldr	r2, [pc, #464]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 8002348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	e00b      	b.n	8002368 <HAL_RCC_OscConfig+0xd8>
 8002350:	4b71      	ldr	r3, [pc, #452]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a70      	ldr	r2, [pc, #448]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 8002356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800235a:	6013      	str	r3, [r2, #0]
 800235c:	4b6e      	ldr	r3, [pc, #440]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a6d      	ldr	r2, [pc, #436]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 8002362:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002366:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d013      	beq.n	8002398 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002370:	f7ff f96e 	bl	8001650 <HAL_GetTick>
 8002374:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002378:	f7ff f96a 	bl	8001650 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b64      	cmp	r3, #100	; 0x64
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e3d4      	b.n	8002b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800238a:	4b63      	ldr	r3, [pc, #396]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0f0      	beq.n	8002378 <HAL_RCC_OscConfig+0xe8>
 8002396:	e014      	b.n	80023c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002398:	f7ff f95a 	bl	8001650 <HAL_GetTick>
 800239c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a0:	f7ff f956 	bl	8001650 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b64      	cmp	r3, #100	; 0x64
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e3c0      	b.n	8002b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023b2:	4b59      	ldr	r3, [pc, #356]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x110>
 80023be:	e000      	b.n	80023c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 80ca 	beq.w	8002564 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023d0:	4b51      	ldr	r3, [pc, #324]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023da:	4b4f      	ldr	r3, [pc, #316]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 80023dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023de:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d007      	beq.n	80023f6 <HAL_RCC_OscConfig+0x166>
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	2b18      	cmp	r3, #24
 80023ea:	d156      	bne.n	800249a <HAL_RCC_OscConfig+0x20a>
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d151      	bne.n	800249a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023f6:	4b48      	ldr	r3, [pc, #288]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0304 	and.w	r3, r3, #4
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d005      	beq.n	800240e <HAL_RCC_OscConfig+0x17e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e392      	b.n	8002b34 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800240e:	4b42      	ldr	r3, [pc, #264]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f023 0219 	bic.w	r2, r3, #25
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	493f      	ldr	r1, [pc, #252]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 800241c:	4313      	orrs	r3, r2
 800241e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002420:	f7ff f916 	bl	8001650 <HAL_GetTick>
 8002424:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002426:	e008      	b.n	800243a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002428:	f7ff f912 	bl	8001650 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d901      	bls.n	800243a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e37c      	b.n	8002b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800243a:	4b37      	ldr	r3, [pc, #220]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0304 	and.w	r3, r3, #4
 8002442:	2b00      	cmp	r3, #0
 8002444:	d0f0      	beq.n	8002428 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002446:	f7ff f933 	bl	80016b0 <HAL_GetREVID>
 800244a:	4603      	mov	r3, r0
 800244c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002450:	4293      	cmp	r3, r2
 8002452:	d817      	bhi.n	8002484 <HAL_RCC_OscConfig+0x1f4>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	2b40      	cmp	r3, #64	; 0x40
 800245a:	d108      	bne.n	800246e <HAL_RCC_OscConfig+0x1de>
 800245c:	4b2e      	ldr	r3, [pc, #184]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002464:	4a2c      	ldr	r2, [pc, #176]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 8002466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800246a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800246c:	e07a      	b.n	8002564 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800246e:	4b2a      	ldr	r3, [pc, #168]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	031b      	lsls	r3, r3, #12
 800247c:	4926      	ldr	r1, [pc, #152]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 800247e:	4313      	orrs	r3, r2
 8002480:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002482:	e06f      	b.n	8002564 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002484:	4b24      	ldr	r3, [pc, #144]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	061b      	lsls	r3, r3, #24
 8002492:	4921      	ldr	r1, [pc, #132]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 8002494:	4313      	orrs	r3, r2
 8002496:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002498:	e064      	b.n	8002564 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d047      	beq.n	8002532 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024a2:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 0219 	bic.w	r2, r3, #25
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	491a      	ldr	r1, [pc, #104]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7ff f8cc 	bl	8001650 <HAL_GetTick>
 80024b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024bc:	f7ff f8c8 	bl	8001650 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e332      	b.n	8002b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024ce:	4b12      	ldr	r3, [pc, #72]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024da:	f7ff f8e9 	bl	80016b0 <HAL_GetREVID>
 80024de:	4603      	mov	r3, r0
 80024e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d819      	bhi.n	800251c <HAL_RCC_OscConfig+0x28c>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	2b40      	cmp	r3, #64	; 0x40
 80024ee:	d108      	bne.n	8002502 <HAL_RCC_OscConfig+0x272>
 80024f0:	4b09      	ldr	r3, [pc, #36]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80024f8:	4a07      	ldr	r2, [pc, #28]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 80024fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024fe:	6053      	str	r3, [r2, #4]
 8002500:	e030      	b.n	8002564 <HAL_RCC_OscConfig+0x2d4>
 8002502:	4b05      	ldr	r3, [pc, #20]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	031b      	lsls	r3, r3, #12
 8002510:	4901      	ldr	r1, [pc, #4]	; (8002518 <HAL_RCC_OscConfig+0x288>)
 8002512:	4313      	orrs	r3, r2
 8002514:	604b      	str	r3, [r1, #4]
 8002516:	e025      	b.n	8002564 <HAL_RCC_OscConfig+0x2d4>
 8002518:	58024400 	.word	0x58024400
 800251c:	4b9a      	ldr	r3, [pc, #616]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	061b      	lsls	r3, r3, #24
 800252a:	4997      	ldr	r1, [pc, #604]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]
 8002530:	e018      	b.n	8002564 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002532:	4b95      	ldr	r3, [pc, #596]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a94      	ldr	r2, [pc, #592]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 8002538:	f023 0301 	bic.w	r3, r3, #1
 800253c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253e:	f7ff f887 	bl	8001650 <HAL_GetTick>
 8002542:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002544:	e008      	b.n	8002558 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002546:	f7ff f883 	bl	8001650 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e2ed      	b.n	8002b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002558:	4b8b      	ldr	r3, [pc, #556]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d1f0      	bne.n	8002546 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0310 	and.w	r3, r3, #16
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 80a9 	beq.w	80026c4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002572:	4b85      	ldr	r3, [pc, #532]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800257a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800257c:	4b82      	ldr	r3, [pc, #520]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 800257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002580:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	2b08      	cmp	r3, #8
 8002586:	d007      	beq.n	8002598 <HAL_RCC_OscConfig+0x308>
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	2b18      	cmp	r3, #24
 800258c:	d13a      	bne.n	8002604 <HAL_RCC_OscConfig+0x374>
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	2b01      	cmp	r3, #1
 8002596:	d135      	bne.n	8002604 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002598:	4b7b      	ldr	r3, [pc, #492]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <HAL_RCC_OscConfig+0x320>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	2b80      	cmp	r3, #128	; 0x80
 80025aa:	d001      	beq.n	80025b0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e2c1      	b.n	8002b34 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025b0:	f7ff f87e 	bl	80016b0 <HAL_GetREVID>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f241 0203 	movw	r2, #4099	; 0x1003
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d817      	bhi.n	80025ee <HAL_RCC_OscConfig+0x35e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	2b20      	cmp	r3, #32
 80025c4:	d108      	bne.n	80025d8 <HAL_RCC_OscConfig+0x348>
 80025c6:	4b70      	ldr	r3, [pc, #448]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80025ce:	4a6e      	ldr	r2, [pc, #440]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 80025d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025d4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025d6:	e075      	b.n	80026c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025d8:	4b6b      	ldr	r3, [pc, #428]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	069b      	lsls	r3, r3, #26
 80025e6:	4968      	ldr	r1, [pc, #416]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025ec:	e06a      	b.n	80026c4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025ee:	4b66      	ldr	r3, [pc, #408]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	061b      	lsls	r3, r3, #24
 80025fc:	4962      	ldr	r1, [pc, #392]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002602:	e05f      	b.n	80026c4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	69db      	ldr	r3, [r3, #28]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d042      	beq.n	8002692 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800260c:	4b5e      	ldr	r3, [pc, #376]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a5d      	ldr	r2, [pc, #372]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 8002612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002618:	f7ff f81a 	bl	8001650 <HAL_GetTick>
 800261c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002620:	f7ff f816 	bl	8001650 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e280      	b.n	8002b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002632:	4b55      	ldr	r3, [pc, #340]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800263e:	f7ff f837 	bl	80016b0 <HAL_GetREVID>
 8002642:	4603      	mov	r3, r0
 8002644:	f241 0203 	movw	r2, #4099	; 0x1003
 8002648:	4293      	cmp	r3, r2
 800264a:	d817      	bhi.n	800267c <HAL_RCC_OscConfig+0x3ec>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a1b      	ldr	r3, [r3, #32]
 8002650:	2b20      	cmp	r3, #32
 8002652:	d108      	bne.n	8002666 <HAL_RCC_OscConfig+0x3d6>
 8002654:	4b4c      	ldr	r3, [pc, #304]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800265c:	4a4a      	ldr	r2, [pc, #296]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 800265e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002662:	6053      	str	r3, [r2, #4]
 8002664:	e02e      	b.n	80026c4 <HAL_RCC_OscConfig+0x434>
 8002666:	4b48      	ldr	r3, [pc, #288]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a1b      	ldr	r3, [r3, #32]
 8002672:	069b      	lsls	r3, r3, #26
 8002674:	4944      	ldr	r1, [pc, #272]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 8002676:	4313      	orrs	r3, r2
 8002678:	604b      	str	r3, [r1, #4]
 800267a:	e023      	b.n	80026c4 <HAL_RCC_OscConfig+0x434>
 800267c:	4b42      	ldr	r3, [pc, #264]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	061b      	lsls	r3, r3, #24
 800268a:	493f      	ldr	r1, [pc, #252]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 800268c:	4313      	orrs	r3, r2
 800268e:	60cb      	str	r3, [r1, #12]
 8002690:	e018      	b.n	80026c4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002692:	4b3d      	ldr	r3, [pc, #244]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a3c      	ldr	r2, [pc, #240]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 8002698:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800269c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269e:	f7fe ffd7 	bl	8001650 <HAL_GetTick>
 80026a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026a6:	f7fe ffd3 	bl	8001650 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e23d      	b.n	8002b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026b8:	4b33      	ldr	r3, [pc, #204]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1f0      	bne.n	80026a6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0308 	and.w	r3, r3, #8
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d036      	beq.n	800273e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	695b      	ldr	r3, [r3, #20]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d019      	beq.n	800270c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d8:	4b2b      	ldr	r3, [pc, #172]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 80026da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026dc:	4a2a      	ldr	r2, [pc, #168]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e4:	f7fe ffb4 	bl	8001650 <HAL_GetTick>
 80026e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ec:	f7fe ffb0 	bl	8001650 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e21a      	b.n	8002b34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026fe:	4b22      	ldr	r3, [pc, #136]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 8002700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0x45c>
 800270a:	e018      	b.n	800273e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800270c:	4b1e      	ldr	r3, [pc, #120]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 800270e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002710:	4a1d      	ldr	r2, [pc, #116]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 8002712:	f023 0301 	bic.w	r3, r3, #1
 8002716:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002718:	f7fe ff9a 	bl	8001650 <HAL_GetTick>
 800271c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800271e:	e008      	b.n	8002732 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002720:	f7fe ff96 	bl	8001650 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d901      	bls.n	8002732 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e200      	b.n	8002b34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002732:	4b15      	ldr	r3, [pc, #84]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 8002734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1f0      	bne.n	8002720 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0320 	and.w	r3, r3, #32
 8002746:	2b00      	cmp	r3, #0
 8002748:	d039      	beq.n	80027be <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d01c      	beq.n	800278c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002752:	4b0d      	ldr	r3, [pc, #52]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a0c      	ldr	r2, [pc, #48]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 8002758:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800275c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800275e:	f7fe ff77 	bl	8001650 <HAL_GetTick>
 8002762:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002766:	f7fe ff73 	bl	8001650 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e1dd      	b.n	8002b34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002778:	4b03      	ldr	r3, [pc, #12]	; (8002788 <HAL_RCC_OscConfig+0x4f8>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0f0      	beq.n	8002766 <HAL_RCC_OscConfig+0x4d6>
 8002784:	e01b      	b.n	80027be <HAL_RCC_OscConfig+0x52e>
 8002786:	bf00      	nop
 8002788:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800278c:	4b9b      	ldr	r3, [pc, #620]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a9a      	ldr	r2, [pc, #616]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 8002792:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002796:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002798:	f7fe ff5a 	bl	8001650 <HAL_GetTick>
 800279c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027a0:	f7fe ff56 	bl	8001650 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e1c0      	b.n	8002b34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027b2:	4b92      	ldr	r3, [pc, #584]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f000 8081 	beq.w	80028ce <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80027cc:	4b8c      	ldr	r3, [pc, #560]	; (8002a00 <HAL_RCC_OscConfig+0x770>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a8b      	ldr	r2, [pc, #556]	; (8002a00 <HAL_RCC_OscConfig+0x770>)
 80027d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027d8:	f7fe ff3a 	bl	8001650 <HAL_GetTick>
 80027dc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027e0:	f7fe ff36 	bl	8001650 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b64      	cmp	r3, #100	; 0x64
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e1a0      	b.n	8002b34 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027f2:	4b83      	ldr	r3, [pc, #524]	; (8002a00 <HAL_RCC_OscConfig+0x770>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d106      	bne.n	8002814 <HAL_RCC_OscConfig+0x584>
 8002806:	4b7d      	ldr	r3, [pc, #500]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 8002808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280a:	4a7c      	ldr	r2, [pc, #496]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6713      	str	r3, [r2, #112]	; 0x70
 8002812:	e02d      	b.n	8002870 <HAL_RCC_OscConfig+0x5e0>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d10c      	bne.n	8002836 <HAL_RCC_OscConfig+0x5a6>
 800281c:	4b77      	ldr	r3, [pc, #476]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 800281e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002820:	4a76      	ldr	r2, [pc, #472]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 8002822:	f023 0301 	bic.w	r3, r3, #1
 8002826:	6713      	str	r3, [r2, #112]	; 0x70
 8002828:	4b74      	ldr	r3, [pc, #464]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 800282a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800282c:	4a73      	ldr	r2, [pc, #460]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 800282e:	f023 0304 	bic.w	r3, r3, #4
 8002832:	6713      	str	r3, [r2, #112]	; 0x70
 8002834:	e01c      	b.n	8002870 <HAL_RCC_OscConfig+0x5e0>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	2b05      	cmp	r3, #5
 800283c:	d10c      	bne.n	8002858 <HAL_RCC_OscConfig+0x5c8>
 800283e:	4b6f      	ldr	r3, [pc, #444]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002842:	4a6e      	ldr	r2, [pc, #440]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 8002844:	f043 0304 	orr.w	r3, r3, #4
 8002848:	6713      	str	r3, [r2, #112]	; 0x70
 800284a:	4b6c      	ldr	r3, [pc, #432]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284e:	4a6b      	ldr	r2, [pc, #428]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 8002850:	f043 0301 	orr.w	r3, r3, #1
 8002854:	6713      	str	r3, [r2, #112]	; 0x70
 8002856:	e00b      	b.n	8002870 <HAL_RCC_OscConfig+0x5e0>
 8002858:	4b68      	ldr	r3, [pc, #416]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 800285a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800285c:	4a67      	ldr	r2, [pc, #412]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 800285e:	f023 0301 	bic.w	r3, r3, #1
 8002862:	6713      	str	r3, [r2, #112]	; 0x70
 8002864:	4b65      	ldr	r3, [pc, #404]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 8002866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002868:	4a64      	ldr	r2, [pc, #400]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 800286a:	f023 0304 	bic.w	r3, r3, #4
 800286e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d015      	beq.n	80028a4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002878:	f7fe feea 	bl	8001650 <HAL_GetTick>
 800287c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800287e:	e00a      	b.n	8002896 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002880:	f7fe fee6 	bl	8001650 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	f241 3288 	movw	r2, #5000	; 0x1388
 800288e:	4293      	cmp	r3, r2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e14e      	b.n	8002b34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002896:	4b59      	ldr	r3, [pc, #356]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0ee      	beq.n	8002880 <HAL_RCC_OscConfig+0x5f0>
 80028a2:	e014      	b.n	80028ce <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a4:	f7fe fed4 	bl	8001650 <HAL_GetTick>
 80028a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028aa:	e00a      	b.n	80028c2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ac:	f7fe fed0 	bl	8001650 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d901      	bls.n	80028c2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e138      	b.n	8002b34 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028c2:	4b4e      	ldr	r3, [pc, #312]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1ee      	bne.n	80028ac <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 812d 	beq.w	8002b32 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80028d8:	4b48      	ldr	r3, [pc, #288]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028e0:	2b18      	cmp	r3, #24
 80028e2:	f000 80bd 	beq.w	8002a60 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	f040 809e 	bne.w	8002a2c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f0:	4b42      	ldr	r3, [pc, #264]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a41      	ldr	r2, [pc, #260]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 80028f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fc:	f7fe fea8 	bl	8001650 <HAL_GetTick>
 8002900:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002904:	f7fe fea4 	bl	8001650 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e10e      	b.n	8002b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002916:	4b39      	ldr	r3, [pc, #228]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f0      	bne.n	8002904 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002922:	4b36      	ldr	r3, [pc, #216]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 8002924:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002926:	4b37      	ldr	r3, [pc, #220]	; (8002a04 <HAL_RCC_OscConfig+0x774>)
 8002928:	4013      	ands	r3, r2
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002932:	0112      	lsls	r2, r2, #4
 8002934:	430a      	orrs	r2, r1
 8002936:	4931      	ldr	r1, [pc, #196]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 8002938:	4313      	orrs	r3, r2
 800293a:	628b      	str	r3, [r1, #40]	; 0x28
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	3b01      	subs	r3, #1
 8002942:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294a:	3b01      	subs	r3, #1
 800294c:	025b      	lsls	r3, r3, #9
 800294e:	b29b      	uxth	r3, r3
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002956:	3b01      	subs	r3, #1
 8002958:	041b      	lsls	r3, r3, #16
 800295a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002964:	3b01      	subs	r3, #1
 8002966:	061b      	lsls	r3, r3, #24
 8002968:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800296c:	4923      	ldr	r1, [pc, #140]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 800296e:	4313      	orrs	r3, r2
 8002970:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002972:	4b22      	ldr	r3, [pc, #136]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 8002974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002976:	4a21      	ldr	r2, [pc, #132]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 8002978:	f023 0301 	bic.w	r3, r3, #1
 800297c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800297e:	4b1f      	ldr	r3, [pc, #124]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 8002980:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002982:	4b21      	ldr	r3, [pc, #132]	; (8002a08 <HAL_RCC_OscConfig+0x778>)
 8002984:	4013      	ands	r3, r2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800298a:	00d2      	lsls	r2, r2, #3
 800298c:	491b      	ldr	r1, [pc, #108]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 800298e:	4313      	orrs	r3, r2
 8002990:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002992:	4b1a      	ldr	r3, [pc, #104]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002996:	f023 020c 	bic.w	r2, r3, #12
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	4917      	ldr	r1, [pc, #92]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80029a4:	4b15      	ldr	r3, [pc, #84]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	f023 0202 	bic.w	r2, r3, #2
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b0:	4912      	ldr	r1, [pc, #72]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80029b6:	4b11      	ldr	r3, [pc, #68]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 80029b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ba:	4a10      	ldr	r2, [pc, #64]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 80029bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029c2:	4b0e      	ldr	r3, [pc, #56]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 80029c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c6:	4a0d      	ldr	r2, [pc, #52]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 80029c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80029ce:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 80029d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d2:	4a0a      	ldr	r2, [pc, #40]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 80029d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80029da:	4b08      	ldr	r3, [pc, #32]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 80029dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029de:	4a07      	ldr	r2, [pc, #28]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e6:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a04      	ldr	r2, [pc, #16]	; (80029fc <HAL_RCC_OscConfig+0x76c>)
 80029ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f2:	f7fe fe2d 	bl	8001650 <HAL_GetTick>
 80029f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029f8:	e011      	b.n	8002a1e <HAL_RCC_OscConfig+0x78e>
 80029fa:	bf00      	nop
 80029fc:	58024400 	.word	0x58024400
 8002a00:	58024800 	.word	0x58024800
 8002a04:	fffffc0c 	.word	0xfffffc0c
 8002a08:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a0c:	f7fe fe20 	bl	8001650 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e08a      	b.n	8002b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a1e:	4b47      	ldr	r3, [pc, #284]	; (8002b3c <HAL_RCC_OscConfig+0x8ac>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0x77c>
 8002a2a:	e082      	b.n	8002b32 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2c:	4b43      	ldr	r3, [pc, #268]	; (8002b3c <HAL_RCC_OscConfig+0x8ac>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a42      	ldr	r2, [pc, #264]	; (8002b3c <HAL_RCC_OscConfig+0x8ac>)
 8002a32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7fe fe0a 	bl	8001650 <HAL_GetTick>
 8002a3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a40:	f7fe fe06 	bl	8001650 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e070      	b.n	8002b34 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a52:	4b3a      	ldr	r3, [pc, #232]	; (8002b3c <HAL_RCC_OscConfig+0x8ac>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x7b0>
 8002a5e:	e068      	b.n	8002b32 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a60:	4b36      	ldr	r3, [pc, #216]	; (8002b3c <HAL_RCC_OscConfig+0x8ac>)
 8002a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a64:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a66:	4b35      	ldr	r3, [pc, #212]	; (8002b3c <HAL_RCC_OscConfig+0x8ac>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d031      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f003 0203 	and.w	r2, r3, #3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d12a      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	091b      	lsrs	r3, r3, #4
 8002a86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d122      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d11a      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	0a5b      	lsrs	r3, r3, #9
 8002aa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d111      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	0c1b      	lsrs	r3, r3, #16
 8002ab8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d108      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	0e1b      	lsrs	r3, r3, #24
 8002aca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d001      	beq.n	8002adc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e02b      	b.n	8002b34 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002adc:	4b17      	ldr	r3, [pc, #92]	; (8002b3c <HAL_RCC_OscConfig+0x8ac>)
 8002ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ae0:	08db      	lsrs	r3, r3, #3
 8002ae2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ae6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d01f      	beq.n	8002b32 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002af2:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <HAL_RCC_OscConfig+0x8ac>)
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	4a11      	ldr	r2, [pc, #68]	; (8002b3c <HAL_RCC_OscConfig+0x8ac>)
 8002af8:	f023 0301 	bic.w	r3, r3, #1
 8002afc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002afe:	f7fe fda7 	bl	8001650 <HAL_GetTick>
 8002b02:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002b04:	bf00      	nop
 8002b06:	f7fe fda3 	bl	8001650 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d0f9      	beq.n	8002b06 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b12:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <HAL_RCC_OscConfig+0x8ac>)
 8002b14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b16:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <HAL_RCC_OscConfig+0x8b0>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002b1e:	00d2      	lsls	r2, r2, #3
 8002b20:	4906      	ldr	r1, [pc, #24]	; (8002b3c <HAL_RCC_OscConfig+0x8ac>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002b26:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <HAL_RCC_OscConfig+0x8ac>)
 8002b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b2a:	4a04      	ldr	r2, [pc, #16]	; (8002b3c <HAL_RCC_OscConfig+0x8ac>)
 8002b2c:	f043 0301 	orr.w	r3, r3, #1
 8002b30:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3730      	adds	r7, #48	; 0x30
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	58024400 	.word	0x58024400
 8002b40:	ffff0007 	.word	0xffff0007

08002b44 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e19c      	b.n	8002e92 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b58:	4b8a      	ldr	r3, [pc, #552]	; (8002d84 <HAL_RCC_ClockConfig+0x240>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d910      	bls.n	8002b88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b66:	4b87      	ldr	r3, [pc, #540]	; (8002d84 <HAL_RCC_ClockConfig+0x240>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f023 020f 	bic.w	r2, r3, #15
 8002b6e:	4985      	ldr	r1, [pc, #532]	; (8002d84 <HAL_RCC_ClockConfig+0x240>)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b76:	4b83      	ldr	r3, [pc, #524]	; (8002d84 <HAL_RCC_ClockConfig+0x240>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d001      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e184      	b.n	8002e92 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d010      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691a      	ldr	r2, [r3, #16]
 8002b98:	4b7b      	ldr	r3, [pc, #492]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d908      	bls.n	8002bb6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ba4:	4b78      	ldr	r3, [pc, #480]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691b      	ldr	r3, [r3, #16]
 8002bb0:	4975      	ldr	r1, [pc, #468]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d010      	beq.n	8002be4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695a      	ldr	r2, [r3, #20]
 8002bc6:	4b70      	ldr	r3, [pc, #448]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d908      	bls.n	8002be4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002bd2:	4b6d      	ldr	r3, [pc, #436]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	496a      	ldr	r1, [pc, #424]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d010      	beq.n	8002c12 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	699a      	ldr	r2, [r3, #24]
 8002bf4:	4b64      	ldr	r3, [pc, #400]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002bf6:	69db      	ldr	r3, [r3, #28]
 8002bf8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d908      	bls.n	8002c12 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c00:	4b61      	ldr	r3, [pc, #388]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	495e      	ldr	r1, [pc, #376]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0320 	and.w	r3, r3, #32
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d010      	beq.n	8002c40 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69da      	ldr	r2, [r3, #28]
 8002c22:	4b59      	ldr	r3, [pc, #356]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d908      	bls.n	8002c40 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c2e:	4b56      	ldr	r3, [pc, #344]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	4953      	ldr	r1, [pc, #332]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d010      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	4b4d      	ldr	r3, [pc, #308]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	f003 030f 	and.w	r3, r3, #15
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d908      	bls.n	8002c6e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c5c:	4b4a      	ldr	r3, [pc, #296]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	f023 020f 	bic.w	r2, r3, #15
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	4947      	ldr	r1, [pc, #284]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d055      	beq.n	8002d26 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c7a:	4b43      	ldr	r3, [pc, #268]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	4940      	ldr	r1, [pc, #256]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d107      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c94:	4b3c      	ldr	r3, [pc, #240]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d121      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e0f6      	b.n	8002e92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b03      	cmp	r3, #3
 8002caa:	d107      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cac:	4b36      	ldr	r3, [pc, #216]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d115      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e0ea      	b.n	8002e92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d107      	bne.n	8002cd4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cc4:	4b30      	ldr	r3, [pc, #192]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d109      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0de      	b.n	8002e92 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cd4:	4b2c      	ldr	r3, [pc, #176]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d101      	bne.n	8002ce4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0d6      	b.n	8002e92 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ce4:	4b28      	ldr	r3, [pc, #160]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	f023 0207 	bic.w	r2, r3, #7
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	4925      	ldr	r1, [pc, #148]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf6:	f7fe fcab 	bl	8001650 <HAL_GetTick>
 8002cfa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cfc:	e00a      	b.n	8002d14 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cfe:	f7fe fca7 	bl	8001650 <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e0be      	b.n	8002e92 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d14:	4b1c      	ldr	r3, [pc, #112]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d1eb      	bne.n	8002cfe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d010      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	68da      	ldr	r2, [r3, #12]
 8002d36:	4b14      	ldr	r3, [pc, #80]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d208      	bcs.n	8002d54 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d42:	4b11      	ldr	r3, [pc, #68]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	f023 020f 	bic.w	r2, r3, #15
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	490e      	ldr	r1, [pc, #56]	; (8002d88 <HAL_RCC_ClockConfig+0x244>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_RCC_ClockConfig+0x240>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 030f 	and.w	r3, r3, #15
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d214      	bcs.n	8002d8c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d62:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <HAL_RCC_ClockConfig+0x240>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f023 020f 	bic.w	r2, r3, #15
 8002d6a:	4906      	ldr	r1, [pc, #24]	; (8002d84 <HAL_RCC_ClockConfig+0x240>)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d72:	4b04      	ldr	r3, [pc, #16]	; (8002d84 <HAL_RCC_ClockConfig+0x240>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 030f 	and.w	r3, r3, #15
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d005      	beq.n	8002d8c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e086      	b.n	8002e92 <HAL_RCC_ClockConfig+0x34e>
 8002d84:	52002000 	.word	0x52002000
 8002d88:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d010      	beq.n	8002dba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	4b3f      	ldr	r3, [pc, #252]	; (8002e9c <HAL_RCC_ClockConfig+0x358>)
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d208      	bcs.n	8002dba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002da8:	4b3c      	ldr	r3, [pc, #240]	; (8002e9c <HAL_RCC_ClockConfig+0x358>)
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	691b      	ldr	r3, [r3, #16]
 8002db4:	4939      	ldr	r1, [pc, #228]	; (8002e9c <HAL_RCC_ClockConfig+0x358>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d010      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695a      	ldr	r2, [r3, #20]
 8002dca:	4b34      	ldr	r3, [pc, #208]	; (8002e9c <HAL_RCC_ClockConfig+0x358>)
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d208      	bcs.n	8002de8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002dd6:	4b31      	ldr	r3, [pc, #196]	; (8002e9c <HAL_RCC_ClockConfig+0x358>)
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	492e      	ldr	r1, [pc, #184]	; (8002e9c <HAL_RCC_ClockConfig+0x358>)
 8002de4:	4313      	orrs	r3, r2
 8002de6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0310 	and.w	r3, r3, #16
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d010      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	699a      	ldr	r2, [r3, #24]
 8002df8:	4b28      	ldr	r3, [pc, #160]	; (8002e9c <HAL_RCC_ClockConfig+0x358>)
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d208      	bcs.n	8002e16 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e04:	4b25      	ldr	r3, [pc, #148]	; (8002e9c <HAL_RCC_ClockConfig+0x358>)
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	4922      	ldr	r1, [pc, #136]	; (8002e9c <HAL_RCC_ClockConfig+0x358>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0320 	and.w	r3, r3, #32
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d010      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69da      	ldr	r2, [r3, #28]
 8002e26:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <HAL_RCC_ClockConfig+0x358>)
 8002e28:	6a1b      	ldr	r3, [r3, #32]
 8002e2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d208      	bcs.n	8002e44 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e32:	4b1a      	ldr	r3, [pc, #104]	; (8002e9c <HAL_RCC_ClockConfig+0x358>)
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	4917      	ldr	r1, [pc, #92]	; (8002e9c <HAL_RCC_ClockConfig+0x358>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e44:	f000 f89e 	bl	8002f84 <HAL_RCC_GetSysClockFreq>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	4b14      	ldr	r3, [pc, #80]	; (8002e9c <HAL_RCC_ClockConfig+0x358>)
 8002e4c:	699b      	ldr	r3, [r3, #24]
 8002e4e:	0a1b      	lsrs	r3, r3, #8
 8002e50:	f003 030f 	and.w	r3, r3, #15
 8002e54:	4912      	ldr	r1, [pc, #72]	; (8002ea0 <HAL_RCC_ClockConfig+0x35c>)
 8002e56:	5ccb      	ldrb	r3, [r1, r3]
 8002e58:	f003 031f 	and.w	r3, r3, #31
 8002e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e60:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e62:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <HAL_RCC_ClockConfig+0x358>)
 8002e64:	699b      	ldr	r3, [r3, #24]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	4a0d      	ldr	r2, [pc, #52]	; (8002ea0 <HAL_RCC_ClockConfig+0x35c>)
 8002e6c:	5cd3      	ldrb	r3, [r2, r3]
 8002e6e:	f003 031f 	and.w	r3, r3, #31
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	fa22 f303 	lsr.w	r3, r2, r3
 8002e78:	4a0a      	ldr	r2, [pc, #40]	; (8002ea4 <HAL_RCC_ClockConfig+0x360>)
 8002e7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e7c:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <HAL_RCC_ClockConfig+0x364>)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002e82:	4b0a      	ldr	r3, [pc, #40]	; (8002eac <HAL_RCC_ClockConfig+0x368>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7fe fa26 	bl	80012d8 <HAL_InitTick>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	58024400 	.word	0x58024400
 8002ea0:	08017f7c 	.word	0x08017f7c
 8002ea4:	24000004 	.word	0x24000004
 8002ea8:	24000000 	.word	0x24000000
 8002eac:	24000008 	.word	0x24000008

08002eb0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08c      	sub	sp, #48	; 0x30
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d12a      	bne.n	8002f18 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8002ec2:	4b2d      	ldr	r3, [pc, #180]	; (8002f78 <HAL_RCC_MCOConfig+0xc8>)
 8002ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ec8:	4a2b      	ldr	r2, [pc, #172]	; (8002f78 <HAL_RCC_MCOConfig+0xc8>)
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ed2:	4b29      	ldr	r3, [pc, #164]	; (8002f78 <HAL_RCC_MCOConfig+0xc8>)
 8002ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	61bb      	str	r3, [r7, #24]
 8002ede:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8002ee0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eea:	2303      	movs	r3, #3
 8002eec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002ef6:	f107 031c 	add.w	r3, r7, #28
 8002efa:	4619      	mov	r1, r3
 8002efc:	481f      	ldr	r0, [pc, #124]	; (8002f7c <HAL_RCC_MCOConfig+0xcc>)
 8002efe:	f7fe fcf5 	bl	80018ec <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002f02:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <HAL_RCC_MCOConfig+0xc8>)
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8002f0a:	68b9      	ldr	r1, [r7, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	430b      	orrs	r3, r1
 8002f10:	4919      	ldr	r1, [pc, #100]	; (8002f78 <HAL_RCC_MCOConfig+0xc8>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8002f16:	e02a      	b.n	8002f6e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8002f18:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <HAL_RCC_MCOConfig+0xc8>)
 8002f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f1e:	4a16      	ldr	r2, [pc, #88]	; (8002f78 <HAL_RCC_MCOConfig+0xc8>)
 8002f20:	f043 0304 	orr.w	r3, r3, #4
 8002f24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f28:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <HAL_RCC_MCOConfig+0xc8>)
 8002f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002f36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f40:	2303      	movs	r3, #3
 8002f42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002f4c:	f107 031c 	add.w	r3, r7, #28
 8002f50:	4619      	mov	r1, r3
 8002f52:	480b      	ldr	r0, [pc, #44]	; (8002f80 <HAL_RCC_MCOConfig+0xd0>)
 8002f54:	f7fe fcca 	bl	80018ec <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8002f58:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <HAL_RCC_MCOConfig+0xc8>)
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	01d9      	lsls	r1, r3, #7
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	430b      	orrs	r3, r1
 8002f68:	4903      	ldr	r1, [pc, #12]	; (8002f78 <HAL_RCC_MCOConfig+0xc8>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	610b      	str	r3, [r1, #16]
}
 8002f6e:	bf00      	nop
 8002f70:	3730      	adds	r7, #48	; 0x30
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	58024400 	.word	0x58024400
 8002f7c:	58020000 	.word	0x58020000
 8002f80:	58020800 	.word	0x58020800

08002f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b089      	sub	sp, #36	; 0x24
 8002f88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f8a:	4bb3      	ldr	r3, [pc, #716]	; (8003258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f92:	2b18      	cmp	r3, #24
 8002f94:	f200 8155 	bhi.w	8003242 <HAL_RCC_GetSysClockFreq+0x2be>
 8002f98:	a201      	add	r2, pc, #4	; (adr r2, 8002fa0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9e:	bf00      	nop
 8002fa0:	08003005 	.word	0x08003005
 8002fa4:	08003243 	.word	0x08003243
 8002fa8:	08003243 	.word	0x08003243
 8002fac:	08003243 	.word	0x08003243
 8002fb0:	08003243 	.word	0x08003243
 8002fb4:	08003243 	.word	0x08003243
 8002fb8:	08003243 	.word	0x08003243
 8002fbc:	08003243 	.word	0x08003243
 8002fc0:	0800302b 	.word	0x0800302b
 8002fc4:	08003243 	.word	0x08003243
 8002fc8:	08003243 	.word	0x08003243
 8002fcc:	08003243 	.word	0x08003243
 8002fd0:	08003243 	.word	0x08003243
 8002fd4:	08003243 	.word	0x08003243
 8002fd8:	08003243 	.word	0x08003243
 8002fdc:	08003243 	.word	0x08003243
 8002fe0:	08003031 	.word	0x08003031
 8002fe4:	08003243 	.word	0x08003243
 8002fe8:	08003243 	.word	0x08003243
 8002fec:	08003243 	.word	0x08003243
 8002ff0:	08003243 	.word	0x08003243
 8002ff4:	08003243 	.word	0x08003243
 8002ff8:	08003243 	.word	0x08003243
 8002ffc:	08003243 	.word	0x08003243
 8003000:	08003037 	.word	0x08003037
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003004:	4b94      	ldr	r3, [pc, #592]	; (8003258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0320 	and.w	r3, r3, #32
 800300c:	2b00      	cmp	r3, #0
 800300e:	d009      	beq.n	8003024 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003010:	4b91      	ldr	r3, [pc, #580]	; (8003258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	08db      	lsrs	r3, r3, #3
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	4a90      	ldr	r2, [pc, #576]	; (800325c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800301c:	fa22 f303 	lsr.w	r3, r2, r3
 8003020:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003022:	e111      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003024:	4b8d      	ldr	r3, [pc, #564]	; (800325c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003026:	61bb      	str	r3, [r7, #24]
      break;
 8003028:	e10e      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800302a:	4b8d      	ldr	r3, [pc, #564]	; (8003260 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800302c:	61bb      	str	r3, [r7, #24]
      break;
 800302e:	e10b      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003030:	4b8c      	ldr	r3, [pc, #560]	; (8003264 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003032:	61bb      	str	r3, [r7, #24]
      break;
 8003034:	e108      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003036:	4b88      	ldr	r3, [pc, #544]	; (8003258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003040:	4b85      	ldr	r3, [pc, #532]	; (8003258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800304a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800304c:	4b82      	ldr	r3, [pc, #520]	; (8003258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003056:	4b80      	ldr	r3, [pc, #512]	; (8003258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305a:	08db      	lsrs	r3, r3, #3
 800305c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	fb02 f303 	mul.w	r3, r2, r3
 8003066:	ee07 3a90 	vmov	s15, r3
 800306a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800306e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 80e1 	beq.w	800323c <HAL_RCC_GetSysClockFreq+0x2b8>
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	2b02      	cmp	r3, #2
 800307e:	f000 8083 	beq.w	8003188 <HAL_RCC_GetSysClockFreq+0x204>
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	2b02      	cmp	r3, #2
 8003086:	f200 80a1 	bhi.w	80031cc <HAL_RCC_GetSysClockFreq+0x248>
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d003      	beq.n	8003098 <HAL_RCC_GetSysClockFreq+0x114>
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d056      	beq.n	8003144 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003096:	e099      	b.n	80031cc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003098:	4b6f      	ldr	r3, [pc, #444]	; (8003258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0320 	and.w	r3, r3, #32
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d02d      	beq.n	8003100 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030a4:	4b6c      	ldr	r3, [pc, #432]	; (8003258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	08db      	lsrs	r3, r3, #3
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	4a6b      	ldr	r2, [pc, #428]	; (800325c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030b0:	fa22 f303 	lsr.w	r3, r2, r3
 80030b4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	ee07 3a90 	vmov	s15, r3
 80030bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	ee07 3a90 	vmov	s15, r3
 80030c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ce:	4b62      	ldr	r3, [pc, #392]	; (8003258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030d6:	ee07 3a90 	vmov	s15, r3
 80030da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030de:	ed97 6a02 	vldr	s12, [r7, #8]
 80030e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003268 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030fa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80030fe:	e087      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	ee07 3a90 	vmov	s15, r3
 8003106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800310a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800326c <HAL_RCC_GetSysClockFreq+0x2e8>
 800310e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003112:	4b51      	ldr	r3, [pc, #324]	; (8003258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800311a:	ee07 3a90 	vmov	s15, r3
 800311e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003122:	ed97 6a02 	vldr	s12, [r7, #8]
 8003126:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003268 <HAL_RCC_GetSysClockFreq+0x2e4>
 800312a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800312e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800313a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800313e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003142:	e065      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	ee07 3a90 	vmov	s15, r3
 800314a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800314e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003270 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003156:	4b40      	ldr	r3, [pc, #256]	; (8003258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800315e:	ee07 3a90 	vmov	s15, r3
 8003162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003166:	ed97 6a02 	vldr	s12, [r7, #8]
 800316a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003268 <HAL_RCC_GetSysClockFreq+0x2e4>
 800316e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800317a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800317e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003182:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003186:	e043      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	ee07 3a90 	vmov	s15, r3
 800318e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003192:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003274 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003196:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800319a:	4b2f      	ldr	r3, [pc, #188]	; (8003258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a2:	ee07 3a90 	vmov	s15, r3
 80031a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003268 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80031be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031ca:	e021      	b.n	8003210 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	ee07 3a90 	vmov	s15, r3
 80031d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003270 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031de:	4b1e      	ldr	r3, [pc, #120]	; (8003258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031e6:	ee07 3a90 	vmov	s15, r3
 80031ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80031f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003268 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003202:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800320a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800320e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003210:	4b11      	ldr	r3, [pc, #68]	; (8003258 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003214:	0a5b      	lsrs	r3, r3, #9
 8003216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800321a:	3301      	adds	r3, #1
 800321c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	ee07 3a90 	vmov	s15, r3
 8003224:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003228:	edd7 6a07 	vldr	s13, [r7, #28]
 800322c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003230:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003234:	ee17 3a90 	vmov	r3, s15
 8003238:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800323a:	e005      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	61bb      	str	r3, [r7, #24]
      break;
 8003240:	e002      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003242:	4b07      	ldr	r3, [pc, #28]	; (8003260 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003244:	61bb      	str	r3, [r7, #24]
      break;
 8003246:	bf00      	nop
  }

  return sysclockfreq;
 8003248:	69bb      	ldr	r3, [r7, #24]
}
 800324a:	4618      	mov	r0, r3
 800324c:	3724      	adds	r7, #36	; 0x24
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	58024400 	.word	0x58024400
 800325c:	03d09000 	.word	0x03d09000
 8003260:	003d0900 	.word	0x003d0900
 8003264:	017d7840 	.word	0x017d7840
 8003268:	46000000 	.word	0x46000000
 800326c:	4c742400 	.word	0x4c742400
 8003270:	4a742400 	.word	0x4a742400
 8003274:	4bbebc20 	.word	0x4bbebc20

08003278 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800327e:	f7ff fe81 	bl	8002f84 <HAL_RCC_GetSysClockFreq>
 8003282:	4602      	mov	r2, r0
 8003284:	4b10      	ldr	r3, [pc, #64]	; (80032c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	0a1b      	lsrs	r3, r3, #8
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	490f      	ldr	r1, [pc, #60]	; (80032cc <HAL_RCC_GetHCLKFreq+0x54>)
 8003290:	5ccb      	ldrb	r3, [r1, r3]
 8003292:	f003 031f 	and.w	r3, r3, #31
 8003296:	fa22 f303 	lsr.w	r3, r2, r3
 800329a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800329c:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	f003 030f 	and.w	r3, r3, #15
 80032a4:	4a09      	ldr	r2, [pc, #36]	; (80032cc <HAL_RCC_GetHCLKFreq+0x54>)
 80032a6:	5cd3      	ldrb	r3, [r2, r3]
 80032a8:	f003 031f 	and.w	r3, r3, #31
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	fa22 f303 	lsr.w	r3, r2, r3
 80032b2:	4a07      	ldr	r2, [pc, #28]	; (80032d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80032b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032b6:	4a07      	ldr	r2, [pc, #28]	; (80032d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80032bc:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80032be:	681b      	ldr	r3, [r3, #0]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	58024400 	.word	0x58024400
 80032cc:	08017f7c 	.word	0x08017f7c
 80032d0:	24000004 	.word	0x24000004
 80032d4:	24000000 	.word	0x24000000

080032d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80032dc:	f7ff ffcc 	bl	8003278 <HAL_RCC_GetHCLKFreq>
 80032e0:	4602      	mov	r2, r0
 80032e2:	4b06      	ldr	r3, [pc, #24]	; (80032fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80032e4:	69db      	ldr	r3, [r3, #28]
 80032e6:	091b      	lsrs	r3, r3, #4
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	4904      	ldr	r1, [pc, #16]	; (8003300 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032ee:	5ccb      	ldrb	r3, [r1, r3]
 80032f0:	f003 031f 	and.w	r3, r3, #31
 80032f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	58024400 	.word	0x58024400
 8003300:	08017f7c 	.word	0x08017f7c

08003304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003308:	f7ff ffb6 	bl	8003278 <HAL_RCC_GetHCLKFreq>
 800330c:	4602      	mov	r2, r0
 800330e:	4b06      	ldr	r3, [pc, #24]	; (8003328 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003310:	69db      	ldr	r3, [r3, #28]
 8003312:	0a1b      	lsrs	r3, r3, #8
 8003314:	f003 0307 	and.w	r3, r3, #7
 8003318:	4904      	ldr	r1, [pc, #16]	; (800332c <HAL_RCC_GetPCLK2Freq+0x28>)
 800331a:	5ccb      	ldrb	r3, [r1, r3]
 800331c:	f003 031f 	and.w	r3, r3, #31
 8003320:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003324:	4618      	mov	r0, r3
 8003326:	bd80      	pop	{r7, pc}
 8003328:	58024400 	.word	0x58024400
 800332c:	08017f7c 	.word	0x08017f7c

08003330 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	223f      	movs	r2, #63	; 0x3f
 800333e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003340:	4b1a      	ldr	r3, [pc, #104]	; (80033ac <HAL_RCC_GetClockConfig+0x7c>)
 8003342:	691b      	ldr	r3, [r3, #16]
 8003344:	f003 0207 	and.w	r2, r3, #7
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800334c:	4b17      	ldr	r3, [pc, #92]	; (80033ac <HAL_RCC_GetClockConfig+0x7c>)
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003358:	4b14      	ldr	r3, [pc, #80]	; (80033ac <HAL_RCC_GetClockConfig+0x7c>)
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	f003 020f 	and.w	r2, r3, #15
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003364:	4b11      	ldr	r3, [pc, #68]	; (80033ac <HAL_RCC_GetClockConfig+0x7c>)
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003370:	4b0e      	ldr	r3, [pc, #56]	; (80033ac <HAL_RCC_GetClockConfig+0x7c>)
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800337c:	4b0b      	ldr	r3, [pc, #44]	; (80033ac <HAL_RCC_GetClockConfig+0x7c>)
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003388:	4b08      	ldr	r3, [pc, #32]	; (80033ac <HAL_RCC_GetClockConfig+0x7c>)
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <HAL_RCC_GetClockConfig+0x80>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 020f 	and.w	r2, r3, #15
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	601a      	str	r2, [r3, #0]
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	58024400 	.word	0x58024400
 80033b0:	52002000 	.word	0x52002000

080033b4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033b8:	b0cc      	sub	sp, #304	; 0x130
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033c0:	2300      	movs	r3, #0
 80033c2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033c6:	2300      	movs	r3, #0
 80033c8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80033d8:	2500      	movs	r5, #0
 80033da:	ea54 0305 	orrs.w	r3, r4, r5
 80033de:	d049      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80033e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033ea:	d02f      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80033ec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033f0:	d828      	bhi.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033f6:	d01a      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80033f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033fc:	d822      	bhi.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003406:	d007      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003408:	e01c      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800340a:	4bb8      	ldr	r3, [pc, #736]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800340c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340e:	4ab7      	ldr	r2, [pc, #732]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003414:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003416:	e01a      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003418:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800341c:	3308      	adds	r3, #8
 800341e:	2102      	movs	r1, #2
 8003420:	4618      	mov	r0, r3
 8003422:	f002 fba1 	bl	8005b68 <RCCEx_PLL2_Config>
 8003426:	4603      	mov	r3, r0
 8003428:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800342c:	e00f      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800342e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003432:	3328      	adds	r3, #40	; 0x28
 8003434:	2102      	movs	r1, #2
 8003436:	4618      	mov	r0, r3
 8003438:	f002 fc48 	bl	8005ccc <RCCEx_PLL3_Config>
 800343c:	4603      	mov	r3, r0
 800343e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003442:	e004      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800344a:	e000      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800344c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800344e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10a      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003456:	4ba5      	ldr	r3, [pc, #660]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800345a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800345e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003464:	4aa1      	ldr	r2, [pc, #644]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003466:	430b      	orrs	r3, r1
 8003468:	6513      	str	r3, [r2, #80]	; 0x50
 800346a:	e003      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800346c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003470:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003474:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003480:	f04f 0900 	mov.w	r9, #0
 8003484:	ea58 0309 	orrs.w	r3, r8, r9
 8003488:	d047      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800348a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800348e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003490:	2b04      	cmp	r3, #4
 8003492:	d82a      	bhi.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003494:	a201      	add	r2, pc, #4	; (adr r2, 800349c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349a:	bf00      	nop
 800349c:	080034b1 	.word	0x080034b1
 80034a0:	080034bf 	.word	0x080034bf
 80034a4:	080034d5 	.word	0x080034d5
 80034a8:	080034f3 	.word	0x080034f3
 80034ac:	080034f3 	.word	0x080034f3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034b0:	4b8e      	ldr	r3, [pc, #568]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b4:	4a8d      	ldr	r2, [pc, #564]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034bc:	e01a      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034c2:	3308      	adds	r3, #8
 80034c4:	2100      	movs	r1, #0
 80034c6:	4618      	mov	r0, r3
 80034c8:	f002 fb4e 	bl	8005b68 <RCCEx_PLL2_Config>
 80034cc:	4603      	mov	r3, r0
 80034ce:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034d2:	e00f      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034d8:	3328      	adds	r3, #40	; 0x28
 80034da:	2100      	movs	r1, #0
 80034dc:	4618      	mov	r0, r3
 80034de:	f002 fbf5 	bl	8005ccc <RCCEx_PLL3_Config>
 80034e2:	4603      	mov	r3, r0
 80034e4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034e8:	e004      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80034f0:	e000      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80034f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034f4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10a      	bne.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034fc:	4b7b      	ldr	r3, [pc, #492]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003500:	f023 0107 	bic.w	r1, r3, #7
 8003504:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350a:	4a78      	ldr	r2, [pc, #480]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800350c:	430b      	orrs	r3, r1
 800350e:	6513      	str	r3, [r2, #80]	; 0x50
 8003510:	e003      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003512:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003516:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800351a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800351e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003522:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003526:	f04f 0b00 	mov.w	fp, #0
 800352a:	ea5a 030b 	orrs.w	r3, sl, fp
 800352e:	d04c      	beq.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003530:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800353a:	d030      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800353c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003540:	d829      	bhi.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003542:	2bc0      	cmp	r3, #192	; 0xc0
 8003544:	d02d      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003546:	2bc0      	cmp	r3, #192	; 0xc0
 8003548:	d825      	bhi.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800354a:	2b80      	cmp	r3, #128	; 0x80
 800354c:	d018      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800354e:	2b80      	cmp	r3, #128	; 0x80
 8003550:	d821      	bhi.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003552:	2b00      	cmp	r3, #0
 8003554:	d002      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003556:	2b40      	cmp	r3, #64	; 0x40
 8003558:	d007      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800355a:	e01c      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800355c:	4b63      	ldr	r3, [pc, #396]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003560:	4a62      	ldr	r2, [pc, #392]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003566:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003568:	e01c      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800356a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800356e:	3308      	adds	r3, #8
 8003570:	2100      	movs	r1, #0
 8003572:	4618      	mov	r0, r3
 8003574:	f002 faf8 	bl	8005b68 <RCCEx_PLL2_Config>
 8003578:	4603      	mov	r3, r0
 800357a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800357e:	e011      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003580:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003584:	3328      	adds	r3, #40	; 0x28
 8003586:	2100      	movs	r1, #0
 8003588:	4618      	mov	r0, r3
 800358a:	f002 fb9f 	bl	8005ccc <RCCEx_PLL3_Config>
 800358e:	4603      	mov	r3, r0
 8003590:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003594:	e006      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800359c:	e002      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800359e:	bf00      	nop
 80035a0:	e000      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80035a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035a4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10a      	bne.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80035ac:	4b4f      	ldr	r3, [pc, #316]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80035b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035ba:	4a4c      	ldr	r2, [pc, #304]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035bc:	430b      	orrs	r3, r1
 80035be:	6513      	str	r3, [r2, #80]	; 0x50
 80035c0:	e003      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80035c6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80035ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80035d6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80035da:	2300      	movs	r3, #0
 80035dc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80035e0:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80035e4:	460b      	mov	r3, r1
 80035e6:	4313      	orrs	r3, r2
 80035e8:	d053      	beq.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80035ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035ee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035f6:	d035      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80035f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035fc:	d82e      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80035fe:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003602:	d031      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003604:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003608:	d828      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800360a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800360e:	d01a      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003610:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003614:	d822      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800361a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800361e:	d007      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003620:	e01c      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003622:	4b32      	ldr	r3, [pc, #200]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	4a31      	ldr	r2, [pc, #196]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800362c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800362e:	e01c      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003630:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003634:	3308      	adds	r3, #8
 8003636:	2100      	movs	r1, #0
 8003638:	4618      	mov	r0, r3
 800363a:	f002 fa95 	bl	8005b68 <RCCEx_PLL2_Config>
 800363e:	4603      	mov	r3, r0
 8003640:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003644:	e011      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003646:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800364a:	3328      	adds	r3, #40	; 0x28
 800364c:	2100      	movs	r1, #0
 800364e:	4618      	mov	r0, r3
 8003650:	f002 fb3c 	bl	8005ccc <RCCEx_PLL3_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800365a:	e006      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003662:	e002      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003664:	bf00      	nop
 8003666:	e000      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800366a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10b      	bne.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003672:	4b1e      	ldr	r3, [pc, #120]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003676:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800367a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800367e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003682:	4a1a      	ldr	r2, [pc, #104]	; (80036ec <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003684:	430b      	orrs	r3, r1
 8003686:	6593      	str	r3, [r2, #88]	; 0x58
 8003688:	e003      	b.n	8003692 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800368e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003692:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800369e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80036a2:	2300      	movs	r3, #0
 80036a4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80036a8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80036ac:	460b      	mov	r3, r1
 80036ae:	4313      	orrs	r3, r2
 80036b0:	d056      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80036b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80036ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036be:	d038      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80036c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036c4:	d831      	bhi.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036ca:	d034      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80036cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80036d0:	d82b      	bhi.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036d6:	d01d      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80036d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036dc:	d825      	bhi.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d006      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80036e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036e6:	d00a      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80036e8:	e01f      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80036ea:	bf00      	nop
 80036ec:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036f0:	4ba2      	ldr	r3, [pc, #648]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f4:	4aa1      	ldr	r2, [pc, #644]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036fc:	e01c      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003702:	3308      	adds	r3, #8
 8003704:	2100      	movs	r1, #0
 8003706:	4618      	mov	r0, r3
 8003708:	f002 fa2e 	bl	8005b68 <RCCEx_PLL2_Config>
 800370c:	4603      	mov	r3, r0
 800370e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003712:	e011      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003714:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003718:	3328      	adds	r3, #40	; 0x28
 800371a:	2100      	movs	r1, #0
 800371c:	4618      	mov	r0, r3
 800371e:	f002 fad5 	bl	8005ccc <RCCEx_PLL3_Config>
 8003722:	4603      	mov	r3, r0
 8003724:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003728:	e006      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003730:	e002      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003732:	bf00      	nop
 8003734:	e000      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003736:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003738:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10b      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003740:	4b8e      	ldr	r3, [pc, #568]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003744:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003748:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800374c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003750:	4a8a      	ldr	r2, [pc, #552]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003752:	430b      	orrs	r3, r1
 8003754:	6593      	str	r3, [r2, #88]	; 0x58
 8003756:	e003      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003758:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800375c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003760:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003768:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800376c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003770:	2300      	movs	r3, #0
 8003772:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003776:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800377a:	460b      	mov	r3, r1
 800377c:	4313      	orrs	r3, r2
 800377e:	d03a      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003780:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003786:	2b30      	cmp	r3, #48	; 0x30
 8003788:	d01f      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x416>
 800378a:	2b30      	cmp	r3, #48	; 0x30
 800378c:	d819      	bhi.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800378e:	2b20      	cmp	r3, #32
 8003790:	d00c      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003792:	2b20      	cmp	r3, #32
 8003794:	d815      	bhi.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003796:	2b00      	cmp	r3, #0
 8003798:	d019      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800379a:	2b10      	cmp	r3, #16
 800379c:	d111      	bne.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800379e:	4b77      	ldr	r3, [pc, #476]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a2:	4a76      	ldr	r2, [pc, #472]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80037aa:	e011      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037b0:	3308      	adds	r3, #8
 80037b2:	2102      	movs	r1, #2
 80037b4:	4618      	mov	r0, r3
 80037b6:	f002 f9d7 	bl	8005b68 <RCCEx_PLL2_Config>
 80037ba:	4603      	mov	r3, r0
 80037bc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80037c0:	e006      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80037c8:	e002      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80037ca:	bf00      	nop
 80037cc:	e000      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80037ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037d0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10a      	bne.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80037d8:	4b68      	ldr	r3, [pc, #416]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037dc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80037e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e6:	4a65      	ldr	r2, [pc, #404]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037e8:	430b      	orrs	r3, r1
 80037ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037ec:	e003      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80037f2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80037f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003802:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003806:	2300      	movs	r3, #0
 8003808:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800380c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003810:	460b      	mov	r3, r1
 8003812:	4313      	orrs	r3, r2
 8003814:	d051      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003816:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800381a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800381c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003820:	d035      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003822:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003826:	d82e      	bhi.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003828:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800382c:	d031      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800382e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003832:	d828      	bhi.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003838:	d01a      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800383a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800383e:	d822      	bhi.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003848:	d007      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800384a:	e01c      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800384c:	4b4b      	ldr	r3, [pc, #300]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	4a4a      	ldr	r2, [pc, #296]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003856:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003858:	e01c      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800385a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800385e:	3308      	adds	r3, #8
 8003860:	2100      	movs	r1, #0
 8003862:	4618      	mov	r0, r3
 8003864:	f002 f980 	bl	8005b68 <RCCEx_PLL2_Config>
 8003868:	4603      	mov	r3, r0
 800386a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800386e:	e011      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003870:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003874:	3328      	adds	r3, #40	; 0x28
 8003876:	2100      	movs	r1, #0
 8003878:	4618      	mov	r0, r3
 800387a:	f002 fa27 	bl	8005ccc <RCCEx_PLL3_Config>
 800387e:	4603      	mov	r3, r0
 8003880:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003884:	e006      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800388c:	e002      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800388e:	bf00      	nop
 8003890:	e000      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003892:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003894:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10a      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800389c:	4b37      	ldr	r3, [pc, #220]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800389e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038a0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80038a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038aa:	4a34      	ldr	r2, [pc, #208]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ac:	430b      	orrs	r3, r1
 80038ae:	6513      	str	r3, [r2, #80]	; 0x50
 80038b0:	e003      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80038b6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80038ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80038c6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80038ca:	2300      	movs	r3, #0
 80038cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80038d0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80038d4:	460b      	mov	r3, r1
 80038d6:	4313      	orrs	r3, r2
 80038d8:	d056      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80038da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80038e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038e4:	d033      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80038e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038ea:	d82c      	bhi.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038f0:	d02f      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80038f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038f6:	d826      	bhi.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80038f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038fc:	d02b      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80038fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003902:	d820      	bhi.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003904:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003908:	d012      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800390a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800390e:	d81a      	bhi.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003910:	2b00      	cmp	r3, #0
 8003912:	d022      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003914:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003918:	d115      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800391a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800391e:	3308      	adds	r3, #8
 8003920:	2101      	movs	r1, #1
 8003922:	4618      	mov	r0, r3
 8003924:	f002 f920 	bl	8005b68 <RCCEx_PLL2_Config>
 8003928:	4603      	mov	r3, r0
 800392a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800392e:	e015      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003930:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003934:	3328      	adds	r3, #40	; 0x28
 8003936:	2101      	movs	r1, #1
 8003938:	4618      	mov	r0, r3
 800393a:	f002 f9c7 	bl	8005ccc <RCCEx_PLL3_Config>
 800393e:	4603      	mov	r3, r0
 8003940:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003944:	e00a      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800394c:	e006      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800394e:	bf00      	nop
 8003950:	e004      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003952:	bf00      	nop
 8003954:	e002      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003956:	bf00      	nop
 8003958:	e000      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800395a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800395c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10d      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003964:	4b05      	ldr	r3, [pc, #20]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003968:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800396c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003970:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003972:	4a02      	ldr	r2, [pc, #8]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003974:	430b      	orrs	r3, r1
 8003976:	6513      	str	r3, [r2, #80]	; 0x50
 8003978:	e006      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800397a:	bf00      	nop
 800397c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003980:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003984:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003988:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800398c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003990:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003994:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003998:	2300      	movs	r3, #0
 800399a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800399e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80039a2:	460b      	mov	r3, r1
 80039a4:	4313      	orrs	r3, r2
 80039a6:	d055      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80039a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80039ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80039b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039b4:	d033      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80039b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039ba:	d82c      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c0:	d02f      	beq.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80039c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c6:	d826      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039cc:	d02b      	beq.n	8003a26 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80039ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80039d2:	d820      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039d8:	d012      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80039da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039de:	d81a      	bhi.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d022      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80039e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039e8:	d115      	bne.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80039ee:	3308      	adds	r3, #8
 80039f0:	2101      	movs	r1, #1
 80039f2:	4618      	mov	r0, r3
 80039f4:	f002 f8b8 	bl	8005b68 <RCCEx_PLL2_Config>
 80039f8:	4603      	mov	r3, r0
 80039fa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039fe:	e015      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a00:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a04:	3328      	adds	r3, #40	; 0x28
 8003a06:	2101      	movs	r1, #1
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f002 f95f 	bl	8005ccc <RCCEx_PLL3_Config>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a14:	e00a      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003a1c:	e006      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a1e:	bf00      	nop
 8003a20:	e004      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a22:	bf00      	nop
 8003a24:	e002      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a26:	bf00      	nop
 8003a28:	e000      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a2c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10b      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a34:	4bb6      	ldr	r3, [pc, #728]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a38:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003a3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a44:	4ab2      	ldr	r2, [pc, #712]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003a46:	430b      	orrs	r3, r1
 8003a48:	6593      	str	r3, [r2, #88]	; 0x58
 8003a4a:	e003      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a4c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003a50:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003a54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8003a60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a64:	2300      	movs	r3, #0
 8003a66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a6a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4313      	orrs	r3, r2
 8003a72:	d02a      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8003a74:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d011      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a82:	d10a      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a88:	3308      	adds	r3, #8
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f002 f86b 	bl	8005b68 <RCCEx_PLL2_Config>
 8003a92:	4603      	mov	r3, r0
 8003a94:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8003a98:	e004      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003aa0:	e000      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8003aa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aa4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10a      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003aac:	4b98      	ldr	r3, [pc, #608]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8003ab4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aba:	4a95      	ldr	r2, [pc, #596]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003abc:	430b      	orrs	r3, r1
 8003abe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ac0:	e003      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ac6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003aca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad2:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ada:	2300      	movs	r3, #0
 8003adc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003ae0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	d037      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003aea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003af0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003af4:	d00e      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8003af6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003afa:	d816      	bhi.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x776>
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d018      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8003b00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b04:	d111      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b06:	4b82      	ldr	r3, [pc, #520]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0a:	4a81      	ldr	r2, [pc, #516]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b12:	e00f      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b14:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b18:	3308      	adds	r3, #8
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f002 f823 	bl	8005b68 <RCCEx_PLL2_Config>
 8003b22:	4603      	mov	r3, r0
 8003b24:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b28:	e004      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003b30:	e000      	b.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8003b32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b34:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10a      	bne.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b3c:	4b74      	ldr	r3, [pc, #464]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b40:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003b44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b4a:	4a71      	ldr	r2, [pc, #452]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003b4c:	430b      	orrs	r3, r1
 8003b4e:	6513      	str	r3, [r2, #80]	; 0x50
 8003b50:	e003      	b.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b52:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b56:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b62:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003b66:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003b70:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003b74:	460b      	mov	r3, r1
 8003b76:	4313      	orrs	r3, r2
 8003b78:	d03a      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003b7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d81d      	bhi.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8003b84:	a201      	add	r2, pc, #4	; (adr r2, 8003b8c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8a:	bf00      	nop
 8003b8c:	08003bc9 	.word	0x08003bc9
 8003b90:	08003b9d 	.word	0x08003b9d
 8003b94:	08003bab 	.word	0x08003bab
 8003b98:	08003bc9 	.word	0x08003bc9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b9c:	4b5c      	ldr	r3, [pc, #368]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	4a5b      	ldr	r2, [pc, #364]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003ba2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ba6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ba8:	e00f      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003baa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bae:	3308      	adds	r3, #8
 8003bb0:	2102      	movs	r1, #2
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f001 ffd8 	bl	8005b68 <RCCEx_PLL2_Config>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003bbe:	e004      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003bc6:	e000      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8003bc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d10a      	bne.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003bd2:	4b4f      	ldr	r3, [pc, #316]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd6:	f023 0103 	bic.w	r1, r3, #3
 8003bda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be0:	4a4b      	ldr	r2, [pc, #300]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003be2:	430b      	orrs	r3, r1
 8003be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003be6:	e003      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003bec:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bf0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003bfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c00:	2300      	movs	r3, #0
 8003c02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003c06:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	f000 80a0 	beq.w	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c12:	4b40      	ldr	r3, [pc, #256]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a3f      	ldr	r2, [pc, #252]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c1e:	f7fd fd17 	bl	8001650 <HAL_GetTick>
 8003c22:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c26:	e00b      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c28:	f7fd fd12 	bl	8001650 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b64      	cmp	r3, #100	; 0x64
 8003c36:	d903      	bls.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003c3e:	e005      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c40:	4b34      	ldr	r3, [pc, #208]	; (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0ed      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8003c4c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d17a      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c54:	4b2e      	ldr	r3, [pc, #184]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c5c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003c60:	4053      	eors	r3, r2
 8003c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d015      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c6a:	4b29      	ldr	r3, [pc, #164]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c72:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c76:	4b26      	ldr	r3, [pc, #152]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7a:	4a25      	ldr	r2, [pc, #148]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c80:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c82:	4b23      	ldr	r3, [pc, #140]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c86:	4a22      	ldr	r2, [pc, #136]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c8c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c8e:	4a20      	ldr	r2, [pc, #128]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c90:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003c94:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c9a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ca2:	d118      	bne.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca4:	f7fd fcd4 	bl	8001650 <HAL_GetTick>
 8003ca8:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cac:	e00d      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cae:	f7fd fccf 	bl	8001650 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003cb8:	1ad2      	subs	r2, r2, r3
 8003cba:	f241 3388 	movw	r3, #5000	; 0x1388
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d903      	bls.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8003cc8:	e005      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cca:	4b11      	ldr	r3, [pc, #68]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d0eb      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8003cd6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d130      	bne.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cde:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ce2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003ce6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cee:	d115      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x968>
 8003cf0:	4b07      	ldr	r3, [pc, #28]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003cf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003cfc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003d00:	091a      	lsrs	r2, r3, #4
 8003d02:	4b05      	ldr	r3, [pc, #20]	; (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8003d04:	4013      	ands	r3, r2
 8003d06:	4a02      	ldr	r2, [pc, #8]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	6113      	str	r3, [r2, #16]
 8003d0c:	e00c      	b.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8003d0e:	bf00      	nop
 8003d10:	58024400 	.word	0x58024400
 8003d14:	58024800 	.word	0x58024800
 8003d18:	00ffffcf 	.word	0x00ffffcf
 8003d1c:	4bd4      	ldr	r3, [pc, #848]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	4ad3      	ldr	r2, [pc, #844]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003d22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d26:	6113      	str	r3, [r2, #16]
 8003d28:	4bd1      	ldr	r3, [pc, #836]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003d2a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003d2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d30:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d38:	4acd      	ldr	r2, [pc, #820]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003d3a:	430b      	orrs	r3, r1
 8003d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d3e:	e008      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d40:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d44:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8003d48:	e003      	b.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d4a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d4e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5a:	f002 0301 	and.w	r3, r2, #1
 8003d5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d62:	2300      	movs	r3, #0
 8003d64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f000 808b 	beq.w	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003d74:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d7c:	2b28      	cmp	r3, #40	; 0x28
 8003d7e:	d86b      	bhi.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003d80:	a201      	add	r2, pc, #4	; (adr r2, 8003d88 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d86:	bf00      	nop
 8003d88:	08003e61 	.word	0x08003e61
 8003d8c:	08003e59 	.word	0x08003e59
 8003d90:	08003e59 	.word	0x08003e59
 8003d94:	08003e59 	.word	0x08003e59
 8003d98:	08003e59 	.word	0x08003e59
 8003d9c:	08003e59 	.word	0x08003e59
 8003da0:	08003e59 	.word	0x08003e59
 8003da4:	08003e59 	.word	0x08003e59
 8003da8:	08003e2d 	.word	0x08003e2d
 8003dac:	08003e59 	.word	0x08003e59
 8003db0:	08003e59 	.word	0x08003e59
 8003db4:	08003e59 	.word	0x08003e59
 8003db8:	08003e59 	.word	0x08003e59
 8003dbc:	08003e59 	.word	0x08003e59
 8003dc0:	08003e59 	.word	0x08003e59
 8003dc4:	08003e59 	.word	0x08003e59
 8003dc8:	08003e43 	.word	0x08003e43
 8003dcc:	08003e59 	.word	0x08003e59
 8003dd0:	08003e59 	.word	0x08003e59
 8003dd4:	08003e59 	.word	0x08003e59
 8003dd8:	08003e59 	.word	0x08003e59
 8003ddc:	08003e59 	.word	0x08003e59
 8003de0:	08003e59 	.word	0x08003e59
 8003de4:	08003e59 	.word	0x08003e59
 8003de8:	08003e61 	.word	0x08003e61
 8003dec:	08003e59 	.word	0x08003e59
 8003df0:	08003e59 	.word	0x08003e59
 8003df4:	08003e59 	.word	0x08003e59
 8003df8:	08003e59 	.word	0x08003e59
 8003dfc:	08003e59 	.word	0x08003e59
 8003e00:	08003e59 	.word	0x08003e59
 8003e04:	08003e59 	.word	0x08003e59
 8003e08:	08003e61 	.word	0x08003e61
 8003e0c:	08003e59 	.word	0x08003e59
 8003e10:	08003e59 	.word	0x08003e59
 8003e14:	08003e59 	.word	0x08003e59
 8003e18:	08003e59 	.word	0x08003e59
 8003e1c:	08003e59 	.word	0x08003e59
 8003e20:	08003e59 	.word	0x08003e59
 8003e24:	08003e59 	.word	0x08003e59
 8003e28:	08003e61 	.word	0x08003e61
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e30:	3308      	adds	r3, #8
 8003e32:	2101      	movs	r1, #1
 8003e34:	4618      	mov	r0, r3
 8003e36:	f001 fe97 	bl	8005b68 <RCCEx_PLL2_Config>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e40:	e00f      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e42:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e46:	3328      	adds	r3, #40	; 0x28
 8003e48:	2101      	movs	r1, #1
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f001 ff3e 	bl	8005ccc <RCCEx_PLL3_Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e56:	e004      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003e5e:	e000      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8003e60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e62:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10b      	bne.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e6a:	4b81      	ldr	r3, [pc, #516]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e6e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003e72:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e7a:	4a7d      	ldr	r2, [pc, #500]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003e7c:	430b      	orrs	r3, r1
 8003e7e:	6553      	str	r3, [r2, #84]	; 0x54
 8003e80:	e003      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e82:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003e86:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e92:	f002 0302 	and.w	r3, r2, #2
 8003e96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003ea0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	d042      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003eaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003eae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eb0:	2b05      	cmp	r3, #5
 8003eb2:	d825      	bhi.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8003eb4:	a201      	add	r2, pc, #4	; (adr r2, 8003ebc <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8003eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eba:	bf00      	nop
 8003ebc:	08003f09 	.word	0x08003f09
 8003ec0:	08003ed5 	.word	0x08003ed5
 8003ec4:	08003eeb 	.word	0x08003eeb
 8003ec8:	08003f09 	.word	0x08003f09
 8003ecc:	08003f09 	.word	0x08003f09
 8003ed0:	08003f09 	.word	0x08003f09
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ed4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ed8:	3308      	adds	r3, #8
 8003eda:	2101      	movs	r1, #1
 8003edc:	4618      	mov	r0, r3
 8003ede:	f001 fe43 	bl	8005b68 <RCCEx_PLL2_Config>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003ee8:	e00f      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003eea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003eee:	3328      	adds	r3, #40	; 0x28
 8003ef0:	2101      	movs	r1, #1
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f001 feea 	bl	8005ccc <RCCEx_PLL3_Config>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003efe:	e004      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003f06:	e000      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8003f08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f0a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10a      	bne.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f12:	4b57      	ldr	r3, [pc, #348]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003f14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f16:	f023 0107 	bic.w	r1, r3, #7
 8003f1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f20:	4a53      	ldr	r2, [pc, #332]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003f22:	430b      	orrs	r3, r1
 8003f24:	6553      	str	r3, [r2, #84]	; 0x54
 8003f26:	e003      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f28:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003f2c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f30:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f38:	f002 0304 	and.w	r3, r2, #4
 8003f3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f40:	2300      	movs	r3, #0
 8003f42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f46:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	d044      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003f50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f54:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003f58:	2b05      	cmp	r3, #5
 8003f5a:	d825      	bhi.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8003f5c:	a201      	add	r2, pc, #4	; (adr r2, 8003f64 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8003f5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f62:	bf00      	nop
 8003f64:	08003fb1 	.word	0x08003fb1
 8003f68:	08003f7d 	.word	0x08003f7d
 8003f6c:	08003f93 	.word	0x08003f93
 8003f70:	08003fb1 	.word	0x08003fb1
 8003f74:	08003fb1 	.word	0x08003fb1
 8003f78:	08003fb1 	.word	0x08003fb1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f80:	3308      	adds	r3, #8
 8003f82:	2101      	movs	r1, #1
 8003f84:	4618      	mov	r0, r3
 8003f86:	f001 fdef 	bl	8005b68 <RCCEx_PLL2_Config>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f90:	e00f      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f96:	3328      	adds	r3, #40	; 0x28
 8003f98:	2101      	movs	r1, #1
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f001 fe96 	bl	8005ccc <RCCEx_PLL3_Config>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003fa6:	e004      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003fae:	e000      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8003fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10b      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fba:	4b2d      	ldr	r3, [pc, #180]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fbe:	f023 0107 	bic.w	r1, r3, #7
 8003fc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fca:	4a29      	ldr	r2, [pc, #164]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	6593      	str	r3, [r2, #88]	; 0x58
 8003fd0:	e003      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003fd6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe2:	f002 0320 	and.w	r3, r2, #32
 8003fe6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003fea:	2300      	movs	r3, #0
 8003fec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003ff0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	d057      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003ffa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ffe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004002:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004006:	d035      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8004008:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800400c:	d82c      	bhi.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800400e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004012:	d031      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8004014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004018:	d826      	bhi.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800401a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800401e:	d02d      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8004020:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004024:	d820      	bhi.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004026:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800402a:	d012      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 800402c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004030:	d81a      	bhi.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004032:	2b00      	cmp	r3, #0
 8004034:	d024      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8004036:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800403a:	d115      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800403c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004040:	3308      	adds	r3, #8
 8004042:	2100      	movs	r1, #0
 8004044:	4618      	mov	r0, r3
 8004046:	f001 fd8f 	bl	8005b68 <RCCEx_PLL2_Config>
 800404a:	4603      	mov	r3, r0
 800404c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004050:	e017      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004052:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004056:	3328      	adds	r3, #40	; 0x28
 8004058:	2102      	movs	r1, #2
 800405a:	4618      	mov	r0, r3
 800405c:	f001 fe36 	bl	8005ccc <RCCEx_PLL3_Config>
 8004060:	4603      	mov	r3, r0
 8004062:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004066:	e00c      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800406e:	e008      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8004070:	58024400 	.word	0x58024400
        break;
 8004074:	bf00      	nop
 8004076:	e004      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004078:	bf00      	nop
 800407a:	e002      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800407c:	bf00      	nop
 800407e:	e000      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004080:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004082:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004086:	2b00      	cmp	r3, #0
 8004088:	d10b      	bne.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800408a:	4bc2      	ldr	r3, [pc, #776]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800408c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004092:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800409a:	4abe      	ldr	r2, [pc, #760]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800409c:	430b      	orrs	r3, r1
 800409e:	6553      	str	r3, [r2, #84]	; 0x54
 80040a0:	e003      	b.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80040a6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80040aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80040b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80040ba:	2300      	movs	r3, #0
 80040bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80040c0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80040c4:	460b      	mov	r3, r1
 80040c6:	4313      	orrs	r3, r2
 80040c8:	d055      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80040ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80040d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040d6:	d033      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 80040d8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040dc:	d82c      	bhi.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80040de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e2:	d02f      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 80040e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e8:	d826      	bhi.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80040ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040ee:	d02b      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 80040f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040f4:	d820      	bhi.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80040f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040fa:	d012      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 80040fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004100:	d81a      	bhi.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004102:	2b00      	cmp	r3, #0
 8004104:	d022      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8004106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800410a:	d115      	bne.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800410c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004110:	3308      	adds	r3, #8
 8004112:	2100      	movs	r1, #0
 8004114:	4618      	mov	r0, r3
 8004116:	f001 fd27 	bl	8005b68 <RCCEx_PLL2_Config>
 800411a:	4603      	mov	r3, r0
 800411c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004120:	e015      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004122:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004126:	3328      	adds	r3, #40	; 0x28
 8004128:	2102      	movs	r1, #2
 800412a:	4618      	mov	r0, r3
 800412c:	f001 fdce 	bl	8005ccc <RCCEx_PLL3_Config>
 8004130:	4603      	mov	r3, r0
 8004132:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004136:	e00a      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800413e:	e006      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004140:	bf00      	nop
 8004142:	e004      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004144:	bf00      	nop
 8004146:	e002      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004148:	bf00      	nop
 800414a:	e000      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800414c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800414e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10b      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004156:	4b8f      	ldr	r3, [pc, #572]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800415a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800415e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004162:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004166:	4a8b      	ldr	r2, [pc, #556]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004168:	430b      	orrs	r3, r1
 800416a:	6593      	str	r3, [r2, #88]	; 0x58
 800416c:	e003      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004172:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004176:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800417a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417e:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004182:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004186:	2300      	movs	r3, #0
 8004188:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800418c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004190:	460b      	mov	r3, r1
 8004192:	4313      	orrs	r3, r2
 8004194:	d055      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004196:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800419a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800419e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80041a2:	d033      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80041a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80041a8:	d82c      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80041aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ae:	d02f      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80041b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041b4:	d826      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80041b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80041ba:	d02b      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80041bc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80041c0:	d820      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80041c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041c6:	d012      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 80041c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041cc:	d81a      	bhi.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d022      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 80041d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041d6:	d115      	bne.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80041dc:	3308      	adds	r3, #8
 80041de:	2100      	movs	r1, #0
 80041e0:	4618      	mov	r0, r3
 80041e2:	f001 fcc1 	bl	8005b68 <RCCEx_PLL2_Config>
 80041e6:	4603      	mov	r3, r0
 80041e8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80041ec:	e015      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80041f2:	3328      	adds	r3, #40	; 0x28
 80041f4:	2102      	movs	r1, #2
 80041f6:	4618      	mov	r0, r3
 80041f8:	f001 fd68 	bl	8005ccc <RCCEx_PLL3_Config>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004202:	e00a      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800420a:	e006      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800420c:	bf00      	nop
 800420e:	e004      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004210:	bf00      	nop
 8004212:	e002      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004214:	bf00      	nop
 8004216:	e000      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800421a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10b      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004222:	4b5c      	ldr	r3, [pc, #368]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004226:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800422a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800422e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004232:	4a58      	ldr	r2, [pc, #352]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004234:	430b      	orrs	r3, r1
 8004236:	6593      	str	r3, [r2, #88]	; 0x58
 8004238:	e003      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800423e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004242:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424a:	f002 0308 	and.w	r3, r2, #8
 800424e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004252:	2300      	movs	r3, #0
 8004254:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004258:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800425c:	460b      	mov	r3, r1
 800425e:	4313      	orrs	r3, r2
 8004260:	d01e      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004262:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800426e:	d10c      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004270:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004274:	3328      	adds	r3, #40	; 0x28
 8004276:	2102      	movs	r1, #2
 8004278:	4618      	mov	r0, r3
 800427a:	f001 fd27 	bl	8005ccc <RCCEx_PLL3_Config>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800428a:	4b42      	ldr	r3, [pc, #264]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800428c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004292:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429a:	4a3e      	ldr	r2, [pc, #248]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800429c:	430b      	orrs	r3, r1
 800429e:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a8:	f002 0310 	and.w	r3, r2, #16
 80042ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042b0:	2300      	movs	r3, #0
 80042b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80042b6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80042ba:	460b      	mov	r3, r1
 80042bc:	4313      	orrs	r3, r2
 80042be:	d01e      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80042c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042cc:	d10c      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042d2:	3328      	adds	r3, #40	; 0x28
 80042d4:	2102      	movs	r1, #2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f001 fcf8 	bl	8005ccc <RCCEx_PLL3_Config>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042e8:	4b2a      	ldr	r3, [pc, #168]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ec:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80042f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042f8:	4a26      	ldr	r2, [pc, #152]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042fa:	430b      	orrs	r3, r1
 80042fc:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004306:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800430a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800430e:	2300      	movs	r3, #0
 8004310:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004314:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004318:	460b      	mov	r3, r1
 800431a:	4313      	orrs	r3, r2
 800431c:	d040      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800431e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004322:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004326:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800432a:	d022      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 800432c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004330:	d81b      	bhi.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004332:	2b00      	cmp	r3, #0
 8004334:	d003      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8004336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800433a:	d00b      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 800433c:	e015      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800433e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004342:	3308      	adds	r3, #8
 8004344:	2100      	movs	r1, #0
 8004346:	4618      	mov	r0, r3
 8004348:	f001 fc0e 	bl	8005b68 <RCCEx_PLL2_Config>
 800434c:	4603      	mov	r3, r0
 800434e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004352:	e00f      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004354:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004358:	3328      	adds	r3, #40	; 0x28
 800435a:	2102      	movs	r1, #2
 800435c:	4618      	mov	r0, r3
 800435e:	f001 fcb5 	bl	8005ccc <RCCEx_PLL3_Config>
 8004362:	4603      	mov	r3, r0
 8004364:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004368:	e004      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004370:	e000      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8004372:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004374:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10d      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800437c:	4b05      	ldr	r3, [pc, #20]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800437e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004380:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004384:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004388:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800438c:	4a01      	ldr	r2, [pc, #4]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800438e:	430b      	orrs	r3, r1
 8004390:	6593      	str	r3, [r2, #88]	; 0x58
 8004392:	e005      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004394:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004398:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800439c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80043a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a8:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80043ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80043ae:	2300      	movs	r3, #0
 80043b0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80043b2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80043b6:	460b      	mov	r3, r1
 80043b8:	4313      	orrs	r3, r2
 80043ba:	d03b      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80043bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80043c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043c8:	d01f      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x1056>
 80043ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043ce:	d818      	bhi.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 80043d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043d4:	d003      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x102a>
 80043d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043da:	d007      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x1038>
 80043dc:	e011      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043de:	4b64      	ldr	r3, [pc, #400]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80043e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e2:	4a63      	ldr	r2, [pc, #396]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80043e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80043ea:	e00f      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80043f0:	3328      	adds	r3, #40	; 0x28
 80043f2:	2101      	movs	r1, #1
 80043f4:	4618      	mov	r0, r3
 80043f6:	f001 fc69 	bl	8005ccc <RCCEx_PLL3_Config>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004400:	e004      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004408:	e000      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800440a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800440c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004410:	2b00      	cmp	r3, #0
 8004412:	d10b      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004414:	4b56      	ldr	r3, [pc, #344]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004416:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004418:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800441c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004424:	4a52      	ldr	r2, [pc, #328]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004426:	430b      	orrs	r3, r1
 8004428:	6553      	str	r3, [r2, #84]	; 0x54
 800442a:	e003      	b.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800442c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004430:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004434:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004440:	673b      	str	r3, [r7, #112]	; 0x70
 8004442:	2300      	movs	r3, #0
 8004444:	677b      	str	r3, [r7, #116]	; 0x74
 8004446:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800444a:	460b      	mov	r3, r1
 800444c:	4313      	orrs	r3, r2
 800444e:	d031      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004450:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 800445a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800445e:	d007      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8004460:	e011      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004462:	4b43      	ldr	r3, [pc, #268]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004466:	4a42      	ldr	r2, [pc, #264]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800446c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800446e:	e00e      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004470:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004474:	3308      	adds	r3, #8
 8004476:	2102      	movs	r1, #2
 8004478:	4618      	mov	r0, r3
 800447a:	f001 fb75 	bl	8005b68 <RCCEx_PLL2_Config>
 800447e:	4603      	mov	r3, r0
 8004480:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004484:	e003      	b.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800448c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800448e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10a      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004496:	4b36      	ldr	r3, [pc, #216]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800449e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80044a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a4:	4a32      	ldr	r2, [pc, #200]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80044a6:	430b      	orrs	r3, r1
 80044a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044aa:	e003      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ac:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80044b0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80044b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044bc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80044c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80044c2:	2300      	movs	r3, #0
 80044c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044c6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80044ca:	460b      	mov	r3, r1
 80044cc:	4313      	orrs	r3, r2
 80044ce:	d00c      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80044d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80044d4:	3328      	adds	r3, #40	; 0x28
 80044d6:	2102      	movs	r1, #2
 80044d8:	4618      	mov	r0, r3
 80044da:	f001 fbf7 	bl	8005ccc <RCCEx_PLL3_Config>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80044ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80044ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044f2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80044f6:	663b      	str	r3, [r7, #96]	; 0x60
 80044f8:	2300      	movs	r3, #0
 80044fa:	667b      	str	r3, [r7, #100]	; 0x64
 80044fc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004500:	460b      	mov	r3, r1
 8004502:	4313      	orrs	r3, r2
 8004504:	d03a      	beq.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004506:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800450a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800450e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004512:	d018      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8004514:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004518:	d811      	bhi.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800451a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800451e:	d014      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8004520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004524:	d80b      	bhi.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8004526:	2b00      	cmp	r3, #0
 8004528:	d011      	beq.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800452a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800452e:	d106      	bne.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004530:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	4a0e      	ldr	r2, [pc, #56]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004536:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800453a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800453c:	e008      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004544:	e004      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004546:	bf00      	nop
 8004548:	e002      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800454a:	bf00      	nop
 800454c:	e000      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800454e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004550:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10d      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004558:	4b05      	ldr	r3, [pc, #20]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800455a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800455c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004560:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004568:	4a01      	ldr	r2, [pc, #4]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800456a:	430b      	orrs	r3, r1
 800456c:	6553      	str	r3, [r2, #84]	; 0x54
 800456e:	e005      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8004570:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004574:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004578:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800457c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004584:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004588:	65bb      	str	r3, [r7, #88]	; 0x58
 800458a:	2300      	movs	r3, #0
 800458c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800458e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004592:	460b      	mov	r3, r1
 8004594:	4313      	orrs	r3, r2
 8004596:	d009      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004598:	4baa      	ldr	r3, [pc, #680]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800459a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800459c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80045a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045a6:	4aa7      	ldr	r2, [pc, #668]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80045a8:	430b      	orrs	r3, r1
 80045aa:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80045ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80045b8:	653b      	str	r3, [r7, #80]	; 0x50
 80045ba:	2300      	movs	r3, #0
 80045bc:	657b      	str	r3, [r7, #84]	; 0x54
 80045be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80045c2:	460b      	mov	r3, r1
 80045c4:	4313      	orrs	r3, r2
 80045c6:	d00a      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80045c8:	4b9e      	ldr	r3, [pc, #632]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80045d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045d4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80045d8:	4a9a      	ldr	r2, [pc, #616]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80045da:	430b      	orrs	r3, r1
 80045dc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80045ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80045ec:	2300      	movs	r3, #0
 80045ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045f0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80045f4:	460b      	mov	r3, r1
 80045f6:	4313      	orrs	r3, r2
 80045f8:	d009      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045fa:	4b92      	ldr	r3, [pc, #584]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80045fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045fe:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004602:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004608:	4a8e      	ldr	r2, [pc, #568]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800460a:	430b      	orrs	r3, r1
 800460c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800460e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004616:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800461a:	643b      	str	r3, [r7, #64]	; 0x40
 800461c:	2300      	movs	r3, #0
 800461e:	647b      	str	r3, [r7, #68]	; 0x44
 8004620:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004624:	460b      	mov	r3, r1
 8004626:	4313      	orrs	r3, r2
 8004628:	d00e      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800462a:	4b86      	ldr	r3, [pc, #536]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	4a85      	ldr	r2, [pc, #532]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004630:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004634:	6113      	str	r3, [r2, #16]
 8004636:	4b83      	ldr	r3, [pc, #524]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004638:	6919      	ldr	r1, [r3, #16]
 800463a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800463e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004642:	4a80      	ldr	r2, [pc, #512]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004644:	430b      	orrs	r3, r1
 8004646:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004648:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800464c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004650:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004654:	63bb      	str	r3, [r7, #56]	; 0x38
 8004656:	2300      	movs	r3, #0
 8004658:	63fb      	str	r3, [r7, #60]	; 0x3c
 800465a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800465e:	460b      	mov	r3, r1
 8004660:	4313      	orrs	r3, r2
 8004662:	d009      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004664:	4b77      	ldr	r3, [pc, #476]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004668:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800466c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004672:	4a74      	ldr	r2, [pc, #464]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004674:	430b      	orrs	r3, r1
 8004676:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004678:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800467c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004680:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004684:	633b      	str	r3, [r7, #48]	; 0x30
 8004686:	2300      	movs	r3, #0
 8004688:	637b      	str	r3, [r7, #52]	; 0x34
 800468a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800468e:	460b      	mov	r3, r1
 8004690:	4313      	orrs	r3, r2
 8004692:	d00a      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004694:	4b6b      	ldr	r3, [pc, #428]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004698:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800469c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a4:	4a67      	ldr	r2, [pc, #412]	; (8004844 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80046a6:	430b      	orrs	r3, r1
 80046a8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80046aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b2:	2100      	movs	r1, #0
 80046b4:	62b9      	str	r1, [r7, #40]	; 0x28
 80046b6:	f003 0301 	and.w	r3, r3, #1
 80046ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046bc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80046c0:	460b      	mov	r3, r1
 80046c2:	4313      	orrs	r3, r2
 80046c4:	d011      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046ca:	3308      	adds	r3, #8
 80046cc:	2100      	movs	r1, #0
 80046ce:	4618      	mov	r0, r3
 80046d0:	f001 fa4a 	bl	8005b68 <RCCEx_PLL2_Config>
 80046d4:	4603      	mov	r3, r0
 80046d6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80046da:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80046e6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80046ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f2:	2100      	movs	r1, #0
 80046f4:	6239      	str	r1, [r7, #32]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
 80046fc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004700:	460b      	mov	r3, r1
 8004702:	4313      	orrs	r3, r2
 8004704:	d011      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004706:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800470a:	3308      	adds	r3, #8
 800470c:	2101      	movs	r1, #1
 800470e:	4618      	mov	r0, r3
 8004710:	f001 fa2a 	bl	8005b68 <RCCEx_PLL2_Config>
 8004714:	4603      	mov	r3, r0
 8004716:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800471a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004722:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004726:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800472a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800472e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004732:	2100      	movs	r1, #0
 8004734:	61b9      	str	r1, [r7, #24]
 8004736:	f003 0304 	and.w	r3, r3, #4
 800473a:	61fb      	str	r3, [r7, #28]
 800473c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004740:	460b      	mov	r3, r1
 8004742:	4313      	orrs	r3, r2
 8004744:	d011      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004746:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800474a:	3308      	adds	r3, #8
 800474c:	2102      	movs	r1, #2
 800474e:	4618      	mov	r0, r3
 8004750:	f001 fa0a 	bl	8005b68 <RCCEx_PLL2_Config>
 8004754:	4603      	mov	r3, r0
 8004756:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800475a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004762:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004766:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800476a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800476e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004772:	2100      	movs	r1, #0
 8004774:	6139      	str	r1, [r7, #16]
 8004776:	f003 0308 	and.w	r3, r3, #8
 800477a:	617b      	str	r3, [r7, #20]
 800477c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004780:	460b      	mov	r3, r1
 8004782:	4313      	orrs	r3, r2
 8004784:	d011      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004786:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800478a:	3328      	adds	r3, #40	; 0x28
 800478c:	2100      	movs	r1, #0
 800478e:	4618      	mov	r0, r3
 8004790:	f001 fa9c 	bl	8005ccc <RCCEx_PLL3_Config>
 8004794:	4603      	mov	r3, r0
 8004796:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 800479a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80047a6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80047aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80047ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b2:	2100      	movs	r1, #0
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	f003 0310 	and.w	r3, r3, #16
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80047c0:	460b      	mov	r3, r1
 80047c2:	4313      	orrs	r3, r2
 80047c4:	d011      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80047ca:	3328      	adds	r3, #40	; 0x28
 80047cc:	2101      	movs	r1, #1
 80047ce:	4618      	mov	r0, r3
 80047d0:	f001 fa7c 	bl	8005ccc <RCCEx_PLL3_Config>
 80047d4:	4603      	mov	r3, r0
 80047d6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80047da:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80047e6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80047ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80047ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f2:	2100      	movs	r1, #0
 80047f4:	6039      	str	r1, [r7, #0]
 80047f6:	f003 0320 	and.w	r3, r3, #32
 80047fa:	607b      	str	r3, [r7, #4]
 80047fc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004800:	460b      	mov	r3, r1
 8004802:	4313      	orrs	r3, r2
 8004804:	d011      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004806:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800480a:	3328      	adds	r3, #40	; 0x28
 800480c:	2102      	movs	r1, #2
 800480e:	4618      	mov	r0, r3
 8004810:	f001 fa5c 	bl	8005ccc <RCCEx_PLL3_Config>
 8004814:	4603      	mov	r3, r0
 8004816:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800481a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004822:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004826:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 800482a:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	e000      	b.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
}
 8004838:	4618      	mov	r0, r3
 800483a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800483e:	46bd      	mov	sp, r7
 8004840:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004844:	58024400 	.word	0x58024400

08004848 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b090      	sub	sp, #64	; 0x40
 800484c:	af00      	add	r7, sp, #0
 800484e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004852:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004856:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800485a:	430b      	orrs	r3, r1
 800485c:	f040 8094 	bne.w	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004860:	4b9e      	ldr	r3, [pc, #632]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800486a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486c:	2b04      	cmp	r3, #4
 800486e:	f200 8087 	bhi.w	8004980 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8004872:	a201      	add	r2, pc, #4	; (adr r2, 8004878 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004878:	0800488d 	.word	0x0800488d
 800487c:	080048b5 	.word	0x080048b5
 8004880:	080048dd 	.word	0x080048dd
 8004884:	08004979 	.word	0x08004979
 8004888:	08004905 	.word	0x08004905
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800488c:	4b93      	ldr	r3, [pc, #588]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004894:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004898:	d108      	bne.n	80048ac <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800489a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800489e:	4618      	mov	r0, r3
 80048a0:	f001 f810 	bl	80058c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80048a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80048a8:	f000 bd45 	b.w	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80048ac:	2300      	movs	r3, #0
 80048ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048b0:	f000 bd41 	b.w	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80048b4:	4b89      	ldr	r3, [pc, #548]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048c0:	d108      	bne.n	80048d4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048c2:	f107 0318 	add.w	r3, r7, #24
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 fd54 	bl	8005374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80048d0:	f000 bd31 	b.w	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80048d4:	2300      	movs	r3, #0
 80048d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048d8:	f000 bd2d 	b.w	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80048dc:	4b7f      	ldr	r3, [pc, #508]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048e8:	d108      	bne.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048ea:	f107 030c 	add.w	r3, r7, #12
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 fe94 	bl	800561c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80048f8:	f000 bd1d 	b.w	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80048fc:	2300      	movs	r3, #0
 80048fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004900:	f000 bd19 	b.w	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004904:	4b75      	ldr	r3, [pc, #468]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004908:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800490c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800490e:	4b73      	ldr	r3, [pc, #460]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b04      	cmp	r3, #4
 8004918:	d10c      	bne.n	8004934 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800491a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491c:	2b00      	cmp	r3, #0
 800491e:	d109      	bne.n	8004934 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004920:	4b6e      	ldr	r3, [pc, #440]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	08db      	lsrs	r3, r3, #3
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	4a6d      	ldr	r2, [pc, #436]	; (8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800492c:	fa22 f303 	lsr.w	r3, r2, r3
 8004930:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004932:	e01f      	b.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004934:	4b69      	ldr	r3, [pc, #420]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004940:	d106      	bne.n	8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004944:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004948:	d102      	bne.n	8004950 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800494a:	4b66      	ldr	r3, [pc, #408]	; (8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800494c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800494e:	e011      	b.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004950:	4b62      	ldr	r3, [pc, #392]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004958:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800495c:	d106      	bne.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800495e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004964:	d102      	bne.n	800496c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004966:	4b60      	ldr	r3, [pc, #384]	; (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004968:	63fb      	str	r3, [r7, #60]	; 0x3c
 800496a:	e003      	b.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800496c:	2300      	movs	r3, #0
 800496e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004970:	f000 bce1 	b.w	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004974:	f000 bcdf 	b.w	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004978:	4b5c      	ldr	r3, [pc, #368]	; (8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800497a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800497c:	f000 bcdb 	b.w	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004980:	2300      	movs	r3, #0
 8004982:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004984:	f000 bcd7 	b.w	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004988:	e9d7 2300 	ldrd	r2, r3, [r7]
 800498c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8004990:	430b      	orrs	r3, r1
 8004992:	f040 80ad 	bne.w	8004af0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8004996:	4b51      	ldr	r3, [pc, #324]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800499a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800499e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80049a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049a6:	d056      	beq.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80049a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ae:	f200 8090 	bhi.w	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80049b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b4:	2bc0      	cmp	r3, #192	; 0xc0
 80049b6:	f000 8088 	beq.w	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80049ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049bc:	2bc0      	cmp	r3, #192	; 0xc0
 80049be:	f200 8088 	bhi.w	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80049c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c4:	2b80      	cmp	r3, #128	; 0x80
 80049c6:	d032      	beq.n	8004a2e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80049c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ca:	2b80      	cmp	r3, #128	; 0x80
 80049cc:	f200 8081 	bhi.w	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80049d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d003      	beq.n	80049de <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80049d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d8:	2b40      	cmp	r3, #64	; 0x40
 80049da:	d014      	beq.n	8004a06 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80049dc:	e079      	b.n	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80049de:	4b3f      	ldr	r3, [pc, #252]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049ea:	d108      	bne.n	80049fe <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80049ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049f0:	4618      	mov	r0, r3
 80049f2:	f000 ff67 	bl	80058c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80049f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80049fa:	f000 bc9c 	b.w	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80049fe:	2300      	movs	r3, #0
 8004a00:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a02:	f000 bc98 	b.w	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a06:	4b35      	ldr	r3, [pc, #212]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a12:	d108      	bne.n	8004a26 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a14:	f107 0318 	add.w	r3, r7, #24
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 fcab 	bl	8005374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a22:	f000 bc88 	b.w	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004a26:	2300      	movs	r3, #0
 8004a28:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a2a:	f000 bc84 	b.w	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004a2e:	4b2b      	ldr	r3, [pc, #172]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a3a:	d108      	bne.n	8004a4e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a3c:	f107 030c 	add.w	r3, r7, #12
 8004a40:	4618      	mov	r0, r3
 8004a42:	f000 fdeb 	bl	800561c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a4a:	f000 bc74 	b.w	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a52:	f000 bc70 	b.w	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004a56:	4b21      	ldr	r3, [pc, #132]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a5e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004a60:	4b1e      	ldr	r3, [pc, #120]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d10c      	bne.n	8004a86 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8004a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d109      	bne.n	8004a86 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a72:	4b1a      	ldr	r3, [pc, #104]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	08db      	lsrs	r3, r3, #3
 8004a78:	f003 0303 	and.w	r3, r3, #3
 8004a7c:	4a18      	ldr	r2, [pc, #96]	; (8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a84:	e01f      	b.n	8004ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a86:	4b15      	ldr	r3, [pc, #84]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a92:	d106      	bne.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a9a:	d102      	bne.n	8004aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004a9c:	4b11      	ldr	r3, [pc, #68]	; (8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aa0:	e011      	b.n	8004ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004aa2:	4b0e      	ldr	r3, [pc, #56]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aae:	d106      	bne.n	8004abe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8004ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ab2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ab6:	d102      	bne.n	8004abe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004ab8:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004aba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004abc:	e003      	b.n	8004ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004ac2:	f000 bc38 	b.w	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004ac6:	f000 bc36 	b.w	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004aca:	4b08      	ldr	r3, [pc, #32]	; (8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004acc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ace:	f000 bc32 	b.w	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ad6:	f000 bc2e 	b.w	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004ada:	bf00      	nop
 8004adc:	58024400 	.word	0x58024400
 8004ae0:	03d09000 	.word	0x03d09000
 8004ae4:	003d0900 	.word	0x003d0900
 8004ae8:	017d7840 	.word	0x017d7840
 8004aec:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004af0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004af4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8004af8:	430b      	orrs	r3, r1
 8004afa:	f040 809c 	bne.w	8004c36 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8004afe:	4b9e      	ldr	r3, [pc, #632]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b02:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004b06:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b0e:	d054      	beq.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8004b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b16:	f200 808b 	bhi.w	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004b20:	f000 8083 	beq.w	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8004b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b26:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004b2a:	f200 8081 	bhi.w	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b34:	d02f      	beq.n	8004b96 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8004b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b3c:	d878      	bhi.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d004      	beq.n	8004b4e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8004b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b4a:	d012      	beq.n	8004b72 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8004b4c:	e070      	b.n	8004c30 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004b4e:	4b8a      	ldr	r3, [pc, #552]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b5a:	d107      	bne.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 feaf 	bl	80058c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b68:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004b6a:	e3e4      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b70:	e3e1      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b72:	4b81      	ldr	r3, [pc, #516]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b7e:	d107      	bne.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b80:	f107 0318 	add.w	r3, r7, #24
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 fbf5 	bl	8005374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004b8e:	e3d2      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004b90:	2300      	movs	r3, #0
 8004b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b94:	e3cf      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004b96:	4b78      	ldr	r3, [pc, #480]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ba2:	d107      	bne.n	8004bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ba4:	f107 030c 	add.w	r3, r7, #12
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 fd37 	bl	800561c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004bb2:	e3c0      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bb8:	e3bd      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004bba:	4b6f      	ldr	r3, [pc, #444]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004bc2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004bc4:	4b6c      	ldr	r3, [pc, #432]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b04      	cmp	r3, #4
 8004bce:	d10c      	bne.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8004bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d109      	bne.n	8004bea <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004bd6:	4b68      	ldr	r3, [pc, #416]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	08db      	lsrs	r3, r3, #3
 8004bdc:	f003 0303 	and.w	r3, r3, #3
 8004be0:	4a66      	ldr	r2, [pc, #408]	; (8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8004be2:	fa22 f303 	lsr.w	r3, r2, r3
 8004be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004be8:	e01e      	b.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004bea:	4b63      	ldr	r3, [pc, #396]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bf6:	d106      	bne.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8004bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bfe:	d102      	bne.n	8004c06 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004c00:	4b5f      	ldr	r3, [pc, #380]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8004c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c04:	e010      	b.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c06:	4b5c      	ldr	r3, [pc, #368]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c12:	d106      	bne.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8004c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c1a:	d102      	bne.n	8004c22 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004c1c:	4b59      	ldr	r3, [pc, #356]	; (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8004c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c20:	e002      	b.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004c22:	2300      	movs	r3, #0
 8004c24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004c26:	e386      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004c28:	e385      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004c2a:	4b57      	ldr	r3, [pc, #348]	; (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c2e:	e382      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8004c30:	2300      	movs	r3, #0
 8004c32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c34:	e37f      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004c36:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c3a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8004c3e:	430b      	orrs	r3, r1
 8004c40:	f040 80a7 	bne.w	8004d92 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8004c44:	4b4c      	ldr	r3, [pc, #304]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c48:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004c4c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c54:	d055      	beq.n	8004d02 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8004c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c5c:	f200 8096 	bhi.w	8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c66:	f000 8084 	beq.w	8004d72 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004c70:	f200 808c 	bhi.w	8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c7a:	d030      	beq.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c82:	f200 8083 	bhi.w	8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d004      	beq.n	8004c96 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c92:	d012      	beq.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8004c94:	e07a      	b.n	8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004c96:	4b38      	ldr	r3, [pc, #224]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ca2:	d107      	bne.n	8004cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fe0b 	bl	80058c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004cb2:	e340      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cb8:	e33d      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004cba:	4b2f      	ldr	r3, [pc, #188]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cc6:	d107      	bne.n	8004cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cc8:	f107 0318 	add.w	r3, r7, #24
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 fb51 	bl	8005374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004cd6:	e32e      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cdc:	e32b      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004cde:	4b26      	ldr	r3, [pc, #152]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ce6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cea:	d107      	bne.n	8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cec:	f107 030c 	add.w	r3, r7, #12
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fc93 	bl	800561c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004cfa:	e31c      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d00:	e319      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004d02:	4b1d      	ldr	r3, [pc, #116]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d0a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d0c:	4b1a      	ldr	r3, [pc, #104]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b04      	cmp	r3, #4
 8004d16:	d10c      	bne.n	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8004d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d109      	bne.n	8004d32 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d1e:	4b16      	ldr	r3, [pc, #88]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	08db      	lsrs	r3, r3, #3
 8004d24:	f003 0303 	and.w	r3, r3, #3
 8004d28:	4a14      	ldr	r2, [pc, #80]	; (8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8004d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d30:	e01e      	b.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d32:	4b11      	ldr	r3, [pc, #68]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d3e:	d106      	bne.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8004d40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d46:	d102      	bne.n	8004d4e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004d48:	4b0d      	ldr	r3, [pc, #52]	; (8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8004d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d4c:	e010      	b.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d4e:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d5a:	d106      	bne.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8004d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d62:	d102      	bne.n	8004d6a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004d64:	4b07      	ldr	r3, [pc, #28]	; (8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8004d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d68:	e002      	b.n	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004d6e:	e2e2      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004d70:	e2e1      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004d72:	4b05      	ldr	r3, [pc, #20]	; (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004d74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d76:	e2de      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004d78:	58024400 	.word	0x58024400
 8004d7c:	03d09000 	.word	0x03d09000
 8004d80:	003d0900 	.word	0x003d0900
 8004d84:	017d7840 	.word	0x017d7840
 8004d88:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d90:	e2d1      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004d92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d96:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8004d9a:	430b      	orrs	r3, r1
 8004d9c:	f040 809c 	bne.w	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8004da0:	4b93      	ldr	r3, [pc, #588]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004da8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004db0:	d054      	beq.n	8004e5c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004db8:	f200 808b 	bhi.w	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dbe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dc2:	f000 8083 	beq.w	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004dcc:	f200 8081 	bhi.w	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd6:	d02f      	beq.n	8004e38 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8004dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dde:	d878      	bhi.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d004      	beq.n	8004df0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8004de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dec:	d012      	beq.n	8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8004dee:	e070      	b.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004df0:	4b7f      	ldr	r3, [pc, #508]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004df8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004dfc:	d107      	bne.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fd5e 	bl	80058c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e0c:	e293      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e12:	e290      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e14:	4b76      	ldr	r3, [pc, #472]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e20:	d107      	bne.n	8004e32 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e22:	f107 0318 	add.w	r3, r7, #24
 8004e26:	4618      	mov	r0, r3
 8004e28:	f000 faa4 	bl	8005374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e30:	e281      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004e32:	2300      	movs	r3, #0
 8004e34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e36:	e27e      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e38:	4b6d      	ldr	r3, [pc, #436]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e44:	d107      	bne.n	8004e56 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e46:	f107 030c 	add.w	r3, r7, #12
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 fbe6 	bl	800561c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e54:	e26f      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004e56:	2300      	movs	r3, #0
 8004e58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e5a:	e26c      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004e5c:	4b64      	ldr	r3, [pc, #400]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e64:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004e66:	4b62      	ldr	r3, [pc, #392]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0304 	and.w	r3, r3, #4
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d10c      	bne.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8004e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d109      	bne.n	8004e8c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004e78:	4b5d      	ldr	r3, [pc, #372]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	08db      	lsrs	r3, r3, #3
 8004e7e:	f003 0303 	and.w	r3, r3, #3
 8004e82:	4a5c      	ldr	r2, [pc, #368]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8004e84:	fa22 f303 	lsr.w	r3, r2, r3
 8004e88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e8a:	e01e      	b.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e8c:	4b58      	ldr	r3, [pc, #352]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e98:	d106      	bne.n	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8004e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ea0:	d102      	bne.n	8004ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004ea2:	4b55      	ldr	r3, [pc, #340]	; (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ea6:	e010      	b.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004ea8:	4b51      	ldr	r3, [pc, #324]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004eb4:	d106      	bne.n	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8004eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ebc:	d102      	bne.n	8004ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004ebe:	4b4f      	ldr	r3, [pc, #316]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ec2:	e002      	b.n	8004eca <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004ec8:	e235      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004eca:	e234      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004ecc:	4b4c      	ldr	r3, [pc, #304]	; (8005000 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8004ece:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ed0:	e231      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ed6:	e22e      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8004ed8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004edc:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8004ee0:	430b      	orrs	r3, r1
 8004ee2:	f040 808f 	bne.w	8005004 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8004ee6:	4b42      	ldr	r3, [pc, #264]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eea:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8004eee:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8004ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ef6:	d06b      	beq.n	8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8004ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004efe:	d874      	bhi.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f06:	d056      	beq.n	8004fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8004f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f0e:	d86c      	bhi.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f16:	d03b      	beq.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8004f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f1e:	d864      	bhi.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f26:	d021      	beq.n	8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8004f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f2e:	d85c      	bhi.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d004      	beq.n	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8004f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f3c:	d004      	beq.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8004f3e:	e054      	b.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8004f40:	f7fe f9ca 	bl	80032d8 <HAL_RCC_GetPCLK1Freq>
 8004f44:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004f46:	e1f6      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f48:	4b29      	ldr	r3, [pc, #164]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f54:	d107      	bne.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f56:	f107 0318 	add.w	r3, r7, #24
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 fa0a 	bl	8005374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f64:	e1e7      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004f66:	2300      	movs	r3, #0
 8004f68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f6a:	e1e4      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f6c:	4b20      	ldr	r3, [pc, #128]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f78:	d107      	bne.n	8004f8a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f7a:	f107 030c 	add.w	r3, r7, #12
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fb4c 	bl	800561c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f88:	e1d5      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f8e:	e1d2      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f90:	4b17      	ldr	r3, [pc, #92]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b04      	cmp	r3, #4
 8004f9a:	d109      	bne.n	8004fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f9c:	4b14      	ldr	r3, [pc, #80]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	08db      	lsrs	r3, r3, #3
 8004fa2:	f003 0303 	and.w	r3, r3, #3
 8004fa6:	4a13      	ldr	r2, [pc, #76]	; (8004ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8004fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fac:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fae:	e1c2      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fb4:	e1bf      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004fb6:	4b0e      	ldr	r3, [pc, #56]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fc2:	d102      	bne.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8004fc4:	4b0c      	ldr	r3, [pc, #48]	; (8004ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fc8:	e1b5      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fce:	e1b2      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004fd0:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fdc:	d102      	bne.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8004fde:	4b07      	ldr	r3, [pc, #28]	; (8004ffc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fe2:	e1a8      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fe8:	e1a5      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004fea:	2300      	movs	r3, #0
 8004fec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fee:	e1a2      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004ff0:	58024400 	.word	0x58024400
 8004ff4:	03d09000 	.word	0x03d09000
 8004ff8:	003d0900 	.word	0x003d0900
 8004ffc:	017d7840 	.word	0x017d7840
 8005000:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005004:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005008:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800500c:	430b      	orrs	r3, r1
 800500e:	d173      	bne.n	80050f8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005010:	4b9c      	ldr	r3, [pc, #624]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005014:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005018:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800501a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005020:	d02f      	beq.n	8005082 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005024:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005028:	d863      	bhi.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800502a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502c:	2b00      	cmp	r3, #0
 800502e:	d004      	beq.n	800503a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005036:	d012      	beq.n	800505e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005038:	e05b      	b.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800503a:	4b92      	ldr	r3, [pc, #584]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005042:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005046:	d107      	bne.n	8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005048:	f107 0318 	add.w	r3, r7, #24
 800504c:	4618      	mov	r0, r3
 800504e:	f000 f991 	bl	8005374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005056:	e16e      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005058:	2300      	movs	r3, #0
 800505a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800505c:	e16b      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800505e:	4b89      	ldr	r3, [pc, #548]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005066:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800506a:	d107      	bne.n	800507c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800506c:	f107 030c 	add.w	r3, r7, #12
 8005070:	4618      	mov	r0, r3
 8005072:	f000 fad3 	bl	800561c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800507a:	e15c      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800507c:	2300      	movs	r3, #0
 800507e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005080:	e159      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005082:	4b80      	ldr	r3, [pc, #512]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005086:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800508a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800508c:	4b7d      	ldr	r3, [pc, #500]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b04      	cmp	r3, #4
 8005096:	d10c      	bne.n	80050b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509a:	2b00      	cmp	r3, #0
 800509c:	d109      	bne.n	80050b2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800509e:	4b79      	ldr	r3, [pc, #484]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	08db      	lsrs	r3, r3, #3
 80050a4:	f003 0303 	and.w	r3, r3, #3
 80050a8:	4a77      	ldr	r2, [pc, #476]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80050aa:	fa22 f303 	lsr.w	r3, r2, r3
 80050ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050b0:	e01e      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80050b2:	4b74      	ldr	r3, [pc, #464]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050be:	d106      	bne.n	80050ce <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80050c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050c6:	d102      	bne.n	80050ce <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80050c8:	4b70      	ldr	r3, [pc, #448]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80050ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050cc:	e010      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80050ce:	4b6d      	ldr	r3, [pc, #436]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050da:	d106      	bne.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80050dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050e2:	d102      	bne.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80050e4:	4b6a      	ldr	r3, [pc, #424]	; (8005290 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80050e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050e8:	e002      	b.n	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80050ea:	2300      	movs	r3, #0
 80050ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80050ee:	e122      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80050f0:	e121      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80050f2:	2300      	movs	r3, #0
 80050f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050f6:	e11e      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80050f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050fc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005100:	430b      	orrs	r3, r1
 8005102:	d133      	bne.n	800516c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005104:	4b5f      	ldr	r3, [pc, #380]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800510c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800510e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005110:	2b00      	cmp	r3, #0
 8005112:	d004      	beq.n	800511e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800511a:	d012      	beq.n	8005142 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800511c:	e023      	b.n	8005166 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800511e:	4b59      	ldr	r3, [pc, #356]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005126:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800512a:	d107      	bne.n	800513c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800512c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005130:	4618      	mov	r0, r3
 8005132:	f000 fbc7 	bl	80058c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005138:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800513a:	e0fc      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800513c:	2300      	movs	r3, #0
 800513e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005140:	e0f9      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005142:	4b50      	ldr	r3, [pc, #320]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800514a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800514e:	d107      	bne.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005150:	f107 0318 	add.w	r3, r7, #24
 8005154:	4618      	mov	r0, r3
 8005156:	f000 f90d 	bl	8005374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800515e:	e0ea      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005160:	2300      	movs	r3, #0
 8005162:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005164:	e0e7      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005166:	2300      	movs	r3, #0
 8005168:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800516a:	e0e4      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800516c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005170:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005174:	430b      	orrs	r3, r1
 8005176:	f040 808d 	bne.w	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800517a:	4b42      	ldr	r3, [pc, #264]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800517c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005182:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005186:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800518a:	d06b      	beq.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800518c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005192:	d874      	bhi.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800519a:	d056      	beq.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800519c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800519e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a2:	d86c      	bhi.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80051a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051aa:	d03b      	beq.n	8005224 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80051ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80051b2:	d864      	bhi.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80051b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051ba:	d021      	beq.n	8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80051bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051c2:	d85c      	bhi.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80051c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d004      	beq.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80051ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051d0:	d004      	beq.n	80051dc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80051d2:	e054      	b.n	800527e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80051d4:	f000 f8b8 	bl	8005348 <HAL_RCCEx_GetD3PCLK1Freq>
 80051d8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80051da:	e0ac      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80051dc:	4b29      	ldr	r3, [pc, #164]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051e8:	d107      	bne.n	80051fa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051ea:	f107 0318 	add.w	r3, r7, #24
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 f8c0 	bl	8005374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80051f8:	e09d      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80051fa:	2300      	movs	r3, #0
 80051fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051fe:	e09a      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005200:	4b20      	ldr	r3, [pc, #128]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005208:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800520c:	d107      	bne.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800520e:	f107 030c 	add.w	r3, r7, #12
 8005212:	4618      	mov	r0, r3
 8005214:	f000 fa02 	bl	800561c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800521c:	e08b      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800521e:	2300      	movs	r3, #0
 8005220:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005222:	e088      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005224:	4b17      	ldr	r3, [pc, #92]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b04      	cmp	r3, #4
 800522e:	d109      	bne.n	8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005230:	4b14      	ldr	r3, [pc, #80]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	08db      	lsrs	r3, r3, #3
 8005236:	f003 0303 	and.w	r3, r3, #3
 800523a:	4a13      	ldr	r2, [pc, #76]	; (8005288 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800523c:	fa22 f303 	lsr.w	r3, r2, r3
 8005240:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005242:	e078      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005244:	2300      	movs	r3, #0
 8005246:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005248:	e075      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800524a:	4b0e      	ldr	r3, [pc, #56]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005256:	d102      	bne.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8005258:	4b0c      	ldr	r3, [pc, #48]	; (800528c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800525a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800525c:	e06b      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800525e:	2300      	movs	r3, #0
 8005260:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005262:	e068      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005264:	4b07      	ldr	r3, [pc, #28]	; (8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800526c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005270:	d102      	bne.n	8005278 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8005272:	4b07      	ldr	r3, [pc, #28]	; (8005290 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005274:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005276:	e05e      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005278:	2300      	movs	r3, #0
 800527a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800527c:	e05b      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800527e:	2300      	movs	r3, #0
 8005280:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005282:	e058      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005284:	58024400 	.word	0x58024400
 8005288:	03d09000 	.word	0x03d09000
 800528c:	003d0900 	.word	0x003d0900
 8005290:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005294:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005298:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800529c:	430b      	orrs	r3, r1
 800529e:	d148      	bne.n	8005332 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80052a0:	4b27      	ldr	r3, [pc, #156]	; (8005340 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80052a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052a8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80052aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052b0:	d02a      	beq.n	8005308 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80052b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052b8:	d838      	bhi.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80052ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d004      	beq.n	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80052c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052c6:	d00d      	beq.n	80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80052c8:	e030      	b.n	800532c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80052ca:	4b1d      	ldr	r3, [pc, #116]	; (8005340 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052d6:	d102      	bne.n	80052de <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80052d8:	4b1a      	ldr	r3, [pc, #104]	; (8005344 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80052da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052dc:	e02b      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80052de:	2300      	movs	r3, #0
 80052e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052e2:	e028      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80052e4:	4b16      	ldr	r3, [pc, #88]	; (8005340 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052f0:	d107      	bne.n	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 fae4 	bl	80058c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80052fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005300:	e019      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005302:	2300      	movs	r3, #0
 8005304:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005306:	e016      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005308:	4b0d      	ldr	r3, [pc, #52]	; (8005340 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005310:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005314:	d107      	bne.n	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005316:	f107 0318 	add.w	r3, r7, #24
 800531a:	4618      	mov	r0, r3
 800531c:	f000 f82a 	bl	8005374 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005324:	e007      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005326:	2300      	movs	r3, #0
 8005328:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800532a:	e004      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800532c:	2300      	movs	r3, #0
 800532e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005330:	e001      	b.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8005332:	2300      	movs	r3, #0
 8005334:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8005336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005338:	4618      	mov	r0, r3
 800533a:	3740      	adds	r7, #64	; 0x40
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	58024400 	.word	0x58024400
 8005344:	017d7840 	.word	0x017d7840

08005348 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800534c:	f7fd ff94 	bl	8003278 <HAL_RCC_GetHCLKFreq>
 8005350:	4602      	mov	r2, r0
 8005352:	4b06      	ldr	r3, [pc, #24]	; (800536c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	091b      	lsrs	r3, r3, #4
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	4904      	ldr	r1, [pc, #16]	; (8005370 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800535e:	5ccb      	ldrb	r3, [r1, r3]
 8005360:	f003 031f 	and.w	r3, r3, #31
 8005364:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005368:	4618      	mov	r0, r3
 800536a:	bd80      	pop	{r7, pc}
 800536c:	58024400 	.word	0x58024400
 8005370:	08017f7c 	.word	0x08017f7c

08005374 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005374:	b480      	push	{r7}
 8005376:	b089      	sub	sp, #36	; 0x24
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800537c:	4ba1      	ldr	r3, [pc, #644]	; (8005604 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005380:	f003 0303 	and.w	r3, r3, #3
 8005384:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005386:	4b9f      	ldr	r3, [pc, #636]	; (8005604 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538a:	0b1b      	lsrs	r3, r3, #12
 800538c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005390:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005392:	4b9c      	ldr	r3, [pc, #624]	; (8005604 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005396:	091b      	lsrs	r3, r3, #4
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800539e:	4b99      	ldr	r3, [pc, #612]	; (8005604 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a2:	08db      	lsrs	r3, r3, #3
 80053a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053a8:	693a      	ldr	r2, [r7, #16]
 80053aa:	fb02 f303 	mul.w	r3, r2, r3
 80053ae:	ee07 3a90 	vmov	s15, r3
 80053b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 8111 	beq.w	80055e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	f000 8083 	beq.w	80054d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	f200 80a1 	bhi.w	8005514 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d003      	beq.n	80053e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d056      	beq.n	800548c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80053de:	e099      	b.n	8005514 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053e0:	4b88      	ldr	r3, [pc, #544]	; (8005604 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0320 	and.w	r3, r3, #32
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d02d      	beq.n	8005448 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053ec:	4b85      	ldr	r3, [pc, #532]	; (8005604 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	08db      	lsrs	r3, r3, #3
 80053f2:	f003 0303 	and.w	r3, r3, #3
 80053f6:	4a84      	ldr	r2, [pc, #528]	; (8005608 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80053f8:	fa22 f303 	lsr.w	r3, r2, r3
 80053fc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	ee07 3a90 	vmov	s15, r3
 8005404:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	ee07 3a90 	vmov	s15, r3
 800540e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005416:	4b7b      	ldr	r3, [pc, #492]	; (8005604 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800541e:	ee07 3a90 	vmov	s15, r3
 8005422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005426:	ed97 6a03 	vldr	s12, [r7, #12]
 800542a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800560c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800542e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800543a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800543e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005442:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005446:	e087      	b.n	8005558 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	ee07 3a90 	vmov	s15, r3
 800544e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005452:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005610 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800545a:	4b6a      	ldr	r3, [pc, #424]	; (8005604 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800545c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005462:	ee07 3a90 	vmov	s15, r3
 8005466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800546a:	ed97 6a03 	vldr	s12, [r7, #12]
 800546e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800560c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800547a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800547e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005486:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800548a:	e065      	b.n	8005558 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	ee07 3a90 	vmov	s15, r3
 8005492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005496:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800549a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800549e:	4b59      	ldr	r3, [pc, #356]	; (8005604 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a6:	ee07 3a90 	vmov	s15, r3
 80054aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80054b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800560c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054ce:	e043      	b.n	8005558 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	ee07 3a90 	vmov	s15, r3
 80054d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005618 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80054de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054e2:	4b48      	ldr	r3, [pc, #288]	; (8005604 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ea:	ee07 3a90 	vmov	s15, r3
 80054ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80054f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800560c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800550a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800550e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005512:	e021      	b.n	8005558 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	ee07 3a90 	vmov	s15, r3
 800551a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800551e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005614 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005526:	4b37      	ldr	r3, [pc, #220]	; (8005604 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800552e:	ee07 3a90 	vmov	s15, r3
 8005532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005536:	ed97 6a03 	vldr	s12, [r7, #12]
 800553a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800560c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800553e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800554a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800554e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005552:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005556:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005558:	4b2a      	ldr	r3, [pc, #168]	; (8005604 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800555a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555c:	0a5b      	lsrs	r3, r3, #9
 800555e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005562:	ee07 3a90 	vmov	s15, r3
 8005566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800556a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800556e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005572:	edd7 6a07 	vldr	s13, [r7, #28]
 8005576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800557a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800557e:	ee17 2a90 	vmov	r2, s15
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005586:	4b1f      	ldr	r3, [pc, #124]	; (8005604 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558a:	0c1b      	lsrs	r3, r3, #16
 800558c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005590:	ee07 3a90 	vmov	s15, r3
 8005594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005598:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800559c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80055a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055ac:	ee17 2a90 	vmov	r2, s15
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80055b4:	4b13      	ldr	r3, [pc, #76]	; (8005604 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b8:	0e1b      	lsrs	r3, r3, #24
 80055ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055be:	ee07 3a90 	vmov	s15, r3
 80055c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80055ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80055d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055da:	ee17 2a90 	vmov	r2, s15
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80055e2:	e008      	b.n	80055f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2200      	movs	r2, #0
 80055f4:	609a      	str	r2, [r3, #8]
}
 80055f6:	bf00      	nop
 80055f8:	3724      	adds	r7, #36	; 0x24
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	58024400 	.word	0x58024400
 8005608:	03d09000 	.word	0x03d09000
 800560c:	46000000 	.word	0x46000000
 8005610:	4c742400 	.word	0x4c742400
 8005614:	4a742400 	.word	0x4a742400
 8005618:	4bbebc20 	.word	0x4bbebc20

0800561c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800561c:	b480      	push	{r7}
 800561e:	b089      	sub	sp, #36	; 0x24
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005624:	4ba1      	ldr	r3, [pc, #644]	; (80058ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005628:	f003 0303 	and.w	r3, r3, #3
 800562c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800562e:	4b9f      	ldr	r3, [pc, #636]	; (80058ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005632:	0d1b      	lsrs	r3, r3, #20
 8005634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005638:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800563a:	4b9c      	ldr	r3, [pc, #624]	; (80058ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800563c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800563e:	0a1b      	lsrs	r3, r3, #8
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005646:	4b99      	ldr	r3, [pc, #612]	; (80058ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800564a:	08db      	lsrs	r3, r3, #3
 800564c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	fb02 f303 	mul.w	r3, r2, r3
 8005656:	ee07 3a90 	vmov	s15, r3
 800565a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800565e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	2b00      	cmp	r3, #0
 8005666:	f000 8111 	beq.w	800588c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	2b02      	cmp	r3, #2
 800566e:	f000 8083 	beq.w	8005778 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	2b02      	cmp	r3, #2
 8005676:	f200 80a1 	bhi.w	80057bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d003      	beq.n	8005688 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d056      	beq.n	8005734 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005686:	e099      	b.n	80057bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005688:	4b88      	ldr	r3, [pc, #544]	; (80058ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0320 	and.w	r3, r3, #32
 8005690:	2b00      	cmp	r3, #0
 8005692:	d02d      	beq.n	80056f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005694:	4b85      	ldr	r3, [pc, #532]	; (80058ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	08db      	lsrs	r3, r3, #3
 800569a:	f003 0303 	and.w	r3, r3, #3
 800569e:	4a84      	ldr	r2, [pc, #528]	; (80058b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80056a0:	fa22 f303 	lsr.w	r3, r2, r3
 80056a4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	ee07 3a90 	vmov	s15, r3
 80056ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	ee07 3a90 	vmov	s15, r3
 80056b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056be:	4b7b      	ldr	r3, [pc, #492]	; (80058ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c6:	ee07 3a90 	vmov	s15, r3
 80056ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80056d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80058b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80056d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80056ee:	e087      	b.n	8005800 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	ee07 3a90 	vmov	s15, r3
 80056f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80058b8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80056fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005702:	4b6a      	ldr	r3, [pc, #424]	; (80058ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800570a:	ee07 3a90 	vmov	s15, r3
 800570e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005712:	ed97 6a03 	vldr	s12, [r7, #12]
 8005716:	eddf 5a67 	vldr	s11, [pc, #412]	; 80058b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800571a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800571e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800572a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800572e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005732:	e065      	b.n	8005800 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	ee07 3a90 	vmov	s15, r3
 800573a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800573e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80058bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005746:	4b59      	ldr	r3, [pc, #356]	; (80058ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574e:	ee07 3a90 	vmov	s15, r3
 8005752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005756:	ed97 6a03 	vldr	s12, [r7, #12]
 800575a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80058b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800575e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800576a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800576e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005772:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005776:	e043      	b.n	8005800 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	ee07 3a90 	vmov	s15, r3
 800577e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005782:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80058c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800578a:	4b48      	ldr	r3, [pc, #288]	; (80058ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005792:	ee07 3a90 	vmov	s15, r3
 8005796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800579a:	ed97 6a03 	vldr	s12, [r7, #12]
 800579e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80058b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057ba:	e021      	b.n	8005800 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	ee07 3a90 	vmov	s15, r3
 80057c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80058bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80057ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ce:	4b37      	ldr	r3, [pc, #220]	; (80058ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d6:	ee07 3a90 	vmov	s15, r3
 80057da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057de:	ed97 6a03 	vldr	s12, [r7, #12]
 80057e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80058b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057fe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005800:	4b2a      	ldr	r3, [pc, #168]	; (80058ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005804:	0a5b      	lsrs	r3, r3, #9
 8005806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800580a:	ee07 3a90 	vmov	s15, r3
 800580e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005812:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005816:	ee37 7a87 	vadd.f32	s14, s15, s14
 800581a:	edd7 6a07 	vldr	s13, [r7, #28]
 800581e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005822:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005826:	ee17 2a90 	vmov	r2, s15
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800582e:	4b1f      	ldr	r3, [pc, #124]	; (80058ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	0c1b      	lsrs	r3, r3, #16
 8005834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005838:	ee07 3a90 	vmov	s15, r3
 800583c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005840:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005844:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005848:	edd7 6a07 	vldr	s13, [r7, #28]
 800584c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005854:	ee17 2a90 	vmov	r2, s15
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800585c:	4b13      	ldr	r3, [pc, #76]	; (80058ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800585e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005860:	0e1b      	lsrs	r3, r3, #24
 8005862:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005872:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005876:	edd7 6a07 	vldr	s13, [r7, #28]
 800587a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800587e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005882:	ee17 2a90 	vmov	r2, s15
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800588a:	e008      	b.n	800589e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	609a      	str	r2, [r3, #8]
}
 800589e:	bf00      	nop
 80058a0:	3724      	adds	r7, #36	; 0x24
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	58024400 	.word	0x58024400
 80058b0:	03d09000 	.word	0x03d09000
 80058b4:	46000000 	.word	0x46000000
 80058b8:	4c742400 	.word	0x4c742400
 80058bc:	4a742400 	.word	0x4a742400
 80058c0:	4bbebc20 	.word	0x4bbebc20

080058c4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b089      	sub	sp, #36	; 0x24
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80058cc:	4ba0      	ldr	r3, [pc, #640]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80058ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058d0:	f003 0303 	and.w	r3, r3, #3
 80058d4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80058d6:	4b9e      	ldr	r3, [pc, #632]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80058d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058da:	091b      	lsrs	r3, r3, #4
 80058dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058e0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80058e2:	4b9b      	ldr	r3, [pc, #620]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80058e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80058ec:	4b98      	ldr	r3, [pc, #608]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80058ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f0:	08db      	lsrs	r3, r3, #3
 80058f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058f6:	693a      	ldr	r2, [r7, #16]
 80058f8:	fb02 f303 	mul.w	r3, r2, r3
 80058fc:	ee07 3a90 	vmov	s15, r3
 8005900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005904:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	2b00      	cmp	r3, #0
 800590c:	f000 8111 	beq.w	8005b32 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	2b02      	cmp	r3, #2
 8005914:	f000 8083 	beq.w	8005a1e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	2b02      	cmp	r3, #2
 800591c:	f200 80a1 	bhi.w	8005a62 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d056      	beq.n	80059da <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800592c:	e099      	b.n	8005a62 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800592e:	4b88      	ldr	r3, [pc, #544]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0320 	and.w	r3, r3, #32
 8005936:	2b00      	cmp	r3, #0
 8005938:	d02d      	beq.n	8005996 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800593a:	4b85      	ldr	r3, [pc, #532]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	08db      	lsrs	r3, r3, #3
 8005940:	f003 0303 	and.w	r3, r3, #3
 8005944:	4a83      	ldr	r2, [pc, #524]	; (8005b54 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005946:	fa22 f303 	lsr.w	r3, r2, r3
 800594a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	ee07 3a90 	vmov	s15, r3
 8005952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	ee07 3a90 	vmov	s15, r3
 800595c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005960:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005964:	4b7a      	ldr	r3, [pc, #488]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800596c:	ee07 3a90 	vmov	s15, r3
 8005970:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005974:	ed97 6a03 	vldr	s12, [r7, #12]
 8005978:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005b58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800597c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005980:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005984:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005988:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800598c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005990:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005994:	e087      	b.n	8005aa6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	ee07 3a90 	vmov	s15, r3
 800599c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005b5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80059a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059a8:	4b69      	ldr	r3, [pc, #420]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b0:	ee07 3a90 	vmov	s15, r3
 80059b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b8:	ed97 6a03 	vldr	s12, [r7, #12]
 80059bc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005b58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80059c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059d8:	e065      	b.n	8005aa6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	ee07 3a90 	vmov	s15, r3
 80059e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005b60 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80059e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059ec:	4b58      	ldr	r3, [pc, #352]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f4:	ee07 3a90 	vmov	s15, r3
 80059f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059fc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a00:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005b58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005a04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a1c:	e043      	b.n	8005aa6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	ee07 3a90 	vmov	s15, r3
 8005a24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a28:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005b64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005a2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a30:	4b47      	ldr	r3, [pc, #284]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a38:	ee07 3a90 	vmov	s15, r3
 8005a3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a40:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a44:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005b58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005a48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a60:	e021      	b.n	8005aa6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	ee07 3a90 	vmov	s15, r3
 8005a68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a6c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005b5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005a70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a74:	4b36      	ldr	r3, [pc, #216]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a7c:	ee07 3a90 	vmov	s15, r3
 8005a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a84:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a88:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005b58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005a8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aa0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005aa4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005aa6:	4b2a      	ldr	r3, [pc, #168]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aaa:	0a5b      	lsrs	r3, r3, #9
 8005aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ab0:	ee07 3a90 	vmov	s15, r3
 8005ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ab8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005abc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ac0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005acc:	ee17 2a90 	vmov	r2, s15
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005ad4:	4b1e      	ldr	r3, [pc, #120]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ad8:	0c1b      	lsrs	r3, r3, #16
 8005ada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ade:	ee07 3a90 	vmov	s15, r3
 8005ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ae6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005aea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005aee:	edd7 6a07 	vldr	s13, [r7, #28]
 8005af2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005af6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005afa:	ee17 2a90 	vmov	r2, s15
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005b02:	4b13      	ldr	r3, [pc, #76]	; (8005b50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b06:	0e1b      	lsrs	r3, r3, #24
 8005b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b0c:	ee07 3a90 	vmov	s15, r3
 8005b10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b18:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b1c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b28:	ee17 2a90 	vmov	r2, s15
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005b30:	e008      	b.n	8005b44 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	609a      	str	r2, [r3, #8]
}
 8005b44:	bf00      	nop
 8005b46:	3724      	adds	r7, #36	; 0x24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	58024400 	.word	0x58024400
 8005b54:	03d09000 	.word	0x03d09000
 8005b58:	46000000 	.word	0x46000000
 8005b5c:	4c742400 	.word	0x4c742400
 8005b60:	4a742400 	.word	0x4a742400
 8005b64:	4bbebc20 	.word	0x4bbebc20

08005b68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b72:	2300      	movs	r3, #0
 8005b74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005b76:	4b53      	ldr	r3, [pc, #332]	; (8005cc4 <RCCEx_PLL2_Config+0x15c>)
 8005b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7a:	f003 0303 	and.w	r3, r3, #3
 8005b7e:	2b03      	cmp	r3, #3
 8005b80:	d101      	bne.n	8005b86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e099      	b.n	8005cba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005b86:	4b4f      	ldr	r3, [pc, #316]	; (8005cc4 <RCCEx_PLL2_Config+0x15c>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a4e      	ldr	r2, [pc, #312]	; (8005cc4 <RCCEx_PLL2_Config+0x15c>)
 8005b8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b92:	f7fb fd5d 	bl	8001650 <HAL_GetTick>
 8005b96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005b98:	e008      	b.n	8005bac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005b9a:	f7fb fd59 	bl	8001650 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d901      	bls.n	8005bac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e086      	b.n	8005cba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005bac:	4b45      	ldr	r3, [pc, #276]	; (8005cc4 <RCCEx_PLL2_Config+0x15c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1f0      	bne.n	8005b9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005bb8:	4b42      	ldr	r3, [pc, #264]	; (8005cc4 <RCCEx_PLL2_Config+0x15c>)
 8005bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	031b      	lsls	r3, r3, #12
 8005bc6:	493f      	ldr	r1, [pc, #252]	; (8005cc4 <RCCEx_PLL2_Config+0x15c>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	628b      	str	r3, [r1, #40]	; 0x28
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	025b      	lsls	r3, r3, #9
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	431a      	orrs	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	3b01      	subs	r3, #1
 8005be8:	041b      	lsls	r3, r3, #16
 8005bea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	691b      	ldr	r3, [r3, #16]
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	061b      	lsls	r3, r3, #24
 8005bf8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005bfc:	4931      	ldr	r1, [pc, #196]	; (8005cc4 <RCCEx_PLL2_Config+0x15c>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005c02:	4b30      	ldr	r3, [pc, #192]	; (8005cc4 <RCCEx_PLL2_Config+0x15c>)
 8005c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	492d      	ldr	r1, [pc, #180]	; (8005cc4 <RCCEx_PLL2_Config+0x15c>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005c14:	4b2b      	ldr	r3, [pc, #172]	; (8005cc4 <RCCEx_PLL2_Config+0x15c>)
 8005c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c18:	f023 0220 	bic.w	r2, r3, #32
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	699b      	ldr	r3, [r3, #24]
 8005c20:	4928      	ldr	r1, [pc, #160]	; (8005cc4 <RCCEx_PLL2_Config+0x15c>)
 8005c22:	4313      	orrs	r3, r2
 8005c24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005c26:	4b27      	ldr	r3, [pc, #156]	; (8005cc4 <RCCEx_PLL2_Config+0x15c>)
 8005c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2a:	4a26      	ldr	r2, [pc, #152]	; (8005cc4 <RCCEx_PLL2_Config+0x15c>)
 8005c2c:	f023 0310 	bic.w	r3, r3, #16
 8005c30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005c32:	4b24      	ldr	r3, [pc, #144]	; (8005cc4 <RCCEx_PLL2_Config+0x15c>)
 8005c34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c36:	4b24      	ldr	r3, [pc, #144]	; (8005cc8 <RCCEx_PLL2_Config+0x160>)
 8005c38:	4013      	ands	r3, r2
 8005c3a:	687a      	ldr	r2, [r7, #4]
 8005c3c:	69d2      	ldr	r2, [r2, #28]
 8005c3e:	00d2      	lsls	r2, r2, #3
 8005c40:	4920      	ldr	r1, [pc, #128]	; (8005cc4 <RCCEx_PLL2_Config+0x15c>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005c46:	4b1f      	ldr	r3, [pc, #124]	; (8005cc4 <RCCEx_PLL2_Config+0x15c>)
 8005c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4a:	4a1e      	ldr	r2, [pc, #120]	; (8005cc4 <RCCEx_PLL2_Config+0x15c>)
 8005c4c:	f043 0310 	orr.w	r3, r3, #16
 8005c50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d106      	bne.n	8005c66 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005c58:	4b1a      	ldr	r3, [pc, #104]	; (8005cc4 <RCCEx_PLL2_Config+0x15c>)
 8005c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5c:	4a19      	ldr	r2, [pc, #100]	; (8005cc4 <RCCEx_PLL2_Config+0x15c>)
 8005c5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005c62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c64:	e00f      	b.n	8005c86 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d106      	bne.n	8005c7a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005c6c:	4b15      	ldr	r3, [pc, #84]	; (8005cc4 <RCCEx_PLL2_Config+0x15c>)
 8005c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c70:	4a14      	ldr	r2, [pc, #80]	; (8005cc4 <RCCEx_PLL2_Config+0x15c>)
 8005c72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005c78:	e005      	b.n	8005c86 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005c7a:	4b12      	ldr	r3, [pc, #72]	; (8005cc4 <RCCEx_PLL2_Config+0x15c>)
 8005c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c7e:	4a11      	ldr	r2, [pc, #68]	; (8005cc4 <RCCEx_PLL2_Config+0x15c>)
 8005c80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005c86:	4b0f      	ldr	r3, [pc, #60]	; (8005cc4 <RCCEx_PLL2_Config+0x15c>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a0e      	ldr	r2, [pc, #56]	; (8005cc4 <RCCEx_PLL2_Config+0x15c>)
 8005c8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c92:	f7fb fcdd 	bl	8001650 <HAL_GetTick>
 8005c96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005c98:	e008      	b.n	8005cac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005c9a:	f7fb fcd9 	bl	8001650 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d901      	bls.n	8005cac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e006      	b.n	8005cba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005cac:	4b05      	ldr	r3, [pc, #20]	; (8005cc4 <RCCEx_PLL2_Config+0x15c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d0f0      	beq.n	8005c9a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
 8005cc2:	bf00      	nop
 8005cc4:	58024400 	.word	0x58024400
 8005cc8:	ffff0007 	.word	0xffff0007

08005ccc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005cda:	4b53      	ldr	r3, [pc, #332]	; (8005e28 <RCCEx_PLL3_Config+0x15c>)
 8005cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cde:	f003 0303 	and.w	r3, r3, #3
 8005ce2:	2b03      	cmp	r3, #3
 8005ce4:	d101      	bne.n	8005cea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e099      	b.n	8005e1e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005cea:	4b4f      	ldr	r3, [pc, #316]	; (8005e28 <RCCEx_PLL3_Config+0x15c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a4e      	ldr	r2, [pc, #312]	; (8005e28 <RCCEx_PLL3_Config+0x15c>)
 8005cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cf6:	f7fb fcab 	bl	8001650 <HAL_GetTick>
 8005cfa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005cfc:	e008      	b.n	8005d10 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005cfe:	f7fb fca7 	bl	8001650 <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	2b02      	cmp	r3, #2
 8005d0a:	d901      	bls.n	8005d10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	e086      	b.n	8005e1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d10:	4b45      	ldr	r3, [pc, #276]	; (8005e28 <RCCEx_PLL3_Config+0x15c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1f0      	bne.n	8005cfe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005d1c:	4b42      	ldr	r3, [pc, #264]	; (8005e28 <RCCEx_PLL3_Config+0x15c>)
 8005d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d20:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	051b      	lsls	r3, r3, #20
 8005d2a:	493f      	ldr	r1, [pc, #252]	; (8005e28 <RCCEx_PLL3_Config+0x15c>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	628b      	str	r3, [r1, #40]	; 0x28
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	3b01      	subs	r3, #1
 8005d36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	025b      	lsls	r3, r3, #9
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	431a      	orrs	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	3b01      	subs	r3, #1
 8005d4c:	041b      	lsls	r3, r3, #16
 8005d4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005d52:	431a      	orrs	r2, r3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	061b      	lsls	r3, r3, #24
 8005d5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005d60:	4931      	ldr	r1, [pc, #196]	; (8005e28 <RCCEx_PLL3_Config+0x15c>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005d66:	4b30      	ldr	r3, [pc, #192]	; (8005e28 <RCCEx_PLL3_Config+0x15c>)
 8005d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	492d      	ldr	r1, [pc, #180]	; (8005e28 <RCCEx_PLL3_Config+0x15c>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005d78:	4b2b      	ldr	r3, [pc, #172]	; (8005e28 <RCCEx_PLL3_Config+0x15c>)
 8005d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	4928      	ldr	r1, [pc, #160]	; (8005e28 <RCCEx_PLL3_Config+0x15c>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005d8a:	4b27      	ldr	r3, [pc, #156]	; (8005e28 <RCCEx_PLL3_Config+0x15c>)
 8005d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8e:	4a26      	ldr	r2, [pc, #152]	; (8005e28 <RCCEx_PLL3_Config+0x15c>)
 8005d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005d96:	4b24      	ldr	r3, [pc, #144]	; (8005e28 <RCCEx_PLL3_Config+0x15c>)
 8005d98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d9a:	4b24      	ldr	r3, [pc, #144]	; (8005e2c <RCCEx_PLL3_Config+0x160>)
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	69d2      	ldr	r2, [r2, #28]
 8005da2:	00d2      	lsls	r2, r2, #3
 8005da4:	4920      	ldr	r1, [pc, #128]	; (8005e28 <RCCEx_PLL3_Config+0x15c>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005daa:	4b1f      	ldr	r3, [pc, #124]	; (8005e28 <RCCEx_PLL3_Config+0x15c>)
 8005dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dae:	4a1e      	ldr	r2, [pc, #120]	; (8005e28 <RCCEx_PLL3_Config+0x15c>)
 8005db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005db4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d106      	bne.n	8005dca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005dbc:	4b1a      	ldr	r3, [pc, #104]	; (8005e28 <RCCEx_PLL3_Config+0x15c>)
 8005dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc0:	4a19      	ldr	r2, [pc, #100]	; (8005e28 <RCCEx_PLL3_Config+0x15c>)
 8005dc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005dc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005dc8:	e00f      	b.n	8005dea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d106      	bne.n	8005dde <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005dd0:	4b15      	ldr	r3, [pc, #84]	; (8005e28 <RCCEx_PLL3_Config+0x15c>)
 8005dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd4:	4a14      	ldr	r2, [pc, #80]	; (8005e28 <RCCEx_PLL3_Config+0x15c>)
 8005dd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005dda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ddc:	e005      	b.n	8005dea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005dde:	4b12      	ldr	r3, [pc, #72]	; (8005e28 <RCCEx_PLL3_Config+0x15c>)
 8005de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de2:	4a11      	ldr	r2, [pc, #68]	; (8005e28 <RCCEx_PLL3_Config+0x15c>)
 8005de4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005de8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005dea:	4b0f      	ldr	r3, [pc, #60]	; (8005e28 <RCCEx_PLL3_Config+0x15c>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a0e      	ldr	r2, [pc, #56]	; (8005e28 <RCCEx_PLL3_Config+0x15c>)
 8005df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005df4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005df6:	f7fb fc2b 	bl	8001650 <HAL_GetTick>
 8005dfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005dfc:	e008      	b.n	8005e10 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005dfe:	f7fb fc27 	bl	8001650 <HAL_GetTick>
 8005e02:	4602      	mov	r2, r0
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	2b02      	cmp	r3, #2
 8005e0a:	d901      	bls.n	8005e10 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e006      	b.n	8005e1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e10:	4b05      	ldr	r3, [pc, #20]	; (8005e28 <RCCEx_PLL3_Config+0x15c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0f0      	beq.n	8005dfe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	58024400 	.word	0x58024400
 8005e2c:	ffff0007 	.word	0xffff0007

08005e30 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b08a      	sub	sp, #40	; 0x28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e075      	b.n	8005f2e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d105      	bne.n	8005e5a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7fb f8f5 	bl	8001044 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2204      	movs	r2, #4
 8005e5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f868 	bl	8005f38 <HAL_SD_InitCard>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d001      	beq.n	8005e72 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e05d      	b.n	8005f2e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005e72:	f107 0308 	add.w	r3, r7, #8
 8005e76:	4619      	mov	r1, r3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 fdcf 	bl	8006a1c <HAL_SD_GetCardStatus>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d001      	beq.n	8005e88 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005e84:	2301      	movs	r3, #1
 8005e86:	e052      	b.n	8005f2e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005e88:	7e3b      	ldrb	r3, [r7, #24]
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005e8e:	7e7b      	ldrb	r3, [r7, #25]
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d10a      	bne.n	8005eb2 <HAL_SD_Init+0x82>
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d102      	bne.n	8005ea8 <HAL_SD_Init+0x78>
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d004      	beq.n	8005eb2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eae:	659a      	str	r2, [r3, #88]	; 0x58
 8005eb0:	e00b      	b.n	8005eca <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d104      	bne.n	8005ec4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ec0:	659a      	str	r2, [r3, #88]	; 0x58
 8005ec2:	e002      	b.n	8005eca <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fe61 	bl	8006b98 <HAL_SD_ConfigWideBusOperation>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	e026      	b.n	8005f2e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005ee0:	f7fb fbb6 	bl	8001650 <HAL_GetTick>
 8005ee4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005ee6:	e011      	b.n	8005f0c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005ee8:	f7fb fbb2 	bl	8001650 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef6:	d109      	bne.n	8005f0c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005efe:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e010      	b.n	8005f2e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 ff55 	bl	8006dbc <HAL_SD_GetCardState>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b04      	cmp	r3, #4
 8005f16:	d1e7      	bne.n	8005ee8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3728      	adds	r7, #40	; 0x28
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
	...

08005f38 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005f38:	b590      	push	{r4, r7, lr}
 8005f3a:	b08d      	sub	sp, #52	; 0x34
 8005f3c:	af02      	add	r7, sp, #8
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005f40:	2300      	movs	r3, #0
 8005f42:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005f44:	2300      	movs	r3, #0
 8005f46:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005f50:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005f54:	f04f 0100 	mov.w	r1, #0
 8005f58:	f7fe fc76 	bl	8004848 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f5c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d109      	bne.n	8005f78 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005f72:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e070      	b.n	800605a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	0a1b      	lsrs	r3, r3, #8
 8005f7c:	4a39      	ldr	r2, [pc, #228]	; (8006064 <HAL_SD_InitCard+0x12c>)
 8005f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f82:	091b      	lsrs	r3, r3, #4
 8005f84:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681c      	ldr	r4, [r3, #0]
 8005f8a:	466a      	mov	r2, sp
 8005f8c:	f107 0318 	add.w	r3, r7, #24
 8005f90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005f94:	e882 0003 	stmia.w	r2, {r0, r1}
 8005f98:	f107 030c 	add.w	r3, r7, #12
 8005f9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f9e:	4620      	mov	r0, r4
 8005fa0:	f003 f890 	bl	80090c4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f003 f8d3 	bl	8009154 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d005      	beq.n	8005fc0 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	005b      	lsls	r3, r3, #1
 8005fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fbe:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d007      	beq.n	8005fd6 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005fc6:	4a28      	ldr	r2, [pc, #160]	; (8006068 <HAL_SD_InitCard+0x130>)
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fce:	3301      	adds	r3, #1
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7fb fb49 	bl	8001668 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 ffde 	bl	8006f98 <SD_PowerON>
 8005fdc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005fde:	6a3b      	ldr	r3, [r7, #32]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00b      	beq.n	8005ffc <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e02e      	b.n	800605a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fefd 	bl	8006dfc <SD_InitCard>
 8006002:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006004:	6a3b      	ldr	r3, [r7, #32]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00b      	beq.n	8006022 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	431a      	orrs	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e01b      	b.n	800605a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f44f 7100 	mov.w	r1, #512	; 0x200
 800602a:	4618      	mov	r0, r3
 800602c:	f003 f938 	bl	80092a0 <SDMMC_CmdBlockLength>
 8006030:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d00f      	beq.n	8006058 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a0b      	ldr	r2, [pc, #44]	; (800606c <HAL_SD_InitCard+0x134>)
 800603e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	431a      	orrs	r2, r3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e000      	b.n	800605a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	372c      	adds	r7, #44	; 0x2c
 800605e:	46bd      	mov	sp, r7
 8006060:	bd90      	pop	{r4, r7, pc}
 8006062:	bf00      	nop
 8006064:	014f8b59 	.word	0x014f8b59
 8006068:	00012110 	.word	0x00012110
 800606c:	1fe00fff 	.word	0x1fe00fff

08006070 <HAL_SD_DeInit>:
  * @brief  De-Initializes the SD card.
  * @param  hsd: Pointer to SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_DeInit(SD_HandleTypeDef *hsd)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if (hsd == NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_SD_DeInit+0x12>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e011      	b.n	80060a6 <HAL_SD_DeInit+0x36>
  }

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));

  hsd->State = HAL_SD_STATE_BUSY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2203      	movs	r2, #3
 8006086:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }
#endif /* USE_SD_TRANSCEIVER   */

  /* Set SD power state to off */
  SD_PowerOFF(hsd);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f001 f812 	bl	80070b4 <SD_PowerOFF>

  /* DeInit the low level hardware */
  hsd->MspDeInitCallback(hsd);
#else
  /* De-Initialize the MSP layer */
  HAL_SD_MspDeInit(hsd);
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7fb f86d 	bl	8001170 <HAL_SD_MspDeInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	635a      	str	r2, [r3, #52]	; 0x34
  hsd->State = HAL_SD_STATE_RESET;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
	...

080060b0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b08c      	sub	sp, #48	; 0x30
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d107      	bne.n	80060d8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060cc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e08d      	b.n	80061f4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	f040 8086 	bne.w	80061f2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80060ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	441a      	add	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d907      	bls.n	800610a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060fe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e074      	b.n	80061f4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2203      	movs	r2, #3
 800610e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2200      	movs	r2, #0
 8006118:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	025a      	lsls	r2, r3, #9
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612c:	2b01      	cmp	r3, #1
 800612e:	d002      	beq.n	8006136 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	025b      	lsls	r3, r3, #9
 8006134:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006136:	f04f 33ff 	mov.w	r3, #4294967295
 800613a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	025b      	lsls	r3, r3, #9
 8006140:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006142:	2390      	movs	r3, #144	; 0x90
 8006144:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006146:	2302      	movs	r3, #2
 8006148:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800614a:	2300      	movs	r3, #0
 800614c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800614e:	2300      	movs	r3, #0
 8006150:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f107 0210 	add.w	r2, r7, #16
 800615a:	4611      	mov	r1, r2
 800615c:	4618      	mov	r0, r3
 800615e:	f003 f873 	bl	8009248 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68da      	ldr	r2, [r3, #12]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006170:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2201      	movs	r2, #1
 8006180:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d90a      	bls.n	800619e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2282      	movs	r2, #130	; 0x82
 800618c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006194:	4618      	mov	r0, r3
 8006196:	f003 f8c9 	bl	800932c <SDMMC_CmdReadMultiBlock>
 800619a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800619c:	e009      	b.n	80061b2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2281      	movs	r2, #129	; 0x81
 80061a2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80061aa:	4618      	mov	r0, r3
 80061ac:	f003 f89b 	bl	80092e6 <SDMMC_CmdReadSingleBlock>
 80061b0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80061b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d012      	beq.n	80061de <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a0f      	ldr	r2, [pc, #60]	; (80061fc <HAL_SD_ReadBlocks_DMA+0x14c>)
 80061be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c6:	431a      	orrs	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e00a      	b.n	80061f4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80061ec:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	e000      	b.n	80061f4 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80061f2:	2302      	movs	r3, #2
  }
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3730      	adds	r7, #48	; 0x30
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	1fe00fff 	.word	0x1fe00fff

08006200 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b08c      	sub	sp, #48	; 0x30
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
 800620c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d107      	bne.n	8006228 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800621c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e08d      	b.n	8006344 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b01      	cmp	r3, #1
 8006232:	f040 8086 	bne.w	8006342 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800623c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	441a      	add	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006246:	429a      	cmp	r2, r3
 8006248:	d907      	bls.n	800625a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e074      	b.n	8006344 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2203      	movs	r2, #3
 800625e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2200      	movs	r2, #0
 8006268:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	025a      	lsls	r2, r3, #9
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800627c:	2b01      	cmp	r3, #1
 800627e:	d002      	beq.n	8006286 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	025b      	lsls	r3, r3, #9
 8006284:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006286:	f04f 33ff 	mov.w	r3, #4294967295
 800628a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	025b      	lsls	r3, r3, #9
 8006290:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006292:	2390      	movs	r3, #144	; 0x90
 8006294:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006296:	2300      	movs	r3, #0
 8006298:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800629a:	2300      	movs	r3, #0
 800629c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800629e:	2300      	movs	r3, #0
 80062a0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f107 0210 	add.w	r2, r7, #16
 80062aa:	4611      	mov	r1, r2
 80062ac:	4618      	mov	r0, r3
 80062ae:	f002 ffcb 	bl	8009248 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68da      	ldr	r2, [r3, #12]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062c0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2201      	movs	r2, #1
 80062d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d90a      	bls.n	80062ee <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	22a0      	movs	r2, #160	; 0xa0
 80062dc:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062e4:	4618      	mov	r0, r3
 80062e6:	f003 f867 	bl	80093b8 <SDMMC_CmdWriteMultiBlock>
 80062ea:	62f8      	str	r0, [r7, #44]	; 0x2c
 80062ec:	e009      	b.n	8006302 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2290      	movs	r2, #144	; 0x90
 80062f2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80062fa:	4618      	mov	r0, r3
 80062fc:	f003 f839 	bl	8009372 <SDMMC_CmdWriteSingleBlock>
 8006300:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006304:	2b00      	cmp	r3, #0
 8006306:	d012      	beq.n	800632e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a0f      	ldr	r2, [pc, #60]	; (800634c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800630e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006316:	431a      	orrs	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e00a      	b.n	8006344 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800633c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800633e:	2300      	movs	r3, #0
 8006340:	e000      	b.n	8006344 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006342:	2302      	movs	r3, #2
  }
}
 8006344:	4618      	mov	r0, r3
 8006346:	3730      	adds	r7, #48	; 0x30
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	1fe00fff 	.word	0x1fe00fff

08006350 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d008      	beq.n	800637e <HAL_SD_IRQHandler+0x2e>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f003 0308 	and.w	r3, r3, #8
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f001 f908 	bl	800758c <SD_Read_IT>
 800637c:	e19a      	b.n	80066b4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 80ac 	beq.w	80064e6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006396:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	4b59      	ldr	r3, [pc, #356]	; (8006508 <HAL_SD_IRQHandler+0x1b8>)
 80063a4:	400b      	ands	r3, r1
 80063a6:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80063b6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063c6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f003 0308 	and.w	r3, r3, #8
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d038      	beq.n	8006444 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d104      	bne.n	80063e6 <HAL_SD_IRQHandler+0x96>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f003 0320 	and.w	r3, r3, #32
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d011      	beq.n	800640a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f003 f808 	bl	8009400 <SDMMC_CmdStopTransfer>
 80063f0:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d008      	beq.n	800640a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	431a      	orrs	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f95b 	bl	80066c0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a3f      	ldr	r2, [pc, #252]	; (800650c <HAL_SD_IRQHandler+0x1bc>)
 8006410:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d104      	bne.n	8006434 <HAL_SD_IRQHandler+0xe4>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d003      	beq.n	800643c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f003 fe0b 	bl	800a050 <HAL_SD_RxCpltCallback>
 800643a:	e13b      	b.n	80066b4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f003 fdf9 	bl	800a034 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006442:	e137      	b.n	80066b4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800644a:	2b00      	cmp	r3, #0
 800644c:	f000 8132 	beq.w	80066b4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2200      	movs	r2, #0
 8006456:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2200      	movs	r2, #0
 800645e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2200      	movs	r2, #0
 8006466:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d104      	bne.n	800647c <HAL_SD_IRQHandler+0x12c>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f003 0320 	and.w	r3, r3, #32
 8006478:	2b00      	cmp	r3, #0
 800647a:	d011      	beq.n	80064a0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4618      	mov	r0, r3
 8006482:	f002 ffbd 	bl	8009400 <SDMMC_CmdStopTransfer>
 8006486:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d008      	beq.n	80064a0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	431a      	orrs	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f910 	bl	80066c0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f003 0310 	and.w	r3, r3, #16
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d104      	bne.n	80064c2 <HAL_SD_IRQHandler+0x172>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f003 0320 	and.w	r3, r3, #32
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d002      	beq.n	80064c8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f003 fdb6 	bl	800a034 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d105      	bne.n	80064de <HAL_SD_IRQHandler+0x18e>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f003 0302 	and.w	r3, r3, #2
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 80eb 	beq.w	80066b4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f003 fdb6 	bl	800a050 <HAL_SD_RxCpltCallback>
}
 80064e4:	e0e6      	b.n	80066b4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00d      	beq.n	8006510 <HAL_SD_IRQHandler+0x1c0>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f003 0308 	and.w	r3, r3, #8
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d008      	beq.n	8006510 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f001 f88a 	bl	8007618 <SD_Write_IT>
 8006504:	e0d6      	b.n	80066b4 <HAL_SD_IRQHandler+0x364>
 8006506:	bf00      	nop
 8006508:	ffff3ec5 	.word	0xffff3ec5
 800650c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006516:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 809d 	beq.w	800665a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d005      	beq.n	800653a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006532:	f043 0202 	orr.w	r2, r3, #2
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006540:	f003 0308 	and.w	r3, r3, #8
 8006544:	2b00      	cmp	r3, #0
 8006546:	d005      	beq.n	8006554 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800654c:	f043 0208 	orr.w	r2, r3, #8
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800655a:	f003 0320 	and.w	r3, r3, #32
 800655e:	2b00      	cmp	r3, #0
 8006560:	d005      	beq.n	800656e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006566:	f043 0220 	orr.w	r2, r3, #32
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006574:	f003 0310 	and.w	r3, r3, #16
 8006578:	2b00      	cmp	r3, #0
 800657a:	d005      	beq.n	8006588 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006580:	f043 0210 	orr.w	r2, r3, #16
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a4b      	ldr	r2, [pc, #300]	; (80066bc <HAL_SD_IRQHandler+0x36c>)
 800658e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800659e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065ae:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065be:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80065ce:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4618      	mov	r0, r3
 80065d6:	f002 ff13 	bl	8009400 <SDMMC_CmdStopTransfer>
 80065da:	4602      	mov	r2, r0
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e0:	431a      	orrs	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68da      	ldr	r2, [r3, #12]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065f4:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065fe:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f003 0308 	and.w	r3, r3, #8
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f851 	bl	80066c0 <HAL_SD_ErrorCallback>
}
 800661e:	e049      	b.n	80066b4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006626:	2b00      	cmp	r3, #0
 8006628:	d044      	beq.n	80066b4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800662e:	2b00      	cmp	r3, #0
 8006630:	d040      	beq.n	80066b4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006640:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2200      	movs	r2, #0
 8006648:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f834 	bl	80066c0 <HAL_SD_ErrorCallback>
}
 8006658:	e02c      	b.n	80066b4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d025      	beq.n	80066b4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006670:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006678:	f003 0304 	and.w	r3, r3, #4
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10c      	bne.n	800669a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f003 0320 	and.w	r3, r3, #32
 8006686:	2b00      	cmp	r3, #0
 8006688:	d003      	beq.n	8006692 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f001 f82c 	bl	80076e8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8006690:	e010      	b.n	80066b4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f001 f814 	bl	80076c0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8006698:	e00c      	b.n	80066b4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f003 0320 	and.w	r3, r3, #32
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d003      	beq.n	80066ac <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f001 f815 	bl	80076d4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 80066aa:	e003      	b.n	80066b4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fffd 	bl	80076ac <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80066b2:	e7ff      	b.n	80066b4 <HAL_SD_IRQHandler+0x364>
 80066b4:	bf00      	nop
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	18000f3a 	.word	0x18000f3a

080066c0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066e2:	0f9b      	lsrs	r3, r3, #30
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ee:	0e9b      	lsrs	r3, r3, #26
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006700:	0e1b      	lsrs	r3, r3, #24
 8006702:	b2db      	uxtb	r3, r3
 8006704:	f003 0303 	and.w	r3, r3, #3
 8006708:	b2da      	uxtb	r2, r3
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006712:	0c1b      	lsrs	r3, r3, #16
 8006714:	b2da      	uxtb	r2, r3
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800671e:	0a1b      	lsrs	r3, r3, #8
 8006720:	b2da      	uxtb	r2, r3
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800672a:	b2da      	uxtb	r2, r3
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006734:	0d1b      	lsrs	r3, r3, #20
 8006736:	b29a      	uxth	r2, r3
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006740:	0c1b      	lsrs	r3, r3, #16
 8006742:	b2db      	uxtb	r3, r3
 8006744:	f003 030f 	and.w	r3, r3, #15
 8006748:	b2da      	uxtb	r2, r3
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006752:	0bdb      	lsrs	r3, r3, #15
 8006754:	b2db      	uxtb	r3, r3
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	b2da      	uxtb	r2, r3
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006764:	0b9b      	lsrs	r3, r3, #14
 8006766:	b2db      	uxtb	r3, r3
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	b2da      	uxtb	r2, r3
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006776:	0b5b      	lsrs	r3, r3, #13
 8006778:	b2db      	uxtb	r3, r3
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	b2da      	uxtb	r2, r3
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006788:	0b1b      	lsrs	r3, r3, #12
 800678a:	b2db      	uxtb	r3, r3
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	b2da      	uxtb	r2, r3
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2200      	movs	r2, #0
 800679a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d163      	bne.n	800686c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067a8:	009a      	lsls	r2, r3, #2
 80067aa:	f640 73fc 	movw	r3, #4092	; 0xffc
 80067ae:	4013      	ands	r3, r2
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80067b4:	0f92      	lsrs	r2, r2, #30
 80067b6:	431a      	orrs	r2, r3
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067c0:	0edb      	lsrs	r3, r3, #27
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	f003 0307 	and.w	r3, r3, #7
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067d2:	0e1b      	lsrs	r3, r3, #24
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067e4:	0d5b      	lsrs	r3, r3, #21
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	f003 0307 	and.w	r3, r3, #7
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80067f6:	0c9b      	lsrs	r3, r3, #18
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	f003 0307 	and.w	r3, r3, #7
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006808:	0bdb      	lsrs	r3, r3, #15
 800680a:	b2db      	uxtb	r3, r3
 800680c:	f003 0307 	and.w	r3, r3, #7
 8006810:	b2da      	uxtb	r2, r3
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	7e1b      	ldrb	r3, [r3, #24]
 8006824:	b2db      	uxtb	r3, r3
 8006826:	f003 0307 	and.w	r3, r3, #7
 800682a:	3302      	adds	r3, #2
 800682c:	2201      	movs	r2, #1
 800682e:	fa02 f303 	lsl.w	r3, r2, r3
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006836:	fb03 f202 	mul.w	r2, r3, r2
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	7a1b      	ldrb	r3, [r3, #8]
 8006842:	b2db      	uxtb	r3, r3
 8006844:	f003 030f 	and.w	r3, r3, #15
 8006848:	2201      	movs	r2, #1
 800684a:	409a      	lsls	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006858:	0a52      	lsrs	r2, r2, #9
 800685a:	fb03 f202 	mul.w	r2, r3, r2
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006868:	655a      	str	r2, [r3, #84]	; 0x54
 800686a:	e031      	b.n	80068d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006870:	2b01      	cmp	r3, #1
 8006872:	d11d      	bne.n	80068b0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006878:	041b      	lsls	r3, r3, #16
 800687a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006882:	0c1b      	lsrs	r3, r3, #16
 8006884:	431a      	orrs	r2, r3
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	3301      	adds	r3, #1
 8006890:	029a      	lsls	r2, r3, #10
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068a4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	655a      	str	r2, [r3, #84]	; 0x54
 80068ae:	e00f      	b.n	80068d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a58      	ldr	r2, [pc, #352]	; (8006a18 <HAL_SD_GetCardCSD+0x344>)
 80068b6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e09d      	b.n	8006a0c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068d4:	0b9b      	lsrs	r3, r3, #14
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068e6:	09db      	lsrs	r3, r3, #7
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006908:	0fdb      	lsrs	r3, r3, #31
 800690a:	b2da      	uxtb	r2, r3
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006914:	0f5b      	lsrs	r3, r3, #29
 8006916:	b2db      	uxtb	r3, r3
 8006918:	f003 0303 	and.w	r3, r3, #3
 800691c:	b2da      	uxtb	r2, r3
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006926:	0e9b      	lsrs	r3, r3, #26
 8006928:	b2db      	uxtb	r3, r3
 800692a:	f003 0307 	and.w	r3, r3, #7
 800692e:	b2da      	uxtb	r2, r3
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006938:	0d9b      	lsrs	r3, r3, #22
 800693a:	b2db      	uxtb	r3, r3
 800693c:	f003 030f 	and.w	r3, r3, #15
 8006940:	b2da      	uxtb	r2, r3
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800694a:	0d5b      	lsrs	r3, r3, #21
 800694c:	b2db      	uxtb	r3, r3
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	b2da      	uxtb	r2, r3
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006966:	0c1b      	lsrs	r3, r3, #16
 8006968:	b2db      	uxtb	r3, r3
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	b2da      	uxtb	r2, r3
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800697a:	0bdb      	lsrs	r3, r3, #15
 800697c:	b2db      	uxtb	r3, r3
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	b2da      	uxtb	r2, r3
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800698e:	0b9b      	lsrs	r3, r3, #14
 8006990:	b2db      	uxtb	r3, r3
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	b2da      	uxtb	r2, r3
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069a2:	0b5b      	lsrs	r3, r3, #13
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069b6:	0b1b      	lsrs	r3, r3, #12
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069ca:	0a9b      	lsrs	r3, r3, #10
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	f003 0303 	and.w	r3, r3, #3
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069de:	0a1b      	lsrs	r3, r3, #8
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	f003 0303 	and.w	r3, r3, #3
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069f2:	085b      	lsrs	r3, r3, #1
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	1fe00fff 	.word	0x1fe00fff

08006a1c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b094      	sub	sp, #80	; 0x50
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d101      	bne.n	8006a3c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e0a7      	b.n	8006b8c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006a3c:	f107 0308 	add.w	r3, r7, #8
 8006a40:	4619      	mov	r1, r3
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fb44 	bl	80070d0 <SD_SendSDStatus>
 8006a48:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d011      	beq.n	8006a74 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a4f      	ldr	r2, [pc, #316]	; (8006b94 <HAL_SD_GetCardStatus+0x178>)
 8006a56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006a72:	e070      	b.n	8006b56 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	099b      	lsrs	r3, r3, #6
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	f003 0303 	and.w	r3, r3, #3
 8006a7e:	b2da      	uxtb	r2, r3
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	095b      	lsrs	r3, r3, #5
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	0a1b      	lsrs	r3, r3, #8
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	0e1b      	lsrs	r3, r3, #24
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	061a      	lsls	r2, r3, #24
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	021b      	lsls	r3, r3, #8
 8006ab6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006aba:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	0a1b      	lsrs	r3, r3, #8
 8006ac0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006ac4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	0e1b      	lsrs	r3, r3, #24
 8006aca:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	0a1b      	lsrs	r3, r3, #8
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	0d1b      	lsrs	r3, r3, #20
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	f003 030f 	and.w	r3, r3, #15
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	0c1b      	lsrs	r3, r3, #16
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	4313      	orrs	r3, r2
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	0a9b      	lsrs	r3, r3, #10
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	0a1b      	lsrs	r3, r3, #8
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	f003 0303 	and.w	r3, r3, #3
 8006b28:	b2da      	uxtb	r2, r3
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	091b      	lsrs	r3, r3, #4
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	f003 030f 	and.w	r3, r3, #15
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	f003 030f 	and.w	r3, r3, #15
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	0e1b      	lsrs	r3, r3, #24
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f002 fb9e 	bl	80092a0 <SDMMC_CmdBlockLength>
 8006b64:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00d      	beq.n	8006b88 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a08      	ldr	r2, [pc, #32]	; (8006b94 <HAL_SD_GetCardStatus+0x178>)
 8006b72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b78:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8006b88:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3750      	adds	r7, #80	; 0x50
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	1fe00fff 	.word	0x1fe00fff

08006b98 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006b98:	b590      	push	{r4, r7, lr}
 8006b9a:	b08d      	sub	sp, #52	; 0x34
 8006b9c:	af02      	add	r7, sp, #8
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2203      	movs	r2, #3
 8006bac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	d02e      	beq.n	8006c16 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bbe:	d106      	bne.n	8006bce <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	635a      	str	r2, [r3, #52]	; 0x34
 8006bcc:	e029      	b.n	8006c22 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bd4:	d10a      	bne.n	8006bec <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fb72 	bl	80072c0 <SD_WideBus_Enable>
 8006bdc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006be2:	6a3b      	ldr	r3, [r7, #32]
 8006be4:	431a      	orrs	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	635a      	str	r2, [r3, #52]	; 0x34
 8006bea:	e01a      	b.n	8006c22 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10a      	bne.n	8006c08 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fbaf 	bl	8007356 <SD_WideBus_Disable>
 8006bf8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bfe:	6a3b      	ldr	r3, [r7, #32]
 8006c00:	431a      	orrs	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	635a      	str	r2, [r3, #52]	; 0x34
 8006c06:	e00c      	b.n	8006c22 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c0c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	635a      	str	r2, [r3, #52]	; 0x34
 8006c14:	e005      	b.n	8006c22 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c1a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d007      	beq.n	8006c3a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a5f      	ldr	r2, [pc, #380]	; (8006dac <HAL_SD_ConfigWideBusOperation+0x214>)
 8006c30:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c38:	e096      	b.n	8006d68 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006c3a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006c3e:	f04f 0100 	mov.w	r1, #0
 8006c42:	f7fd fe01 	bl	8004848 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c46:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f000 8083 	beq.w	8006d56 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	695a      	ldr	r2, [r3, #20]
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	4950      	ldr	r1, [pc, #320]	; (8006db0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006c6e:	fba1 1303 	umull	r1, r3, r1, r3
 8006c72:	0e1b      	lsrs	r3, r3, #24
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d303      	bcc.n	8006c80 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	695b      	ldr	r3, [r3, #20]
 8006c7c:	61bb      	str	r3, [r7, #24]
 8006c7e:	e05a      	b.n	8006d36 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c88:	d103      	bne.n	8006c92 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	61bb      	str	r3, [r7, #24]
 8006c90:	e051      	b.n	8006d36 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c9a:	d126      	bne.n	8006cea <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	695b      	ldr	r3, [r3, #20]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10e      	bne.n	8006cc2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	4a43      	ldr	r2, [pc, #268]	; (8006db4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d906      	bls.n	8006cba <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	4a40      	ldr	r2, [pc, #256]	; (8006db0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb4:	0e5b      	lsrs	r3, r3, #25
 8006cb6:	61bb      	str	r3, [r7, #24]
 8006cb8:	e03d      	b.n	8006d36 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	61bb      	str	r3, [r7, #24]
 8006cc0:	e039      	b.n	8006d36 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	005b      	lsls	r3, r3, #1
 8006cc8:	69fa      	ldr	r2, [r7, #28]
 8006cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cce:	4a39      	ldr	r2, [pc, #228]	; (8006db4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d906      	bls.n	8006ce2 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	4a36      	ldr	r2, [pc, #216]	; (8006db0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cdc:	0e5b      	lsrs	r3, r3, #25
 8006cde:	61bb      	str	r3, [r7, #24]
 8006ce0:	e029      	b.n	8006d36 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	61bb      	str	r3, [r7, #24]
 8006ce8:	e025      	b.n	8006d36 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10e      	bne.n	8006d10 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	4a30      	ldr	r2, [pc, #192]	; (8006db8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d906      	bls.n	8006d08 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	4a2c      	ldr	r2, [pc, #176]	; (8006db0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006d02:	0e1b      	lsrs	r3, r3, #24
 8006d04:	61bb      	str	r3, [r7, #24]
 8006d06:	e016      	b.n	8006d36 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	61bb      	str	r3, [r7, #24]
 8006d0e:	e012      	b.n	8006d36 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	695b      	ldr	r3, [r3, #20]
 8006d14:	005b      	lsls	r3, r3, #1
 8006d16:	69fa      	ldr	r2, [r7, #28]
 8006d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d1c:	4a26      	ldr	r2, [pc, #152]	; (8006db8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d906      	bls.n	8006d30 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	4a22      	ldr	r2, [pc, #136]	; (8006db0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d26:	fba2 2303 	umull	r2, r3, r2, r3
 8006d2a:	0e1b      	lsrs	r3, r3, #24
 8006d2c:	61bb      	str	r3, [r7, #24]
 8006d2e:	e002      	b.n	8006d36 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681c      	ldr	r4, [r3, #0]
 8006d3a:	466a      	mov	r2, sp
 8006d3c:	f107 0314 	add.w	r3, r7, #20
 8006d40:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006d44:	e882 0003 	stmia.w	r2, {r0, r1}
 8006d48:	f107 0308 	add.w	r3, r7, #8
 8006d4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d4e:	4620      	mov	r0, r4
 8006d50:	f002 f9b8 	bl	80090c4 <SDMMC_Init>
 8006d54:	e008      	b.n	8006d68 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d5a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d70:	4618      	mov	r0, r3
 8006d72:	f002 fa95 	bl	80092a0 <SDMMC_CmdBlockLength>
 8006d76:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d78:	6a3b      	ldr	r3, [r7, #32]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d00c      	beq.n	8006d98 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a0a      	ldr	r2, [pc, #40]	; (8006dac <HAL_SD_ConfigWideBusOperation+0x214>)
 8006d84:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	431a      	orrs	r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006da0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	372c      	adds	r7, #44	; 0x2c
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd90      	pop	{r4, r7, pc}
 8006dac:	1fe00fff 	.word	0x1fe00fff
 8006db0:	55e63b89 	.word	0x55e63b89
 8006db4:	02faf080 	.word	0x02faf080
 8006db8:	017d7840 	.word	0x017d7840

08006dbc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b086      	sub	sp, #24
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006dc8:	f107 030c 	add.w	r3, r7, #12
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fa4e 	bl	8007270 <SD_SendStatus>
 8006dd4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d005      	beq.n	8006de8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	431a      	orrs	r2, r3
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	0a5b      	lsrs	r3, r3, #9
 8006dec:	f003 030f 	and.w	r3, r3, #15
 8006df0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006df2:	693b      	ldr	r3, [r7, #16]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3718      	adds	r7, #24
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}

08006dfc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b090      	sub	sp, #64	; 0x40
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8006e08:	f7fa fc22 	bl	8001650 <HAL_GetTick>
 8006e0c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f002 f9c0 	bl	8009198 <SDMMC_GetPowerState>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d102      	bne.n	8006e24 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006e1e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006e22:	e0b5      	b.n	8006f90 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e28:	2b03      	cmp	r3, #3
 8006e2a:	d02e      	beq.n	8006e8a <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4618      	mov	r0, r3
 8006e32:	f002 fc0a 	bl	800964a <SDMMC_CmdSendCID>
 8006e36:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d001      	beq.n	8006e42 <SD_InitCard+0x46>
    {
      return errorstate;
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e40:	e0a6      	b.n	8006f90 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2100      	movs	r1, #0
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f002 f9ea 	bl	8009222 <SDMMC_GetResponse>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2104      	movs	r1, #4
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f002 f9e1 	bl	8009222 <SDMMC_GetResponse>
 8006e60:	4602      	mov	r2, r0
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2108      	movs	r1, #8
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f002 f9d8 	bl	8009222 <SDMMC_GetResponse>
 8006e72:	4602      	mov	r2, r0
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	210c      	movs	r1, #12
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f002 f9cf 	bl	8009222 <SDMMC_GetResponse>
 8006e84:	4602      	mov	r2, r0
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e8e:	2b03      	cmp	r3, #3
 8006e90:	d01d      	beq.n	8006ece <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8006e92:	e019      	b.n	8006ec8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f107 020a 	add.w	r2, r7, #10
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f002 fc12 	bl	80096c8 <SDMMC_CmdSetRelAdd>
 8006ea4:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8006ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d001      	beq.n	8006eb0 <SD_InitCard+0xb4>
      {
        return errorstate;
 8006eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006eae:	e06f      	b.n	8006f90 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8006eb0:	f7fa fbce 	bl	8001650 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	f241 3287 	movw	r2, #4999	; 0x1387
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d902      	bls.n	8006ec8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8006ec2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006ec6:	e063      	b.n	8006f90 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8006ec8:	897b      	ldrh	r3, [r7, #10]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d0e2      	beq.n	8006e94 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed2:	2b03      	cmp	r3, #3
 8006ed4:	d036      	beq.n	8006f44 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006ed6:	897b      	ldrh	r3, [r7, #10]
 8006ed8:	461a      	mov	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee6:	041b      	lsls	r3, r3, #16
 8006ee8:	4619      	mov	r1, r3
 8006eea:	4610      	mov	r0, r2
 8006eec:	f002 fbcc 	bl	8009688 <SDMMC_CmdSendCSD>
 8006ef0:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d001      	beq.n	8006efc <SD_InitCard+0x100>
    {
      return errorstate;
 8006ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006efa:	e049      	b.n	8006f90 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2100      	movs	r1, #0
 8006f02:	4618      	mov	r0, r3
 8006f04:	f002 f98d 	bl	8009222 <SDMMC_GetResponse>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2104      	movs	r1, #4
 8006f14:	4618      	mov	r0, r3
 8006f16:	f002 f984 	bl	8009222 <SDMMC_GetResponse>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	2108      	movs	r1, #8
 8006f26:	4618      	mov	r0, r3
 8006f28:	f002 f97b 	bl	8009222 <SDMMC_GetResponse>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	210c      	movs	r1, #12
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f002 f972 	bl	8009222 <SDMMC_GetResponse>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2104      	movs	r1, #4
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f002 f969 	bl	8009222 <SDMMC_GetResponse>
 8006f50:	4603      	mov	r3, r0
 8006f52:	0d1a      	lsrs	r2, r3, #20
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006f58:	f107 030c 	add.w	r3, r7, #12
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f7ff fbb8 	bl	80066d4 <HAL_SD_GetCardCSD>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d002      	beq.n	8006f70 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006f6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006f6e:	e00f      	b.n	8006f90 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f78:	041b      	lsls	r3, r3, #16
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	f002 fa7b 	bl	8009478 <SDMMC_CmdSelDesel>
 8006f82:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8006f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d001      	beq.n	8006f8e <SD_InitCard+0x192>
  {
    return errorstate;
 8006f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f8c:	e000      	b.n	8006f90 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3740      	adds	r7, #64	; 0x40
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b086      	sub	sp, #24
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f002 fa84 	bl	80094be <SDMMC_CmdGoIdleState>
 8006fb6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	e072      	b.n	80070a8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f002 fa97 	bl	80094fa <SDMMC_CmdOperCond>
 8006fcc:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fd4:	d10d      	bne.n	8006ff2 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f002 fa6c 	bl	80094be <SDMMC_CmdGoIdleState>
 8006fe6:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d004      	beq.n	8006ff8 <SD_PowerON+0x60>
    {
      return errorstate;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	e05a      	b.n	80070a8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d137      	bne.n	8007070 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2100      	movs	r1, #0
 8007006:	4618      	mov	r0, r3
 8007008:	f002 fa97 	bl	800953a <SDMMC_CmdAppCommand>
 800700c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d02d      	beq.n	8007070 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007014:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007018:	e046      	b.n	80070a8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2100      	movs	r1, #0
 8007020:	4618      	mov	r0, r3
 8007022:	f002 fa8a 	bl	800953a <SDMMC_CmdAppCommand>
 8007026:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d001      	beq.n	8007032 <SD_PowerON+0x9a>
    {
      return errorstate;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	e03a      	b.n	80070a8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	491e      	ldr	r1, [pc, #120]	; (80070b0 <SD_PowerON+0x118>)
 8007038:	4618      	mov	r0, r3
 800703a:	f002 faa1 	bl	8009580 <SDMMC_CmdAppOperCommand>
 800703e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d002      	beq.n	800704c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007046:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800704a:	e02d      	b.n	80070a8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	2100      	movs	r1, #0
 8007052:	4618      	mov	r0, r3
 8007054:	f002 f8e5 	bl	8009222 <SDMMC_GetResponse>
 8007058:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	0fdb      	lsrs	r3, r3, #31
 800705e:	2b01      	cmp	r3, #1
 8007060:	d101      	bne.n	8007066 <SD_PowerON+0xce>
 8007062:	2301      	movs	r3, #1
 8007064:	e000      	b.n	8007068 <SD_PowerON+0xd0>
 8007066:	2300      	movs	r3, #0
 8007068:	613b      	str	r3, [r7, #16]

    count++;
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	3301      	adds	r3, #1
 800706e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007076:	4293      	cmp	r3, r2
 8007078:	d802      	bhi.n	8007080 <SD_PowerON+0xe8>
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d0cc      	beq.n	800701a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007086:	4293      	cmp	r3, r2
 8007088:	d902      	bls.n	8007090 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800708a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800708e:	e00b      	b.n	80070a8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d002      	beq.n	80070a6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3718      	adds	r7, #24
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	c1100000 	.word	0xc1100000

080070b4 <SD_PowerOFF>:
  * @brief  Turns the SDMMC output signals off.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
static void SD_PowerOFF(SD_HandleTypeDef *hsd)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  /* Set Power State to OFF */
  (void)SDMMC_PowerState_OFF(hsd->Instance);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f002 f858 	bl	8009176 <SDMMC_PowerState_OFF>
}
 80070c6:	bf00      	nop
 80070c8:	3708      	adds	r7, #8
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
	...

080070d0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08c      	sub	sp, #48	; 0x30
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80070da:	f7fa fab9 	bl	8001650 <HAL_GetTick>
 80070de:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2100      	movs	r1, #0
 80070ea:	4618      	mov	r0, r3
 80070ec:	f002 f899 	bl	8009222 <SDMMC_GetResponse>
 80070f0:	4603      	mov	r3, r0
 80070f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070fa:	d102      	bne.n	8007102 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80070fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007100:	e0b0      	b.n	8007264 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2140      	movs	r1, #64	; 0x40
 8007108:	4618      	mov	r0, r3
 800710a:	f002 f8c9 	bl	80092a0 <SDMMC_CmdBlockLength>
 800710e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007110:	6a3b      	ldr	r3, [r7, #32]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d005      	beq.n	8007122 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800711e:	6a3b      	ldr	r3, [r7, #32]
 8007120:	e0a0      	b.n	8007264 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712a:	041b      	lsls	r3, r3, #16
 800712c:	4619      	mov	r1, r3
 800712e:	4610      	mov	r0, r2
 8007130:	f002 fa03 	bl	800953a <SDMMC_CmdAppCommand>
 8007134:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007136:	6a3b      	ldr	r3, [r7, #32]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d005      	beq.n	8007148 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007144:	6a3b      	ldr	r3, [r7, #32]
 8007146:	e08d      	b.n	8007264 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007148:	f04f 33ff 	mov.w	r3, #4294967295
 800714c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800714e:	2340      	movs	r3, #64	; 0x40
 8007150:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007152:	2360      	movs	r3, #96	; 0x60
 8007154:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007156:	2302      	movs	r3, #2
 8007158:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800715a:	2300      	movs	r3, #0
 800715c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800715e:	2301      	movs	r3, #1
 8007160:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f107 0208 	add.w	r2, r7, #8
 800716a:	4611      	mov	r1, r2
 800716c:	4618      	mov	r0, r3
 800716e:	f002 f86b 	bl	8009248 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4618      	mov	r0, r3
 8007178:	f002 faeb 	bl	8009752 <SDMMC_CmdStatusRegister>
 800717c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800717e:	6a3b      	ldr	r3, [r7, #32]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d02b      	beq.n	80071dc <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	e069      	b.n	8007264 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007196:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800719a:	2b00      	cmp	r3, #0
 800719c:	d013      	beq.n	80071c6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800719e:	2300      	movs	r3, #0
 80071a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071a2:	e00d      	b.n	80071c0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4618      	mov	r0, r3
 80071aa:	f001 ffb5 	bl	8009118 <SDMMC_ReadFIFO>
 80071ae:	4602      	mov	r2, r0
 80071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b2:	601a      	str	r2, [r3, #0]
        pData++;
 80071b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b6:	3304      	adds	r3, #4
 80071b8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80071ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071bc:	3301      	adds	r3, #1
 80071be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c2:	2b07      	cmp	r3, #7
 80071c4:	d9ee      	bls.n	80071a4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80071c6:	f7fa fa43 	bl	8001650 <HAL_GetTick>
 80071ca:	4602      	mov	r2, r0
 80071cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ce:	1ad3      	subs	r3, r2, r3
 80071d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071d4:	d102      	bne.n	80071dc <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80071d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071da:	e043      	b.n	8007264 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d0d2      	beq.n	8007190 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f0:	f003 0308 	and.w	r3, r3, #8
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d001      	beq.n	80071fc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80071f8:	2308      	movs	r3, #8
 80071fa:	e033      	b.n	8007264 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007202:	f003 0302 	and.w	r3, r3, #2
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800720a:	2302      	movs	r3, #2
 800720c:	e02a      	b.n	8007264 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007214:	f003 0320 	and.w	r3, r3, #32
 8007218:	2b00      	cmp	r3, #0
 800721a:	d017      	beq.n	800724c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800721c:	2320      	movs	r3, #32
 800721e:	e021      	b.n	8007264 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4618      	mov	r0, r3
 8007226:	f001 ff77 	bl	8009118 <SDMMC_ReadFIFO>
 800722a:	4602      	mov	r2, r0
 800722c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722e:	601a      	str	r2, [r3, #0]
    pData++;
 8007230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007232:	3304      	adds	r3, #4
 8007234:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007236:	f7fa fa0b 	bl	8001650 <HAL_GetTick>
 800723a:	4602      	mov	r2, r0
 800723c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723e:	1ad3      	subs	r3, r2, r3
 8007240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007244:	d102      	bne.n	800724c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007246:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800724a:	e00b      	b.n	8007264 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007252:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1e2      	bne.n	8007220 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a03      	ldr	r2, [pc, #12]	; (800726c <SD_SendSDStatus+0x19c>)
 8007260:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3730      	adds	r7, #48	; 0x30
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	18000f3a 	.word	0x18000f3a

08007270 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d102      	bne.n	8007286 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007280:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007284:	e018      	b.n	80072b8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800728e:	041b      	lsls	r3, r3, #16
 8007290:	4619      	mov	r1, r3
 8007292:	4610      	mov	r0, r2
 8007294:	f002 fa3a 	bl	800970c <SDMMC_CmdSendStatus>
 8007298:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d001      	beq.n	80072a4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	e009      	b.n	80072b8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2100      	movs	r1, #0
 80072aa:	4618      	mov	r0, r3
 80072ac:	f001 ffb9 	bl	8009222 <SDMMC_GetResponse>
 80072b0:	4602      	mov	r2, r0
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3710      	adds	r7, #16
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b086      	sub	sp, #24
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80072c8:	2300      	movs	r3, #0
 80072ca:	60fb      	str	r3, [r7, #12]
 80072cc:	2300      	movs	r3, #0
 80072ce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	2100      	movs	r1, #0
 80072d6:	4618      	mov	r0, r3
 80072d8:	f001 ffa3 	bl	8009222 <SDMMC_GetResponse>
 80072dc:	4603      	mov	r3, r0
 80072de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072e6:	d102      	bne.n	80072ee <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80072e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80072ec:	e02f      	b.n	800734e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80072ee:	f107 030c 	add.w	r3, r7, #12
 80072f2:	4619      	mov	r1, r3
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f879 	bl	80073ec <SD_FindSCR>
 80072fa:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d001      	beq.n	8007306 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	e023      	b.n	800734e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800730c:	2b00      	cmp	r3, #0
 800730e:	d01c      	beq.n	800734a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007318:	041b      	lsls	r3, r3, #16
 800731a:	4619      	mov	r1, r3
 800731c:	4610      	mov	r0, r2
 800731e:	f002 f90c 	bl	800953a <SDMMC_CmdAppCommand>
 8007322:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d001      	beq.n	800732e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	e00f      	b.n	800734e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2102      	movs	r1, #2
 8007334:	4618      	mov	r0, r3
 8007336:	f002 f943 	bl	80095c0 <SDMMC_CmdBusWidth>
 800733a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d001      	beq.n	8007346 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	e003      	b.n	800734e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007346:	2300      	movs	r3, #0
 8007348:	e001      	b.n	800734e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800734a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800734e:	4618      	mov	r0, r3
 8007350:	3718      	adds	r7, #24
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b086      	sub	sp, #24
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800735e:	2300      	movs	r3, #0
 8007360:	60fb      	str	r3, [r7, #12]
 8007362:	2300      	movs	r3, #0
 8007364:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2100      	movs	r1, #0
 800736c:	4618      	mov	r0, r3
 800736e:	f001 ff58 	bl	8009222 <SDMMC_GetResponse>
 8007372:	4603      	mov	r3, r0
 8007374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007378:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800737c:	d102      	bne.n	8007384 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800737e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007382:	e02f      	b.n	80073e4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007384:	f107 030c 	add.w	r3, r7, #12
 8007388:	4619      	mov	r1, r3
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f82e 	bl	80073ec <SD_FindSCR>
 8007390:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d001      	beq.n	800739c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	e023      	b.n	80073e4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d01c      	beq.n	80073e0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ae:	041b      	lsls	r3, r3, #16
 80073b0:	4619      	mov	r1, r3
 80073b2:	4610      	mov	r0, r2
 80073b4:	f002 f8c1 	bl	800953a <SDMMC_CmdAppCommand>
 80073b8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d001      	beq.n	80073c4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	e00f      	b.n	80073e4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2100      	movs	r1, #0
 80073ca:	4618      	mov	r0, r3
 80073cc:	f002 f8f8 	bl	80095c0 <SDMMC_CmdBusWidth>
 80073d0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	e003      	b.n	80073e4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80073dc:	2300      	movs	r3, #0
 80073de:	e001      	b.n	80073e4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80073e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3718      	adds	r7, #24
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08e      	sub	sp, #56	; 0x38
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80073f6:	f7fa f92b 	bl	8001650 <HAL_GetTick>
 80073fa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80073fc:	2300      	movs	r3, #0
 80073fe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007400:	2300      	movs	r3, #0
 8007402:	60bb      	str	r3, [r7, #8]
 8007404:	2300      	movs	r3, #0
 8007406:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2108      	movs	r1, #8
 8007412:	4618      	mov	r0, r3
 8007414:	f001 ff44 	bl	80092a0 <SDMMC_CmdBlockLength>
 8007418:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800741a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741c:	2b00      	cmp	r3, #0
 800741e:	d001      	beq.n	8007424 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007422:	e0ad      	b.n	8007580 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800742c:	041b      	lsls	r3, r3, #16
 800742e:	4619      	mov	r1, r3
 8007430:	4610      	mov	r0, r2
 8007432:	f002 f882 	bl	800953a <SDMMC_CmdAppCommand>
 8007436:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743a:	2b00      	cmp	r3, #0
 800743c:	d001      	beq.n	8007442 <SD_FindSCR+0x56>
  {
    return errorstate;
 800743e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007440:	e09e      	b.n	8007580 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007442:	f04f 33ff 	mov.w	r3, #4294967295
 8007446:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007448:	2308      	movs	r3, #8
 800744a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800744c:	2330      	movs	r3, #48	; 0x30
 800744e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007450:	2302      	movs	r3, #2
 8007452:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007454:	2300      	movs	r3, #0
 8007456:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007458:	2301      	movs	r3, #1
 800745a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f107 0210 	add.w	r2, r7, #16
 8007464:	4611      	mov	r1, r2
 8007466:	4618      	mov	r0, r3
 8007468:	f001 feee 	bl	8009248 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4618      	mov	r0, r3
 8007472:	f002 f8c8 	bl	8009606 <SDMMC_CmdSendSCR>
 8007476:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747a:	2b00      	cmp	r3, #0
 800747c:	d027      	beq.n	80074ce <SD_FindSCR+0xe2>
  {
    return errorstate;
 800747e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007480:	e07e      	b.n	8007580 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007488:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d113      	bne.n	80074b8 <SD_FindSCR+0xcc>
 8007490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007492:	2b00      	cmp	r3, #0
 8007494:	d110      	bne.n	80074b8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4618      	mov	r0, r3
 800749c:	f001 fe3c 	bl	8009118 <SDMMC_ReadFIFO>
 80074a0:	4603      	mov	r3, r0
 80074a2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4618      	mov	r0, r3
 80074aa:	f001 fe35 	bl	8009118 <SDMMC_ReadFIFO>
 80074ae:	4603      	mov	r3, r0
 80074b0:	60fb      	str	r3, [r7, #12]
      index++;
 80074b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074b4:	3301      	adds	r3, #1
 80074b6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80074b8:	f7fa f8ca 	bl	8001650 <HAL_GetTick>
 80074bc:	4602      	mov	r2, r0
 80074be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c0:	1ad3      	subs	r3, r2, r3
 80074c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074c6:	d102      	bne.n	80074ce <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80074c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074cc:	e058      	b.n	8007580 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074d4:	f240 532a 	movw	r3, #1322	; 0x52a
 80074d8:	4013      	ands	r3, r2
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d0d1      	beq.n	8007482 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074e4:	f003 0308 	and.w	r3, r3, #8
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d005      	beq.n	80074f8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2208      	movs	r2, #8
 80074f2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80074f4:	2308      	movs	r3, #8
 80074f6:	e043      	b.n	8007580 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b00      	cmp	r3, #0
 8007504:	d005      	beq.n	8007512 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2202      	movs	r2, #2
 800750c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800750e:	2302      	movs	r3, #2
 8007510:	e036      	b.n	8007580 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007518:	f003 0320 	and.w	r3, r3, #32
 800751c:	2b00      	cmp	r3, #0
 800751e:	d005      	beq.n	800752c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2220      	movs	r2, #32
 8007526:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007528:	2320      	movs	r3, #32
 800752a:	e029      	b.n	8007580 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a15      	ldr	r2, [pc, #84]	; (8007588 <SD_FindSCR+0x19c>)
 8007532:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	061a      	lsls	r2, r3, #24
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	021b      	lsls	r3, r3, #8
 800753c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007540:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	0a1b      	lsrs	r3, r3, #8
 8007546:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800754a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	0e1b      	lsrs	r3, r3, #24
 8007550:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007554:	601a      	str	r2, [r3, #0]
    scr++;
 8007556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007558:	3304      	adds	r3, #4
 800755a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	061a      	lsls	r2, r3, #24
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	021b      	lsls	r3, r3, #8
 8007564:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007568:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	0a1b      	lsrs	r3, r3, #8
 800756e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007572:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	0e1b      	lsrs	r3, r3, #24
 8007578:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800757a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800757c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3738      	adds	r7, #56	; 0x38
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	18000f3a 	.word	0x18000f3a

0800758c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b086      	sub	sp, #24
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007598:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759e:	2b1f      	cmp	r3, #31
 80075a0:	d936      	bls.n	8007610 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80075a2:	2300      	movs	r3, #0
 80075a4:	617b      	str	r3, [r7, #20]
 80075a6:	e027      	b.n	80075f8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4618      	mov	r0, r3
 80075ae:	f001 fdb3 	bl	8009118 <SDMMC_ReadFIFO>
 80075b2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	b2da      	uxtb	r2, r3
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	3301      	adds	r3, #1
 80075c0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	0a1b      	lsrs	r3, r3, #8
 80075c6:	b2da      	uxtb	r2, r3
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	3301      	adds	r3, #1
 80075d0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	0c1b      	lsrs	r3, r3, #16
 80075d6:	b2da      	uxtb	r2, r3
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	3301      	adds	r3, #1
 80075e0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	0e1b      	lsrs	r3, r3, #24
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	3301      	adds	r3, #1
 80075f0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	3301      	adds	r3, #1
 80075f6:	617b      	str	r3, [r7, #20]
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	2b07      	cmp	r3, #7
 80075fc:	d9d4      	bls.n	80075a8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	693a      	ldr	r2, [r7, #16]
 8007602:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007608:	f1a3 0220 	sub.w	r2, r3, #32
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8007610:	bf00      	nop
 8007612:	3718      	adds	r7, #24
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	69db      	ldr	r3, [r3, #28]
 8007624:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	2b1f      	cmp	r3, #31
 800762c:	d93a      	bls.n	80076a4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800762e:	2300      	movs	r3, #0
 8007630:	617b      	str	r3, [r7, #20]
 8007632:	e02b      	b.n	800768c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	60fb      	str	r3, [r7, #12]
      tmp++;
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	3301      	adds	r3, #1
 800763e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	021a      	lsls	r2, r3, #8
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	4313      	orrs	r3, r2
 800764a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	3301      	adds	r3, #1
 8007650:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	041a      	lsls	r2, r3, #16
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4313      	orrs	r3, r2
 800765c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	3301      	adds	r3, #1
 8007662:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	061a      	lsls	r2, r3, #24
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	4313      	orrs	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	3301      	adds	r3, #1
 8007674:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f107 020c 	add.w	r2, r7, #12
 800767e:	4611      	mov	r1, r2
 8007680:	4618      	mov	r0, r3
 8007682:	f001 fd56 	bl	8009132 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	3301      	adds	r3, #1
 800768a:	617b      	str	r3, [r7, #20]
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	2b07      	cmp	r3, #7
 8007690:	d9d0      	bls.n	8007634 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	693a      	ldr	r2, [r7, #16]
 8007696:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a1b      	ldr	r3, [r3, #32]
 800769c:	f1a3 0220 	sub.w	r2, r3, #32
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	621a      	str	r2, [r3, #32]
  }
}
 80076a4:	bf00      	nop
 80076a6:	3718      	adds	r7, #24
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80076b4:	bf00      	nop
 80076b6:	370c      	adds	r7, #12
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80076c8:	bf00      	nop
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b082      	sub	sp, #8
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e049      	b.n	80077a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	d106      	bne.n	8007728 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 f89d 	bl	8007862 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2202      	movs	r2, #2
 800772c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	3304      	adds	r3, #4
 8007738:	4619      	mov	r1, r3
 800773a:	4610      	mov	r0, r2
 800773c:	f000 fa66 	bl	8007c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3708      	adds	r7, #8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b082      	sub	sp, #8
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2202      	movs	r2, #2
 80077b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	6a1a      	ldr	r2, [r3, #32]
 80077c0:	f241 1311 	movw	r3, #4369	; 0x1111
 80077c4:	4013      	ands	r3, r2
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10f      	bne.n	80077ea <HAL_TIM_Base_DeInit+0x40>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6a1a      	ldr	r2, [r3, #32]
 80077d0:	f240 4344 	movw	r3, #1092	; 0x444
 80077d4:	4013      	ands	r3, r2
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d107      	bne.n	80077ea <HAL_TIM_Base_DeInit+0x40>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681a      	ldr	r2, [r3, #0]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f022 0201 	bic.w	r2, r2, #1
 80077e8:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f843 	bl	8007876 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2200      	movs	r2, #0
 8007814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2200      	movs	r2, #0
 8007854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}

08007862 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007862:	b480      	push	{r7}
 8007864:	b083      	sub	sp, #12
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800786a:	bf00      	nop
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <HAL_TIM_Base_MspDeInit>:
  * @brief  DeInitializes TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
{
 8007876:	b480      	push	{r7}
 8007878:	b083      	sub	sp, #12
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspDeInit could be implemented in the user file
   */
}
 800787e:	bf00      	nop
 8007880:	370c      	adds	r7, #12
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
	...

0800788c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b01      	cmp	r3, #1
 800789e:	d001      	beq.n	80078a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	e054      	b.n	800794e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2202      	movs	r2, #2
 80078a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68da      	ldr	r2, [r3, #12]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f042 0201 	orr.w	r2, r2, #1
 80078ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a26      	ldr	r2, [pc, #152]	; (800795c <HAL_TIM_Base_Start_IT+0xd0>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d022      	beq.n	800790c <HAL_TIM_Base_Start_IT+0x80>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ce:	d01d      	beq.n	800790c <HAL_TIM_Base_Start_IT+0x80>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a22      	ldr	r2, [pc, #136]	; (8007960 <HAL_TIM_Base_Start_IT+0xd4>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d018      	beq.n	800790c <HAL_TIM_Base_Start_IT+0x80>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a21      	ldr	r2, [pc, #132]	; (8007964 <HAL_TIM_Base_Start_IT+0xd8>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d013      	beq.n	800790c <HAL_TIM_Base_Start_IT+0x80>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a1f      	ldr	r2, [pc, #124]	; (8007968 <HAL_TIM_Base_Start_IT+0xdc>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d00e      	beq.n	800790c <HAL_TIM_Base_Start_IT+0x80>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a1e      	ldr	r2, [pc, #120]	; (800796c <HAL_TIM_Base_Start_IT+0xe0>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d009      	beq.n	800790c <HAL_TIM_Base_Start_IT+0x80>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a1c      	ldr	r2, [pc, #112]	; (8007970 <HAL_TIM_Base_Start_IT+0xe4>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d004      	beq.n	800790c <HAL_TIM_Base_Start_IT+0x80>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a1b      	ldr	r2, [pc, #108]	; (8007974 <HAL_TIM_Base_Start_IT+0xe8>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d115      	bne.n	8007938 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	689a      	ldr	r2, [r3, #8]
 8007912:	4b19      	ldr	r3, [pc, #100]	; (8007978 <HAL_TIM_Base_Start_IT+0xec>)
 8007914:	4013      	ands	r3, r2
 8007916:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2b06      	cmp	r3, #6
 800791c:	d015      	beq.n	800794a <HAL_TIM_Base_Start_IT+0xbe>
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007924:	d011      	beq.n	800794a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f042 0201 	orr.w	r2, r2, #1
 8007934:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007936:	e008      	b.n	800794a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f042 0201 	orr.w	r2, r2, #1
 8007946:	601a      	str	r2, [r3, #0]
 8007948:	e000      	b.n	800794c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800794a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3714      	adds	r7, #20
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	40010000 	.word	0x40010000
 8007960:	40000400 	.word	0x40000400
 8007964:	40000800 	.word	0x40000800
 8007968:	40000c00 	.word	0x40000c00
 800796c:	40010400 	.word	0x40010400
 8007970:	40001800 	.word	0x40001800
 8007974:	40014000 	.word	0x40014000
 8007978:	00010007 	.word	0x00010007

0800797c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	f003 0302 	and.w	r3, r3, #2
 800798e:	2b02      	cmp	r3, #2
 8007990:	d122      	bne.n	80079d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	2b02      	cmp	r3, #2
 800799e:	d11b      	bne.n	80079d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f06f 0202 	mvn.w	r2, #2
 80079a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2201      	movs	r2, #1
 80079ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	f003 0303 	and.w	r3, r3, #3
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d003      	beq.n	80079c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f000 f905 	bl	8007bce <HAL_TIM_IC_CaptureCallback>
 80079c4:	e005      	b.n	80079d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f8f7 	bl	8007bba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 f908 	bl	8007be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	f003 0304 	and.w	r3, r3, #4
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d122      	bne.n	8007a2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	f003 0304 	and.w	r3, r3, #4
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	d11b      	bne.n	8007a2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f06f 0204 	mvn.w	r2, #4
 80079fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	2202      	movs	r2, #2
 8007a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d003      	beq.n	8007a1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f8db 	bl	8007bce <HAL_TIM_IC_CaptureCallback>
 8007a18:	e005      	b.n	8007a26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 f8cd 	bl	8007bba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a20:	6878      	ldr	r0, [r7, #4]
 8007a22:	f000 f8de 	bl	8007be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	691b      	ldr	r3, [r3, #16]
 8007a32:	f003 0308 	and.w	r3, r3, #8
 8007a36:	2b08      	cmp	r3, #8
 8007a38:	d122      	bne.n	8007a80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	f003 0308 	and.w	r3, r3, #8
 8007a44:	2b08      	cmp	r3, #8
 8007a46:	d11b      	bne.n	8007a80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f06f 0208 	mvn.w	r2, #8
 8007a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2204      	movs	r2, #4
 8007a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	f003 0303 	and.w	r3, r3, #3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d003      	beq.n	8007a6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f8b1 	bl	8007bce <HAL_TIM_IC_CaptureCallback>
 8007a6c:	e005      	b.n	8007a7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f8a3 	bl	8007bba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f8b4 	bl	8007be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	f003 0310 	and.w	r3, r3, #16
 8007a8a:	2b10      	cmp	r3, #16
 8007a8c:	d122      	bne.n	8007ad4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	f003 0310 	and.w	r3, r3, #16
 8007a98:	2b10      	cmp	r3, #16
 8007a9a:	d11b      	bne.n	8007ad4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f06f 0210 	mvn.w	r2, #16
 8007aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2208      	movs	r2, #8
 8007aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	69db      	ldr	r3, [r3, #28]
 8007ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d003      	beq.n	8007ac2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f887 	bl	8007bce <HAL_TIM_IC_CaptureCallback>
 8007ac0:	e005      	b.n	8007ace <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f879 	bl	8007bba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f000 f88a 	bl	8007be2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	f003 0301 	and.w	r3, r3, #1
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d10e      	bne.n	8007b00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	f003 0301 	and.w	r3, r3, #1
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d107      	bne.n	8007b00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f06f 0201 	mvn.w	r2, #1
 8007af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f7f9 fa70 	bl	8000fe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	691b      	ldr	r3, [r3, #16]
 8007b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b0a:	2b80      	cmp	r3, #128	; 0x80
 8007b0c:	d10e      	bne.n	8007b2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	68db      	ldr	r3, [r3, #12]
 8007b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b18:	2b80      	cmp	r3, #128	; 0x80
 8007b1a:	d107      	bne.n	8007b2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f000 f914 	bl	8007d54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b3a:	d10e      	bne.n	8007b5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b46:	2b80      	cmp	r3, #128	; 0x80
 8007b48:	d107      	bne.n	8007b5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f907 	bl	8007d68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	691b      	ldr	r3, [r3, #16]
 8007b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b64:	2b40      	cmp	r3, #64	; 0x40
 8007b66:	d10e      	bne.n	8007b86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b72:	2b40      	cmp	r3, #64	; 0x40
 8007b74:	d107      	bne.n	8007b86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 f838 	bl	8007bf6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	f003 0320 	and.w	r3, r3, #32
 8007b90:	2b20      	cmp	r3, #32
 8007b92:	d10e      	bne.n	8007bb2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	f003 0320 	and.w	r3, r3, #32
 8007b9e:	2b20      	cmp	r3, #32
 8007ba0:	d107      	bne.n	8007bb2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f06f 0220 	mvn.w	r2, #32
 8007baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f8c7 	bl	8007d40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bb2:	bf00      	nop
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}

08007bba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007bba:	b480      	push	{r7}
 8007bbc:	b083      	sub	sp, #12
 8007bbe:	af00      	add	r7, sp, #0
 8007bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007bc2:	bf00      	nop
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr

08007bce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007bce:	b480      	push	{r7}
 8007bd0:	b083      	sub	sp, #12
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007bd6:	bf00      	nop
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b083      	sub	sp, #12
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007bea:	bf00      	nop
 8007bec:	370c      	adds	r7, #12
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007bf6:	b480      	push	{r7}
 8007bf8:	b083      	sub	sp, #12
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007bfe:	bf00      	nop
 8007c00:	370c      	adds	r7, #12
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr
	...

08007c0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b085      	sub	sp, #20
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4a40      	ldr	r2, [pc, #256]	; (8007d20 <TIM_Base_SetConfig+0x114>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d013      	beq.n	8007c4c <TIM_Base_SetConfig+0x40>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c2a:	d00f      	beq.n	8007c4c <TIM_Base_SetConfig+0x40>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	4a3d      	ldr	r2, [pc, #244]	; (8007d24 <TIM_Base_SetConfig+0x118>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d00b      	beq.n	8007c4c <TIM_Base_SetConfig+0x40>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4a3c      	ldr	r2, [pc, #240]	; (8007d28 <TIM_Base_SetConfig+0x11c>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d007      	beq.n	8007c4c <TIM_Base_SetConfig+0x40>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4a3b      	ldr	r2, [pc, #236]	; (8007d2c <TIM_Base_SetConfig+0x120>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d003      	beq.n	8007c4c <TIM_Base_SetConfig+0x40>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4a3a      	ldr	r2, [pc, #232]	; (8007d30 <TIM_Base_SetConfig+0x124>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d108      	bne.n	8007c5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	68fa      	ldr	r2, [r7, #12]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	4a2f      	ldr	r2, [pc, #188]	; (8007d20 <TIM_Base_SetConfig+0x114>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d01f      	beq.n	8007ca6 <TIM_Base_SetConfig+0x9a>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c6c:	d01b      	beq.n	8007ca6 <TIM_Base_SetConfig+0x9a>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4a2c      	ldr	r2, [pc, #176]	; (8007d24 <TIM_Base_SetConfig+0x118>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d017      	beq.n	8007ca6 <TIM_Base_SetConfig+0x9a>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	4a2b      	ldr	r2, [pc, #172]	; (8007d28 <TIM_Base_SetConfig+0x11c>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d013      	beq.n	8007ca6 <TIM_Base_SetConfig+0x9a>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a2a      	ldr	r2, [pc, #168]	; (8007d2c <TIM_Base_SetConfig+0x120>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d00f      	beq.n	8007ca6 <TIM_Base_SetConfig+0x9a>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4a29      	ldr	r2, [pc, #164]	; (8007d30 <TIM_Base_SetConfig+0x124>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d00b      	beq.n	8007ca6 <TIM_Base_SetConfig+0x9a>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4a28      	ldr	r2, [pc, #160]	; (8007d34 <TIM_Base_SetConfig+0x128>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d007      	beq.n	8007ca6 <TIM_Base_SetConfig+0x9a>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	4a27      	ldr	r2, [pc, #156]	; (8007d38 <TIM_Base_SetConfig+0x12c>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d003      	beq.n	8007ca6 <TIM_Base_SetConfig+0x9a>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	4a26      	ldr	r2, [pc, #152]	; (8007d3c <TIM_Base_SetConfig+0x130>)
 8007ca2:	4293      	cmp	r3, r2
 8007ca4:	d108      	bne.n	8007cb8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	68fa      	ldr	r2, [r7, #12]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	695b      	ldr	r3, [r3, #20]
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	689a      	ldr	r2, [r3, #8]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a10      	ldr	r2, [pc, #64]	; (8007d20 <TIM_Base_SetConfig+0x114>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d00f      	beq.n	8007d04 <TIM_Base_SetConfig+0xf8>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a12      	ldr	r2, [pc, #72]	; (8007d30 <TIM_Base_SetConfig+0x124>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d00b      	beq.n	8007d04 <TIM_Base_SetConfig+0xf8>
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a11      	ldr	r2, [pc, #68]	; (8007d34 <TIM_Base_SetConfig+0x128>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d007      	beq.n	8007d04 <TIM_Base_SetConfig+0xf8>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a10      	ldr	r2, [pc, #64]	; (8007d38 <TIM_Base_SetConfig+0x12c>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d003      	beq.n	8007d04 <TIM_Base_SetConfig+0xf8>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a0f      	ldr	r2, [pc, #60]	; (8007d3c <TIM_Base_SetConfig+0x130>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d103      	bne.n	8007d0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	691a      	ldr	r2, [r3, #16]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	615a      	str	r2, [r3, #20]
}
 8007d12:	bf00      	nop
 8007d14:	3714      	adds	r7, #20
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
 8007d1e:	bf00      	nop
 8007d20:	40010000 	.word	0x40010000
 8007d24:	40000400 	.word	0x40000400
 8007d28:	40000800 	.word	0x40000800
 8007d2c:	40000c00 	.word	0x40000c00
 8007d30:	40010400 	.word	0x40010400
 8007d34:	40014000 	.word	0x40014000
 8007d38:	40014400 	.word	0x40014400
 8007d3c:	40014800 	.word	0x40014800

08007d40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr

08007d54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007d5c:	bf00      	nop
 8007d5e:	370c      	adds	r7, #12
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr

08007d68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b083      	sub	sp, #12
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007d70:	bf00      	nop
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e042      	b.n	8007e14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d106      	bne.n	8007da6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f7f9 fa0f 	bl	80011c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2224      	movs	r2, #36	; 0x24
 8007daa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f022 0201 	bic.w	r2, r2, #1
 8007dbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f8fa 	bl	8007fb8 <UART_SetConfig>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d101      	bne.n	8007dce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e022      	b.n	8007e14 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d002      	beq.n	8007ddc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fe56 	bl	8008a88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	685a      	ldr	r2, [r3, #4]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007dea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689a      	ldr	r2, [r3, #8]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007dfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f042 0201 	orr.w	r2, r2, #1
 8007e0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fedd 	bl	8008bcc <UART_CheckIdleState>
 8007e12:	4603      	mov	r3, r0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3708      	adds	r7, #8
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d101      	bne.n	8007e2e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e031      	b.n	8007e92 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2224      	movs	r2, #36	; 0x24
 8007e32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f022 0201 	bic.w	r2, r2, #1
 8007e44:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2200      	movs	r2, #0
 8007e54:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f7f9 fa1a 	bl	8001298 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2200      	movs	r2, #0
 8007e78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b08a      	sub	sp, #40	; 0x28
 8007e9e:	af02      	add	r7, sp, #8
 8007ea0:	60f8      	str	r0, [r7, #12]
 8007ea2:	60b9      	str	r1, [r7, #8]
 8007ea4:	603b      	str	r3, [r7, #0]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007eb0:	2b20      	cmp	r3, #32
 8007eb2:	d17b      	bne.n	8007fac <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d002      	beq.n	8007ec0 <HAL_UART_Transmit+0x26>
 8007eba:	88fb      	ldrh	r3, [r7, #6]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d101      	bne.n	8007ec4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e074      	b.n	8007fae <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	2221      	movs	r2, #33	; 0x21
 8007ed0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ed4:	f7f9 fbbc 	bl	8001650 <HAL_GetTick>
 8007ed8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	88fa      	ldrh	r2, [r7, #6]
 8007ede:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	88fa      	ldrh	r2, [r7, #6]
 8007ee6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ef2:	d108      	bne.n	8007f06 <HAL_UART_Transmit+0x6c>
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d104      	bne.n	8007f06 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007efc:	2300      	movs	r3, #0
 8007efe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	61bb      	str	r3, [r7, #24]
 8007f04:	e003      	b.n	8007f0e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007f0e:	e030      	b.n	8007f72 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	2200      	movs	r2, #0
 8007f18:	2180      	movs	r1, #128	; 0x80
 8007f1a:	68f8      	ldr	r0, [r7, #12]
 8007f1c:	f000 ff00 	bl	8008d20 <UART_WaitOnFlagUntilTimeout>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d005      	beq.n	8007f32 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2220      	movs	r2, #32
 8007f2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e03d      	b.n	8007fae <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d10b      	bne.n	8007f50 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	881b      	ldrh	r3, [r3, #0]
 8007f3c:	461a      	mov	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f46:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	3302      	adds	r3, #2
 8007f4c:	61bb      	str	r3, [r7, #24]
 8007f4e:	e007      	b.n	8007f60 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	781a      	ldrb	r2, [r3, #0]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d1c8      	bne.n	8007f10 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	9300      	str	r3, [sp, #0]
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	2200      	movs	r2, #0
 8007f86:	2140      	movs	r1, #64	; 0x40
 8007f88:	68f8      	ldr	r0, [r7, #12]
 8007f8a:	f000 fec9 	bl	8008d20 <UART_WaitOnFlagUntilTimeout>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d005      	beq.n	8007fa0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2220      	movs	r2, #32
 8007f98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	e006      	b.n	8007fae <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2220      	movs	r2, #32
 8007fa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	e000      	b.n	8007fae <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007fac:	2302      	movs	r3, #2
  }
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3720      	adds	r7, #32
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
	...

08007fb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fbc:	b092      	sub	sp, #72	; 0x48
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	689a      	ldr	r2, [r3, #8]
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	691b      	ldr	r3, [r3, #16]
 8007fd0:	431a      	orrs	r2, r3
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	431a      	orrs	r2, r3
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	69db      	ldr	r3, [r3, #28]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	4bbe      	ldr	r3, [pc, #760]	; (80082e0 <UART_SetConfig+0x328>)
 8007fe8:	4013      	ands	r3, r2
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	6812      	ldr	r2, [r2, #0]
 8007fee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ff0:	430b      	orrs	r3, r1
 8007ff2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ff4:	697b      	ldr	r3, [r7, #20]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	68da      	ldr	r2, [r3, #12]
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	430a      	orrs	r2, r1
 8008008:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	699b      	ldr	r3, [r3, #24]
 800800e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4ab3      	ldr	r2, [pc, #716]	; (80082e4 <UART_SetConfig+0x32c>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d004      	beq.n	8008024 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008020:	4313      	orrs	r3, r2
 8008022:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	689a      	ldr	r2, [r3, #8]
 800802a:	4baf      	ldr	r3, [pc, #700]	; (80082e8 <UART_SetConfig+0x330>)
 800802c:	4013      	ands	r3, r2
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	6812      	ldr	r2, [r2, #0]
 8008032:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008034:	430b      	orrs	r3, r1
 8008036:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800803e:	f023 010f 	bic.w	r1, r3, #15
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	430a      	orrs	r2, r1
 800804c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4aa6      	ldr	r2, [pc, #664]	; (80082ec <UART_SetConfig+0x334>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d177      	bne.n	8008148 <UART_SetConfig+0x190>
 8008058:	4ba5      	ldr	r3, [pc, #660]	; (80082f0 <UART_SetConfig+0x338>)
 800805a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800805c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008060:	2b28      	cmp	r3, #40	; 0x28
 8008062:	d86d      	bhi.n	8008140 <UART_SetConfig+0x188>
 8008064:	a201      	add	r2, pc, #4	; (adr r2, 800806c <UART_SetConfig+0xb4>)
 8008066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800806a:	bf00      	nop
 800806c:	08008111 	.word	0x08008111
 8008070:	08008141 	.word	0x08008141
 8008074:	08008141 	.word	0x08008141
 8008078:	08008141 	.word	0x08008141
 800807c:	08008141 	.word	0x08008141
 8008080:	08008141 	.word	0x08008141
 8008084:	08008141 	.word	0x08008141
 8008088:	08008141 	.word	0x08008141
 800808c:	08008119 	.word	0x08008119
 8008090:	08008141 	.word	0x08008141
 8008094:	08008141 	.word	0x08008141
 8008098:	08008141 	.word	0x08008141
 800809c:	08008141 	.word	0x08008141
 80080a0:	08008141 	.word	0x08008141
 80080a4:	08008141 	.word	0x08008141
 80080a8:	08008141 	.word	0x08008141
 80080ac:	08008121 	.word	0x08008121
 80080b0:	08008141 	.word	0x08008141
 80080b4:	08008141 	.word	0x08008141
 80080b8:	08008141 	.word	0x08008141
 80080bc:	08008141 	.word	0x08008141
 80080c0:	08008141 	.word	0x08008141
 80080c4:	08008141 	.word	0x08008141
 80080c8:	08008141 	.word	0x08008141
 80080cc:	08008129 	.word	0x08008129
 80080d0:	08008141 	.word	0x08008141
 80080d4:	08008141 	.word	0x08008141
 80080d8:	08008141 	.word	0x08008141
 80080dc:	08008141 	.word	0x08008141
 80080e0:	08008141 	.word	0x08008141
 80080e4:	08008141 	.word	0x08008141
 80080e8:	08008141 	.word	0x08008141
 80080ec:	08008131 	.word	0x08008131
 80080f0:	08008141 	.word	0x08008141
 80080f4:	08008141 	.word	0x08008141
 80080f8:	08008141 	.word	0x08008141
 80080fc:	08008141 	.word	0x08008141
 8008100:	08008141 	.word	0x08008141
 8008104:	08008141 	.word	0x08008141
 8008108:	08008141 	.word	0x08008141
 800810c:	08008139 	.word	0x08008139
 8008110:	2301      	movs	r3, #1
 8008112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008116:	e222      	b.n	800855e <UART_SetConfig+0x5a6>
 8008118:	2304      	movs	r3, #4
 800811a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800811e:	e21e      	b.n	800855e <UART_SetConfig+0x5a6>
 8008120:	2308      	movs	r3, #8
 8008122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008126:	e21a      	b.n	800855e <UART_SetConfig+0x5a6>
 8008128:	2310      	movs	r3, #16
 800812a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800812e:	e216      	b.n	800855e <UART_SetConfig+0x5a6>
 8008130:	2320      	movs	r3, #32
 8008132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008136:	e212      	b.n	800855e <UART_SetConfig+0x5a6>
 8008138:	2340      	movs	r3, #64	; 0x40
 800813a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800813e:	e20e      	b.n	800855e <UART_SetConfig+0x5a6>
 8008140:	2380      	movs	r3, #128	; 0x80
 8008142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008146:	e20a      	b.n	800855e <UART_SetConfig+0x5a6>
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a69      	ldr	r2, [pc, #420]	; (80082f4 <UART_SetConfig+0x33c>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d130      	bne.n	80081b4 <UART_SetConfig+0x1fc>
 8008152:	4b67      	ldr	r3, [pc, #412]	; (80082f0 <UART_SetConfig+0x338>)
 8008154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008156:	f003 0307 	and.w	r3, r3, #7
 800815a:	2b05      	cmp	r3, #5
 800815c:	d826      	bhi.n	80081ac <UART_SetConfig+0x1f4>
 800815e:	a201      	add	r2, pc, #4	; (adr r2, 8008164 <UART_SetConfig+0x1ac>)
 8008160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008164:	0800817d 	.word	0x0800817d
 8008168:	08008185 	.word	0x08008185
 800816c:	0800818d 	.word	0x0800818d
 8008170:	08008195 	.word	0x08008195
 8008174:	0800819d 	.word	0x0800819d
 8008178:	080081a5 	.word	0x080081a5
 800817c:	2300      	movs	r3, #0
 800817e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008182:	e1ec      	b.n	800855e <UART_SetConfig+0x5a6>
 8008184:	2304      	movs	r3, #4
 8008186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800818a:	e1e8      	b.n	800855e <UART_SetConfig+0x5a6>
 800818c:	2308      	movs	r3, #8
 800818e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008192:	e1e4      	b.n	800855e <UART_SetConfig+0x5a6>
 8008194:	2310      	movs	r3, #16
 8008196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800819a:	e1e0      	b.n	800855e <UART_SetConfig+0x5a6>
 800819c:	2320      	movs	r3, #32
 800819e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081a2:	e1dc      	b.n	800855e <UART_SetConfig+0x5a6>
 80081a4:	2340      	movs	r3, #64	; 0x40
 80081a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081aa:	e1d8      	b.n	800855e <UART_SetConfig+0x5a6>
 80081ac:	2380      	movs	r3, #128	; 0x80
 80081ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081b2:	e1d4      	b.n	800855e <UART_SetConfig+0x5a6>
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a4f      	ldr	r2, [pc, #316]	; (80082f8 <UART_SetConfig+0x340>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d130      	bne.n	8008220 <UART_SetConfig+0x268>
 80081be:	4b4c      	ldr	r3, [pc, #304]	; (80082f0 <UART_SetConfig+0x338>)
 80081c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081c2:	f003 0307 	and.w	r3, r3, #7
 80081c6:	2b05      	cmp	r3, #5
 80081c8:	d826      	bhi.n	8008218 <UART_SetConfig+0x260>
 80081ca:	a201      	add	r2, pc, #4	; (adr r2, 80081d0 <UART_SetConfig+0x218>)
 80081cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081d0:	080081e9 	.word	0x080081e9
 80081d4:	080081f1 	.word	0x080081f1
 80081d8:	080081f9 	.word	0x080081f9
 80081dc:	08008201 	.word	0x08008201
 80081e0:	08008209 	.word	0x08008209
 80081e4:	08008211 	.word	0x08008211
 80081e8:	2300      	movs	r3, #0
 80081ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ee:	e1b6      	b.n	800855e <UART_SetConfig+0x5a6>
 80081f0:	2304      	movs	r3, #4
 80081f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081f6:	e1b2      	b.n	800855e <UART_SetConfig+0x5a6>
 80081f8:	2308      	movs	r3, #8
 80081fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081fe:	e1ae      	b.n	800855e <UART_SetConfig+0x5a6>
 8008200:	2310      	movs	r3, #16
 8008202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008206:	e1aa      	b.n	800855e <UART_SetConfig+0x5a6>
 8008208:	2320      	movs	r3, #32
 800820a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800820e:	e1a6      	b.n	800855e <UART_SetConfig+0x5a6>
 8008210:	2340      	movs	r3, #64	; 0x40
 8008212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008216:	e1a2      	b.n	800855e <UART_SetConfig+0x5a6>
 8008218:	2380      	movs	r3, #128	; 0x80
 800821a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800821e:	e19e      	b.n	800855e <UART_SetConfig+0x5a6>
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a35      	ldr	r2, [pc, #212]	; (80082fc <UART_SetConfig+0x344>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d130      	bne.n	800828c <UART_SetConfig+0x2d4>
 800822a:	4b31      	ldr	r3, [pc, #196]	; (80082f0 <UART_SetConfig+0x338>)
 800822c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800822e:	f003 0307 	and.w	r3, r3, #7
 8008232:	2b05      	cmp	r3, #5
 8008234:	d826      	bhi.n	8008284 <UART_SetConfig+0x2cc>
 8008236:	a201      	add	r2, pc, #4	; (adr r2, 800823c <UART_SetConfig+0x284>)
 8008238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823c:	08008255 	.word	0x08008255
 8008240:	0800825d 	.word	0x0800825d
 8008244:	08008265 	.word	0x08008265
 8008248:	0800826d 	.word	0x0800826d
 800824c:	08008275 	.word	0x08008275
 8008250:	0800827d 	.word	0x0800827d
 8008254:	2300      	movs	r3, #0
 8008256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800825a:	e180      	b.n	800855e <UART_SetConfig+0x5a6>
 800825c:	2304      	movs	r3, #4
 800825e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008262:	e17c      	b.n	800855e <UART_SetConfig+0x5a6>
 8008264:	2308      	movs	r3, #8
 8008266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800826a:	e178      	b.n	800855e <UART_SetConfig+0x5a6>
 800826c:	2310      	movs	r3, #16
 800826e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008272:	e174      	b.n	800855e <UART_SetConfig+0x5a6>
 8008274:	2320      	movs	r3, #32
 8008276:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800827a:	e170      	b.n	800855e <UART_SetConfig+0x5a6>
 800827c:	2340      	movs	r3, #64	; 0x40
 800827e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008282:	e16c      	b.n	800855e <UART_SetConfig+0x5a6>
 8008284:	2380      	movs	r3, #128	; 0x80
 8008286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800828a:	e168      	b.n	800855e <UART_SetConfig+0x5a6>
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a1b      	ldr	r2, [pc, #108]	; (8008300 <UART_SetConfig+0x348>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d142      	bne.n	800831c <UART_SetConfig+0x364>
 8008296:	4b16      	ldr	r3, [pc, #88]	; (80082f0 <UART_SetConfig+0x338>)
 8008298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800829a:	f003 0307 	and.w	r3, r3, #7
 800829e:	2b05      	cmp	r3, #5
 80082a0:	d838      	bhi.n	8008314 <UART_SetConfig+0x35c>
 80082a2:	a201      	add	r2, pc, #4	; (adr r2, 80082a8 <UART_SetConfig+0x2f0>)
 80082a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a8:	080082c1 	.word	0x080082c1
 80082ac:	080082c9 	.word	0x080082c9
 80082b0:	080082d1 	.word	0x080082d1
 80082b4:	080082d9 	.word	0x080082d9
 80082b8:	08008305 	.word	0x08008305
 80082bc:	0800830d 	.word	0x0800830d
 80082c0:	2300      	movs	r3, #0
 80082c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082c6:	e14a      	b.n	800855e <UART_SetConfig+0x5a6>
 80082c8:	2304      	movs	r3, #4
 80082ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082ce:	e146      	b.n	800855e <UART_SetConfig+0x5a6>
 80082d0:	2308      	movs	r3, #8
 80082d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082d6:	e142      	b.n	800855e <UART_SetConfig+0x5a6>
 80082d8:	2310      	movs	r3, #16
 80082da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80082de:	e13e      	b.n	800855e <UART_SetConfig+0x5a6>
 80082e0:	cfff69f3 	.word	0xcfff69f3
 80082e4:	58000c00 	.word	0x58000c00
 80082e8:	11fff4ff 	.word	0x11fff4ff
 80082ec:	40011000 	.word	0x40011000
 80082f0:	58024400 	.word	0x58024400
 80082f4:	40004400 	.word	0x40004400
 80082f8:	40004800 	.word	0x40004800
 80082fc:	40004c00 	.word	0x40004c00
 8008300:	40005000 	.word	0x40005000
 8008304:	2320      	movs	r3, #32
 8008306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800830a:	e128      	b.n	800855e <UART_SetConfig+0x5a6>
 800830c:	2340      	movs	r3, #64	; 0x40
 800830e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008312:	e124      	b.n	800855e <UART_SetConfig+0x5a6>
 8008314:	2380      	movs	r3, #128	; 0x80
 8008316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800831a:	e120      	b.n	800855e <UART_SetConfig+0x5a6>
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4acb      	ldr	r2, [pc, #812]	; (8008650 <UART_SetConfig+0x698>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d176      	bne.n	8008414 <UART_SetConfig+0x45c>
 8008326:	4bcb      	ldr	r3, [pc, #812]	; (8008654 <UART_SetConfig+0x69c>)
 8008328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800832a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800832e:	2b28      	cmp	r3, #40	; 0x28
 8008330:	d86c      	bhi.n	800840c <UART_SetConfig+0x454>
 8008332:	a201      	add	r2, pc, #4	; (adr r2, 8008338 <UART_SetConfig+0x380>)
 8008334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008338:	080083dd 	.word	0x080083dd
 800833c:	0800840d 	.word	0x0800840d
 8008340:	0800840d 	.word	0x0800840d
 8008344:	0800840d 	.word	0x0800840d
 8008348:	0800840d 	.word	0x0800840d
 800834c:	0800840d 	.word	0x0800840d
 8008350:	0800840d 	.word	0x0800840d
 8008354:	0800840d 	.word	0x0800840d
 8008358:	080083e5 	.word	0x080083e5
 800835c:	0800840d 	.word	0x0800840d
 8008360:	0800840d 	.word	0x0800840d
 8008364:	0800840d 	.word	0x0800840d
 8008368:	0800840d 	.word	0x0800840d
 800836c:	0800840d 	.word	0x0800840d
 8008370:	0800840d 	.word	0x0800840d
 8008374:	0800840d 	.word	0x0800840d
 8008378:	080083ed 	.word	0x080083ed
 800837c:	0800840d 	.word	0x0800840d
 8008380:	0800840d 	.word	0x0800840d
 8008384:	0800840d 	.word	0x0800840d
 8008388:	0800840d 	.word	0x0800840d
 800838c:	0800840d 	.word	0x0800840d
 8008390:	0800840d 	.word	0x0800840d
 8008394:	0800840d 	.word	0x0800840d
 8008398:	080083f5 	.word	0x080083f5
 800839c:	0800840d 	.word	0x0800840d
 80083a0:	0800840d 	.word	0x0800840d
 80083a4:	0800840d 	.word	0x0800840d
 80083a8:	0800840d 	.word	0x0800840d
 80083ac:	0800840d 	.word	0x0800840d
 80083b0:	0800840d 	.word	0x0800840d
 80083b4:	0800840d 	.word	0x0800840d
 80083b8:	080083fd 	.word	0x080083fd
 80083bc:	0800840d 	.word	0x0800840d
 80083c0:	0800840d 	.word	0x0800840d
 80083c4:	0800840d 	.word	0x0800840d
 80083c8:	0800840d 	.word	0x0800840d
 80083cc:	0800840d 	.word	0x0800840d
 80083d0:	0800840d 	.word	0x0800840d
 80083d4:	0800840d 	.word	0x0800840d
 80083d8:	08008405 	.word	0x08008405
 80083dc:	2301      	movs	r3, #1
 80083de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083e2:	e0bc      	b.n	800855e <UART_SetConfig+0x5a6>
 80083e4:	2304      	movs	r3, #4
 80083e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ea:	e0b8      	b.n	800855e <UART_SetConfig+0x5a6>
 80083ec:	2308      	movs	r3, #8
 80083ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083f2:	e0b4      	b.n	800855e <UART_SetConfig+0x5a6>
 80083f4:	2310      	movs	r3, #16
 80083f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083fa:	e0b0      	b.n	800855e <UART_SetConfig+0x5a6>
 80083fc:	2320      	movs	r3, #32
 80083fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008402:	e0ac      	b.n	800855e <UART_SetConfig+0x5a6>
 8008404:	2340      	movs	r3, #64	; 0x40
 8008406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800840a:	e0a8      	b.n	800855e <UART_SetConfig+0x5a6>
 800840c:	2380      	movs	r3, #128	; 0x80
 800840e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008412:	e0a4      	b.n	800855e <UART_SetConfig+0x5a6>
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a8f      	ldr	r2, [pc, #572]	; (8008658 <UART_SetConfig+0x6a0>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d130      	bne.n	8008480 <UART_SetConfig+0x4c8>
 800841e:	4b8d      	ldr	r3, [pc, #564]	; (8008654 <UART_SetConfig+0x69c>)
 8008420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008422:	f003 0307 	and.w	r3, r3, #7
 8008426:	2b05      	cmp	r3, #5
 8008428:	d826      	bhi.n	8008478 <UART_SetConfig+0x4c0>
 800842a:	a201      	add	r2, pc, #4	; (adr r2, 8008430 <UART_SetConfig+0x478>)
 800842c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008430:	08008449 	.word	0x08008449
 8008434:	08008451 	.word	0x08008451
 8008438:	08008459 	.word	0x08008459
 800843c:	08008461 	.word	0x08008461
 8008440:	08008469 	.word	0x08008469
 8008444:	08008471 	.word	0x08008471
 8008448:	2300      	movs	r3, #0
 800844a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800844e:	e086      	b.n	800855e <UART_SetConfig+0x5a6>
 8008450:	2304      	movs	r3, #4
 8008452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008456:	e082      	b.n	800855e <UART_SetConfig+0x5a6>
 8008458:	2308      	movs	r3, #8
 800845a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800845e:	e07e      	b.n	800855e <UART_SetConfig+0x5a6>
 8008460:	2310      	movs	r3, #16
 8008462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008466:	e07a      	b.n	800855e <UART_SetConfig+0x5a6>
 8008468:	2320      	movs	r3, #32
 800846a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800846e:	e076      	b.n	800855e <UART_SetConfig+0x5a6>
 8008470:	2340      	movs	r3, #64	; 0x40
 8008472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008476:	e072      	b.n	800855e <UART_SetConfig+0x5a6>
 8008478:	2380      	movs	r3, #128	; 0x80
 800847a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800847e:	e06e      	b.n	800855e <UART_SetConfig+0x5a6>
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a75      	ldr	r2, [pc, #468]	; (800865c <UART_SetConfig+0x6a4>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d130      	bne.n	80084ec <UART_SetConfig+0x534>
 800848a:	4b72      	ldr	r3, [pc, #456]	; (8008654 <UART_SetConfig+0x69c>)
 800848c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800848e:	f003 0307 	and.w	r3, r3, #7
 8008492:	2b05      	cmp	r3, #5
 8008494:	d826      	bhi.n	80084e4 <UART_SetConfig+0x52c>
 8008496:	a201      	add	r2, pc, #4	; (adr r2, 800849c <UART_SetConfig+0x4e4>)
 8008498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800849c:	080084b5 	.word	0x080084b5
 80084a0:	080084bd 	.word	0x080084bd
 80084a4:	080084c5 	.word	0x080084c5
 80084a8:	080084cd 	.word	0x080084cd
 80084ac:	080084d5 	.word	0x080084d5
 80084b0:	080084dd 	.word	0x080084dd
 80084b4:	2300      	movs	r3, #0
 80084b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ba:	e050      	b.n	800855e <UART_SetConfig+0x5a6>
 80084bc:	2304      	movs	r3, #4
 80084be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084c2:	e04c      	b.n	800855e <UART_SetConfig+0x5a6>
 80084c4:	2308      	movs	r3, #8
 80084c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ca:	e048      	b.n	800855e <UART_SetConfig+0x5a6>
 80084cc:	2310      	movs	r3, #16
 80084ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084d2:	e044      	b.n	800855e <UART_SetConfig+0x5a6>
 80084d4:	2320      	movs	r3, #32
 80084d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084da:	e040      	b.n	800855e <UART_SetConfig+0x5a6>
 80084dc:	2340      	movs	r3, #64	; 0x40
 80084de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084e2:	e03c      	b.n	800855e <UART_SetConfig+0x5a6>
 80084e4:	2380      	movs	r3, #128	; 0x80
 80084e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ea:	e038      	b.n	800855e <UART_SetConfig+0x5a6>
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a5b      	ldr	r2, [pc, #364]	; (8008660 <UART_SetConfig+0x6a8>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d130      	bne.n	8008558 <UART_SetConfig+0x5a0>
 80084f6:	4b57      	ldr	r3, [pc, #348]	; (8008654 <UART_SetConfig+0x69c>)
 80084f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084fa:	f003 0307 	and.w	r3, r3, #7
 80084fe:	2b05      	cmp	r3, #5
 8008500:	d826      	bhi.n	8008550 <UART_SetConfig+0x598>
 8008502:	a201      	add	r2, pc, #4	; (adr r2, 8008508 <UART_SetConfig+0x550>)
 8008504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008508:	08008521 	.word	0x08008521
 800850c:	08008529 	.word	0x08008529
 8008510:	08008531 	.word	0x08008531
 8008514:	08008539 	.word	0x08008539
 8008518:	08008541 	.word	0x08008541
 800851c:	08008549 	.word	0x08008549
 8008520:	2302      	movs	r3, #2
 8008522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008526:	e01a      	b.n	800855e <UART_SetConfig+0x5a6>
 8008528:	2304      	movs	r3, #4
 800852a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800852e:	e016      	b.n	800855e <UART_SetConfig+0x5a6>
 8008530:	2308      	movs	r3, #8
 8008532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008536:	e012      	b.n	800855e <UART_SetConfig+0x5a6>
 8008538:	2310      	movs	r3, #16
 800853a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800853e:	e00e      	b.n	800855e <UART_SetConfig+0x5a6>
 8008540:	2320      	movs	r3, #32
 8008542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008546:	e00a      	b.n	800855e <UART_SetConfig+0x5a6>
 8008548:	2340      	movs	r3, #64	; 0x40
 800854a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800854e:	e006      	b.n	800855e <UART_SetConfig+0x5a6>
 8008550:	2380      	movs	r3, #128	; 0x80
 8008552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008556:	e002      	b.n	800855e <UART_SetConfig+0x5a6>
 8008558:	2380      	movs	r3, #128	; 0x80
 800855a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800855e:	697b      	ldr	r3, [r7, #20]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a3f      	ldr	r2, [pc, #252]	; (8008660 <UART_SetConfig+0x6a8>)
 8008564:	4293      	cmp	r3, r2
 8008566:	f040 80f8 	bne.w	800875a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800856a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800856e:	2b20      	cmp	r3, #32
 8008570:	dc46      	bgt.n	8008600 <UART_SetConfig+0x648>
 8008572:	2b02      	cmp	r3, #2
 8008574:	f2c0 8082 	blt.w	800867c <UART_SetConfig+0x6c4>
 8008578:	3b02      	subs	r3, #2
 800857a:	2b1e      	cmp	r3, #30
 800857c:	d87e      	bhi.n	800867c <UART_SetConfig+0x6c4>
 800857e:	a201      	add	r2, pc, #4	; (adr r2, 8008584 <UART_SetConfig+0x5cc>)
 8008580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008584:	08008607 	.word	0x08008607
 8008588:	0800867d 	.word	0x0800867d
 800858c:	0800860f 	.word	0x0800860f
 8008590:	0800867d 	.word	0x0800867d
 8008594:	0800867d 	.word	0x0800867d
 8008598:	0800867d 	.word	0x0800867d
 800859c:	0800861f 	.word	0x0800861f
 80085a0:	0800867d 	.word	0x0800867d
 80085a4:	0800867d 	.word	0x0800867d
 80085a8:	0800867d 	.word	0x0800867d
 80085ac:	0800867d 	.word	0x0800867d
 80085b0:	0800867d 	.word	0x0800867d
 80085b4:	0800867d 	.word	0x0800867d
 80085b8:	0800867d 	.word	0x0800867d
 80085bc:	0800862f 	.word	0x0800862f
 80085c0:	0800867d 	.word	0x0800867d
 80085c4:	0800867d 	.word	0x0800867d
 80085c8:	0800867d 	.word	0x0800867d
 80085cc:	0800867d 	.word	0x0800867d
 80085d0:	0800867d 	.word	0x0800867d
 80085d4:	0800867d 	.word	0x0800867d
 80085d8:	0800867d 	.word	0x0800867d
 80085dc:	0800867d 	.word	0x0800867d
 80085e0:	0800867d 	.word	0x0800867d
 80085e4:	0800867d 	.word	0x0800867d
 80085e8:	0800867d 	.word	0x0800867d
 80085ec:	0800867d 	.word	0x0800867d
 80085f0:	0800867d 	.word	0x0800867d
 80085f4:	0800867d 	.word	0x0800867d
 80085f8:	0800867d 	.word	0x0800867d
 80085fc:	0800866f 	.word	0x0800866f
 8008600:	2b40      	cmp	r3, #64	; 0x40
 8008602:	d037      	beq.n	8008674 <UART_SetConfig+0x6bc>
 8008604:	e03a      	b.n	800867c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008606:	f7fc fe9f 	bl	8005348 <HAL_RCCEx_GetD3PCLK1Freq>
 800860a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800860c:	e03c      	b.n	8008688 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800860e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008612:	4618      	mov	r0, r3
 8008614:	f7fc feae 	bl	8005374 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800861c:	e034      	b.n	8008688 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800861e:	f107 0318 	add.w	r3, r7, #24
 8008622:	4618      	mov	r0, r3
 8008624:	f7fc fffa 	bl	800561c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008628:	69fb      	ldr	r3, [r7, #28]
 800862a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800862c:	e02c      	b.n	8008688 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800862e:	4b09      	ldr	r3, [pc, #36]	; (8008654 <UART_SetConfig+0x69c>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f003 0320 	and.w	r3, r3, #32
 8008636:	2b00      	cmp	r3, #0
 8008638:	d016      	beq.n	8008668 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800863a:	4b06      	ldr	r3, [pc, #24]	; (8008654 <UART_SetConfig+0x69c>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	08db      	lsrs	r3, r3, #3
 8008640:	f003 0303 	and.w	r3, r3, #3
 8008644:	4a07      	ldr	r2, [pc, #28]	; (8008664 <UART_SetConfig+0x6ac>)
 8008646:	fa22 f303 	lsr.w	r3, r2, r3
 800864a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800864c:	e01c      	b.n	8008688 <UART_SetConfig+0x6d0>
 800864e:	bf00      	nop
 8008650:	40011400 	.word	0x40011400
 8008654:	58024400 	.word	0x58024400
 8008658:	40007800 	.word	0x40007800
 800865c:	40007c00 	.word	0x40007c00
 8008660:	58000c00 	.word	0x58000c00
 8008664:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008668:	4b9d      	ldr	r3, [pc, #628]	; (80088e0 <UART_SetConfig+0x928>)
 800866a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800866c:	e00c      	b.n	8008688 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800866e:	4b9d      	ldr	r3, [pc, #628]	; (80088e4 <UART_SetConfig+0x92c>)
 8008670:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008672:	e009      	b.n	8008688 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008674:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008678:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800867a:	e005      	b.n	8008688 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800867c:	2300      	movs	r3, #0
 800867e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008686:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800868a:	2b00      	cmp	r3, #0
 800868c:	f000 81de 	beq.w	8008a4c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008694:	4a94      	ldr	r2, [pc, #592]	; (80088e8 <UART_SetConfig+0x930>)
 8008696:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800869a:	461a      	mov	r2, r3
 800869c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800869e:	fbb3 f3f2 	udiv	r3, r3, r2
 80086a2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	685a      	ldr	r2, [r3, #4]
 80086a8:	4613      	mov	r3, r2
 80086aa:	005b      	lsls	r3, r3, #1
 80086ac:	4413      	add	r3, r2
 80086ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d305      	bcc.n	80086c0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086bc:	429a      	cmp	r2, r3
 80086be:	d903      	bls.n	80086c8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80086c0:	2301      	movs	r3, #1
 80086c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80086c6:	e1c1      	b.n	8008a4c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086ca:	2200      	movs	r2, #0
 80086cc:	60bb      	str	r3, [r7, #8]
 80086ce:	60fa      	str	r2, [r7, #12]
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d4:	4a84      	ldr	r2, [pc, #528]	; (80088e8 <UART_SetConfig+0x930>)
 80086d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086da:	b29b      	uxth	r3, r3
 80086dc:	2200      	movs	r2, #0
 80086de:	603b      	str	r3, [r7, #0]
 80086e0:	607a      	str	r2, [r7, #4]
 80086e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80086ea:	f7f7 ff69 	bl	80005c0 <__aeabi_uldivmod>
 80086ee:	4602      	mov	r2, r0
 80086f0:	460b      	mov	r3, r1
 80086f2:	4610      	mov	r0, r2
 80086f4:	4619      	mov	r1, r3
 80086f6:	f04f 0200 	mov.w	r2, #0
 80086fa:	f04f 0300 	mov.w	r3, #0
 80086fe:	020b      	lsls	r3, r1, #8
 8008700:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008704:	0202      	lsls	r2, r0, #8
 8008706:	6979      	ldr	r1, [r7, #20]
 8008708:	6849      	ldr	r1, [r1, #4]
 800870a:	0849      	lsrs	r1, r1, #1
 800870c:	2000      	movs	r0, #0
 800870e:	460c      	mov	r4, r1
 8008710:	4605      	mov	r5, r0
 8008712:	eb12 0804 	adds.w	r8, r2, r4
 8008716:	eb43 0905 	adc.w	r9, r3, r5
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	2200      	movs	r2, #0
 8008720:	469a      	mov	sl, r3
 8008722:	4693      	mov	fp, r2
 8008724:	4652      	mov	r2, sl
 8008726:	465b      	mov	r3, fp
 8008728:	4640      	mov	r0, r8
 800872a:	4649      	mov	r1, r9
 800872c:	f7f7 ff48 	bl	80005c0 <__aeabi_uldivmod>
 8008730:	4602      	mov	r2, r0
 8008732:	460b      	mov	r3, r1
 8008734:	4613      	mov	r3, r2
 8008736:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800873e:	d308      	bcc.n	8008752 <UART_SetConfig+0x79a>
 8008740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008742:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008746:	d204      	bcs.n	8008752 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800874e:	60da      	str	r2, [r3, #12]
 8008750:	e17c      	b.n	8008a4c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008758:	e178      	b.n	8008a4c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	69db      	ldr	r3, [r3, #28]
 800875e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008762:	f040 80c5 	bne.w	80088f0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008766:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800876a:	2b20      	cmp	r3, #32
 800876c:	dc48      	bgt.n	8008800 <UART_SetConfig+0x848>
 800876e:	2b00      	cmp	r3, #0
 8008770:	db7b      	blt.n	800886a <UART_SetConfig+0x8b2>
 8008772:	2b20      	cmp	r3, #32
 8008774:	d879      	bhi.n	800886a <UART_SetConfig+0x8b2>
 8008776:	a201      	add	r2, pc, #4	; (adr r2, 800877c <UART_SetConfig+0x7c4>)
 8008778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877c:	08008807 	.word	0x08008807
 8008780:	0800880f 	.word	0x0800880f
 8008784:	0800886b 	.word	0x0800886b
 8008788:	0800886b 	.word	0x0800886b
 800878c:	08008817 	.word	0x08008817
 8008790:	0800886b 	.word	0x0800886b
 8008794:	0800886b 	.word	0x0800886b
 8008798:	0800886b 	.word	0x0800886b
 800879c:	08008827 	.word	0x08008827
 80087a0:	0800886b 	.word	0x0800886b
 80087a4:	0800886b 	.word	0x0800886b
 80087a8:	0800886b 	.word	0x0800886b
 80087ac:	0800886b 	.word	0x0800886b
 80087b0:	0800886b 	.word	0x0800886b
 80087b4:	0800886b 	.word	0x0800886b
 80087b8:	0800886b 	.word	0x0800886b
 80087bc:	08008837 	.word	0x08008837
 80087c0:	0800886b 	.word	0x0800886b
 80087c4:	0800886b 	.word	0x0800886b
 80087c8:	0800886b 	.word	0x0800886b
 80087cc:	0800886b 	.word	0x0800886b
 80087d0:	0800886b 	.word	0x0800886b
 80087d4:	0800886b 	.word	0x0800886b
 80087d8:	0800886b 	.word	0x0800886b
 80087dc:	0800886b 	.word	0x0800886b
 80087e0:	0800886b 	.word	0x0800886b
 80087e4:	0800886b 	.word	0x0800886b
 80087e8:	0800886b 	.word	0x0800886b
 80087ec:	0800886b 	.word	0x0800886b
 80087f0:	0800886b 	.word	0x0800886b
 80087f4:	0800886b 	.word	0x0800886b
 80087f8:	0800886b 	.word	0x0800886b
 80087fc:	0800885d 	.word	0x0800885d
 8008800:	2b40      	cmp	r3, #64	; 0x40
 8008802:	d02e      	beq.n	8008862 <UART_SetConfig+0x8aa>
 8008804:	e031      	b.n	800886a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008806:	f7fa fd67 	bl	80032d8 <HAL_RCC_GetPCLK1Freq>
 800880a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800880c:	e033      	b.n	8008876 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800880e:	f7fa fd79 	bl	8003304 <HAL_RCC_GetPCLK2Freq>
 8008812:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008814:	e02f      	b.n	8008876 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800881a:	4618      	mov	r0, r3
 800881c:	f7fc fdaa 	bl	8005374 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008822:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008824:	e027      	b.n	8008876 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008826:	f107 0318 	add.w	r3, r7, #24
 800882a:	4618      	mov	r0, r3
 800882c:	f7fc fef6 	bl	800561c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008834:	e01f      	b.n	8008876 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008836:	4b2d      	ldr	r3, [pc, #180]	; (80088ec <UART_SetConfig+0x934>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 0320 	and.w	r3, r3, #32
 800883e:	2b00      	cmp	r3, #0
 8008840:	d009      	beq.n	8008856 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008842:	4b2a      	ldr	r3, [pc, #168]	; (80088ec <UART_SetConfig+0x934>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	08db      	lsrs	r3, r3, #3
 8008848:	f003 0303 	and.w	r3, r3, #3
 800884c:	4a24      	ldr	r2, [pc, #144]	; (80088e0 <UART_SetConfig+0x928>)
 800884e:	fa22 f303 	lsr.w	r3, r2, r3
 8008852:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008854:	e00f      	b.n	8008876 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008856:	4b22      	ldr	r3, [pc, #136]	; (80088e0 <UART_SetConfig+0x928>)
 8008858:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800885a:	e00c      	b.n	8008876 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800885c:	4b21      	ldr	r3, [pc, #132]	; (80088e4 <UART_SetConfig+0x92c>)
 800885e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008860:	e009      	b.n	8008876 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008862:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008866:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008868:	e005      	b.n	8008876 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800886a:	2300      	movs	r3, #0
 800886c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008874:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008878:	2b00      	cmp	r3, #0
 800887a:	f000 80e7 	beq.w	8008a4c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008882:	4a19      	ldr	r2, [pc, #100]	; (80088e8 <UART_SetConfig+0x930>)
 8008884:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008888:	461a      	mov	r2, r3
 800888a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800888c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008890:	005a      	lsls	r2, r3, #1
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	085b      	lsrs	r3, r3, #1
 8008898:	441a      	add	r2, r3
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	fbb2 f3f3 	udiv	r3, r2, r3
 80088a2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a6:	2b0f      	cmp	r3, #15
 80088a8:	d916      	bls.n	80088d8 <UART_SetConfig+0x920>
 80088aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088b0:	d212      	bcs.n	80088d8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80088b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	f023 030f 	bic.w	r3, r3, #15
 80088ba:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80088bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088be:	085b      	lsrs	r3, r3, #1
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	f003 0307 	and.w	r3, r3, #7
 80088c6:	b29a      	uxth	r2, r3
 80088c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80088ca:	4313      	orrs	r3, r2
 80088cc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80088d4:	60da      	str	r2, [r3, #12]
 80088d6:	e0b9      	b.n	8008a4c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80088de:	e0b5      	b.n	8008a4c <UART_SetConfig+0xa94>
 80088e0:	03d09000 	.word	0x03d09000
 80088e4:	003d0900 	.word	0x003d0900
 80088e8:	08017f8c 	.word	0x08017f8c
 80088ec:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80088f0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80088f4:	2b20      	cmp	r3, #32
 80088f6:	dc49      	bgt.n	800898c <UART_SetConfig+0x9d4>
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	db7c      	blt.n	80089f6 <UART_SetConfig+0xa3e>
 80088fc:	2b20      	cmp	r3, #32
 80088fe:	d87a      	bhi.n	80089f6 <UART_SetConfig+0xa3e>
 8008900:	a201      	add	r2, pc, #4	; (adr r2, 8008908 <UART_SetConfig+0x950>)
 8008902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008906:	bf00      	nop
 8008908:	08008993 	.word	0x08008993
 800890c:	0800899b 	.word	0x0800899b
 8008910:	080089f7 	.word	0x080089f7
 8008914:	080089f7 	.word	0x080089f7
 8008918:	080089a3 	.word	0x080089a3
 800891c:	080089f7 	.word	0x080089f7
 8008920:	080089f7 	.word	0x080089f7
 8008924:	080089f7 	.word	0x080089f7
 8008928:	080089b3 	.word	0x080089b3
 800892c:	080089f7 	.word	0x080089f7
 8008930:	080089f7 	.word	0x080089f7
 8008934:	080089f7 	.word	0x080089f7
 8008938:	080089f7 	.word	0x080089f7
 800893c:	080089f7 	.word	0x080089f7
 8008940:	080089f7 	.word	0x080089f7
 8008944:	080089f7 	.word	0x080089f7
 8008948:	080089c3 	.word	0x080089c3
 800894c:	080089f7 	.word	0x080089f7
 8008950:	080089f7 	.word	0x080089f7
 8008954:	080089f7 	.word	0x080089f7
 8008958:	080089f7 	.word	0x080089f7
 800895c:	080089f7 	.word	0x080089f7
 8008960:	080089f7 	.word	0x080089f7
 8008964:	080089f7 	.word	0x080089f7
 8008968:	080089f7 	.word	0x080089f7
 800896c:	080089f7 	.word	0x080089f7
 8008970:	080089f7 	.word	0x080089f7
 8008974:	080089f7 	.word	0x080089f7
 8008978:	080089f7 	.word	0x080089f7
 800897c:	080089f7 	.word	0x080089f7
 8008980:	080089f7 	.word	0x080089f7
 8008984:	080089f7 	.word	0x080089f7
 8008988:	080089e9 	.word	0x080089e9
 800898c:	2b40      	cmp	r3, #64	; 0x40
 800898e:	d02e      	beq.n	80089ee <UART_SetConfig+0xa36>
 8008990:	e031      	b.n	80089f6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008992:	f7fa fca1 	bl	80032d8 <HAL_RCC_GetPCLK1Freq>
 8008996:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008998:	e033      	b.n	8008a02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800899a:	f7fa fcb3 	bl	8003304 <HAL_RCC_GetPCLK2Freq>
 800899e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80089a0:	e02f      	b.n	8008a02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fc fce4 	bl	8005374 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80089ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089b0:	e027      	b.n	8008a02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80089b2:	f107 0318 	add.w	r3, r7, #24
 80089b6:	4618      	mov	r0, r3
 80089b8:	f7fc fe30 	bl	800561c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089c0:	e01f      	b.n	8008a02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089c2:	4b2d      	ldr	r3, [pc, #180]	; (8008a78 <UART_SetConfig+0xac0>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f003 0320 	and.w	r3, r3, #32
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d009      	beq.n	80089e2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80089ce:	4b2a      	ldr	r3, [pc, #168]	; (8008a78 <UART_SetConfig+0xac0>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	08db      	lsrs	r3, r3, #3
 80089d4:	f003 0303 	and.w	r3, r3, #3
 80089d8:	4a28      	ldr	r2, [pc, #160]	; (8008a7c <UART_SetConfig+0xac4>)
 80089da:	fa22 f303 	lsr.w	r3, r2, r3
 80089de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80089e0:	e00f      	b.n	8008a02 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80089e2:	4b26      	ldr	r3, [pc, #152]	; (8008a7c <UART_SetConfig+0xac4>)
 80089e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089e6:	e00c      	b.n	8008a02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80089e8:	4b25      	ldr	r3, [pc, #148]	; (8008a80 <UART_SetConfig+0xac8>)
 80089ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089ec:	e009      	b.n	8008a02 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80089f4:	e005      	b.n	8008a02 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80089f6:	2300      	movs	r3, #0
 80089f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008a00:	bf00      	nop
    }

    if (pclk != 0U)
 8008a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d021      	beq.n	8008a4c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0c:	4a1d      	ldr	r2, [pc, #116]	; (8008a84 <UART_SetConfig+0xacc>)
 8008a0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a12:	461a      	mov	r2, r3
 8008a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a16:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	085b      	lsrs	r3, r3, #1
 8008a20:	441a      	add	r2, r3
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a2a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a2e:	2b0f      	cmp	r3, #15
 8008a30:	d909      	bls.n	8008a46 <UART_SetConfig+0xa8e>
 8008a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a38:	d205      	bcs.n	8008a46 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a3c:	b29a      	uxth	r2, r3
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	60da      	str	r2, [r3, #12]
 8008a44:	e002      	b.n	8008a4c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	2201      	movs	r2, #1
 8008a58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	2200      	movs	r2, #0
 8008a66:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008a68:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3748      	adds	r7, #72	; 0x48
 8008a70:	46bd      	mov	sp, r7
 8008a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a76:	bf00      	nop
 8008a78:	58024400 	.word	0x58024400
 8008a7c:	03d09000 	.word	0x03d09000
 8008a80:	003d0900 	.word	0x003d0900
 8008a84:	08017f8c 	.word	0x08017f8c

08008a88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a94:	f003 0301 	and.w	r3, r3, #1
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00a      	beq.n	8008ab2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	430a      	orrs	r2, r1
 8008ab0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab6:	f003 0302 	and.w	r3, r3, #2
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d00a      	beq.n	8008ad4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	430a      	orrs	r2, r1
 8008ad2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ad8:	f003 0304 	and.w	r3, r3, #4
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00a      	beq.n	8008af6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	430a      	orrs	r2, r1
 8008af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008afa:	f003 0308 	and.w	r3, r3, #8
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00a      	beq.n	8008b18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	430a      	orrs	r2, r1
 8008b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b1c:	f003 0310 	and.w	r3, r3, #16
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d00a      	beq.n	8008b3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	430a      	orrs	r2, r1
 8008b38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3e:	f003 0320 	and.w	r3, r3, #32
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00a      	beq.n	8008b5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	430a      	orrs	r2, r1
 8008b5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d01a      	beq.n	8008b9e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b86:	d10a      	bne.n	8008b9e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00a      	beq.n	8008bc0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	430a      	orrs	r2, r1
 8008bbe:	605a      	str	r2, [r3, #4]
  }
}
 8008bc0:	bf00      	nop
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b098      	sub	sp, #96	; 0x60
 8008bd0:	af02      	add	r7, sp, #8
 8008bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008bdc:	f7f8 fd38 	bl	8001650 <HAL_GetTick>
 8008be0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 0308 	and.w	r3, r3, #8
 8008bec:	2b08      	cmp	r3, #8
 8008bee:	d12f      	bne.n	8008c50 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 f88e 	bl	8008d20 <UART_WaitOnFlagUntilTimeout>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d022      	beq.n	8008c50 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c12:	e853 3f00 	ldrex	r3, [r3]
 8008c16:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c1e:	653b      	str	r3, [r7, #80]	; 0x50
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	461a      	mov	r2, r3
 8008c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c28:	647b      	str	r3, [r7, #68]	; 0x44
 8008c2a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c30:	e841 2300 	strex	r3, r2, [r1]
 8008c34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1e6      	bne.n	8008c0a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2220      	movs	r2, #32
 8008c40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c4c:	2303      	movs	r3, #3
 8008c4e:	e063      	b.n	8008d18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f003 0304 	and.w	r3, r3, #4
 8008c5a:	2b04      	cmp	r3, #4
 8008c5c:	d149      	bne.n	8008cf2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c5e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008c62:	9300      	str	r3, [sp, #0]
 8008c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c66:	2200      	movs	r2, #0
 8008c68:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 f857 	bl	8008d20 <UART_WaitOnFlagUntilTimeout>
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d03c      	beq.n	8008cf2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c80:	e853 3f00 	ldrex	r3, [r3]
 8008c84:	623b      	str	r3, [r7, #32]
   return(result);
 8008c86:	6a3b      	ldr	r3, [r7, #32]
 8008c88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	461a      	mov	r2, r3
 8008c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c96:	633b      	str	r3, [r7, #48]	; 0x30
 8008c98:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c9e:	e841 2300 	strex	r3, r2, [r1]
 8008ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d1e6      	bne.n	8008c78 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	3308      	adds	r3, #8
 8008cb0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	e853 3f00 	ldrex	r3, [r3]
 8008cb8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	f023 0301 	bic.w	r3, r3, #1
 8008cc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	3308      	adds	r3, #8
 8008cc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cca:	61fa      	str	r2, [r7, #28]
 8008ccc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cce:	69b9      	ldr	r1, [r7, #24]
 8008cd0:	69fa      	ldr	r2, [r7, #28]
 8008cd2:	e841 2300 	strex	r3, r2, [r1]
 8008cd6:	617b      	str	r3, [r7, #20]
   return(result);
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d1e5      	bne.n	8008caa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2220      	movs	r2, #32
 8008ce2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cee:	2303      	movs	r3, #3
 8008cf0:	e012      	b.n	8008d18 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2220      	movs	r2, #32
 8008cf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2220      	movs	r2, #32
 8008cfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3758      	adds	r7, #88	; 0x58
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	60f8      	str	r0, [r7, #12]
 8008d28:	60b9      	str	r1, [r7, #8]
 8008d2a:	603b      	str	r3, [r7, #0]
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d30:	e049      	b.n	8008dc6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d38:	d045      	beq.n	8008dc6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d3a:	f7f8 fc89 	bl	8001650 <HAL_GetTick>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	1ad3      	subs	r3, r2, r3
 8008d44:	69ba      	ldr	r2, [r7, #24]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d302      	bcc.n	8008d50 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d101      	bne.n	8008d54 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008d50:	2303      	movs	r3, #3
 8008d52:	e048      	b.n	8008de6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f003 0304 	and.w	r3, r3, #4
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d031      	beq.n	8008dc6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	f003 0308 	and.w	r3, r3, #8
 8008d6c:	2b08      	cmp	r3, #8
 8008d6e:	d110      	bne.n	8008d92 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2208      	movs	r2, #8
 8008d76:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f000 f839 	bl	8008df0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2208      	movs	r2, #8
 8008d82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e029      	b.n	8008de6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	69db      	ldr	r3, [r3, #28]
 8008d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008da0:	d111      	bne.n	8008dc6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008daa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f000 f81f 	bl	8008df0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2220      	movs	r2, #32
 8008db6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	e00f      	b.n	8008de6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	69da      	ldr	r2, [r3, #28]
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	4013      	ands	r3, r2
 8008dd0:	68ba      	ldr	r2, [r7, #8]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	bf0c      	ite	eq
 8008dd6:	2301      	moveq	r3, #1
 8008dd8:	2300      	movne	r3, #0
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	461a      	mov	r2, r3
 8008dde:	79fb      	ldrb	r3, [r7, #7]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d0a6      	beq.n	8008d32 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
	...

08008df0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b095      	sub	sp, #84	; 0x54
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e00:	e853 3f00 	ldrex	r3, [r3]
 8008e04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	461a      	mov	r2, r3
 8008e14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e16:	643b      	str	r3, [r7, #64]	; 0x40
 8008e18:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e1e:	e841 2300 	strex	r3, r2, [r1]
 8008e22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d1e6      	bne.n	8008df8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	3308      	adds	r3, #8
 8008e30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e32:	6a3b      	ldr	r3, [r7, #32]
 8008e34:	e853 3f00 	ldrex	r3, [r3]
 8008e38:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e3a:	69fa      	ldr	r2, [r7, #28]
 8008e3c:	4b1e      	ldr	r3, [pc, #120]	; (8008eb8 <UART_EndRxTransfer+0xc8>)
 8008e3e:	4013      	ands	r3, r2
 8008e40:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	3308      	adds	r3, #8
 8008e48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e52:	e841 2300 	strex	r3, r2, [r1]
 8008e56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d1e5      	bne.n	8008e2a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	d118      	bne.n	8008e98 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	e853 3f00 	ldrex	r3, [r3]
 8008e72:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	f023 0310 	bic.w	r3, r3, #16
 8008e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	461a      	mov	r2, r3
 8008e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e84:	61bb      	str	r3, [r7, #24]
 8008e86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e88:	6979      	ldr	r1, [r7, #20]
 8008e8a:	69ba      	ldr	r2, [r7, #24]
 8008e8c:	e841 2300 	strex	r3, r2, [r1]
 8008e90:	613b      	str	r3, [r7, #16]
   return(result);
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d1e6      	bne.n	8008e66 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2220      	movs	r2, #32
 8008e9c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008eac:	bf00      	nop
 8008eae:	3754      	adds	r7, #84	; 0x54
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr
 8008eb8:	effffffe 	.word	0xeffffffe

08008ebc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b085      	sub	sp, #20
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d101      	bne.n	8008ed2 <HAL_UARTEx_DisableFifoMode+0x16>
 8008ece:	2302      	movs	r3, #2
 8008ed0:	e027      	b.n	8008f22 <HAL_UARTEx_DisableFifoMode+0x66>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2224      	movs	r2, #36	; 0x24
 8008ede:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f022 0201 	bic.w	r2, r2, #1
 8008ef8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008f00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	68fa      	ldr	r2, [r7, #12]
 8008f0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2220      	movs	r2, #32
 8008f14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3714      	adds	r7, #20
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr

08008f2e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f2e:	b580      	push	{r7, lr}
 8008f30:	b084      	sub	sp, #16
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
 8008f36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f3e:	2b01      	cmp	r3, #1
 8008f40:	d101      	bne.n	8008f46 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008f42:	2302      	movs	r3, #2
 8008f44:	e02d      	b.n	8008fa2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2201      	movs	r2, #1
 8008f4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2224      	movs	r2, #36	; 0x24
 8008f52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f022 0201 	bic.w	r2, r2, #1
 8008f6c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	683a      	ldr	r2, [r7, #0]
 8008f7e:	430a      	orrs	r2, r1
 8008f80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 f850 	bl	8009028 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2220      	movs	r2, #32
 8008f94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3710      	adds	r7, #16
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b084      	sub	sp, #16
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
 8008fb2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d101      	bne.n	8008fc2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008fbe:	2302      	movs	r3, #2
 8008fc0:	e02d      	b.n	800901e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2224      	movs	r2, #36	; 0x24
 8008fce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f022 0201 	bic.w	r2, r2, #1
 8008fe8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	683a      	ldr	r2, [r7, #0]
 8008ffa:	430a      	orrs	r2, r1
 8008ffc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f812 	bl	8009028 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2220      	movs	r2, #32
 8009010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2200      	movs	r2, #0
 8009018:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
	...

08009028 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009034:	2b00      	cmp	r3, #0
 8009036:	d108      	bne.n	800904a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2201      	movs	r2, #1
 800903c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009048:	e031      	b.n	80090ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800904a:	2310      	movs	r3, #16
 800904c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800904e:	2310      	movs	r3, #16
 8009050:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	0e5b      	lsrs	r3, r3, #25
 800905a:	b2db      	uxtb	r3, r3
 800905c:	f003 0307 	and.w	r3, r3, #7
 8009060:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	0f5b      	lsrs	r3, r3, #29
 800906a:	b2db      	uxtb	r3, r3
 800906c:	f003 0307 	and.w	r3, r3, #7
 8009070:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009072:	7bbb      	ldrb	r3, [r7, #14]
 8009074:	7b3a      	ldrb	r2, [r7, #12]
 8009076:	4911      	ldr	r1, [pc, #68]	; (80090bc <UARTEx_SetNbDataToProcess+0x94>)
 8009078:	5c8a      	ldrb	r2, [r1, r2]
 800907a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800907e:	7b3a      	ldrb	r2, [r7, #12]
 8009080:	490f      	ldr	r1, [pc, #60]	; (80090c0 <UARTEx_SetNbDataToProcess+0x98>)
 8009082:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009084:	fb93 f3f2 	sdiv	r3, r3, r2
 8009088:	b29a      	uxth	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009090:	7bfb      	ldrb	r3, [r7, #15]
 8009092:	7b7a      	ldrb	r2, [r7, #13]
 8009094:	4909      	ldr	r1, [pc, #36]	; (80090bc <UARTEx_SetNbDataToProcess+0x94>)
 8009096:	5c8a      	ldrb	r2, [r1, r2]
 8009098:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800909c:	7b7a      	ldrb	r2, [r7, #13]
 800909e:	4908      	ldr	r1, [pc, #32]	; (80090c0 <UARTEx_SetNbDataToProcess+0x98>)
 80090a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80090a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80090ae:	bf00      	nop
 80090b0:	3714      	adds	r7, #20
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop
 80090bc:	08017fa4 	.word	0x08017fa4
 80090c0:	08017fac 	.word	0x08017fac

080090c4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80090c4:	b084      	sub	sp, #16
 80090c6:	b480      	push	{r7}
 80090c8:	b085      	sub	sp, #20
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	f107 001c 	add.w	r0, r7, #28
 80090d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80090d6:	2300      	movs	r3, #0
 80090d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80090da:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80090dc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80090de:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80090e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 80090e2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80090e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 80090e6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80090e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 80090ea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	685a      	ldr	r2, [r3, #4]
 80090f6:	4b07      	ldr	r3, [pc, #28]	; (8009114 <SDMMC_Init+0x50>)
 80090f8:	4013      	ands	r3, r2
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	431a      	orrs	r2, r3
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	b004      	add	sp, #16
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	ffc02c00 	.word	0xffc02c00

08009118 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009126:	4618      	mov	r0, r3
 8009128:	370c      	adds	r7, #12
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr

08009132 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8009132:	b480      	push	{r7}
 8009134:	b083      	sub	sp, #12
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
 800913a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	681a      	ldr	r2, [r3, #0]
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f043 0203 	orr.w	r2, r3, #3
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	370c      	adds	r7, #12
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr

08009176 <SDMMC_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_OFF(SDMMC_TypeDef *SDMMCx)
{
 8009176:	b480      	push	{r7}
 8009178:	b083      	sub	sp, #12
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  /* Set power state to OFF */
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f023 0203 	bic.w	r2, r3, #3
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800918a:	2300      	movs	r3, #0
}
 800918c:	4618      	mov	r0, r3
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f003 0303 	and.w	r3, r3, #3
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b085      	sub	sp, #20
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80091be:	2300      	movs	r3, #0
 80091c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80091d2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80091d8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80091de:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	4313      	orrs	r3, r2
 80091e4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	68da      	ldr	r2, [r3, #12]
 80091ea:	4b06      	ldr	r3, [pc, #24]	; (8009204 <SDMMC_SendCommand+0x50>)
 80091ec:	4013      	ands	r3, r2
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	431a      	orrs	r2, r3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80091f6:	2300      	movs	r3, #0
}
 80091f8:	4618      	mov	r0, r3
 80091fa:	3714      	adds	r7, #20
 80091fc:	46bd      	mov	sp, r7
 80091fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009202:	4770      	bx	lr
 8009204:	fffee0c0 	.word	0xfffee0c0

08009208 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	b2db      	uxtb	r3, r3
}
 8009216:	4618      	mov	r0, r3
 8009218:	370c      	adds	r7, #12
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr

08009222 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009222:	b480      	push	{r7}
 8009224:	b085      	sub	sp, #20
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
 800922a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	3314      	adds	r3, #20
 8009230:	461a      	mov	r2, r3
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	4413      	add	r3, r2
 8009236:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
}
 800923c:	4618      	mov	r0, r3
 800923e:	3714      	adds	r7, #20
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8009248:	b480      	push	{r7}
 800924a:	b085      	sub	sp, #20
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009252:	2300      	movs	r3, #0
 8009254:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	685a      	ldr	r2, [r3, #4]
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800926e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8009274:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800927a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800927c:	68fa      	ldr	r2, [r7, #12]
 800927e:	4313      	orrs	r3, r2
 8009280:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009286:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	431a      	orrs	r2, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009292:	2300      	movs	r3, #0

}
 8009294:	4618      	mov	r0, r3
 8009296:	3714      	adds	r7, #20
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b088      	sub	sp, #32
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80092ae:	2310      	movs	r3, #16
 80092b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092b8:	2300      	movs	r3, #0
 80092ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80092bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80092c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80092c2:	f107 0308 	add.w	r3, r7, #8
 80092c6:	4619      	mov	r1, r3
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f7ff ff73 	bl	80091b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80092ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80092d2:	2110      	movs	r1, #16
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 fa5f 	bl	8009798 <SDMMC_GetCmdResp1>
 80092da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092dc:	69fb      	ldr	r3, [r7, #28]
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3720      	adds	r7, #32
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b088      	sub	sp, #32
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80092f4:	2311      	movs	r3, #17
 80092f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80092f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80092fe:	2300      	movs	r3, #0
 8009300:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009306:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009308:	f107 0308 	add.w	r3, r7, #8
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f7ff ff50 	bl	80091b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009314:	f241 3288 	movw	r2, #5000	; 0x1388
 8009318:	2111      	movs	r1, #17
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fa3c 	bl	8009798 <SDMMC_GetCmdResp1>
 8009320:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009322:	69fb      	ldr	r3, [r7, #28]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3720      	adds	r7, #32
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b088      	sub	sp, #32
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009336:	683b      	ldr	r3, [r7, #0]
 8009338:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800933a:	2312      	movs	r3, #18
 800933c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800933e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009342:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009344:	2300      	movs	r3, #0
 8009346:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009348:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800934c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800934e:	f107 0308 	add.w	r3, r7, #8
 8009352:	4619      	mov	r1, r3
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f7ff ff2d 	bl	80091b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800935a:	f241 3288 	movw	r2, #5000	; 0x1388
 800935e:	2112      	movs	r1, #18
 8009360:	6878      	ldr	r0, [r7, #4]
 8009362:	f000 fa19 	bl	8009798 <SDMMC_GetCmdResp1>
 8009366:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009368:	69fb      	ldr	r3, [r7, #28]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3720      	adds	r7, #32
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}

08009372 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009372:	b580      	push	{r7, lr}
 8009374:	b088      	sub	sp, #32
 8009376:	af00      	add	r7, sp, #0
 8009378:	6078      	str	r0, [r7, #4]
 800937a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009380:	2318      	movs	r3, #24
 8009382:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009388:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800938a:	2300      	movs	r3, #0
 800938c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800938e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009392:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009394:	f107 0308 	add.w	r3, r7, #8
 8009398:	4619      	mov	r1, r3
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f7ff ff0a 	bl	80091b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80093a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80093a4:	2118      	movs	r1, #24
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 f9f6 	bl	8009798 <SDMMC_GetCmdResp1>
 80093ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093ae:	69fb      	ldr	r3, [r7, #28]
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3720      	adds	r7, #32
 80093b4:	46bd      	mov	sp, r7
 80093b6:	bd80      	pop	{r7, pc}

080093b8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b088      	sub	sp, #32
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80093c6:	2319      	movs	r3, #25
 80093c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80093ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80093d0:	2300      	movs	r3, #0
 80093d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80093d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80093da:	f107 0308 	add.w	r3, r7, #8
 80093de:	4619      	mov	r1, r3
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f7ff fee7 	bl	80091b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80093e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80093ea:	2119      	movs	r1, #25
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 f9d3 	bl	8009798 <SDMMC_GetCmdResp1>
 80093f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093f4:	69fb      	ldr	r3, [r7, #28]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3720      	adds	r7, #32
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
	...

08009400 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b088      	sub	sp, #32
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009408:	2300      	movs	r3, #0
 800940a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800940c:	230c      	movs	r3, #12
 800940e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009410:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009414:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009416:	2300      	movs	r3, #0
 8009418:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800941a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800941e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	68db      	ldr	r3, [r3, #12]
 8009430:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009438:	f107 0308 	add.w	r3, r7, #8
 800943c:	4619      	mov	r1, r3
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f7ff feb8 	bl	80091b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009444:	4a0b      	ldr	r2, [pc, #44]	; (8009474 <SDMMC_CmdStopTransfer+0x74>)
 8009446:	210c      	movs	r1, #12
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 f9a5 	bl	8009798 <SDMMC_GetCmdResp1>
 800944e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009462:	d101      	bne.n	8009468 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8009464:	2300      	movs	r3, #0
 8009466:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8009468:	69fb      	ldr	r3, [r7, #28]
}
 800946a:	4618      	mov	r0, r3
 800946c:	3720      	adds	r7, #32
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	05f5e100 	.word	0x05f5e100

08009478 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b088      	sub	sp, #32
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009486:	2307      	movs	r3, #7
 8009488:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800948a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800948e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009490:	2300      	movs	r3, #0
 8009492:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009498:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800949a:	f107 0308 	add.w	r3, r7, #8
 800949e:	4619      	mov	r1, r3
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f7ff fe87 	bl	80091b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80094a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80094aa:	2107      	movs	r1, #7
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 f973 	bl	8009798 <SDMMC_GetCmdResp1>
 80094b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094b4:	69fb      	ldr	r3, [r7, #28]
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3720      	adds	r7, #32
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd80      	pop	{r7, pc}

080094be <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80094be:	b580      	push	{r7, lr}
 80094c0:	b088      	sub	sp, #32
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80094c6:	2300      	movs	r3, #0
 80094c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80094ca:	2300      	movs	r3, #0
 80094cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80094ce:	2300      	movs	r3, #0
 80094d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094d2:	2300      	movs	r3, #0
 80094d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094dc:	f107 0308 	add.w	r3, r7, #8
 80094e0:	4619      	mov	r1, r3
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f7ff fe66 	bl	80091b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 fb97 	bl	8009c1c <SDMMC_GetCmdError>
 80094ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094f0:	69fb      	ldr	r3, [r7, #28]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3720      	adds	r7, #32
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b088      	sub	sp, #32
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009502:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009506:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009508:	2308      	movs	r3, #8
 800950a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800950c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009510:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009512:	2300      	movs	r3, #0
 8009514:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009516:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800951a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800951c:	f107 0308 	add.w	r3, r7, #8
 8009520:	4619      	mov	r1, r3
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f7ff fe46 	bl	80091b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fb29 	bl	8009b80 <SDMMC_GetCmdResp7>
 800952e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009530:	69fb      	ldr	r3, [r7, #28]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3720      	adds	r7, #32
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}

0800953a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800953a:	b580      	push	{r7, lr}
 800953c:	b088      	sub	sp, #32
 800953e:	af00      	add	r7, sp, #0
 8009540:	6078      	str	r0, [r7, #4]
 8009542:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009548:	2337      	movs	r3, #55	; 0x37
 800954a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800954c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009550:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009552:	2300      	movs	r3, #0
 8009554:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800955a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800955c:	f107 0308 	add.w	r3, r7, #8
 8009560:	4619      	mov	r1, r3
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f7ff fe26 	bl	80091b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009568:	f241 3288 	movw	r2, #5000	; 0x1388
 800956c:	2137      	movs	r1, #55	; 0x37
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 f912 	bl	8009798 <SDMMC_GetCmdResp1>
 8009574:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009576:	69fb      	ldr	r3, [r7, #28]
}
 8009578:	4618      	mov	r0, r3
 800957a:	3720      	adds	r7, #32
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b088      	sub	sp, #32
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800958e:	2329      	movs	r3, #41	; 0x29
 8009590:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009592:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009596:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009598:	2300      	movs	r3, #0
 800959a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800959c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095a2:	f107 0308 	add.w	r3, r7, #8
 80095a6:	4619      	mov	r1, r3
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f7ff fe03 	bl	80091b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 fa2e 	bl	8009a10 <SDMMC_GetCmdResp3>
 80095b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095b6:	69fb      	ldr	r3, [r7, #28]
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	3720      	adds	r7, #32
 80095bc:	46bd      	mov	sp, r7
 80095be:	bd80      	pop	{r7, pc}

080095c0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b088      	sub	sp, #32
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80095ce:	2306      	movs	r3, #6
 80095d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80095d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095d8:	2300      	movs	r3, #0
 80095da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095e0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095e2:	f107 0308 	add.w	r3, r7, #8
 80095e6:	4619      	mov	r1, r3
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f7ff fde3 	bl	80091b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 80095ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80095f2:	2106      	movs	r1, #6
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f000 f8cf 	bl	8009798 <SDMMC_GetCmdResp1>
 80095fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095fc:	69fb      	ldr	r3, [r7, #28]
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3720      	adds	r7, #32
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009606:	b580      	push	{r7, lr}
 8009608:	b088      	sub	sp, #32
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800960e:	2300      	movs	r3, #0
 8009610:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009612:	2333      	movs	r3, #51	; 0x33
 8009614:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800961a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800961c:	2300      	movs	r3, #0
 800961e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009620:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009624:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009626:	f107 0308 	add.w	r3, r7, #8
 800962a:	4619      	mov	r1, r3
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f7ff fdc1 	bl	80091b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009632:	f241 3288 	movw	r2, #5000	; 0x1388
 8009636:	2133      	movs	r1, #51	; 0x33
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f000 f8ad 	bl	8009798 <SDMMC_GetCmdResp1>
 800963e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009640:	69fb      	ldr	r3, [r7, #28]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3720      	adds	r7, #32
 8009646:	46bd      	mov	sp, r7
 8009648:	bd80      	pop	{r7, pc}

0800964a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b088      	sub	sp, #32
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009652:	2300      	movs	r3, #0
 8009654:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009656:	2302      	movs	r3, #2
 8009658:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800965a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800965e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009660:	2300      	movs	r3, #0
 8009662:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009664:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009668:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800966a:	f107 0308 	add.w	r3, r7, #8
 800966e:	4619      	mov	r1, r3
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f7ff fd9f 	bl	80091b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009676:	6878      	ldr	r0, [r7, #4]
 8009678:	f000 f980 	bl	800997c <SDMMC_GetCmdResp2>
 800967c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800967e:	69fb      	ldr	r3, [r7, #28]
}
 8009680:	4618      	mov	r0, r3
 8009682:	3720      	adds	r7, #32
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b088      	sub	sp, #32
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009696:	2309      	movs	r3, #9
 8009698:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800969a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800969e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096a0:	2300      	movs	r3, #0
 80096a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096a8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096aa:	f107 0308 	add.w	r3, r7, #8
 80096ae:	4619      	mov	r1, r3
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f7ff fd7f 	bl	80091b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 f960 	bl	800997c <SDMMC_GetCmdResp2>
 80096bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096be:	69fb      	ldr	r3, [r7, #28]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3720      	adds	r7, #32
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b088      	sub	sp, #32
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80096d2:	2300      	movs	r3, #0
 80096d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80096d6:	2303      	movs	r3, #3
 80096d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80096da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096e0:	2300      	movs	r3, #0
 80096e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096ea:	f107 0308 	add.w	r3, r7, #8
 80096ee:	4619      	mov	r1, r3
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f7ff fd5f 	bl	80091b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80096f6:	683a      	ldr	r2, [r7, #0]
 80096f8:	2103      	movs	r1, #3
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 f9c8 	bl	8009a90 <SDMMC_GetCmdResp6>
 8009700:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009702:	69fb      	ldr	r3, [r7, #28]
}
 8009704:	4618      	mov	r0, r3
 8009706:	3720      	adds	r7, #32
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b088      	sub	sp, #32
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800971a:	230d      	movs	r3, #13
 800971c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800971e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009722:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009724:	2300      	movs	r3, #0
 8009726:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009728:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800972c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800972e:	f107 0308 	add.w	r3, r7, #8
 8009732:	4619      	mov	r1, r3
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7ff fd3d 	bl	80091b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800973a:	f241 3288 	movw	r2, #5000	; 0x1388
 800973e:	210d      	movs	r1, #13
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 f829 	bl	8009798 <SDMMC_GetCmdResp1>
 8009746:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009748:	69fb      	ldr	r3, [r7, #28]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3720      	adds	r7, #32
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b088      	sub	sp, #32
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800975a:	2300      	movs	r3, #0
 800975c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800975e:	230d      	movs	r3, #13
 8009760:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009766:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009768:	2300      	movs	r3, #0
 800976a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800976c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009770:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009772:	f107 0308 	add.w	r3, r7, #8
 8009776:	4619      	mov	r1, r3
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f7ff fd1b 	bl	80091b4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800977e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009782:	210d      	movs	r1, #13
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 f807 	bl	8009798 <SDMMC_GetCmdResp1>
 800978a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800978c:	69fb      	ldr	r3, [r7, #28]
}
 800978e:	4618      	mov	r0, r3
 8009790:	3720      	adds	r7, #32
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
	...

08009798 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b088      	sub	sp, #32
 800979c:	af00      	add	r7, sp, #0
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	460b      	mov	r3, r1
 80097a2:	607a      	str	r2, [r7, #4]
 80097a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80097a6:	4b70      	ldr	r3, [pc, #448]	; (8009968 <SDMMC_GetCmdResp1+0x1d0>)
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	4a70      	ldr	r2, [pc, #448]	; (800996c <SDMMC_GetCmdResp1+0x1d4>)
 80097ac:	fba2 2303 	umull	r2, r3, r2, r3
 80097b0:	0a5a      	lsrs	r2, r3, #9
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	fb02 f303 	mul.w	r3, r2, r3
 80097b8:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	1e5a      	subs	r2, r3, #1
 80097be:	61fa      	str	r2, [r7, #28]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d102      	bne.n	80097ca <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80097c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80097c8:	e0c9      	b.n	800995e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ce:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80097d0:	69ba      	ldr	r2, [r7, #24]
 80097d2:	4b67      	ldr	r3, [pc, #412]	; (8009970 <SDMMC_GetCmdResp1+0x1d8>)
 80097d4:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d0ef      	beq.n	80097ba <SDMMC_GetCmdResp1+0x22>
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d1ea      	bne.n	80097ba <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097e8:	f003 0304 	and.w	r3, r3, #4
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d004      	beq.n	80097fa <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2204      	movs	r2, #4
 80097f4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097f6:	2304      	movs	r3, #4
 80097f8:	e0b1      	b.n	800995e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097fe:	f003 0301 	and.w	r3, r3, #1
 8009802:	2b00      	cmp	r3, #0
 8009804:	d004      	beq.n	8009810 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2201      	movs	r2, #1
 800980a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800980c:	2301      	movs	r3, #1
 800980e:	e0a6      	b.n	800995e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	4a58      	ldr	r2, [pc, #352]	; (8009974 <SDMMC_GetCmdResp1+0x1dc>)
 8009814:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009816:	68f8      	ldr	r0, [r7, #12]
 8009818:	f7ff fcf6 	bl	8009208 <SDMMC_GetCommandResponse>
 800981c:	4603      	mov	r3, r0
 800981e:	461a      	mov	r2, r3
 8009820:	7afb      	ldrb	r3, [r7, #11]
 8009822:	4293      	cmp	r3, r2
 8009824:	d001      	beq.n	800982a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009826:	2301      	movs	r3, #1
 8009828:	e099      	b.n	800995e <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800982a:	2100      	movs	r1, #0
 800982c:	68f8      	ldr	r0, [r7, #12]
 800982e:	f7ff fcf8 	bl	8009222 <SDMMC_GetResponse>
 8009832:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009834:	697a      	ldr	r2, [r7, #20]
 8009836:	4b50      	ldr	r3, [pc, #320]	; (8009978 <SDMMC_GetCmdResp1+0x1e0>)
 8009838:	4013      	ands	r3, r2
 800983a:	2b00      	cmp	r3, #0
 800983c:	d101      	bne.n	8009842 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800983e:	2300      	movs	r3, #0
 8009840:	e08d      	b.n	800995e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	2b00      	cmp	r3, #0
 8009846:	da02      	bge.n	800984e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009848:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800984c:	e087      	b.n	800995e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009854:	2b00      	cmp	r3, #0
 8009856:	d001      	beq.n	800985c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009858:	2340      	movs	r3, #64	; 0x40
 800985a:	e080      	b.n	800995e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800985c:	697b      	ldr	r3, [r7, #20]
 800985e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009862:	2b00      	cmp	r3, #0
 8009864:	d001      	beq.n	800986a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009866:	2380      	movs	r3, #128	; 0x80
 8009868:	e079      	b.n	800995e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009870:	2b00      	cmp	r3, #0
 8009872:	d002      	beq.n	800987a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009874:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009878:	e071      	b.n	800995e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009880:	2b00      	cmp	r3, #0
 8009882:	d002      	beq.n	800988a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009884:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009888:	e069      	b.n	800995e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009890:	2b00      	cmp	r3, #0
 8009892:	d002      	beq.n	800989a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009898:	e061      	b.n	800995e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d002      	beq.n	80098aa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80098a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80098a8:	e059      	b.n	800995e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d002      	beq.n	80098ba <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80098b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098b8:	e051      	b.n	800995e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d002      	beq.n	80098ca <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80098c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80098c8:	e049      	b.n	800995e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d002      	beq.n	80098da <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80098d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80098d8:	e041      	b.n	800995e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d002      	beq.n	80098ea <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80098e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098e8:	e039      	b.n	800995e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80098ea:	697b      	ldr	r3, [r7, #20]
 80098ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d002      	beq.n	80098fa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80098f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80098f8:	e031      	b.n	800995e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009900:	2b00      	cmp	r3, #0
 8009902:	d002      	beq.n	800990a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009904:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009908:	e029      	b.n	800995e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009910:	2b00      	cmp	r3, #0
 8009912:	d002      	beq.n	800991a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009914:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009918:	e021      	b.n	800995e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009920:	2b00      	cmp	r3, #0
 8009922:	d002      	beq.n	800992a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009924:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009928:	e019      	b.n	800995e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009930:	2b00      	cmp	r3, #0
 8009932:	d002      	beq.n	800993a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009934:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009938:	e011      	b.n	800995e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009940:	2b00      	cmp	r3, #0
 8009942:	d002      	beq.n	800994a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009944:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009948:	e009      	b.n	800995e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	f003 0308 	and.w	r3, r3, #8
 8009950:	2b00      	cmp	r3, #0
 8009952:	d002      	beq.n	800995a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009954:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009958:	e001      	b.n	800995e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800995a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800995e:	4618      	mov	r0, r3
 8009960:	3720      	adds	r7, #32
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	24000000 	.word	0x24000000
 800996c:	10624dd3 	.word	0x10624dd3
 8009970:	00200045 	.word	0x00200045
 8009974:	002000c5 	.word	0x002000c5
 8009978:	fdffe008 	.word	0xfdffe008

0800997c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800997c:	b480      	push	{r7}
 800997e:	b085      	sub	sp, #20
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009984:	4b1f      	ldr	r3, [pc, #124]	; (8009a04 <SDMMC_GetCmdResp2+0x88>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a1f      	ldr	r2, [pc, #124]	; (8009a08 <SDMMC_GetCmdResp2+0x8c>)
 800998a:	fba2 2303 	umull	r2, r3, r2, r3
 800998e:	0a5b      	lsrs	r3, r3, #9
 8009990:	f241 3288 	movw	r2, #5000	; 0x1388
 8009994:	fb02 f303 	mul.w	r3, r2, r3
 8009998:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	1e5a      	subs	r2, r3, #1
 800999e:	60fa      	str	r2, [r7, #12]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d102      	bne.n	80099aa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80099a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80099a8:	e026      	b.n	80099f8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ae:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d0ef      	beq.n	800999a <SDMMC_GetCmdResp2+0x1e>
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1ea      	bne.n	800999a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099c8:	f003 0304 	and.w	r3, r3, #4
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d004      	beq.n	80099da <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2204      	movs	r2, #4
 80099d4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80099d6:	2304      	movs	r3, #4
 80099d8:	e00e      	b.n	80099f8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099de:	f003 0301 	and.w	r3, r3, #1
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d004      	beq.n	80099f0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2201      	movs	r2, #1
 80099ea:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80099ec:	2301      	movs	r3, #1
 80099ee:	e003      	b.n	80099f8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4a06      	ldr	r2, [pc, #24]	; (8009a0c <SDMMC_GetCmdResp2+0x90>)
 80099f4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3714      	adds	r7, #20
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr
 8009a04:	24000000 	.word	0x24000000
 8009a08:	10624dd3 	.word	0x10624dd3
 8009a0c:	002000c5 	.word	0x002000c5

08009a10 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b085      	sub	sp, #20
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009a18:	4b1a      	ldr	r3, [pc, #104]	; (8009a84 <SDMMC_GetCmdResp3+0x74>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a1a      	ldr	r2, [pc, #104]	; (8009a88 <SDMMC_GetCmdResp3+0x78>)
 8009a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a22:	0a5b      	lsrs	r3, r3, #9
 8009a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a28:	fb02 f303 	mul.w	r3, r2, r3
 8009a2c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	1e5a      	subs	r2, r3, #1
 8009a32:	60fa      	str	r2, [r7, #12]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d102      	bne.n	8009a3e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009a38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a3c:	e01b      	b.n	8009a76 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a42:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d0ef      	beq.n	8009a2e <SDMMC_GetCmdResp3+0x1e>
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d1ea      	bne.n	8009a2e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a5c:	f003 0304 	and.w	r3, r3, #4
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d004      	beq.n	8009a6e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2204      	movs	r2, #4
 8009a68:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a6a:	2304      	movs	r3, #4
 8009a6c:	e003      	b.n	8009a76 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	4a06      	ldr	r2, [pc, #24]	; (8009a8c <SDMMC_GetCmdResp3+0x7c>)
 8009a72:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009a74:	2300      	movs	r3, #0
}
 8009a76:	4618      	mov	r0, r3
 8009a78:	3714      	adds	r7, #20
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	24000000 	.word	0x24000000
 8009a88:	10624dd3 	.word	0x10624dd3
 8009a8c:	002000c5 	.word	0x002000c5

08009a90 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b088      	sub	sp, #32
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	460b      	mov	r3, r1
 8009a9a:	607a      	str	r2, [r7, #4]
 8009a9c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009a9e:	4b35      	ldr	r3, [pc, #212]	; (8009b74 <SDMMC_GetCmdResp6+0xe4>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a35      	ldr	r2, [pc, #212]	; (8009b78 <SDMMC_GetCmdResp6+0xe8>)
 8009aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8009aa8:	0a5b      	lsrs	r3, r3, #9
 8009aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aae:	fb02 f303 	mul.w	r3, r2, r3
 8009ab2:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	1e5a      	subs	r2, r3, #1
 8009ab8:	61fa      	str	r2, [r7, #28]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d102      	bne.n	8009ac4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009abe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ac2:	e052      	b.n	8009b6a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ac8:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d0ef      	beq.n	8009ab4 <SDMMC_GetCmdResp6+0x24>
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d1ea      	bne.n	8009ab4 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ae2:	f003 0304 	and.w	r3, r3, #4
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d004      	beq.n	8009af4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2204      	movs	r2, #4
 8009aee:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009af0:	2304      	movs	r3, #4
 8009af2:	e03a      	b.n	8009b6a <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009af8:	f003 0301 	and.w	r3, r3, #1
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d004      	beq.n	8009b0a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2201      	movs	r2, #1
 8009b04:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b06:	2301      	movs	r3, #1
 8009b08:	e02f      	b.n	8009b6a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009b0a:	68f8      	ldr	r0, [r7, #12]
 8009b0c:	f7ff fb7c 	bl	8009208 <SDMMC_GetCommandResponse>
 8009b10:	4603      	mov	r3, r0
 8009b12:	461a      	mov	r2, r3
 8009b14:	7afb      	ldrb	r3, [r7, #11]
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d001      	beq.n	8009b1e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e025      	b.n	8009b6a <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	4a16      	ldr	r2, [pc, #88]	; (8009b7c <SDMMC_GetCmdResp6+0xec>)
 8009b22:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009b24:	2100      	movs	r1, #0
 8009b26:	68f8      	ldr	r0, [r7, #12]
 8009b28:	f7ff fb7b 	bl	8009222 <SDMMC_GetResponse>
 8009b2c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d106      	bne.n	8009b46 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	0c1b      	lsrs	r3, r3, #16
 8009b3c:	b29a      	uxth	r2, r3
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009b42:	2300      	movs	r3, #0
 8009b44:	e011      	b.n	8009b6a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d002      	beq.n	8009b56 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009b50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009b54:	e009      	b.n	8009b6a <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d002      	beq.n	8009b66 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009b60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b64:	e001      	b.n	8009b6a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009b66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3720      	adds	r7, #32
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	24000000 	.word	0x24000000
 8009b78:	10624dd3 	.word	0x10624dd3
 8009b7c:	002000c5 	.word	0x002000c5

08009b80 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b085      	sub	sp, #20
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009b88:	4b22      	ldr	r3, [pc, #136]	; (8009c14 <SDMMC_GetCmdResp7+0x94>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a22      	ldr	r2, [pc, #136]	; (8009c18 <SDMMC_GetCmdResp7+0x98>)
 8009b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8009b92:	0a5b      	lsrs	r3, r3, #9
 8009b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b98:	fb02 f303 	mul.w	r3, r2, r3
 8009b9c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	1e5a      	subs	r2, r3, #1
 8009ba2:	60fa      	str	r2, [r7, #12]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d102      	bne.n	8009bae <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ba8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009bac:	e02c      	b.n	8009c08 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bb2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d0ef      	beq.n	8009b9e <SDMMC_GetCmdResp7+0x1e>
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d1ea      	bne.n	8009b9e <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bcc:	f003 0304 	and.w	r3, r3, #4
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d004      	beq.n	8009bde <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2204      	movs	r2, #4
 8009bd8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009bda:	2304      	movs	r3, #4
 8009bdc:	e014      	b.n	8009c08 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be2:	f003 0301 	and.w	r3, r3, #1
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d004      	beq.n	8009bf4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2201      	movs	r2, #1
 8009bee:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	e009      	b.n	8009c08 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d002      	beq.n	8009c06 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2240      	movs	r2, #64	; 0x40
 8009c04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009c06:	2300      	movs	r3, #0

}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3714      	adds	r7, #20
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr
 8009c14:	24000000 	.word	0x24000000
 8009c18:	10624dd3 	.word	0x10624dd3

08009c1c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b085      	sub	sp, #20
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009c24:	4b11      	ldr	r3, [pc, #68]	; (8009c6c <SDMMC_GetCmdError+0x50>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a11      	ldr	r2, [pc, #68]	; (8009c70 <SDMMC_GetCmdError+0x54>)
 8009c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8009c2e:	0a5b      	lsrs	r3, r3, #9
 8009c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c34:	fb02 f303 	mul.w	r3, r2, r3
 8009c38:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	1e5a      	subs	r2, r3, #1
 8009c3e:	60fa      	str	r2, [r7, #12]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d102      	bne.n	8009c4a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c48:	e009      	b.n	8009c5e <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d0f1      	beq.n	8009c3a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	4a06      	ldr	r2, [pc, #24]	; (8009c74 <SDMMC_GetCmdError+0x58>)
 8009c5a:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009c5c:	2300      	movs	r3, #0
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3714      	adds	r7, #20
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop
 8009c6c:	24000000 	.word	0x24000000
 8009c70:	10624dd3 	.word	0x10624dd3
 8009c74:	002000c5 	.word	0x002000c5

08009c78 <MX_FileX_Init>:
  * @brief  Application FileX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_FileX_Init(VOID *memory_ptr)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b08e      	sub	sp, #56	; 0x38
 8009c7c:	af08      	add	r7, sp, #32
 8009c7e:	6078      	str	r0, [r7, #4]
  UINT ret = FX_SUCCESS;
 8009c80:	2300      	movs	r3, #0
 8009c82:	617b      	str	r3, [r7, #20]

  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	613b      	str	r3, [r7, #16]
  /* USER CODE BEGIN 0 */

  /* USER CODE END 0 */

  /*Allocate memory for the main thread's stack*/
  ret = tx_byte_allocate(byte_pool, &pointer, FX_APP_THREAD_STACK_SIZE, TX_NO_WAIT);
 8009c88:	f107 010c 	add.w	r1, r7, #12
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009c92:	6938      	ldr	r0, [r7, #16]
 8009c94:	f00c fc08 	bl	80164a8 <_txe_byte_allocate>
 8009c98:	6178      	str	r0, [r7, #20]

  /* Check FX_APP_THREAD_STACK_SIZE allocation*/
  if (ret != FX_SUCCESS)
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d001      	beq.n	8009ca4 <MX_FileX_Init+0x2c>
  {
    return TX_POOL_ERROR;
 8009ca0:	2302      	movs	r3, #2
 8009ca2:	e027      	b.n	8009cf4 <MX_FileX_Init+0x7c>
  }

  /* Create the main thread.  */
  ret = tx_thread_create(&fx_app_thread, FX_APP_THREAD_NAME, fx_app_thread_entry, 0, pointer, FX_APP_THREAD_STACK_SIZE,
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	22b0      	movs	r2, #176	; 0xb0
 8009ca8:	9206      	str	r2, [sp, #24]
 8009caa:	2201      	movs	r2, #1
 8009cac:	9205      	str	r2, [sp, #20]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	9204      	str	r2, [sp, #16]
 8009cb2:	220a      	movs	r2, #10
 8009cb4:	9203      	str	r2, [sp, #12]
 8009cb6:	220a      	movs	r2, #10
 8009cb8:	9202      	str	r2, [sp, #8]
 8009cba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009cbe:	9201      	str	r2, [sp, #4]
 8009cc0:	9300      	str	r3, [sp, #0]
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	4a0d      	ldr	r2, [pc, #52]	; (8009cfc <MX_FileX_Init+0x84>)
 8009cc6:	490e      	ldr	r1, [pc, #56]	; (8009d00 <MX_FileX_Init+0x88>)
 8009cc8:	480e      	ldr	r0, [pc, #56]	; (8009d04 <MX_FileX_Init+0x8c>)
 8009cca:	f00c ff79 	bl	8016bc0 <_txe_thread_create>
 8009cce:	6178      	str	r0, [r7, #20]
                         FX_APP_THREAD_PRIO, FX_APP_PREEMPTION_THRESHOLD, FX_APP_THREAD_TIME_SLICE, FX_APP_THREAD_AUTO_START);

  /* Check main thread creation */
  if (ret != FX_SUCCESS)
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d001      	beq.n	8009cda <MX_FileX_Init+0x62>
  {
    return TX_THREAD_ERROR;
 8009cd6:	230e      	movs	r3, #14
 8009cd8:	e00c      	b.n	8009cf4 <MX_FileX_Init+0x7c>
  }
  /* USER CODE BEGIN MX_FileX_Init */
  /* Create the message queue */
    tx_queue_create(&tx_msg_queue, "sd_event_queue", 1, pointer, DEFAULT_QUEUE_LENGTH * sizeof(ULONG));
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2238      	movs	r2, #56	; 0x38
 8009cde:	9201      	str	r2, [sp, #4]
 8009ce0:	2240      	movs	r2, #64	; 0x40
 8009ce2:	9200      	str	r2, [sp, #0]
 8009ce4:	2201      	movs	r2, #1
 8009ce6:	4908      	ldr	r1, [pc, #32]	; (8009d08 <MX_FileX_Init+0x90>)
 8009ce8:	4808      	ldr	r0, [pc, #32]	; (8009d0c <MX_FileX_Init+0x94>)
 8009cea:	f00c fcf1 	bl	80166d0 <_txe_queue_create>

  /* USER CODE END MX_FileX_Init */

  /* Initialize FileX.  */
  fx_system_initialize();
 8009cee:	f006 fc85 	bl	80105fc <_fx_system_initialize>

  /* USER CODE BEGIN MX_FileX_Init 1*/

  /* USER CODE END MX_FileX_Init 1*/

  return ret;
 8009cf2:	697b      	ldr	r3, [r7, #20]
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3718      	adds	r7, #24
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}
 8009cfc:	08009d11 	.word	0x08009d11
 8009d00:	08017ea8 	.word	0x08017ea8
 8009d04:	240122c8 	.word	0x240122c8
 8009d08:	08017ebc 	.word	0x08017ebc
 8009d0c:	24014c18 	.word	0x24014c18

08009d10 <fx_app_thread_entry>:
 * @brief  Main thread entry.
 * @param thread_input: ULONG user argument used by the thread entry
 * @retval none
 */
void fx_app_thread_entry(ULONG thread_input)
{
 8009d10:	b5b0      	push	{r4, r5, r7, lr}
 8009d12:	b09c      	sub	sp, #112	; 0x70
 8009d14:	af04      	add	r7, sp, #16
 8009d16:	6078      	str	r0, [r7, #4]
  UINT sd_status = FX_SUCCESS;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	65bb      	str	r3, [r7, #88]	; 0x58
  /* USER CODE BEGIN fx_app_thread_entry 0 */
  ULONG r_msg;
  ULONG s_msg = CARD_STATUS_CHANGED;
 8009d1c:	2363      	movs	r3, #99	; 0x63
 8009d1e:	653b      	str	r3, [r7, #80]	; 0x50
  ULONG last_status = CARD_STATUS_DISCONNECTED;
 8009d20:	2358      	movs	r3, #88	; 0x58
 8009d22:	65fb      	str	r3, [r7, #92]	; 0x5c
  ULONG bytes_read;
  CHAR read_buffer[32];
  CHAR data[] = "This is FileX working on STM32";
 8009d24:	4b78      	ldr	r3, [pc, #480]	; (8009f08 <fx_app_thread_entry+0x1f8>)
 8009d26:	f107 040c 	add.w	r4, r7, #12
 8009d2a:	461d      	mov	r5, r3
 8009d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009d30:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009d34:	c407      	stmia	r4!, {r0, r1, r2}
 8009d36:	8023      	strh	r3, [r4, #0]
 8009d38:	3402      	adds	r4, #2
 8009d3a:	0c1b      	lsrs	r3, r3, #16
 8009d3c:	7023      	strb	r3, [r4, #0]
  /* USER CODE END fx_app_thread_entry 0 */

  /* Open the SD disk driver */
  sd_status =  fx_media_open(&sdio_disk, FX_SD_VOLUME_NAME, fx_stm32_sd_driver, (VOID *)FX_NULL, (VOID *) fx_sd_media_memory, sizeof(fx_sd_media_memory));
 8009d3e:	f242 43b8 	movw	r3, #9400	; 0x24b8
 8009d42:	9302      	str	r3, [sp, #8]
 8009d44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d48:	9301      	str	r3, [sp, #4]
 8009d4a:	4b70      	ldr	r3, [pc, #448]	; (8009f0c <fx_app_thread_entry+0x1fc>)
 8009d4c:	9300      	str	r3, [sp, #0]
 8009d4e:	2300      	movs	r3, #0
 8009d50:	4a6f      	ldr	r2, [pc, #444]	; (8009f10 <fx_app_thread_entry+0x200>)
 8009d52:	4970      	ldr	r1, [pc, #448]	; (8009f14 <fx_app_thread_entry+0x204>)
 8009d54:	4870      	ldr	r0, [pc, #448]	; (8009f18 <fx_app_thread_entry+0x208>)
 8009d56:	f009 f853 	bl	8012e00 <_fxe_media_open>
 8009d5a:	65b8      	str	r0, [r7, #88]	; 0x58

  /* Check the media open sd_status */
  if (sd_status != FX_SUCCESS)
 8009d5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d000      	beq.n	8009d64 <fx_app_thread_entry+0x54>
  {
    /* USER CODE BEGIN SD open error */
    while(1);
 8009d62:	e7fe      	b.n	8009d62 <fx_app_thread_entry+0x52>
    /* USER CODE END SD open error */
  }

  /* USER CODE BEGIN fx_app_thread_entry 1 */
  if(SD_IsDetected(FX_STM32_SD_INSTANCE) == SD_PRESENT)
 8009d64:	2000      	movs	r0, #0
 8009d66:	f000 f8e1 	bl	8009f2c <SD_IsDetected>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d107      	bne.n	8009d80 <fx_app_thread_entry+0x70>
  {
    /* SD card is already inserted, place the info into the queue */
    tx_queue_send(&tx_msg_queue, &s_msg, TX_NO_WAIT);
 8009d70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8009d74:	2200      	movs	r2, #0
 8009d76:	4619      	mov	r1, r3
 8009d78:	4868      	ldr	r0, [pc, #416]	; (8009f1c <fx_app_thread_entry+0x20c>)
 8009d7a:	f00c fda3 	bl	80168c4 <_txe_queue_send>
 8009d7e:	e00e      	b.n	8009d9e <fx_app_thread_entry+0x8e>
  }
  else
  {
    /* Indicate that SD card is not inserted from start */
    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8009d80:	2200      	movs	r2, #0
 8009d82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009d86:	4866      	ldr	r0, [pc, #408]	; (8009f20 <fx_app_thread_entry+0x210>)
 8009d88:	f7f8 f882 	bl	8001e90 <HAL_GPIO_WritePin>

    /* We wait here for a valid SD card insertion event, if it is not inserted already */
    while(1)
    {

      while(tx_queue_receive(&tx_msg_queue, &r_msg, TX_TIMER_TICKS_PER_SECOND / 2) != TX_SUCCESS)
 8009d8c:	e007      	b.n	8009d9e <fx_app_thread_entry+0x8e>
      {
        /* Toggle GREEN LED to indicate idle state after a successful operation */
        if(last_status == CARD_STATUS_CONNECTED)
 8009d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d90:	2b4d      	cmp	r3, #77	; 0x4d
 8009d92:	d104      	bne.n	8009d9e <fx_app_thread_entry+0x8e>
        {
          HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8009d94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009d98:	4861      	ldr	r0, [pc, #388]	; (8009f20 <fx_app_thread_entry+0x210>)
 8009d9a:	f7f8 f892 	bl	8001ec2 <HAL_GPIO_TogglePin>
      while(tx_queue_receive(&tx_msg_queue, &r_msg, TX_TIMER_TICKS_PER_SECOND / 2) != TX_SUCCESS)
 8009d9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009da2:	2232      	movs	r2, #50	; 0x32
 8009da4:	4619      	mov	r1, r3
 8009da6:	485d      	ldr	r0, [pc, #372]	; (8009f1c <fx_app_thread_entry+0x20c>)
 8009da8:	f00c fd42 	bl	8016830 <_txe_queue_receive>
 8009dac:	4603      	mov	r3, r0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d1ed      	bne.n	8009d8e <fx_app_thread_entry+0x7e>
        }
      }

      /* check if we received the correct event message */
      if(r_msg == CARD_STATUS_CHANGED)
 8009db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009db4:	2b63      	cmp	r3, #99	; 0x63
 8009db6:	d1f2      	bne.n	8009d9e <fx_app_thread_entry+0x8e>
      {
        /* reset the status */
        r_msg = 0;
 8009db8:	2300      	movs	r3, #0
 8009dba:	657b      	str	r3, [r7, #84]	; 0x54

        /* for debouncing purpose we wait a bit till it settles down */
        tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 2);
 8009dbc:	2032      	movs	r0, #50	; 0x32
 8009dbe:	f00b fd5b 	bl	8015878 <_tx_thread_sleep>

        if(SD_IsDetected(FX_STM32_SD_INSTANCE) == SD_PRESENT)
 8009dc2:	2000      	movs	r0, #0
 8009dc4:	f000 f8b2 	bl	8009f2c <SD_IsDetected>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d111      	bne.n	8009df2 <fx_app_thread_entry+0xe2>
        {
          /* We have a valid SD insertion event, start processing.. */
          /* Update last known status */
          last_status = CARD_STATUS_CONNECTED;
 8009dce:	234d      	movs	r3, #77	; 0x4d
 8009dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
          HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /*LED_RED Off*/
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009dd8:	4851      	ldr	r0, [pc, #324]	; (8009f20 <fx_app_thread_entry+0x210>)
 8009dda:	f7f8 f859 	bl	8001e90 <HAL_GPIO_WritePin>
          break;
 8009dde:	bf00      	nop
        }
      }
    }

    /* Create a file called STM32.TXT in the root directory.  */
    sd_status =  fx_file_create(&sdio_disk, "STM32.TXT");
 8009de0:	4950      	ldr	r1, [pc, #320]	; (8009f24 <fx_app_thread_entry+0x214>)
 8009de2:	484d      	ldr	r0, [pc, #308]	; (8009f18 <fx_app_thread_entry+0x208>)
 8009de4:	f008 fe6a 	bl	8012abc <_fxe_file_create>
 8009de8:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the create status.  */
    if (sd_status != FX_SUCCESS)
 8009dea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d014      	beq.n	8009e1a <fx_app_thread_entry+0x10a>
 8009df0:	e00e      	b.n	8009e10 <fx_app_thread_entry+0x100>
          last_status = CARD_STATUS_DISCONNECTED;
 8009df2:	2358      	movs	r3, #88	; 0x58
 8009df4:	65fb      	str	r3, [r7, #92]	; 0x5c
          HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);  /*LED_GREEN Off*/
 8009df6:	2201      	movs	r2, #1
 8009df8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009dfc:	4848      	ldr	r0, [pc, #288]	; (8009f20 <fx_app_thread_entry+0x210>)
 8009dfe:	f7f8 f847 	bl	8001e90 <HAL_GPIO_WritePin>
          HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /*LED_GREEN On*/
 8009e02:	2200      	movs	r2, #0
 8009e04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009e08:	4845      	ldr	r0, [pc, #276]	; (8009f20 <fx_app_thread_entry+0x210>)
 8009e0a:	f7f8 f841 	bl	8001e90 <HAL_GPIO_WritePin>
      while(tx_queue_receive(&tx_msg_queue, &r_msg, TX_TIMER_TICKS_PER_SECOND / 2) != TX_SUCCESS)
 8009e0e:	e7c6      	b.n	8009d9e <fx_app_thread_entry+0x8e>
    {
      /* Check for an already created status. This is expected on the
      second pass of this loop!  */
      if (sd_status != FX_ALREADY_CREATED)
 8009e10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e12:	2b0b      	cmp	r3, #11
 8009e14:	d001      	beq.n	8009e1a <fx_app_thread_entry+0x10a>
      {
        /* Create error, call error handler.  */
        Error_Handler();
 8009e16:	f7f7 f8f5 	bl	8001004 <Error_Handler>
      }
    }

    /* Open the test file.  */
    sd_status =  fx_file_open(&sdio_disk, &fx_file, "STM32.TXT", FX_OPEN_FOR_WRITE);
 8009e1a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8009e1e:	9300      	str	r3, [sp, #0]
 8009e20:	2301      	movs	r3, #1
 8009e22:	4a40      	ldr	r2, [pc, #256]	; (8009f24 <fx_app_thread_entry+0x214>)
 8009e24:	4940      	ldr	r1, [pc, #256]	; (8009f28 <fx_app_thread_entry+0x218>)
 8009e26:	483c      	ldr	r0, [pc, #240]	; (8009f18 <fx_app_thread_entry+0x208>)
 8009e28:	f008 fe76 	bl	8012b18 <_fxe_file_open>
 8009e2c:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file open status.  */
    if (sd_status != FX_SUCCESS)
 8009e2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d001      	beq.n	8009e38 <fx_app_thread_entry+0x128>
    {
      /* Error opening file, call error handler.  */
      Error_Handler();
 8009e34:	f7f7 f8e6 	bl	8001004 <Error_Handler>
    }

    /* Seek to the beginning of the test file.  */
    sd_status =  fx_file_seek(&fx_file, 0);
 8009e38:	2100      	movs	r1, #0
 8009e3a:	483b      	ldr	r0, [pc, #236]	; (8009f28 <fx_app_thread_entry+0x218>)
 8009e3c:	f008 ff26 	bl	8012c8c <_fxe_file_seek>
 8009e40:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file seek status.  */
    if (sd_status != FX_SUCCESS)
 8009e42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d001      	beq.n	8009e4c <fx_app_thread_entry+0x13c>
    {
      /* Error performing file seek, call error handler.  */
      Error_Handler();
 8009e48:	f7f7 f8dc 	bl	8001004 <Error_Handler>
    }

    /* Write a string to the test file.  */
    sd_status =  fx_file_write(&fx_file, data, sizeof(data));
 8009e4c:	f107 030c 	add.w	r3, r7, #12
 8009e50:	221f      	movs	r2, #31
 8009e52:	4619      	mov	r1, r3
 8009e54:	4834      	ldr	r0, [pc, #208]	; (8009f28 <fx_app_thread_entry+0x218>)
 8009e56:	f008 ff47 	bl	8012ce8 <_fxe_file_write>
 8009e5a:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file write status.  */
    if (sd_status != FX_SUCCESS)
 8009e5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d001      	beq.n	8009e66 <fx_app_thread_entry+0x156>
    {
      /* Error writing to a file, call error handler.  */
      Error_Handler();
 8009e62:	f7f7 f8cf 	bl	8001004 <Error_Handler>
    }

    /* Close the test file.  */
    sd_status =  fx_file_close(&fx_file);
 8009e66:	4830      	ldr	r0, [pc, #192]	; (8009f28 <fx_app_thread_entry+0x218>)
 8009e68:	f008 fdfc 	bl	8012a64 <_fxe_file_close>
 8009e6c:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file close status.  */
    if (sd_status != FX_SUCCESS)
 8009e6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d001      	beq.n	8009e78 <fx_app_thread_entry+0x168>
    {
      /* Error closing the file, call error handler.  */
      Error_Handler();
 8009e74:	f7f7 f8c6 	bl	8001004 <Error_Handler>
    }

    sd_status = fx_media_flush(&sdio_disk);
 8009e78:	4827      	ldr	r0, [pc, #156]	; (8009f18 <fx_app_thread_entry+0x208>)
 8009e7a:	f008 ff95 	bl	8012da8 <_fxe_media_flush>
 8009e7e:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the media flush  status.  */
    if (sd_status != FX_SUCCESS)
 8009e80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d001      	beq.n	8009e8a <fx_app_thread_entry+0x17a>
    {
      /* Error closing the file, call error handler.  */
      Error_Handler();
 8009e86:	f7f7 f8bd 	bl	8001004 <Error_Handler>
    }

    /* Open the test file.  */
    sd_status =  fx_file_open(&sdio_disk, &fx_file, "STM32.TXT", FX_OPEN_FOR_READ);
 8009e8a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8009e8e:	9300      	str	r3, [sp, #0]
 8009e90:	2300      	movs	r3, #0
 8009e92:	4a24      	ldr	r2, [pc, #144]	; (8009f24 <fx_app_thread_entry+0x214>)
 8009e94:	4924      	ldr	r1, [pc, #144]	; (8009f28 <fx_app_thread_entry+0x218>)
 8009e96:	4820      	ldr	r0, [pc, #128]	; (8009f18 <fx_app_thread_entry+0x208>)
 8009e98:	f008 fe3e 	bl	8012b18 <_fxe_file_open>
 8009e9c:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file open status.  */
    if (sd_status != FX_SUCCESS)
 8009e9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d001      	beq.n	8009ea8 <fx_app_thread_entry+0x198>
    {
      /* Error opening file, call error handler.  */
      Error_Handler();
 8009ea4:	f7f7 f8ae 	bl	8001004 <Error_Handler>
    }

    /* Seek to the beginning of the test file.  */
    sd_status =  fx_file_seek(&fx_file, 0);
 8009ea8:	2100      	movs	r1, #0
 8009eaa:	481f      	ldr	r0, [pc, #124]	; (8009f28 <fx_app_thread_entry+0x218>)
 8009eac:	f008 feee 	bl	8012c8c <_fxe_file_seek>
 8009eb0:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file seek status.  */
    if (sd_status != FX_SUCCESS)
 8009eb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d001      	beq.n	8009ebc <fx_app_thread_entry+0x1ac>
    {
      /* Error performing file seek, call error handler.  */
      Error_Handler();
 8009eb8:	f7f7 f8a4 	bl	8001004 <Error_Handler>
    }

    /* Read the first 28 bytes of the test file.  */
    sd_status =  fx_file_read(&fx_file, read_buffer, sizeof(data), &bytes_read);
 8009ebc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8009ec0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8009ec4:	221f      	movs	r2, #31
 8009ec6:	4818      	ldr	r0, [pc, #96]	; (8009f28 <fx_app_thread_entry+0x218>)
 8009ec8:	f008 fea8 	bl	8012c1c <_fxe_file_read>
 8009ecc:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file read status.  */
    if ((sd_status != FX_SUCCESS) || (bytes_read != sizeof(data)))
 8009ece:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d102      	bne.n	8009eda <fx_app_thread_entry+0x1ca>
 8009ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ed6:	2b1f      	cmp	r3, #31
 8009ed8:	d001      	beq.n	8009ede <fx_app_thread_entry+0x1ce>
    {
      /* Error reading file, call error handler.  */
      Error_Handler();
 8009eda:	f7f7 f893 	bl	8001004 <Error_Handler>
    }

    /* Close the test file.  */
    sd_status =  fx_file_close(&fx_file);
 8009ede:	4812      	ldr	r0, [pc, #72]	; (8009f28 <fx_app_thread_entry+0x218>)
 8009ee0:	f008 fdc0 	bl	8012a64 <_fxe_file_close>
 8009ee4:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the file close status.  */
    if (sd_status != FX_SUCCESS)
 8009ee6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d001      	beq.n	8009ef0 <fx_app_thread_entry+0x1e0>
    {
      /* Error closing the file, call error handler.  */
      Error_Handler();
 8009eec:	f7f7 f88a 	bl	8001004 <Error_Handler>
    }

    /* Close the media.  */
    sd_status =  fx_media_close(&sdio_disk);
 8009ef0:	4809      	ldr	r0, [pc, #36]	; (8009f18 <fx_app_thread_entry+0x208>)
 8009ef2:	f008 ff2d 	bl	8012d50 <_fxe_media_close>
 8009ef6:	65b8      	str	r0, [r7, #88]	; 0x58

    /* Check the media close status.  */
    if (sd_status != FX_SUCCESS)
 8009ef8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f43f af46 	beq.w	8009d8c <fx_app_thread_entry+0x7c>
    {
      /* Error closing the media, call error handler.  */
      Error_Handler();
 8009f00:	f7f7 f880 	bl	8001004 <Error_Handler>
  for( ;; )
 8009f04:	e742      	b.n	8009d8c <fx_app_thread_entry+0x7c>
 8009f06:	bf00      	nop
 8009f08:	08017ee8 	.word	0x08017ee8
 8009f0c:	24012380 	.word	0x24012380
 8009f10:	08012f75 	.word	0x08012f75
 8009f14:	08017ecc 	.word	0x08017ecc
 8009f18:	24012580 	.word	0x24012580
 8009f1c:	24014c18 	.word	0x24014c18
 8009f20:	58022000 	.word	0x58022000
 8009f24:	08017edc 	.word	0x08017edc
 8009f28:	24014a38 	.word	0x24014a38

08009f2c <SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param Instance  SD Instance
 * @retval Returns if SD is detected or not
 */
int32_t SD_IsDetected(uint32_t Instance)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  int32_t ret;
  if(Instance >= 1)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d002      	beq.n	8009f40 <SD_IsDetected+0x14>
  {
    ret = HAL_ERROR;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	60fb      	str	r3, [r7, #12]
 8009f3e:	e00c      	b.n	8009f5a <SD_IsDetected+0x2e>
  }
  else
  {
    /* Check SD card detect pin */
    if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_Port, SD_DETECT_Pin) == GPIO_PIN_SET)
 8009f40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009f44:	4807      	ldr	r0, [pc, #28]	; (8009f64 <SD_IsDetected+0x38>)
 8009f46:	f7f7 ff8b 	bl	8001e60 <HAL_GPIO_ReadPin>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d102      	bne.n	8009f56 <SD_IsDetected+0x2a>
    {
      ret = SD_NOT_PRESENT;
 8009f50:	2300      	movs	r3, #0
 8009f52:	60fb      	str	r3, [r7, #12]
 8009f54:	e001      	b.n	8009f5a <SD_IsDetected+0x2e>
    }
    else
    {
      ret = SD_PRESENT;
 8009f56:	2301      	movs	r3, #1
 8009f58:	60fb      	str	r3, [r7, #12]
    }
  }

  return(int32_t)ret;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3710      	adds	r7, #16
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	58022000 	.word	0x58022000

08009f68 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b084      	sub	sp, #16
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	4603      	mov	r3, r0
 8009f70:	80fb      	strh	r3, [r7, #6]
  ULONG s_msg = CARD_STATUS_CHANGED;
 8009f72:	2363      	movs	r3, #99	; 0x63
 8009f74:	60fb      	str	r3, [r7, #12]

  if(GPIO_Pin == SD_DETECT_Pin)
 8009f76:	88fb      	ldrh	r3, [r7, #6]
 8009f78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f7c:	d106      	bne.n	8009f8c <HAL_GPIO_EXTI_Callback+0x24>
  {
    tx_queue_send(&tx_msg_queue, &s_msg, TX_NO_WAIT);
 8009f7e:	f107 030c 	add.w	r3, r7, #12
 8009f82:	2200      	movs	r2, #0
 8009f84:	4619      	mov	r1, r3
 8009f86:	4803      	ldr	r0, [pc, #12]	; (8009f94 <HAL_GPIO_EXTI_Callback+0x2c>)
 8009f88:	f00c fc9c 	bl	80168c4 <_txe_queue_send>
  }
}
 8009f8c:	bf00      	nop
 8009f8e:	3710      	adds	r7, #16
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	24014c18 	.word	0x24014c18

08009f98 <fx_stm32_sd_get_status>:
* @brief Check the SD IP status.
* @param UINT instance SD instance to check
* @retval 0 when ready 1 when busy
*/
INT fx_stm32_sd_get_status(UINT instance)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b084      	sub	sp, #16
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  INT ret = 0;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN PRE_GET_STATUS */
  UNUSED(instance);
  /* USER CODE END PRE_GET_STATUS */

  if(HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER)
 8009fa4:	4806      	ldr	r0, [pc, #24]	; (8009fc0 <fx_stm32_sd_get_status+0x28>)
 8009fa6:	f7fc ff09 	bl	8006dbc <HAL_SD_GetCardState>
 8009faa:	4603      	mov	r3, r0
 8009fac:	2b04      	cmp	r3, #4
 8009fae:	d001      	beq.n	8009fb4 <fx_stm32_sd_get_status+0x1c>
  {
    ret = 1;
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN POST_GET_STATUS */

  /* USER CODE END POST_GET_STATUS */

  return ret;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3710      	adds	r7, #16
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
 8009fbe:	bf00      	nop
 8009fc0:	24012164 	.word	0x24012164

08009fc4 <fx_stm32_sd_read_blocks>:
* @param UINT start_block the first block to start reading from.
* @param UINT total_blocks total number of blocks to read.
* @retval 0 on success error code otherwise
*/
INT fx_stm32_sd_read_blocks(UINT instance, UINT *buffer, UINT start_block, UINT total_blocks)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b086      	sub	sp, #24
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	607a      	str	r2, [r7, #4]
 8009fd0:	603b      	str	r3, [r7, #0]
  INT ret = 0;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_READ_BLOCKS */
  UNUSED(instance);
  /* USER CODE END PRE_READ_BLOCKS */

  if(HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)buffer, start_block, total_blocks) != HAL_OK)
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	687a      	ldr	r2, [r7, #4]
 8009fda:	68b9      	ldr	r1, [r7, #8]
 8009fdc:	4806      	ldr	r0, [pc, #24]	; (8009ff8 <fx_stm32_sd_read_blocks+0x34>)
 8009fde:	f7fc f867 	bl	80060b0 <HAL_SD_ReadBlocks_DMA>
 8009fe2:	4603      	mov	r3, r0
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d001      	beq.n	8009fec <fx_stm32_sd_read_blocks+0x28>
  {
    ret = 1;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN POST_READ_BLOCKS */

  /* USER CODE END POST_READ_BLOCKS */

  return ret;
 8009fec:	697b      	ldr	r3, [r7, #20]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3718      	adds	r7, #24
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	24012164 	.word	0x24012164

08009ffc <fx_stm32_sd_write_blocks>:
* @param UINT start_block the first block to start writing into.
* @param UINT total_blocks total number of blocks to write.
* @retval 0 on success error code otherwise
*/
INT fx_stm32_sd_write_blocks(UINT instance, UINT *buffer, UINT start_block, UINT total_blocks)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b086      	sub	sp, #24
 800a000:	af00      	add	r7, sp, #0
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	60b9      	str	r1, [r7, #8]
 800a006:	607a      	str	r2, [r7, #4]
 800a008:	603b      	str	r3, [r7, #0]
  INT ret = 0;
 800a00a:	2300      	movs	r3, #0
 800a00c:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_WRITE_BLOCKS */
  UNUSED(instance);
  /* USER CODE END PRE_WRITE_BLOCKS */

  if(HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)buffer, start_block, total_blocks) != HAL_OK)
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	68b9      	ldr	r1, [r7, #8]
 800a014:	4806      	ldr	r0, [pc, #24]	; (800a030 <fx_stm32_sd_write_blocks+0x34>)
 800a016:	f7fc f8f3 	bl	8006200 <HAL_SD_WriteBlocks_DMA>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d001      	beq.n	800a024 <fx_stm32_sd_write_blocks+0x28>
  {
    ret = 1;
 800a020:	2301      	movs	r3, #1
 800a022:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN POST_WRITE_BLOCKS */

  /* USER CODE END POST_WRITE_BLOCKS */

  return ret;
 800a024:	697b      	ldr	r3, [r7, #20]
}
 800a026:	4618      	mov	r0, r3
 800a028:	3718      	adds	r7, #24
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	24012164 	.word	0x24012164

0800a034 <HAL_SD_TxCpltCallback>:
* @brief SD DMA Tx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_TX_CMPLT */

  /* USER CODE END PRE_TX_CMPLT */

  tx_semaphore_put(&sd_tx_semaphore);
 800a03c:	4803      	ldr	r0, [pc, #12]	; (800a04c <HAL_SD_TxCpltCallback+0x18>)
 800a03e:	f00c fda1 	bl	8016b84 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_TX_CMPLT */

  /* USER CODE END POST_TX_CMPLT */
}
 800a042:	bf00      	nop
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}
 800a04a:	bf00      	nop
 800a04c:	24014c50 	.word	0x24014c50

0800a050 <HAL_SD_RxCpltCallback>:
* @brief SD DMA Rx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b082      	sub	sp, #8
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_RX_CMPLT */

  /* USER CODE END PRE_RX_CMPLT */

  tx_semaphore_put(&sd_rx_semaphore);
 800a058:	4803      	ldr	r0, [pc, #12]	; (800a068 <HAL_SD_RxCpltCallback+0x18>)
 800a05a:	f00c fd93 	bl	8016b84 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_RX_CMPLT */

  /* USER CODE END POST_RX_CMPLT */
}
 800a05e:	bf00      	nop
 800a060:	3708      	adds	r7, #8
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	24014c6c 	.word	0x24014c6c

0800a06c <_fx_directory_entry_read>:
                                   ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#else
UINT  _fx_directory_entry_read(FX_MEDIA *media_ptr, FX_DIR_ENTRY *source_dir,
                               ULONG *entry_ptr, FX_DIR_ENTRY *destination_ptr)
#endif /* FX_ENABLE_EXFAT */
{
 800a06c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a070:	b09e      	sub	sp, #120	; 0x78
 800a072:	af04      	add	r7, sp, #16
 800a074:	61f8      	str	r0, [r7, #28]
 800a076:	61b9      	str	r1, [r7, #24]
 800a078:	617a      	str	r2, [r7, #20]
 800a07a:	613b      	str	r3, [r7, #16]

UINT   i, j, card, dotflag, get_short_name;
UINT   number_of_lfns;
UINT   status;
ULONG  cluster, next_cluster = 0;
 800a07c:	2300      	movs	r3, #0
 800a07e:	627b      	str	r3, [r7, #36]	; 0x24
ULONG  logical_sector;
ULONG  byte_offset;
ULONG  bytes_per_cluster;
UCHAR *read_ptr;
CHAR  *short_name_ptr;
ULONG  entry = *entry_ptr;
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	63bb      	str	r3, [r7, #56]	; 0x38


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry read requests.  */
    media_ptr -> fx_media_directory_entry_reads++;
 800a086:	69fb      	ldr	r3, [r7, #28]
 800a088:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800a08c:	1c5a      	adds	r2, r3, #1
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_READ, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Calculate the byte offset of this directory entry.  */
    byte_offset =  entry * FX_DIR_ENTRY_SIZE;
 800a094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a096:	015b      	lsls	r3, r3, #5
 800a098:	647b      	str	r3, [r7, #68]	; 0x44

    /* Determine if a sub-directory or FAT32 root directory is specified.  */
#ifdef FX_ENABLE_EXFAT
    if ((source_dir) || (media_ptr -> fx_media_FAT_type == FX_FAT32))
#else
    if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 800a09a:	69bb      	ldr	r3, [r7, #24]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d104      	bne.n	800a0aa <_fx_directory_entry_read+0x3e>
 800a0a0:	69fb      	ldr	r3, [r7, #28]
 800a0a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f000 80a1 	beq.w	800a1ec <_fx_directory_entry_read+0x180>
    {

        /* Yes, a sub-directory is present.  */

        /* Calculate the number of bytes per cluster.  */
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800a0aa:	69fb      	ldr	r3, [r7, #28]
 800a0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800a0ae:	69fa      	ldr	r2, [r7, #28]
 800a0b0:	6d52      	ldr	r2, [r2, #84]	; 0x54
        bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800a0b2:	fb02 f303 	mul.w	r3, r2, r3
 800a0b6:	633b      	str	r3, [r7, #48]	; 0x30

        /* Check for invalid value.  */
        if (bytes_per_cluster == 0)
 800a0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d101      	bne.n	800a0c2 <_fx_directory_entry_read+0x56>
        {

            /* Invalid media, return error.  */
            return(FX_MEDIA_INVALID);
 800a0be:	2302      	movs	r3, #2
 800a0c0:	e355      	b.n	800a76e <_fx_directory_entry_read+0x702>
        }

        /* Now determine the relative cluster in the sub-directory file.  */
        relative_cluster =   (UINT)(byte_offset / bytes_per_cluster);
 800a0c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0ca:	653b      	str	r3, [r7, #80]	; 0x50

        /* Calculate the byte offset within the cluster.  */
        byte_offset =  byte_offset % bytes_per_cluster;
 800a0cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0d0:	fbb3 f2f2 	udiv	r2, r3, r2
 800a0d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a0d6:	fb01 f202 	mul.w	r2, r1, r2
 800a0da:	1a9b      	subs	r3, r3, r2
 800a0dc:	647b      	str	r3, [r7, #68]	; 0x44

        /* Now figure out the relative sector within the cluster.  */
        relative_sector =    (UINT)(byte_offset / ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 800a0de:	69fb      	ldr	r3, [r7, #28]
 800a0e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a0e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0e8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Read the directory sector into the internal memory buffer.  */

        /* Determine if there is a sub-directory.  */
        if (source_dir)
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d028      	beq.n	800a142 <_fx_directory_entry_read+0xd6>
        {

            /* Determine if this source directory has valid information from the previous call.  */
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d01e      	beq.n	800a136 <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 800a0f8:	69bb      	ldr	r3, [r7, #24]
 800a0fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if ((source_dir -> fx_dir_entry_last_search_cluster) &&
 800a0fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d319      	bcc.n	800a136 <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 800a102:	69bb      	ldr	r3, [r7, #24]
 800a104:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800a108:	69bb      	ldr	r3, [r7, #24]
 800a10a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
                (source_dir -> fx_dir_entry_last_search_relative_cluster <= relative_cluster) &&
 800a10e:	4299      	cmp	r1, r3
 800a110:	bf08      	it	eq
 800a112:	4290      	cmpeq	r0, r2
 800a114:	d10f      	bne.n	800a136 <_fx_directory_entry_read+0xca>
                (source_dir -> fx_dir_entry_last_search_byte_offset == source_dir -> fx_dir_entry_byte_offset))
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                (source_dir -> fx_dir_entry_last_search_log_sector == source_dir -> fx_dir_entry_log_sector) &&
 800a11e:	429a      	cmp	r2, r3
 800a120:	d109      	bne.n	800a136 <_fx_directory_entry_read+0xca>
            {

                /* Use the previous information to start the search.  */
                cluster =  source_dir -> fx_dir_entry_last_search_cluster;
 800a122:	69bb      	ldr	r3, [r7, #24]
 800a124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a126:	657b      	str	r3, [r7, #84]	; 0x54

                /* Setup the relative cluster index to the saved relative cluster.  */
                i =  source_dir -> fx_dir_entry_last_search_relative_cluster;
 800a128:	69bb      	ldr	r3, [r7, #24]
 800a12a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a12c:	667b      	str	r3, [r7, #100]	; 0x64

                /* Clear the search cluster.  It will be updated prior to successful return.  */
                source_dir -> fx_dir_entry_last_search_cluster =  0;
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	2200      	movs	r2, #0
 800a132:	651a      	str	r2, [r3, #80]	; 0x50
 800a134:	e00a      	b.n	800a14c <_fx_directory_entry_read+0xe0>
            else
            {

                /* Nothing from the previous directory read, just setup the starting cluster to the
                   beginning of the sub-directory.  */
                cluster =  source_dir -> fx_dir_entry_cluster;
 800a136:	69bb      	ldr	r3, [r7, #24]
 800a138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a13a:	657b      	str	r3, [r7, #84]	; 0x54

                /* Setup the relative cluster index to zero.  */
                i =  0;
 800a13c:	2300      	movs	r3, #0
 800a13e:	667b      	str	r3, [r7, #100]	; 0x64
 800a140:	e024      	b.n	800a18c <_fx_directory_entry_read+0x120>
        }
        else
        {

            /* No, setup the starting cluster to the FAT32 root cluster.  */
            cluster =  media_ptr -> fx_media_root_cluster_32;
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a146:	657b      	str	r3, [r7, #84]	; 0x54

            /* Setup the relative cluster index to zero.  */
            i =  0;
 800a148:	2300      	movs	r3, #0
 800a14a:	667b      	str	r3, [r7, #100]	; 0x64
        }

        /* Loop to position to the appropriate cluster.  */
        while (i < relative_cluster)
 800a14c:	e01e      	b.n	800a18c <_fx_directory_entry_read+0x120>
        {

            /* Check the value of the new cluster - it must be a valid cluster number
               or something is really wrong!  */
            if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800a14e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a150:	2b01      	cmp	r3, #1
 800a152:	d907      	bls.n	800a164 <_fx_directory_entry_read+0xf8>
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a15a:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800a15e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a160:	429a      	cmp	r2, r3
 800a162:	d301      	bcc.n	800a168 <_fx_directory_entry_read+0xfc>
            {

                /* Send error message back to caller.  */
                return(FX_FILE_CORRUPT);
 800a164:	2308      	movs	r3, #8
 800a166:	e302      	b.n	800a76e <_fx_directory_entry_read+0x702>
            }

            /* Read the next cluster.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800a168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a16c:	461a      	mov	r2, r3
 800a16e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a170:	69f8      	ldr	r0, [r7, #28]
 800a172:	f006 fc5d 	bl	8010a30 <_fx_utility_FAT_entry_read>
 800a176:	6378      	str	r0, [r7, #52]	; 0x34

            /* There is a potential for loop, but hardly anything can be done */

            /* Check for I/O error.  */
            if (status != FX_SUCCESS)
 800a178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d001      	beq.n	800a182 <_fx_directory_entry_read+0x116>
            {

                /* Return error code.  */
                return(status);
 800a17e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a180:	e2f5      	b.n	800a76e <_fx_directory_entry_read+0x702>
            }

            /* Setup the actual cluster.  */
            cluster = next_cluster;
 800a182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a184:	657b      	str	r3, [r7, #84]	; 0x54

            /* Increment the relative cluster number.  */
            i++;
 800a186:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a188:	3301      	adds	r3, #1
 800a18a:	667b      	str	r3, [r7, #100]	; 0x64
        while (i < relative_cluster)
 800a18c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a18e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a190:	429a      	cmp	r2, r3
 800a192:	d3dc      	bcc.n	800a14e <_fx_directory_entry_read+0xe2>
        }

        /* At this point, the directory data sector needs to be read.  */
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	6d1a      	ldr	r2, [r3, #80]	; 0x50
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a19a:	3b02      	subs	r3, #2
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800a19c:	69f9      	ldr	r1, [r7, #28]
 800a19e:	6d49      	ldr	r1, [r1, #84]	; 0x54
            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a1a0:	fb01 f303 	mul.w	r3, r1, r3
        logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a1a4:	4413      	add	r3, r2
 800a1a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a1a8:	4413      	add	r3, r2
 800a1aa:	64bb      	str	r3, [r7, #72]	; 0x48
            relative_sector;

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a1ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	60bb      	str	r3, [r7, #8]
 800a1b2:	60fa      	str	r2, [r7, #12]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a1b8:	2203      	movs	r2, #3
 800a1ba:	9202      	str	r2, [sp, #8]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	9201      	str	r2, [sp, #4]
 800a1c0:	9300      	str	r3, [sp, #0]
 800a1c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a1c6:	69f8      	ldr	r0, [r7, #28]
 800a1c8:	f008 f840 	bl	801224c <_fx_utility_logical_sector_read>
 800a1cc:	6378      	str	r0, [r7, #52]	; 0x34

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800a1ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d001      	beq.n	800a1d8 <_fx_directory_entry_read+0x16c>
        {

            /* Return error code.  */
            return(status);
 800a1d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1d6:	e2ca      	b.n	800a76e <_fx_directory_entry_read+0x702>
        }

        /* Calculate the byte offset within this sector.  */
        byte_offset =  byte_offset % media_ptr -> fx_media_bytes_per_sector;
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a1dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1de:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1e2:	fb01 f202 	mul.w	r2, r1, r2
 800a1e6:	1a9b      	subs	r3, r3, r2
 800a1e8:	647b      	str	r3, [r7, #68]	; 0x44
 800a1ea:	e02f      	b.n	800a24c <_fx_directory_entry_read+0x1e0>
    {

        /* Read the entry from the root directory.  */

        /* Determine which sector the requested root directory entry is in.  */
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800a1ec:	69fb      	ldr	r3, [r7, #28]
 800a1ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1f2:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_root_sector_start;
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
        logical_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800a1fa:	4413      	add	r3, r2
 800a1fc:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Read the logical directory sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a1fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a200:	2200      	movs	r2, #0
 800a202:	603b      	str	r3, [r7, #0]
 800a204:	607a      	str	r2, [r7, #4]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a20a:	2203      	movs	r2, #3
 800a20c:	9202      	str	r2, [sp, #8]
 800a20e:	2201      	movs	r2, #1
 800a210:	9201      	str	r2, [sp, #4]
 800a212:	9300      	str	r3, [sp, #0]
 800a214:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a218:	69f8      	ldr	r0, [r7, #28]
 800a21a:	f008 f817 	bl	801224c <_fx_utility_logical_sector_read>
 800a21e:	6378      	str	r0, [r7, #52]	; 0x34

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800a220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a222:	2b00      	cmp	r3, #0
 800a224:	d001      	beq.n	800a22a <_fx_directory_entry_read+0x1be>
        {

            /* Return error code.  */
            return(status);
 800a226:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a228:	e2a1      	b.n	800a76e <_fx_directory_entry_read+0x702>
        }

        /* Set the cluster and relative variables (not used in this case) to avoid any compiler
           warnings.  */
        relative_cluster =  relative_sector =  cluster =  0;
 800a22a:	2300      	movs	r3, #0
 800a22c:	657b      	str	r3, [r7, #84]	; 0x54
 800a22e:	2300      	movs	r3, #0
 800a230:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a234:	653b      	str	r3, [r7, #80]	; 0x50

        /* Now calculate the byte offset into this sector.  */
        byte_offset =  byte_offset -
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 800a236:	69fb      	ldr	r3, [r7, #28]
 800a238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a23a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a23c:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 800a23e:	69fa      	ldr	r2, [r7, #28]
 800a240:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((logical_sector - (ULONG)media_ptr -> fx_media_root_sector_start) *
 800a242:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 800a246:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a248:	1ad3      	subs	r3, r2, r3
 800a24a:	647b      	str	r3, [r7, #68]	; 0x44
    }

    /* Setup a pointer into the buffer.  */
    read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	689a      	ldr	r2, [r3, #8]
 800a250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a252:	4413      	add	r3, r2
 800a254:	643b      	str	r3, [r7, #64]	; 0x40

    /* Save the logical sector and byte offset in the returned directory entry.  */
    destination_ptr -> fx_dir_entry_log_sector =       logical_sector;
 800a256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a258:	2200      	movs	r2, #0
 800a25a:	4698      	mov	r8, r3
 800a25c:	4691      	mov	r9, r2
 800a25e:	693b      	ldr	r3, [r7, #16]
 800a260:	e9c3 8910 	strd	r8, r9, [r3, #64]	; 0x40
    destination_ptr -> fx_dir_entry_byte_offset =      byte_offset;
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a268:	649a      	str	r2, [r3, #72]	; 0x48

    /* Clear the short file name information.  */
    destination_ptr -> fx_dir_entry_long_name_shorted =  0;
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	2200      	movs	r2, #0
 800a26e:	619a      	str	r2, [r3, #24]
    destination_ptr -> fx_dir_entry_short_name[0]     =  0;
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	2200      	movs	r2, #0
 800a274:	711a      	strb	r2, [r3, #4]

    /* Setup short name pointer.  */
    short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 800a276:	693b      	ldr	r3, [r7, #16]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Check if long file name exists.  */
    get_short_name =  0;
 800a27c:	2300      	movs	r3, #0
 800a27e:	65bb      	str	r3, [r7, #88]	; 0x58
    if ((*(read_ptr + 11) == (UCHAR)FX_LONG_NAME) && (*read_ptr != (UCHAR)FX_DIR_ENTRY_FREE))
 800a280:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a282:	330b      	adds	r3, #11
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	2b0f      	cmp	r3, #15
 800a288:	f040 8129 	bne.w	800a4de <_fx_directory_entry_read+0x472>
 800a28c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	2be5      	cmp	r3, #229	; 0xe5
 800a292:	f000 8124 	beq.w	800a4de <_fx_directory_entry_read+0x472>
    {

        /* Collate the long name. */

        /* Pickup the file name length.  */
        i = (((UINT)(*read_ptr & (UCHAR)0x1f) - 1) * FX_LONG_NAME_ENTRY_LEN) & 0xFFFFFFFF;
 800a296:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	f003 021f 	and.w	r2, r3, #31
 800a29e:	4613      	mov	r3, r2
 800a2a0:	005b      	lsls	r3, r3, #1
 800a2a2:	4413      	add	r3, r2
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	4413      	add	r3, r2
 800a2a8:	3b0d      	subs	r3, #13
 800a2aa:	667b      	str	r3, [r7, #100]	; 0x64

        /* Save the number of LFN entries.  */
        number_of_lfns =  (UINT)(*read_ptr & (UCHAR)0x1f);
 800a2ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	f003 031f 	and.w	r3, r3, #31
 800a2b4:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check the file name size.  */
        if (i >= (FX_MAX_LONG_NAME_LEN - 1))
 800a2b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2b8:	2bfe      	cmp	r3, #254	; 0xfe
 800a2ba:	d908      	bls.n	800a2ce <_fx_directory_entry_read+0x262>
        {

            /* Name is too big, shorten it.  */
            get_short_name = 1;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	65bb      	str	r3, [r7, #88]	; 0x58
            destination_ptr -> fx_dir_entry_long_name_shorted =  (UINT)(*read_ptr & (UCHAR)0x1f);
 800a2c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2c2:	781b      	ldrb	r3, [r3, #0]
 800a2c4:	f003 021f 	and.w	r2, r3, #31
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	619a      	str	r2, [r3, #24]
 800a2cc:	e015      	b.n	800a2fa <_fx_directory_entry_read+0x28e>
        }
        else
        {

            /* Size of name is fine, save pointer to short file name.  */
            short_name_ptr = destination_ptr -> fx_dir_entry_short_name;
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	3304      	adds	r3, #4
 800a2d2:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Loop to make sure the long file name is NULL terminated.  */
            j = i + FX_LONG_NAME_ENTRY_LEN + 1;
 800a2d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2d6:	330e      	adds	r3, #14
 800a2d8:	663b      	str	r3, [r7, #96]	; 0x60
            do
            {
                /* Place a NULL in the long name.  */
                destination_ptr -> fx_dir_entry_name[i] =  0;
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2e0:	4413      	add	r3, r2
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	701a      	strb	r2, [r3, #0]

                /* Position to the next entry.  */
                i++;
 800a2e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	667b      	str	r3, [r7, #100]	; 0x64
            } while ((i < j) && (i < FX_MAX_LONG_NAME_LEN));
 800a2ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a2ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d202      	bcs.n	800a2fa <_fx_directory_entry_read+0x28e>
 800a2f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2f6:	2bff      	cmp	r3, #255	; 0xff
 800a2f8:	d9ef      	bls.n	800a2da <_fx_directory_entry_read+0x26e>
        /* Loop to pickup the rest of the name.  */
        do
        {

            /* Get the lower 5 bit containing the cardinality.  */
            card = (UINT)(*read_ptr & (UCHAR)0x1f) - 1;
 800a2fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2fc:	781b      	ldrb	r3, [r3, #0]
 800a2fe:	f003 031f 	and.w	r3, r3, #31
 800a302:	3b01      	subs	r3, #1
 800a304:	62bb      	str	r3, [r7, #40]	; 0x28

            /* For simplicity no checksum or cardinality checking is done */
            if (get_short_name == 0)
 800a306:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d168      	bne.n	800a3de <_fx_directory_entry_read+0x372>
            {

                /* Loop to pickup name.  */
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 800a30c:	2301      	movs	r3, #1
 800a30e:	667b      	str	r3, [r7, #100]	; 0x64
 800a310:	2300      	movs	r3, #0
 800a312:	663b      	str	r3, [r7, #96]	; 0x60
 800a314:	e060      	b.n	800a3d8 <_fx_directory_entry_read+0x36c>
                {

                    if ((i == 11) || (i == 26))
 800a316:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a318:	2b0b      	cmp	r3, #11
 800a31a:	d057      	beq.n	800a3cc <_fx_directory_entry_read+0x360>
 800a31c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a31e:	2b1a      	cmp	r3, #26
 800a320:	d054      	beq.n	800a3cc <_fx_directory_entry_read+0x360>
                    {
                        continue;
                    }

                    /* i = 12, 27 is not generated due to +=2 */
                    if (i == 13)
 800a322:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a324:	2b0d      	cmp	r3, #13
 800a326:	d102      	bne.n	800a32e <_fx_directory_entry_read+0x2c2>
                    {
                        i = 12;
 800a328:	230c      	movs	r3, #12
 800a32a:	667b      	str	r3, [r7, #100]	; 0x64
                        continue; /* this time next unicode is byte offset 14*/
 800a32c:	e051      	b.n	800a3d2 <_fx_directory_entry_read+0x366>
                    }

                    /* Determine if there is an actual unicode character present.  */
                    if (read_ptr[i + 1])
 800a32e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a330:	3301      	adds	r3, #1
 800a332:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a334:	4413      	add	r3, r2
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d014      	beq.n	800a366 <_fx_directory_entry_read+0x2fa>
                    {

                        /* Extended byte is non-zero, make sure both bytes of the unicode entry are not
                           all ones, since this is a normal case.  */
                        if ((read_ptr[i + 1] != (UCHAR)0xFF) || (read_ptr[i] != (UCHAR)0xFF))
 800a33c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a33e:	3301      	adds	r3, #1
 800a340:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a342:	4413      	add	r3, r2
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	2bff      	cmp	r3, #255	; 0xff
 800a348:	d105      	bne.n	800a356 <_fx_directory_entry_read+0x2ea>
 800a34a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a34c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a34e:	4413      	add	r3, r2
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	2bff      	cmp	r3, #255	; 0xff
 800a354:	d007      	beq.n	800a366 <_fx_directory_entry_read+0x2fa>
                        {

                            /* Name is an actual unicode name, shorten it.  */
                            get_short_name = 1;
 800a356:	2301      	movs	r3, #1
 800a358:	65bb      	str	r3, [r7, #88]	; 0x58

                            /* Save the number of directory entries the LFN has.  This will be
                               used later when updating the 8.3 portion of the LFN.  */
                            destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a35e:	619a      	str	r2, [r3, #24]

                            /* Setup short name pointer.  */
                            short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	63fb      	str	r3, [r7, #60]	; 0x3c
                        }
                    }

                    /* Determine if the character is NULL.  */
                    if ((read_ptr[i] == FX_NULL) || (read_ptr[i] == (UCHAR)0xFF))
 800a366:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a36a:	4413      	add	r3, r2
 800a36c:	781b      	ldrb	r3, [r3, #0]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d02e      	beq.n	800a3d0 <_fx_directory_entry_read+0x364>
 800a372:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a374:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a376:	4413      	add	r3, r2
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	2bff      	cmp	r3, #255	; 0xff
 800a37c:	d028      	beq.n	800a3d0 <_fx_directory_entry_read+0x364>
                    {
                        continue;
                    }

                    /* Determine if the name is too big.  */
                    if ((card * 13 + j) >= (FX_MAX_LONG_NAME_LEN - 1))
 800a37e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a380:	4613      	mov	r3, r2
 800a382:	005b      	lsls	r3, r3, #1
 800a384:	4413      	add	r3, r2
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	441a      	add	r2, r3
 800a38a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a38c:	4413      	add	r3, r2
 800a38e:	2bfe      	cmp	r3, #254	; 0xfe
 800a390:	d908      	bls.n	800a3a4 <_fx_directory_entry_read+0x338>
                    {

                        /* Name is actually too big, shorten it.  */
                        get_short_name =  1;
 800a392:	2301      	movs	r3, #1
 800a394:	65bb      	str	r3, [r7, #88]	; 0x58

                        /* Save the number of directory entries the LFN has.  This will be
                           used later when updating the 8.3 portion of the LFN.  */
                        destination_ptr -> fx_dir_entry_long_name_shorted =  number_of_lfns;
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a39a:	619a      	str	r2, [r3, #24]

                        /* Also reposition the short name pointer.  */
                        short_name_ptr =  destination_ptr -> fx_dir_entry_name;
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	63fb      	str	r3, [r7, #60]	; 0x3c

                        break;
 800a3a2:	e01c      	b.n	800a3de <_fx_directory_entry_read+0x372>
                    }

                    /* Each entry contains 13 unicode and first byte ASCII, second byte is extended. */
                    destination_ptr -> fx_dir_entry_name[13 * card + j] = (CHAR)read_ptr[i];
 800a3a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3a8:	18d1      	adds	r1, r2, r3
 800a3aa:	693b      	ldr	r3, [r7, #16]
 800a3ac:	6818      	ldr	r0, [r3, #0]
 800a3ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	005b      	lsls	r3, r3, #1
 800a3b4:	4413      	add	r3, r2
 800a3b6:	009b      	lsls	r3, r3, #2
 800a3b8:	441a      	add	r2, r3
 800a3ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3bc:	4413      	add	r3, r2
 800a3be:	4403      	add	r3, r0
 800a3c0:	780a      	ldrb	r2, [r1, #0]
 800a3c2:	701a      	strb	r2, [r3, #0]

                    j++;
 800a3c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	663b      	str	r3, [r7, #96]	; 0x60
 800a3ca:	e002      	b.n	800a3d2 <_fx_directory_entry_read+0x366>
                        continue;
 800a3cc:	bf00      	nop
 800a3ce:	e000      	b.n	800a3d2 <_fx_directory_entry_read+0x366>
                        continue;
 800a3d0:	bf00      	nop
                for (i = 1, j = 0; i < FX_DIR_ENTRY_SIZE; i += 2)
 800a3d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3d4:	3302      	adds	r3, #2
 800a3d6:	667b      	str	r3, [r7, #100]	; 0x64
 800a3d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3da:	2b1f      	cmp	r3, #31
 800a3dc:	d99b      	bls.n	800a316 <_fx_directory_entry_read+0x2aa>
                }
            }

            /* Determine if a new sector needs to be read.  */
            if (byte_offset + FX_DIR_ENTRY_SIZE >= media_ptr -> fx_media_bytes_per_sector)
 800a3de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3e0:	f103 0220 	add.w	r2, r3, #32
 800a3e4:	69fb      	ldr	r3, [r7, #28]
 800a3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d365      	bcc.n	800a4b8 <_fx_directory_entry_read+0x44c>
            {

                /* Determine if a sub-directory or FAT32 root directory is specified.  */
                if ((source_dir) || (media_ptr -> fx_media_32_bit_FAT))
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d103      	bne.n	800a3fa <_fx_directory_entry_read+0x38e>
 800a3f2:	69fb      	ldr	r3, [r7, #28]
 800a3f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d038      	beq.n	800a46c <_fx_directory_entry_read+0x400>
                {

                    /* Determine the next sector of the directory entry.  */
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3fe:	3b01      	subs	r3, #1
 800a400:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a402:	429a      	cmp	r2, r3
 800a404:	d206      	bcs.n	800a414 <_fx_directory_entry_read+0x3a8>
                    {

                        /* More sectors in this cluster.  */

                        /* Simply increment the logical sector.  */
                        logical_sector++;
 800a406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a408:	3301      	adds	r3, #1
 800a40a:	64bb      	str	r3, [r7, #72]	; 0x48

                        /* Increment the relative sector.  */
                        relative_sector++;
 800a40c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a40e:	3301      	adds	r3, #1
 800a410:	64fb      	str	r3, [r7, #76]	; 0x4c
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800a412:	e038      	b.n	800a486 <_fx_directory_entry_read+0x41a>
                    {

                        /* We need to move to the next cluster.  */

                        /* Pickup the next cluster.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800a414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a418:	461a      	mov	r2, r3
 800a41a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a41c:	69f8      	ldr	r0, [r7, #28]
 800a41e:	f006 fb07 	bl	8010a30 <_fx_utility_FAT_entry_read>
 800a422:	6378      	str	r0, [r7, #52]	; 0x34

                        /* Check for I/O error.  */
                        if (status != FX_SUCCESS)
 800a424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a426:	2b00      	cmp	r3, #0
 800a428:	d001      	beq.n	800a42e <_fx_directory_entry_read+0x3c2>
                        {

                            /* Return error code.  */
                            return(status);
 800a42a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a42c:	e19f      	b.n	800a76e <_fx_directory_entry_read+0x702>
                        }

                        /* Copy next cluster to the current cluster.  */
                        cluster =  next_cluster;
 800a42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a430:	657b      	str	r3, [r7, #84]	; 0x54

                        /* Check the value of the new cluster - it must be a valid cluster number
                           or something is really wrong!  */
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800a432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a434:	2b01      	cmp	r3, #1
 800a436:	d907      	bls.n	800a448 <_fx_directory_entry_read+0x3dc>
 800a438:	69fb      	ldr	r3, [r7, #28]
 800a43a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a43e:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800a442:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a444:	429a      	cmp	r2, r3
 800a446:	d301      	bcc.n	800a44c <_fx_directory_entry_read+0x3e0>
                        {

                            /* Send error message back to caller.  */
                            return(FX_FILE_CORRUPT);
 800a448:	2308      	movs	r3, #8
 800a44a:	e190      	b.n	800a76e <_fx_directory_entry_read+0x702>
                        }

                        /* Now increment the relative cluster.  */
                        relative_cluster++;
 800a44c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a44e:	3301      	adds	r3, #1
 800a450:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Setup the relative sector (this is zero for subsequent cluster.  */
                        relative_sector =  0;
 800a452:	2300      	movs	r3, #0
 800a454:	64fb      	str	r3, [r7, #76]	; 0x4c

                        /* Calculate the next logical sector.  */
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a45a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a45c:	3b02      	subs	r3, #2
                             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800a45e:	69f9      	ldr	r1, [r7, #28]
 800a460:	6d49      	ldr	r1, [r1, #84]	; 0x54
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a462:	fb01 f303 	mul.w	r3, r1, r3
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a466:	4413      	add	r3, r2
 800a468:	64bb      	str	r3, [r7, #72]	; 0x48
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800a46a:	e00c      	b.n	800a486 <_fx_directory_entry_read+0x41a>
                {

                    /* Non-FAT 32 root directory.  */

                    /* Advance to the next sector.  */
                    logical_sector++;
 800a46c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a46e:	3301      	adds	r3, #1
 800a470:	64bb      	str	r3, [r7, #72]	; 0x48

                    /* Determine if the logical sector is valid.  */
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_root_sector_start + media_ptr -> fx_media_root_sectors))
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a476:	69fb      	ldr	r3, [r7, #28]
 800a478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a47a:	4413      	add	r3, r2
 800a47c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a47e:	429a      	cmp	r2, r3
 800a480:	d301      	bcc.n	800a486 <_fx_directory_entry_read+0x41a>
                    {

                        /* Trying to read past root directory - send error message back to caller.  */
                        return(FX_FILE_CORRUPT);
 800a482:	2308      	movs	r3, #8
 800a484:	e173      	b.n	800a76e <_fx_directory_entry_read+0x702>
                    }
                }

                /* Read the new sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a488:	2200      	movs	r2, #0
 800a48a:	469a      	mov	sl, r3
 800a48c:	4693      	mov	fp, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a492:	2203      	movs	r2, #3
 800a494:	9202      	str	r2, [sp, #8]
 800a496:	2201      	movs	r2, #1
 800a498:	9201      	str	r2, [sp, #4]
 800a49a:	9300      	str	r3, [sp, #0]
 800a49c:	4652      	mov	r2, sl
 800a49e:	465b      	mov	r3, fp
 800a4a0:	69f8      	ldr	r0, [r7, #28]
 800a4a2:	f007 fed3 	bl	801224c <_fx_utility_logical_sector_read>
 800a4a6:	6378      	str	r0, [r7, #52]	; 0x34

                /* Check I/O status.  */
                if (status != FX_SUCCESS)
 800a4a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d001      	beq.n	800a4b2 <_fx_directory_entry_read+0x446>
                {
                    return(status);
 800a4ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4b0:	e15d      	b.n	800a76e <_fx_directory_entry_read+0x702>
                }

                /* Set the byte offset to 0 for new sector.  */
                byte_offset = 0;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	647b      	str	r3, [r7, #68]	; 0x44
 800a4b6:	e002      	b.n	800a4be <_fx_directory_entry_read+0x452>
            }
            else
            {

                /* Calculate the new byte offset.  */
                byte_offset += FX_DIR_ENTRY_SIZE;
 800a4b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4ba:	3320      	adds	r3, #32
 800a4bc:	647b      	str	r3, [r7, #68]	; 0x44
            }

            /* Calculate the next read pointer.  */
            read_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT) byte_offset;
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	689a      	ldr	r2, [r3, #8]
 800a4c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4c4:	4413      	add	r3, r2
 800a4c6:	643b      	str	r3, [r7, #64]	; 0x40

            /* Move to the next entry.  */
            entry++;
 800a4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	63bb      	str	r3, [r7, #56]	; 0x38
        } while (card > 0);
 800a4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	f47f af12 	bne.w	800a2fa <_fx_directory_entry_read+0x28e>

        /* Set flag indicating long file name is present.  */
        destination_ptr -> fx_dir_entry_long_name_present = 1;
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	2201      	movs	r2, #1
 800a4da:	615a      	str	r2, [r3, #20]
 800a4dc:	e001      	b.n	800a4e2 <_fx_directory_entry_read+0x476>
    }
    else
    {
        /* No long file name is present.  */
        get_short_name = 1;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    /* Determine if we need to clear the long name flag.  */
    if (get_short_name == 1)
 800a4e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d102      	bne.n	800a4ee <_fx_directory_entry_read+0x482>
    {

        /* Clear the long name flag.  */
        destination_ptr -> fx_dir_entry_long_name_present =  0;
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	615a      	str	r2, [r3, #20]
    }

    /* Pickup the short file name.  */
    short_name_ptr[0] =  0;
 800a4ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	701a      	strb	r2, [r3, #0]
    dotflag =  0;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	65fb      	str	r3, [r7, #92]	; 0x5c
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	667b      	str	r3, [r7, #100]	; 0x64
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	663b      	str	r3, [r7, #96]	; 0x60
 800a500:	e03d      	b.n	800a57e <_fx_directory_entry_read+0x512>
    {

        /* Check for a NULL.  */
        if ((CHAR)read_ptr[i] == 0)
 800a502:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a504:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a506:	4413      	add	r3, r2
 800a508:	781b      	ldrb	r3, [r3, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d03b      	beq.n	800a586 <_fx_directory_entry_read+0x51a>
            break;
        }

        /* Check for a dot.  This happens for the first two directory entries, no
           extra dot is needed.  */
        if ((CHAR)read_ptr[i] == '.')
 800a50e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a510:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a512:	4413      	add	r3, r2
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	2b2e      	cmp	r3, #46	; 0x2e
 800a518:	d101      	bne.n	800a51e <_fx_directory_entry_read+0x4b2>
        {
            dotflag =  2;
 800a51a:	2302      	movs	r3, #2
 800a51c:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* Check for a space.  */
        if ((CHAR)read_ptr[i] == ' ')
 800a51e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a520:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a522:	4413      	add	r3, r2
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	2b20      	cmp	r3, #32
 800a528:	d105      	bne.n	800a536 <_fx_directory_entry_read+0x4ca>
        {
            /* Put a dot if a character comes after space.  */
            if (dotflag == 0)
 800a52a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d122      	bne.n	800a576 <_fx_directory_entry_read+0x50a>
            {
                dotflag =  1;
 800a530:	2301      	movs	r3, #1
 800a532:	65fb      	str	r3, [r7, #92]	; 0x5c
            }
            continue;
 800a534:	e01f      	b.n	800a576 <_fx_directory_entry_read+0x50a>
        }

        /* Check for the main short file name size.  */
        if (i == FX_DIR_NAME_SIZE)
 800a536:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a538:	2b08      	cmp	r3, #8
 800a53a:	d104      	bne.n	800a546 <_fx_directory_entry_read+0x4da>
        {
            /* Check to see if we need to insert a dot.  */
            if (dotflag == 0)
 800a53c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d101      	bne.n	800a546 <_fx_directory_entry_read+0x4da>
            {
                dotflag =  1;
 800a542:	2301      	movs	r3, #1
 800a544:	65fb      	str	r3, [r7, #92]	; 0x5c
            }
        }

        /* Check to see if we need to add a dot.  */
        if (dotflag == 1)
 800a546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d108      	bne.n	800a55e <_fx_directory_entry_read+0x4f2>
        {
            /* Add dot to short file name.  */
            short_name_ptr[j++] =  '.';
 800a54c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a54e:	1c5a      	adds	r2, r3, #1
 800a550:	663a      	str	r2, [r7, #96]	; 0x60
 800a552:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a554:	4413      	add	r3, r2
 800a556:	222e      	movs	r2, #46	; 0x2e
 800a558:	701a      	strb	r2, [r3, #0]
            dotflag =  2;    /* no more dot for spaces */
 800a55a:	2302      	movs	r3, #2
 800a55c:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        /* Copy a character.  */
        short_name_ptr[j] =  (CHAR)read_ptr[i];
 800a55e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a562:	441a      	add	r2, r3
 800a564:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a566:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a568:	440b      	add	r3, r1
 800a56a:	7812      	ldrb	r2, [r2, #0]
 800a56c:	701a      	strb	r2, [r3, #0]

        /* Increment size.  */
        j++;
 800a56e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a570:	3301      	adds	r3, #1
 800a572:	663b      	str	r3, [r7, #96]	; 0x60
 800a574:	e000      	b.n	800a578 <_fx_directory_entry_read+0x50c>
            continue;
 800a576:	bf00      	nop
    for (i = 0, j = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800a578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a57a:	3301      	adds	r3, #1
 800a57c:	667b      	str	r3, [r7, #100]	; 0x64
 800a57e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a580:	2b0a      	cmp	r3, #10
 800a582:	d9be      	bls.n	800a502 <_fx_directory_entry_read+0x496>
 800a584:	e000      	b.n	800a588 <_fx_directory_entry_read+0x51c>
            break;
 800a586:	bf00      	nop
    }

    /* Determine if a long file name is present and its associated short file
       name is actually free.  */
    if ((destination_ptr -> fx_dir_entry_long_name_present) && (((UCHAR)short_name_ptr[0]) == (UCHAR)FX_DIR_ENTRY_FREE))
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	695b      	ldr	r3, [r3, #20]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d00a      	beq.n	800a5a6 <_fx_directory_entry_read+0x53a>
 800a590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a592:	781b      	ldrb	r3, [r3, #0]
 800a594:	2be5      	cmp	r3, #229	; 0xe5
 800a596:	d106      	bne.n	800a5a6 <_fx_directory_entry_read+0x53a>
    {

        /* Yes, the short file name is really free even though long file name entries directly precede it.
           In this case, simply place the free directory marker at the front of the long file name.  */
        destination_ptr -> fx_dir_entry_name[0] =  (CHAR)FX_DIR_ENTRY_FREE;
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	22e5      	movs	r2, #229	; 0xe5
 800a59e:	701a      	strb	r2, [r3, #0]
        short_name_ptr[0] =  (CHAR)0;
 800a5a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	701a      	strb	r2, [r3, #0]
    }

    /* Determine if the short name pointer is NULL while the read pointer is
       non-NULL.  */
    if ((short_name_ptr[0] == 0) && (read_ptr[0] == ' '))
 800a5a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d114      	bne.n	800a5d8 <_fx_directory_entry_read+0x56c>
 800a5ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5b0:	781b      	ldrb	r3, [r3, #0]
 800a5b2:	2b20      	cmp	r3, #32
 800a5b4:	d110      	bne.n	800a5d8 <_fx_directory_entry_read+0x56c>
    {

        /* This condition can occur with an all blank volume name.  Simply
           copy the volume name to the short name in this case.  */
        for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	663b      	str	r3, [r7, #96]	; 0x60
 800a5ba:	e00a      	b.n	800a5d2 <_fx_directory_entry_read+0x566>
        {

            /* Copy a byte of the volume name.  */
            short_name_ptr[j] =  (CHAR)read_ptr[j];
 800a5bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a5be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5c0:	441a      	add	r2, r3
 800a5c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a5c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5c6:	440b      	add	r3, r1
 800a5c8:	7812      	ldrb	r2, [r2, #0]
 800a5ca:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800a5cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	663b      	str	r3, [r7, #96]	; 0x60
 800a5d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5d4:	2b0a      	cmp	r3, #10
 800a5d6:	d9f1      	bls.n	800a5bc <_fx_directory_entry_read+0x550>
        }
    }

    /* Set end of string to null.  */
    short_name_ptr[j] = 0;
 800a5d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a5da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a5dc:	4413      	add	r3, r2
 800a5de:	2200      	movs	r2, #0
 800a5e0:	701a      	strb	r2, [r3, #0]

    /* Load up the destination directory entry.  */
    read_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 800a5e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5e4:	330b      	adds	r3, #11
 800a5e6:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the attribute into the destination.  */
    destination_ptr -> fx_dir_entry_attributes =  *read_ptr++;
 800a5e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5ea:	1c5a      	adds	r2, r3, #1
 800a5ec:	643a      	str	r2, [r7, #64]	; 0x40
 800a5ee:	781a      	ldrb	r2, [r3, #0]
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	771a      	strb	r2, [r3, #28]

    /* Pickup the reserved byte.  */
    destination_ptr -> fx_dir_entry_reserved =  *read_ptr++;
 800a5f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5f6:	1c5a      	adds	r2, r3, #1
 800a5f8:	643a      	str	r2, [r7, #64]	; 0x40
 800a5fa:	781a      	ldrb	r2, [r3, #0]
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	775a      	strb	r2, [r3, #29]
         BIT3 - set if 8.3 is all in lower case and no extended filename.
         BIT4 - set for file, clear for directory entry if no extended filename.

       This is true for all NT systems. Prior to NT follows MSDOS FAT documentation and
       is set to 0x00, all bits cleared. Therefore if BIT3 is set force lowercase.  */
    if ((get_short_name) && (destination_ptr -> fx_dir_entry_reserved & 0x08))
 800a600:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a602:	2b00      	cmp	r3, #0
 800a604:	d02a      	beq.n	800a65c <_fx_directory_entry_read+0x5f0>
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	7f5b      	ldrb	r3, [r3, #29]
 800a60a:	f003 0308 	and.w	r3, r3, #8
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d024      	beq.n	800a65c <_fx_directory_entry_read+0x5f0>
    {

        /* Microsoft undocumented NT file name feature... convert short name to lower
           case.  */
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 800a612:	2300      	movs	r3, #0
 800a614:	663b      	str	r3, [r7, #96]	; 0x60
 800a616:	e018      	b.n	800a64a <_fx_directory_entry_read+0x5de>
        {

            /* Determine if an upper case character is present.  */
            if ((short_name_ptr[j] >= 'A') && (short_name_ptr[j] <= 'Z'))
 800a618:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a61a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a61c:	4413      	add	r3, r2
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	2b40      	cmp	r3, #64	; 0x40
 800a622:	d90f      	bls.n	800a644 <_fx_directory_entry_read+0x5d8>
 800a624:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a626:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a628:	4413      	add	r3, r2
 800a62a:	781b      	ldrb	r3, [r3, #0]
 800a62c:	2b5a      	cmp	r3, #90	; 0x5a
 800a62e:	d809      	bhi.n	800a644 <_fx_directory_entry_read+0x5d8>
            {

                /* Yes, an upper case character is present. Force it to lower case.  */
                short_name_ptr[j] =  (CHAR)(short_name_ptr[j] + 32);
 800a630:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a634:	4413      	add	r3, r2
 800a636:	781a      	ldrb	r2, [r3, #0]
 800a638:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a63a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a63c:	440b      	add	r3, r1
 800a63e:	3220      	adds	r2, #32
 800a640:	b2d2      	uxtb	r2, r2
 800a642:	701a      	strb	r2, [r3, #0]
        for (j = 0; j <= (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE) && (short_name_ptr[j] != 0x00); j++)
 800a644:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a646:	3301      	adds	r3, #1
 800a648:	663b      	str	r3, [r7, #96]	; 0x60
 800a64a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a64c:	2b0b      	cmp	r3, #11
 800a64e:	d805      	bhi.n	800a65c <_fx_directory_entry_read+0x5f0>
 800a650:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a652:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a654:	4413      	add	r3, r2
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d1dd      	bne.n	800a618 <_fx_directory_entry_read+0x5ac>
            }
        }
    }

    /* Pickup the created time in milliseconds.  */
    destination_ptr -> fx_dir_entry_created_time_ms =  *read_ptr++;
 800a65c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a65e:	1c5a      	adds	r2, r3, #1
 800a660:	643a      	str	r2, [r7, #64]	; 0x40
 800a662:	781a      	ldrb	r2, [r3, #0]
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	779a      	strb	r2, [r3, #30]

    /* Pickup the created time.  */
    destination_ptr -> fx_dir_entry_created_time =  _fx_utility_16_unsigned_read(read_ptr);
 800a668:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a66a:	f006 f97b 	bl	8010964 <_fx_utility_16_unsigned_read>
 800a66e:	4602      	mov	r2, r0
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	621a      	str	r2, [r3, #32]
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800a674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a676:	3302      	adds	r3, #2
 800a678:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the created date.  */
    destination_ptr -> fx_dir_entry_created_date =  _fx_utility_16_unsigned_read(read_ptr);
 800a67a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a67c:	f006 f972 	bl	8010964 <_fx_utility_16_unsigned_read>
 800a680:	4602      	mov	r2, r0
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	625a      	str	r2, [r3, #36]	; 0x24
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800a686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a688:	3302      	adds	r3, #2
 800a68a:	643b      	str	r3, [r7, #64]	; 0x40

    /* Pickup the last accessed date.  */
    destination_ptr -> fx_dir_entry_last_accessed_date =  _fx_utility_16_unsigned_read(read_ptr);
 800a68c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a68e:	f006 f969 	bl	8010964 <_fx_utility_16_unsigned_read>
 800a692:	4602      	mov	r2, r0
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	629a      	str	r2, [r3, #40]	; 0x28
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800a698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a69a:	3302      	adds	r3, #2
 800a69c:	643b      	str	r3, [r7, #64]	; 0x40

    /* read the upper 2 bytes of starting cluster - required only for 32 bit FAT */
    if (media_ptr -> fx_media_32_bit_FAT)
 800a69e:	69fb      	ldr	r3, [r7, #28]
 800a6a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d00b      	beq.n	800a6be <_fx_directory_entry_read+0x652>
    {

        /* FAT32 only.  */
        destination_ptr -> fx_dir_entry_cluster =  _fx_utility_16_unsigned_read(read_ptr);
 800a6a6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a6a8:	f006 f95c 	bl	8010964 <_fx_utility_16_unsigned_read>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	635a      	str	r2, [r3, #52]	; 0x34
        destination_ptr -> fx_dir_entry_cluster <<= 16;
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6b6:	041a      	lsls	r2, r3, #16
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	635a      	str	r2, [r3, #52]	; 0x34
 800a6bc:	e002      	b.n	800a6c4 <_fx_directory_entry_read+0x658>
    }
    else
    {
        /* Not required for non FAT32.  */
        destination_ptr -> fx_dir_entry_cluster =  0;
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	635a      	str	r2, [r3, #52]	; 0x34
    }

    /* Advance the read pointer.  */
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800a6c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6c6:	3302      	adds	r3, #2
 800a6c8:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the time into the destination.  */
    destination_ptr -> fx_dir_entry_time =  _fx_utility_16_unsigned_read(read_ptr);
 800a6ca:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a6cc:	f006 f94a 	bl	8010964 <_fx_utility_16_unsigned_read>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	62da      	str	r2, [r3, #44]	; 0x2c
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800a6d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6d8:	3302      	adds	r3, #2
 800a6da:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the date into the destination.  */
    destination_ptr -> fx_dir_entry_date =  _fx_utility_16_unsigned_read(read_ptr);
 800a6dc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a6de:	f006 f941 	bl	8010964 <_fx_utility_16_unsigned_read>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	631a      	str	r2, [r3, #48]	; 0x30
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800a6e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6ea:	3302      	adds	r3, #2
 800a6ec:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the starting cluster into the destination.  */
    destination_ptr -> fx_dir_entry_cluster +=  _fx_utility_16_unsigned_read(read_ptr);
 800a6ee:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a6f0:	f006 f938 	bl	8010964 <_fx_utility_16_unsigned_read>
 800a6f4:	4602      	mov	r2, r0
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6fa:	441a      	add	r2, r3
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	635a      	str	r2, [r3, #52]	; 0x34
    read_ptr =  read_ptr + 2;  /* Always 2 bytes */
 800a700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a702:	3302      	adds	r3, #2
 800a704:	643b      	str	r3, [r7, #64]	; 0x40

    /* Copy the file size into the destination.  */
    destination_ptr -> fx_dir_entry_file_size =  _fx_utility_32_unsigned_read(read_ptr);
 800a706:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800a708:	f006 f954 	bl	80109b4 <_fx_utility_32_unsigned_read>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2200      	movs	r2, #0
 800a710:	461c      	mov	r4, r3
 800a712:	4615      	mov	r5, r2
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38

    /* Clear the destination search specific fields.  */
    destination_ptr -> fx_dir_entry_last_search_cluster =           0;
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	2200      	movs	r2, #0
 800a71e:	651a      	str	r2, [r3, #80]	; 0x50
    destination_ptr -> fx_dir_entry_last_search_relative_cluster =  0;
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	2200      	movs	r2, #0
 800a724:	655a      	str	r2, [r3, #84]	; 0x54
    destination_ptr -> fx_dir_entry_last_search_log_sector =        0;
 800a726:	6939      	ldr	r1, [r7, #16]
 800a728:	f04f 0200 	mov.w	r2, #0
 800a72c:	f04f 0300 	mov.w	r3, #0
 800a730:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
    destination_ptr -> fx_dir_entry_last_search_byte_offset =       0;
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	2200      	movs	r2, #0
 800a738:	661a      	str	r2, [r3, #96]	; 0x60

    /* Remember the entry number.  */
    destination_ptr -> fx_dir_entry_number =  entry;
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a73e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Return entry number.  */
    *entry_ptr =  entry;
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a744:	601a      	str	r2, [r3, #0]

    /* Determine if we should remember the last cluster and relative cluster.  */
    if (source_dir)
 800a746:	69bb      	ldr	r3, [r7, #24]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d00f      	beq.n	800a76c <_fx_directory_entry_read+0x700>
    {

        /* Yes, remember the last cluster and relative cluster for a subsequent call
           to read a directory entry.  */
        source_dir -> fx_dir_entry_last_search_cluster =           cluster;
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a750:	651a      	str	r2, [r3, #80]	; 0x50
        source_dir -> fx_dir_entry_last_search_relative_cluster =  relative_cluster;
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a756:	655a      	str	r2, [r3, #84]	; 0x54

        /* Also remember several other items that are unique to the directory... just to verify that the
           search information can be used.  */
        source_dir -> fx_dir_entry_last_search_log_sector =        source_dir -> fx_dir_entry_log_sector;
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800a75e:	69b9      	ldr	r1, [r7, #24]
 800a760:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        source_dir -> fx_dir_entry_last_search_byte_offset =       source_dir -> fx_dir_entry_byte_offset;
 800a764:	69bb      	ldr	r3, [r7, #24]
 800a766:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a768:	69bb      	ldr	r3, [r7, #24]
 800a76a:	661a      	str	r2, [r3, #96]	; 0x60
        destination_ptr -> fx_dir_entry_type = FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY;
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 800a76c:	2300      	movs	r3, #0
}
 800a76e:	4618      	mov	r0, r3
 800a770:	3768      	adds	r7, #104	; 0x68
 800a772:	46bd      	mov	sp, r7
 800a774:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a778 <_fx_directory_entry_write>:
/*  03-02-2021     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1.5  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_entry_write(FX_MEDIA *media_ptr, FX_DIR_ENTRY *entry_ptr)
{
 800a778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a77c:	b0a2      	sub	sp, #136	; 0x88
 800a77e:	af04      	add	r7, sp, #16
 800a780:	6178      	str	r0, [r7, #20]
 800a782:	6139      	str	r1, [r7, #16]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry write requests.  */
    media_ptr -> fx_media_directory_entry_writes++;
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800a78a:	1c5a      	adds	r2, r3, #1
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_WRITE, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine if this is entry is being deleted.  */
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	781b      	ldrb	r3, [r3, #0]
 800a798:	2be5      	cmp	r3, #229	; 0xe5
 800a79a:	d109      	bne.n	800a7b0 <_fx_directory_entry_write+0x38>
        ((UCHAR)entry_ptr -> fx_dir_entry_short_name[0] == (UCHAR)FX_DIR_ENTRY_FREE))
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	791b      	ldrb	r3, [r3, #4]
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 800a7a0:	2be5      	cmp	r3, #229	; 0xe5
 800a7a2:	d105      	bne.n	800a7b0 <_fx_directory_entry_write+0x38>
    {

        /* Yes, this is a request to delete the entry. Set the flag to remember this.  */
        delete_flag =  FX_TRUE;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Null the short file name.  */
        entry_ptr -> fx_dir_entry_short_name[0] =  0;
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	711a      	strb	r2, [r3, #4]
 800a7ae:	e001      	b.n	800a7b4 <_fx_directory_entry_write+0x3c>
    }
    else
    {

        /* Not a deleted entry. Set the flag to false.  */
        delete_flag =  FX_FALSE;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    /* Pickup the byte offset of the entry.  */
    byte_offset = entry_ptr -> fx_dir_entry_byte_offset;
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7b8:	637b      	str	r3, [r7, #52]	; 0x34

    /* Pickup the logical sector of the entry.  */
    logical_sector = (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800a7c0:	4613      	mov	r3, r2
 800a7c2:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Figure out where what cluster we are in.  */
    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d316      	bcc.n	800a7fc <_fx_directory_entry_write+0x84>
    {

        /* Calculate the cluster that this logical sector is in.  */
        cluster =  (logical_sector - media_ptr -> fx_media_data_sector_start) / (media_ptr -> fx_media_sectors_per_cluster) + FX_FAT_ENTRY_START;
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a7d4:	1ad2      	subs	r2, r2, r3
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7da:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7de:	3302      	adds	r3, #2
 800a7e0:	633b      	str	r3, [r7, #48]	; 0x30

        /* Calculate the relative cluster.  */
        relative_sector =  logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                              (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e8:	3b02      	subs	r3, #2
                                               ((ULONG)media_ptr -> fx_media_sectors_per_cluster)));
 800a7ea:	6979      	ldr	r1, [r7, #20]
 800a7ec:	6d49      	ldr	r1, [r1, #84]	; 0x54
                                              (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a7ee:	fb01 f303 	mul.w	r3, r1, r3
        relative_sector =  logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a7f2:	4413      	add	r3, r2
 800a7f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a7f6:	1ad3      	subs	r3, r2, r3
 800a7f8:	63bb      	str	r3, [r7, #56]	; 0x38
 800a7fa:	e003      	b.n	800a804 <_fx_directory_entry_write+0x8c>
    }
    else
    {

        /* Clear the cluster and the relative sector.  */
        cluster =  0;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	633b      	str	r3, [r7, #48]	; 0x30
        relative_sector =  0;
 800a800:	2300      	movs	r3, #0
 800a802:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Read the logical directory sector.  */
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	689a      	ldr	r2, [r3, #8]
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 800a80e:	2303      	movs	r3, #3
 800a810:	9302      	str	r3, [sp, #8]
 800a812:	2301      	movs	r3, #1
 800a814:	9301      	str	r3, [sp, #4]
 800a816:	9200      	str	r2, [sp, #0]
 800a818:	4602      	mov	r2, r0
 800a81a:	460b      	mov	r3, r1
 800a81c:	6978      	ldr	r0, [r7, #20]
 800a81e:	f007 fd15 	bl	801224c <_fx_utility_logical_sector_read>
 800a822:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 800a824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a826:	2b00      	cmp	r3, #0
 800a828:	d002      	beq.n	800a830 <_fx_directory_entry_write+0xb8>
    {

        /* Return the error status.  */
        return(status);
 800a82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a82c:	f000 bdda 	b.w	800b3e4 <_fx_directory_entry_write+0xc6c>
    }

    /* Setup a pointer into the buffer.  */
    sector_base_ptr = (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	673b      	str	r3, [r7, #112]	; 0x70
    work_ptr =  sector_base_ptr + (UINT)entry_ptr -> fx_dir_entry_byte_offset;
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a83a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a83c:	4413      	add	r3, r2
 800a83e:	677b      	str	r3, [r7, #116]	; 0x74
    changed_size = 0;
    changed_offset = entry_ptr -> fx_dir_entry_byte_offset;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if a long file name is present.  */
    if (entry_ptr -> fx_dir_entry_long_name_present)
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	695b      	ldr	r3, [r3, #20]
 800a844:	2b00      	cmp	r3, #0
 800a846:	f000 83cc 	beq.w	800afe2 <_fx_directory_entry_write+0x86a>
    {

        /* Yes, long name is present - prepare short name and write out this name.  */
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 800a84a:	2300      	movs	r3, #0
 800a84c:	653b      	str	r3, [r7, #80]	; 0x50
 800a84e:	2300      	movs	r3, #0
 800a850:	667b      	str	r3, [r7, #100]	; 0x64
 800a852:	2300      	movs	r3, #0
 800a854:	64bb      	str	r3, [r7, #72]	; 0x48
 800a856:	2300      	movs	r3, #0
 800a858:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a85a:	e02c      	b.n	800a8b6 <_fx_directory_entry_write+0x13e>
        {

            /* Check for a dot.  */
            if (entry_ptr -> fx_dir_entry_name[len] == '.')
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a862:	4413      	add	r3, r2
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	2b2e      	cmp	r3, #46	; 0x2e
 800a868:	d108      	bne.n	800a87c <_fx_directory_entry_write+0x104>
            {

                /* Check for leading dot. */
                if (len == 0)
 800a86a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d01e      	beq.n	800a8ae <_fx_directory_entry_write+0x136>
                    continue;
                }

                /* Yes, a dot is present.  From this position the extension will
                   be written.  */
                dotfound = i;
 800a870:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a872:	64fb      	str	r3, [r7, #76]	; 0x4c
                dotpos   = len + 1;
 800a874:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a876:	3301      	adds	r3, #1
 800a878:	64bb      	str	r3, [r7, #72]	; 0x48
                continue;
 800a87a:	e019      	b.n	800a8b0 <_fx_directory_entry_write+0x138>
            }

            /* Check for non-space and within the short file name length.  */
            if ((entry_ptr -> fx_dir_entry_name[len] != ' ') && (i < 8))
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	681a      	ldr	r2, [r3, #0]
 800a880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a882:	4413      	add	r3, r2
 800a884:	781b      	ldrb	r3, [r3, #0]
 800a886:	2b20      	cmp	r3, #32
 800a888:	d012      	beq.n	800a8b0 <_fx_directory_entry_write+0x138>
 800a88a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a88c:	2b07      	cmp	r3, #7
 800a88e:	d80f      	bhi.n	800a8b0 <_fx_directory_entry_write+0x138>
            {

                /* Copy characters into the short file name area.  */
                shortname[i] = entry_ptr -> fx_dir_entry_name[len];
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a896:	4413      	add	r3, r2
 800a898:	7819      	ldrb	r1, [r3, #0]
 800a89a:	f107 021c 	add.w	r2, r7, #28
 800a89e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8a0:	4413      	add	r3, r2
 800a8a2:	460a      	mov	r2, r1
 800a8a4:	701a      	strb	r2, [r3, #0]
                i++;
 800a8a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	667b      	str	r3, [r7, #100]	; 0x64
 800a8ac:	e000      	b.n	800a8b0 <_fx_directory_entry_write+0x138>
                    continue;
 800a8ae:	bf00      	nop
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 800a8b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	653b      	str	r3, [r7, #80]	; 0x50
 800a8b6:	693b      	ldr	r3, [r7, #16]
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8bc:	4413      	add	r3, r2
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d1cb      	bne.n	800a85c <_fx_directory_entry_write+0xe4>
            }
        }

        /* Fill remaining short file name with spaces.  */
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800a8c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a8c6:	663b      	str	r3, [r7, #96]	; 0x60
 800a8c8:	e008      	b.n	800a8dc <_fx_directory_entry_write+0x164>
        {
            shortname[j] =  ' ';
 800a8ca:	f107 021c 	add.w	r2, r7, #28
 800a8ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a8d0:	4413      	add	r3, r2
 800a8d2:	2220      	movs	r2, #32
 800a8d4:	701a      	strb	r2, [r3, #0]
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800a8d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a8d8:	3301      	adds	r3, #1
 800a8da:	663b      	str	r3, [r7, #96]	; 0x60
 800a8dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a8de:	2b0a      	cmp	r3, #10
 800a8e0:	d9f3      	bls.n	800a8ca <_fx_directory_entry_write+0x152>
        }

        /* Determine if a dot was encountered.  */
        if (dotpos)
 800a8e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d03e      	beq.n	800a966 <_fx_directory_entry_write+0x1ee>
        {

            /* Process relative to the dot position.  */
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8ee:	4413      	add	r3, r2
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d008      	beq.n	800a908 <_fx_directory_entry_write+0x190>
            {
                shortname[8] = entry_ptr -> fx_dir_entry_name[dotpos++];
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8fc:	1c59      	adds	r1, r3, #1
 800a8fe:	64b9      	str	r1, [r7, #72]	; 0x48
 800a900:	4413      	add	r3, r2
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a90e:	4413      	add	r3, r2
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d008      	beq.n	800a928 <_fx_directory_entry_write+0x1b0>
            {
                shortname[9] = entry_ptr -> fx_dir_entry_name[dotpos++];
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a91c:	1c59      	adds	r1, r3, #1
 800a91e:	64b9      	str	r1, [r7, #72]	; 0x48
 800a920:	4413      	add	r3, r2
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 800a928:	693b      	ldr	r3, [r7, #16]
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a92e:	4413      	add	r3, r2
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d008      	beq.n	800a948 <_fx_directory_entry_write+0x1d0>
            {
                shortname[10] = entry_ptr -> fx_dir_entry_name[dotpos++];
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a93c:	1c59      	adds	r1, r3, #1
 800a93e:	64b9      	str	r1, [r7, #72]	; 0x48
 800a940:	4413      	add	r3, r2
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }

            /* Determine if additional spaces are needed.  */
            i = dotfound;
 800a948:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a94a:	667b      	str	r3, [r7, #100]	; 0x64

            for (; dotfound <= 7; dotfound++)
 800a94c:	e008      	b.n	800a960 <_fx_directory_entry_write+0x1e8>
            {
                /* Add space...  */
                shortname[dotfound] = ' ';
 800a94e:	f107 021c 	add.w	r2, r7, #28
 800a952:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a954:	4413      	add	r3, r2
 800a956:	2220      	movs	r2, #32
 800a958:	701a      	strb	r2, [r3, #0]
            for (; dotfound <= 7; dotfound++)
 800a95a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a95c:	3301      	adds	r3, #1
 800a95e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a962:	2b07      	cmp	r3, #7
 800a964:	d9f3      	bls.n	800a94e <_fx_directory_entry_write+0x1d6>
            }
        }

        /* Each entry contains 13 unicode entries.  Calculate the remainder.  */
        if (len % 13 == 0)
 800a966:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a968:	4b8e      	ldr	r3, [pc, #568]	; (800aba4 <_fx_directory_entry_write+0x42c>)
 800a96a:	fba3 2301 	umull	r2, r3, r3, r1
 800a96e:	089a      	lsrs	r2, r3, #2
 800a970:	4613      	mov	r3, r2
 800a972:	005b      	lsls	r3, r3, #1
 800a974:	4413      	add	r3, r2
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	4413      	add	r3, r2
 800a97a:	1aca      	subs	r2, r1, r3
 800a97c:	2a00      	cmp	r2, #0
 800a97e:	d106      	bne.n	800a98e <_fx_directory_entry_write+0x216>
        {
            card =  len / 13;
 800a980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a982:	4a88      	ldr	r2, [pc, #544]	; (800aba4 <_fx_directory_entry_write+0x42c>)
 800a984:	fba2 2303 	umull	r2, r3, r2, r3
 800a988:	089b      	lsrs	r3, r3, #2
 800a98a:	657b      	str	r3, [r7, #84]	; 0x54
 800a98c:	e006      	b.n	800a99c <_fx_directory_entry_write+0x224>
        }
        else
        {
            card =  len / 13 + 1;
 800a98e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a990:	4a84      	ldr	r2, [pc, #528]	; (800aba4 <_fx_directory_entry_write+0x42c>)
 800a992:	fba2 2303 	umull	r2, r3, r2, r3
 800a996:	089b      	lsrs	r3, r3, #2
 800a998:	3301      	adds	r3, #1
 800a99a:	657b      	str	r3, [r7, #84]	; 0x54
        }

        /* Default the name match to true.  */
        match =  FX_TRUE;
 800a99c:	2301      	movs	r3, #1
 800a99e:	647b      	str	r3, [r7, #68]	; 0x44

        /* Loop through the newly derived short name and the original name and look
           for a non-matching character.  */
        l =  0;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	65bb      	str	r3, [r7, #88]	; 0x58
        k =  0;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	65fb      	str	r3, [r7, #92]	; 0x5c
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 800a9a8:	e03f      	b.n	800aa2a <_fx_directory_entry_write+0x2b2>
        {

            /* Determine if a space is detected in the short name. If so,
               advance to the extension index.  */
            if (shortname[k] == ' ')
 800a9aa:	f107 021c 	add.w	r2, r7, #28
 800a9ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9b0:	4413      	add	r3, r2
 800a9b2:	781b      	ldrb	r3, [r3, #0]
 800a9b4:	2b20      	cmp	r3, #32
 800a9b6:	d116      	bne.n	800a9e6 <_fx_directory_entry_write+0x26e>
            {

                /* The first pad space was detected. First, check for a name
                   without an extension.  */
                if (entry_ptr -> fx_dir_entry_name[l] == FX_NULL)
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9be:	4413      	add	r3, r2
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d035      	beq.n	800aa32 <_fx_directory_entry_write+0x2ba>
                    /* All is okay, get out of the loop!  */
                    break;
                }

                /* Now check for a period in the long name... if not, there is a non-match!  */
                if (entry_ptr -> fx_dir_entry_name[l] != '.')
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9cc:	4413      	add	r3, r2
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	2b2e      	cmp	r3, #46	; 0x2e
 800a9d2:	d002      	beq.n	800a9da <_fx_directory_entry_write+0x262>
                {

                    /* Set the match flag to false and exit the loop.  */
                    match =  FX_FALSE;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 800a9d8:	e02c      	b.n	800aa34 <_fx_directory_entry_write+0x2bc>
                }

                /* Otherwise move short file name index to the extension area and
                   increment the long file name index.  */
                k =  8;
 800a9da:	2308      	movs	r3, #8
 800a9dc:	65fb      	str	r3, [r7, #92]	; 0x5c
                l++;
 800a9de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	65bb      	str	r3, [r7, #88]	; 0x58

                /* Restart the loop at the top.  */
                continue;
 800a9e4:	e021      	b.n	800aa2a <_fx_directory_entry_write+0x2b2>
            }

            /* Check for the dot for the 8.3 match... it is no longer in the
               shortname but possibly still present in the long name.  */
            if ((k == 8) && (entry_ptr -> fx_dir_entry_name[l] == '.'))
 800a9e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9e8:	2b08      	cmp	r3, #8
 800a9ea:	d109      	bne.n	800aa00 <_fx_directory_entry_write+0x288>
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9f2:	4413      	add	r3, r2
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	2b2e      	cmp	r3, #46	; 0x2e
 800a9f8:	d102      	bne.n	800aa00 <_fx_directory_entry_write+0x288>
            {

                /* Yes, handle the implicit dot in the shortname by
                   positioning past it in the long name.  */
                l++;
 800a9fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	65bb      	str	r3, [r7, #88]	; 0x58
            }

            /* Do the names match?  */
            if (shortname[k] != entry_ptr -> fx_dir_entry_name[l])
 800aa00:	f107 021c 	add.w	r2, r7, #28
 800aa04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa06:	4413      	add	r3, r2
 800aa08:	781a      	ldrb	r2, [r3, #0]
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	6819      	ldr	r1, [r3, #0]
 800aa0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa10:	440b      	add	r3, r1
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d002      	beq.n	800aa1e <_fx_directory_entry_write+0x2a6>
            {

                /* No, the names do not match, set the match flag to false and
                   exit the loop.  */
                match =  FX_FALSE;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 800aa1c:	e00a      	b.n	800aa34 <_fx_directory_entry_write+0x2bc>
            }

            /* Move the indices forward.  */
            k++;
 800aa1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa20:	3301      	adds	r3, #1
 800aa22:	65fb      	str	r3, [r7, #92]	; 0x5c
            l++;
 800aa24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa26:	3301      	adds	r3, #1
 800aa28:	65bb      	str	r3, [r7, #88]	; 0x58
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 800aa2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa2c:	2b0a      	cmp	r3, #10
 800aa2e:	d9bc      	bls.n	800a9aa <_fx_directory_entry_write+0x232>
 800aa30:	e000      	b.n	800aa34 <_fx_directory_entry_write+0x2bc>
                    break;
 800aa32:	bf00      	nop
        }

        /* Check if there is a dot in the name, but no extension in the short name.  In this case, 
           we should create a mangled short name.  */
        if ((dotpos) && (shortname[8] == ' '))
 800aa34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d005      	beq.n	800aa46 <_fx_directory_entry_write+0x2ce>
 800aa3a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aa3e:	2b20      	cmp	r3, #32
 800aa40:	d101      	bne.n	800aa46 <_fx_directory_entry_write+0x2ce>
        {
        
            /* Something left.. the names do not match!  */
            match =  FX_FALSE;
 800aa42:	2300      	movs	r3, #0
 800aa44:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* One final check to make sure there is nothing left on the long file name.  */
        if (entry_ptr -> fx_dir_entry_name[l])
 800aa46:	693b      	ldr	r3, [r7, #16]
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa4c:	4413      	add	r3, r2
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d001      	beq.n	800aa58 <_fx_directory_entry_write+0x2e0>
        {

            /* Something left.. the names do not match!  */
            match =  FX_FALSE;
 800aa54:	2300      	movs	r3, #0
 800aa56:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Determine if the derived short name matches exactly the long file name. If so
           we don't need to mangle the name with a numeric value based on its entry.  */
        if (match == FX_FALSE)
 800aa58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d15a      	bne.n	800ab14 <_fx_directory_entry_write+0x39c>
        {

            /* Name does not match, create a mangled name.  */

            /* Generate short file name from LFN.  */
            entry = entry_ptr -> fx_dir_entry_number;
 800aa5e:	693b      	ldr	r3, [r7, #16]
 800aa60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa62:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Name suffice is between 000 and FFFF in hex, calculate this short file
               name's numeric component.  */
            entry = entry % 0x10000;
 800aa64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa66:	b29b      	uxth	r3, r3
 800aa68:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Build short name of the format xxx~NNNN.ext.  */
            if (i > 3)
 800aa6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa6c:	2b03      	cmp	r3, #3
 800aa6e:	d901      	bls.n	800aa74 <_fx_directory_entry_write+0x2fc>
            {
                i = 3;
 800aa70:	2303      	movs	r3, #3
 800aa72:	667b      	str	r3, [r7, #100]	; 0x64
            }
            shortname[i++] = '~';
 800aa74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa76:	1c5a      	adds	r2, r3, #1
 800aa78:	667a      	str	r2, [r7, #100]	; 0x64
 800aa7a:	3368      	adds	r3, #104	; 0x68
 800aa7c:	f107 0210 	add.w	r2, r7, #16
 800aa80:	4413      	add	r3, r2
 800aa82:	227e      	movs	r2, #126	; 0x7e
 800aa84:	f803 2c5c 	strb.w	r2, [r3, #-92]

            /* Loop to build the numeric part of the name.  */
            for (l = 0; l < 4; l++)
 800aa88:	2300      	movs	r3, #0
 800aa8a:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa8c:	e03f      	b.n	800ab0e <_fx_directory_entry_write+0x396>
            {
                
                /* Shift down the entry number based on the numeric position.  */
                if (l == 0)
 800aa8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d105      	bne.n	800aaa0 <_fx_directory_entry_write+0x328>
                {
                    temp =  ((entry >> 12) & 0xf);
 800aa94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa96:	0b1b      	lsrs	r3, r3, #12
 800aa98:	f003 030f 	and.w	r3, r3, #15
 800aa9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa9e:	e015      	b.n	800aacc <_fx_directory_entry_write+0x354>
                }
                else if (l == 1)
 800aaa0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d105      	bne.n	800aab2 <_fx_directory_entry_write+0x33a>
                {
                     temp = ((entry >> 8) & 0xf);
 800aaa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa8:	0a1b      	lsrs	r3, r3, #8
 800aaaa:	f003 030f 	and.w	r3, r3, #15
 800aaae:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aab0:	e00c      	b.n	800aacc <_fx_directory_entry_write+0x354>
                }
                else if (l == 2)
 800aab2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aab4:	2b02      	cmp	r3, #2
 800aab6:	d105      	bne.n	800aac4 <_fx_directory_entry_write+0x34c>
                {
                     temp = ((entry >> 4) & 0xf);
 800aab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaba:	091b      	lsrs	r3, r3, #4
 800aabc:	f003 030f 	and.w	r3, r3, #15
 800aac0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aac2:	e003      	b.n	800aacc <_fx_directory_entry_write+0x354>
                }
                else
                {
                     temp = ((entry) & 0xf);
 800aac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac6:	f003 030f 	and.w	r3, r3, #15
 800aaca:	66fb      	str	r3, [r7, #108]	; 0x6c
                }
                
                /* Now build hex value.  */
                if (temp > 9)
 800aacc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aace:	2b09      	cmp	r3, #9
 800aad0:	d90d      	bls.n	800aaee <_fx_directory_entry_write+0x376>
                    shortname[i++] =  (CHAR)('A' + (temp - 10));
 800aad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aad4:	b2da      	uxtb	r2, r3
 800aad6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aad8:	1c59      	adds	r1, r3, #1
 800aada:	6679      	str	r1, [r7, #100]	; 0x64
 800aadc:	3237      	adds	r2, #55	; 0x37
 800aade:	b2d2      	uxtb	r2, r2
 800aae0:	3368      	adds	r3, #104	; 0x68
 800aae2:	f107 0110 	add.w	r1, r7, #16
 800aae6:	440b      	add	r3, r1
 800aae8:	f803 2c5c 	strb.w	r2, [r3, #-92]
 800aaec:	e00c      	b.n	800ab08 <_fx_directory_entry_write+0x390>
                else
                    shortname[i++] =  (CHAR)('0' + temp);
 800aaee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaf0:	b2da      	uxtb	r2, r3
 800aaf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aaf4:	1c59      	adds	r1, r3, #1
 800aaf6:	6679      	str	r1, [r7, #100]	; 0x64
 800aaf8:	3230      	adds	r2, #48	; 0x30
 800aafa:	b2d2      	uxtb	r2, r2
 800aafc:	3368      	adds	r3, #104	; 0x68
 800aafe:	f107 0110 	add.w	r1, r7, #16
 800ab02:	440b      	add	r3, r1
 800ab04:	f803 2c5c 	strb.w	r2, [r3, #-92]
            for (l = 0; l < 4; l++)
 800ab08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ab10:	2b03      	cmp	r3, #3
 800ab12:	d9bc      	bls.n	800aa8e <_fx_directory_entry_write+0x316>
            }
        }

        /* Set end of short string to NULL.   */
        shortname[11] = 0;
 800ab14:	2300      	movs	r3, #0
 800ab16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* Determine if the first character of the short file name is the directory free
           value. If so, it must be changed.  */
        if (((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (delete_flag == FX_FALSE))
 800ab1a:	7f3b      	ldrb	r3, [r7, #28]
 800ab1c:	2be5      	cmp	r3, #229	; 0xe5
 800ab1e:	d104      	bne.n	800ab2a <_fx_directory_entry_write+0x3b2>
 800ab20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d101      	bne.n	800ab2a <_fx_directory_entry_write+0x3b2>
        {

            /* Change to 0x8F to be compatible with what DOS does.  */
            shortname[0] =  (CHAR)0x8F;
 800ab26:	238f      	movs	r3, #143	; 0x8f
 800ab28:	773b      	strb	r3, [r7, #28]
        }

        /* Loop to convert the new short file name to upper case.  */
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	667b      	str	r3, [r7, #100]	; 0x64
 800ab2e:	e01d      	b.n	800ab6c <_fx_directory_entry_write+0x3f4>
        {

            /* Pickup shortname character.  */
            alpha = shortname[i];
 800ab30:	f107 021c 	add.w	r2, r7, #28
 800ab34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab36:	4413      	add	r3, r2
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

            /* Determine if character is lower case.  */
            if ((alpha >= 'a') && (alpha <= 'z'))
 800ab3e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800ab42:	2b60      	cmp	r3, #96	; 0x60
 800ab44:	d908      	bls.n	800ab58 <_fx_directory_entry_write+0x3e0>
 800ab46:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800ab4a:	2b7a      	cmp	r3, #122	; 0x7a
 800ab4c:	d804      	bhi.n	800ab58 <_fx_directory_entry_write+0x3e0>
            {

                /* Store the character - converted to upper case.  */
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800ab4e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800ab52:	3b20      	subs	r3, #32
 800ab54:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            }

            /* Now store the short name character.  */
            shortname[i] =  alpha;
 800ab58:	f107 021c 	add.w	r2, r7, #28
 800ab5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab5e:	4413      	add	r3, r2
 800ab60:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800ab64:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800ab66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab68:	3301      	adds	r3, #1
 800ab6a:	667b      	str	r3, [r7, #100]	; 0x64
 800ab6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab6e:	2b0a      	cmp	r3, #10
 800ab70:	d9de      	bls.n	800ab30 <_fx_directory_entry_write+0x3b8>
        }

        /* Determine if there already is a short name and we are not deleting the entry.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	791b      	ldrb	r3, [r3, #4]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	f000 8095 	beq.w	800aca6 <_fx_directory_entry_write+0x52e>
        {

            /* Yes, override the calculated shortname with the original 8.3 name.  */

            /* Clear the short file name area.  */
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	667b      	str	r3, [r7, #100]	; 0x64
 800ab80:	e008      	b.n	800ab94 <_fx_directory_entry_write+0x41c>
            {
                shortname[i] = ' ';
 800ab82:	f107 021c 	add.w	r2, r7, #28
 800ab86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab88:	4413      	add	r3, r2
 800ab8a:	2220      	movs	r2, #32
 800ab8c:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800ab8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab90:	3301      	adds	r3, #1
 800ab92:	667b      	str	r3, [r7, #100]	; 0x64
 800ab94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab96:	2b0a      	cmp	r3, #10
 800ab98:	d9f3      	bls.n	800ab82 <_fx_directory_entry_write+0x40a>
            }

            /* Loop to copy the original short file name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	667b      	str	r3, [r7, #100]	; 0x64
 800ab9e:	2300      	movs	r3, #0
 800aba0:	663b      	str	r3, [r7, #96]	; 0x60
 800aba2:	e023      	b.n	800abec <_fx_directory_entry_write+0x474>
 800aba4:	4ec4ec4f 	.word	0x4ec4ec4f
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 800aba8:	693a      	ldr	r2, [r7, #16]
 800abaa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abac:	4413      	add	r3, r2
 800abae:	3304      	adds	r3, #4
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	2b2e      	cmp	r3, #46	; 0x2e
 800abb4:	d01e      	beq.n	800abf4 <_fx_directory_entry_write+0x47c>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800abb6:	693a      	ldr	r2, [r7, #16]
 800abb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abba:	4413      	add	r3, r2
 800abbc:	3304      	adds	r3, #4
 800abbe:	781b      	ldrb	r3, [r3, #0]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d019      	beq.n	800abf8 <_fx_directory_entry_write+0x480>
                {
                    break;
                }

                /* Pickup the character.  */
                alpha =  entry_ptr -> fx_dir_entry_short_name[i];
 800abc4:	693a      	ldr	r2, [r7, #16]
 800abc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abc8:	4413      	add	r3, r2
 800abca:	3304      	adds	r3, #4
 800abcc:	781b      	ldrb	r3, [r3, #0]
 800abce:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Copy file name character.  */
                shortname[j] =  alpha;
 800abd2:	f107 021c 	add.w	r2, r7, #28
 800abd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abd8:	4413      	add	r3, r2
 800abda:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800abde:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800abe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abe2:	3301      	adds	r3, #1
 800abe4:	667b      	str	r3, [r7, #100]	; 0x64
 800abe6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abe8:	3301      	adds	r3, #1
 800abea:	663b      	str	r3, [r7, #96]	; 0x60
 800abec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800abee:	2b07      	cmp	r3, #7
 800abf0:	d9da      	bls.n	800aba8 <_fx_directory_entry_write+0x430>
 800abf2:	e002      	b.n	800abfa <_fx_directory_entry_write+0x482>
                    break;
 800abf4:	bf00      	nop
 800abf6:	e000      	b.n	800abfa <_fx_directory_entry_write+0x482>
                    break;
 800abf8:	bf00      	nop
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 800abfa:	693a      	ldr	r2, [r7, #16]
 800abfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abfe:	4413      	add	r3, r2
 800ac00:	3304      	adds	r3, #4
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d025      	beq.n	800ac54 <_fx_directory_entry_write+0x4dc>
            {

                /* Pickup remaining characters.  */
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800ac08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac0a:	3301      	adds	r3, #1
 800ac0c:	667b      	str	r3, [r7, #100]	; 0x64
 800ac0e:	2308      	movs	r3, #8
 800ac10:	663b      	str	r3, [r7, #96]	; 0x60
 800ac12:	e01a      	b.n	800ac4a <_fx_directory_entry_write+0x4d2>
                {

                    /* If NULL is encountered, stop the copying.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800ac14:	693a      	ldr	r2, [r7, #16]
 800ac16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac18:	4413      	add	r3, r2
 800ac1a:	3304      	adds	r3, #4
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d017      	beq.n	800ac52 <_fx_directory_entry_write+0x4da>
                    {
                        break;
                    }

                    /* Pickup the character.  */
                    alpha =  entry_ptr -> fx_dir_entry_short_name[i];
 800ac22:	693a      	ldr	r2, [r7, #16]
 800ac24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac26:	4413      	add	r3, r2
 800ac28:	3304      	adds	r3, #4
 800ac2a:	781b      	ldrb	r3, [r3, #0]
 800ac2c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                    /* Copy file name character.  */
                    shortname[j] =  alpha;
 800ac30:	f107 021c 	add.w	r2, r7, #28
 800ac34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac36:	4413      	add	r3, r2
 800ac38:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800ac3c:	701a      	strb	r2, [r3, #0]
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800ac3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac40:	3301      	adds	r3, #1
 800ac42:	667b      	str	r3, [r7, #100]	; 0x64
 800ac44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac46:	3301      	adds	r3, #1
 800ac48:	663b      	str	r3, [r7, #96]	; 0x60
 800ac4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac4c:	2b0a      	cmp	r3, #10
 800ac4e:	d9e1      	bls.n	800ac14 <_fx_directory_entry_write+0x49c>
 800ac50:	e000      	b.n	800ac54 <_fx_directory_entry_write+0x4dc>
                        break;
 800ac52:	bf00      	nop
                }
            }

            /* Loop to make sure the short name is upper case.  */
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800ac54:	2300      	movs	r3, #0
 800ac56:	663b      	str	r3, [r7, #96]	; 0x60
 800ac58:	e01d      	b.n	800ac96 <_fx_directory_entry_write+0x51e>
            {

                /* Pickup the character.  */
                alpha =  shortname[j];
 800ac5a:	f107 021c 	add.w	r2, r7, #28
 800ac5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac60:	4413      	add	r3, r2
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800ac68:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800ac6c:	2b60      	cmp	r3, #96	; 0x60
 800ac6e:	d908      	bls.n	800ac82 <_fx_directory_entry_write+0x50a>
 800ac70:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800ac74:	2b7a      	cmp	r3, #122	; 0x7a
 800ac76:	d804      	bhi.n	800ac82 <_fx_directory_entry_write+0x50a>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800ac78:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800ac7c:	3b20      	subs	r3, #32
 800ac7e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy file name character.  */
                shortname[j] =  alpha;
 800ac82:	f107 021c 	add.w	r2, r7, #28
 800ac86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac88:	4413      	add	r3, r2
 800ac8a:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800ac8e:	701a      	strb	r2, [r3, #0]
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800ac90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac92:	3301      	adds	r3, #1
 800ac94:	663b      	str	r3, [r7, #96]	; 0x60
 800ac96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac98:	2b0a      	cmp	r3, #10
 800ac9a:	d9de      	bls.n	800ac5a <_fx_directory_entry_write+0x4e2>
            }

            /* Determine if the first character of the short file name is the directory free
               value. If so, it must be changed.  */
            if (((UCHAR)shortname[0]) == ((UCHAR)FX_DIR_ENTRY_FREE))
 800ac9c:	7f3b      	ldrb	r3, [r7, #28]
 800ac9e:	2be5      	cmp	r3, #229	; 0xe5
 800aca0:	d101      	bne.n	800aca6 <_fx_directory_entry_write+0x52e>
            {

                /* Change to 0x8F to be compatible with what DOS does.  */
                shortname[0] =  (CHAR)0x8F;
 800aca2:	238f      	movs	r3, #143	; 0x8f
 800aca4:	773b      	strb	r3, [r7, #28]
            }
        }

        /* Loop to calculate the checksum.  */
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800aca6:	2300      	movs	r3, #0
 800aca8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800acac:	2300      	movs	r3, #0
 800acae:	667b      	str	r3, [r7, #100]	; 0x64
 800acb0:	e016      	b.n	800ace0 <_fx_directory_entry_write+0x568>
        {

            /* Calculate the checksum.  */
            checksum = (UCHAR)((UCHAR)(((checksum & 1) << 7) | ((checksum & (UCHAR)0xfe) >> 1)) + shortname[i]);
 800acb2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800acb6:	01db      	lsls	r3, r3, #7
 800acb8:	b25a      	sxtb	r2, r3
 800acba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800acbe:	085b      	lsrs	r3, r3, #1
 800acc0:	b2db      	uxtb	r3, r3
 800acc2:	b25b      	sxtb	r3, r3
 800acc4:	4313      	orrs	r3, r2
 800acc6:	b25b      	sxtb	r3, r3
 800acc8:	b2da      	uxtb	r2, r3
 800acca:	f107 011c 	add.w	r1, r7, #28
 800acce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acd0:	440b      	add	r3, r1
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	4413      	add	r3, r2
 800acd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800acda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acdc:	3301      	adds	r3, #1
 800acde:	667b      	str	r3, [r7, #100]	; 0x64
 800ace0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ace2:	2b0a      	cmp	r3, #10
 800ace4:	d9e5      	bls.n	800acb2 <_fx_directory_entry_write+0x53a>
        }

        /* Set the last entry mark.  */
        work_ptr[0] =  (UCHAR)(0x40 | card);
 800ace6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acee:	b2da      	uxtb	r2, r3
 800acf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800acf2:	701a      	strb	r2, [r3, #0]

        /* Loop to process remainder of long file name entry.  */
        while (card > 0)
 800acf4:	e0f3      	b.n	800aede <_fx_directory_entry_write+0x766>
        {

            /* Clear eof marker.  */
            eof_marker = 0;
 800acf6:	2300      	movs	r3, #0
 800acf8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

            /* Determine if the entry is free.  */
            if ((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 800acfc:	7f3b      	ldrb	r3, [r7, #28]
 800acfe:	2be5      	cmp	r3, #229	; 0xe5
 800ad00:	d102      	bne.n	800ad08 <_fx_directory_entry_write+0x590>
            {
                /* Yes, place delete marker.  */
                work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 800ad02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad04:	22e5      	movs	r2, #229	; 0xe5
 800ad06:	701a      	strb	r2, [r3, #0]
            }

            /* Setup various long file name fields.  */
            work_ptr[11] = FX_LONG_NAME;
 800ad08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad0a:	330b      	adds	r3, #11
 800ad0c:	220f      	movs	r2, #15
 800ad0e:	701a      	strb	r2, [r3, #0]
            work_ptr[12] = 0;
 800ad10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad12:	330c      	adds	r3, #12
 800ad14:	2200      	movs	r2, #0
 800ad16:	701a      	strb	r2, [r3, #0]
            work_ptr[13] = checksum;
 800ad18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad1a:	330d      	adds	r3, #13
 800ad1c:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800ad20:	701a      	strb	r2, [r3, #0]
            work_ptr[26] = 0;
 800ad22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad24:	331a      	adds	r3, #26
 800ad26:	2200      	movs	r2, #0
 800ad28:	701a      	strb	r2, [r3, #0]
            work_ptr[27] = 0;
 800ad2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad2c:	331b      	adds	r3, #27
 800ad2e:	2200      	movs	r2, #0
 800ad30:	701a      	strb	r2, [r3, #0]

            /* Loop through file name fields.  */
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 800ad32:	2301      	movs	r3, #1
 800ad34:	667b      	str	r3, [r7, #100]	; 0x64
 800ad36:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad38:	4613      	mov	r3, r2
 800ad3a:	005b      	lsls	r3, r3, #1
 800ad3c:	4413      	add	r3, r2
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	4413      	add	r3, r2
 800ad42:	3b0d      	subs	r3, #13
 800ad44:	663b      	str	r3, [r7, #96]	; 0x60
 800ad46:	e03e      	b.n	800adc6 <_fx_directory_entry_write+0x64e>
            {

                /* Process relative to specific fields.  */
                if ((i == 11) || (i == 26))
 800ad48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad4a:	2b0b      	cmp	r3, #11
 800ad4c:	d037      	beq.n	800adbe <_fx_directory_entry_write+0x646>
 800ad4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad50:	2b1a      	cmp	r3, #26
 800ad52:	d034      	beq.n	800adbe <_fx_directory_entry_write+0x646>
                {
                    continue;
                }

                if (i == 13)
 800ad54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad56:	2b0d      	cmp	r3, #13
 800ad58:	d102      	bne.n	800ad60 <_fx_directory_entry_write+0x5e8>
                {
                    i = 12;
 800ad5a:	230c      	movs	r3, #12
 800ad5c:	667b      	str	r3, [r7, #100]	; 0x64
                    continue;
 800ad5e:	e02f      	b.n	800adc0 <_fx_directory_entry_write+0x648>
                }

                /* Determine if the EOF marker is present.  */
                if (eof_marker)
 800ad60:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d00d      	beq.n	800ad84 <_fx_directory_entry_write+0x60c>
                {

                    work_ptr[i] = eof_marker;
 800ad68:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ad6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad6c:	4413      	add	r3, r2
 800ad6e:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 800ad72:	701a      	strb	r2, [r3, #0]
                    work_ptr[i + 1] = eof_marker;
 800ad74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad76:	3301      	adds	r3, #1
 800ad78:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ad7a:	4413      	add	r3, r2
 800ad7c:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 800ad80:	701a      	strb	r2, [r3, #0]
 800ad82:	e00e      	b.n	800ada2 <_fx_directory_entry_write+0x62a>
                }
                else
                {
                    work_ptr[i] = (UCHAR)entry_ptr -> fx_dir_entry_name[j];
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ad8a:	441a      	add	r2, r3
 800ad8c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ad8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad90:	440b      	add	r3, r1
 800ad92:	7812      	ldrb	r2, [r2, #0]
 800ad94:	701a      	strb	r2, [r3, #0]
                    work_ptr[i + 1] = 0;
 800ad96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad98:	3301      	adds	r3, #1
 800ad9a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800ad9c:	4413      	add	r3, r2
 800ad9e:	2200      	movs	r2, #0
 800ada0:	701a      	strb	r2, [r3, #0]
                }

                if (entry_ptr -> fx_dir_entry_name[j] == 0)
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	681a      	ldr	r2, [r3, #0]
 800ada6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ada8:	4413      	add	r3, r2
 800adaa:	781b      	ldrb	r3, [r3, #0]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d102      	bne.n	800adb6 <_fx_directory_entry_write+0x63e>
                {

                    /* end of name, pad with 0xff.  */
                    eof_marker =  (UCHAR)0xff;
 800adb0:	23ff      	movs	r3, #255	; 0xff
 800adb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
                }

                j++;
 800adb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800adb8:	3301      	adds	r3, #1
 800adba:	663b      	str	r3, [r7, #96]	; 0x60
 800adbc:	e000      	b.n	800adc0 <_fx_directory_entry_write+0x648>
                    continue;
 800adbe:	bf00      	nop
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 800adc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adc2:	3302      	adds	r3, #2
 800adc4:	667b      	str	r3, [r7, #100]	; 0x64
 800adc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800adc8:	2b1f      	cmp	r3, #31
 800adca:	d9bd      	bls.n	800ad48 <_fx_directory_entry_write+0x5d0>
            }

            /* Move to the next directory entry.  */
            work_ptr += FX_DIR_ENTRY_SIZE;
 800adcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800adce:	3320      	adds	r3, #32
 800add0:	677b      	str	r3, [r7, #116]	; 0x74
            byte_offset += FX_DIR_ENTRY_SIZE;
 800add2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800add4:	3320      	adds	r3, #32
 800add6:	637b      	str	r3, [r7, #52]	; 0x34
            /* Update changed_size. */
            changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Determine if the entry overlaps into the next sector.  */
            if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800addc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800adde:	429a      	cmp	r2, r3
 800ade0:	d376      	bcc.n	800aed0 <_fx_directory_entry_write+0x758>
                else
                {
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Write current logical sector out.  */
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800ade2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ade4:	2200      	movs	r2, #0
 800ade6:	60bb      	str	r3, [r7, #8]
 800ade8:	60fa      	str	r2, [r7, #12]
 800adea:	2303      	movs	r3, #3
 800adec:	9302      	str	r3, [sp, #8]
 800adee:	2301      	movs	r3, #1
 800adf0:	9301      	str	r3, [sp, #4]
 800adf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800adf4:	9300      	str	r3, [sp, #0]
 800adf6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800adfa:	6978      	ldr	r0, [r7, #20]
 800adfc:	f007 fcba 	bl	8012774 <_fx_utility_logical_sector_write>
 800ae00:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
                }
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800ae02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d001      	beq.n	800ae0c <_fx_directory_entry_write+0x694>
                {

                    /* Return the error status.  */
                    return(status);
 800ae08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae0a:	e2eb      	b.n	800b3e4 <_fx_directory_entry_write+0xc6c>
                }

                /* Determine if we are in the root directory.  */
                if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800ae0c:	697b      	ldr	r3, [r7, #20]
 800ae0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d335      	bcc.n	800ae82 <_fx_directory_entry_write+0x70a>
                {

                    /* Determine the next sector of the directory entry.  */
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae1a:	3b01      	subs	r3, #1
 800ae1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae1e:	429a      	cmp	r2, r3
 800ae20:	d206      	bcs.n	800ae30 <_fx_directory_entry_write+0x6b8>
                    {

                        /* More sectors in this cluster.  */

                        /* Simply increment the logical sector.  */
                        logical_sector++;
 800ae22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae24:	3301      	adds	r3, #1
 800ae26:	63fb      	str	r3, [r7, #60]	; 0x3c

                        /* Increment the relative sector.  */
                        relative_sector++;
 800ae28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae2e:	e032      	b.n	800ae96 <_fx_directory_entry_write+0x71e>
                    {

                        /* We need to move to the next cluster.  */

                        /* Pickup the next cluster.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800ae30:	f107 0318 	add.w	r3, r7, #24
 800ae34:	461a      	mov	r2, r3
 800ae36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae38:	6978      	ldr	r0, [r7, #20]
 800ae3a:	f005 fdf9 	bl	8010a30 <_fx_utility_FAT_entry_read>
 800ae3e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* Check for I/O error.  */
                        if (status != FX_SUCCESS)
 800ae40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d001      	beq.n	800ae4a <_fx_directory_entry_write+0x6d2>
                        {

                            /* Return error code.  */
                            return(status);
 800ae46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae48:	e2cc      	b.n	800b3e4 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Copy next cluster to the current cluster.  */
                        cluster =  next_cluster;
 800ae4a:	69bb      	ldr	r3, [r7, #24]
 800ae4c:	633b      	str	r3, [r7, #48]	; 0x30

                        /* Check the value of the new cluster - it must be a valid cluster number
                           or something is really wrong!  */
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800ae4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	d907      	bls.n	800ae64 <_fx_directory_entry_write+0x6ec>
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ae5a:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800ae5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d301      	bcc.n	800ae68 <_fx_directory_entry_write+0x6f0>
                        {

                            /* Send error message back to caller.  */
                            return(FX_FILE_CORRUPT);
 800ae64:	2308      	movs	r3, #8
 800ae66:	e2bd      	b.n	800b3e4 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Setup the relative sector (this is zero for subsequent cluster.  */
                        relative_sector =  0;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	63bb      	str	r3, [r7, #56]	; 0x38

                        /* Calculate the next logical sector.  */
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800ae6c:	697b      	ldr	r3, [r7, #20]
 800ae6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800ae70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae72:	3b02      	subs	r3, #2
                             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800ae74:	6979      	ldr	r1, [r7, #20]
 800ae76:	6d49      	ldr	r1, [r1, #84]	; 0x54
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800ae78:	fb01 f303 	mul.w	r3, r1, r3
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800ae7c:	4413      	add	r3, r2
 800ae7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae80:	e009      	b.n	800ae96 <_fx_directory_entry_write+0x71e>
                }
                else
                {

                    /* Increment the logical sector.  */
                    logical_sector++;
 800ae82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae84:	3301      	adds	r3, #1
 800ae86:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Determine if the logical sector is valid.  */
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800ae88:	697b      	ldr	r3, [r7, #20]
 800ae8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d301      	bcc.n	800ae96 <_fx_directory_entry_write+0x71e>
                    {

                        /* We have exceeded the root directory.  */

                        /* Send error message back to caller.  */
                        return(FX_FILE_CORRUPT);
 800ae92:	2308      	movs	r3, #8
 800ae94:	e2a6      	b.n	800b3e4 <_fx_directory_entry_write+0xc6c>
                    }
                }

                /* Read the sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800ae96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae98:	2200      	movs	r2, #0
 800ae9a:	603b      	str	r3, [r7, #0]
 800ae9c:	607a      	str	r2, [r7, #4]
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800aea2:	2203      	movs	r2, #3
 800aea4:	9202      	str	r2, [sp, #8]
 800aea6:	2201      	movs	r2, #1
 800aea8:	9201      	str	r2, [sp, #4]
 800aeaa:	9300      	str	r3, [sp, #0]
 800aeac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aeb0:	6978      	ldr	r0, [r7, #20]
 800aeb2:	f007 f9cb 	bl	801224c <_fx_utility_logical_sector_read>
 800aeb6:	62f8      	str	r0, [r7, #44]	; 0x2c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800aeb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d001      	beq.n	800aec2 <_fx_directory_entry_write+0x74a>
                {

                    /* Return the error status.  */
                    return(status);
 800aebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec0:	e290      	b.n	800b3e4 <_fx_directory_entry_write+0xc6c>
                }

                /* Setup logical sector.  */
                sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	673b      	str	r3, [r7, #112]	; 0x70

                /* Setup a fresh byte offset.  */
                byte_offset = 0;
 800aec8:	2300      	movs	r3, #0
 800aeca:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup a new pointer into the buffer.  */
                work_ptr = sector_base_ptr;
 800aecc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aece:	677b      	str	r3, [r7, #116]	; 0x74
                changed_offset = 0;
#endif /* FX_ENABLE_FAULT_TOLERANT */
            }

            /* Decrement loop control.  */
            card--;
 800aed0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aed2:	3b01      	subs	r3, #1
 800aed4:	657b      	str	r3, [r7, #84]	; 0x54
            work_ptr[0] = (UCHAR)card;
 800aed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aed8:	b2da      	uxtb	r2, r3
 800aeda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aedc:	701a      	strb	r2, [r3, #0]
        while (card > 0)
 800aede:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	f47f af08 	bne.w	800acf6 <_fx_directory_entry_write+0x57e>
        }

        /* Determine if there is a short name.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] == 0)
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	791b      	ldrb	r3, [r3, #4]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d116      	bne.n	800af1c <_fx_directory_entry_write+0x7a4>
        {

            /* Loop to copy the new short file name.  */
            for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800aeee:	2300      	movs	r3, #0
 800aef0:	667b      	str	r3, [r7, #100]	; 0x64
 800aef2:	e00f      	b.n	800af14 <_fx_directory_entry_write+0x79c>
            {

                /* Pickup shortname character.  */
                alpha = shortname[i];
 800aef4:	f107 021c 	add.w	r2, r7, #28
 800aef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aefa:	4413      	add	r3, r2
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Now store the short name character.  */
                *work_ptr++ =  (UCHAR)alpha;
 800af02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af04:	1c5a      	adds	r2, r3, #1
 800af06:	677a      	str	r2, [r7, #116]	; 0x74
 800af08:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800af0c:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800af0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af10:	3301      	adds	r3, #1
 800af12:	667b      	str	r3, [r7, #100]	; 0x64
 800af14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af16:	2b0a      	cmp	r3, #10
 800af18:	d9ec      	bls.n	800aef4 <_fx_directory_entry_write+0x77c>
 800af1a:	e1a5      	b.n	800b268 <_fx_directory_entry_write+0xaf0>
        }
        else
        {

            /* Clear the short file name area.  */
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800af1c:	2300      	movs	r3, #0
 800af1e:	667b      	str	r3, [r7, #100]	; 0x64
 800af20:	e007      	b.n	800af32 <_fx_directory_entry_write+0x7ba>
            {
                work_ptr[i] = ' ';
 800af22:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800af24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af26:	4413      	add	r3, r2
 800af28:	2220      	movs	r2, #32
 800af2a:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800af2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af2e:	3301      	adds	r3, #1
 800af30:	667b      	str	r3, [r7, #100]	; 0x64
 800af32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af34:	2b0a      	cmp	r3, #10
 800af36:	d9f4      	bls.n	800af22 <_fx_directory_entry_write+0x7aa>
            }

            /* Loop to copy the old short file name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800af38:	2300      	movs	r3, #0
 800af3a:	667b      	str	r3, [r7, #100]	; 0x64
 800af3c:	2300      	movs	r3, #0
 800af3e:	663b      	str	r3, [r7, #96]	; 0x60
 800af40:	e01c      	b.n	800af7c <_fx_directory_entry_write+0x804>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 800af42:	693a      	ldr	r2, [r7, #16]
 800af44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af46:	4413      	add	r3, r2
 800af48:	3304      	adds	r3, #4
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	2b2e      	cmp	r3, #46	; 0x2e
 800af4e:	d019      	beq.n	800af84 <_fx_directory_entry_write+0x80c>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800af50:	693a      	ldr	r2, [r7, #16]
 800af52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af54:	4413      	add	r3, r2
 800af56:	3304      	adds	r3, #4
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d014      	beq.n	800af88 <_fx_directory_entry_write+0x810>
                {
                    break;
                }

                /* Copy file name character.  */
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 800af5e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800af60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af62:	4413      	add	r3, r2
 800af64:	6939      	ldr	r1, [r7, #16]
 800af66:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800af68:	440a      	add	r2, r1
 800af6a:	3204      	adds	r2, #4
 800af6c:	7812      	ldrb	r2, [r2, #0]
 800af6e:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800af70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af72:	3301      	adds	r3, #1
 800af74:	667b      	str	r3, [r7, #100]	; 0x64
 800af76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af78:	3301      	adds	r3, #1
 800af7a:	663b      	str	r3, [r7, #96]	; 0x60
 800af7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af7e:	2b07      	cmp	r3, #7
 800af80:	d9df      	bls.n	800af42 <_fx_directory_entry_write+0x7ca>
 800af82:	e002      	b.n	800af8a <_fx_directory_entry_write+0x812>
                    break;
 800af84:	bf00      	nop
 800af86:	e000      	b.n	800af8a <_fx_directory_entry_write+0x812>
                    break;
 800af88:	bf00      	nop
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 800af8a:	693a      	ldr	r2, [r7, #16]
 800af8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af8e:	4413      	add	r3, r2
 800af90:	3304      	adds	r3, #4
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d020      	beq.n	800afda <_fx_directory_entry_write+0x862>
            {

                /* Pickup remaining characters.  */
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800af98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af9a:	3301      	adds	r3, #1
 800af9c:	667b      	str	r3, [r7, #100]	; 0x64
 800af9e:	2308      	movs	r3, #8
 800afa0:	663b      	str	r3, [r7, #96]	; 0x60
 800afa2:	e015      	b.n	800afd0 <_fx_directory_entry_write+0x858>
                {

                    /* If NULL is encountered, stop the copying.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800afa4:	693a      	ldr	r2, [r7, #16]
 800afa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afa8:	4413      	add	r3, r2
 800afaa:	3304      	adds	r3, #4
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d012      	beq.n	800afd8 <_fx_directory_entry_write+0x860>
                    {
                        break;
                    }

                    /* Copy file name character.  */
                    work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 800afb2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800afb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800afb6:	4413      	add	r3, r2
 800afb8:	6939      	ldr	r1, [r7, #16]
 800afba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800afbc:	440a      	add	r2, r1
 800afbe:	3204      	adds	r2, #4
 800afc0:	7812      	ldrb	r2, [r2, #0]
 800afc2:	701a      	strb	r2, [r3, #0]
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800afc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afc6:	3301      	adds	r3, #1
 800afc8:	667b      	str	r3, [r7, #100]	; 0x64
 800afca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800afcc:	3301      	adds	r3, #1
 800afce:	663b      	str	r3, [r7, #96]	; 0x60
 800afd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800afd2:	2b0a      	cmp	r3, #10
 800afd4:	d9e6      	bls.n	800afa4 <_fx_directory_entry_write+0x82c>
 800afd6:	e000      	b.n	800afda <_fx_directory_entry_write+0x862>
                        break;
 800afd8:	bf00      	nop
                }
            }

            /* Adjust the work pointer accordingly.  */
            work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 800afda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afdc:	330b      	adds	r3, #11
 800afde:	677b      	str	r3, [r7, #116]	; 0x74
 800afe0:	e142      	b.n	800b268 <_fx_directory_entry_write+0xaf0>
    }
    else
    {

        /* Determine if long name was shorted.  */
        if (entry_ptr -> fx_dir_entry_long_name_shorted > 0)
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	699b      	ldr	r3, [r3, #24]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	f000 80a1 	beq.w	800b12e <_fx_directory_entry_write+0x9b6>
        {

            /* Check for a valid short name.  */
            if ((UCHAR)(0x40 | entry_ptr -> fx_dir_entry_long_name_shorted) == (UCHAR)(*work_ptr))
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	699b      	ldr	r3, [r3, #24]
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aff6:	b2da      	uxtb	r2, r3
 800aff8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	429a      	cmp	r2, r3
 800affe:	f040 8096 	bne.w	800b12e <_fx_directory_entry_write+0x9b6>
            {

                /* Loop through the file name.  */
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 800b002:	2300      	movs	r3, #0
 800b004:	663b      	str	r3, [r7, #96]	; 0x60
 800b006:	e08c      	b.n	800b122 <_fx_directory_entry_write+0x9aa>
                {

                    /* Check for a free entry to be written.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 800b008:	693b      	ldr	r3, [r7, #16]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	2be5      	cmp	r3, #229	; 0xe5
 800b010:	d102      	bne.n	800b018 <_fx_directory_entry_write+0x8a0>
                    {
                        /* Delete long parts.  */
                        work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 800b012:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b014:	22e5      	movs	r2, #229	; 0xe5
 800b016:	701a      	strb	r2, [r3, #0]
                    }

                    /* Setup pointers for the name write.  */
                    work_ptr += FX_DIR_ENTRY_SIZE;
 800b018:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b01a:	3320      	adds	r3, #32
 800b01c:	677b      	str	r3, [r7, #116]	; 0x74
                    byte_offset += FX_DIR_ENTRY_SIZE;
 800b01e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b020:	3320      	adds	r3, #32
 800b022:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Update changed_size. */
                    changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Determine if the write is within the current sector.   */
                    if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 800b024:	697b      	ldr	r3, [r7, #20]
 800b026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b028:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d376      	bcc.n	800b11c <_fx_directory_entry_write+0x9a4>
                        else
                        {
#endif /* FX_ENABLE_FAULT_TOLERANT */

                            /* Write the current sector out.  */
                            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800b02e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b030:	2200      	movs	r2, #0
 800b032:	4698      	mov	r8, r3
 800b034:	4691      	mov	r9, r2
 800b036:	2303      	movs	r3, #3
 800b038:	9302      	str	r3, [sp, #8]
 800b03a:	2301      	movs	r3, #1
 800b03c:	9301      	str	r3, [sp, #4]
 800b03e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b040:	9300      	str	r3, [sp, #0]
 800b042:	4642      	mov	r2, r8
 800b044:	464b      	mov	r3, r9
 800b046:	6978      	ldr	r0, [r7, #20]
 800b048:	f007 fb94 	bl	8012774 <_fx_utility_logical_sector_write>
 800b04c:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
                        }
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Determine if an error occurred.  */
                        if (status != FX_SUCCESS)
 800b04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b050:	2b00      	cmp	r3, #0
 800b052:	d001      	beq.n	800b058 <_fx_directory_entry_write+0x8e0>
                        {

                            /* Return the error status.  */
                            return(status);
 800b054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b056:	e1c5      	b.n	800b3e4 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Determine if we are in the root directory.  */
                        if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800b058:	697b      	ldr	r3, [r7, #20]
 800b05a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b05c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b05e:	429a      	cmp	r2, r3
 800b060:	d335      	bcc.n	800b0ce <_fx_directory_entry_write+0x956>
                        {

                            /* Determine the next sector of the directory entry.  */
                            if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b066:	3b01      	subs	r3, #1
 800b068:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d206      	bcs.n	800b07c <_fx_directory_entry_write+0x904>
                            {

                                /* More sectors in this cluster.  */

                                /* Simply increment the logical sector.  */
                                logical_sector++;
 800b06e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b070:	3301      	adds	r3, #1
 800b072:	63fb      	str	r3, [r7, #60]	; 0x3c

                                /* Increment the relative sector.  */
                                relative_sector++;
 800b074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b076:	3301      	adds	r3, #1
 800b078:	63bb      	str	r3, [r7, #56]	; 0x38
 800b07a:	e032      	b.n	800b0e2 <_fx_directory_entry_write+0x96a>
                            {

                                /* We need to move to the next cluster.  */

                                /* Pickup the next cluster.  */
                                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800b07c:	f107 0318 	add.w	r3, r7, #24
 800b080:	461a      	mov	r2, r3
 800b082:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b084:	6978      	ldr	r0, [r7, #20]
 800b086:	f005 fcd3 	bl	8010a30 <_fx_utility_FAT_entry_read>
 800b08a:	62f8      	str	r0, [r7, #44]	; 0x2c

                                /* Check for I/O error.  */
                                if (status != FX_SUCCESS)
 800b08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d001      	beq.n	800b096 <_fx_directory_entry_write+0x91e>
                                {

                                    /* Return error code.  */
                                    return(status);
 800b092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b094:	e1a6      	b.n	800b3e4 <_fx_directory_entry_write+0xc6c>
                                }

                                /* Copy next cluster to the current cluster.  */
                                cluster =  next_cluster;
 800b096:	69bb      	ldr	r3, [r7, #24]
 800b098:	633b      	str	r3, [r7, #48]	; 0x30

                                /* Check the value of the new cluster - it must be a valid cluster number
                                   or something is really wrong!  */
                                if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800b09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d907      	bls.n	800b0b0 <_fx_directory_entry_write+0x938>
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b0a6:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800b0aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d301      	bcc.n	800b0b4 <_fx_directory_entry_write+0x93c>
                                {

                                    /* Send error message back to caller.  */
                                    return(FX_FILE_CORRUPT);
 800b0b0:	2308      	movs	r3, #8
 800b0b2:	e197      	b.n	800b3e4 <_fx_directory_entry_write+0xc6c>
                                }

                                /* Setup the relative sector (this is zero for subsequent cluster.  */
                                relative_sector =  0;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	63bb      	str	r3, [r7, #56]	; 0x38

                                /* Calculate the next logical sector.  */
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800b0b8:	697b      	ldr	r3, [r7, #20]
 800b0ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800b0bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0be:	3b02      	subs	r3, #2
                                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800b0c0:	6979      	ldr	r1, [r7, #20]
 800b0c2:	6d49      	ldr	r1, [r1, #84]	; 0x54
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800b0c4:	fb01 f303 	mul.w	r3, r1, r3
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800b0c8:	4413      	add	r3, r2
 800b0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0cc:	e009      	b.n	800b0e2 <_fx_directory_entry_write+0x96a>
                        }
                        else
                        {

                            /* Increment the logical sector.  */
                            logical_sector++;
 800b0ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0d0:	3301      	adds	r3, #1
 800b0d2:	63fb      	str	r3, [r7, #60]	; 0x3c

                            /* Determine if the logical sector is valid.  */
                            if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d301      	bcc.n	800b0e2 <_fx_directory_entry_write+0x96a>
                            {

                                /* We have exceeded the root directory.  */

                                /* Send error message back to caller.  */
                                return(FX_FILE_CORRUPT);
 800b0de:	2308      	movs	r3, #8
 800b0e0:	e180      	b.n	800b3e4 <_fx_directory_entry_write+0xc6c>
                            }
                        }

                        /* Read the next logical sector.  */
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800b0e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	469a      	mov	sl, r3
 800b0e8:	4693      	mov	fp, r2
                                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800b0ea:	697b      	ldr	r3, [r7, #20]
 800b0ec:	689b      	ldr	r3, [r3, #8]
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800b0ee:	2203      	movs	r2, #3
 800b0f0:	9202      	str	r2, [sp, #8]
 800b0f2:	2201      	movs	r2, #1
 800b0f4:	9201      	str	r2, [sp, #4]
 800b0f6:	9300      	str	r3, [sp, #0]
 800b0f8:	4652      	mov	r2, sl
 800b0fa:	465b      	mov	r3, fp
 800b0fc:	6978      	ldr	r0, [r7, #20]
 800b0fe:	f007 f8a5 	bl	801224c <_fx_utility_logical_sector_read>
 800b102:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* Determine if an error occurred.  */
                        if (status != FX_SUCCESS)
 800b104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b106:	2b00      	cmp	r3, #0
 800b108:	d001      	beq.n	800b10e <_fx_directory_entry_write+0x996>
                        {

                            /* Return the error status.  */
                            return(status);
 800b10a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b10c:	e16a      	b.n	800b3e4 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Move to the next sector buffer.  */
                        sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	689b      	ldr	r3, [r3, #8]
 800b112:	673b      	str	r3, [r7, #112]	; 0x70

                        /* Setup new buffer pointers.  */
                        byte_offset =  0;
 800b114:	2300      	movs	r3, #0
 800b116:	637b      	str	r3, [r7, #52]	; 0x34
                        work_ptr = sector_base_ptr;
 800b118:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b11a:	677b      	str	r3, [r7, #116]	; 0x74
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 800b11c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b11e:	3301      	adds	r3, #1
 800b120:	663b      	str	r3, [r7, #96]	; 0x60
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	699b      	ldr	r3, [r3, #24]
 800b126:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b128:	429a      	cmp	r2, r3
 800b12a:	f4ff af6d 	bcc.w	800b008 <_fx_directory_entry_write+0x890>
                }
            }
        }

        /* This is an 8.3 name.  First clear the directory name.  */
        for (j = 0; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800b12e:	2300      	movs	r3, #0
 800b130:	663b      	str	r3, [r7, #96]	; 0x60
 800b132:	e007      	b.n	800b144 <_fx_directory_entry_write+0x9cc>
        {
            work_ptr[j] = ' ';
 800b134:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b138:	4413      	add	r3, r2
 800b13a:	2220      	movs	r2, #32
 800b13c:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800b13e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b140:	3301      	adds	r3, #1
 800b142:	663b      	str	r3, [r7, #96]	; 0x60
 800b144:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b146:	2b0a      	cmp	r3, #10
 800b148:	d9f4      	bls.n	800b134 <_fx_directory_entry_write+0x9bc>
        }

        /* Copy leading dots in case of first two entries of a directory.  */
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 800b14a:	2300      	movs	r3, #0
 800b14c:	667b      	str	r3, [r7, #100]	; 0x64
 800b14e:	e007      	b.n	800b160 <_fx_directory_entry_write+0x9e8>
        {
            work_ptr[i] = '.';
 800b150:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b152:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b154:	4413      	add	r3, r2
 800b156:	222e      	movs	r2, #46	; 0x2e
 800b158:	701a      	strb	r2, [r3, #0]
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 800b15a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b15c:	3301      	adds	r3, #1
 800b15e:	667b      	str	r3, [r7, #100]	; 0x64
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	681a      	ldr	r2, [r3, #0]
 800b164:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b166:	4413      	add	r3, r2
 800b168:	781b      	ldrb	r3, [r3, #0]
 800b16a:	2b2e      	cmp	r3, #46	; 0x2e
 800b16c:	d0f0      	beq.n	800b150 <_fx_directory_entry_write+0x9d8>
        }

        /* Determine if there are more characters to copy.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b174:	4413      	add	r3, r2
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d039      	beq.n	800b1f0 <_fx_directory_entry_write+0xa78>
        {

            /* Copy directory name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800b17c:	2300      	movs	r3, #0
 800b17e:	667b      	str	r3, [r7, #100]	; 0x64
 800b180:	2300      	movs	r3, #0
 800b182:	663b      	str	r3, [r7, #96]	; 0x60
 800b184:	e02d      	b.n	800b1e2 <_fx_directory_entry_write+0xa6a>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b18c:	4413      	add	r3, r2
 800b18e:	781b      	ldrb	r3, [r3, #0]
 800b190:	2b2e      	cmp	r3, #46	; 0x2e
 800b192:	d02a      	beq.n	800b1ea <_fx_directory_entry_write+0xa72>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 800b194:	693b      	ldr	r3, [r7, #16]
 800b196:	681a      	ldr	r2, [r3, #0]
 800b198:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b19a:	4413      	add	r3, r2
 800b19c:	781b      	ldrb	r3, [r3, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d025      	beq.n	800b1ee <_fx_directory_entry_write+0xa76>
                {
                    break;
                }

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1a8:	4413      	add	r3, r2
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800b1b0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800b1b4:	2b60      	cmp	r3, #96	; 0x60
 800b1b6:	d908      	bls.n	800b1ca <_fx_directory_entry_write+0xa52>
 800b1b8:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800b1bc:	2b7a      	cmp	r3, #122	; 0x7a
 800b1be:	d804      	bhi.n	800b1ca <_fx_directory_entry_write+0xa52>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800b1c0:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800b1c4:	3b20      	subs	r3, #32
 800b1c6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 800b1ca:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b1cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b1ce:	4413      	add	r3, r2
 800b1d0:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800b1d4:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800b1d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1d8:	3301      	adds	r3, #1
 800b1da:	667b      	str	r3, [r7, #100]	; 0x64
 800b1dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b1de:	3301      	adds	r3, #1
 800b1e0:	663b      	str	r3, [r7, #96]	; 0x60
 800b1e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b1e4:	2b07      	cmp	r3, #7
 800b1e6:	d9ce      	bls.n	800b186 <_fx_directory_entry_write+0xa0e>
 800b1e8:	e002      	b.n	800b1f0 <_fx_directory_entry_write+0xa78>
                    break;
 800b1ea:	bf00      	nop
 800b1ec:	e000      	b.n	800b1f0 <_fx_directory_entry_write+0xa78>
                    break;
 800b1ee:	bf00      	nop
            }
        }

        /* Determine if there are more characters in the name.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1f6:	4413      	add	r3, r2
 800b1f8:	781b      	ldrb	r3, [r3, #0]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d031      	beq.n	800b262 <_fx_directory_entry_write+0xaea>
        {

            /* Loop to copy the remainder of the name.  */
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800b1fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b200:	3301      	adds	r3, #1
 800b202:	667b      	str	r3, [r7, #100]	; 0x64
 800b204:	2308      	movs	r3, #8
 800b206:	663b      	str	r3, [r7, #96]	; 0x60
 800b208:	e026      	b.n	800b258 <_fx_directory_entry_write+0xae0>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b210:	4413      	add	r3, r2
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d023      	beq.n	800b260 <_fx_directory_entry_write+0xae8>
                {
                    break;
                }

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b21e:	4413      	add	r3, r2
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800b226:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800b22a:	2b60      	cmp	r3, #96	; 0x60
 800b22c:	d908      	bls.n	800b240 <_fx_directory_entry_write+0xac8>
 800b22e:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800b232:	2b7a      	cmp	r3, #122	; 0x7a
 800b234:	d804      	bhi.n	800b240 <_fx_directory_entry_write+0xac8>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800b236:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800b23a:	3b20      	subs	r3, #32
 800b23c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 800b240:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b242:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b244:	4413      	add	r3, r2
 800b246:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800b24a:	701a      	strb	r2, [r3, #0]
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800b24c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b24e:	3301      	adds	r3, #1
 800b250:	667b      	str	r3, [r7, #100]	; 0x64
 800b252:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b254:	3301      	adds	r3, #1
 800b256:	663b      	str	r3, [r7, #96]	; 0x60
 800b258:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b25a:	2b0a      	cmp	r3, #10
 800b25c:	d9d5      	bls.n	800b20a <_fx_directory_entry_write+0xa92>
 800b25e:	e000      	b.n	800b262 <_fx_directory_entry_write+0xaea>
                    break;
 800b260:	bf00      	nop
            }
        }

        /* Move to the next entry.  */
        work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 800b262:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b264:	330b      	adds	r3, #11
 800b266:	677b      	str	r3, [r7, #116]	; 0x74
    }

    /* Write out the 8.3 part of the name. */

    /* Copy the attribute into the destination.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_attributes;
 800b268:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b26a:	1c5a      	adds	r2, r3, #1
 800b26c:	677a      	str	r2, [r7, #116]	; 0x74
 800b26e:	693a      	ldr	r2, [r7, #16]
 800b270:	7f12      	ldrb	r2, [r2, #28]
 800b272:	701a      	strb	r2, [r3, #0]

    /* Copy the reserved byte.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_reserved;
 800b274:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b276:	1c5a      	adds	r2, r3, #1
 800b278:	677a      	str	r2, [r7, #116]	; 0x74
 800b27a:	693a      	ldr	r2, [r7, #16]
 800b27c:	7f52      	ldrb	r2, [r2, #29]
 800b27e:	701a      	strb	r2, [r3, #0]

    /* Copy the created time in milliseconds.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_created_time_ms;
 800b280:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b282:	1c5a      	adds	r2, r3, #1
 800b284:	677a      	str	r2, [r7, #116]	; 0x74
 800b286:	693a      	ldr	r2, [r7, #16]
 800b288:	7f92      	ldrb	r2, [r2, #30]
 800b28a:	701a      	strb	r2, [r3, #0]

    /* Copy the created time.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_time);
 800b28c:	693b      	ldr	r3, [r7, #16]
 800b28e:	6a1b      	ldr	r3, [r3, #32]
 800b290:	4619      	mov	r1, r3
 800b292:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b294:	f005 fb79 	bl	801098a <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800b298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b29a:	3302      	adds	r3, #2
 800b29c:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the created date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_date);
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b2a6:	f005 fb70 	bl	801098a <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800b2aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b2ac:	3302      	adds	r3, #2
 800b2ae:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the last accessed date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_last_accessed_date);
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b2b8:	f005 fb67 	bl	801098a <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800b2bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b2be:	3302      	adds	r3, #2
 800b2c0:	677b      	str	r3, [r7, #116]	; 0x74

    /* Determine if a FAT32 entry is present.  */
    if (media_ptr -> fx_media_32_bit_FAT)
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d008      	beq.n	800b2dc <_fx_directory_entry_write+0xb64>
    {

        /* Yes, FAT32 is present, store upper half of cluster.  */
        temp = (entry_ptr -> fx_dir_entry_cluster >> 16);
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2ce:	0c1b      	lsrs	r3, r3, #16
 800b2d0:	66fb      	str	r3, [r7, #108]	; 0x6c
        _fx_utility_16_unsigned_write(work_ptr, temp);
 800b2d2:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b2d4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b2d6:	f005 fb58 	bl	801098a <_fx_utility_16_unsigned_write>
 800b2da:	e003      	b.n	800b2e4 <_fx_directory_entry_write+0xb6c>
    else
    {

        /* No, FAT16 or FAT12 is present, just write a 0 for
           the upper half of the cluster.  */
        _fx_utility_16_unsigned_write(work_ptr, 0);
 800b2dc:	2100      	movs	r1, #0
 800b2de:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b2e0:	f005 fb53 	bl	801098a <_fx_utility_16_unsigned_write>
    }

    /* Advance the entry pointer.  */
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800b2e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b2e6:	3302      	adds	r3, #2
 800b2e8:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the time into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_time);
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b2f2:	f005 fb4a 	bl	801098a <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800b2f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b2f8:	3302      	adds	r3, #2
 800b2fa:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the date into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_date);
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b300:	4619      	mov	r1, r3
 800b302:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b304:	f005 fb41 	bl	801098a <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800b308:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b30a:	3302      	adds	r3, #2
 800b30c:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the starting cluster into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, (UINT)entry_ptr -> fx_dir_entry_cluster);
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b312:	4619      	mov	r1, r3
 800b314:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b316:	f005 fb38 	bl	801098a <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800b31a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b31c:	3302      	adds	r3, #2
 800b31e:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the file size into the destination.  */
    _fx_utility_32_unsigned_write(work_ptr, (ULONG)entry_ptr -> fx_dir_entry_file_size);
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b326:	4613      	mov	r3, r2
 800b328:	4619      	mov	r1, r3
 800b32a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b32c:	f005 fb5f 	bl	80109ee <_fx_utility_32_unsigned_write>
    else
    {
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Write the directory sector to the media.  */
        status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800b330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b332:	2200      	movs	r2, #0
 800b334:	461c      	mov	r4, r3
 800b336:	4615      	mov	r5, r2
 800b338:	2303      	movs	r3, #3
 800b33a:	9302      	str	r3, [sp, #8]
 800b33c:	2301      	movs	r3, #1
 800b33e:	9301      	str	r3, [sp, #4]
 800b340:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b342:	9300      	str	r3, [sp, #0]
 800b344:	4622      	mov	r2, r4
 800b346:	462b      	mov	r3, r5
 800b348:	6978      	ldr	r0, [r7, #20]
 800b34a:	f007 fa13 	bl	8012774 <_fx_utility_logical_sector_write>
 800b34e:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 800b350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b352:	2b00      	cmp	r3, #0
 800b354:	d001      	beq.n	800b35a <_fx_directory_entry_write+0xbe2>
    {

        /* Return the error status.  */
        return(status);
 800b356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b358:	e044      	b.n	800b3e4 <_fx_directory_entry_write+0xc6c>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry in the directory
       search cache.  */
    if (media_ptr -> fx_media_last_found_name[0])
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d03e      	beq.n	800b3e2 <_fx_directory_entry_write+0xc6a>
    {

        /* Determine if the cached search directory entry matches the directory entry being
           written.  */
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	; 0x2b0
 800b370:	4299      	cmp	r1, r3
 800b372:	bf08      	it	eq
 800b374:	4290      	cmpeq	r0, r2
 800b376:	d134      	bne.n	800b3e2 <_fx_directory_entry_write+0xc6a>
            (entry_ptr -> fx_dir_entry_byte_offset == media_ptr -> fx_media_last_found_entry.fx_dir_entry_byte_offset))
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 800b382:	429a      	cmp	r2, r3
 800b384:	d12d      	bne.n	800b3e2 <_fx_directory_entry_write+0xc6a>
        {

            /* Yes, this entry is the same as the one currently in the directory search cache.
               Update various fields in the directory search cache with the information being
               written now.  */
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_cluster =         entry_ptr -> fx_dir_entry_cluster;
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b38a:	697b      	ldr	r3, [r7, #20]
 800b38c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_file_size =       entry_ptr -> fx_dir_entry_file_size;
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b396:	6979      	ldr	r1, [r7, #20]
 800b398:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_attributes =      entry_ptr -> fx_dir_entry_attributes;
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	7f1a      	ldrb	r2, [r3, #28]
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_time =            entry_ptr -> fx_dir_entry_time;
 800b3a6:	693b      	ldr	r3, [r7, #16]
 800b3a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_date =            entry_ptr -> fx_dir_entry_date;
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3b4:	697b      	ldr	r3, [r7, #20]
 800b3b6:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_reserved =        entry_ptr -> fx_dir_entry_reserved;
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	7f5a      	ldrb	r2, [r3, #29]
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time_ms = entry_ptr -> fx_dir_entry_created_time_ms;
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	7f9a      	ldrb	r2, [r3, #30]
 800b3c8:	697b      	ldr	r3, [r7, #20]
 800b3ca:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time =    entry_ptr -> fx_dir_entry_created_time;
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	6a1a      	ldr	r2, [r3, #32]
 800b3d2:	697b      	ldr	r3, [r7, #20]
 800b3d4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_date =    entry_ptr -> fx_dir_entry_created_date;
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        }
    }
#endif

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 800b3e2:	2300      	movs	r3, #0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3778      	adds	r7, #120	; 0x78
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b3ee:	bf00      	nop

0800b3f0 <_fx_directory_free_search>:
/*                                            check for sub directory,    */
/*                                            resulting in version 6.1.12 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_free_search(FX_MEDIA *media_ptr, FX_DIR_ENTRY *directory_ptr, FX_DIR_ENTRY *entry_ptr)
{
 800b3f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3f4:	b0a8      	sub	sp, #160	; 0xa0
 800b3f6:	af04      	add	r7, sp, #16
 800b3f8:	6278      	str	r0, [r7, #36]	; 0x24
 800b3fa:	6239      	str	r1, [r7, #32]
 800b3fc:	61fa      	str	r2, [r7, #28]
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory free entry search requests.  */
    media_ptr -> fx_media_directory_free_searches++;
 800b3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b400:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800b404:	1c5a      	adds	r2, r3, #1
 800b406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b408:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
#endif

    /* Initialize the entry sector values.  */
    entry_sector = entry_offset = 0;
 800b40c:	2300      	movs	r3, #0
 800b40e:	67bb      	str	r3, [r7, #120]	; 0x78
 800b410:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b412:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Set the long file name flag to false.  */
    entry_ptr -> fx_dir_entry_long_name_present =  0;
 800b414:	69fb      	ldr	r3, [r7, #28]
 800b416:	2200      	movs	r2, #0
 800b418:	615a      	str	r2, [r3, #20]

    /* Are there leading dots?  */
    if (entry_ptr -> fx_dir_entry_name[0] == '.')
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	2b2e      	cmp	r3, #46	; 0x2e
 800b422:	d108      	bne.n	800b436 <_fx_directory_free_search+0x46>
    {

        /* Is there more than 1 dot?  */
        if (entry_ptr -> fx_dir_entry_name[1] == '.')
 800b424:	69fb      	ldr	r3, [r7, #28]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	3301      	adds	r3, #1
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	2b2e      	cmp	r3, #46	; 0x2e
 800b42e:	d102      	bne.n	800b436 <_fx_directory_free_search+0x46>
        {
            /* Yes, consider the name invalid.  */
            return(FX_INVALID_NAME);
 800b430:	230c      	movs	r3, #12
 800b432:	f000 bc17 	b.w	800bc64 <_fx_directory_free_search+0x874>
        }
    }

    /* Determine if a long file name is present.  */
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 800b436:	2300      	movs	r3, #0
 800b438:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b43c:	2300      	movs	r3, #0
 800b43e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b442:	e13d      	b.n	800b6c0 <_fx_directory_free_search+0x2d0>
    {

        /* Check for upper-case characters.  */
        if ((entry_ptr -> fx_dir_entry_name[i] >= 'A') && (entry_ptr -> fx_dir_entry_name[i] <= 'Z'))
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	681a      	ldr	r2, [r3, #0]
 800b448:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b44c:	4413      	add	r3, r2
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	2b40      	cmp	r3, #64	; 0x40
 800b452:	d908      	bls.n	800b466 <_fx_directory_free_search+0x76>
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	681a      	ldr	r2, [r3, #0]
 800b458:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b45c:	4413      	add	r3, r2
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	2b5a      	cmp	r3, #90	; 0x5a
 800b462:	f240 8121 	bls.w	800b6a8 <_fx_directory_free_search+0x2b8>
        {
            continue;
        }
        /* Check for numeric characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] >= '0') && (entry_ptr -> fx_dir_entry_name[i] <= '9'))
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b46e:	4413      	add	r3, r2
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	2b2f      	cmp	r3, #47	; 0x2f
 800b474:	d908      	bls.n	800b488 <_fx_directory_free_search+0x98>
 800b476:	69fb      	ldr	r3, [r7, #28]
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b47e:	4413      	add	r3, r2
 800b480:	781b      	ldrb	r3, [r3, #0]
 800b482:	2b39      	cmp	r3, #57	; 0x39
 800b484:	f240 8112 	bls.w	800b6ac <_fx_directory_free_search+0x2bc>
        {
            continue;
        }
        /* Check for any lower-case characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] >= 'a') && (entry_ptr -> fx_dir_entry_name[i] <= 'z'))
 800b488:	69fb      	ldr	r3, [r7, #28]
 800b48a:	681a      	ldr	r2, [r3, #0]
 800b48c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b490:	4413      	add	r3, r2
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	2b60      	cmp	r3, #96	; 0x60
 800b496:	d90b      	bls.n	800b4b0 <_fx_directory_free_search+0xc0>
 800b498:	69fb      	ldr	r3, [r7, #28]
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4a0:	4413      	add	r3, r2
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	2b7a      	cmp	r3, #122	; 0x7a
 800b4a6:	d803      	bhi.n	800b4b0 <_fx_directory_free_search+0xc0>
        {
            entry_ptr -> fx_dir_entry_long_name_present =  1;
 800b4a8:	69fb      	ldr	r3, [r7, #28]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	615a      	str	r2, [r3, #20]
 800b4ae:	e102      	b.n	800b6b6 <_fx_directory_free_search+0x2c6>
        }
        /* Check for a space in the middle of the name.  */
        else if (entry_ptr -> fx_dir_entry_name[i] == ' ')
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4b8:	4413      	add	r3, r2
 800b4ba:	781b      	ldrb	r3, [r3, #0]
 800b4bc:	2b20      	cmp	r3, #32
 800b4be:	d103      	bne.n	800b4c8 <_fx_directory_free_search+0xd8>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800b4c0:	69fb      	ldr	r3, [r7, #28]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	615a      	str	r2, [r3, #20]
 800b4c6:	e0f6      	b.n	800b6b6 <_fx_directory_free_search+0x2c6>
        }
        /* Check for a dot in the name.  */
        else if (entry_ptr -> fx_dir_entry_name[i] == '.')
 800b4c8:	69fb      	ldr	r3, [r7, #28]
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4d0:	4413      	add	r3, r2
 800b4d2:	781b      	ldrb	r3, [r3, #0]
 800b4d4:	2b2e      	cmp	r3, #46	; 0x2e
 800b4d6:	d114      	bne.n	800b502 <_fx_directory_free_search+0x112>
        {
            /* Determine if this is the first dot detected.  */
            if (j == 0)
 800b4d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d10c      	bne.n	800b4fa <_fx_directory_free_search+0x10a>
            {
                /* First dot, remember where it was.  */
                j = i;
 800b4e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                /* Determine if this is a leading dot.  */
                if (i == 0)
 800b4e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	f040 80e2 	bne.w	800b6b6 <_fx_directory_free_search+0x2c6>
                {

                    /* Leading dot detected, treat as a long filename.  */
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 800b4f2:	69fb      	ldr	r3, [r7, #28]
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	615a      	str	r2, [r3, #20]
 800b4f8:	e0dd      	b.n	800b6b6 <_fx_directory_free_search+0x2c6>
                }
            }
            else
            {
                /* Second dot detected, must have a long file name.  */
                entry_ptr -> fx_dir_entry_long_name_present = 1;
 800b4fa:	69fb      	ldr	r3, [r7, #28]
 800b4fc:	2201      	movs	r2, #1
 800b4fe:	615a      	str	r2, [r3, #20]
 800b500:	e0d9      	b.n	800b6b6 <_fx_directory_free_search+0x2c6>
            }
        }
        /* Check for a special 0xE5 character.  */
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == (UCHAR)0xE5)
 800b502:	69fb      	ldr	r3, [r7, #28]
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b50a:	4413      	add	r3, r2
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	2be5      	cmp	r3, #229	; 0xe5
 800b510:	d103      	bne.n	800b51a <_fx_directory_free_search+0x12a>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800b512:	69fb      	ldr	r3, [r7, #28]
 800b514:	2201      	movs	r2, #1
 800b516:	615a      	str	r2, [r3, #20]
 800b518:	e0cd      	b.n	800b6b6 <_fx_directory_free_search+0x2c6>
        }
        /* Check for code point value greater than 127.  */
        else if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] > (UCHAR)127)
 800b51a:	69fb      	ldr	r3, [r7, #28]
 800b51c:	681a      	ldr	r2, [r3, #0]
 800b51e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b522:	4413      	add	r3, r2
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	b25b      	sxtb	r3, r3
 800b528:	2b00      	cmp	r3, #0
 800b52a:	f2c0 80c1 	blt.w	800b6b0 <_fx_directory_free_search+0x2c0>
        {
            continue;
        }
        /* Check for any special characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] == '~') ||
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	681a      	ldr	r2, [r3, #0]
 800b532:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b536:	4413      	add	r3, r2
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	2b7e      	cmp	r3, #126	; 0x7e
 800b53c:	f000 80ba 	beq.w	800b6b4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '-') ||
 800b540:	69fb      	ldr	r3, [r7, #28]
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b548:	4413      	add	r3, r2
 800b54a:	781b      	ldrb	r3, [r3, #0]
        else if ((entry_ptr -> fx_dir_entry_name[i] == '~') ||
 800b54c:	2b2d      	cmp	r3, #45	; 0x2d
 800b54e:	f000 80b1 	beq.w	800b6b4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '_') ||
 800b552:	69fb      	ldr	r3, [r7, #28]
 800b554:	681a      	ldr	r2, [r3, #0]
 800b556:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b55a:	4413      	add	r3, r2
 800b55c:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '-') ||
 800b55e:	2b5f      	cmp	r3, #95	; 0x5f
 800b560:	f000 80a8 	beq.w	800b6b4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '}') ||
 800b564:	69fb      	ldr	r3, [r7, #28]
 800b566:	681a      	ldr	r2, [r3, #0]
 800b568:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b56c:	4413      	add	r3, r2
 800b56e:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '_') ||
 800b570:	2b7d      	cmp	r3, #125	; 0x7d
 800b572:	f000 809f 	beq.w	800b6b4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '{') ||
 800b576:	69fb      	ldr	r3, [r7, #28]
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b57e:	4413      	add	r3, r2
 800b580:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '}') ||
 800b582:	2b7b      	cmp	r3, #123	; 0x7b
 800b584:	f000 8096 	beq.w	800b6b4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '(') ||
 800b588:	69fb      	ldr	r3, [r7, #28]
 800b58a:	681a      	ldr	r2, [r3, #0]
 800b58c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b590:	4413      	add	r3, r2
 800b592:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '{') ||
 800b594:	2b28      	cmp	r3, #40	; 0x28
 800b596:	f000 808d 	beq.w	800b6b4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == ')') ||
 800b59a:	69fb      	ldr	r3, [r7, #28]
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b5a2:	4413      	add	r3, r2
 800b5a4:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '(') ||
 800b5a6:	2b29      	cmp	r3, #41	; 0x29
 800b5a8:	f000 8084 	beq.w	800b6b4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '`') ||
 800b5ac:	69fb      	ldr	r3, [r7, #28]
 800b5ae:	681a      	ldr	r2, [r3, #0]
 800b5b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b5b4:	4413      	add	r3, r2
 800b5b6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ')') ||
 800b5b8:	2b60      	cmp	r3, #96	; 0x60
 800b5ba:	d07b      	beq.n	800b6b4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 800b5bc:	69fb      	ldr	r3, [r7, #28]
 800b5be:	681a      	ldr	r2, [r3, #0]
 800b5c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b5c4:	4413      	add	r3, r2
 800b5c6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '`') ||
 800b5c8:	2b27      	cmp	r3, #39	; 0x27
 800b5ca:	d073      	beq.n	800b6b4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '!') ||
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	681a      	ldr	r2, [r3, #0]
 800b5d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b5d4:	4413      	add	r3, r2
 800b5d6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '\'') ||
 800b5d8:	2b21      	cmp	r3, #33	; 0x21
 800b5da:	d06b      	beq.n	800b6b4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '#') ||
 800b5dc:	69fb      	ldr	r3, [r7, #28]
 800b5de:	681a      	ldr	r2, [r3, #0]
 800b5e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b5e4:	4413      	add	r3, r2
 800b5e6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '!') ||
 800b5e8:	2b23      	cmp	r3, #35	; 0x23
 800b5ea:	d063      	beq.n	800b6b4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '$') ||
 800b5ec:	69fb      	ldr	r3, [r7, #28]
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b5f4:	4413      	add	r3, r2
 800b5f6:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '#') ||
 800b5f8:	2b24      	cmp	r3, #36	; 0x24
 800b5fa:	d05b      	beq.n	800b6b4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '&') ||
 800b5fc:	69fb      	ldr	r3, [r7, #28]
 800b5fe:	681a      	ldr	r2, [r3, #0]
 800b600:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b604:	4413      	add	r3, r2
 800b606:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '$') ||
 800b608:	2b26      	cmp	r3, #38	; 0x26
 800b60a:	d053      	beq.n	800b6b4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '@') ||
 800b60c:	69fb      	ldr	r3, [r7, #28]
 800b60e:	681a      	ldr	r2, [r3, #0]
 800b610:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b614:	4413      	add	r3, r2
 800b616:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '&') ||
 800b618:	2b40      	cmp	r3, #64	; 0x40
 800b61a:	d04b      	beq.n	800b6b4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '^') ||
 800b61c:	69fb      	ldr	r3, [r7, #28]
 800b61e:	681a      	ldr	r2, [r3, #0]
 800b620:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b624:	4413      	add	r3, r2
 800b626:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '@') ||
 800b628:	2b5e      	cmp	r3, #94	; 0x5e
 800b62a:	d043      	beq.n	800b6b4 <_fx_directory_free_search+0x2c4>
                 (entry_ptr -> fx_dir_entry_name[i] == '%'))
 800b62c:	69fb      	ldr	r3, [r7, #28]
 800b62e:	681a      	ldr	r2, [r3, #0]
 800b630:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b634:	4413      	add	r3, r2
 800b636:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '^') ||
 800b638:	2b25      	cmp	r3, #37	; 0x25
 800b63a:	d03b      	beq.n	800b6b4 <_fx_directory_free_search+0x2c4>
        {
            continue;
        }
        /* Check for long filename special characters.  */
        else if ((entry_ptr -> fx_dir_entry_name[i] == '+') ||
 800b63c:	69fb      	ldr	r3, [r7, #28]
 800b63e:	681a      	ldr	r2, [r3, #0]
 800b640:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b644:	4413      	add	r3, r2
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	2b2b      	cmp	r3, #43	; 0x2b
 800b64a:	d027      	beq.n	800b69c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	681a      	ldr	r2, [r3, #0]
 800b650:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b654:	4413      	add	r3, r2
 800b656:	781b      	ldrb	r3, [r3, #0]
        else if ((entry_ptr -> fx_dir_entry_name[i] == '+') ||
 800b658:	2b2c      	cmp	r3, #44	; 0x2c
 800b65a:	d01f      	beq.n	800b69c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ';') ||
 800b65c:	69fb      	ldr	r3, [r7, #28]
 800b65e:	681a      	ldr	r2, [r3, #0]
 800b660:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b664:	4413      	add	r3, r2
 800b666:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ',') ||
 800b668:	2b3b      	cmp	r3, #59	; 0x3b
 800b66a:	d017      	beq.n	800b69c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == '=') ||
 800b66c:	69fb      	ldr	r3, [r7, #28]
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b674:	4413      	add	r3, r2
 800b676:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == ';') ||
 800b678:	2b3d      	cmp	r3, #61	; 0x3d
 800b67a:	d00f      	beq.n	800b69c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b684:	4413      	add	r3, r2
 800b686:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '=') ||
 800b688:	2b5b      	cmp	r3, #91	; 0x5b
 800b68a:	d007      	beq.n	800b69c <_fx_directory_free_search+0x2ac>
                 (entry_ptr -> fx_dir_entry_name[i] == ']'))
 800b68c:	69fb      	ldr	r3, [r7, #28]
 800b68e:	681a      	ldr	r2, [r3, #0]
 800b690:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b694:	4413      	add	r3, r2
 800b696:	781b      	ldrb	r3, [r3, #0]
                 (entry_ptr -> fx_dir_entry_name[i] == '[') ||
 800b698:	2b5d      	cmp	r3, #93	; 0x5d
 800b69a:	d103      	bne.n	800b6a4 <_fx_directory_free_search+0x2b4>
        {
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800b69c:	69fb      	ldr	r3, [r7, #28]
 800b69e:	2201      	movs	r2, #1
 800b6a0:	615a      	str	r2, [r3, #20]
 800b6a2:	e008      	b.n	800b6b6 <_fx_directory_free_search+0x2c6>
        }
        /* Something is wrong with the supplied name.  */
        else
        {
            return(FX_INVALID_NAME);
 800b6a4:	230c      	movs	r3, #12
 800b6a6:	e2dd      	b.n	800bc64 <_fx_directory_free_search+0x874>
            continue;
 800b6a8:	bf00      	nop
 800b6aa:	e004      	b.n	800b6b6 <_fx_directory_free_search+0x2c6>
            continue;
 800b6ac:	bf00      	nop
 800b6ae:	e002      	b.n	800b6b6 <_fx_directory_free_search+0x2c6>
            continue;
 800b6b0:	bf00      	nop
 800b6b2:	e000      	b.n	800b6b6 <_fx_directory_free_search+0x2c6>
            continue;
 800b6b4:	bf00      	nop
    for (i = 0, j = 0; entry_ptr -> fx_dir_entry_name[i]; i++)
 800b6b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b6c0:	69fb      	ldr	r3, [r7, #28]
 800b6c2:	681a      	ldr	r2, [r3, #0]
 800b6c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b6c8:	4413      	add	r3, r2
 800b6ca:	781b      	ldrb	r3, [r3, #0]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	f47f aeb9 	bne.w	800b444 <_fx_directory_free_search+0x54>
        }
    }

    /* Determine if a dot was found.  */
    if (j != 0)
 800b6d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d009      	beq.n	800b6ee <_fx_directory_free_search+0x2fe>
    {

        /* Yes, Determine if the extension exceeds a 3 character extension.  */
        if ((i - j) > 4)
 800b6da:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b6de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b6e2:	1ad3      	subs	r3, r2, r3
 800b6e4:	2b04      	cmp	r3, #4
 800b6e6:	d902      	bls.n	800b6ee <_fx_directory_free_search+0x2fe>
        {

            /* Yes, long file name is present.  */
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800b6e8:	69fb      	ldr	r3, [r7, #28]
 800b6ea:	2201      	movs	r2, #1
 800b6ec:	615a      	str	r2, [r3, #20]
        }
    }

    /* Calculate the total entries needed.  */
    if ((i <= 12) && (entry_ptr -> fx_dir_entry_long_name_present == 0))
 800b6ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b6f2:	2b0c      	cmp	r3, #12
 800b6f4:	d818      	bhi.n	800b728 <_fx_directory_free_search+0x338>
 800b6f6:	69fb      	ldr	r3, [r7, #28]
 800b6f8:	695b      	ldr	r3, [r3, #20]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d114      	bne.n	800b728 <_fx_directory_free_search+0x338>
    {

        /* Initialize the total entries to 1.  */
        total_entries = 1;
 800b6fe:	2301      	movs	r3, #1
 800b700:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

        /* Check for special instance of long file name.  */
        if ((j >= 9) || ((i - j) >= 9))
 800b704:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b708:	2b08      	cmp	r3, #8
 800b70a:	d806      	bhi.n	800b71a <_fx_directory_free_search+0x32a>
 800b70c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b710:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b714:	1ad3      	subs	r3, r2, r3
 800b716:	2b08      	cmp	r3, #8
 800b718:	d928      	bls.n	800b76c <_fx_directory_free_search+0x37c>
        {

            /* The dot is after 8 character or there is no dot and the name
               is greater than 8 character. */
            entry_ptr -> fx_dir_entry_long_name_present = 1;
 800b71a:	69fb      	ldr	r3, [r7, #28]
 800b71c:	2201      	movs	r2, #1
 800b71e:	615a      	str	r2, [r3, #20]
            total_entries = 2;
 800b720:	2302      	movs	r3, #2
 800b722:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
        if ((j >= 9) || ((i - j) >= 9))
 800b726:	e021      	b.n	800b76c <_fx_directory_free_search+0x37c>
    else
    {

        /* Long file name is present, calculate how many entries are needed
           to represent it.  */
        if (i % 13 == 0)
 800b728:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800b72c:	4b95      	ldr	r3, [pc, #596]	; (800b984 <_fx_directory_free_search+0x594>)
 800b72e:	fba3 2301 	umull	r2, r3, r3, r1
 800b732:	089a      	lsrs	r2, r3, #2
 800b734:	4613      	mov	r3, r2
 800b736:	005b      	lsls	r3, r3, #1
 800b738:	4413      	add	r3, r2
 800b73a:	009b      	lsls	r3, r3, #2
 800b73c:	4413      	add	r3, r2
 800b73e:	1aca      	subs	r2, r1, r3
 800b740:	2a00      	cmp	r2, #0
 800b742:	d109      	bne.n	800b758 <_fx_directory_free_search+0x368>
        {
            /* Exact fit, just add one for the 8.3 short name.  */
            total_entries = i / 13 + 1;
 800b744:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b748:	4a8e      	ldr	r2, [pc, #568]	; (800b984 <_fx_directory_free_search+0x594>)
 800b74a:	fba2 2303 	umull	r2, r3, r2, r3
 800b74e:	089b      	lsrs	r3, r3, #2
 800b750:	3301      	adds	r3, #1
 800b752:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b756:	e00a      	b.n	800b76e <_fx_directory_free_search+0x37e>
        }
        else
        {
            /* Non-exact fit, add two for 8.3 short name and overlap.  */
            total_entries = i / 13 + 2;
 800b758:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b75c:	4a89      	ldr	r2, [pc, #548]	; (800b984 <_fx_directory_free_search+0x594>)
 800b75e:	fba2 2303 	umull	r2, r3, r2, r3
 800b762:	089b      	lsrs	r3, r3, #2
 800b764:	3302      	adds	r3, #2
 800b766:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b76a:	e000      	b.n	800b76e <_fx_directory_free_search+0x37e>
        if ((j >= 9) || ((i - j) >= 9))
 800b76c:	bf00      	nop
    }

    /* Determine if the search is in the root directory or in a
       sub-directory.  Note: the directory search function clears the
       first character of the name for the root directory.  */
    if (directory_ptr -> fx_dir_entry_name[0])
 800b76e:	6a3b      	ldr	r3, [r7, #32]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	781b      	ldrb	r3, [r3, #0]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d00c      	beq.n	800b792 <_fx_directory_free_search+0x3a2>

        /* Search for a free entry in a sub-directory.  */

        /* Pickup the number of entries in this directory.  This was placed
           into the unused file size field.  */
        directory_entries =  (ULONG)directory_ptr -> fx_dir_entry_file_size;
 800b778:	6a3b      	ldr	r3, [r7, #32]
 800b77a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b77e:	4613      	mov	r3, r2
 800b780:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Point the search directory pointer to this entry.  */
        search_dir_ptr =  directory_ptr;
 800b782:	6a3b      	ldr	r3, [r7, #32]
 800b784:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Ensure that the search directory's last search cluster is cleared.  */
        search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 800b786:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b788:	2200      	movs	r2, #0
 800b78a:	651a      	str	r2, [r3, #80]	; 0x50

        /* Set the initial index to 2, since the first two directory entries are
           always allocated.  */
        directory_index =  2;
 800b78c:	2302      	movs	r3, #2
 800b78e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b790:	e006      	b.n	800b7a0 <_fx_directory_free_search+0x3b0>
    {

        /* Find a free entry in the root directory.  */

        /* Setup the number of directory entries.  */
        directory_entries =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 800b792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b794:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b796:	65fb      	str	r3, [r7, #92]	; 0x5c

        /* Set the search pointer to NULL since we are working off of the
           root directory.  */
        search_dir_ptr =  FX_NULL;
 800b798:	2300      	movs	r3, #0
 800b79a:	65bb      	str	r3, [r7, #88]	; 0x58

        /* Set the initial index to 0, since the first entry of the root directory is valid.  */
        directory_index =  0;
 800b79c:	2300      	movs	r3, #0
 800b79e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }

    /* Loop through entries in the search directory.  Yes, this is a
       linear search!  */
    free_entry_start = directory_entries;
 800b7a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b7a2:	657b      	str	r3, [r7, #84]	; 0x54
    do
    {

        /* Read an entry from the directory.  */
        status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &directory_index, entry_ptr);
 800b7a4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800b7a8:	69fb      	ldr	r3, [r7, #28]
 800b7aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b7ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7ae:	f7fe fc5d 	bl	800a06c <_fx_directory_entry_read>
 800b7b2:	64f8      	str	r0, [r7, #76]	; 0x4c

        /* Check for error status.  */
        if (status != FX_SUCCESS)
 800b7b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d001      	beq.n	800b7be <_fx_directory_free_search+0x3ce>
        {
            return(status);
 800b7ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7bc:	e252      	b.n	800bc64 <_fx_directory_free_search+0x874>
        }

        /* Determine if this is an empty entry.  */
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 800b7be:	69fb      	ldr	r3, [r7, #28]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	2be5      	cmp	r3, #229	; 0xe5
 800b7c6:	d103      	bne.n	800b7d0 <_fx_directory_free_search+0x3e0>
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	791b      	ldrb	r3, [r3, #4]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d004      	beq.n	800b7da <_fx_directory_free_search+0x3ea>
            ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_DONE))
 800b7d0:	69fb      	ldr	r3, [r7, #28]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	781b      	ldrb	r3, [r3, #0]
        if ((((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)) ||
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d16b      	bne.n	800b8b2 <_fx_directory_free_search+0x4c2>
        {

            /* Determine how many entries are needed.  */
            if (total_entries > 1)
 800b7da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b7de:	2b01      	cmp	r3, #1
 800b7e0:	d91a      	bls.n	800b818 <_fx_directory_free_search+0x428>
            {

                /* Multiple entries are needed for long file names.  Mark this
                   entry as free. */
                if (entry_ptr -> fx_dir_entry_name[0] == FX_DIR_ENTRY_DONE)
 800b7e2:	69fb      	ldr	r3, [r7, #28]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d115      	bne.n	800b818 <_fx_directory_free_search+0x428>
                {

                    entry_ptr -> fx_dir_entry_long_name_present =  0;
 800b7ec:	69fb      	ldr	r3, [r7, #28]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	615a      	str	r2, [r3, #20]
                    entry_ptr -> fx_dir_entry_name[0] =      (CHAR)FX_DIR_ENTRY_FREE;
 800b7f2:	69fb      	ldr	r3, [r7, #28]
 800b7f4:	681a      	ldr	r2, [r3, #0]
 800b7f6:	23e5      	movs	r3, #229	; 0xe5
 800b7f8:	7013      	strb	r3, [r2, #0]
                    entry_ptr -> fx_dir_entry_name[1] =      (CHAR)0;
 800b7fa:	69fb      	ldr	r3, [r7, #28]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	1c5a      	adds	r2, r3, #1
 800b800:	2300      	movs	r3, #0
 800b802:	7013      	strb	r3, [r2, #0]

                    /* Write out the directory entry.  */
                    status = _fx_directory_entry_write(media_ptr, entry_ptr);
 800b804:	69f9      	ldr	r1, [r7, #28]
 800b806:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b808:	f7fe ffb6 	bl	800a778 <_fx_directory_entry_write>
 800b80c:	64f8      	str	r0, [r7, #76]	; 0x4c
                    if(status != FX_SUCCESS)
 800b80e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b810:	2b00      	cmp	r3, #0
 800b812:	d001      	beq.n	800b818 <_fx_directory_free_search+0x428>
                    {  
                        return(status);
 800b814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b816:	e225      	b.n	800bc64 <_fx_directory_free_search+0x874>
                       i.e. entries must be logically contiguous.  */
                }
            }

            /* Determine if we are at the first free entry.  */
            if (free_entry_start == directory_entries)
 800b818:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b81a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d109      	bne.n	800b834 <_fx_directory_free_search+0x444>
            {

                /* Remember the start of the free entry.  */
                free_entry_start =  directory_index;
 800b820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b822:	657b      	str	r3, [r7, #84]	; 0x54
                entry_sector =      (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 800b824:	69fb      	ldr	r3, [r7, #28]
 800b826:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800b82a:	4613      	mov	r3, r2
 800b82c:	67fb      	str	r3, [r7, #124]	; 0x7c
                entry_offset  =     entry_ptr -> fx_dir_entry_byte_offset;
 800b82e:	69fb      	ldr	r3, [r7, #28]
 800b830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b832:	67bb      	str	r3, [r7, #120]	; 0x78
            }

            /* Determine if there are enough free entries to satisfy the request.  */
            if ((directory_index - free_entry_start + 1) >= total_entries)
 800b834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b838:	1ad3      	subs	r3, r2, r3
 800b83a:	3301      	adds	r3, #1
 800b83c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b840:	429a      	cmp	r2, r3
 800b842:	d838      	bhi.n	800b8b6 <_fx_directory_free_search+0x4c6>

                /* Found an empty slot.  Most pertinent information is already
                   in the entry structure.  */

                /* Setup the the sector and the offset.  */
                entry_ptr -> fx_dir_entry_log_sector =      entry_sector;
 800b844:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b846:	2200      	movs	r2, #0
 800b848:	461c      	mov	r4, r3
 800b84a:	4615      	mov	r5, r2
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	e9c3 4510 	strd	r4, r5, [r3, #64]	; 0x40
                entry_ptr -> fx_dir_entry_byte_offset =     entry_offset;
 800b852:	69fb      	ldr	r3, [r7, #28]
 800b854:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b856:	649a      	str	r2, [r3, #72]	; 0x48

                /* Initialize the additional directory entries.  */
                entry_ptr -> fx_dir_entry_reserved =            0;
 800b858:	69fb      	ldr	r3, [r7, #28]
 800b85a:	2200      	movs	r2, #0
 800b85c:	775a      	strb	r2, [r3, #29]
                entry_ptr -> fx_dir_entry_created_time_ms =     0;
 800b85e:	69fb      	ldr	r3, [r7, #28]
 800b860:	2200      	movs	r2, #0
 800b862:	779a      	strb	r2, [r3, #30]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b864:	f3ef 8310 	mrs	r3, PRIMASK
 800b868:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
    return(posture);
 800b86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 800b86c:	637b      	str	r3, [r7, #52]	; 0x34

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800b86e:	b672      	cpsid	i
#endif
    return(int_posture);
 800b870:	6b7b      	ldr	r3, [r7, #52]	; 0x34

                /* Lockout interrupts for time/date access.  */
                FX_DISABLE_INTS
 800b872:	64bb      	str	r3, [r7, #72]	; 0x48

                entry_ptr -> fx_dir_entry_created_time =        _fx_system_time;
 800b874:	4b44      	ldr	r3, [pc, #272]	; (800b988 <_fx_directory_free_search+0x598>)
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	69fb      	ldr	r3, [r7, #28]
 800b87a:	621a      	str	r2, [r3, #32]
                entry_ptr -> fx_dir_entry_created_date =        _fx_system_date;
 800b87c:	4b43      	ldr	r3, [pc, #268]	; (800b98c <_fx_directory_free_search+0x59c>)
 800b87e:	681a      	ldr	r2, [r3, #0]
 800b880:	69fb      	ldr	r3, [r7, #28]
 800b882:	625a      	str	r2, [r3, #36]	; 0x24
                entry_ptr -> fx_dir_entry_last_accessed_date =  _fx_system_date;
 800b884:	4b41      	ldr	r3, [pc, #260]	; (800b98c <_fx_directory_free_search+0x59c>)
 800b886:	681a      	ldr	r2, [r3, #0]
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	629a      	str	r2, [r3, #40]	; 0x28
 800b88c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b88e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b892:	f383 8810 	msr	PRIMASK, r3
}
 800b896:	bf00      	nop

                /* Restore interrupts.  */
                FX_RESTORE_INTS

                /* Determine if a long file name is present.  */
                if (total_entries == 1)
 800b898:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d103      	bne.n	800b8a8 <_fx_directory_free_search+0x4b8>
                {
                    entry_ptr -> fx_dir_entry_long_name_present =  0;
 800b8a0:	69fb      	ldr	r3, [r7, #28]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	615a      	str	r2, [r3, #20]
 800b8a6:	e002      	b.n	800b8ae <_fx_directory_free_search+0x4be>
                }
                else
                {
                    entry_ptr -> fx_dir_entry_long_name_present =  1;
 800b8a8:	69fb      	ldr	r3, [r7, #28]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	615a      	str	r2, [r3, #20]
                }

                /* Return a successful completion.  */
                return(FX_SUCCESS);
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	e1d8      	b.n	800bc64 <_fx_directory_free_search+0x874>
        }
        else
        {

            /* Reset the free entry start.  */
            free_entry_start =  directory_entries;
 800b8b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8b4:	657b      	str	r3, [r7, #84]	; 0x54
        }

        /* Move to the next entry.  */
        directory_index++;
 800b8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b8:	3301      	adds	r3, #1
 800b8ba:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if we have exceeded the number of entries in the current directory.  */
        if (directory_index >= directory_entries)
 800b8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	f200 81c9 	bhi.w	800bc58 <_fx_directory_free_search+0x868>
        {

            /* Calculate how many sectors we need for the new directory entry.  */
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 800b8c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b8ca:	015a      	lsls	r2, r3, #5
 800b8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8d0:	4413      	add	r3, r2
 800b8d2:	1e5a      	subs	r2, r3, #1
                                                                            media_ptr -> fx_media_bytes_per_sector;
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            sectors =  ((total_entries * FX_DIR_ENTRY_SIZE) + (media_ptr -> fx_media_bytes_per_sector - 1))/
 800b8d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8dc:	653b      	str	r3, [r7, #80]	; 0x50

            /* Now calculate how many clusters we need for the new directory entry.  */
            clusters_needed = (sectors + (media_ptr -> fx_media_sectors_per_cluster - 1)) / media_ptr -> fx_media_sectors_per_cluster;
 800b8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b8e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8e4:	4413      	add	r3, r2
 800b8e6:	1e5a      	subs	r2, r3, #1
 800b8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8f0:	647b      	str	r3, [r7, #68]	; 0x44

            /* Not enough empty entries were found.  If the specified directory is a sub-directory,
               attempt to allocate another cluster to it.  */
            if (((search_dir_ptr) || (media_ptr -> fx_media_32_bit_FAT)) && (media_ptr -> fx_media_available_clusters >= clusters_needed))
 800b8f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d104      	bne.n	800b902 <_fx_directory_free_search+0x512>
 800b8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	f000 81ab 	beq.w	800bc58 <_fx_directory_free_search+0x868>
 800b902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b906:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b908:	429a      	cmp	r2, r3
 800b90a:	f200 81a5 	bhi.w	800bc58 <_fx_directory_free_search+0x868>
            {

                /* Search for the additional clusters we need.  */
                first_new_cluster =  0;
 800b90e:	2300      	movs	r3, #0
 800b910:	66bb      	str	r3, [r7, #104]	; 0x68
                total_clusters =     media_ptr -> fx_media_total_clusters;
 800b912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b916:	66fb      	str	r3, [r7, #108]	; 0x6c
                last_cluster =       0;
 800b918:	2300      	movs	r3, #0
 800b91a:	667b      	str	r3, [r7, #100]	; 0x64
                FAT_index    =       media_ptr -> fx_media_cluster_search_start;
 800b91c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b91e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b922:	677b      	str	r3, [r7, #116]	; 0x74
                clusters =           clusters_needed;
 800b924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b926:	663b      	str	r3, [r7, #96]	; 0x60

                /* Loop to find the needed clusters.  */
                while (clusters)
 800b928:	e10b      	b.n	800bb42 <_fx_directory_free_search+0x752>
                {

                    /* Decrease the cluster count.  */
                    clusters--;
 800b92a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b92c:	3b01      	subs	r3, #1
 800b92e:	663b      	str	r3, [r7, #96]	; 0x60
                    /* Loop to find the first available cluster.  */
                    do
                    {

                        /* Make sure we stop looking after one pass through the FAT table.  */
                        if (!total_clusters)
 800b930:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b932:	2b00      	cmp	r3, #0
 800b934:	d101      	bne.n	800b93a <_fx_directory_free_search+0x54a>
                        {

                            /* Something is wrong with the media - the desired clusters were
                               not found in the FAT table.  */
                            return(FX_NO_MORE_SPACE);
 800b936:	230a      	movs	r3, #10
 800b938:	e194      	b.n	800bc64 <_fx_directory_free_search+0x874>
                        }

                        /* Read FAT entry.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 800b93a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b93e:	461a      	mov	r2, r3
 800b940:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800b942:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b944:	f005 f874 	bl	8010a30 <_fx_utility_FAT_entry_read>
 800b948:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Check for a bad status.  */
                        if (status != FX_SUCCESS)
 800b94a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d001      	beq.n	800b954 <_fx_directory_free_search+0x564>
                        {

                            /* Return the bad status.  */
                            return(status);
 800b950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b952:	e187      	b.n	800bc64 <_fx_directory_free_search+0x874>
                        }

                        /* Decrement the total cluster count.  */
                        total_clusters--;
 800b954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b956:	3b01      	subs	r3, #1
 800b958:	66fb      	str	r3, [r7, #108]	; 0x6c

                        /* Determine if the FAT entry is free.  */
                        if (FAT_value == FX_FREE_CLUSTER)
 800b95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d117      	bne.n	800b990 <_fx_directory_free_search+0x5a0>
                        {

                            /* Move cluster search pointer forward.  */
                            media_ptr -> fx_media_cluster_search_start =  FAT_index + 1;
 800b960:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b962:	1c5a      	adds	r2, r3, #1
 800b964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b966:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                            /* Determine if this needs to be wrapped.  */
                            if (media_ptr -> fx_media_cluster_search_start >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800b96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800b970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b974:	3302      	adds	r3, #2
 800b976:	429a      	cmp	r2, r3
 800b978:	d316      	bcc.n	800b9a8 <_fx_directory_free_search+0x5b8>
                            {

                                /* Wrap the search to the beginning FAT entry.  */
                                media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 800b97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97c:	2202      	movs	r2, #2
 800b97e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                            }

                            /* Break this loop.  */
                            break;
 800b982:	e011      	b.n	800b9a8 <_fx_directory_free_search+0x5b8>
 800b984:	4ec4ec4f 	.word	0x4ec4ec4f
 800b988:	24014c94 	.word	0x24014c94
 800b98c:	24014c90 	.word	0x24014c90
                        }
                        else
                        {

                            /* FAT entry is not free... Advance the FAT index.  */
                            FAT_index++;
 800b990:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b992:	3301      	adds	r3, #1
 800b994:	677b      	str	r3, [r7, #116]	; 0x74

                            /* Determine if we need to wrap the FAT index around.  */
                            if (FAT_index >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800b996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b99a:	3302      	adds	r3, #2
 800b99c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b99e:	429a      	cmp	r2, r3
 800b9a0:	d3c6      	bcc.n	800b930 <_fx_directory_free_search+0x540>
                            {

                                /* Wrap the search to the beginning FAT entry.  */
                                FAT_index =  FX_FAT_ENTRY_START;
 800b9a2:	2302      	movs	r3, #2
 800b9a4:	677b      	str	r3, [r7, #116]	; 0x74
                        if (!total_clusters)
 800b9a6:	e7c3      	b.n	800b930 <_fx_directory_free_search+0x540>
                            break;
 800b9a8:	bf00      	nop

                    /* We found an available cluster.  We now need to clear all of entries in
                       each of the cluster's sectors.  */

                    /* Calculate the logical sector of this cluster.  */
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 800b9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ac:	6d19      	ldr	r1, [r3, #80]	; 0x50
                                       ((((ULONG) FAT_index) - FX_FAT_ENTRY_START) *
 800b9ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b9b0:	1e9a      	subs	r2, r3, #2
                                       ((ULONG) media_ptr -> fx_media_sectors_per_cluster));
 800b9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                                       ((((ULONG) FAT_index) - FX_FAT_ENTRY_START) *
 800b9b6:	fb02 f303 	mul.w	r3, r2, r3
                    logical_sector =  ((ULONG) media_ptr -> fx_media_data_sector_start) +
 800b9ba:	440b      	add	r3, r1
 800b9bc:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Pickup the number of sectors for the next directory cluster.  */
                    sectors =  media_ptr -> fx_media_sectors_per_cluster;
 800b9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9c2:	653b      	str	r3, [r7, #80]	; 0x50

                    /* Read the logical sector just for cache reasons.  */
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800b9c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	613b      	str	r3, [r7, #16]
 800b9ca:	617a      	str	r2, [r7, #20]
                                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ce:	689a      	ldr	r2, [r3, #8]
                    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800b9d0:	2303      	movs	r3, #3
 800b9d2:	9302      	str	r3, [sp, #8]
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	9301      	str	r3, [sp, #4]
 800b9d8:	9200      	str	r2, [sp, #0]
 800b9da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b9de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b9e0:	f006 fc34 	bl	801224c <_fx_utility_logical_sector_read>
 800b9e4:	64f8      	str	r0, [r7, #76]	; 0x4c

                    /* Check the return value.  */
                    if (status != FX_SUCCESS)
 800b9e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d001      	beq.n	800b9f0 <_fx_directory_free_search+0x600>
                    {

                        /* Return the error status.  */
                        return(status);
 800b9ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9ee:	e139      	b.n	800bc64 <_fx_directory_free_search+0x874>
                    }

                    /* Clear the entire first sector of the new sub-directory cluster.  */
                    work_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800b9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                    i =  0;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 800b9fe:	e00d      	b.n	800ba1c <_fx_directory_free_search+0x62c>
                    {

                        /* Clear 4 bytes.  */
                        *((ULONG *)work_ptr) =  (ULONG)0;
 800ba00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba04:	2200      	movs	r2, #0
 800ba06:	601a      	str	r2, [r3, #0]

                        /* Increment pointer.  */
                        work_ptr =  work_ptr + sizeof(ULONG);
 800ba08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ba0c:	3304      	adds	r3, #4
 800ba0e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                        /* Increment counter.  */
                        i =  i + (ULONG)sizeof(ULONG);
 800ba12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ba16:	3304      	adds	r3, #4
 800ba18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                    while (i < media_ptr -> fx_media_bytes_per_sector)
 800ba1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba20:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d3eb      	bcc.n	800ba00 <_fx_directory_free_search+0x610>
                    }

                    /* Write the logical sector to ensure the zeros are written.  */
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800ba28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	60bb      	str	r3, [r7, #8]
 800ba2e:	60fa      	str	r2, [r7, #12]
                                                               media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800ba30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba32:	689a      	ldr	r2, [r3, #8]
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800ba34:	2303      	movs	r3, #3
 800ba36:	9302      	str	r3, [sp, #8]
 800ba38:	2301      	movs	r3, #1
 800ba3a:	9301      	str	r3, [sp, #4]
 800ba3c:	9200      	str	r2, [sp, #0]
 800ba3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ba42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba44:	f006 fe96 	bl	8012774 <_fx_utility_logical_sector_write>
 800ba48:	64f8      	str	r0, [r7, #76]	; 0x4c

                    /* Determine if the write was successful.  */
                    if (status != FX_SUCCESS)
 800ba4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d001      	beq.n	800ba54 <_fx_directory_free_search+0x664>
                    {

                        /* Return the error code.  */
                        return(status);
 800ba50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba52:	e107      	b.n	800bc64 <_fx_directory_free_search+0x874>
                    }

                    /* Determine if there are more sectors to clear in the first cluster of the new
                       sub-directory.  */
                    if (sectors > 1)
 800ba54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba56:	2b01      	cmp	r3, #1
 800ba58:	d95a      	bls.n	800bb10 <_fx_directory_free_search+0x720>

                        /* Yes, invalidate all cached sectors that are contained in the newly allocated first
                           cluster of the directory.  */

                        /* Flush the internal logical sector cache.  */
                        status =  _fx_utility_logical_sector_flush(media_ptr, (ULONG64) (logical_sector + 1), (ULONG64) (sectors - 1), FX_TRUE);
 800ba5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba5c:	3301      	adds	r3, #1
 800ba5e:	2200      	movs	r2, #0
 800ba60:	603b      	str	r3, [r7, #0]
 800ba62:	607a      	str	r2, [r7, #4]
 800ba64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba66:	3b01      	subs	r3, #1
 800ba68:	2200      	movs	r2, #0
 800ba6a:	4698      	mov	r8, r3
 800ba6c:	4691      	mov	r9, r2
 800ba6e:	2301      	movs	r3, #1
 800ba70:	9302      	str	r3, [sp, #8]
 800ba72:	e9cd 8900 	strd	r8, r9, [sp]
 800ba76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba7c:	f006 f9d0 	bl	8011e20 <_fx_utility_logical_sector_flush>
 800ba80:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Determine if the flush was successful.  */
                        if (status != FX_SUCCESS)
 800ba82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d001      	beq.n	800ba8c <_fx_directory_free_search+0x69c>
                        {

                            /* Return the error code.  */
                            return(status);
 800ba88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba8a:	e0eb      	b.n	800bc64 <_fx_directory_free_search+0x874>
                        }

                        /* Clear all additional sectors of new sub-directory.  */
                        sectors--;
 800ba8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba8e:	3b01      	subs	r3, #1
 800ba90:	653b      	str	r3, [r7, #80]	; 0x50
                        while (sectors)
 800ba92:	e03a      	b.n	800bb0a <_fx_directory_free_search+0x71a>
                        {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                            /* Increment the number of driver write sector(s) requests.  */
                            media_ptr -> fx_media_driver_write_requests++;
 800ba94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba96:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800ba9a:	1c5a      	adds	r2, r3, #1
 800ba9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba9e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                            /* Build Write request to the driver.  */
                            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800baa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa4:	2201      	movs	r2, #1
 800baa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800baaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baac:	2290      	movs	r2, #144	; 0x90
 800baae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 800bab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab4:	689a      	ldr	r2, [r3, #8]
 800bab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                            media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector + ((ULONG)sectors);
 800babc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800babe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bac0:	441a      	add	r2, r3
 800bac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bac4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                            media_ptr -> fx_media_driver_sectors =          1;
 800bac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baca:	2201      	movs	r2, #1
 800bacc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                            media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800bad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad2:	2203      	movs	r2, #3
 800bad4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                            /* Set the system write flag since we are writing a directory sector.  */
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800bad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bada:	2201      	movs	r2, #1
 800badc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                            /* If trace is enabled, insert this event into the trace buffer.  */
                            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, ((ULONG)logical_sector) + ((ULONG)sectors), 1, media_ptr -> fx_media_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                            /* Invoke the driver to write the sector.  */
                            (media_ptr -> fx_media_driver_entry) (media_ptr);
 800bae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bae2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bae6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bae8:	4798      	blx	r3

                            /* Clear the system write flag.  */
                            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800baea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baec:	2200      	movs	r2, #0
 800baee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                            /* Determine if an error occurred.  */
                            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800baf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d003      	beq.n	800bb04 <_fx_directory_free_search+0x714>
                            {

                                /* Return error code.  */
                                return(media_ptr -> fx_media_driver_status);
 800bafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bb02:	e0af      	b.n	800bc64 <_fx_directory_free_search+0x874>
                            }

                            /* Decrease the number of sectors to clear.  */
                            sectors--;
 800bb04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb06:	3b01      	subs	r3, #1
 800bb08:	653b      	str	r3, [r7, #80]	; 0x50
                        while (sectors)
 800bb0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d1c1      	bne.n	800ba94 <_fx_directory_free_search+0x6a4>
                        }
                    }

                    /* Determine if we have found the first new cluster yet.  */
                    if (first_new_cluster == 0)
 800bb10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d101      	bne.n	800bb1a <_fx_directory_free_search+0x72a>
                    {

                        /* Remember the first new cluster. */
                        first_new_cluster =  FAT_index;
 800bb16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb18:	66bb      	str	r3, [r7, #104]	; 0x68
                    }

                    /* Check for a valid last cluster to link.  */
                    if (last_cluster)
 800bb1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d00a      	beq.n	800bb36 <_fx_directory_free_search+0x746>
                    {

                        /* Normal condition - link the last cluster with the new
                           found cluster.  */
                        status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FAT_index);
 800bb20:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800bb22:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800bb24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb26:	f005 f9ac 	bl	8010e82 <_fx_utility_FAT_entry_write>
 800bb2a:	64f8      	str	r0, [r7, #76]	; 0x4c

                        /* Check for a bad FAT write status.  */
                        if (status !=  FX_SUCCESS)
 800bb2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d001      	beq.n	800bb36 <_fx_directory_free_search+0x746>
                        {

                            /* Return the bad status.  */
                            return(status);
 800bb32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb34:	e096      	b.n	800bc64 <_fx_directory_free_search+0x874>
                        }
                    }

                    /* Otherwise, remember the new FAT index as the last.  */
                    last_cluster =  FAT_index;
 800bb36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb38:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Move to the next FAT entry.  */
                    FAT_index =  media_ptr -> fx_media_cluster_search_start;
 800bb3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb40:	677b      	str	r3, [r7, #116]	; 0x74
                while (clusters)
 800bb42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	f47f aef0 	bne.w	800b92a <_fx_directory_free_search+0x53a>
                }

                /* Place an end-of-file marker on the last cluster.  */
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 800bb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb4c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800bb50:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 800bb54:	461a      	mov	r2, r3
 800bb56:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800bb58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb5a:	f005 f992 	bl	8010e82 <_fx_utility_FAT_entry_write>
 800bb5e:	64f8      	str	r0, [r7, #76]	; 0x4c

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 800bb60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d001      	beq.n	800bb6a <_fx_directory_free_search+0x77a>
                {

                    /* Return the bad status.  */
                    return(status);
 800bb66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb68:	e07c      	b.n	800bc64 <_fx_directory_free_search+0x874>
                /* Flush the cached individual FAT entries */
                _fx_utility_FAT_flush(media_ptr);
#endif

                /* Now the new cluster needs to be linked to the sub-directory.  */
                if (search_dir_ptr)
 800bb6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d003      	beq.n	800bb78 <_fx_directory_free_search+0x788>
                {
                    cluster = search_dir_ptr -> fx_dir_entry_cluster;
 800bb70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb74:	673b      	str	r3, [r7, #112]	; 0x70
 800bb76:	e002      	b.n	800bb7e <_fx_directory_free_search+0x78e>
                }
                else
                {
                    cluster = media_ptr -> fx_media_root_cluster_32;
 800bb78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb7c:	673b      	str	r3, [r7, #112]	; 0x70
                }

                /* Initialize loop variables.  */
                last_cluster =  0;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	667b      	str	r3, [r7, #100]	; 0x64
                i =  0;
 800bb82:	2300      	movs	r3, #0
 800bb84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                /* Follow the link of FAT entries.  */
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800bb88:	e024      	b.n	800bbd4 <_fx_directory_free_search+0x7e4>
                {

                    /* Read the current cluster entry from the FAT.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &FAT_value);
 800bb8a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bb8e:	461a      	mov	r2, r3
 800bb90:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800bb92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bb94:	f004 ff4c 	bl	8010a30 <_fx_utility_FAT_entry_read>
 800bb98:	64f8      	str	r0, [r7, #76]	; 0x4c
                    i++;
 800bb9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bb9e:	3301      	adds	r3, #1
 800bba0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                    /* Check the return value.  */
                    if (status != FX_SUCCESS)
 800bba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d001      	beq.n	800bbae <_fx_directory_free_search+0x7be>
                    {

                        /* Return the error status.  */
                        return(status);
 800bbaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bbac:	e05a      	b.n	800bc64 <_fx_directory_free_search+0x874>
                    }

                    /* Determine if the FAT read was invalid.  */
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == FAT_value) || (i > media_ptr -> fx_media_total_clusters))
 800bbae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bbb0:	2b01      	cmp	r3, #1
 800bbb2:	d909      	bls.n	800bbc8 <_fx_directory_free_search+0x7d8>
 800bbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d005      	beq.n	800bbc8 <_fx_directory_free_search+0x7d8>
 800bbbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d901      	bls.n	800bbcc <_fx_directory_free_search+0x7dc>
                    {

                        /* Return the bad status.  */
                        return(FX_FAT_READ_ERROR);
 800bbc8:	2303      	movs	r3, #3
 800bbca:	e04b      	b.n	800bc64 <_fx_directory_free_search+0x874>
                    }

                    /* Save the last valid cluster.  */
                    last_cluster =  cluster;
 800bbcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bbce:	667b      	str	r3, [r7, #100]	; 0x64

                    /* Setup for the next cluster.  */
                    cluster =  FAT_value;
 800bbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbd2:	673b      	str	r3, [r7, #112]	; 0x70
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800bbd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800bbda:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800bbde:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d3d2      	bcc.n	800bb8a <_fx_directory_free_search+0x79a>
                }

                /* Decrease the available clusters in the media.  */
                media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters_needed;
 800bbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800bbe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bbea:	1ad2      	subs	r2, r2, r3
 800bbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbee:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Increase the number of directory entries.  */
                directory_entries =  directory_entries + ((clusters_needed * media_ptr -> fx_media_sectors_per_cluster) * media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800bbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbf4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bbf6:	fb03 f202 	mul.w	r2, r3, r2
 800bbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbfe:	fb02 f303 	mul.w	r3, r2, r3
 800bc02:	095b      	lsrs	r3, r3, #5
 800bc04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bc06:	4413      	add	r3, r2
 800bc08:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Determine if we need to reset the free entry start since we changed the
                   number of directory entries.  If the last entry was not free, then we
                   should definitely reset the free entry start.  */
                if (!(((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR) FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0)))
 800bc0a:	69fb      	ldr	r3, [r7, #28]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	2be5      	cmp	r3, #229	; 0xe5
 800bc12:	d103      	bne.n	800bc1c <_fx_directory_free_search+0x82c>
 800bc14:	69fb      	ldr	r3, [r7, #28]
 800bc16:	791b      	ldrb	r3, [r3, #4]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d001      	beq.n	800bc20 <_fx_directory_free_search+0x830>
                {

                    /* Reset the free entry start to indicate we haven't found a starting free entry yet.  */
                    free_entry_start =  directory_entries;
 800bc1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc1e:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Update the directory size field.  */
                directory_ptr -> fx_dir_entry_file_size =  directory_entries;
 800bc20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc22:	2200      	movs	r2, #0
 800bc24:	469a      	mov	sl, r3
 800bc26:	4693      	mov	fp, r2
 800bc28:	6a3b      	ldr	r3, [r7, #32]
 800bc2a:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38

                /* Defer the update of the FAT entry and the last cluster of the current
                   directory entry until after the new cluster is initialized and written out.  */

                /* Determine if a FAT32 is present.  */
                if ((media_ptr -> fx_media_32_bit_FAT) && (search_dir_ptr == FX_NULL))
 800bc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d005      	beq.n	800bc42 <_fx_directory_free_search+0x852>
 800bc36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d102      	bne.n	800bc42 <_fx_directory_free_search+0x852>
                {

                    /* Change root directory entry count - FAT32 has a variable sized root directory.  */
                    media_ptr -> fx_media_root_directory_entries =  directory_entries;
 800bc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc3e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bc40:	679a      	str	r2, [r3, #120]	; 0x78
                }

                /* At this point, link up the last cluster with the new cluster.  */
                status =  _fx_utility_FAT_entry_write(media_ptr, last_cluster, first_new_cluster);
 800bc42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bc44:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800bc46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bc48:	f005 f91b 	bl	8010e82 <_fx_utility_FAT_entry_write>
 800bc4c:	64f8      	str	r0, [r7, #76]	; 0x4c

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 800bc4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d001      	beq.n	800bc58 <_fx_directory_free_search+0x868>
                {

                    /* Return the error status.  */
                    return(status);
 800bc54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bc56:	e005      	b.n	800bc64 <_fx_directory_free_search+0x874>
                /* Flush the cached individual FAT entries */
                _fx_utility_FAT_flush(media_ptr);
#endif
            }
        }
    } while (directory_index < directory_entries);
 800bc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc5a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bc5c:	429a      	cmp	r2, r3
 800bc5e:	f63f ada1 	bhi.w	800b7a4 <_fx_directory_free_search+0x3b4>

    /* Return FX_NO_MORE_SPACE status to the caller.  */
    return(FX_NO_MORE_SPACE);
 800bc62:	230a      	movs	r3, #10
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3790      	adds	r7, #144	; 0x90
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc6e:	bf00      	nop

0800bc70 <_fx_directory_name_extract>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
CHAR  *_fx_directory_name_extract(CHAR *source_ptr, CHAR *dest_ptr)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b085      	sub	sp, #20
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
 800bc78:	6039      	str	r1, [r7, #0]

UINT i;


    /* Set the destination string to NULL.  */
    dest_ptr[0] = 0;
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	701a      	strb	r2, [r3, #0]

    /* Is a backslash present?  */
    if ((*source_ptr == '\\') || (*source_ptr == '/'))
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	2b5c      	cmp	r3, #92	; 0x5c
 800bc86:	d003      	beq.n	800bc90 <_fx_directory_name_extract+0x20>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	2b2f      	cmp	r3, #47	; 0x2f
 800bc8e:	d106      	bne.n	800bc9e <_fx_directory_name_extract+0x2e>
    {

        /* Advance the string pointer.  */
        source_ptr++;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	3301      	adds	r3, #1
 800bc94:	607b      	str	r3, [r7, #4]
    }

    /* Loop to remove any leading spaces.  */
    while (*source_ptr == ' ')
 800bc96:	e002      	b.n	800bc9e <_fx_directory_name_extract+0x2e>
    {

        /* Position past leading space.  */
        source_ptr++;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	3301      	adds	r3, #1
 800bc9c:	607b      	str	r3, [r7, #4]
    while (*source_ptr == ' ')
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	2b20      	cmp	r3, #32
 800bca4:	d0f8      	beq.n	800bc98 <_fx_directory_name_extract+0x28>
    }

    /* Loop to extract the name.  */
    i = 0;
 800bca6:	2300      	movs	r3, #0
 800bca8:	60fb      	str	r3, [r7, #12]
    while (*source_ptr)
 800bcaa:	e015      	b.n	800bcd8 <_fx_directory_name_extract+0x68>
    {

        /* If another backslash is present, break the loop.  */
        if ((*source_ptr == '\\') || (*source_ptr == '/'))
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	2b5c      	cmp	r3, #92	; 0x5c
 800bcb2:	d017      	beq.n	800bce4 <_fx_directory_name_extract+0x74>
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	781b      	ldrb	r3, [r3, #0]
 800bcb8:	2b2f      	cmp	r3, #47	; 0x2f
 800bcba:	d013      	beq.n	800bce4 <_fx_directory_name_extract+0x74>
            break;
        }

        /* Long name can be at most 255 characters, but are further limited by the
           FX_MAX_LONG_NAME_LEN define.  */
        if (i == FX_MAX_LONG_NAME_LEN - 1)
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2bff      	cmp	r3, #255	; 0xff
 800bcc0:	d00f      	beq.n	800bce2 <_fx_directory_name_extract+0x72>
        {
            break;
        }

        /* Store the character.  */
        dest_ptr[i] =  *source_ptr++;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	1c5a      	adds	r2, r3, #1
 800bcc6:	607a      	str	r2, [r7, #4]
 800bcc8:	6839      	ldr	r1, [r7, #0]
 800bcca:	68fa      	ldr	r2, [r7, #12]
 800bccc:	440a      	add	r2, r1
 800bcce:	781b      	ldrb	r3, [r3, #0]
 800bcd0:	7013      	strb	r3, [r2, #0]

        /* Increment the character counter.  */
        i++;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	60fb      	str	r3, [r7, #12]
    while (*source_ptr)
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d1e5      	bne.n	800bcac <_fx_directory_name_extract+0x3c>
 800bce0:	e000      	b.n	800bce4 <_fx_directory_name_extract+0x74>
            break;
 800bce2:	bf00      	nop
    }

    /* NULL-terminate the string.  */
    dest_ptr[i] =  0;
 800bce4:	683a      	ldr	r2, [r7, #0]
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	4413      	add	r3, r2
 800bcea:	2200      	movs	r2, #0
 800bcec:	701a      	strb	r2, [r3, #0]

    /* Determine if we can backup to the previous character.  */
    if (i)
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d00b      	beq.n	800bd0c <_fx_directory_name_extract+0x9c>
    {

        /* Yes, we can move backwards.  */
        i--;
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	3b01      	subs	r3, #1
 800bcf8:	60fb      	str	r3, [r7, #12]
    }

    /* Get rid of trailing blanks in the destination string.  */
    while (dest_ptr[i] == ' ')
 800bcfa:	e007      	b.n	800bd0c <_fx_directory_name_extract+0x9c>
    {

        /* Set this entry to NULL.  */
        dest_ptr[i] =  0;
 800bcfc:	683a      	ldr	r2, [r7, #0]
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	4413      	add	r3, r2
 800bd02:	2200      	movs	r2, #0
 800bd04:	701a      	strb	r2, [r3, #0]

        /* Backup to the next character. Since leading spaces have been removed,
           we know that the index is always greater than 1.  */
        i--;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	3b01      	subs	r3, #1
 800bd0a:	60fb      	str	r3, [r7, #12]
    while (dest_ptr[i] == ' ')
 800bd0c:	683a      	ldr	r2, [r7, #0]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	4413      	add	r3, r2
 800bd12:	781b      	ldrb	r3, [r3, #0]
 800bd14:	2b20      	cmp	r3, #32
 800bd16:	d0f1      	beq.n	800bcfc <_fx_directory_name_extract+0x8c>
    }

    /* Determine if the source string is now at the end.  */
    if (*source_ptr == 0)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d101      	bne.n	800bd24 <_fx_directory_name_extract+0xb4>
    {

        /* Yes, return a NULL pointer.  */
        source_ptr = FX_NULL;
 800bd20:	2300      	movs	r3, #0
 800bd22:	607b      	str	r3, [r7, #4]
    }

    /* Return the last pointer position in the source.  */
    return(source_ptr);
 800bd24:	687b      	ldr	r3, [r7, #4]
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3714      	adds	r7, #20
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr
	...

0800bd34 <_fx_directory_search>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_search(FX_MEDIA *media_ptr, CHAR *name_ptr, FX_DIR_ENTRY *entry_ptr,
                           FX_DIR_ENTRY *last_dir_ptr, CHAR **last_name_ptr)
{
 800bd34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bd38:	b0c0      	sub	sp, #256	; 0x100
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800bd3e:	62b9      	str	r1, [r7, #40]	; 0x28
 800bd40:	627a      	str	r2, [r7, #36]	; 0x24
 800bd42:	623b      	str	r3, [r7, #32]
UINT          found;
UINT          status;
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
UINT          v, j;
#endif /* FX_MEDIA_DISABLE_SEARCH_CACHE */
ULONG         cluster, next_cluster = 0;
 800bd44:	2300      	movs	r3, #0
 800bd46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
FX_DIR_ENTRY  search_dir;
FX_DIR_ENTRY *search_dir_ptr;
CHAR         *name, alpha, name_alpha;
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
UINT          index;
CHAR         *path_ptr =  FX_NULL;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
CHAR         *original_name =  name_ptr;
 800bd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
#endif /* FX_ENABLE_EXFAT */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory search requests.  */
    media_ptr -> fx_media_directory_searches++;
 800bd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd58:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 800bd5c:	1c5a      	adds	r2, r3, #1
 800bd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd60:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#endif

    /* Setup pointer to media name buffer.  */
    name =  media_ptr -> fx_media_name_buffer;
 800bd64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd66:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800bd6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    /* Setup the last directory, if required.  */
    if (last_dir_ptr)
 800bd6e:	6a3b      	ldr	r3, [r7, #32]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d003      	beq.n	800bd7c <_fx_directory_search+0x48>
    {

        /* Set the first character of the directory entry to NULL to
           indicate root or no directory.  */
        last_dir_ptr -> fx_dir_entry_name[0] =  0;
 800bd74:	6a3b      	ldr	r3, [r7, #32]
 800bd76:	681a      	ldr	r2, [r3, #0]
 800bd78:	2300      	movs	r3, #0
 800bd7a:	7013      	strb	r3, [r2, #0]
    }

    /* Determine if the file name has a full directory path.  */
    if ((*name_ptr == '\\') || (*name_ptr == '/'))
 800bd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd7e:	781b      	ldrb	r3, [r3, #0]
 800bd80:	2b5c      	cmp	r3, #92	; 0x5c
 800bd82:	d003      	beq.n	800bd8c <_fx_directory_search+0x58>
 800bd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	2b2f      	cmp	r3, #47	; 0x2f
 800bd8a:	d103      	bne.n	800bd94 <_fx_directory_search+0x60>
    {

        /* Directory name has full path, set the search pointer to NULL.  */
        search_dir_ptr =  FX_NULL;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bd92:	e044      	b.n	800be1e <_fx_directory_search+0xea>
           directory - if there is one.  */

        /* First check for a local path pointer stored in the thread control block.  This
           is only available in ThreadX Version 4 and above.  */
#ifndef FX_NO_LOCAL_PATH
        if (_tx_thread_current_ptr -> tx_thread_filex_ptr)
 800bd94:	4bab      	ldr	r3, [pc, #684]	; (800c044 <_fx_directory_search+0x310>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d022      	beq.n	800bde6 <_fx_directory_search+0xb2>
        {

            /* Determine if the local directory is not the root directory.  */
            if (((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory.fx_dir_entry_name[0])
 800bda0:	4ba8      	ldr	r3, [pc, #672]	; (800c044 <_fx_directory_search+0x310>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d016      	beq.n	800bdde <_fx_directory_search+0xaa>
            {

                /* Start at the current working directory of the media.  */
                search_dir =   ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_directory;
 800bdb0:	4ba4      	ldr	r3, [pc, #656]	; (800c044 <_fx_directory_search+0x310>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdb8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	2370      	movs	r3, #112	; 0x70
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	f00b f819 	bl	8016df8 <memcpy>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

                /* Setup pointer to the path.  */
                path_ptr =  ((FX_PATH *)_tx_thread_current_ptr -> tx_thread_filex_ptr) -> fx_path_string;
 800bdc6:	4b9f      	ldr	r3, [pc, #636]	; (800c044 <_fx_directory_search+0x310>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdce:	3370      	adds	r3, #112	; 0x70
 800bdd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
#endif

                /* Set the internal pointer to the search directory as well.  */
                search_dir_ptr =  &search_dir;
 800bdd4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bdd8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bddc:	e01f      	b.n	800be1e <_fx_directory_search+0xea>
            }
            else
            {

                /* We are searching in the root directory.  */
                search_dir_ptr =  FX_NULL;
 800bdde:	2300      	movs	r3, #0
 800bde0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800bde4:	e01b      	b.n	800be1e <_fx_directory_search+0xea>
            }
        }
        else
#endif
        if (media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0])
 800bde6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800bdec:	781b      	ldrb	r3, [r3, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d012      	beq.n	800be18 <_fx_directory_search+0xe4>
        {

            /* Start at the current working directory of the media.  */
            search_dir =  media_ptr -> fx_media_default_path.fx_path_directory;
 800bdf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800bdf8:	f503 619c 	add.w	r1, r3, #1248	; 0x4e0
 800bdfc:	2370      	movs	r3, #112	; 0x70
 800bdfe:	461a      	mov	r2, r3
 800be00:	f00a fffa 	bl	8016df8 <memcpy>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

            /* Setup pointer to the path.  */
            path_ptr =  media_ptr -> fx_media_default_path.fx_path_string;
 800be04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be06:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 800be0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
#endif

            /* Set the internal pointer to the search directory as well.  */
            search_dir_ptr =  &search_dir;
 800be0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800be12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800be16:	e002      	b.n	800be1e <_fx_directory_search+0xea>
        else
        {

            /* The current default directory is the root so just set the
               search directory pointer to NULL.  */
            search_dir_ptr =  FX_NULL;
 800be18:	2300      	movs	r3, #0
 800be1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    }

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry.  */
    if (media_ptr -> fx_media_last_found_name[0])
 800be1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be20:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 800be24:	2b00      	cmp	r3, #0
 800be26:	f000 81b9 	beq.w	800c19c <_fx_directory_search+0x468>
    CHAR *temp_ptr, beta;

        /* Yes, there is a previously found directory in our cache.  */

        /* Initialize the index.  */
        v =  0;
 800be2a:	2300      	movs	r3, #0
 800be2c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

        /* Determine if there is a full path.  */
        if ((*name_ptr == '\\') || (*name_ptr == '/'))
 800be30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	2b5c      	cmp	r3, #92	; 0x5c
 800be36:	d02d      	beq.n	800be94 <_fx_directory_search+0x160>
 800be38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3a:	781b      	ldrb	r3, [r3, #0]
 800be3c:	2b2f      	cmp	r3, #47	; 0x2f
 800be3e:	d14c      	bne.n	800beda <_fx_directory_search+0x1a6>
        {

            /* Yes, the full path is in the name buffer. Simply compare with what is in
               the last search buffer.  */
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 800be40:	e028      	b.n	800be94 <_fx_directory_search+0x160>
            {

                /* Pickup the respective name characters.  */
                alpha =  name_ptr[v];
 800be42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be48:	4413      	add	r3, r2
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                beta =   media_ptr -> fx_media_last_found_name[v];
 800be50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be56:	4413      	add	r3, r2
 800be58:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                /* Ensure directory markers are the same.  */
                if (alpha == '\\')
 800be62:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800be66:	2b5c      	cmp	r3, #92	; 0x5c
 800be68:	d102      	bne.n	800be70 <_fx_directory_search+0x13c>
                {
                    alpha =  '/';
 800be6a:	232f      	movs	r3, #47	; 0x2f
 800be6c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                }
                if (beta == '\\')
 800be70:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800be74:	2b5c      	cmp	r3, #92	; 0x5c
 800be76:	d102      	bne.n	800be7e <_fx_directory_search+0x14a>
                {
                    beta =  '/';
 800be78:	232f      	movs	r3, #47	; 0x2f
 800be7a:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                }

                /* Is the name the same?  */
                if (alpha != beta)
 800be7e:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800be82:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800be86:	429a      	cmp	r2, r3
 800be88:	d110      	bne.n	800beac <_fx_directory_search+0x178>
                    /* Break out of loop!  */
                    break;
                }

                /* Move to next character.  */
                v++;
 800be8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be8e:	3301      	adds	r3, #1
 800be90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
            while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[v]))
 800be94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800be98:	2bfe      	cmp	r3, #254	; 0xfe
 800be9a:	d808      	bhi.n	800beae <_fx_directory_search+0x17a>
 800be9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bea2:	4413      	add	r3, r2
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d1cb      	bne.n	800be42 <_fx_directory_search+0x10e>
 800beaa:	e000      	b.n	800beae <_fx_directory_search+0x17a>
                    break;
 800beac:	bf00      	nop
            }

            /* Determine if we have a match.  */
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 800beae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800beb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800beb4:	4413      	add	r3, r2
 800beb6:	7819      	ldrb	r1, [r3, #0]
 800beb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800beba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bebe:	4413      	add	r3, r2
 800bec0:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	4299      	cmp	r1, r3
 800bec8:	d003      	beq.n	800bed2 <_fx_directory_search+0x19e>
            {
                match =  FX_FALSE;
 800beca:	2300      	movs	r3, #0
 800becc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 800bed0:	e0cf      	b.n	800c072 <_fx_directory_search+0x33e>
            }
            else
            {
                match =  FX_TRUE;
 800bed2:	2301      	movs	r3, #1
 800bed4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            if (name_ptr[v] != media_ptr -> fx_media_last_found_name[v])
 800bed8:	e0cb      	b.n	800c072 <_fx_directory_search+0x33e>
        }
        else
        {

            /* Default to found.  */
            match =  FX_TRUE;
 800beda:	2301      	movs	r3, #1
 800bedc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

            /* Determine if there is a default path to compare with.  */
            if (path_ptr)
 800bee0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d043      	beq.n	800bf70 <_fx_directory_search+0x23c>
            {

                /* Yes, compare the current path with what is contained in the last
                   found buffer. Note that the last found name must have at least one
                   path separator as well as room for at least one character for a name. */
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800bee8:	e029      	b.n	800bf3e <_fx_directory_search+0x20a>
                {

                    /* Pickup the respective name characters.  */
                    alpha =  media_ptr -> fx_media_last_found_name[v];
 800beea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800beec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bef0:	4413      	add	r3, r2
 800bef2:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    beta =   path_ptr[v];
 800befc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bf00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf04:	4413      	add	r3, r2
 800bf06:	781b      	ldrb	r3, [r3, #0]
 800bf08:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                    /* Ensure directory markers are the same.  */
                    if (alpha == '\\')
 800bf0c:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800bf10:	2b5c      	cmp	r3, #92	; 0x5c
 800bf12:	d102      	bne.n	800bf1a <_fx_directory_search+0x1e6>
                    {
                        alpha =  '/';
 800bf14:	232f      	movs	r3, #47	; 0x2f
 800bf16:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    }
                    if (beta == '\\')
 800bf1a:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800bf1e:	2b5c      	cmp	r3, #92	; 0x5c
 800bf20:	d102      	bne.n	800bf28 <_fx_directory_search+0x1f4>
                    {
                        beta =  '/';
 800bf22:	232f      	movs	r3, #47	; 0x2f
 800bf24:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                    }

                    /* Is the name the same?  */
                    if (alpha != beta)
 800bf28:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800bf2c:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d111      	bne.n	800bf58 <_fx_directory_search+0x224>
                        /* Break out of loop!  */
                        break;
                    }

                    /* Move to next character.  */
                    v++;
 800bf34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf38:	3301      	adds	r3, #1
 800bf3a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800bf3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf42:	2bfe      	cmp	r3, #254	; 0xfe
 800bf44:	d809      	bhi.n	800bf5a <_fx_directory_search+0x226>
 800bf46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bf4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf4e:	4413      	add	r3, r2
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d1c9      	bne.n	800beea <_fx_directory_search+0x1b6>
 800bf56:	e000      	b.n	800bf5a <_fx_directory_search+0x226>
                        break;
 800bf58:	bf00      	nop
                }

                /* Determine if we don't have a match...  The relative path must be exhausted. */
                if (path_ptr[v])
 800bf5a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bf5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf62:	4413      	add	r3, r2
 800bf64:	781b      	ldrb	r3, [r3, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d002      	beq.n	800bf70 <_fx_directory_search+0x23c>
                {
                    match =  FX_FALSE;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                }
            }

            /* Determine if we still have a match.  */
            if (match)
 800bf70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d07c      	beq.n	800c072 <_fx_directory_search+0x33e>

                /* Now examine the rest of the last name and the newly supplied
                   input name.  */

                /* Determine if a valid directory separator is present.  */
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 800bf78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf7e:	4413      	add	r3, r2
 800bf80:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800bf84:	781b      	ldrb	r3, [r3, #0]
 800bf86:	2b5c      	cmp	r3, #92	; 0x5c
 800bf88:	d00c      	beq.n	800bfa4 <_fx_directory_search+0x270>
                    (media_ptr -> fx_media_last_found_name[v] != '/'))
 800bf8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bf90:	4413      	add	r3, r2
 800bf92:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800bf96:	781b      	ldrb	r3, [r3, #0]
                if ((media_ptr -> fx_media_last_found_name[v] != '\\') &&
 800bf98:	2b2f      	cmp	r3, #47	; 0x2f
 800bf9a:	d003      	beq.n	800bfa4 <_fx_directory_search+0x270>
                {

                    /* Set match to false - invalid directory path separator.  */
                    match =  FX_FALSE;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bfa2:	e004      	b.n	800bfae <_fx_directory_search+0x27a>
                }
                else
                {
                    /* Position past the next directory separator in the
                       last name string.  */
                    v++;
 800bfa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                }

                /* Yes, the full path is in the name buffer. Simply compare with what is in
                   the last search buffer.  */
                j =  0;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 800bfb4:	e02d      	b.n	800c012 <_fx_directory_search+0x2de>
                {

                    /* Pickup the respective name characters.  */
                    alpha =  name_ptr[j];
 800bfb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bfb8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bfbc:	4413      	add	r3, r2
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    beta =   media_ptr -> fx_media_last_found_name[v];
 800bfc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bfc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bfca:	4413      	add	r3, r2
 800bfcc:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3

                    /* Ensure directory markers are the same.  */
                    if (alpha == '\\')
 800bfd6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800bfda:	2b5c      	cmp	r3, #92	; 0x5c
 800bfdc:	d102      	bne.n	800bfe4 <_fx_directory_search+0x2b0>
                    {
                        alpha =  '/';
 800bfde:	232f      	movs	r3, #47	; 0x2f
 800bfe0:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                    }
                    if (beta == '\\')
 800bfe4:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800bfe8:	2b5c      	cmp	r3, #92	; 0x5c
 800bfea:	d102      	bne.n	800bff2 <_fx_directory_search+0x2be>
                    {
                        beta =  '/';
 800bfec:	232f      	movs	r3, #47	; 0x2f
 800bfee:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
                    }

                    /* Is the name the same?  */
                    if (alpha != beta)
 800bff2:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800bff6:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800bffa:	429a      	cmp	r2, r3
 800bffc:	d119      	bne.n	800c032 <_fx_directory_search+0x2fe>
                        /* Break out of loop!  */
                        break;
                    }

                    /* Move to next character.  */
                    v++;
 800bffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c002:	3301      	adds	r3, #1
 800c004:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
                    j++;
 800c008:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c00c:	3301      	adds	r3, #1
 800c00e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
                while ((v < (FX_MAX_LAST_NAME_LEN - 1)) && (name_ptr[j]) && (match))
 800c012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c016:	2bfe      	cmp	r3, #254	; 0xfe
 800c018:	d80c      	bhi.n	800c034 <_fx_directory_search+0x300>
 800c01a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c01c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c020:	4413      	add	r3, r2
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d005      	beq.n	800c034 <_fx_directory_search+0x300>
 800c028:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d1c2      	bne.n	800bfb6 <_fx_directory_search+0x282>
 800c030:	e000      	b.n	800c034 <_fx_directory_search+0x300>
                        break;
 800c032:	bf00      	nop
                }

                /* Avoid accessing fx_media_last_found_name out of bounds. */
                if (v >= 256)
 800c034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c038:	2bff      	cmp	r3, #255	; 0xff
 800c03a:	d905      	bls.n	800c048 <_fx_directory_search+0x314>
                {
                    match = FX_FALSE;
 800c03c:	2300      	movs	r3, #0
 800c03e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c042:	e016      	b.n	800c072 <_fx_directory_search+0x33e>
 800c044:	24014f1c 	.word	0x24014f1c
                }
                else if ((match) && (name_ptr[j] != media_ptr -> fx_media_last_found_name[v]))
 800c048:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d010      	beq.n	800c072 <_fx_directory_search+0x33e>
 800c050:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c052:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c056:	4413      	add	r3, r2
 800c058:	7819      	ldrb	r1, [r3, #0]
 800c05a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c05c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c060:	4413      	add	r3, r2
 800c062:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800c066:	781b      	ldrb	r3, [r3, #0]
 800c068:	4299      	cmp	r1, r3
 800c06a:	d002      	beq.n	800c072 <_fx_directory_search+0x33e>
                {

                    /* We don't have a match.  */
                    match =  FX_FALSE;
 800c06c:	2300      	movs	r3, #0
 800c06e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                }
            }
        }

        /* Now determine if we actually found a match.  */
        if (match)
 800c072:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c076:	2b00      	cmp	r3, #0
 800c078:	f000 8090 	beq.w	800c19c <_fx_directory_search+0x468>
        {

            /* Save the directory entry name pointer.  */
            temp_ptr =  entry_ptr -> fx_dir_entry_name;
 800c07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

            /* Copy the saved directory entry.  */
            *entry_ptr =  media_ptr -> fx_media_last_found_entry;
 800c084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c088:	4610      	mov	r0, r2
 800c08a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800c08e:	2270      	movs	r2, #112	; 0x70
 800c090:	4619      	mov	r1, r3
 800c092:	f00a feb1 	bl	8016df8 <memcpy>

            /* Restore the directory entry name pointer.  */
            entry_ptr -> fx_dir_entry_name =  temp_ptr;
 800c096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c098:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c09c:	601a      	str	r2, [r3, #0]

            /* Copy the directory name into the destination directory name.  */
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800c09e:	2300      	movs	r3, #0
 800c0a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c0a4:	e01d      	b.n	800c0e2 <_fx_directory_search+0x3ae>
            {

                /* Copy character into the destination.  */
                temp_ptr[index] =  media_ptr -> fx_media_last_found_file_name[index];
 800c0a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c0aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c0ae:	4413      	add	r3, r2
 800c0b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c0b2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800c0b6:	440a      	add	r2, r1
 800c0b8:	f502 7238 	add.w	r2, r2, #736	; 0x2e0
 800c0bc:	7812      	ldrb	r2, [r2, #0]
 800c0be:	701a      	strb	r2, [r3, #0]

                /* See if we have copied the NULL termination character.  */
                if (temp_ptr[index] == (CHAR)FX_NULL)
 800c0c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c0c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c0c8:	4413      	add	r3, r2
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d103      	bne.n	800c0d8 <_fx_directory_search+0x3a4>
                {
                
                    /* Determine if we should break here or at the top of the loop.  */
                    if (index < (FX_MAX_LONG_NAME_LEN - 1))
 800c0d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c0d4:	2bfe      	cmp	r3, #254	; 0xfe
 800c0d6:	d909      	bls.n	800c0ec <_fx_directory_search+0x3b8>
            for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800c0d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c0dc:	3301      	adds	r3, #1
 800c0de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c0e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c0e6:	2bff      	cmp	r3, #255	; 0xff
 800c0e8:	d9dd      	bls.n	800c0a6 <_fx_directory_search+0x372>
 800c0ea:	e000      	b.n	800c0ee <_fx_directory_search+0x3ba>
                    {
                    
                        /* Yes, break out of the loop early.  */
                        break;
 800c0ec:	bf00      	nop
                    }
                }
            }

            /* Determine if there is a search directory to copy.  */
            if ((last_dir_ptr) && (media_ptr -> fx_media_last_found_directory_valid))
 800c0ee:	6a3b      	ldr	r3, [r7, #32]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d041      	beq.n	800c178 <_fx_directory_search+0x444>
 800c0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f6:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d03c      	beq.n	800c178 <_fx_directory_search+0x444>

                /* Yes, there was a search directory... and one is requested in this request as well.
                   Simply copy it into the destination.  */

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 800c0fe:	6a3b      	ldr	r3, [r7, #32]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  media_ptr -> fx_media_last_found_directory;
 800c106:	6a3a      	ldr	r2, [r7, #32]
 800c108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c10a:	4610      	mov	r0, r2
 800c10c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c110:	2270      	movs	r2, #112	; 0x70
 800c112:	4619      	mov	r1, r3
 800c114:	f00a fe70 	bl	8016df8 <memcpy>

                /* Restore the original name buffer pointer.  */
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800c118:	6a3b      	ldr	r3, [r7, #32]
 800c11a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c11e:	601a      	str	r2, [r3, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  media_ptr -> fx_media_last_found_directory.fx_dir_entry_name;
 800c120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c122:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800c126:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800c12a:	2300      	movs	r3, #0
 800c12c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c130:	e01c      	b.n	800c16c <_fx_directory_search+0x438>
                {
                
                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 800c132:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c13a:	441a      	add	r2, r3
 800c13c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800c140:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c144:	440b      	add	r3, r1
 800c146:	7812      	ldrb	r2, [r2, #0]
 800c148:	701a      	strb	r2, [r3, #0]
                
                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR)FX_NULL)
 800c14a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c14e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c152:	4413      	add	r3, r2
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d103      	bne.n	800c162 <_fx_directory_search+0x42e>
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 800c15a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c15e:	2bfe      	cmp	r3, #254	; 0xfe
 800c160:	d909      	bls.n	800c176 <_fx_directory_search+0x442>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800c162:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c166:	3301      	adds	r3, #1
 800c168:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c16c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c170:	2bff      	cmp	r3, #255	; 0xff
 800c172:	d9de      	bls.n	800c132 <_fx_directory_search+0x3fe>
 800c174:	e000      	b.n	800c178 <_fx_directory_search+0x444>
                        {
                    
                            /* Yes, break out of the loop early.  */
                            break;
 800c176:	bf00      	nop
                    }
                }
            }

            /* Return the last name pointer, if required.  */
            if (last_name_ptr)
 800c178:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d004      	beq.n	800c18a <_fx_directory_search+0x456>
            {

                /* Just set the last name to initial name string.  */
                *last_name_ptr =  temp_ptr;
 800c180:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c184:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c188:	601a      	str	r2, [r3, #0]
            }

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of directory search cache hits.  */
            media_ptr -> fx_media_directory_search_cache_hits++;
 800c18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c18c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800c190:	1c5a      	adds	r2, r3, #1
 800c192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c194:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
#endif

            /* Return success.  */
            return(FX_SUCCESS);
 800c198:	2300      	movs	r3, #0
 800c19a:	e2ff      	b.n	800c79c <_fx_directory_search+0xa68>
        }
    }

    /* Not a sequential search, invalidate the saved information.  */
    media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 800c19c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c19e:	2300      	movs	r3, #0
 800c1a0:	f882 33e0 	strb.w	r3, [r2, #992]	; 0x3e0
    /* Loop to traverse the directory paths to find the specified file.  */
    do
    {

        /* Remember the last name pointer, if required.  */
        if (last_name_ptr)
 800c1a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d003      	beq.n	800c1b4 <_fx_directory_search+0x480>
        {

            /* Just set the last name to initial name string.  */
            *last_name_ptr =  name_ptr;
 800c1ac:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800c1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1b2:	6013      	str	r3, [r2, #0]
        }

        /* Extract file name.  */
        name_ptr =  _fx_directory_name_extract(name_ptr, name);
 800c1b4:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800c1b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c1ba:	f7ff fd59 	bl	800bc70 <_fx_directory_name_extract>
 800c1be:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Calculate the directory size.  */
        if (search_dir_ptr)
 800c1c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	f000 80be 	beq.w	800c346 <_fx_directory_search+0x612>
            else
            {
#endif /* FX_ENABLE_EXFAT */

                /* Ensure that the search directory's last search cluster is cleared.  */
                search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 800c1ca:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	6513      	str	r3, [r2, #80]	; 0x50

                /* Calculate the directory size by counting the allocated
                clusters for it.  */
                i =        0;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                cluster =  search_dir_ptr -> fx_dir_entry_cluster;
 800c1d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c1dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800c1e2:	e02b      	b.n	800c23c <_fx_directory_search+0x508>
                {

                    /* Increment the cluster count.  */
                    i++;
 800c1e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

                    /* Read the next FAT entry.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800c1ee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800c1f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1fa:	f004 fc19 	bl	8010a30 <_fx_utility_FAT_entry_read>
 800c1fe:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

                    /* Check the return status.  */
                    if (status != FX_SUCCESS)
 800c202:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c206:	2b00      	cmp	r3, #0
 800c208:	d002      	beq.n	800c210 <_fx_directory_search+0x4dc>
                    {

                        /* Return the bad status.  */
                        return(status);
 800c20a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c20e:	e2c5      	b.n	800c79c <_fx_directory_search+0xa68>
                    }

                    /* Check for error situation.  */
                    if ((cluster < FX_FAT_ENTRY_START) || (cluster == next_cluster) || (i > media_ptr -> fx_media_total_clusters))
 800c210:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c214:	2b01      	cmp	r3, #1
 800c216:	d90b      	bls.n	800c230 <_fx_directory_search+0x4fc>
 800c218:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800c21c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c220:	4293      	cmp	r3, r2
 800c222:	d005      	beq.n	800c230 <_fx_directory_search+0x4fc>
 800c224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c228:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d201      	bcs.n	800c234 <_fx_directory_search+0x500>
                    {

                        /* Return the bad status.  */
                        return(FX_FAT_READ_ERROR);
 800c230:	2303      	movs	r3, #3
 800c232:	e2b3      	b.n	800c79c <_fx_directory_search+0xa68>
                    }

                    cluster = next_cluster;
 800c234:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c238:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
                while (cluster < media_ptr -> fx_media_fat_reserved)
 800c23c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800c242:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800c246:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800c24a:	4293      	cmp	r3, r2
 800c24c:	d3ca      	bcc.n	800c1e4 <_fx_directory_search+0x4b0>
                }

                /* Now we can calculate the directory size.  */
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 800c24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c252:	2200      	movs	r2, #0
 800c254:	469a      	mov	sl, r3
 800c256:	4693      	mov	fp, r2
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 800c258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c25a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c25c:	2200      	movs	r2, #0
 800c25e:	613b      	str	r3, [r7, #16]
 800c260:	617a      	str	r2, [r7, #20]
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 800c262:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c266:	4603      	mov	r3, r0
 800c268:	fb03 f20b 	mul.w	r2, r3, fp
 800c26c:	460b      	mov	r3, r1
 800c26e:	fb0a f303 	mul.w	r3, sl, r3
 800c272:	4413      	add	r3, r2
 800c274:	4602      	mov	r2, r0
 800c276:	fbaa 4502 	umull	r4, r5, sl, r2
 800c27a:	442b      	add	r3, r5
 800c27c:	461d      	mov	r5, r3
                                   ((ULONG64) media_ptr -> fx_media_sectors_per_cluster) * i)
 800c27e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c282:	2200      	movs	r2, #0
 800c284:	60bb      	str	r3, [r7, #8]
 800c286:	60fa      	str	r2, [r7, #12]
 800c288:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c28c:	4603      	mov	r3, r0
 800c28e:	fb03 f205 	mul.w	r2, r3, r5
 800c292:	460b      	mov	r3, r1
 800c294:	fb04 f303 	mul.w	r3, r4, r3
 800c298:	4413      	add	r3, r2
 800c29a:	4602      	mov	r2, r0
 800c29c:	fba4 8902 	umull	r8, r9, r4, r2
 800c2a0:	444b      	add	r3, r9
 800c2a2:	4699      	mov	r9, r3
                directory_size =  (((ULONG64) media_ptr -> fx_media_bytes_per_sector) *
 800c2a4:	f04f 0200 	mov.w	r2, #0
 800c2a8:	f04f 0300 	mov.w	r3, #0
 800c2ac:	ea4f 1258 	mov.w	r2, r8, lsr #5
 800c2b0:	ea42 62c9 	orr.w	r2, r2, r9, lsl #27
 800c2b4:	ea4f 1359 	mov.w	r3, r9, lsr #5
 800c2b8:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
                                    / (ULONG64) FX_DIR_ENTRY_SIZE;

                /* Also save this in the directory entry so we don't have to
                   calculate it later.  */
                search_dir_ptr -> fx_dir_entry_file_size =  directory_size;
 800c2bc:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800c2c0:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800c2c4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
            }
#endif /* FX_ENABLE_EXFAT */

            /* If required, copy the last search directory entry into the
               destination.  */
            if (last_dir_ptr)
 800c2c8:	6a3b      	ldr	r3, [r7, #32]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d046      	beq.n	800c35c <_fx_directory_search+0x628>
            {

                /* Copy the last search directory into the destination.  */

                /* First, save the name pointer from the list directory pointer.  */
                destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 800c2ce:	6a3b      	ldr	r3, [r7, #32]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                /* Copy the entire directory entry structure.  */
                *last_dir_ptr =  *search_dir_ptr;
 800c2d6:	6a3a      	ldr	r2, [r7, #32]
 800c2d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c2dc:	4610      	mov	r0, r2
 800c2de:	4619      	mov	r1, r3
 800c2e0:	2370      	movs	r3, #112	; 0x70
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	f00a fd88 	bl	8016df8 <memcpy>

                /* Restore the original name buffer pointer.  */
                last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800c2e8:	6a3a      	ldr	r2, [r7, #32]
 800c2ea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c2ee:	6013      	str	r3, [r2, #0]

                /* Pickup pointer to name to copy.  */
                source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 800c2f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                /* Loop to copy the name into the last directory name buffer.  */
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c300:	e01c      	b.n	800c33c <_fx_directory_search+0x608>
                {

                    /* Copy a character.  */
                    destination_name_ptr[n] =  source_name_ptr[n];
 800c302:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c306:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c30a:	18d1      	adds	r1, r2, r3
 800c30c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c314:	441a      	add	r2, r3
 800c316:	780b      	ldrb	r3, [r1, #0]
 800c318:	7013      	strb	r3, [r2, #0]

                    /* See if we have copied the NULL termination character.  */
                    if (source_name_ptr[n] == (CHAR) FX_NULL)
 800c31a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c31e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c322:	4413      	add	r3, r2
 800c324:	781b      	ldrb	r3, [r3, #0]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d103      	bne.n	800c332 <_fx_directory_search+0x5fe>
                    {
                
                        /* Determine if we should break here or at the top of the loop.  */
                        if (n < (FX_MAX_LONG_NAME_LEN - 1))
 800c32a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c32e:	2bfe      	cmp	r3, #254	; 0xfe
 800c330:	d913      	bls.n	800c35a <_fx_directory_search+0x626>
                for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800c332:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c336:	3301      	adds	r3, #1
 800c338:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c33c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c340:	2bff      	cmp	r3, #255	; 0xff
 800c342:	d9de      	bls.n	800c302 <_fx_directory_search+0x5ce>
 800c344:	e00a      	b.n	800c35c <_fx_directory_search+0x628>
        }
        else
        {

            /* Directory size is the number of entries in the root directory.  */
            directory_size =  (ULONG)media_ptr -> fx_media_root_directory_entries;
 800c346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c348:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c34a:	2200      	movs	r2, #0
 800c34c:	603b      	str	r3, [r7, #0]
 800c34e:	607a      	str	r2, [r7, #4]
 800c350:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c354:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
 800c358:	e000      	b.n	800c35c <_fx_directory_search+0x628>
                            break;
 800c35a:	bf00      	nop
        }

        /* Loop through entries in the directory.  Yes, this is a
           linear search!  */
        i =      0;
 800c35c:	2300      	movs	r3, #0
 800c35e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        found =  FX_FALSE;
 800c362:	2300      	movs	r3, #0
 800c364:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

            /* Read an entry from the directory.  */
#ifdef FX_ENABLE_EXFAT
            status =  _fx_directory_entry_read_ex(media_ptr, search_dir_ptr, &i, entry_ptr, hash);
#else
            status =  _fx_directory_entry_read(media_ptr, search_dir_ptr, &i, entry_ptr);
 800c368:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800c36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c36e:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 800c372:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c374:	f7fd fe7a 	bl	800a06c <_fx_directory_entry_read>
 800c378:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
#endif /* FX_ENABLE_EXFAT */

            i++;
 800c37c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c380:	3301      	adds	r3, #1
 800c382:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

            /* Check for error status.  */
            if (status != FX_SUCCESS)
 800c386:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d002      	beq.n	800c394 <_fx_directory_search+0x660>
            {
                return(status);
 800c38e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c392:	e203      	b.n	800c79c <_fx_directory_search+0xa68>

            /* Determine if this is the last directory entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type == FX_EXFAT_DIR_ENTRY_TYPE_END_MARKER)
#else
            if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_DONE)
 800c394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	f000 80c6 	beq.w	800c52c <_fx_directory_search+0x7f8>
            {
                break;
            }

            /* Determine if the entry is a volume label entry */
            if ((entry_ptr -> fx_dir_entry_attributes & FX_VOLUME))
 800c3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a2:	7f1b      	ldrb	r3, [r3, #28]
 800c3a4:	f003 0308 	and.w	r3, r3, #8
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	f040 80a9 	bne.w	800c500 <_fx_directory_search+0x7cc>

            /* Determine if this is an empty entry.  */
#ifdef FX_ENABLE_EXFAT
            if (entry_ptr -> fx_dir_entry_type != FX_EXFAT_DIR_ENTRY_TYPE_FILE_DIRECTORY)
#else
            if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (entry_ptr -> fx_dir_entry_short_name[0] == 0))
 800c3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	781b      	ldrb	r3, [r3, #0]
 800c3b4:	2be5      	cmp	r3, #229	; 0xe5
 800c3b6:	d104      	bne.n	800c3c2 <_fx_directory_search+0x68e>
 800c3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ba:	791b      	ldrb	r3, [r3, #4]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	f000 80a1 	beq.w	800c504 <_fx_directory_search+0x7d0>
                continue;
            }

            /* Compare the input name and extension with the directory
               entry.  */
            work_ptr =      &name[0];
 800c3c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c3c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
            dir_name_ptr =  &(entry_ptr -> fx_dir_entry_name[0]);
 800c3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            /* Loop to compare names.  */
            do
            {

                /* Pickup character of directory name.  */
                alpha =  *dir_name_ptr;
 800c3d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

                /* Pickup character of name.  */
                name_alpha =  *work_ptr;
 800c3dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c3e0:	781b      	ldrb	r3, [r3, #0]
 800c3e2:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

                /* Determine if its case needs to be changed.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800c3e6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800c3ea:	2b60      	cmp	r3, #96	; 0x60
 800c3ec:	d908      	bls.n	800c400 <_fx_directory_search+0x6cc>
 800c3ee:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800c3f2:	2b7a      	cmp	r3, #122	; 0x7a
 800c3f4:	d804      	bhi.n	800c400 <_fx_directory_search+0x6cc>
                {

                    /* Yes, make upper case.  */
                    alpha =  (CHAR)((INT)alpha - 0x20);
 800c3f6:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 800c3fa:	3b20      	subs	r3, #32
 800c3fc:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
                }

                /* Determine if its case needs to be changed.  */
                if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 800c400:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800c404:	2b60      	cmp	r3, #96	; 0x60
 800c406:	d908      	bls.n	800c41a <_fx_directory_search+0x6e6>
 800c408:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800c40c:	2b7a      	cmp	r3, #122	; 0x7a
 800c40e:	d804      	bhi.n	800c41a <_fx_directory_search+0x6e6>
                {

                    /* Yes, make upper case.  */
                    name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 800c410:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800c414:	3b20      	subs	r3, #32
 800c416:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
                }

                /* Compare name with directory name.  */
                if (alpha != name_alpha)
 800c41a:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800c41e:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800c422:	429a      	cmp	r2, r3
 800c424:	d10f      	bne.n	800c446 <_fx_directory_search+0x712>
                    /* The names don't match, get out of the loop. */
                    break;
                }

                /* Otherwise, increment the name pointers.  */
                work_ptr++;
 800c426:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c42a:	3301      	adds	r3, #1
 800c42c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                dir_name_ptr++;
 800c430:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c434:	3301      	adds	r3, #1
 800c436:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
            } while (*dir_name_ptr);
 800c43a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c43e:	781b      	ldrb	r3, [r3, #0]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d1c6      	bne.n	800c3d2 <_fx_directory_search+0x69e>
 800c444:	e000      	b.n	800c448 <_fx_directory_search+0x714>
                    break;
 800c446:	bf00      	nop

            /* Determine if the requested name has been found.  If so,
               return success to the caller.  */
            if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 800c448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d10b      	bne.n	800c46a <_fx_directory_search+0x736>
 800c452:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c456:	781a      	ldrb	r2, [r3, #0]
 800c458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c45c:	781b      	ldrb	r3, [r3, #0]
 800c45e:	429a      	cmp	r2, r3
 800c460:	d103      	bne.n	800c46a <_fx_directory_search+0x736>
            {

                /* Yes, the name was located.  All pertinent directory
                   information is in the directory entry field.  */
                found =  FX_TRUE;
 800c462:	2301      	movs	r3, #1
 800c464:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c468:	e04d      	b.n	800c506 <_fx_directory_search+0x7d2>
            /* Determine if there is a short name to check.  */
#ifdef FX_ENABLE_EXFAT
            else if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
                     (entry_ptr -> fx_dir_entry_short_name[0] != 0))
#else
            else if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 800c46a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46c:	791b      	ldrb	r3, [r3, #4]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d049      	beq.n	800c506 <_fx_directory_search+0x7d2>
            {

                /* Yes, check for the short part of the name.  */

                /* Compare the input name and extension with the directory entry.  */
                work_ptr =      &name[0];
 800c472:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c476:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                dir_name_ptr =  &(entry_ptr -> fx_dir_entry_short_name[0]);
 800c47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c47c:	3304      	adds	r3, #4
 800c47e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                /* Loop to compare names.  */
                do
                {

                    /* Pickup character of directory name.  */
                    alpha =  *dir_name_ptr;
 800c482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3

                    /* Pickup character of name.  */
                    name_alpha =  *work_ptr;
 800c48c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

                    /* Determine if its case needs to be changed.  */
                    if ((name_alpha >= 'a') && (name_alpha <= 'z'))
 800c496:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800c49a:	2b60      	cmp	r3, #96	; 0x60
 800c49c:	d908      	bls.n	800c4b0 <_fx_directory_search+0x77c>
 800c49e:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800c4a2:	2b7a      	cmp	r3, #122	; 0x7a
 800c4a4:	d804      	bhi.n	800c4b0 <_fx_directory_search+0x77c>
                    {

                        /* Yes, make upper case.  */
                        name_alpha =  (CHAR)((INT)name_alpha - 0x20);
 800c4a6:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800c4aa:	3b20      	subs	r3, #32
 800c4ac:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
                    }

                    /* Compare name with directory name.  */
                    if (alpha != name_alpha)
 800c4b0:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 800c4b4:	f897 30d2 	ldrb.w	r3, [r7, #210]	; 0xd2
 800c4b8:	429a      	cmp	r2, r3
 800c4ba:	d10f      	bne.n	800c4dc <_fx_directory_search+0x7a8>
                        break;
                    }

                    /* Otherwise, move the name pointers and increment the
                       count.  */
                    work_ptr++;
 800c4bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c4c0:	3301      	adds	r3, #1
 800c4c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
                    dir_name_ptr++;
 800c4c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
                } while (*dir_name_ptr);
 800c4d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d1d3      	bne.n	800c482 <_fx_directory_search+0x74e>
 800c4da:	e000      	b.n	800c4de <_fx_directory_search+0x7aa>
                        break;
 800c4dc:	bf00      	nop

                /* Determine if the names match.  */
                if ((*dir_name_ptr == 0) && (*work_ptr == *dir_name_ptr))
 800c4de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4e2:	781b      	ldrb	r3, [r3, #0]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d10e      	bne.n	800c506 <_fx_directory_search+0x7d2>
 800c4e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c4ec:	781a      	ldrb	r2, [r3, #0]
 800c4ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	429a      	cmp	r2, r3
 800c4f6:	d106      	bne.n	800c506 <_fx_directory_search+0x7d2>
                {

                    /* Yes, the name was located.  All pertinent directory
                        information is in the directory entry field.  */
                    found =  FX_TRUE;
 800c4f8:	2301      	movs	r3, #1
 800c4fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800c4fe:	e002      	b.n	800c506 <_fx_directory_search+0x7d2>
                continue;
 800c500:	bf00      	nop
 800c502:	e000      	b.n	800c506 <_fx_directory_search+0x7d2>
                continue;
 800c504:	bf00      	nop
                }
            }
        } while ((i < directory_size) && (!found));
 800c506:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c50a:	2200      	movs	r2, #0
 800c50c:	61bb      	str	r3, [r7, #24]
 800c50e:	61fa      	str	r2, [r7, #28]
 800c510:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800c514:	69b9      	ldr	r1, [r7, #24]
 800c516:	4291      	cmp	r1, r2
 800c518:	69f9      	ldr	r1, [r7, #28]
 800c51a:	eb71 0303 	sbcs.w	r3, r1, r3
 800c51e:	d206      	bcs.n	800c52e <_fx_directory_search+0x7fa>
 800c520:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c524:	2b00      	cmp	r3, #0
 800c526:	f43f af1f 	beq.w	800c368 <_fx_directory_search+0x634>
 800c52a:	e000      	b.n	800c52e <_fx_directory_search+0x7fa>
                break;
 800c52c:	bf00      	nop

        /* Now determine if we have a match.  */
        if (!found)
 800c52e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c532:	2b00      	cmp	r3, #0
 800c534:	d101      	bne.n	800c53a <_fx_directory_search+0x806>
        {

            /* Return a "not found" status to the caller.  */
            return(FX_NOT_FOUND);
 800c536:	2304      	movs	r3, #4
 800c538:	e130      	b.n	800c79c <_fx_directory_search+0xa68>
        }

        /* Determine if the found entry is indeed a sub-directory.  */
        if (entry_ptr -> fx_dir_entry_attributes & FX_DIRECTORY)
 800c53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c53c:	7f1b      	ldrb	r3, [r3, #28]
 800c53e:	f003 0310 	and.w	r3, r3, #16
 800c542:	2b00      	cmp	r3, #0
 800c544:	d04f      	beq.n	800c5e6 <_fx_directory_search+0x8b2>
        {

            /* Move the directory search pointer to this entry.  */
            search_dir =      *entry_ptr;
 800c546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c548:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800c54c:	4619      	mov	r1, r3
 800c54e:	2370      	movs	r3, #112	; 0x70
 800c550:	461a      	mov	r2, r3
 800c552:	f00a fc51 	bl	8016df8 <memcpy>
            search_dir_ptr =  &search_dir;
 800c556:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800c55a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

            /* Ensure that the search directory's last search cluster is cleared.  */
            search_dir_ptr -> fx_dir_entry_last_search_cluster =  0;
 800c55e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800c562:	2300      	movs	r3, #0
 800c564:	6513      	str	r3, [r2, #80]	; 0x50
               directory.  */
#ifdef FX_ENABLE_EXFAT
            if ((!search_dir_ptr -> fx_dir_entry_cluster)
                && (media_ptr -> fx_media_FAT_type != FX_exFAT))
#else
            if (!search_dir_ptr -> fx_dir_entry_cluster)
 800c566:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c56a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d13f      	bne.n	800c5f0 <_fx_directory_search+0x8bc>
            {

                /* This is a backward link to the root directory.  Make
                   sure this is indicated in the search directory
                   information.  */
                search_dir_ptr -> fx_dir_entry_name[0] =  0;
 800c570:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c574:	681a      	ldr	r2, [r3, #0]
 800c576:	2300      	movs	r3, #0
 800c578:	7013      	strb	r3, [r2, #0]

                /* Determine if we need to remember this in the last
                   directory searched return area.  */
                if (last_dir_ptr)
 800c57a:	6a3b      	ldr	r3, [r7, #32]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d02e      	beq.n	800c5de <_fx_directory_search+0x8aa>
                {

                    /* Yes, return this value to the caller.  */

                    /* First, save the name pointer from the list directory pointer.  */
                    destination_name_ptr =  last_dir_ptr -> fx_dir_entry_name;
 800c580:	6a3b      	ldr	r3, [r7, #32]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

                    /* Copy the entire directory entry structure.  */
                    *last_dir_ptr =  *search_dir_ptr;
 800c588:	6a3a      	ldr	r2, [r7, #32]
 800c58a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c58e:	4610      	mov	r0, r2
 800c590:	4619      	mov	r1, r3
 800c592:	2370      	movs	r3, #112	; 0x70
 800c594:	461a      	mov	r2, r3
 800c596:	f00a fc2f 	bl	8016df8 <memcpy>

                    /* Restore the original name buffer pointer.  */
                    last_dir_ptr -> fx_dir_entry_name =  destination_name_ptr;
 800c59a:	6a3a      	ldr	r2, [r7, #32]
 800c59c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c5a0:	6013      	str	r3, [r2, #0]

                    /* Pickup pointer to name to copy.  */
                    source_name_ptr =  search_dir_ptr -> fx_dir_entry_name;
 800c5a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

                    /* Loop to copy the name into the last directory name buffer.  */
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c5b2:	e010      	b.n	800c5d6 <_fx_directory_search+0x8a2>
                    {

                        /* Copy a character.  */
                        destination_name_ptr[n] =  source_name_ptr[n];
 800c5b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c5b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c5bc:	18d1      	adds	r1, r2, r3
 800c5be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c5c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c5c6:	441a      	add	r2, r3
 800c5c8:	780b      	ldrb	r3, [r1, #0]
 800c5ca:	7013      	strb	r3, [r2, #0]
                    for (n = 0; n < FX_MAX_LONG_NAME_LEN; n++)
 800c5cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c5d0:	3301      	adds	r3, #1
 800c5d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800c5d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c5da:	2bff      	cmp	r3, #255	; 0xff
 800c5dc:	d9ea      	bls.n	800c5b4 <_fx_directory_search+0x880>
                    }
                }

                /* Set the search directory pointer to NULL to indicate
                   we are at the root directory.  */
                search_dir_ptr =  FX_NULL;
 800c5de:	2300      	movs	r3, #0
 800c5e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800c5e4:	e004      	b.n	800c5f0 <_fx_directory_search+0x8bc>
        else
        {

            /* This is not a directory, we better return not found
               since we can't continue the search.  */
            if (name_ptr)
 800c5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d001      	beq.n	800c5f0 <_fx_directory_search+0x8bc>
            {

                /* Return not-found status to caller.  */
                return(FX_NOT_FOUND);
 800c5ec:	2304      	movs	r3, #4
 800c5ee:	e0d5      	b.n	800c79c <_fx_directory_search+0xa68>
            }
        }
    } while (name_ptr);
 800c5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	f47f add6 	bne.w	800c1a4 <_fx_directory_search+0x470>

    /* At this point, cache the found information.  If a subsequent search for the same name is done,
       it will return immediately.  */

    /* Set the index of the saved name string.  */
    v=  0;
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* First, build the full path and name.  */
    if ((*original_name != '\\') && (*original_name != '/') && (path_ptr))
 800c5fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c602:	781b      	ldrb	r3, [r3, #0]
 800c604:	2b5c      	cmp	r3, #92	; 0x5c
 800c606:	d028      	beq.n	800c65a <_fx_directory_search+0x926>
 800c608:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	2b2f      	cmp	r3, #47	; 0x2f
 800c610:	d023      	beq.n	800c65a <_fx_directory_search+0x926>
 800c612:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c616:	2b00      	cmp	r3, #0
 800c618:	d01f      	beq.n	800c65a <_fx_directory_search+0x926>
    {

        /* Copy the path into the destination.  */
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800c61a:	e012      	b.n	800c642 <_fx_directory_search+0x90e>
        {

            /* Copy one character.   */
            media_ptr -> fx_media_last_found_name[v] =  path_ptr[v];
 800c61c:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c624:	4413      	add	r3, r2
 800c626:	7819      	ldrb	r1, [r3, #0]
 800c628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c62a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c62e:	4413      	add	r3, r2
 800c630:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800c634:	460a      	mov	r2, r1
 800c636:	701a      	strb	r2, [r3, #0]

            /* Move to next character.  */
            v++;
 800c638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c63c:	3301      	adds	r3, #1
 800c63e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        while ((v< (FX_MAX_LAST_NAME_LEN - 1)) && (path_ptr[v]))
 800c642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c646:	2bfe      	cmp	r3, #254	; 0xfe
 800c648:	d807      	bhi.n	800c65a <_fx_directory_search+0x926>
 800c64a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c64e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c652:	4413      	add	r3, r2
 800c654:	781b      	ldrb	r3, [r3, #0]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d1e0      	bne.n	800c61c <_fx_directory_search+0x8e8>
        }
    }

    /* Now see if there is no directory path symbol in the name itself.  */
    if ((*original_name != '\\') && (*original_name != '/'))
 800c65a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	2b5c      	cmp	r3, #92	; 0x5c
 800c662:	d012      	beq.n	800c68a <_fx_directory_search+0x956>
 800c664:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	2b2f      	cmp	r3, #47	; 0x2f
 800c66c:	d00d      	beq.n	800c68a <_fx_directory_search+0x956>
    {

        /* If there is room, place a directory separator character.  */
        if (v < (FX_MAX_LAST_NAME_LEN - 1))
 800c66e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c672:	2bfe      	cmp	r3, #254	; 0xfe
 800c674:	d809      	bhi.n	800c68a <_fx_directory_search+0x956>
        {
            media_ptr -> fx_media_last_found_name[v++] =  '/';
 800c676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c67a:	1c5a      	adds	r2, r3, #1
 800c67c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800c680:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c682:	4413      	add	r3, r2
 800c684:	222f      	movs	r2, #47	; 0x2f
 800c686:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
        }
    }

    /* Now append the name to the path.  */
    j =  0;
 800c68a:	2300      	movs	r3, #0
 800c68c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 800c690:	e017      	b.n	800c6c2 <_fx_directory_search+0x98e>
    {

        /* Copy one character.   */
        media_ptr -> fx_media_last_found_name[v] =  original_name[j];
 800c692:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c696:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c69a:	4413      	add	r3, r2
 800c69c:	7819      	ldrb	r1, [r3, #0]
 800c69e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6a4:	4413      	add	r3, r2
 800c6a6:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800c6aa:	460a      	mov	r2, r1
 800c6ac:	701a      	strb	r2, [r3, #0]

        /* Move to next character.  */
        v++;
 800c6ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        j++;
 800c6b8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c6bc:	3301      	adds	r3, #1
 800c6be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    while ((v < FX_MAX_LAST_NAME_LEN) && (original_name[j]))
 800c6c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6c6:	2bff      	cmp	r3, #255	; 0xff
 800c6c8:	d807      	bhi.n	800c6da <_fx_directory_search+0x9a6>
 800c6ca:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800c6ce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800c6d2:	4413      	add	r3, r2
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d1db      	bne.n	800c692 <_fx_directory_search+0x95e>
    }

    /* Null terminate the last name string.   */
    if (v< FX_MAX_LAST_NAME_LEN)
 800c6da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6de:	2bff      	cmp	r3, #255	; 0xff
 800c6e0:	d808      	bhi.n	800c6f4 <_fx_directory_search+0x9c0>
    {

        /* Null terminate.  */
        media_ptr -> fx_media_last_found_name[v] =  FX_NULL;
 800c6e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6e8:	4413      	add	r3, r2
 800c6ea:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	701a      	strb	r2, [r3, #0]
 800c6f2:	e003      	b.n	800c6fc <_fx_directory_search+0x9c8>
    }
    else
    {

        /* The string is too big, NULL the string so it won't be used in searching.  */
        media_ptr -> fx_media_last_found_name[0] =  FX_NULL;
 800c6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
    }

    /* Determine if there is a search pointer.  */
    if (search_dir_ptr)
 800c6fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c700:	2b00      	cmp	r3, #0
 800c702:	d00e      	beq.n	800c722 <_fx_directory_search+0x9ee>
    {

        /* Yes, there is a search directory pointer so save it!   */
        media_ptr -> fx_media_last_found_directory =  *search_dir_ptr;
 800c704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c706:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800c70a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c70e:	4611      	mov	r1, r2
 800c710:	2270      	movs	r2, #112	; 0x70
 800c712:	4618      	mov	r0, r3
 800c714:	f00a fb70 	bl	8016df8 <memcpy>

        /* Indicate the search directory is valid.  */
        media_ptr -> fx_media_last_found_directory_valid =  FX_TRUE;
 800c718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c71a:	2201      	movs	r2, #1
 800c71c:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
 800c720:	e003      	b.n	800c72a <_fx_directory_search+0x9f6>
    }
    else
    {

        /* Indicate the search directory is not valid.  */
        media_ptr -> fx_media_last_found_directory_valid =  FX_FALSE;
 800c722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c724:	2200      	movs	r2, #0
 800c726:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
    }

    /* Copy the directory entry.  */
    media_ptr -> fx_media_last_found_entry =  *entry_ptr;
 800c72a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c72c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c72e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800c732:	4611      	mov	r1, r2
 800c734:	2270      	movs	r2, #112	; 0x70
 800c736:	4618      	mov	r0, r3
 800c738:	f00a fb5e 	bl	8016df8 <memcpy>

    /* Setup the directory entry for the last found internal file name.  */
    media_ptr -> fx_media_last_found_entry.fx_dir_entry_name =  media_ptr -> fx_media_last_found_file_name;
 800c73c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c73e:	f503 7238 	add.w	r2, r3, #736	; 0x2e0
 800c742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c744:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* Copy the actual directory name into the cached directory name.  */
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800c748:	2300      	movs	r3, #0
 800c74a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c74e:	e01e      	b.n	800c78e <_fx_directory_search+0xa5a>
    {

        /* Copy character into the cached directory name.  */
        media_ptr -> fx_media_last_found_file_name[index] =  entry_ptr ->  fx_dir_entry_name[index];
 800c750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c752:	681a      	ldr	r2, [r3, #0]
 800c754:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c758:	4413      	add	r3, r2
 800c75a:	7819      	ldrb	r1, [r3, #0]
 800c75c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c75e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c762:	4413      	add	r3, r2
 800c764:	f503 7338 	add.w	r3, r3, #736	; 0x2e0
 800c768:	460a      	mov	r2, r1
 800c76a:	701a      	strb	r2, [r3, #0]

        /* See if we have copied the NULL termination character.  */
        if (entry_ptr -> fx_dir_entry_name[index] == (CHAR)FX_NULL)
 800c76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c76e:	681a      	ldr	r2, [r3, #0]
 800c770:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c774:	4413      	add	r3, r2
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d103      	bne.n	800c784 <_fx_directory_search+0xa50>
        {
                
            /* Check to see if we use the break to get out of the loop.  */
            if (index < (FX_MAX_LONG_NAME_LEN - 1))
 800c77c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c780:	2bfe      	cmp	r3, #254	; 0xfe
 800c782:	d909      	bls.n	800c798 <_fx_directory_search+0xa64>
    for (index = 0; index < FX_MAX_LONG_NAME_LEN; index++)
 800c784:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c788:	3301      	adds	r3, #1
 800c78a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c78e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c792:	2bff      	cmp	r3, #255	; 0xff
 800c794:	d9dc      	bls.n	800c750 <_fx_directory_search+0xa1c>
 800c796:	e000      	b.n	800c79a <_fx_directory_search+0xa66>
            {
                    
                /* Yes, not at the end of the string, break.  */
                break;
 800c798:	bf00      	nop
            }
        }
    }
#endif

    return(FX_SUCCESS);
 800c79a:	2300      	movs	r3, #0
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c7a8 <_fx_file_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_close(FX_FILE *file_ptr)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b088      	sub	sp, #32
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
FX_MEDIA *media_ptr;
FX_INT_SAVE_AREA


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4a49      	ldr	r2, [pc, #292]	; (800c8dc <_fx_file_close+0x134>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d001      	beq.n	800c7be <_fx_file_close+0x16>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800c7ba:	2307      	movs	r3, #7
 800c7bc:	e08a      	b.n	800c8d4 <_fx_file_close+0x12c>
    }

    /* Setup a pointer to the associated media.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7c2:	61fb      	str	r3, [r7, #28]

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_closes++;
 800c7c4:	69fb      	ldr	r3, [r7, #28]
 800c7c6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800c7ca:	1c5a      	adds	r2, r3, #1
 800c7cc:	69fb      	ldr	r3, [r7, #28]
 800c7ce:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_CLOSE, file_ptr, file_ptr -> fx_file_current_file_size, 0, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800c7d2:	69fb      	ldr	r3, [r7, #28]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	4a42      	ldr	r2, [pc, #264]	; (800c8e0 <_fx_file_close+0x138>)
 800c7d8:	4293      	cmp	r3, r2
 800c7da:	d001      	beq.n	800c7e0 <_fx_file_close+0x38>
 800c7dc:	2311      	movs	r3, #17
 800c7de:	e079      	b.n	800c8d4 <_fx_file_close+0x12c>
 800c7e0:	69fb      	ldr	r3, [r7, #28]
 800c7e2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c7e6:	f04f 31ff 	mov.w	r1, #4294967295
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f007 fb62 	bl	8013eb4 <_tx_mutex_get>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d001      	beq.n	800c7fa <_fx_file_close+0x52>
 800c7f6:	2311      	movs	r3, #17
 800c7f8:	e06c      	b.n	800c8d4 <_fx_file_close+0x12c>
    FX_TRACE_OBJECT_UNREGISTER(file_ptr)

    /* Remove this file from the opened list for the media.  */

    /* See if the file is the only one on the open list for this media.  */
    if (file_ptr == file_ptr -> fx_file_opened_next)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	429a      	cmp	r2, r3
 800c802:	d104      	bne.n	800c80e <_fx_file_close+0x66>
    {

        /* Only opened file, just set the opened list to NULL.  */
        media_ptr -> fx_media_opened_file_list =  FX_NULL;
 800c804:	69fb      	ldr	r3, [r7, #28]
 800c806:	2200      	movs	r2, #0
 800c808:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
 800c80c:	e014      	b.n	800c838 <_fx_file_close+0x90>
    }
    else
    {

        /* Otherwise, not the only opened file, link-up the neighbors.  */
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
            file_ptr -> fx_file_opened_previous;
 800c812:	687a      	ldr	r2, [r7, #4]
 800c814:	6e12      	ldr	r2, [r2, #96]	; 0x60
        (file_ptr -> fx_file_opened_next) -> fx_file_opened_previous =
 800c816:	661a      	str	r2, [r3, #96]	; 0x60
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
            file_ptr -> fx_file_opened_next;
 800c81c:	687a      	ldr	r2, [r7, #4]
 800c81e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
        (file_ptr -> fx_file_opened_previous) -> fx_file_opened_next =
 800c820:	65da      	str	r2, [r3, #92]	; 0x5c

        /* See if we have to update the opened list head pointer.  */
        if (media_ptr -> fx_media_opened_file_list == file_ptr)
 800c822:	69fb      	ldr	r3, [r7, #28]
 800c824:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800c828:	687a      	ldr	r2, [r7, #4]
 800c82a:	429a      	cmp	r2, r3
 800c82c:	d104      	bne.n	800c838 <_fx_file_close+0x90>
        {

            /* Yes, move the head pointer to the next opened file. */
            media_ptr -> fx_media_opened_file_list =  file_ptr -> fx_file_opened_next;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c832:	69fb      	ldr	r3, [r7, #28]
 800c834:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        }
    }

    /* Decrement the opened file counter.  */
    media_ptr -> fx_media_opened_file_count--;
 800c838:	69fb      	ldr	r3, [r7, #28]
 800c83a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800c83e:	1e5a      	subs	r2, r3, #1
 800c840:	69fb      	ldr	r3, [r7, #28]
 800c842:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Finally, Indicate that this file is closed.  */
    file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	4a26      	ldr	r2, [pc, #152]	; (800c8e4 <_fx_file_close+0x13c>)
 800c84a:	601a      	str	r2, [r3, #0]

    /* Check to see if this file needs to have its directory entry written
       back to the media.  */
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	689b      	ldr	r3, [r3, #8]
 800c850:	2b01      	cmp	r3, #1
 800c852:	d138      	bne.n	800c8c6 <_fx_file_close+0x11e>
        (file_ptr -> fx_file_modified))
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	7b1b      	ldrb	r3, [r3, #12]
    if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d034      	beq.n	800c8c6 <_fx_file_close+0x11e>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c85c:	f3ef 8310 	mrs	r3, PRIMASK
 800c860:	60fb      	str	r3, [r7, #12]
    return(posture);
 800c862:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800c864:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c866:	b672      	cpsid	i
    return(int_posture);
 800c868:	68bb      	ldr	r3, [r7, #8]
    {

        /* Lockout interrupts for time/date access.  */
        FX_DISABLE_INTS
 800c86a:	61bb      	str	r3, [r7, #24]

        /* Set the new time and date.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 800c86c:	4b1e      	ldr	r3, [pc, #120]	; (800c8e8 <_fx_file_close+0x140>)
 800c86e:	681a      	ldr	r2, [r3, #0]
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 800c876:	4b1d      	ldr	r3, [pc, #116]	; (800c8ec <_fx_file_close+0x144>)
 800c878:	681a      	ldr	r2, [r3, #0]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Set the last access date.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 800c880:	4b1a      	ldr	r3, [pc, #104]	; (800c8ec <_fx_file_close+0x144>)
 800c882:	681a      	ldr	r2, [r3, #0]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800c88a:	69bb      	ldr	r3, [r7, #24]
 800c88c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	f383 8810 	msr	PRIMASK, r3
}
 800c894:	bf00      	nop
        /* Restore interrupts.  */
        FX_RESTORE_INTS

        /* Copy the new file size into the directory entry.  */
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
            file_ptr -> fx_file_current_file_size;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
        file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800c89c:	6879      	ldr	r1, [r7, #4]
 800c89e:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                    media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
        }
        else
        {
#endif /* FX_ENABLE_EXFAT */
            status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	3368      	adds	r3, #104	; 0x68
 800c8a6:	4619      	mov	r1, r3
 800c8a8:	69f8      	ldr	r0, [r7, #28]
 800c8aa:	f7fd ff65 	bl	800a778 <_fx_directory_entry_write>
 800c8ae:	6178      	str	r0, [r7, #20]
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Check for a good status.  */
        if (status != FX_SUCCESS)
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d007      	beq.n	800c8c6 <_fx_file_close+0x11e>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800c8b6:	69fb      	ldr	r3, [r7, #28]
 800c8b8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f007 fd71 	bl	80143a4 <_tx_mutex_put>

            /* Error writing the directory.  */
            return(status);
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	e006      	b.n	800c8d4 <_fx_file_close+0x12c>
        }
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800c8c6:	69fb      	ldr	r3, [r7, #28]
 800c8c8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f007 fd69 	bl	80143a4 <_tx_mutex_put>

    /* Return status to the caller.  */
    return(FX_SUCCESS);
 800c8d2:	2300      	movs	r3, #0
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3720      	adds	r7, #32
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	46494c45 	.word	0x46494c45
 800c8e0:	4d454449 	.word	0x4d454449
 800c8e4:	46494c43 	.word	0x46494c43
 800c8e8:	24014c94 	.word	0x24014c94
 800c8ec:	24014c90 	.word	0x24014c90

0800c8f0 <_fx_file_create>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_create(FX_MEDIA *media_ptr, CHAR *file_name)
{
 800c8f0:	b590      	push	{r4, r7, lr}
 800c8f2:	b0c5      	sub	sp, #276	; 0x114
 800c8f4:	af02      	add	r7, sp, #8
 800c8f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c8fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c8fe:	6018      	str	r0, [r3, #0]
 800c900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c908:	6019      	str	r1, [r3, #0]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_creates++;
 800c90a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c90e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800c918:	1c5a      	adds	r2, r3, #1
 800c91a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c91e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
#endif

    /* Determine if the supplied name is less than the maximum supported name size. The
       maximum name (FX_MAX_LONG_NAME_LEN) is defined in fx_api.h.  */
    i =  0;
 800c928:	2300      	movs	r3, #0
 800c92a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    work_ptr =  (CHAR *)file_name;
 800c92e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c932:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    while (*work_ptr)
 800c93c:	e020      	b.n	800c980 <_fx_file_create+0x90>
    {

        /* Determine if the character designates a new path.  */
        if ((*work_ptr == '\\') || (*work_ptr == '/'))
 800c93e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c942:	781b      	ldrb	r3, [r3, #0]
 800c944:	2b5c      	cmp	r3, #92	; 0x5c
 800c946:	d004      	beq.n	800c952 <_fx_file_create+0x62>
 800c948:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	2b2f      	cmp	r3, #47	; 0x2f
 800c950:	d103      	bne.n	800c95a <_fx_file_create+0x6a>
        {
            /* Yes, reset the name size.  */
            i =  0;
 800c952:	2300      	movs	r3, #0
 800c954:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800c958:	e00d      	b.n	800c976 <_fx_file_create+0x86>
        }
        /* Check for leading spaces.  */
        else if ((*work_ptr != ' ') || (i != 0))
 800c95a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c95e:	781b      	ldrb	r3, [r3, #0]
 800c960:	2b20      	cmp	r3, #32
 800c962:	d103      	bne.n	800c96c <_fx_file_create+0x7c>
 800c964:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d004      	beq.n	800c976 <_fx_file_create+0x86>
        {

            /* No leading spaces, increment the name size.  */
            i++;
 800c96c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c970:	3301      	adds	r3, #1
 800c972:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        }

        /* Move to the next character.  */
        work_ptr++;
 800c976:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c97a:	3301      	adds	r3, #1
 800c97c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    while (*work_ptr)
 800c980:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800c984:	781b      	ldrb	r3, [r3, #0]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d1d9      	bne.n	800c93e <_fx_file_create+0x4e>
    }

    /* Determine if the supplied name is valid.  */
    if ((i == 0) || (i >= FX_MAX_LONG_NAME_LEN))
 800c98a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d003      	beq.n	800c99a <_fx_file_create+0xaa>
 800c992:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800c996:	2bff      	cmp	r3, #255	; 0xff
 800c998:	d901      	bls.n	800c99e <_fx_file_create+0xae>
    {

        /* Return an invalid name value.  */
        return(FX_INVALID_NAME);
 800c99a:	230c      	movs	r3, #12
 800c99c:	e10a      	b.n	800cbb4 <_fx_file_create+0x2c4>
    }

    /* Setup pointer to media name buffer.  */
    dir_entry.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN;
 800c99e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800c9ac:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c9b0:	67bb      	str	r3, [r7, #120]	; 0x78

    /* Setup another pointer to another media name buffer.  */
    search_directory.fx_dir_entry_name =  media_ptr -> fx_media_name_buffer + FX_MAX_LONG_NAME_LEN * 2;
 800c9b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800c9c0:	f503 7200 	add.w	r2, r3, #512	; 0x200
 800c9c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9c8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c9cc:	601a      	str	r2, [r3, #0]

    /* Clear the short name strings.  */
    dir_entry.fx_dir_entry_short_name[0] =        0;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
    search_directory.fx_dir_entry_short_name[0] = 0;
 800c9d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9d8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800c9dc:	2200      	movs	r2, #0
 800c9de:	711a      	strb	r2, [r3, #4]

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800c9e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	4a74      	ldr	r2, [pc, #464]	; (800cbc0 <_fx_file_create+0x2d0>)
 800c9ee:	4293      	cmp	r3, r2
 800c9f0:	d001      	beq.n	800c9f6 <_fx_file_create+0x106>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800c9f2:	2311      	movs	r3, #17
 800c9f4:	e0de      	b.n	800cbb4 <_fx_file_create+0x2c4>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_CREATE, media_ptr, file_name, 0, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800c9f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800c9fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	4a6f      	ldr	r2, [pc, #444]	; (800cbc0 <_fx_file_create+0x2d0>)
 800ca04:	4293      	cmp	r3, r2
 800ca06:	d001      	beq.n	800ca0c <_fx_file_create+0x11c>
 800ca08:	2311      	movs	r3, #17
 800ca0a:	e0d3      	b.n	800cbb4 <_fx_file_create+0x2c4>
 800ca0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ca1a:	f04f 31ff 	mov.w	r1, #4294967295
 800ca1e:	4618      	mov	r0, r3
 800ca20:	f007 fa48 	bl	8013eb4 <_tx_mutex_get>
 800ca24:	4603      	mov	r3, r0
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d001      	beq.n	800ca2e <_fx_file_create+0x13e>
 800ca2a:	2311      	movs	r3, #17
 800ca2c:	e0c2      	b.n	800cbb4 <_fx_file_create+0x2c4>
    /* Start transaction. */
    _fx_fault_tolerant_transaction_start(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 800ca2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d00b      	beq.n	800ca58 <_fx_file_create+0x168>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800ca40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f007 fca8 	bl	80143a4 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 800ca54:	2323      	movs	r3, #35	; 0x23
 800ca56:	e0ad      	b.n	800cbb4 <_fx_file_create+0x2c4>
    }

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &dir_entry, &search_directory, &name_ptr);
 800ca58:	f107 0408 	add.w	r4, r7, #8
 800ca5c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800ca60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca64:	f5a3 7184 	sub.w	r1, r3, #264	; 0x108
 800ca68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca6c:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 800ca70:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800ca74:	9300      	str	r3, [sp, #0]
 800ca76:	4623      	mov	r3, r4
 800ca78:	6809      	ldr	r1, [r1, #0]
 800ca7a:	6800      	ldr	r0, [r0, #0]
 800ca7c:	f7ff f95a 	bl	800bd34 <_fx_directory_search>
 800ca80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc

    /* Determine if the search was successful.  */
    if (status == FX_SUCCESS)
 800ca84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d10b      	bne.n	800caa4 <_fx_file_create+0x1b4>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800ca8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ca90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f007 fc82 	bl	80143a4 <_tx_mutex_put>

        /* File found - Return the error code.  */
        return(FX_ALREADY_CREATED);
 800caa0:	230b      	movs	r3, #11
 800caa2:	e087      	b.n	800cbb4 <_fx_file_create+0x2c4>
    }

    /* Determine if there is anything left after the name.  */
    if (_fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]))
 800caa4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800caa8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800caaa:	4611      	mov	r1, r2
 800caac:	4618      	mov	r0, r3
 800caae:	f7ff f8df 	bl	800bc70 <_fx_directory_name_extract>
 800cab2:	4603      	mov	r3, r0
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d00b      	beq.n	800cad0 <_fx_file_create+0x1e0>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800cab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cabc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cac6:	4618      	mov	r0, r3
 800cac8:	f007 fc6c 	bl	80143a4 <_tx_mutex_put>

        /* Extra information after the file name, return an invalid path
           error.  */
        return(FX_INVALID_PATH);
 800cacc:	230d      	movs	r3, #13
 800cace:	e071      	b.n	800cbb4 <_fx_file_create+0x2c4>
    /* Save the directory entry size.  */
    dir_size = search_directory.fx_dir_entry_file_size;
#endif /* FX_ENABLE_EXFAT */

    /* Find a free slot for the new file.  */
    status =  _fx_directory_free_search(media_ptr, &search_directory, &dir_entry);
 800cad0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800cad4:	f107 0108 	add.w	r1, r7, #8
 800cad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cadc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cae0:	6818      	ldr	r0, [r3, #0]
 800cae2:	f7fe fc85 	bl	800b3f0 <_fx_directory_free_search>
 800cae6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 800caea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d00c      	beq.n	800cb0c <_fx_file_create+0x21c>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800caf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800caf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cb00:	4618      	mov	r0, r3
 800cb02:	f007 fc4f 	bl	80143a4 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 800cb06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb0a:	e053      	b.n	800cbb4 <_fx_file_create+0x2c4>
    }

    /* Populate the directory entry.  */

    /* Isolate the file name.  */
    _fx_directory_name_extract(name_ptr, &dir_entry.fx_dir_entry_name[0]);
 800cb0c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800cb10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cb12:	4611      	mov	r1, r2
 800cb14:	4618      	mov	r0, r3
 800cb16:	f7ff f8ab 	bl	800bc70 <_fx_directory_name_extract>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cb1a:	f3ef 8310 	mrs	r3, PRIMASK
 800cb1e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    return(posture);
 800cb22:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    int_posture = __get_interrupt_posture();
 800cb26:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    __asm__ volatile ("CPSID i" : : : "memory");
 800cb2a:	b672      	cpsid	i
    return(int_posture);
 800cb2c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec

    /* Disable interrupts for time/date access.  */
    FX_DISABLE_INTS
 800cb30:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

    /* Set time and date stamps.  */
    dir_entry.fx_dir_entry_time =  _fx_system_time;
 800cb34:	4b23      	ldr	r3, [pc, #140]	; (800cbc4 <_fx_file_create+0x2d4>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    dir_entry.fx_dir_entry_date =  _fx_system_date;
 800cb3c:	4b22      	ldr	r3, [pc, #136]	; (800cbc8 <_fx_file_create+0x2d8>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cb44:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cb48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb50:	f383 8810 	msr	PRIMASK, r3
}
 800cb54:	bf00      	nop

    /* Restore interrupts.  */
    FX_RESTORE_INTS

    /* Set the attributes for the file.  */
    dir_entry.fx_dir_entry_attributes =  FX_ARCHIVE;
 800cb56:	2320      	movs	r3, #32
 800cb58:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94

    /* Set file size to 0. */
    dir_entry.fx_dir_entry_file_size =  0;
 800cb5c:	f04f 0200 	mov.w	r2, #0
 800cb60:	f04f 0300 	mov.w	r3, #0
 800cb64:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
    /* Set available file size to 0. */
    dir_entry.fx_dir_entry_available_file_size = 0;
#endif /* FX_ENABLE_EXFAT */

    /* Set the cluster to NULL.  */
    dir_entry.fx_dir_entry_cluster =    FX_NULL;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    /* Is there a leading dot?  */
    if (dir_entry.fx_dir_entry_name[0] == '.')
 800cb6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	2b2e      	cmp	r3, #46	; 0x2e
 800cb74:	d106      	bne.n	800cb84 <_fx_file_create+0x294>
    {

        /* Yes, toggle the hidden attribute bit.  */
        dir_entry.fx_dir_entry_attributes |=  FX_HIDDEN;
 800cb76:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800cb7a:	f043 0302 	orr.w	r3, r3, #2
 800cb7e:	b2db      	uxtb	r3, r3
 800cb80:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
        status = _fx_directory_exFAT_entry_write(media_ptr, &dir_entry, UPDATE_FULL);
    }
    else
    {
#endif /* FX_ENABLE_EXFAT */
        status = _fx_directory_entry_write(media_ptr, &dir_entry);
 800cb84:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800cb88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cb8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cb90:	4611      	mov	r1, r2
 800cb92:	6818      	ldr	r0, [r3, #0]
 800cb94:	f7fd fdf0 	bl	800a778 <_fx_directory_entry_write>
 800cb98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    /* End transaction. */
    status = _fx_fault_tolerant_transaction_end(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Release media protection.  */
    FX_UNPROTECT
 800cb9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800cba0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f007 fbfa 	bl	80143a4 <_tx_mutex_put>

    /* File create is complete, return status.  */
    return(status);
 800cbb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd90      	pop	{r4, r7, pc}
 800cbbe:	bf00      	nop
 800cbc0:	4d454449 	.word	0x4d454449
 800cbc4:	24014c94 	.word	0x24014c94
 800cbc8:	24014c90 	.word	0x24014c90

0800cbcc <_fx_file_extended_seek>:
/*                                            relative cluster logic,     */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_extended_seek(FX_FILE *file_ptr, ULONG64 byte_offset)
{
 800cbcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cbd0:	b0c2      	sub	sp, #264	; 0x108
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 800cbd8:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0

UINT      status;
ULONG     cluster;
ULONG     contents = 0;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
ULONG64   bytes_remaining;
FX_MEDIA *media_ptr;


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800cbe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cbe6:	681a      	ldr	r2, [r3, #0]
 800cbe8:	4bcf      	ldr	r3, [pc, #828]	; (800cf28 <_fx_file_extended_seek+0x35c>)
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d001      	beq.n	800cbf2 <_fx_file_extended_seek+0x26>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800cbee:	2307      	movs	r3, #7
 800cbf0:	e2b5      	b.n	800d15e <_fx_file_extended_seek+0x592>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800cbf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cbf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbf8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_seeks++;
 800cbfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc00:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800cc04:	1c5a      	adds	r2, r3, #1
 800cc06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc0a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
#endif

    /* Setup pointer to associated media control block.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800cc0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc14:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_SEEK, file_ptr, byte_offset, file_ptr -> fx_file_current_file_offset, 0, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800cc18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc1c:	681a      	ldr	r2, [r3, #0]
 800cc1e:	4bc3      	ldr	r3, [pc, #780]	; (800cf2c <_fx_file_extended_seek+0x360>)
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d001      	beq.n	800cc28 <_fx_file_extended_seek+0x5c>
 800cc24:	2311      	movs	r3, #17
 800cc26:	e29a      	b.n	800d15e <_fx_file_extended_seek+0x592>
 800cc28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc2c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cc30:	f04f 31ff 	mov.w	r1, #4294967295
 800cc34:	4618      	mov	r0, r3
 800cc36:	f007 f93d 	bl	8013eb4 <_tx_mutex_get>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d001      	beq.n	800cc44 <_fx_file_extended_seek+0x78>
 800cc40:	2311      	movs	r3, #17
 800cc42:	e28c      	b.n	800d15e <_fx_file_extended_seek+0x592>

    /* Check if we actually have to do anything.  */
    if (byte_offset == file_ptr -> fx_file_current_file_offset)
 800cc44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc48:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800cc4c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800cc50:	428b      	cmp	r3, r1
 800cc52:	bf08      	it	eq
 800cc54:	4282      	cmpeq	r2, r0
 800cc56:	d108      	bne.n	800cc6a <_fx_file_extended_seek+0x9e>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800cc58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc5c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cc60:	4618      	mov	r0, r3
 800cc62:	f007 fb9f 	bl	80143a4 <_tx_mutex_put>

        /* Seek is complete, return successful status.  */
        return(FX_SUCCESS);
 800cc66:	2300      	movs	r3, #0
 800cc68:	e279      	b.n	800d15e <_fx_file_extended_seek+0x592>
    }

    /* Calculate the number of bytes per cluster.  */
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800cc6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800cc70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800cc76:	fb02 f303 	mul.w	r3, r2, r3
 800cc7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 800cc7e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d108      	bne.n	800cc98 <_fx_file_extended_seek+0xcc>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800cc86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc8a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cc8e:	4618      	mov	r0, r3
 800cc90:	f007 fb88 	bl	80143a4 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 800cc94:	2302      	movs	r3, #2
 800cc96:	e262      	b.n	800d15e <_fx_file_extended_seek+0x592>
    }

    /* See if we need to adjust the byte offset.  */
    if (byte_offset > file_ptr -> fx_file_current_file_size)
 800cc98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cc9c:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800cca0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800cca4:	4290      	cmp	r0, r2
 800cca6:	eb71 0303 	sbcs.w	r3, r1, r3
 800ccaa:	d205      	bcs.n	800ccb8 <_fx_file_extended_seek+0xec>
    {

        /* Adjust the byte offset down to the file size. */
        byte_offset =  file_ptr -> fx_file_current_file_size;
 800ccac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ccb0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800ccb4:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
    }

    /* Check if the desired position within the leading consecutive clusters.  */
    if (byte_offset >= (ULONG64)file_ptr -> fx_file_consecutive_cluster * (ULONG64)bytes_per_cluster)
 800ccb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ccbc:	699b      	ldr	r3, [r3, #24]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ccc4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ccc8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cccc:	2200      	movs	r2, #0
 800ccce:	469a      	mov	sl, r3
 800ccd0:	4693      	mov	fp, r2
 800ccd2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800ccd6:	460b      	mov	r3, r1
 800ccd8:	fb0a f203 	mul.w	r2, sl, r3
 800ccdc:	4603      	mov	r3, r0
 800ccde:	fb03 f30b 	mul.w	r3, r3, fp
 800cce2:	4413      	add	r3, r2
 800cce4:	4602      	mov	r2, r0
 800cce6:	fba2 450a 	umull	r4, r5, r2, sl
 800ccea:	442b      	add	r3, r5
 800ccec:	461d      	mov	r5, r3
 800ccee:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800ccf2:	42a2      	cmp	r2, r4
 800ccf4:	41ab      	sbcs	r3, r5
 800ccf6:	f0c0 8156 	bcc.w	800cfa6 <_fx_file_extended_seek+0x3da>

            /* At this point, we are ready to walk list of clusters to setup the
               seek position of this file.  */

            /* check if byte_offset is greater than where we were left off earlier */
            if ((ULONG64)file_ptr -> fx_file_current_relative_cluster * (ULONG64)bytes_per_cluster < byte_offset)
 800ccfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ccfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd00:	2200      	movs	r2, #0
 800cd02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cd06:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cd0a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cd14:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800cd18:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800cd1c:	462b      	mov	r3, r5
 800cd1e:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800cd22:	4652      	mov	r2, sl
 800cd24:	fb02 f203 	mul.w	r2, r2, r3
 800cd28:	465b      	mov	r3, fp
 800cd2a:	4621      	mov	r1, r4
 800cd2c:	fb01 f303 	mul.w	r3, r1, r3
 800cd30:	4413      	add	r3, r2
 800cd32:	4622      	mov	r2, r4
 800cd34:	4651      	mov	r1, sl
 800cd36:	fba2 8901 	umull	r8, r9, r2, r1
 800cd3a:	444b      	add	r3, r9
 800cd3c:	4699      	mov	r9, r3
 800cd3e:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800cd42:	4590      	cmp	r8, r2
 800cd44:	eb79 0303 	sbcs.w	r3, r9, r3
 800cd48:	d225      	bcs.n	800cd96 <_fx_file_extended_seek+0x1ca>
            {

                cluster =    file_ptr -> fx_file_current_physical_cluster;
 800cd4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cd4e:	6a1b      	ldr	r3, [r3, #32]
 800cd50:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

                bytes_remaining =   byte_offset -
                    file_ptr -> fx_file_current_relative_cluster * bytes_per_cluster;
 800cd54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cd58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cd5a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cd5e:	fb02 f303 	mul.w	r3, r2, r3
 800cd62:	2200      	movs	r2, #0
 800cd64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cd68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
                bytes_remaining =   byte_offset -
 800cd6c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800cd70:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800cd74:	4621      	mov	r1, r4
 800cd76:	1a51      	subs	r1, r2, r1
 800cd78:	6139      	str	r1, [r7, #16]
 800cd7a:	4629      	mov	r1, r5
 800cd7c:	eb63 0301 	sbc.w	r3, r3, r1
 800cd80:	617b      	str	r3, [r7, #20]
 800cd82:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800cd86:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8

                cluster_count = file_ptr -> fx_file_current_relative_cluster;
 800cd8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cd8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd90:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800cd94:	e0b7      	b.n	800cf06 <_fx_file_extended_seek+0x33a>
            }
            else
            {

                cluster =    file_ptr -> fx_file_first_physical_cluster +
 800cd96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cd9a:	695a      	ldr	r2, [r3, #20]
                    (file_ptr -> fx_file_consecutive_cluster - 1);
 800cd9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cda0:	699b      	ldr	r3, [r3, #24]
                cluster =    file_ptr -> fx_file_first_physical_cluster +
 800cda2:	4413      	add	r3, r2
 800cda4:	3b01      	subs	r3, #1
 800cda6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
                bytes_remaining =   byte_offset -
                    (file_ptr -> fx_file_consecutive_cluster - 1) * bytes_per_cluster;
 800cdaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cdae:	699b      	ldr	r3, [r3, #24]
 800cdb0:	1e5a      	subs	r2, r3, #1
 800cdb2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cdb6:	fb02 f303 	mul.w	r3, r2, r3
 800cdba:	2200      	movs	r2, #0
 800cdbc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cdc0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
                bytes_remaining =   byte_offset -
 800cdc4:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800cdc8:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800cdcc:	4621      	mov	r1, r4
 800cdce:	1a51      	subs	r1, r2, r1
 800cdd0:	60b9      	str	r1, [r7, #8]
 800cdd2:	4629      	mov	r1, r5
 800cdd4:	eb63 0301 	sbc.w	r3, r3, r1
 800cdd8:	60fb      	str	r3, [r7, #12]
 800cdda:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800cdde:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
                cluster_count =     (file_ptr -> fx_file_consecutive_cluster - 1);
 800cde2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cde6:	699b      	ldr	r3, [r3, #24]
 800cde8:	3b01      	subs	r3, #1
 800cdea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
            }


            /* Follow the link of FAT entries.  */
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800cdee:	e08a      	b.n	800cf06 <_fx_file_extended_seek+0x33a>
            {

                /* Increment the number of clusters.  */
                cluster_count++;
 800cdf0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

                /* Read the current cluster entry from the FAT.  */
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 800cdfa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800cdfe:	461a      	mov	r2, r3
 800ce00:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800ce04:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800ce08:	f003 fe12 	bl	8010a30 <_fx_utility_FAT_entry_read>
 800ce0c:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 800ce10:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d009      	beq.n	800ce2c <_fx_file_extended_seek+0x260>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800ce18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce1c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ce20:	4618      	mov	r0, r3
 800ce22:	f007 fabf 	bl	80143a4 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800ce26:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ce2a:	e198      	b.n	800d15e <_fx_file_extended_seek+0x592>
                }

                /* Save the last valid cluster.  */
                last_cluster =  cluster;
 800ce2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ce30:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

                /* Setup for the next cluster.  */
                cluster =  contents;
 800ce34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

                /* Determine if this is the last written cluster.  */
                if (bytes_remaining > bytes_per_cluster)
 800ce3c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ce40:	2200      	movs	r2, #0
 800ce42:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ce46:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800ce4a:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800ce4e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800ce52:	4621      	mov	r1, r4
 800ce54:	4291      	cmp	r1, r2
 800ce56:	4629      	mov	r1, r5
 800ce58:	eb71 0303 	sbcs.w	r3, r1, r3
 800ce5c:	d216      	bcs.n	800ce8c <_fx_file_extended_seek+0x2c0>
                {

                    /* Still more seeking, just decrement the working byte offset.  */
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 800ce5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ce62:	2200      	movs	r2, #0
 800ce64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ce68:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ce6c:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800ce70:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ce74:	4621      	mov	r1, r4
 800ce76:	1a51      	subs	r1, r2, r1
 800ce78:	6039      	str	r1, [r7, #0]
 800ce7a:	4629      	mov	r1, r5
 800ce7c:	eb63 0301 	sbc.w	r3, r3, r1
 800ce80:	607b      	str	r3, [r7, #4]
 800ce82:	e9d7 3400 	ldrd	r3, r4, [r7]
 800ce86:	e9c7 343e 	strd	r3, r4, [r7, #248]	; 0xf8
 800ce8a:	e03c      	b.n	800cf06 <_fx_file_extended_seek+0x33a>
                }
                else
                {

                    /* Remember this cluster number.  */
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 800ce8c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ce90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ce94:	6213      	str	r3, [r2, #32]

                    /* Remember the relative cluster.  */
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 800ce96:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ce9a:	1e5a      	subs	r2, r3, #1
 800ce9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cea0:	635a      	str	r2, [r3, #52]	; 0x34

                    /* If the remaining bytes exactly fits the cluster size, check for
                       a possible adjustment to the next cluster.  */
                    if ((bytes_remaining == bytes_per_cluster) &&
 800cea2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cea6:	2200      	movs	r2, #0
 800cea8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ceac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ceb0:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800ceb4:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800ceb8:	4621      	mov	r1, r4
 800ceba:	4628      	mov	r0, r5
 800cebc:	4283      	cmp	r3, r0
 800cebe:	bf08      	it	eq
 800cec0:	428a      	cmpeq	r2, r1
 800cec2:	d135      	bne.n	800cf30 <_fx_file_extended_seek+0x364>
 800cec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cec8:	2b01      	cmp	r3, #1
 800ceca:	d931      	bls.n	800cf30 <_fx_file_extended_seek+0x364>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800cecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ced0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ced4:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800ced8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cedc:	4293      	cmp	r3, r2
 800cede:	d227      	bcs.n	800cf30 <_fx_file_extended_seek+0x364>
                    {

                        /* We need to position to next allocated cluster.  */
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 800cee0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cee4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cee8:	6213      	str	r3, [r2, #32]
                        file_ptr -> fx_file_current_relative_cluster++;
 800ceea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ceee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cef0:	1c5a      	adds	r2, r3, #1
 800cef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cef6:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Clear the remaining bytes.  */
                        bytes_remaining =  0;
 800cef8:	f04f 0200 	mov.w	r2, #0
 800cefc:	f04f 0300 	mov.w	r3, #0
 800cf00:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
                    }

                    /* This is the cluster that contains the seek position.  */
                    break;
 800cf04:	e014      	b.n	800cf30 <_fx_file_extended_seek+0x364>
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800cf06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf0a:	2b01      	cmp	r3, #1
 800cf0c:	d911      	bls.n	800cf32 <_fx_file_extended_seek+0x366>
 800cf0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf12:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800cf16:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800cf1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	f4ff af66 	bcc.w	800cdf0 <_fx_file_extended_seek+0x224>
 800cf24:	e005      	b.n	800cf32 <_fx_file_extended_seek+0x366>
 800cf26:	bf00      	nop
 800cf28:	46494c45 	.word	0x46494c45
 800cf2c:	4d454449 	.word	0x4d454449
                    break;
 800cf30:	bf00      	nop
                }
            }
        
            /* Check for errors in traversal of the FAT chain.  */
            if (byte_offset > (((ULONG64) bytes_per_cluster) * ((ULONG64) cluster_count)))
 800cf32:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cf36:	2200      	movs	r2, #0
 800cf38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cf3c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800cf40:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800cf44:	2200      	movs	r2, #0
 800cf46:	67bb      	str	r3, [r7, #120]	; 0x78
 800cf48:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cf4a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800cf4e:	462b      	mov	r3, r5
 800cf50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cf54:	4642      	mov	r2, r8
 800cf56:	fb02 f203 	mul.w	r2, r2, r3
 800cf5a:	464b      	mov	r3, r9
 800cf5c:	4621      	mov	r1, r4
 800cf5e:	fb01 f303 	mul.w	r3, r1, r3
 800cf62:	4413      	add	r3, r2
 800cf64:	4622      	mov	r2, r4
 800cf66:	4641      	mov	r1, r8
 800cf68:	fba2 1201 	umull	r1, r2, r2, r1
 800cf6c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 800cf70:	460a      	mov	r2, r1
 800cf72:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 800cf76:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800cf7a:	4413      	add	r3, r2
 800cf7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cf80:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800cf84:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800cf88:	4621      	mov	r1, r4
 800cf8a:	4291      	cmp	r1, r2
 800cf8c:	4629      	mov	r1, r5
 800cf8e:	eb71 0303 	sbcs.w	r3, r1, r3
 800cf92:	d22f      	bcs.n	800cff4 <_fx_file_extended_seek+0x428>
            {
    
                /* Release media protection.  */
                FX_UNPROTECT
 800cf94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf98:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f007 fa01 	bl	80143a4 <_tx_mutex_put>

                /* This is an error that suggests a corrupt file.  */
                return(FX_FILE_CORRUPT);
 800cfa2:	2308      	movs	r3, #8
 800cfa4:	e0db      	b.n	800d15e <_fx_file_extended_seek+0x592>
    }
    else
    {

        /* we should directly access the desired cluster */
        file_ptr -> fx_file_current_relative_cluster = (ULONG)(byte_offset / bytes_per_cluster);
 800cfa6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cfaa:	2200      	movs	r2, #0
 800cfac:	673b      	str	r3, [r7, #112]	; 0x70
 800cfae:	677a      	str	r2, [r7, #116]	; 0x74
 800cfb0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800cfb4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800cfb8:	f7f3 fb02 	bl	80005c0 <__aeabi_uldivmod>
 800cfbc:	4602      	mov	r2, r0
 800cfbe:	460b      	mov	r3, r1
 800cfc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cfc4:	635a      	str	r2, [r3, #52]	; 0x34

        file_ptr -> fx_file_current_physical_cluster =
            file_ptr -> fx_file_first_physical_cluster + file_ptr -> fx_file_current_relative_cluster;
 800cfc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cfca:	695a      	ldr	r2, [r3, #20]
 800cfcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cfd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfd2:	441a      	add	r2, r3
        file_ptr -> fx_file_current_physical_cluster =
 800cfd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cfd8:	621a      	str	r2, [r3, #32]

        bytes_remaining =  byte_offset % bytes_per_cluster;
 800cfda:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cfde:	2200      	movs	r2, #0
 800cfe0:	66bb      	str	r3, [r7, #104]	; 0x68
 800cfe2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cfe4:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800cfe8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800cfec:	f7f3 fae8 	bl	80005c0 <__aeabi_uldivmod>
 800cff0:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
    }


    /* Determine if the remaining bytes fit exactly into the cluster size.  */
    if (bytes_remaining == bytes_per_cluster)
 800cff4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800cff8:	2200      	movs	r2, #0
 800cffa:	663b      	str	r3, [r7, #96]	; 0x60
 800cffc:	667a      	str	r2, [r7, #100]	; 0x64
 800cffe:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800d002:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800d006:	4621      	mov	r1, r4
 800d008:	4628      	mov	r0, r5
 800d00a:	4283      	cmp	r3, r0
 800d00c:	bf08      	it	eq
 800d00e:	428a      	cmpeq	r2, r1
 800d010:	d151      	bne.n	800d0b6 <_fx_file_extended_seek+0x4ea>
    {

        /* Position to the end of the cluster.  */
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d016:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                             (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800d018:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d01c:	6a1b      	ldr	r3, [r3, #32]
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d01e:	3b02      	subs	r3, #2
                                                              ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800d020:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800d024:	6d49      	ldr	r1, [r1, #84]	; 0x54
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d026:	fb01 f303 	mul.w	r3, r1, r3
 800d02a:	18d4      	adds	r4, r2, r3
                                                             ((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800d02c:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800d030:	1e51      	subs	r1, r2, #1
 800d032:	65b9      	str	r1, [r7, #88]	; 0x58
 800d034:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d038:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d03a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d03e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d040:	2200      	movs	r2, #0
 800d042:	653b      	str	r3, [r7, #80]	; 0x50
 800d044:	657a      	str	r2, [r7, #84]	; 0x54
 800d046:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d04a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800d04e:	f7f3 fab7 	bl	80005c0 <__aeabi_uldivmod>
 800d052:	4602      	mov	r2, r0
 800d054:	460b      	mov	r3, r1
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d056:	4613      	mov	r3, r2
 800d058:	4423      	add	r3, r4
 800d05a:	2200      	movs	r2, #0
 800d05c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d05e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d064:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800d068:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   (UINT)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800d06c:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 800d070:	1e51      	subs	r1, r2, #1
 800d072:	6439      	str	r1, [r7, #64]	; 0x40
 800d074:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d078:	647b      	str	r3, [r7, #68]	; 0x44
 800d07a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d07e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d080:	2200      	movs	r2, #0
 800d082:	63bb      	str	r3, [r7, #56]	; 0x38
 800d084:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d086:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d08a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d08e:	f7f3 fa97 	bl	80005c0 <__aeabi_uldivmod>
 800d092:	4602      	mov	r2, r0
 800d094:	460b      	mov	r3, r1
 800d096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d09a:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 800d09c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800d0a0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800d0a4:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 800d0a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d0ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d0b2:	631a      	str	r2, [r3, #48]	; 0x30
 800d0b4:	e04b      	b.n	800d14e <_fx_file_extended_seek+0x582>
    }
    else
    {

        /* Position the pointers to the new offset.  */
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d0b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                             (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800d0bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d0c0:	6a1b      	ldr	r3, [r3, #32]
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d0c2:	3b02      	subs	r3, #2
                                                              ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800d0c4:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 800d0c8:	6d49      	ldr	r1, [r1, #84]	; 0x54
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d0ca:	fb01 f303 	mul.w	r3, r1, r3
 800d0ce:	18d4      	adds	r4, r2, r3
                                                             (bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800d0d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	633b      	str	r3, [r7, #48]	; 0x30
 800d0da:	637a      	str	r2, [r7, #52]	; 0x34
 800d0dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d0e0:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800d0e4:	f7f3 fa6c 	bl	80005c0 <__aeabi_uldivmod>
 800d0e8:	4602      	mov	r2, r0
 800d0ea:	460b      	mov	r3, r1
        file_ptr -> fx_file_current_logical_sector = (ULONG)(((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d0ec:	4613      	mov	r3, r2
 800d0ee:	4423      	add	r3, r4
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d0f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d0fa:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800d0fe:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   (UINT)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800d102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d108:	2200      	movs	r2, #0
 800d10a:	623b      	str	r3, [r7, #32]
 800d10c:	627a      	str	r2, [r7, #36]	; 0x24
 800d10e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d112:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800d116:	f7f3 fa53 	bl	80005c0 <__aeabi_uldivmod>
 800d11a:	4602      	mov	r2, r0
 800d11c:	460b      	mov	r3, r1
 800d11e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d122:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_file_offset =       byte_offset;
 800d124:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800d128:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800d12c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
        file_ptr -> fx_file_current_logical_offset =    (ULONG)(bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector));
 800d130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d136:	2200      	movs	r2, #0
 800d138:	61bb      	str	r3, [r7, #24]
 800d13a:	61fa      	str	r2, [r7, #28]
 800d13c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800d140:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d144:	f7f3 fa3c 	bl	80005c0 <__aeabi_uldivmod>
 800d148:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d14c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800d14e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d152:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d156:	4618      	mov	r0, r3
 800d158:	f007 f924 	bl	80143a4 <_tx_mutex_put>

    /* Seek is complete, return successful status.  */
    return(FX_SUCCESS);
 800d15c:	2300      	movs	r3, #0
}
 800d15e:	4618      	mov	r0, r3
 800d160:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800d164:	46bd      	mov	sp, r7
 800d166:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d16a:	bf00      	nop

0800d16c <_fx_file_open>:
/*                                            consecutive detect,         */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type)
{
 800d16c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d170:	b0e8      	sub	sp, #416	; 0x1a0
 800d172:	af02      	add	r7, sp, #8
 800d174:	f8c7 014c 	str.w	r0, [r7, #332]	; 0x14c
 800d178:	f8c7 1148 	str.w	r1, [r7, #328]	; 0x148
 800d17c:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
 800d180:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
UINT     status;
#ifndef FX_DISABLE_CONSECUTIVE_DETECT
UINT     leading_consecutive;
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */
ULONG    cluster;
ULONG    contents = 0;
 800d184:	2300      	movs	r3, #0
 800d186:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
#endif /* FX_DISABLE_FAST_OPEN */
UCHAR    not_a_file_attr;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800d18a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	4bd9      	ldr	r3, [pc, #868]	; (800d4f8 <_fx_file_open+0x38c>)
 800d192:	429a      	cmp	r2, r3
 800d194:	d002      	beq.n	800d19c <_fx_file_open+0x30>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800d196:	2311      	movs	r3, #17
 800d198:	f000 bcc4 	b.w	800db24 <_fx_file_open+0x9b8>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_opens++;
 800d19c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d1a0:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800d1a4:	1c5a      	adds	r2, r3, #1
 800d1a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d1aa:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
#endif

    /* Clear the notify function. */
    file_ptr -> fx_file_write_notify = FX_NULL;
 800d1ae:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	f8c2 31dc 	str.w	r3, [r2, #476]	; 0x1dc
        fat_last        = FX_LAST_CLUSTER_exFAT;
        not_a_file_attr = FX_DIRECTORY;
    }
    else if (media_ptr -> fx_media_FAT_type == FX_FAT32)
#else
    if (media_ptr -> fx_media_32_bit_FAT)
 800d1b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d1bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d006      	beq.n	800d1d0 <_fx_file_open+0x64>
#endif /* FX_ENABLE_EXFAT */
    {
        fat_last        = FX_LAST_CLUSTER_1_32;
 800d1c2:	4bce      	ldr	r3, [pc, #824]	; (800d4fc <_fx_file_open+0x390>)
 800d1c4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 800d1c8:	2318      	movs	r3, #24
 800d1ca:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 800d1ce:	e006      	b.n	800d1de <_fx_file_open+0x72>
    }
    else
    {
        fat_last        = FX_LAST_CLUSTER_1;
 800d1d0:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 800d1d4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
        not_a_file_attr = FX_DIRECTORY | FX_VOLUME;
 800d1d8:	2318      	movs	r3, #24
 800d1da:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
    }

#ifndef FX_DISABLE_FAST_OPEN
    /* Determine if a fast open is selected.  */
    if (open_type == FX_OPEN_FOR_READ_FAST)
 800d1de:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800d1e2:	2b02      	cmp	r3, #2
 800d1e4:	d106      	bne.n	800d1f4 <_fx_file_open+0x88>
    {

        /* Yes, convert the open type to a standard read.  */
        open_type =  FX_OPEN_FOR_READ;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

        /* Set the open fast flag.  */
        fast_open =  FX_TRUE;
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800d1f2:	e002      	b.n	800d1fa <_fx_file_open+0x8e>
    }
    else
    {

        /* A fast open is not selected, set the flag to false.  */
        fast_open =  FX_FALSE;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_OPEN, media_ptr, file_ptr, file_name, open_type, FX_TRACE_FILE_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800d1fa:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d1fe:	681a      	ldr	r2, [r3, #0]
 800d200:	4bbd      	ldr	r3, [pc, #756]	; (800d4f8 <_fx_file_open+0x38c>)
 800d202:	429a      	cmp	r2, r3
 800d204:	d002      	beq.n	800d20c <_fx_file_open+0xa0>
 800d206:	2311      	movs	r3, #17
 800d208:	f000 bc8c 	b.w	800db24 <_fx_file_open+0x9b8>
 800d20c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d210:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d214:	f04f 31ff 	mov.w	r1, #4294967295
 800d218:	4618      	mov	r0, r3
 800d21a:	f006 fe4b 	bl	8013eb4 <_tx_mutex_get>
 800d21e:	4603      	mov	r3, r0
 800d220:	2b00      	cmp	r3, #0
 800d222:	d002      	beq.n	800d22a <_fx_file_open+0xbe>
 800d224:	2311      	movs	r3, #17
 800d226:	f000 bc7d 	b.w	800db24 <_fx_file_open+0x9b8>

    /* Setup file name pointer.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_name =  file_ptr -> fx_file_name_buffer;
 800d22a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d22e:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 800d232:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d236:	669a      	str	r2, [r3, #104]	; 0x68
    file_ptr -> fx_file_dir_entry.fx_dir_entry_short_name[0] =  0;
 800d238:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d23c:	2300      	movs	r3, #0
 800d23e:	f882 306c 	strb.w	r3, [r2, #108]	; 0x6c

    /* Search the system for the supplied file name.  */
    status =  _fx_directory_search(media_ptr, file_name, &(file_ptr -> fx_file_dir_entry), FX_NULL, FX_NULL);
 800d242:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d246:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d24a:	2300      	movs	r3, #0
 800d24c:	9300      	str	r3, [sp, #0]
 800d24e:	2300      	movs	r3, #0
 800d250:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800d254:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800d258:	f7fe fd6c 	bl	800bd34 <_fx_directory_search>
 800d25c:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

    /* Determine if the search was successful.  */
    if (status != FX_SUCCESS)
 800d260:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800d264:	2b00      	cmp	r3, #0
 800d266:	d00a      	beq.n	800d27e <_fx_file_open+0x112>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800d268:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d26c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d270:	4618      	mov	r0, r3
 800d272:	f007 f897 	bl	80143a4 <_tx_mutex_put>

        /* Return the error code.  */
        return(status);
 800d276:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800d27a:	f000 bc53 	b.w	800db24 <_fx_file_open+0x9b8>
    }

    /* Check to make sure the found entry is a file.  */
    if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & not_a_file_attr)
 800d27e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d282:	f893 2084 	ldrb.w	r2, [r3, #132]	; 0x84
 800d286:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 800d28a:	4013      	ands	r3, r2
 800d28c:	b2db      	uxtb	r3, r3
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d009      	beq.n	800d2a6 <_fx_file_open+0x13a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800d292:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d296:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d29a:	4618      	mov	r0, r3
 800d29c:	f007 f882 	bl	80143a4 <_tx_mutex_put>

        /* Return the not a file error code.  */
        return(FX_NOT_A_FILE);
 800d2a0:	2305      	movs	r3, #5
 800d2a2:	f000 bc3f 	b.w	800db24 <_fx_file_open+0x9b8>
            open_count--;
        }
    }
    else
#else
    if (open_type == FX_OPEN_FOR_WRITE)
 800d2a6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800d2aa:	2b01      	cmp	r3, #1
 800d2ac:	d160      	bne.n	800d370 <_fx_file_open+0x204>
    {

        /* A open for write request is present, check the file attributes
           and the list of open files for any other open instance of
           this file.  */
        if (media_ptr -> fx_media_driver_write_protect)
 800d2ae:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d2b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d009      	beq.n	800d2ce <_fx_file_open+0x162>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800d2ba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d2be:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	f007 f86e 	bl	80143a4 <_tx_mutex_put>

            /* Return write protect error.  */
            return(FX_WRITE_PROTECT);
 800d2c8:	2323      	movs	r3, #35	; 0x23
 800d2ca:	f000 bc2b 	b.w	800db24 <_fx_file_open+0x9b8>
        }

        if (file_ptr -> fx_file_dir_entry.fx_dir_entry_attributes & (UCHAR)(FX_READ_ONLY))
 800d2ce:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d2d2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d2d6:	f003 0301 	and.w	r3, r3, #1
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d009      	beq.n	800d2f2 <_fx_file_open+0x186>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800d2de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d2e2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f007 f85c 	bl	80143a4 <_tx_mutex_put>

            /* Return the not a file error code.  */
            return(FX_ACCESS_ERROR);
 800d2ec:	2306      	movs	r3, #6
 800d2ee:	f000 bc19 	b.w	800db24 <_fx_file_open+0x9b8>
        }

        /* Also search the opened files to see if this file is currently
           opened.  */
        open_count =  media_ptr -> fx_media_opened_file_count;
 800d2f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d2f6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800d2fa:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 800d2fe:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d302:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800d306:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
        while (open_count)
 800d30a:	e02d      	b.n	800d368 <_fx_file_open+0x1fc>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset))
#else
            /* Look at each opened file to see if the same file is already opened
               for writing.  */
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 800d30c:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800d310:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800d314:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d318:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
            if ((search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 800d31c:	4299      	cmp	r1, r3
 800d31e:	bf08      	it	eq
 800d320:	4290      	cmpeq	r0, r2
 800d322:	d117      	bne.n	800d354 <_fx_file_open+0x1e8>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
 800d324:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800d328:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 800d32c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d330:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800d334:	429a      	cmp	r2, r3
 800d336:	d10d      	bne.n	800d354 <_fx_file_open+0x1e8>
                (search_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE))
 800d338:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800d33c:	689b      	ldr	r3, [r3, #8]
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset) &&
 800d33e:	2b01      	cmp	r3, #1
 800d340:	d108      	bne.n	800d354 <_fx_file_open+0x1e8>
#endif
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800d342:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d346:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d34a:	4618      	mov	r0, r3
 800d34c:	f007 f82a 	bl	80143a4 <_tx_mutex_put>

                /* The file is currently open.  */
                return(FX_ACCESS_ERROR);
 800d350:	2306      	movs	r3, #6
 800d352:	e3e7      	b.n	800db24 <_fx_file_open+0x9b8>
            }

            /* Adjust the pointer and decrement the search count.  */
            search_ptr =  search_ptr -> fx_file_opened_next;
 800d354:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800d358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d35a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
            open_count--;
 800d35e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800d362:	3b01      	subs	r3, #1
 800d364:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
        while (open_count)
 800d368:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d1cd      	bne.n	800d30c <_fx_file_open+0x1a0>
        }
    }

    /* At this point, we are ready to walk list of clusters to setup the
       initial condition of this file as well as to verify its integrity.  */
    cluster =           file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 800d370:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d374:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d378:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    bytes_remaining =   file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 800d37c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d380:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800d384:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800d388:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d38c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800d38e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster = ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800d394:	fb02 f303 	mul.w	r3, r2, r3
 800d398:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    file_ptr -> fx_file_current_physical_cluster =  0;
 800d39c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	6213      	str	r3, [r2, #32]

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 800d3a4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d108      	bne.n	800d3be <_fx_file_open+0x252>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800d3ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d3b0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	f006 fff5 	bl	80143a4 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 800d3ba:	2302      	movs	r3, #2
 800d3bc:	e3b2      	b.n	800db24 <_fx_file_open+0x9b8>
    }

    last_cluster =      0;
 800d3be:	2300      	movs	r3, #0
 800d3c0:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    cluster_count =     0;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

#ifndef FX_DISABLE_CONSECUTIVE_DETECT
    leading_consecutive = 1;
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */
    file_ptr -> fx_file_consecutive_cluster = 1;
 800d3d0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	6193      	str	r3, [r2, #24]
#ifndef FX_DISABLE_FAST_OPEN

    /* Determine if the file is being open for reading with the fast option.  */
    if (fast_open)
 800d3d8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	f000 8103 	beq.w	800d5e8 <_fx_file_open+0x47c>
    {

        /* Calculate the bytes available.  */
        bytes_available =  ((bytes_remaining + bytes_per_cluster - 1) / bytes_per_cluster) * bytes_per_cluster;
 800d3e2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800d3ec:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800d3f0:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d3f4:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 800d3f8:	4621      	mov	r1, r4
 800d3fa:	eb11 0a02 	adds.w	sl, r1, r2
 800d3fe:	4629      	mov	r1, r5
 800d400:	eb41 0b03 	adc.w	fp, r1, r3
 800d404:	f11a 33ff 	adds.w	r3, sl, #4294967295
 800d408:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800d40c:	f14b 33ff 	adc.w	r3, fp, #4294967295
 800d410:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800d414:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800d418:	2200      	movs	r2, #0
 800d41a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800d41e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800d422:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 800d426:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800d42a:	f7f3 f8c9 	bl	80005c0 <__aeabi_uldivmod>
 800d42e:	4602      	mov	r2, r0
 800d430:	460b      	mov	r3, r1
 800d432:	4610      	mov	r0, r2
 800d434:	4619      	mov	r1, r3
 800d436:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800d43a:	2200      	movs	r2, #0
 800d43c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d440:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800d444:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800d448:	4623      	mov	r3, r4
 800d44a:	fb03 f201 	mul.w	r2, r3, r1
 800d44e:	462b      	mov	r3, r5
 800d450:	fb00 f303 	mul.w	r3, r0, r3
 800d454:	4413      	add	r3, r2
 800d456:	4622      	mov	r2, r4
 800d458:	fba0 8902 	umull	r8, r9, r0, r2
 800d45c:	444b      	add	r3, r9
 800d45e:	4699      	mov	r9, r3
 800d460:	e9c7 895e 	strd	r8, r9, [r7, #376]	; 0x178
 800d464:	e9c7 895e 	strd	r8, r9, [r7, #376]	; 0x178
 800d468:	e12f      	b.n	800d6ca <_fx_file_open+0x55e>
            /* Follow the link of FAT entries.  */
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
            {

                /* Increment the number of clusters.  */
                cluster_count++;
 800d46a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800d46e:	3301      	adds	r3, #1
 800d470:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

                /* Read the current cluster entry from the FAT.  */
                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &contents);
 800d474:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 800d478:	461a      	mov	r2, r3
 800d47a:	f8d7 1190 	ldr.w	r1, [r7, #400]	; 0x190
 800d47e:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 800d482:	f003 fad5 	bl	8010a30 <_fx_utility_FAT_entry_read>
 800d486:	f8c7 0160 	str.w	r0, [r7, #352]	; 0x160

                /* Check the return value.  */
                if (status != FX_SUCCESS)
 800d48a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d009      	beq.n	800d4a6 <_fx_file_open+0x33a>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800d492:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d496:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d49a:	4618      	mov	r0, r3
 800d49c:	f006 ff82 	bl	80143a4 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800d4a0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800d4a4:	e33e      	b.n	800db24 <_fx_file_open+0x9b8>
                }

                /* Determine if the cluster is invalid (points to itself) or the count exceeds the total number of clusters.  */
                if ((cluster == contents) || (cluster_count > media_ptr -> fx_media_total_clusters))
 800d4a6:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800d4aa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d4ae:	4293      	cmp	r3, r2
 800d4b0:	d006      	beq.n	800d4c0 <_fx_file_open+0x354>
 800d4b2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d4b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d4b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	d908      	bls.n	800d4d2 <_fx_file_open+0x366>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800d4c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d4c4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	f006 ff6b 	bl	80143a4 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(FX_FAT_READ_ERROR);
 800d4ce:	2303      	movs	r3, #3
 800d4d0:	e328      	b.n	800db24 <_fx_file_open+0x9b8>
                }

#ifndef FX_DISABLE_CONSECUTIVE_DETECT

                /* Check if present and next clusters are consecutive */
                if (cluster + 1 == contents)
 800d4d2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d4d6:	1c5a      	adds	r2, r3, #1
 800d4d8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d10f      	bne.n	800d500 <_fx_file_open+0x394>
                {
            
                    /* Determine if clusters are consecutive so far.  */
                    if (leading_consecutive)
 800d4e0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d00e      	beq.n	800d506 <_fx_file_open+0x39a>
                    {

                        /* Yes, increment the number of leading consecutive clusters.  */
                        file_ptr -> fx_file_consecutive_cluster++;
 800d4e8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d4ec:	699b      	ldr	r3, [r3, #24]
 800d4ee:	1c5a      	adds	r2, r3, #1
 800d4f0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d4f4:	619a      	str	r2, [r3, #24]
 800d4f6:	e006      	b.n	800d506 <_fx_file_open+0x39a>
 800d4f8:	4d454449 	.word	0x4d454449
 800d4fc:	0ffffff8 	.word	0x0ffffff8
                }
                else
                {

                    /* The clusters are no longer consecutive, clear the consecutive flag.  */
                    leading_consecutive = 0;
 800d500:	2300      	movs	r3, #0
 800d502:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
                }
#endif /* FX_DISABLE_CONSECUTIVE_DETECT */

                /* Save the last valid cluster.  */
                last_cluster =  cluster;
 800d506:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d50a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

                /* Setup for the next cluster.  */
                cluster =  contents;
 800d50e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800d512:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

                /* Determine if this is the last written cluster.  We need to remember this
                   for open for writing.  */
                if (bytes_remaining > bytes_per_cluster)
 800d516:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800d51a:	2200      	movs	r2, #0
 800d51c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d520:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800d524:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d528:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 800d52c:	4641      	mov	r1, r8
 800d52e:	4291      	cmp	r1, r2
 800d530:	4649      	mov	r1, r9
 800d532:	eb71 0303 	sbcs.w	r3, r1, r3
 800d536:	d216      	bcs.n	800d566 <_fx_file_open+0x3fa>
                {

                    /* Still more written clusters, just decrement the counter.  */
                    bytes_remaining =  bytes_remaining - bytes_per_cluster;
 800d538:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800d53c:	2200      	movs	r2, #0
 800d53e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d542:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800d546:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d54a:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800d54e:	4641      	mov	r1, r8
 800d550:	1a51      	subs	r1, r2, r1
 800d552:	6039      	str	r1, [r7, #0]
 800d554:	4649      	mov	r1, r9
 800d556:	eb63 0301 	sbc.w	r3, r3, r1
 800d55a:	607b      	str	r3, [r7, #4]
 800d55c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d560:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
 800d564:	e040      	b.n	800d5e8 <_fx_file_open+0x47c>
                }
                else if (!file_ptr -> fx_file_current_physical_cluster)
 800d566:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d56a:	6a1b      	ldr	r3, [r3, #32]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d13b      	bne.n	800d5e8 <_fx_file_open+0x47c>
                {

                    /* Remember this cluster number.  */
                    file_ptr -> fx_file_current_physical_cluster =  last_cluster;
 800d570:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d574:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800d578:	6213      	str	r3, [r2, #32]

                    /* Remember the relative cluster.  */
                    file_ptr -> fx_file_current_relative_cluster =  cluster_count - 1;
 800d57a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800d57e:	1e5a      	subs	r2, r3, #1
 800d580:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d584:	635a      	str	r2, [r3, #52]	; 0x34

                    /* If the remaining bytes exactly fits the cluster size, check for
                       a possible adjustment to the next cluster.  */
                    if ((bytes_remaining == bytes_per_cluster) &&
 800d586:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800d58a:	2200      	movs	r2, #0
 800d58c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d590:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800d594:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d598:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800d59c:	4641      	mov	r1, r8
 800d59e:	4648      	mov	r0, r9
 800d5a0:	4283      	cmp	r3, r0
 800d5a2:	bf08      	it	eq
 800d5a4:	428a      	cmpeq	r2, r1
 800d5a6:	d11f      	bne.n	800d5e8 <_fx_file_open+0x47c>
 800d5a8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d5ac:	2b01      	cmp	r3, #1
 800d5ae:	d91b      	bls.n	800d5e8 <_fx_file_open+0x47c>
                        (cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800d5b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d5b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d5b8:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800d5bc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d5c0:	4293      	cmp	r3, r2
 800d5c2:	d211      	bcs.n	800d5e8 <_fx_file_open+0x47c>
                    {

                        /* We need to position to next allocated cluster.  */
                        file_ptr -> fx_file_current_physical_cluster =  cluster;
 800d5c4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d5c8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d5cc:	6213      	str	r3, [r2, #32]
                        file_ptr -> fx_file_current_relative_cluster++;
 800d5ce:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d5d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5d4:	1c5a      	adds	r2, r3, #1
 800d5d6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d5da:	635a      	str	r2, [r3, #52]	; 0x34

                        /* Clear the remaining bytes.  */
                        bytes_remaining =  0;
 800d5dc:	f04f 0200 	mov.w	r2, #0
 800d5e0:	f04f 0300 	mov.w	r3, #0
 800d5e4:	e9c7 235c 	strd	r2, r3, [r7, #368]	; 0x170
            while ((cluster >= FX_FAT_ENTRY_START) && (cluster < media_ptr -> fx_media_fat_reserved))
 800d5e8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d5ec:	2b01      	cmp	r3, #1
 800d5ee:	d90a      	bls.n	800d606 <_fx_file_open+0x49a>
 800d5f0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d5f4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d5f8:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800d5fc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800d600:	4293      	cmp	r3, r2
 800d602:	f4ff af32 	bcc.w	800d46a <_fx_file_open+0x2fe>
                }
            }

            /* Determine if the number of clusters is large enough to support the
               specified file size.  */
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 800d606:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d60a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d60c:	2200      	movs	r2, #0
 800d60e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d612:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
                ((ULONG64)media_ptr -> fx_media_sectors_per_cluster) *
 800d616:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d61a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d61c:	2200      	movs	r2, #0
 800d61e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d622:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 800d626:	e9d7 8938 	ldrd	r8, r9, [r7, #224]	; 0xe0
 800d62a:	464b      	mov	r3, r9
 800d62c:	e9d7 ab36 	ldrd	sl, fp, [r7, #216]	; 0xd8
 800d630:	4652      	mov	r2, sl
 800d632:	fb02 f203 	mul.w	r2, r2, r3
 800d636:	465b      	mov	r3, fp
 800d638:	4641      	mov	r1, r8
 800d63a:	fb01 f303 	mul.w	r3, r1, r3
 800d63e:	4413      	add	r3, r2
 800d640:	4642      	mov	r2, r8
 800d642:	4651      	mov	r1, sl
 800d644:	fba2 4501 	umull	r4, r5, r2, r1
 800d648:	442b      	add	r3, r5
 800d64a:	461d      	mov	r5, r3
                ((ULONG64)cluster_count);
 800d64c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800d650:	2200      	movs	r2, #0
 800d652:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d656:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
            bytes_available =  ((ULONG64)media_ptr -> fx_media_bytes_per_sector) *
 800d65a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800d65e:	4603      	mov	r3, r0
 800d660:	fb03 f205 	mul.w	r2, r3, r5
 800d664:	460b      	mov	r3, r1
 800d666:	fb04 f303 	mul.w	r3, r4, r3
 800d66a:	4413      	add	r3, r2
 800d66c:	4602      	mov	r2, r0
 800d66e:	fba4 1202 	umull	r1, r2, r4, r2
 800d672:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 800d676:	460a      	mov	r2, r1
 800d678:	f8c7 2120 	str.w	r2, [r7, #288]	; 0x120
 800d67c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800d680:	4413      	add	r3, r2
 800d682:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800d686:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800d68a:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178
 800d68e:	e9c7 345e 	strd	r3, r4, [r7, #376]	; 0x178

            /* Check the bytes available in the cluster chain against the directory entry file size.  */
            if ((bytes_available < file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size) ||
 800d692:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d696:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 800d69a:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800d69e:	4282      	cmp	r2, r0
 800d6a0:	418b      	sbcs	r3, r1
 800d6a2:	d309      	bcc.n	800d6b8 <_fx_file_open+0x54c>
 800d6a4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d00e      	beq.n	800d6ca <_fx_file_open+0x55e>
                ((cluster_count) && (contents < fat_last)))
 800d6ac:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800d6b0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800d6b4:	4293      	cmp	r3, r2
 800d6b6:	d908      	bls.n	800d6ca <_fx_file_open+0x55e>
            {
                /* File is corrupt, release media protection.  */
                FX_UNPROTECT
 800d6b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d6bc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	f006 fe6f 	bl	80143a4 <_tx_mutex_put>

                /* Return a corrupt file error status.  */
                return(FX_FILE_CORRUPT);
 800d6c6:	2308      	movs	r3, #8
 800d6c8:	e22c      	b.n	800db24 <_fx_file_open+0x9b8>
#endif /* FX_ENABLE_EXFAT */
    }

    /* The file is okay, populate the file control block and complete the
       file open process.  */
    file_ptr -> fx_file_id =                        FX_FILE_ID;
 800d6ca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d6ce:	4baa      	ldr	r3, [pc, #680]	; (800d978 <_fx_file_open+0x80c>)
 800d6d0:	6013      	str	r3, [r2, #0]
    file_ptr -> fx_file_name =                      file_ptr -> fx_file_name_buffer;
 800d6d2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d6d6:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 800d6da:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d6de:	605a      	str	r2, [r3, #4]
    file_ptr -> fx_file_media_ptr =                 media_ptr;
 800d6e0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d6e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d6e8:	6593      	str	r3, [r2, #88]	; 0x58
    file_ptr -> fx_file_open_mode =                 open_type;
 800d6ea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d6ee:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800d6f2:	6093      	str	r3, [r2, #8]
    file_ptr -> fx_file_modified =                  FX_FALSE;
 800d6f4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	7313      	strb	r3, [r2, #12]
    file_ptr -> fx_file_total_clusters =            cluster_count;
 800d6fc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d700:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800d704:	6113      	str	r3, [r2, #16]
    file_ptr -> fx_file_first_physical_cluster =    file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 800d706:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d70a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800d70e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d712:	615a      	str	r2, [r3, #20]
    file_ptr -> fx_file_last_physical_cluster =     last_cluster;
 800d714:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d718:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800d71c:	61d3      	str	r3, [r2, #28]
    file_ptr -> fx_file_current_file_size =         file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 800d71e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d722:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 800d726:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d72a:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
    file_ptr -> fx_file_current_available_size =    bytes_available;
 800d72e:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800d732:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 800d736:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    file_ptr -> fx_file_disable_burst_cache =       FX_FALSE;
 800d73a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800d73e:	2300      	movs	r3, #0
 800d740:	f8c2 31d8 	str.w	r3, [r2, #472]	; 0x1d8

    /* Set the current settings based on how the file was opened.  */
    if (open_type == FX_OPEN_FOR_READ)
 800d744:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d163      	bne.n	800d814 <_fx_file_open+0x6a8>
    {

        /* Position the pointers to the beginning of the file.  */
        file_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 800d74c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d750:	695a      	ldr	r2, [r3, #20]
 800d752:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d756:	621a      	str	r2, [r3, #32]
        file_ptr -> fx_file_current_relative_cluster =  0;
 800d758:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d75c:	2200      	movs	r2, #0
 800d75e:	635a      	str	r2, [r3, #52]	; 0x34
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d760:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d766:	2200      	movs	r2, #0
 800d768:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d76c:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800d770:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d774:	695b      	ldr	r3, [r3, #20]
 800d776:	3b02      	subs	r3, #2
 800d778:	2200      	movs	r2, #0
 800d77a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d77e:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800d782:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d788:	2200      	movs	r2, #0
 800d78a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d78e:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
            (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800d792:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	; 0xc0
 800d796:	462b      	mov	r3, r5
 800d798:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800d79c:	4642      	mov	r2, r8
 800d79e:	fb02 f203 	mul.w	r2, r2, r3
 800d7a2:	464b      	mov	r3, r9
 800d7a4:	4621      	mov	r1, r4
 800d7a6:	fb01 f303 	mul.w	r3, r1, r3
 800d7aa:	4413      	add	r3, r2
 800d7ac:	4622      	mov	r2, r4
 800d7ae:	4641      	mov	r1, r8
 800d7b0:	fba2 1201 	umull	r1, r2, r2, r1
 800d7b4:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800d7b8:	460a      	mov	r2, r1
 800d7ba:	f8c7 2138 	str.w	r2, [r7, #312]	; 0x138
 800d7be:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800d7c2:	4413      	add	r3, r2
 800d7c4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d7c8:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 800d7cc:	4623      	mov	r3, r4
 800d7ce:	e9d7 014e 	ldrd	r0, r1, [r7, #312]	; 0x138
 800d7d2:	4602      	mov	r2, r0
 800d7d4:	189b      	adds	r3, r3, r2
 800d7d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d7da:	460b      	mov	r3, r1
 800d7dc:	462a      	mov	r2, r5
 800d7de:	eb42 0303 	adc.w	r3, r2, r3
 800d7e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d7e6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d7ea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800d7ee:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector =   0;
 800d7f2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d7f6:	2200      	movs	r2, #0
 800d7f8:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_logical_offset =    0;
 800d7fa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d7fe:	2200      	movs	r2, #0
 800d800:	631a      	str	r2, [r3, #48]	; 0x30
        file_ptr -> fx_file_current_file_offset =       0;
 800d802:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800d806:	f04f 0200 	mov.w	r2, #0
 800d80a:	f04f 0300 	mov.w	r3, #0
 800d80e:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 800d812:	e140      	b.n	800da96 <_fx_file_open+0x92a>
    {

        /* Open for writing - position the pointers to the end of the file.  */

        /* Determine if the remaining bytes fit exactly into the cluster size.  */
        if (bytes_remaining == bytes_per_cluster)
 800d814:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800d818:	2200      	movs	r2, #0
 800d81a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d81e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800d822:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d826:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800d82a:	4621      	mov	r1, r4
 800d82c:	4628      	mov	r0, r5
 800d82e:	4283      	cmp	r3, r0
 800d830:	bf08      	it	eq
 800d832:	428a      	cmpeq	r2, r1
 800d834:	f040 80a2 	bne.w	800d97c <_fx_file_open+0x810>
        {

            /* Position to the end of the cluster.  */
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d838:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d83c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d83e:	2200      	movs	r2, #0
 800d840:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d844:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800d848:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d84c:	6a1b      	ldr	r3, [r3, #32]
 800d84e:	2200      	movs	r2, #0
 800d850:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d854:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800d858:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800d85c:	460b      	mov	r3, r1
 800d85e:	3b02      	subs	r3, #2
 800d860:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d864:	4613      	mov	r3, r2
 800d866:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d86a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800d86e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d874:	2200      	movs	r2, #0
 800d876:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d87a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800d87e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800d882:	462b      	mov	r3, r5
 800d884:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800d888:	4642      	mov	r2, r8
 800d88a:	fb02 f203 	mul.w	r2, r2, r3
 800d88e:	464b      	mov	r3, r9
 800d890:	4621      	mov	r1, r4
 800d892:	fb01 f303 	mul.w	r3, r1, r3
 800d896:	4413      	add	r3, r2
 800d898:	4622      	mov	r2, r4
 800d89a:	4641      	mov	r1, r8
 800d89c:	fba2 1201 	umull	r1, r2, r2, r1
 800d8a0:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800d8a4:	460a      	mov	r2, r1
 800d8a6:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 800d8aa:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800d8ae:	4413      	add	r3, r2
 800d8b0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d8b4:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
 800d8b8:	4623      	mov	r3, r4
 800d8ba:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	; 0x130
 800d8be:	4602      	mov	r2, r0
 800d8c0:	189b      	adds	r3, r3, r2
 800d8c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d8c6:	460b      	mov	r3, r1
 800d8c8:	462a      	mov	r2, r5
 800d8ca:	eb42 0303 	adc.w	r3, r2, r3
 800d8ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                ((ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 800d8d2:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d8d6:	1e51      	subs	r1, r2, #1
 800d8d8:	67b9      	str	r1, [r7, #120]	; 0x78
 800d8da:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d8de:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d8e0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d8e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	673b      	str	r3, [r7, #112]	; 0x70
 800d8ea:	677a      	str	r2, [r7, #116]	; 0x74
 800d8ec:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d8f0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800d8f4:	f7f2 fe64 	bl	80005c0 <__aeabi_uldivmod>
 800d8f8:	4602      	mov	r2, r0
 800d8fa:	460b      	mov	r3, r1
 800d8fc:	2300      	movs	r3, #0
 800d8fe:	66ba      	str	r2, [r7, #104]	; 0x68
 800d900:	66fb      	str	r3, [r7, #108]	; 0x6c
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800d902:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800d906:	4623      	mov	r3, r4
 800d908:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d90c:	4602      	mov	r2, r0
 800d90e:	189b      	adds	r3, r3, r2
 800d910:	663b      	str	r3, [r7, #96]	; 0x60
 800d912:	460b      	mov	r3, r1
 800d914:	462a      	mov	r2, r5
 800d916:	eb42 0303 	adc.w	r3, r2, r3
 800d91a:	667b      	str	r3, [r7, #100]	; 0x64
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d91c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d920:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800d924:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_relative_sector =   (ULONG)(((bytes_remaining - 1) / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800d928:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 800d92c:	1e51      	subs	r1, r2, #1
 800d92e:	65b9      	str	r1, [r7, #88]	; 0x58
 800d930:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d934:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d936:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d93a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d93c:	2200      	movs	r2, #0
 800d93e:	653b      	str	r3, [r7, #80]	; 0x50
 800d940:	657a      	str	r2, [r7, #84]	; 0x54
 800d942:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d946:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800d94a:	f7f2 fe39 	bl	80005c0 <__aeabi_uldivmod>
 800d94e:	4602      	mov	r2, r0
 800d950:	460b      	mov	r3, r1
 800d952:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d956:	639a      	str	r2, [r3, #56]	; 0x38
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 800d958:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d95c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800d960:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800d964:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            file_ptr -> fx_file_current_logical_offset =    media_ptr -> fx_media_bytes_per_sector;
 800d968:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d96c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d96e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d972:	631a      	str	r2, [r3, #48]	; 0x30
 800d974:	e08f      	b.n	800da96 <_fx_file_open+0x92a>
 800d976:	bf00      	nop
 800d978:	46494c45 	.word	0x46494c45
        }
        else
        {

            /* Position file parameters at end of last cluster allocation.  */
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d97c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d982:	2200      	movs	r2, #0
 800d984:	64bb      	str	r3, [r7, #72]	; 0x48
 800d986:	64fa      	str	r2, [r7, #76]	; 0x4c
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800d988:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800d98c:	6a1b      	ldr	r3, [r3, #32]
 800d98e:	2200      	movs	r2, #0
 800d990:	643b      	str	r3, [r7, #64]	; 0x40
 800d992:	647a      	str	r2, [r7, #68]	; 0x44
 800d994:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800d998:	460b      	mov	r3, r1
 800d99a:	3b02      	subs	r3, #2
 800d99c:	63bb      	str	r3, [r7, #56]	; 0x38
 800d99e:	4613      	mov	r3, r2
 800d9a0:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d9a4:	63fb      	str	r3, [r7, #60]	; 0x3c
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800d9a6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800d9aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9ac:	2200      	movs	r2, #0
 800d9ae:	633b      	str	r3, [r7, #48]	; 0x30
 800d9b0:	637a      	str	r2, [r7, #52]	; 0x34
                (((ULONG64)file_ptr -> fx_file_current_physical_cluster - FX_FAT_ENTRY_START) *
 800d9b2:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800d9b6:	462b      	mov	r3, r5
 800d9b8:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 800d9bc:	4642      	mov	r2, r8
 800d9be:	fb02 f203 	mul.w	r2, r2, r3
 800d9c2:	464b      	mov	r3, r9
 800d9c4:	4621      	mov	r1, r4
 800d9c6:	fb01 f303 	mul.w	r3, r1, r3
 800d9ca:	4413      	add	r3, r2
 800d9cc:	4622      	mov	r2, r4
 800d9ce:	4641      	mov	r1, r8
 800d9d0:	fba2 1201 	umull	r1, r2, r2, r1
 800d9d4:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800d9d8:	460a      	mov	r2, r1
 800d9da:	f8c7 2128 	str.w	r2, [r7, #296]	; 0x128
 800d9de:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800d9e2:	4413      	add	r3, r2
 800d9e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800d9e8:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800d9ec:	4623      	mov	r3, r4
 800d9ee:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	189b      	adds	r3, r3, r2
 800d9f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d9f8:	460b      	mov	r3, r1
 800d9fa:	462a      	mov	r2, r5
 800d9fc:	eb42 0303 	adc.w	r3, r2, r3
 800da00:	62fb      	str	r3, [r7, #44]	; 0x2c
                ((ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector)));
 800da02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800da06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da08:	2200      	movs	r2, #0
 800da0a:	623b      	str	r3, [r7, #32]
 800da0c:	627a      	str	r2, [r7, #36]	; 0x24
 800da0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800da12:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800da16:	f7f2 fdd3 	bl	80005c0 <__aeabi_uldivmod>
 800da1a:	4602      	mov	r2, r0
 800da1c:	460b      	mov	r3, r1
 800da1e:	2300      	movs	r3, #0
 800da20:	61ba      	str	r2, [r7, #24]
 800da22:	61fb      	str	r3, [r7, #28]
                 ((ULONG)media_ptr -> fx_media_sectors_per_cluster)) +
 800da24:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800da28:	4623      	mov	r3, r4
 800da2a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800da2e:	4602      	mov	r2, r0
 800da30:	189b      	adds	r3, r3, r2
 800da32:	613b      	str	r3, [r7, #16]
 800da34:	460b      	mov	r3, r1
 800da36:	462a      	mov	r2, r5
 800da38:	eb42 0303 	adc.w	r3, r2, r3
 800da3c:	617b      	str	r3, [r7, #20]
            file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800da3e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800da42:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800da46:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_relative_sector =   (ULONG)((bytes_remaining / (ULONG)media_ptr -> fx_media_bytes_per_sector));
 800da4a:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800da4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da50:	2200      	movs	r2, #0
 800da52:	60bb      	str	r3, [r7, #8]
 800da54:	60fa      	str	r2, [r7, #12]
 800da56:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800da5a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800da5e:	f7f2 fdaf 	bl	80005c0 <__aeabi_uldivmod>
 800da62:	4602      	mov	r2, r0
 800da64:	460b      	mov	r3, r1
 800da66:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800da6a:	639a      	str	r2, [r3, #56]	; 0x38
            file_ptr -> fx_file_current_file_offset =       file_ptr -> fx_file_current_file_size;
 800da6c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800da70:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800da74:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800da78:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
            file_ptr -> fx_file_current_logical_offset =    (ULONG)bytes_remaining % ((ULONG)media_ptr -> fx_media_bytes_per_sector);
 800da7c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800da80:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800da84:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800da86:	fbb3 f1f2 	udiv	r1, r3, r2
 800da8a:	fb01 f202 	mul.w	r2, r1, r2
 800da8e:	1a9a      	subs	r2, r3, r2
 800da90:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800da94:	631a      	str	r2, [r3, #48]	; 0x30
    file_ptr -> fx_file_maximum_size_used = file_ptr -> fx_file_current_file_size;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Place newly opened file on the list of open files for
       this media.  First, check for an empty list.  */
    if (media_ptr -> fx_media_opened_file_list)
 800da96:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800da9a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d01f      	beq.n	800dae2 <_fx_file_open+0x976>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous;
 800daa2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800daa6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800daaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800daac:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

        /* Place the new file in the list.  */
        (media_ptr -> fx_media_opened_file_list) -> fx_file_opened_previous =  file_ptr;
 800dab0:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800dab4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800dab8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800dabc:	661a      	str	r2, [r3, #96]	; 0x60
        tail_ptr -> fx_file_opened_next =  file_ptr;
 800dabe:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dac2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800dac6:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Setup this file's opened links.  */
        file_ptr -> fx_file_opened_previous =  tail_ptr;
 800dac8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800dacc:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800dad0:	661a      	str	r2, [r3, #96]	; 0x60
        file_ptr -> fx_file_opened_next =      media_ptr -> fx_media_opened_file_list;
 800dad2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800dad6:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 800dada:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800dade:	65da      	str	r2, [r3, #92]	; 0x5c
 800dae0:	e00f      	b.n	800db02 <_fx_file_open+0x996>
    }
    else
    {

        /* The opened media list is empty.  Add the media to empty list.  */
        media_ptr -> fx_media_opened_file_list =   file_ptr;
 800dae2:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800dae6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800daea:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        file_ptr ->  fx_file_opened_next =         file_ptr;
 800daee:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800daf2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800daf6:	65da      	str	r2, [r3, #92]	; 0x5c
        file_ptr ->  fx_file_opened_previous =     file_ptr;
 800daf8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800dafc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800db00:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Increment the opened file counter.  */
    media_ptr -> fx_media_opened_file_count++;
 800db02:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800db06:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800db0a:	1c5a      	adds	r2, r3, #1
 800db0c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800db10:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

    /* Release media protection.  */
    FX_UNPROTECT
 800db14:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800db18:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800db1c:	4618      	mov	r0, r3
 800db1e:	f006 fc41 	bl	80143a4 <_tx_mutex_put>

    /* Open is complete, return successful status.  */
    return(FX_SUCCESS);
 800db22:	2300      	movs	r3, #0
}
 800db24:	4618      	mov	r0, r3
 800db26:	f507 77cc 	add.w	r7, r7, #408	; 0x198
 800db2a:	46bd      	mov	sp, r7
 800db2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800db30 <_fx_file_read>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_read(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG request_size, ULONG *actual_size)
{
 800db30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800db34:	b0aa      	sub	sp, #168	; 0xa8
 800db36:	af04      	add	r7, sp, #16
 800db38:	66f8      	str	r0, [r7, #108]	; 0x6c
 800db3a:	66b9      	str	r1, [r7, #104]	; 0x68
 800db3c:	667a      	str	r2, [r7, #100]	; 0x64
 800db3e:	663b      	str	r3, [r7, #96]	; 0x60
ULONG                  trace_timestamp;
#endif


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800db40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db42:	681a      	ldr	r2, [r3, #0]
 800db44:	4b9d      	ldr	r3, [pc, #628]	; (800ddbc <_fx_file_read+0x28c>)
 800db46:	429a      	cmp	r2, r3
 800db48:	d001      	beq.n	800db4e <_fx_file_read+0x1e>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800db4a:	2307      	movs	r3, #7
 800db4c:	e28d      	b.n	800e06a <_fx_file_read+0x53a>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800db4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db52:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_reads++;
 800db54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800db56:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800db5a:	1c5a      	adds	r2, r3, #1
 800db5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800db5e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
#endif

    /* Setup pointer to associated media control block.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800db62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db66:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_READ, file_ptr, buffer_ptr, request_size, 0, FX_TRACE_FILE_EVENTS, &trace_event, &trace_timestamp)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800db68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800db6a:	681a      	ldr	r2, [r3, #0]
 800db6c:	4b94      	ldr	r3, [pc, #592]	; (800ddc0 <_fx_file_read+0x290>)
 800db6e:	429a      	cmp	r2, r3
 800db70:	d001      	beq.n	800db76 <_fx_file_read+0x46>
 800db72:	2311      	movs	r3, #17
 800db74:	e279      	b.n	800e06a <_fx_file_read+0x53a>
 800db76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800db78:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800db7c:	f04f 31ff 	mov.w	r1, #4294967295
 800db80:	4618      	mov	r0, r3
 800db82:	f006 f997 	bl	8013eb4 <_tx_mutex_get>
 800db86:	4603      	mov	r3, r0
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d001      	beq.n	800db90 <_fx_file_read+0x60>
 800db8c:	2311      	movs	r3, #17
 800db8e:	e26c      	b.n	800e06a <_fx_file_read+0x53a>

    /* Next, determine if there is any more bytes to read in the file.  */
    if (file_ptr -> fx_file_current_file_offset >=
 800db90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db92:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
        file_ptr -> fx_file_current_file_size)
 800db96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db98:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
    if (file_ptr -> fx_file_current_file_offset >=
 800db9c:	4290      	cmp	r0, r2
 800db9e:	eb71 0303 	sbcs.w	r3, r1, r3
 800dba2:	d30a      	bcc.n	800dbba <_fx_file_read+0x8a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800dba4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dba6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dbaa:	4618      	mov	r0, r3
 800dbac:	f006 fbfa 	bl	80143a4 <_tx_mutex_put>

        /* The file is at the end, return the proper status and set the
           actual size to 0.  */
        *actual_size =  0;
 800dbb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	601a      	str	r2, [r3, #0]
        return(FX_END_OF_FILE);
 800dbb6:	2309      	movs	r3, #9
 800dbb8:	e257      	b.n	800e06a <_fx_file_read+0x53a>
    }

    /* At this point there is something to read.  */

    /* Setup local buffer pointer.  */
    destination_ptr =  (UCHAR *)buffer_ptr;
 800dbba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dbbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    /* Determine if there are less bytes left in the file than that specified
       by the request.  If so, adjust the requested size.  */
    if ((ULONG64)request_size >
 800dbc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	4698      	mov	r8, r3
 800dbc6:	4691      	mov	r9, r2
        (file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset))
 800dbc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbca:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800dbce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbd0:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800dbd4:	1a84      	subs	r4, r0, r2
 800dbd6:	eb61 0503 	sbc.w	r5, r1, r3
    if ((ULONG64)request_size >
 800dbda:	4544      	cmp	r4, r8
 800dbdc:	eb75 0309 	sbcs.w	r3, r5, r9
 800dbe0:	d209      	bcs.n	800dbf6 <_fx_file_read+0xc6>
    {

        /* Adjust the bytes remaining to what's available.  */
        request_size =  (ULONG)(file_ptr -> fx_file_current_file_size - file_ptr -> fx_file_current_file_offset);
 800dbe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbe4:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800dbe8:	4611      	mov	r1, r2
 800dbea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbec:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800dbf0:	4613      	mov	r3, r2
 800dbf2:	1acb      	subs	r3, r1, r3
 800dbf4:	667b      	str	r3, [r7, #100]	; 0x64
    }

    /* Setup the remaining number of bytes to read.  */
    bytes_remaining =  request_size;
 800dbf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dbf8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Loop to read all of the bytes.  */
    while (bytes_remaining)
 800dbfc:	e20a      	b.n	800e014 <_fx_file_read+0x4e4>
    {

        /* Determine if a beginning or ending partial read is required.  */
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800dbfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d105      	bne.n	800dc12 <_fx_file_read+0xe2>
            (bytes_remaining < media_ptr -> fx_media_bytes_per_sector))
 800dc06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800dc0a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d24d      	bcs.n	800dcae <_fx_file_read+0x17e>
        {

            /* A partial sector read is required.  */

            /* Read the current logical sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr,
 800dc12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc14:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                      file_ptr -> fx_file_current_logical_sector,
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800dc18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc1a:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr,
 800dc1c:	2304      	movs	r3, #4
 800dc1e:	9302      	str	r3, [sp, #8]
 800dc20:	2301      	movs	r3, #1
 800dc22:	9301      	str	r3, [sp, #4]
 800dc24:	9200      	str	r2, [sp, #0]
 800dc26:	4602      	mov	r2, r0
 800dc28:	460b      	mov	r3, r1
 800dc2a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800dc2c:	f004 fb0e 	bl	801224c <_fx_utility_logical_sector_read>
 800dc30:	67b8      	str	r0, [r7, #120]	; 0x78

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800dc32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d007      	beq.n	800dc48 <_fx_file_read+0x118>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800dc38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc3a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f006 fbb0 	bl	80143a4 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800dc44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dc46:	e210      	b.n	800e06a <_fx_file_read+0x53a>
            }

            /* Copy the appropriate number of bytes into the destination buffer.  */
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800dc48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_logical_offset;
 800dc4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800dc50:	1ad3      	subs	r3, r2, r3
 800dc52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

            /* Check to see if only a portion of the read sector needs to be
               copied.  */
            if (copy_bytes > bytes_remaining)
 800dc56:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800dc5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dc5e:	429a      	cmp	r2, r3
 800dc60:	d903      	bls.n	800dc6a <_fx_file_read+0x13a>
            {

                /* Adjust the number of bytes to copy.  */
                copy_bytes =  bytes_remaining;
 800dc62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dc66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
            }

            /* Actually perform the memory copy.  */
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) + /* Use case of memcpy is verified. */
 800dc6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dc6c:	689a      	ldr	r2, [r3, #8]
                                    file_ptr -> fx_file_current_logical_offset,
 800dc6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            _fx_utility_memory_copy(((UCHAR *)media_ptr -> fx_media_memory_buffer) + /* Use case of memcpy is verified. */
 800dc72:	4413      	add	r3, r2
 800dc74:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800dc78:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f004 fee1 	bl	8012a44 <_fx_utility_memory_copy>
                                    destination_ptr, copy_bytes);

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 800dc82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dc86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc8a:	441a      	add	r2, r3
            file_ptr -> fx_file_current_logical_offset =
 800dc8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc8e:	631a      	str	r2, [r3, #48]	; 0x30

            /* Adjust the remaining bytes to read.  */
            bytes_remaining =  bytes_remaining - copy_bytes;
 800dc90:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800dc94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc98:	1ad3      	subs	r3, r2, r3
 800dc9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            /* Adjust the pointer to the destination buffer.  */
            destination_ptr =  destination_ptr + copy_bytes;
 800dc9e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800dca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dca6:	4413      	add	r3, r2
 800dca8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800dcac:	e108      	b.n	800dec0 <_fx_file_read+0x390>
            /* Attempt to read multiple sectors directly into the destination
               buffer.  */

            /* Calculate the number of whole sectors to read directly into
               the destination buffer.  */
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 800dcae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dcb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dcb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dcb6:	fbb3 f3f2 	udiv	r3, r3, r2
 800dcba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80


            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 800dcbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcc0:	6a1b      	ldr	r3, [r3, #32]
 800dcc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800dcc6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dcca:	677b      	str	r3, [r7, #116]	; 0x74
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800dccc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dcce:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800dcd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800dcd4:	1ad3      	subs	r3, r2, r3
 800dcd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800dcda:	e033      	b.n	800dd44 <_fx_file_read+0x214>
                    cluster++;
                }
                else
                {
#endif /* FX_ENABLE_EXFAT */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800dcdc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800dce0:	461a      	mov	r2, r3
 800dce2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800dce6:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800dce8:	f002 fea2 	bl	8010a30 <_fx_utility_FAT_entry_read>
 800dcec:	67b8      	str	r0, [r7, #120]	; 0x78

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800dcee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d10a      	bne.n	800dd0a <_fx_file_read+0x1da>
 800dcf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dcf6:	2b01      	cmp	r3, #1
 800dcf8:	d907      	bls.n	800dd0a <_fx_file_read+0x1da>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800dcfa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dcfc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800dd00:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800dd04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d20c      	bcs.n	800dd24 <_fx_file_read+0x1f4>
                    {

                        /* Release media protection.  */
                        FX_UNPROTECT
 800dd0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dd0c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dd10:	4618      	mov	r0, r3
 800dd12:	f006 fb47 	bl	80143a4 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800dd16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d001      	beq.n	800dd20 <_fx_file_read+0x1f0>
                        {
                            return(status);
 800dd1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd1e:	e1a4      	b.n	800e06a <_fx_file_read+0x53a>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800dd20:	2308      	movs	r3, #8
 800dd22:	e1a2      	b.n	800e06a <_fx_file_read+0x53a>
                        }
                    }

                    if (next_cluster != cluster + 1)
 800dd24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dd28:	1c5a      	adds	r2, r3, #1
 800dd2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dd2c:	429a      	cmp	r2, r3
 800dd2e:	d110      	bne.n	800dd52 <_fx_file_read+0x222>
                    {
                        break;
                    }
                    else
                    {
                        cluster = next_cluster;
 800dd30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800dd32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800dd36:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dd38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dd3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dd3e:	4413      	add	r3, r2
 800dd40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800dd44:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800dd48:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dd4c:	429a      	cmp	r2, r3
 800dd4e:	d3c5      	bcc.n	800dcdc <_fx_file_read+0x1ac>
 800dd50:	e000      	b.n	800dd54 <_fx_file_read+0x224>
                        break;
 800dd52:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
                }
#endif /* FX_ENABLE_EXFAT */
            }

            if (i < sectors)
 800dd54:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800dd58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d203      	bcs.n	800dd68 <_fx_file_read+0x238>
            {
                sectors = i;
 800dd60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dd64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }

            /* Determine if this is a single sector read request.  If so, read the sector so it will
               come from the internal cache.  */
            if (sectors == 1)
 800dd68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dd6c:	2b01      	cmp	r3, #1
 800dd6e:	d129      	bne.n	800ddc4 <_fx_file_read+0x294>
            {

                /* Read the current logical sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr,
 800dd70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd72:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                          file_ptr -> fx_file_current_logical_sector,
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800dd76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dd78:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr,
 800dd7a:	2304      	movs	r3, #4
 800dd7c:	9302      	str	r3, [sp, #8]
 800dd7e:	2301      	movs	r3, #1
 800dd80:	9301      	str	r3, [sp, #4]
 800dd82:	9200      	str	r2, [sp, #0]
 800dd84:	4602      	mov	r2, r0
 800dd86:	460b      	mov	r3, r1
 800dd88:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800dd8a:	f004 fa5f 	bl	801224c <_fx_utility_logical_sector_read>
 800dd8e:	67b8      	str	r0, [r7, #120]	; 0x78

                /* Check for good completion status.  */
                if (status !=  FX_SUCCESS)
 800dd90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d007      	beq.n	800dda6 <_fx_file_read+0x276>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800dd96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dd98:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	f006 fb01 	bl	80143a4 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800dda2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dda4:	e161      	b.n	800e06a <_fx_file_read+0x53a>
                }

                /* Actually perform the memory copy.  */
                _fx_utility_memory_copy((UCHAR *)media_ptr -> fx_media_memory_buffer, destination_ptr, media_ptr -> fx_media_bytes_per_sector); /* Use case of memcpy is verified. */
 800dda6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dda8:	6898      	ldr	r0, [r3, #8]
 800ddaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ddac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddae:	461a      	mov	r2, r3
 800ddb0:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800ddb4:	f004 fe46 	bl	8012a44 <_fx_utility_memory_copy>
 800ddb8:	e02f      	b.n	800de1a <_fx_file_read+0x2ea>
 800ddba:	bf00      	nop
 800ddbc:	46494c45 	.word	0x46494c45
 800ddc0:	4d454449 	.word	0x4d454449

                /* Multiple sector read request.  Read all the sectors at once.  */

                /* Perform the data read directly into the user's buffer of
                   the appropriate number of sectors.  */
                media_ptr -> fx_media_disable_burst_cache = file_ptr -> fx_file_disable_burst_cache;
 800ddc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ddc6:	f8d3 21d8 	ldr.w	r2, [r3, #472]	; 0x1d8
 800ddca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ddcc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ddd0:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
                status =  _fx_utility_logical_sector_read(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800ddd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ddd6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800ddda:	2304      	movs	r3, #4
 800dddc:	9302      	str	r3, [sp, #8]
 800ddde:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dde2:	9301      	str	r3, [sp, #4]
 800dde4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dde8:	9300      	str	r3, [sp, #0]
 800ddea:	4602      	mov	r2, r0
 800ddec:	460b      	mov	r3, r1
 800ddee:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800ddf0:	f004 fa2c 	bl	801224c <_fx_utility_logical_sector_read>
 800ddf4:	67b8      	str	r0, [r7, #120]	; 0x78
                                                          destination_ptr, (ULONG) sectors, FX_DATA_SECTOR);
                media_ptr -> fx_media_disable_burst_cache = FX_FALSE;
 800ddf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ddf8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	2300      	movs	r3, #0
 800de00:	f8c2 34a4 	str.w	r3, [r2, #1188]	; 0x4a4

                /* Check for good completion status.  */
                if (status !=  FX_SUCCESS)
 800de04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de06:	2b00      	cmp	r3, #0
 800de08:	d007      	beq.n	800de1a <_fx_file_read+0x2ea>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800de0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de0c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800de10:	4618      	mov	r0, r3
 800de12:	f006 fac7 	bl	80143a4 <_tx_mutex_put>

                    /* Return the error status.  */
                    return(status);
 800de16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800de18:	e127      	b.n	800e06a <_fx_file_read+0x53a>

            /* Increment the current logical sector.  Subtract one from
               the sector count because we are going to use the logical
               offset to do additional sector/cluster arithmetic below.  */
            file_ptr -> fx_file_current_logical_sector =
                file_ptr -> fx_file_current_logical_sector +
 800de1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de1c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                (sectors - 1);
 800de20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800de24:	3b01      	subs	r3, #1
 800de26:	2200      	movs	r2, #0
 800de28:	65bb      	str	r3, [r7, #88]	; 0x58
 800de2a:	65fa      	str	r2, [r7, #92]	; 0x5c
                file_ptr -> fx_file_current_logical_sector +
 800de2c:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800de30:	4623      	mov	r3, r4
 800de32:	18c3      	adds	r3, r0, r3
 800de34:	653b      	str	r3, [r7, #80]	; 0x50
 800de36:	462b      	mov	r3, r5
 800de38:	eb41 0303 	adc.w	r3, r1, r3
 800de3c:	657b      	str	r3, [r7, #84]	; 0x54
            file_ptr -> fx_file_current_logical_sector =
 800de3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de40:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800de44:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

            /* Move the relative sector and cluster as well.  */
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800de48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800de4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800de54:	4413      	add	r3, r2
 800de56:	1e5a      	subs	r2, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 800de58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800de5c:	fbb2 f3f3 	udiv	r3, r2, r3
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800de60:	18ca      	adds	r2, r1, r3
 800de62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de64:	635a      	str	r2, [r3, #52]	; 0x34

            file_ptr -> fx_file_current_relative_sector =
                (file_ptr -> fx_file_current_relative_sector +
 800de66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de6a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800de6e:	4413      	add	r3, r2
 800de70:	1e59      	subs	r1, r3, #1
                 (sectors - 1)) % media_ptr -> fx_media_sectors_per_cluster;
 800de72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de76:	fbb1 f3f2 	udiv	r3, r1, r2
 800de7a:	fb02 f303 	mul.w	r3, r2, r3
 800de7e:	1aca      	subs	r2, r1, r3
            file_ptr -> fx_file_current_relative_sector =
 800de80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de82:	639a      	str	r2, [r3, #56]	; 0x38

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                media_ptr -> fx_media_bytes_per_sector;
 800de84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_logical_offset =
 800de88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de8a:	631a      	str	r2, [r3, #48]	; 0x30

            file_ptr -> fx_file_current_physical_cluster = cluster;
 800de8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800de8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800de92:	6213      	str	r3, [r2, #32]

            /* Adjust the remaining bytes.  */
            bytes_remaining =  bytes_remaining -
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800de94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800de96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800de98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800de9c:	fb03 f202 	mul.w	r2, r3, r2
            bytes_remaining =  bytes_remaining -
 800dea0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800dea4:	1a9b      	subs	r3, r3, r2
 800dea6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

            /* Adjust the pointer to the destination buffer.  */
            destination_ptr =  destination_ptr +
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800deaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800deac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800deae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800deb2:	fb03 f202 	mul.w	r2, r3, r2
            destination_ptr =  destination_ptr +
 800deb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800deba:	4413      	add	r3, r2
 800debc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        }

        /* At this point, we have either read a partial sector or have successfully
           read one or more whole sectors.  Determine if we are at the end of
           the current logical sector.  */
        if (file_ptr -> fx_file_current_logical_offset >=
 800dec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dec2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
            media_ptr -> fx_media_bytes_per_sector)
 800dec4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (file_ptr -> fx_file_current_logical_offset >=
 800dec8:	429a      	cmp	r2, r3
 800deca:	f0c0 80a3 	bcc.w	800e014 <_fx_file_read+0x4e4>
        {

            /* Determine if we are at the exact physical end of the file at the end of reading.  */
            if ((bytes_remaining == 0) && ((file_ptr -> fx_file_current_file_offset + (ULONG64)request_size) >=
 800dece:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d11a      	bne.n	800df0c <_fx_file_read+0x3dc>
 800ded6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ded8:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800dedc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800dede:	2000      	movs	r0, #0
 800dee0:	64b9      	str	r1, [r7, #72]	; 0x48
 800dee2:	64f8      	str	r0, [r7, #76]	; 0x4c
 800dee4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800dee8:	4621      	mov	r1, r4
 800deea:	1851      	adds	r1, r2, r1
 800deec:	6439      	str	r1, [r7, #64]	; 0x40
 800deee:	4629      	mov	r1, r5
 800def0:	414b      	adcs	r3, r1
 800def2:	647b      	str	r3, [r7, #68]	; 0x44
                                           file_ptr -> fx_file_current_available_size))
 800def4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800def6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            if ((bytes_remaining == 0) && ((file_ptr -> fx_file_current_file_offset + (ULONG64)request_size) >=
 800defa:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800defe:	4621      	mov	r1, r4
 800df00:	4291      	cmp	r1, r2
 800df02:	4629      	mov	r1, r5
 800df04:	eb71 0303 	sbcs.w	r3, r1, r3
 800df08:	f080 808a 	bcs.w	800e020 <_fx_file_read+0x4f0>
            /* We need to move to the next logical sector, but first
               determine if the next logical sector is within the same
               cluster.  */

            /* Increment the current relative sector in the cluster.  */
            file_ptr -> fx_file_current_relative_sector++;
 800df0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df10:	1c5a      	adds	r2, r3, #1
 800df12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df14:	639a      	str	r2, [r3, #56]	; 0x38

            /* Determine if this is in a new cluster.  */
            if (file_ptr -> fx_file_current_relative_sector >=
 800df16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                media_ptr -> fx_media_sectors_per_cluster)
 800df1a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800df1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if (file_ptr -> fx_file_current_relative_sector >=
 800df1e:	429a      	cmp	r2, r3
 800df20:	d368      	bcc.n	800dff4 <_fx_file_read+0x4c4>
                {
#endif /* FX_ENABLE_EXFAT */

                    /* Read the FAT entry of the current cluster to find
                       the next cluster.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr,
 800df22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df24:	6a19      	ldr	r1, [r3, #32]
 800df26:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800df2a:	461a      	mov	r2, r3
 800df2c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800df2e:	f002 fd7f 	bl	8010a30 <_fx_utility_FAT_entry_read>
 800df32:	67b8      	str	r0, [r7, #120]	; 0x78
                                                         file_ptr -> fx_file_current_physical_cluster, &next_cluster);

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800df34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800df36:	2b00      	cmp	r3, #0
 800df38:	d10a      	bne.n	800df50 <_fx_file_read+0x420>
 800df3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800df3c:	2b01      	cmp	r3, #1
 800df3e:	d907      	bls.n	800df50 <_fx_file_read+0x420>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800df40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800df42:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800df46:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800df4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800df4c:	429a      	cmp	r2, r3
 800df4e:	d20c      	bcs.n	800df6a <_fx_file_read+0x43a>
                    {

                        /* Release media protection.  */
                        FX_UNPROTECT
 800df50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800df52:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800df56:	4618      	mov	r0, r3
 800df58:	f006 fa24 	bl	80143a4 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800df5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d001      	beq.n	800df66 <_fx_file_read+0x436>
                        {
                            return(status);
 800df62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800df64:	e081      	b.n	800e06a <_fx_file_read+0x53a>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800df66:	2308      	movs	r3, #8
 800df68:	e07f      	b.n	800e06a <_fx_file_read+0x53a>
                }
#endif /* FX_ENABLE_EXFAT */

                /* Otherwise, we have a new cluster.  Save it in the file
                   control block and calculate a new logical sector value.  */
                file_ptr -> fx_file_current_physical_cluster =  next_cluster;
 800df6a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800df6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df6e:	621a      	str	r2, [r3, #32]
                file_ptr -> fx_file_current_relative_cluster++;
 800df70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df74:	1c5a      	adds	r2, r3, #1
 800df76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800df78:	635a      	str	r2, [r3, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800df7a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800df7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df7e:	2200      	movs	r2, #0
 800df80:	63bb      	str	r3, [r7, #56]	; 0x38
 800df82:	63fa      	str	r2, [r7, #60]	; 0x3c
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800df84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800df86:	2200      	movs	r2, #0
 800df88:	633b      	str	r3, [r7, #48]	; 0x30
 800df8a:	637a      	str	r2, [r7, #52]	; 0x34
 800df8c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800df90:	460b      	mov	r3, r1
 800df92:	3b02      	subs	r3, #2
 800df94:	62bb      	str	r3, [r7, #40]	; 0x28
 800df96:	4613      	mov	r3, r2
 800df98:	f143 33ff 	adc.w	r3, r3, #4294967295
 800df9c:	62fb      	str	r3, [r7, #44]	; 0x2c
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800df9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800dfa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	623b      	str	r3, [r7, #32]
 800dfa6:	627a      	str	r2, [r7, #36]	; 0x24
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800dfa8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800dfac:	462b      	mov	r3, r5
 800dfae:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800dfb2:	4642      	mov	r2, r8
 800dfb4:	fb02 f203 	mul.w	r2, r2, r3
 800dfb8:	464b      	mov	r3, r9
 800dfba:	4621      	mov	r1, r4
 800dfbc:	fb01 f303 	mul.w	r3, r1, r3
 800dfc0:	4413      	add	r3, r2
 800dfc2:	4622      	mov	r2, r4
 800dfc4:	4641      	mov	r1, r8
 800dfc6:	fba2 ab01 	umull	sl, fp, r2, r1
 800dfca:	445b      	add	r3, fp
 800dfcc:	469b      	mov	fp, r3
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800dfce:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800dfd2:	460b      	mov	r3, r1
 800dfd4:	eb13 030a 	adds.w	r3, r3, sl
 800dfd8:	61bb      	str	r3, [r7, #24]
 800dfda:	4613      	mov	r3, r2
 800dfdc:	eb43 030b 	adc.w	r3, r3, fp
 800dfe0:	61fb      	str	r3, [r7, #28]
 800dfe2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dfe4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800dfe8:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_relative_sector =  0;
 800dfec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800dfee:	2300      	movs	r3, #0
 800dff0:	6393      	str	r3, [r2, #56]	; 0x38
 800dff2:	e00c      	b.n	800e00e <_fx_file_read+0x4de>
            else
            {

                /* Still within the same cluster so just increment the
                   logical sector.  */
                file_ptr -> fx_file_current_logical_sector++;
 800dff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dff6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800dffa:	1c51      	adds	r1, r2, #1
 800dffc:	6139      	str	r1, [r7, #16]
 800dffe:	f143 0300 	adc.w	r3, r3, #0
 800e002:	617b      	str	r3, [r7, #20]
 800e004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e006:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e00a:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            }

            /* In either case, we are now positioned at a new sector so
               clear the logical sector offset.  */
            file_ptr -> fx_file_current_logical_offset =  0;
 800e00e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e010:	2300      	movs	r3, #0
 800e012:	6313      	str	r3, [r2, #48]	; 0x30
    while (bytes_remaining)
 800e014:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800e018:	2b00      	cmp	r3, #0
 800e01a:	f47f adf0 	bne.w	800dbfe <_fx_file_read+0xce>
 800e01e:	e000      	b.n	800e022 <_fx_file_read+0x4f2>
                break;
 800e020:	bf00      	nop
        }
    }

    /* Adjust the current file offset accordingly.  */
    file_ptr -> fx_file_current_file_offset =
        file_ptr -> fx_file_current_file_offset + (ULONG64)request_size;
 800e022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e024:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800e028:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e02a:	2000      	movs	r0, #0
 800e02c:	60b9      	str	r1, [r7, #8]
 800e02e:	60f8      	str	r0, [r7, #12]
 800e030:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800e034:	4621      	mov	r1, r4
 800e036:	1851      	adds	r1, r2, r1
 800e038:	6039      	str	r1, [r7, #0]
 800e03a:	4629      	mov	r1, r5
 800e03c:	eb43 0101 	adc.w	r1, r3, r1
 800e040:	6079      	str	r1, [r7, #4]
    file_ptr -> fx_file_current_file_offset =
 800e042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e044:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e048:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

    /* Store the number of bytes actually read.  */
    *actual_size =  request_size;
 800e04c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e04e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e050:	601a      	str	r2, [r3, #0]

    /* Update the trace event with the bytes read.  */
    FX_TRACE_EVENT_UPDATE(trace_event, trace_timestamp, FX_TRACE_FILE_READ, 0, 0, 0, request_size)

    /* Update the last accessed date.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_last_accessed_date =  _fx_system_date;
 800e052:	4b08      	ldr	r3, [pc, #32]	; (800e074 <_fx_file_read+0x544>)
 800e054:	681a      	ldr	r2, [r3, #0]
 800e056:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e058:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    /* Release media protection.  */
    FX_UNPROTECT
 800e05c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e05e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e062:	4618      	mov	r0, r3
 800e064:	f006 f99e 	bl	80143a4 <_tx_mutex_put>

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
 800e068:	2300      	movs	r3, #0
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3798      	adds	r7, #152	; 0x98
 800e06e:	46bd      	mov	sp, r7
 800e070:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e074:	24014c90 	.word	0x24014c90

0800e078 <_fx_file_seek>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef FX_DISABLE_ONE_LINE_FUNCTION
UINT  _fx_file_seek(FX_FILE *file_ptr, ULONG byte_offset)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b082      	sub	sp, #8
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
 800e080:	6039      	str	r1, [r7, #0]

    return(_fx_file_extended_seek(file_ptr, (ULONG64) byte_offset));
 800e082:	6839      	ldr	r1, [r7, #0]
 800e084:	2000      	movs	r0, #0
 800e086:	460a      	mov	r2, r1
 800e088:	4603      	mov	r3, r0
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f7fe fd9e 	bl	800cbcc <_fx_file_extended_seek>
 800e090:	4603      	mov	r3, r0
}
 800e092:	4618      	mov	r0, r3
 800e094:	3708      	adds	r7, #8
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
	...

0800e09c <_fx_file_write>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_file_write(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG size)
{
 800e09c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e0a0:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800e0a4:	af04      	add	r7, sp, #16
 800e0a6:	f8c7 019c 	str.w	r0, [r7, #412]	; 0x19c
 800e0aa:	f8c7 1198 	str.w	r1, [r7, #408]	; 0x198
 800e0ae:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
UCHAR                  dont_use_fat_old = FX_FALSE; /* Used by exFAT logic to indicate whether or not the FAT table should be used. */
#endif /* FX_ENABLE_FAULT_TOLERANT */


    /* First, determine if the file is still open.  */
    if (file_ptr -> fx_file_id != FX_FILE_ID)
 800e0b2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e0b6:	681a      	ldr	r2, [r3, #0]
 800e0b8:	4bd9      	ldr	r3, [pc, #868]	; (800e420 <_fx_file_write+0x384>)
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d002      	beq.n	800e0c4 <_fx_file_write+0x28>
    {

        /* Return the file not open error status.  */
        return(FX_NOT_OPEN);
 800e0be:	2307      	movs	r3, #7
 800e0c0:	f000 bf26 	b.w	800ef10 <_fx_file_write+0xe74>
    }

    /* Setup pointer to media structure.  */
    media_ptr =  file_ptr -> fx_file_media_ptr;
 800e0c4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e0c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0ca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_file_writes++;
 800e0ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e0d2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800e0d6:	1c5a      	adds	r2, r3, #1
 800e0d8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e0dc:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154

#ifdef FX_ENABLE_EXFAT
    if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
        (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL))
#else
    if (file_ptr -> fx_file_current_file_offset + size > 0xFFFFFFFFULL)
 800e0e0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e0e4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800e0e8:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 800e0ec:	2000      	movs	r0, #0
 800e0ee:	460c      	mov	r4, r1
 800e0f0:	4605      	mov	r5, r0
 800e0f2:	eb12 0804 	adds.w	r8, r2, r4
 800e0f6:	eb43 0905 	adc.w	r9, r3, r5
 800e0fa:	f1b9 0f01 	cmp.w	r9, #1
 800e0fe:	d302      	bcc.n	800e106 <_fx_file_write+0x6a>
#endif /* FX_ENABLE_EXFAT */
    {

        /* Return the no more space error, since the new file size would be larger than
           the 32-bit field to represent it in the file's directory entry.  */
        return(FX_NO_MORE_SPACE);
 800e100:	230a      	movs	r3, #10
 800e102:	f000 bf05 	b.w	800ef10 <_fx_file_write+0xe74>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_FILE_WRITE, file_ptr, buffer_ptr, size, 0, FX_TRACE_FILE_EVENTS, &trace_event, &trace_timestamp)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800e106:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e10a:	681a      	ldr	r2, [r3, #0]
 800e10c:	4bc5      	ldr	r3, [pc, #788]	; (800e424 <_fx_file_write+0x388>)
 800e10e:	429a      	cmp	r2, r3
 800e110:	d002      	beq.n	800e118 <_fx_file_write+0x7c>
 800e112:	2311      	movs	r3, #17
 800e114:	f000 befc 	b.w	800ef10 <_fx_file_write+0xe74>
 800e118:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e11c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e120:	f04f 31ff 	mov.w	r1, #4294967295
 800e124:	4618      	mov	r0, r3
 800e126:	f005 fec5 	bl	8013eb4 <_tx_mutex_get>
 800e12a:	4603      	mov	r3, r0
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d002      	beq.n	800e136 <_fx_file_write+0x9a>
 800e130:	2311      	movs	r3, #17
 800e132:	f000 beed 	b.w	800ef10 <_fx_file_write+0xe74>

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 800e136:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e13a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d009      	beq.n	800e156 <_fx_file_write+0xba>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800e142:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e146:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e14a:	4618      	mov	r0, r3
 800e14c:	f006 f92a 	bl	80143a4 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 800e150:	2323      	movs	r3, #35	; 0x23
 800e152:	f000 bedd 	b.w	800ef10 <_fx_file_write+0xe74>
    }

    /* Make sure this file is open for writing.  */
    if (file_ptr -> fx_file_open_mode != FX_OPEN_FOR_WRITE)
 800e156:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e15a:	689b      	ldr	r3, [r3, #8]
 800e15c:	2b01      	cmp	r3, #1
 800e15e:	d009      	beq.n	800e174 <_fx_file_write+0xd8>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800e160:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e164:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e168:	4618      	mov	r0, r3
 800e16a:	f006 f91b 	bl	80143a4 <_tx_mutex_put>

        /* Return the access error exception - a write was attempted from
           a file opened for reading!  */
        return(FX_ACCESS_ERROR);
 800e16e:	2306      	movs	r3, #6
 800e170:	f000 bece 	b.w	800ef10 <_fx_file_write+0xe74>
    /* Start transaction. */
    _fx_fault_tolerant_transaction_start(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Calculate the number of bytes per cluster.  */
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800e174:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e178:	6a9a      	ldr	r2, [r3, #40]	; 0x28
        ((ULONG)media_ptr -> fx_media_sectors_per_cluster);
 800e17a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e17e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    bytes_per_cluster =  ((ULONG)media_ptr -> fx_media_bytes_per_sector) *
 800e180:	fb02 f303 	mul.w	r3, r2, r3
 800e184:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

    /* Check for invalid value.  */
    if (bytes_per_cluster == 0)
 800e188:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d109      	bne.n	800e1a4 <_fx_file_write+0x108>
#ifdef FX_ENABLE_FAULT_TOLERANT
        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Release media protection.  */
        FX_UNPROTECT
 800e190:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e194:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e198:	4618      	mov	r0, r3
 800e19a:	f006 f903 	bl	80143a4 <_tx_mutex_put>

        /* Invalid media, return error.  */
        return(FX_MEDIA_INVALID);
 800e19e:	2302      	movs	r3, #2
 800e1a0:	f000 beb6 	b.w	800ef10 <_fx_file_write+0xe74>
    }

    /* Initialized first new cluster. */
    first_new_cluster =  0;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Next, determine if there is enough room to write the specified number of
       bytes to the clusters already allocated to this file.  */
    if (((file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset) < size)
 800e1aa:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e1ae:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800e1b2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e1b6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800e1ba:	ebb0 0a02 	subs.w	sl, r0, r2
 800e1be:	eb61 0b03 	sbc.w	fp, r1, r3
 800e1c2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800e1cc:	f8c7 215c 	str.w	r2, [r7, #348]	; 0x15c
 800e1d0:	e9d7 1256 	ldrd	r1, r2, [r7, #344]	; 0x158
 800e1d4:	460b      	mov	r3, r1
 800e1d6:	459a      	cmp	sl, r3
 800e1d8:	4613      	mov	r3, r2
 800e1da:	eb7b 0303 	sbcs.w	r3, fp, r3
 800e1de:	f080 82a9 	bcs.w	800e734 <_fx_file_write+0x698>

        if (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset < size)
        {
#endif /* FX_ENABLE_FAULT_TOLERANT */
            /* Calculate clusters that are needed for data append except ones overwritten. */
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 800e1e2:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 800e1e6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800e1ea:	4413      	add	r3, r2
 800e1ec:	3b01      	subs	r3, #1
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800e1f4:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
                                (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset)) /
 800e1f8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e1fc:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800e200:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e204:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 800e208:	1a84      	subs	r4, r0, r2
 800e20a:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 800e20e:	eb61 0303 	sbc.w	r3, r1, r3
 800e212:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800e216:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 800e21a:	4623      	mov	r3, r4
 800e21c:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	; 0x148
 800e220:	4602      	mov	r2, r0
 800e222:	189b      	adds	r3, r3, r2
 800e224:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800e228:	460b      	mov	r3, r1
 800e22a:	462a      	mov	r2, r5
 800e22c:	eb42 0303 	adc.w	r3, r2, r3
 800e230:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
                                (file_ptr -> fx_file_current_available_size - file_ptr -> fx_file_current_file_offset)) /
 800e234:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800e238:	2200      	movs	r2, #0
 800e23a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800e23e:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800e242:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 800e246:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800e24a:	f7f2 f9b9 	bl	80005c0 <__aeabi_uldivmod>
 800e24e:	4602      	mov	r2, r0
 800e250:	460b      	mov	r3, r1
            clusters =  (UINT)((size + (bytes_per_cluster - 1) -
 800e252:	4613      	mov	r3, r2
 800e254:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

        /* Determine if we have enough space left.  */
#ifdef FX_ENABLE_FAULT_TOLERANT
        if (clusters + replace_clusters > media_ptr -> fx_media_available_clusters)
#else
        if (clusters > media_ptr -> fx_media_available_clusters)
 800e258:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e25c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800e25e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800e262:	4293      	cmp	r3, r2
 800e264:	d909      	bls.n	800e27a <_fx_file_write+0x1de>
#ifdef FX_ENABLE_FAULT_TOLERANT
            FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Release media protection.  */
            FX_UNPROTECT
 800e266:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e26a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e26e:	4618      	mov	r0, r3
 800e270:	f006 f898 	bl	80143a4 <_tx_mutex_put>

            /* Out of disk space.  */
            return(FX_NO_MORE_SPACE);
 800e274:	230a      	movs	r3, #10
 800e276:	f000 be4b 	b.w	800ef10 <_fx_file_write+0xe74>
        }

        /* Update the file total cluster count.  */
        file_ptr -> fx_file_total_clusters =  file_ptr -> fx_file_total_clusters + clusters;
 800e27a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e27e:	691a      	ldr	r2, [r3, #16]
 800e280:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800e284:	441a      	add	r2, r3
 800e286:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e28a:	611a      	str	r2, [r3, #16]
        /* Check for wrap-around when updating the available size.  */
#ifdef FX_ENABLE_EXFAT
        if ((media_ptr -> fx_media_FAT_type != FX_exFAT) &&
            (file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters > 0xFFFFFFFFULL))
#else
        if (file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters > 0xFFFFFFFFULL)
 800e28c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e290:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800e294:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800e298:	2200      	movs	r2, #0
 800e29a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800e29e:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800e2a2:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800e2ac:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800e2b0:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 800e2b4:	464b      	mov	r3, r9
 800e2b6:	e9d7 ab4a 	ldrd	sl, fp, [r7, #296]	; 0x128
 800e2ba:	4652      	mov	r2, sl
 800e2bc:	fb02 f203 	mul.w	r2, r2, r3
 800e2c0:	465b      	mov	r3, fp
 800e2c2:	4644      	mov	r4, r8
 800e2c4:	fb04 f303 	mul.w	r3, r4, r3
 800e2c8:	4413      	add	r3, r2
 800e2ca:	4642      	mov	r2, r8
 800e2cc:	4654      	mov	r4, sl
 800e2ce:	fba2 4204 	umull	r4, r2, r2, r4
 800e2d2:	f8c7 218c 	str.w	r2, [r7, #396]	; 0x18c
 800e2d6:	4622      	mov	r2, r4
 800e2d8:	f8c7 2188 	str.w	r2, [r7, #392]	; 0x188
 800e2dc:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800e2e0:	4413      	add	r3, r2
 800e2e2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800e2e6:	e9d7 4562 	ldrd	r4, r5, [r7, #392]	; 0x188
 800e2ea:	4623      	mov	r3, r4
 800e2ec:	18c3      	adds	r3, r0, r3
 800e2ee:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800e2f2:	462b      	mov	r3, r5
 800e2f4:	eb41 0303 	adc.w	r3, r1, r3
 800e2f8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800e2fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800e300:	2b01      	cmp	r3, #1
 800e302:	d308      	bcc.n	800e316 <_fx_file_write+0x27a>
#endif /* FX_ENABLE_EXFAT */
        {

            /* 32-bit wrap around condition is present.  Just set the available file size to all ones, which is
               the maximum file size.  */
            file_ptr -> fx_file_current_available_size =  0xFFFFFFFFULL;
 800e304:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800e308:	f04f 32ff 	mov.w	r2, #4294967295
 800e30c:	f04f 0300 	mov.w	r3, #0
 800e310:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800e314:	e03d      	b.n	800e392 <_fx_file_write+0x2f6>
        else
        {

            /* Normal condition, update the available size.  */
            file_ptr -> fx_file_current_available_size =
                file_ptr -> fx_file_current_available_size + (ULONG64)bytes_per_cluster * (ULONG64)clusters;
 800e316:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e31a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800e31e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800e322:	2200      	movs	r2, #0
 800e324:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800e328:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800e32c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800e330:	2200      	movs	r2, #0
 800e332:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800e336:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
 800e33a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 800e33e:	464b      	mov	r3, r9
 800e340:	e9d7 ab44 	ldrd	sl, fp, [r7, #272]	; 0x110
 800e344:	4652      	mov	r2, sl
 800e346:	fb02 f203 	mul.w	r2, r2, r3
 800e34a:	465b      	mov	r3, fp
 800e34c:	4644      	mov	r4, r8
 800e34e:	fb04 f303 	mul.w	r3, r4, r3
 800e352:	4413      	add	r3, r2
 800e354:	4642      	mov	r2, r8
 800e356:	4654      	mov	r4, sl
 800e358:	fba2 4204 	umull	r4, r2, r2, r4
 800e35c:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 800e360:	4622      	mov	r2, r4
 800e362:	f8c7 2180 	str.w	r2, [r7, #384]	; 0x180
 800e366:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800e36a:	4413      	add	r3, r2
 800e36c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800e370:	e9d7 4560 	ldrd	r4, r5, [r7, #384]	; 0x180
 800e374:	4623      	mov	r3, r4
 800e376:	18c3      	adds	r3, r0, r3
 800e378:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800e37c:	462b      	mov	r3, r5
 800e37e:	eb41 0303 	adc.w	r3, r1, r3
 800e382:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
            file_ptr -> fx_file_current_available_size =
 800e386:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e38a:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800e38e:	e9c3 1214 	strd	r1, r2, [r3, #80]	; 0x50
        /* Account for newly allocated clusters. */
        clusters += replace_clusters;
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Decrease the available clusters in the media control block. */
        media_ptr -> fx_media_available_clusters =  media_ptr -> fx_media_available_clusters - clusters;
 800e392:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e396:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800e398:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800e39c:	1ad2      	subs	r2, r2, r3
 800e39e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e3a2:	67da      	str	r2, [r3, #124]	; 0x7c
            dont_use_fat_old = (UCHAR)file_ptr -> fx_file_dir_entry.fx_dir_entry_dont_use_fat;
        }
#endif /* FX_ENABLE_EXFAT && FX_ENABLE_FAULT_TOLERANT */

        /* Search for the additional clusters we need.  */
        total_clusters =     media_ptr -> fx_media_total_clusters;
 800e3a4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e3a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e3aa:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
#endif /* FX_ENABLE_EXFAT */
        }
        else
#endif /* FX_ENABLE_FAULT_TOLERANT */
        {
            last_cluster =   file_ptr -> fx_file_last_physical_cluster;
 800e3ae:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e3b2:	69db      	ldr	r3, [r3, #28]
 800e3b4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
        }

        FAT_index    =       media_ptr -> fx_media_cluster_search_start;
 800e3b8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e3bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e3c0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

        /* Loop to find the needed clusters.  */
        while (clusters)
 800e3c4:	e16f      	b.n	800e6a6 <_fx_file_write+0x60a>
        {

            /* Decrease the cluster count.  */
            clusters--;
 800e3c6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800e3ca:	3b01      	subs	r3, #1
 800e3cc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
                /* Loop to find the first available cluster.  */
                do
                {

                    /* Make sure we stop looking after one pass through the FAT table.  */
                    if (!total_clusters)
 800e3d0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d109      	bne.n	800e3ec <_fx_file_write+0x350>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 800e3d8:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e3dc:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f005 ffdf 	bl	80143a4 <_tx_mutex_put>

                        /* Something is wrong with the media - the desired clusters were
                           not found in the FAT table.  */
                        return(FX_NO_MORE_SPACE);
 800e3e6:	230a      	movs	r3, #10
 800e3e8:	f000 bd92 	b.w	800ef10 <_fx_file_write+0xe74>
                    }

                    /* Read FAT entry.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr, FAT_index, &FAT_value);
 800e3ec:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800e3f0:	461a      	mov	r2, r3
 800e3f2:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 800e3f6:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800e3fa:	f002 fb19 	bl	8010a30 <_fx_utility_FAT_entry_read>
 800e3fe:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec

                    /* Check for a bad status.  */
                    if (status != FX_SUCCESS)
 800e402:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e406:	2b00      	cmp	r3, #0
 800e408:	d00e      	beq.n	800e428 <_fx_file_write+0x38c>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 800e40a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e40e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e412:	4618      	mov	r0, r3
 800e414:	f005 ffc6 	bl	80143a4 <_tx_mutex_put>

                        /* Return the bad status.  */
                        return(status);
 800e418:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e41c:	f000 bd78 	b.w	800ef10 <_fx_file_write+0xe74>
 800e420:	46494c45 	.word	0x46494c45
 800e424:	4d454449 	.word	0x4d454449
                    }

                    /* Decrement the total cluster count.  */
                    total_clusters--;
 800e428:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800e42c:	3b01      	subs	r3, #1
 800e42e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc

                    /* Determine if the FAT entry is free.  */
                    if (FAT_value == FX_FREE_CLUSTER)
 800e432:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800e436:	2b00      	cmp	r3, #0
 800e438:	d116      	bne.n	800e468 <_fx_file_write+0x3cc>
                    {

                        /* Move cluster search pointer forward.  */
                        media_ptr -> fx_media_cluster_search_start =  FAT_index + 1;
 800e43a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800e43e:	1c5a      	adds	r2, r3, #1
 800e440:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e444:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                        /* Determine if this needs to be wrapped.  */
                        if (media_ptr -> fx_media_cluster_search_start >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800e448:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e44c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800e450:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e456:	3302      	adds	r3, #2
 800e458:	429a      	cmp	r2, r3
 800e45a:	d316      	bcc.n	800e48a <_fx_file_write+0x3ee>
                        {

                            /* Wrap the search to the beginning FAT entry.  */
                            media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 800e45c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 800e460:	2302      	movs	r3, #2
 800e462:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
                        }

                        /* Break this loop.  */
                        break;
 800e466:	e010      	b.n	800e48a <_fx_file_write+0x3ee>
                    }
                    else
                    {

                        /* FAT entry is not free... Advance the FAT index.  */
                        FAT_index++;
 800e468:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800e46c:	3301      	adds	r3, #1
 800e46e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4

                        /* Determine if we need to wrap the FAT index around.  */
                        if (FAT_index >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800e472:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e478:	1c9a      	adds	r2, r3, #2
 800e47a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800e47e:	4293      	cmp	r3, r2
 800e480:	d3a6      	bcc.n	800e3d0 <_fx_file_write+0x334>
                        {

                            /* Wrap the search to the beginning FAT entry.  */
                            FAT_index =  FX_FAT_ENTRY_START;
 800e482:	2302      	movs	r3, #2
 800e484:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
                    if (!total_clusters)
 800e488:	e7a2      	b.n	800e3d0 <_fx_file_write+0x334>
                        break;
 800e48a:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Determine if we have found the first new cluster yet.  */
            if (first_new_cluster == 0)
 800e48c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800e490:	2b00      	cmp	r3, #0
 800e492:	d103      	bne.n	800e49c <_fx_file_write+0x400>
            {

                /* Remember the first new cluster. */
                first_new_cluster =  FAT_index;
 800e494:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800e498:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
#endif /* FX_ENABLE_FAULT_TOLERANT */
            }

            /* Make a quick check to see if an empty, cluster-less file
               is being written to for the first time.  */
            if (last_cluster)
 800e49c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	f000 808f 	beq.w	800e5c4 <_fx_file_write+0x528>
            {

                /* Check for the file's cluster.  We won't perform this link until the
                   entire FAT chain is built.  */
                if (last_cluster != file_ptr -> fx_file_last_physical_cluster)
 800e4a6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e4aa:	69da      	ldr	r2, [r3, #28]
 800e4ac:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	d009      	beq.n	800e4c8 <_fx_file_write+0x42c>
                    {
#endif /* FX_ENABLE_EXFAT */

                        /* Normal condition - link the last cluster with the new
                           found cluster.  */
                        status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, FAT_index);
 800e4b4:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 800e4b8:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 800e4bc:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800e4c0:	f002 fcdf 	bl	8010e82 <_fx_utility_FAT_entry_write>
 800e4c4:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
                    }
#endif /* FX_ENABLE_EXFAT */
                }

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 800e4c8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d00a      	beq.n	800e4e6 <_fx_file_write+0x44a>
#ifdef FX_ENABLE_FAULT_TOLERANT
                    FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Release media protection.  */
                    FX_UNPROTECT
 800e4d0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e4d4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f005 ff63 	bl	80143a4 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(status);
 800e4de:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e4e2:	f000 bd15 	b.w	800ef10 <_fx_file_write+0xe74>
                }

                /* Determine if we are adding a sector after a write filled the previously
                   allocated cluster exactly.  */
                if ((file_ptr -> fx_file_current_relative_sector >=
 800e4e6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e4ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 800e4ec:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e4f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e4f2:	3b01      	subs	r3, #1
                if ((file_ptr -> fx_file_current_relative_sector >=
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	f0c0 80cc 	bcc.w	800e692 <_fx_file_write+0x5f6>
                    (file_ptr -> fx_file_current_logical_offset >=
 800e4fa:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e4fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                     media_ptr -> fx_media_bytes_per_sector))
 800e500:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     (media_ptr -> fx_media_sectors_per_cluster - 1)) &&
 800e506:	429a      	cmp	r2, r3
 800e508:	f0c0 80c3 	bcc.w	800e692 <_fx_file_write+0x5f6>
                {

                    /* Yes, we need to adjust all of the pertinent file parameters for
                       writing into this newly allocated cluster.  */
                    file_ptr -> fx_file_current_physical_cluster =  FAT_index;
 800e50c:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800e510:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800e514:	6213      	str	r3, [r2, #32]
                    file_ptr -> fx_file_current_relative_cluster++;
 800e516:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e51a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e51c:	1c5a      	adds	r2, r3, #1
 800e51e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e522:	635a      	str	r2, [r3, #52]	; 0x34
                    file_ptr -> fx_file_current_relative_sector =   0;
 800e524:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800e528:	2300      	movs	r3, #0
 800e52a:	6393      	str	r3, [r2, #56]	; 0x38
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800e52c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e532:	2200      	movs	r2, #0
 800e534:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800e538:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
                        (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 800e53c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800e540:	3b02      	subs	r3, #2
 800e542:	2200      	movs	r2, #0
 800e544:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e548:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
                         ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800e54c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e552:	2200      	movs	r2, #0
 800e554:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800e558:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
                        (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 800e55c:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 800e560:	462b      	mov	r3, r5
 800e562:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800e566:	4642      	mov	r2, r8
 800e568:	fb02 f203 	mul.w	r2, r2, r3
 800e56c:	464b      	mov	r3, r9
 800e56e:	4621      	mov	r1, r4
 800e570:	fb01 f303 	mul.w	r3, r1, r3
 800e574:	4413      	add	r3, r2
 800e576:	4622      	mov	r2, r4
 800e578:	4641      	mov	r1, r8
 800e57a:	fba2 1201 	umull	r1, r2, r2, r1
 800e57e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800e582:	460a      	mov	r2, r1
 800e584:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800e588:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800e58c:	4413      	add	r3, r2
 800e58e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
                    file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800e592:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 800e596:	4623      	mov	r3, r4
 800e598:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	; 0x178
 800e59c:	4602      	mov	r2, r0
 800e59e:	189b      	adds	r3, r3, r2
 800e5a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e5a4:	462b      	mov	r3, r5
 800e5a6:	460a      	mov	r2, r1
 800e5a8:	4153      	adcs	r3, r2
 800e5aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800e5ae:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e5b2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800e5b6:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                    file_ptr -> fx_file_current_logical_offset =    0;
 800e5ba:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800e5be:	2300      	movs	r3, #0
 800e5c0:	6313      	str	r3, [r2, #48]	; 0x30
 800e5c2:	e066      	b.n	800e692 <_fx_file_write+0x5f6>
            {

                /* This is the first cluster allocated for the file.  Just
                   remember it as being the first and setup the other file
                   pointers accordingly.  */
                file_ptr -> fx_file_first_physical_cluster =    FAT_index;
 800e5c4:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800e5c8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800e5cc:	6153      	str	r3, [r2, #20]
                file_ptr -> fx_file_current_physical_cluster =  FAT_index;
 800e5ce:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800e5d2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800e5d6:	6213      	str	r3, [r2, #32]
                file_ptr -> fx_file_current_relative_cluster =  0;
 800e5d8:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800e5dc:	2300      	movs	r3, #0
 800e5de:	6353      	str	r3, [r2, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800e5e0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e5e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e5ec:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
                    (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 800e5f0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800e5f4:	3b02      	subs	r3, #2
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e5fc:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800e600:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e606:	2200      	movs	r2, #0
 800e608:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e60c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
                    (((ULONG64)(FAT_index - FX_FAT_ENTRY_START)) *
 800e610:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800e614:	462b      	mov	r3, r5
 800e616:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800e61a:	4642      	mov	r2, r8
 800e61c:	fb02 f203 	mul.w	r2, r2, r3
 800e620:	464b      	mov	r3, r9
 800e622:	4621      	mov	r1, r4
 800e624:	fb01 f303 	mul.w	r3, r1, r3
 800e628:	4413      	add	r3, r2
 800e62a:	4622      	mov	r2, r4
 800e62c:	4641      	mov	r1, r8
 800e62e:	fba2 1201 	umull	r1, r2, r2, r1
 800e632:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 800e636:	460a      	mov	r2, r1
 800e638:	f8c7 2170 	str.w	r2, [r7, #368]	; 0x170
 800e63c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800e640:	4413      	add	r3, r2
 800e642:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
                file_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800e646:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 800e64a:	4623      	mov	r3, r4
 800e64c:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800e650:	4602      	mov	r2, r0
 800e652:	189b      	adds	r3, r3, r2
 800e654:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e658:	462b      	mov	r3, r5
 800e65a:	460a      	mov	r2, r1
 800e65c:	4153      	adcs	r3, r2
 800e65e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e662:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e666:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800e66a:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
#ifdef FX_ENABLE_FAULT_TOLERANT
                if (file_ptr -> fx_file_last_physical_cluster == 0)
#endif /* FX_ENABLE_FAULT_TOLERANT */
                {
                    file_ptr -> fx_file_current_logical_offset =    0;
 800e66e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800e672:	2300      	movs	r3, #0
 800e674:	6313      	str	r3, [r2, #48]	; 0x30
                    file_ptr -> fx_file_current_file_offset =       0;
 800e676:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800e67a:	f04f 0200 	mov.w	r2, #0
 800e67e:	f04f 0300 	mov.w	r3, #0
 800e682:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
                }

                /* Also remember this as the first cluster in the directory
                   entry.  */
                file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =  FAT_index;
 800e686:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800e68a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800e68e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
                }
            }
#endif /* FX_ENABLE_EXFAT */

            /* Otherwise, remember the new FAT index as the last.  */
            last_cluster =  FAT_index;
 800e692:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800e696:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc

            /* Move to the next FAT entry.  */
            FAT_index =  media_ptr -> fx_media_cluster_search_start;
 800e69a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e69e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e6a2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
        while (clusters)
 800e6a6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	f47f ae8b 	bne.w	800e3c6 <_fx_file_write+0x32a>
            else
#endif /* FX_ENABLE_FAULT_TOLERANT */
            {

                /* Place an end-of-file marker on the last cluster.  */
                status = _fx_utility_FAT_entry_write(media_ptr, last_cluster, media_ptr -> fx_media_fat_last);
 800e6b0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e6b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e6b8:	f8d3 34ac 	ldr.w	r3, [r3, #1196]	; 0x4ac
 800e6bc:	461a      	mov	r2, r3
 800e6be:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 800e6c2:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800e6c6:	f002 fbdc 	bl	8010e82 <_fx_utility_FAT_entry_write>
 800e6ca:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
            }

            /* Check for a bad FAT write status.  */
            if (status !=  FX_SUCCESS)
 800e6ce:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d00a      	beq.n	800e6ec <_fx_file_write+0x650>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 800e6d6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e6da:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f005 fe60 	bl	80143a4 <_tx_mutex_put>

                /* Return the bad status.  */
                return(status);
 800e6e4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e6e8:	f000 bc12 	b.w	800ef10 <_fx_file_write+0xe74>
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Determine if the file already had clusters.  */
        if (file_ptr -> fx_file_last_physical_cluster)
 800e6ec:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e6f0:	69db      	ldr	r3, [r3, #28]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d019      	beq.n	800e72a <_fx_file_write+0x68e>
                         ((replace_clusters == 0) && (first_new_cluster)))
                {
                    status = _fx_utility_FAT_entry_write(media_ptr, file_ptr -> fx_file_last_physical_cluster, first_new_cluster);
                }
#else
                status = _fx_utility_FAT_entry_write(media_ptr, file_ptr -> fx_file_last_physical_cluster, first_new_cluster);
 800e6f6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e6fa:	69db      	ldr	r3, [r3, #28]
 800e6fc:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 800e700:	4619      	mov	r1, r3
 800e702:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800e706:	f002 fbbc 	bl	8010e82 <_fx_utility_FAT_entry_write>
 800e70a:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Check for a bad FAT write status.  */
                if (status !=  FX_SUCCESS)
 800e70e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e712:	2b00      	cmp	r3, #0
 800e714:	d009      	beq.n	800e72a <_fx_file_write+0x68e>
#ifdef FX_ENABLE_FAULT_TOLERANT
                    FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Release media protection.  */
                    FX_UNPROTECT
 800e716:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e71a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e71e:	4618      	mov	r0, r3
 800e720:	f005 fe40 	bl	80143a4 <_tx_mutex_put>

                    /* Return the bad status.  */
                    return(status);
 800e724:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e728:	e3f2      	b.n	800ef10 <_fx_file_write+0xe74>
        else
#endif /* FX_ENABLE_FAULT_TOLERANT */
        {

            /* Update the file control block with the last physical cluster.  */
            file_ptr -> fx_file_last_physical_cluster =  last_cluster;
 800e72a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800e72e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800e732:	61d3      	str	r3, [r2, #28]
        }
    }

    /* Check for a need to increment to the next sector within a previously
       allocated cluster.  */
    if (file_ptr -> fx_file_current_logical_offset >=
 800e734:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e738:	6b1a      	ldr	r2, [r3, #48]	; 0x30
        media_ptr -> fx_media_bytes_per_sector)
 800e73a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e73e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    if (file_ptr -> fx_file_current_logical_offset >=
 800e740:	429a      	cmp	r2, r3
 800e742:	d31b      	bcc.n	800e77c <_fx_file_write+0x6e0>
    {

        /* Update the sector specific file parameters to start at the
           next logical sector.  */
        file_ptr -> fx_file_current_logical_sector++;
 800e744:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e748:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800e74c:	1c51      	adds	r1, r2, #1
 800e74e:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800e752:	f143 0300 	adc.w	r3, r3, #0
 800e756:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e75a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e75e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e762:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
        file_ptr -> fx_file_current_relative_sector++;
 800e766:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e76c:	1c5a      	adds	r2, r3, #1
 800e76e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e772:	639a      	str	r2, [r3, #56]	; 0x38
        file_ptr -> fx_file_current_logical_offset =  0;
 800e774:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800e778:	2300      	movs	r3, #0
 800e77a:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* At this point there is enough room to perform the file write operation.  */

    /* Setup local buffer pointer.  */
    source_ptr =  (UCHAR *)buffer_ptr;
 800e77c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800e780:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

    /* Setup the remaining number of bytes to write.  */
    bytes_remaining =  size;
 800e784:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800e788:	2200      	movs	r2, #0
 800e78a:	613b      	str	r3, [r7, #16]
 800e78c:	617a      	str	r2, [r7, #20]
 800e78e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800e792:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0
        }
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Loop to write all of the bytes.  */
    while (bytes_remaining)
 800e796:	e290      	b.n	800ecba <_fx_file_write+0xc1e>
    {

        /* Determine if a beginning or ending partial write is required.  */
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800e798:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d111      	bne.n	800e7c6 <_fx_file_write+0x72a>
            (bytes_remaining < media_ptr -> fx_media_bytes_per_sector))
 800e7a2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7a8:	2200      	movs	r2, #0
 800e7aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e7ae:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
        if ((file_ptr -> fx_file_current_logical_offset) ||
 800e7b2:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800e7b6:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 800e7ba:	4621      	mov	r1, r4
 800e7bc:	428a      	cmp	r2, r1
 800e7be:	4629      	mov	r1, r5
 800e7c0:	418b      	sbcs	r3, r1
 800e7c2:	f080 8096 	bcs.w	800e8f2 <_fx_file_write+0x856>
                }
            }
            else
#endif /* FX_ENABLE_FAULT_TOLERANT */
            {
                status =  _fx_utility_logical_sector_read(media_ptr,
 800e7c6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e7ca:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                          file_ptr -> fx_file_current_logical_sector,
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800e7ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e7d2:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr,
 800e7d4:	2304      	movs	r3, #4
 800e7d6:	9302      	str	r3, [sp, #8]
 800e7d8:	2301      	movs	r3, #1
 800e7da:	9301      	str	r3, [sp, #4]
 800e7dc:	9200      	str	r2, [sp, #0]
 800e7de:	4602      	mov	r2, r0
 800e7e0:	460b      	mov	r3, r1
 800e7e2:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800e7e6:	f003 fd31 	bl	801224c <_fx_utility_logical_sector_read>
 800e7ea:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
            }

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800e7ee:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d009      	beq.n	800e80a <_fx_file_write+0x76e>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 800e7f6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e7fa:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e7fe:	4618      	mov	r0, r3
 800e800:	f005 fdd0 	bl	80143a4 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800e804:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e808:	e382      	b.n	800ef10 <_fx_file_write+0xe74>
            }

            /* Copy the appropriate number of bytes into the destination buffer.  */
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800e80a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e80e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_logical_offset;
 800e810:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            copy_bytes =  media_ptr -> fx_media_bytes_per_sector -
 800e816:	1ad3      	subs	r3, r2, r3
 800e818:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

            /* Check to see if only a portion of the sector needs to be
               copied.  */
            if (copy_bytes > bytes_remaining)
 800e81c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800e820:	2200      	movs	r2, #0
 800e822:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e826:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 800e82a:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800e82e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 800e832:	4621      	mov	r1, r4
 800e834:	428a      	cmp	r2, r1
 800e836:	4629      	mov	r1, r5
 800e838:	418b      	sbcs	r3, r1
 800e83a:	d203      	bcs.n	800e844 <_fx_file_write+0x7a8>
            {

                /* Adjust the number of bytes to copy.  */
                copy_bytes =  (ULONG)bytes_remaining;
 800e83c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 800e840:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
            }

            /* Actually perform the memory copy.  */
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +  /* Use case of memcpy is verified. */
 800e844:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e848:	689a      	ldr	r2, [r3, #8]
                                    file_ptr -> fx_file_current_logical_offset,
 800e84a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e84e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            _fx_utility_memory_copy(source_ptr, ((UCHAR *)media_ptr -> fx_media_memory_buffer) +  /* Use case of memcpy is verified. */
 800e850:	4413      	add	r3, r2
 800e852:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800e856:	4619      	mov	r1, r3
 800e858:	f8d7 01d4 	ldr.w	r0, [r7, #468]	; 0x1d4
 800e85c:	f004 f8f2 	bl	8012a44 <_fx_utility_memory_copy>
                                    copy_bytes);

            /* Write back the current logical sector.  */
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800e860:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e864:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DATA_SECTOR);
 800e868:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e86c:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800e86e:	2304      	movs	r3, #4
 800e870:	9302      	str	r3, [sp, #8]
 800e872:	2301      	movs	r3, #1
 800e874:	9301      	str	r3, [sp, #4]
 800e876:	9200      	str	r2, [sp, #0]
 800e878:	4602      	mov	r2, r0
 800e87a:	460b      	mov	r3, r1
 800e87c:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800e880:	f003 ff78 	bl	8012774 <_fx_utility_logical_sector_write>
 800e884:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800e888:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d009      	beq.n	800e8a4 <_fx_file_write+0x808>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 800e890:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e894:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e898:	4618      	mov	r0, r3
 800e89a:	f005 fd83 	bl	80143a4 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800e89e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e8a2:	e335      	b.n	800ef10 <_fx_file_write+0xe74>
            }


            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                file_ptr -> fx_file_current_logical_offset + copy_bytes;
 800e8a4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e8a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e8aa:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800e8ae:	441a      	add	r2, r3
            file_ptr -> fx_file_current_logical_offset =
 800e8b0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e8b4:	631a      	str	r2, [r3, #48]	; 0x30

            /* Adjust the remaining bytes to read.  */
            bytes_remaining =  bytes_remaining - copy_bytes;
 800e8b6:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e8c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800e8c4:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800e8c8:	e9d7 452a 	ldrd	r4, r5, [r7, #168]	; 0xa8
 800e8cc:	4621      	mov	r1, r4
 800e8ce:	1a51      	subs	r1, r2, r1
 800e8d0:	60b9      	str	r1, [r7, #8]
 800e8d2:	4629      	mov	r1, r5
 800e8d4:	eb63 0301 	sbc.w	r3, r3, r1
 800e8d8:	60fb      	str	r3, [r7, #12]
 800e8da:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800e8de:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0

            /* Adjust the pointer to the source buffer.  */
            source_ptr =  source_ptr + copy_bytes;
 800e8e2:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800e8e6:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 800e8ea:	4413      	add	r3, r2
 800e8ec:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800e8f0:	e10d      	b.n	800eb0e <_fx_file_write+0xa72>
        {

            /* Attempt to write multiple sectors directly to the media.  */

            /* Calculate the number of whole sectors to write.  */
            sectors =  (UINT)(bytes_remaining / media_ptr -> fx_media_bytes_per_sector);
 800e8f2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e8f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e8fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e902:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800e906:	e9d7 0178 	ldrd	r0, r1, [r7, #480]	; 0x1e0
 800e90a:	f7f1 fe59 	bl	80005c0 <__aeabi_uldivmod>
 800e90e:	4602      	mov	r2, r0
 800e910:	460b      	mov	r3, r1
 800e912:	4613      	mov	r3, r2
 800e914:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

            next_cluster = cluster = file_ptr -> fx_file_current_physical_cluster;
 800e918:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e91c:	6a1b      	ldr	r3, [r3, #32]
 800e91e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800e922:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800e926:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800e92a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e92e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800e930:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800e936:	1ad3      	subs	r3, r2, r3
 800e938:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800e93c:	e03f      	b.n	800e9be <_fx_file_write+0x922>
                    cluster++;
                }
                else
                {
#endif /* FX_ENABLE_EXFAT */
                    status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800e93e:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800e942:	461a      	mov	r2, r3
 800e944:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 800e948:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800e94c:	f002 f870 	bl	8010a30 <_fx_utility_FAT_entry_read>
 800e950:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800e954:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d10d      	bne.n	800e978 <_fx_file_write+0x8dc>
 800e95c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e960:	2b01      	cmp	r3, #1
 800e962:	d909      	bls.n	800e978 <_fx_file_write+0x8dc>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800e964:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e968:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e96c:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800e970:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800e974:	429a      	cmp	r2, r3
 800e976:	d20f      	bcs.n	800e998 <_fx_file_write+0x8fc>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 800e978:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e97c:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800e980:	4618      	mov	r0, r3
 800e982:	f005 fd0f 	bl	80143a4 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800e986:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d002      	beq.n	800e994 <_fx_file_write+0x8f8>
                        {
                            return(status);
 800e98e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800e992:	e2bd      	b.n	800ef10 <_fx_file_write+0xe74>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800e994:	2308      	movs	r3, #8
 800e996:	e2bb      	b.n	800ef10 <_fx_file_write+0xe74>
                        }
                    }

                    if (next_cluster != cluster + 1)
 800e998:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800e99c:	1c5a      	adds	r2, r3, #1
 800e99e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e9a2:	429a      	cmp	r2, r3
 800e9a4:	d112      	bne.n	800e9cc <_fx_file_write+0x930>
                    {
                        break;
                    }
                    else
                    {
                        cluster = next_cluster;
 800e9a6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800e9aa:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
                      file_ptr -> fx_file_current_relative_sector); i < sectors; i += media_ptr -> fx_media_sectors_per_cluster)
 800e9ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800e9b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e9b4:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800e9b8:	4413      	add	r3, r2
 800e9ba:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
            for (i = (media_ptr -> fx_media_sectors_per_cluster -
 800e9be:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800e9c2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	d3b9      	bcc.n	800e93e <_fx_file_write+0x8a2>
 800e9ca:	e000      	b.n	800e9ce <_fx_file_write+0x932>
                        break;
 800e9cc:	bf00      	nop
#ifdef FX_ENABLE_EXFAT
                }
#endif /* FX_ENABLE_EXFAT */
            }

            if (i < sectors)
 800e9ce:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800e9d2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e9d6:	429a      	cmp	r2, r3
 800e9d8:	d203      	bcs.n	800e9e2 <_fx_file_write+0x946>
            {
                sectors = i;
 800e9da:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 800e9de:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
            }

            /* Perform the data write directly from the user's buffer of
               the appropriate number of sectors.  */
            status =  _fx_utility_logical_sector_write(media_ptr, file_ptr -> fx_file_current_logical_sector,
 800e9e2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800e9e6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800e9ea:	2304      	movs	r3, #4
 800e9ec:	9302      	str	r3, [sp, #8]
 800e9ee:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800e9f2:	9301      	str	r3, [sp, #4]
 800e9f4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800e9f8:	9300      	str	r3, [sp, #0]
 800e9fa:	4602      	mov	r2, r0
 800e9fc:	460b      	mov	r3, r1
 800e9fe:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800ea02:	f003 feb7 	bl	8012774 <_fx_utility_logical_sector_write>
 800ea06:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
                                                       source_ptr, (ULONG) sectors, FX_DATA_SECTOR);

            /* Check for good completion status.  */
            if (status !=  FX_SUCCESS)
 800ea0a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d009      	beq.n	800ea26 <_fx_file_write+0x98a>
#ifdef FX_ENABLE_FAULT_TOLERANT
                FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Release media protection.  */
                FX_UNPROTECT
 800ea12:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800ea16:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f005 fcc2 	bl	80143a4 <_tx_mutex_put>

                /* Return the error status.  */
                return(status);
 800ea20:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ea24:	e274      	b.n	800ef10 <_fx_file_write+0xe74>

            /* Increment the current logical sector.  Subtract one from
               the sector count because we are going to use the logical
               offset to do additional sector/cluster arithmetic below.  */
            file_ptr -> fx_file_current_logical_sector =
                file_ptr -> fx_file_current_logical_sector +
 800ea26:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ea2a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
                (sectors - 1);
 800ea2e:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800ea32:	3b01      	subs	r3, #1
 800ea34:	2200      	movs	r2, #0
 800ea36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ea3a:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
                file_ptr -> fx_file_current_logical_sector +
 800ea3e:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 800ea42:	4623      	mov	r3, r4
 800ea44:	18c3      	adds	r3, r0, r3
 800ea46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ea4a:	462b      	mov	r3, r5
 800ea4c:	eb41 0303 	adc.w	r3, r1, r3
 800ea50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
            file_ptr -> fx_file_current_logical_sector =
 800ea54:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ea58:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800ea5c:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28

            /* Move the relative cluster and sector as well.  */
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800ea60:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ea64:	6b59      	ldr	r1, [r3, #52]	; 0x34
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800ea66:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ea6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea6c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800ea70:	4413      	add	r3, r2
 800ea72:	1e5a      	subs	r2, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 800ea74:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800ea78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) /
 800ea7a:	fbb2 f3f3 	udiv	r3, r2, r3
            file_ptr -> fx_file_current_relative_cluster = file_ptr -> fx_file_current_relative_cluster +
 800ea7e:	18ca      	adds	r2, r1, r3
 800ea80:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ea84:	635a      	str	r2, [r3, #52]	; 0x34

            file_ptr -> fx_file_current_relative_sector =
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) %
 800ea86:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ea8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ea8c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800ea90:	4413      	add	r3, r2
 800ea92:	1e59      	subs	r1, r3, #1
                media_ptr -> fx_media_sectors_per_cluster;
 800ea94:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800ea98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
                (file_ptr -> fx_file_current_relative_sector + (sectors - 1)) %
 800ea9a:	fbb1 f3f2 	udiv	r3, r1, r2
 800ea9e:	fb02 f303 	mul.w	r3, r2, r3
 800eaa2:	1aca      	subs	r2, r1, r3
            file_ptr -> fx_file_current_relative_sector =
 800eaa4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800eaa8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Increment the logical sector byte offset.  */
            file_ptr -> fx_file_current_logical_offset =
                media_ptr -> fx_media_bytes_per_sector;
 800eaaa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800eaae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
            file_ptr -> fx_file_current_logical_offset =
 800eab0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800eab4:	631a      	str	r2, [r3, #48]	; 0x30

            file_ptr -> fx_file_current_physical_cluster = cluster;
 800eab6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800eaba:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800eabe:	6213      	str	r3, [r2, #32]

            /* Adjust the remaining bytes.  */
            bytes_remaining =  bytes_remaining -
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800eac0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800eac4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eac6:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800eaca:	fb02 f303 	mul.w	r3, r2, r3
 800eace:	2200      	movs	r2, #0
 800ead0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ead4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
            bytes_remaining =  bytes_remaining -
 800ead8:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800eadc:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 800eae0:	4621      	mov	r1, r4
 800eae2:	1a51      	subs	r1, r2, r1
 800eae4:	6039      	str	r1, [r7, #0]
 800eae6:	4629      	mov	r1, r5
 800eae8:	eb63 0301 	sbc.w	r3, r3, r1
 800eaec:	607b      	str	r3, [r7, #4]
 800eaee:	e9d7 3400 	ldrd	r3, r4, [r7]
 800eaf2:	e9c7 3478 	strd	r3, r4, [r7, #480]	; 0x1e0

            /* Adjust the pointer to the source buffer.  */
            source_ptr =  source_ptr +
                (((ULONG)media_ptr -> fx_media_bytes_per_sector) * sectors);
 800eaf6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800eafa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eafc:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 800eb00:	fb03 f202 	mul.w	r2, r3, r2
            source_ptr =  source_ptr +
 800eb04:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800eb08:	4413      	add	r3, r2
 800eb0a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
        }

        /* At this point, we have either written a partial sector or have successfully
           written one or more whole sectors.  Determine if we are at the end of
           the current logical sector.  */
        if (file_ptr -> fx_file_current_logical_offset >=
 800eb0e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800eb12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
            media_ptr -> fx_media_bytes_per_sector)
 800eb14:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800eb18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (file_ptr -> fx_file_current_logical_offset >=
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	f0c0 80cd 	bcc.w	800ecba <_fx_file_write+0xc1e>
        {

            /* Determine if we are at the exact physical end of the file.  */
            if ((bytes_remaining == 0) &&
 800eb20:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800eb24:	4313      	orrs	r3, r2
 800eb26:	d11f      	bne.n	800eb68 <_fx_file_write+0xacc>
                ((file_ptr -> fx_file_current_file_offset + size) >=
 800eb28:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800eb2c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800eb30:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 800eb34:	2000      	movs	r0, #0
 800eb36:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800eb3a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 800eb3e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800eb42:	4621      	mov	r1, r4
 800eb44:	1851      	adds	r1, r2, r1
 800eb46:	67b9      	str	r1, [r7, #120]	; 0x78
 800eb48:	4629      	mov	r1, r5
 800eb4a:	414b      	adcs	r3, r1
 800eb4c:	67fb      	str	r3, [r7, #124]	; 0x7c
                 file_ptr -> fx_file_current_available_size))
 800eb4e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800eb52:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
            if ((bytes_remaining == 0) &&
 800eb56:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800eb5a:	4621      	mov	r1, r4
 800eb5c:	4291      	cmp	r1, r2
 800eb5e:	4629      	mov	r1, r5
 800eb60:	eb71 0303 	sbcs.w	r3, r1, r3
 800eb64:	f080 80af 	bcs.w	800ecc6 <_fx_file_write+0xc2a>
            /* We need to move to the next logical sector, but first
               determine if the next logical sector is within the same
               cluster.  */

            /* Increment the current relative sector in the cluster.  */
            file_ptr -> fx_file_current_relative_sector++;
 800eb68:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800eb6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb6e:	1c5a      	adds	r2, r3, #1
 800eb70:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800eb74:	639a      	str	r2, [r3, #56]	; 0x38

            /* Determine if this is in a new cluster.  */
            if (file_ptr -> fx_file_current_relative_sector >=
 800eb76:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800eb7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
                media_ptr -> fx_media_sectors_per_cluster)
 800eb7c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800eb80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
            if (file_ptr -> fx_file_current_relative_sector >=
 800eb82:	429a      	cmp	r2, r3
 800eb84:	f0c0 8086 	bcc.w	800ec94 <_fx_file_write+0xbf8>
                {
#endif /* FX_ENABLE_EXFAT */

                    /* Read the FAT entry of the current cluster to find
                       the next cluster.  */
                    status =  _fx_utility_FAT_entry_read(media_ptr,
 800eb88:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800eb8c:	6a19      	ldr	r1, [r3, #32]
 800eb8e:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800eb92:	461a      	mov	r2, r3
 800eb94:	f8d7 01ac 	ldr.w	r0, [r7, #428]	; 0x1ac
 800eb98:	f001 ff4a 	bl	8010a30 <_fx_utility_FAT_entry_read>
 800eb9c:	f8c7 01ec 	str.w	r0, [r7, #492]	; 0x1ec
                                                         file_ptr -> fx_file_current_physical_cluster, &next_cluster);

                    /* Determine if an error is present.  */
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800eba0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d10d      	bne.n	800ebc4 <_fx_file_write+0xb28>
 800eba8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800ebac:	2b01      	cmp	r3, #1
 800ebae:	d909      	bls.n	800ebc4 <_fx_file_write+0xb28>
                        (next_cluster > media_ptr -> fx_media_fat_reserved))
 800ebb0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800ebb4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800ebb8:	f8d3 24a8 	ldr.w	r2, [r3, #1192]	; 0x4a8
 800ebbc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
                    if ((status != FX_SUCCESS) || (next_cluster < FX_FAT_ENTRY_START) ||
 800ebc0:	429a      	cmp	r2, r3
 800ebc2:	d20f      	bcs.n	800ebe4 <_fx_file_write+0xb48>
#ifdef FX_ENABLE_FAULT_TOLERANT
                        FX_FAULT_TOLERANT_TRANSACTION_FAIL(media_ptr);
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Release media protection.  */
                        FX_UNPROTECT
 800ebc4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800ebc8:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f005 fbe9 	bl	80143a4 <_tx_mutex_put>

                        /* Send error message back to caller.  */
                        if (status != FX_SUCCESS)
 800ebd2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d002      	beq.n	800ebe0 <_fx_file_write+0xb44>
                        {
                            return(status);
 800ebda:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800ebde:	e197      	b.n	800ef10 <_fx_file_write+0xe74>
                        }
                        else
                        {
                            return(FX_FILE_CORRUPT);
 800ebe0:	2308      	movs	r3, #8
 800ebe2:	e195      	b.n	800ef10 <_fx_file_write+0xe74>
                }
#endif /* FX_ENABLE_EXFAT */

                /* Otherwise, we have a new cluster.  Save it in the file
                   control block and calculate a new logical sector value.  */
                file_ptr -> fx_file_current_physical_cluster =  next_cluster;
 800ebe4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800ebe8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ebec:	621a      	str	r2, [r3, #32]
                file_ptr -> fx_file_current_relative_cluster++;
 800ebee:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ebf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebf4:	1c5a      	adds	r2, r3, #1
 800ebf6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ebfa:	635a      	str	r2, [r3, #52]	; 0x34
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800ebfc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800ec00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec02:	2200      	movs	r2, #0
 800ec04:	673b      	str	r3, [r7, #112]	; 0x70
 800ec06:	677a      	str	r2, [r7, #116]	; 0x74
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800ec08:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800ec0c:	2200      	movs	r2, #0
 800ec0e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ec10:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ec12:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ec16:	460b      	mov	r3, r1
 800ec18:	3b02      	subs	r3, #2
 800ec1a:	663b      	str	r3, [r7, #96]	; 0x60
 800ec1c:	4613      	mov	r3, r2
 800ec1e:	f143 33ff 	adc.w	r3, r3, #4294967295
 800ec22:	667b      	str	r3, [r7, #100]	; 0x64
                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800ec24:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800ec28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ec2e:	65fa      	str	r2, [r7, #92]	; 0x5c
                    ((((ULONG64)next_cluster) - FX_FAT_ENTRY_START) *
 800ec30:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800ec34:	462b      	mov	r3, r5
 800ec36:	e9d7 8916 	ldrd	r8, r9, [r7, #88]	; 0x58
 800ec3a:	4642      	mov	r2, r8
 800ec3c:	fb02 f203 	mul.w	r2, r2, r3
 800ec40:	464b      	mov	r3, r9
 800ec42:	4621      	mov	r1, r4
 800ec44:	fb01 f303 	mul.w	r3, r1, r3
 800ec48:	4413      	add	r3, r2
 800ec4a:	4622      	mov	r2, r4
 800ec4c:	4641      	mov	r1, r8
 800ec4e:	fba2 1201 	umull	r1, r2, r2, r1
 800ec52:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 800ec56:	460a      	mov	r2, r1
 800ec58:	f8c7 2168 	str.w	r2, [r7, #360]	; 0x168
 800ec5c:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 800ec60:	4413      	add	r3, r2
 800ec62:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
                file_ptr -> fx_file_current_logical_sector = ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800ec66:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 800ec6a:	4623      	mov	r3, r4
 800ec6c:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	; 0x168
 800ec70:	4602      	mov	r2, r0
 800ec72:	189b      	adds	r3, r3, r2
 800ec74:	653b      	str	r3, [r7, #80]	; 0x50
 800ec76:	462b      	mov	r3, r5
 800ec78:	460a      	mov	r2, r1
 800ec7a:	4153      	adcs	r3, r2
 800ec7c:	657b      	str	r3, [r7, #84]	; 0x54
 800ec7e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ec82:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800ec86:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                file_ptr -> fx_file_current_relative_sector =  0;
 800ec8a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800ec8e:	2300      	movs	r3, #0
 800ec90:	6393      	str	r3, [r2, #56]	; 0x38
 800ec92:	e00e      	b.n	800ecb2 <_fx_file_write+0xc16>
            else
            {

                /* Still within the same cluster so just increment the
                   logical sector.  */
                file_ptr -> fx_file_current_logical_sector++;
 800ec94:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ec98:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800ec9c:	1c51      	adds	r1, r2, #1
 800ec9e:	64b9      	str	r1, [r7, #72]	; 0x48
 800eca0:	f143 0300 	adc.w	r3, r3, #0
 800eca4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eca6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ecaa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800ecae:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
            }

            /* In either case, we are now positioned at a new sector so
               clear the logical sector offset.  */
            file_ptr -> fx_file_current_logical_offset =  0;
 800ecb2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	6313      	str	r3, [r2, #48]	; 0x30
    while (bytes_remaining)
 800ecba:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 800ecbe:	4313      	orrs	r3, r2
 800ecc0:	f47f ad6a 	bne.w	800e798 <_fx_file_write+0x6fc>
 800ecc4:	e000      	b.n	800ecc8 <_fx_file_write+0xc2c>
                break;
 800ecc6:	bf00      	nop
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Adjust the current file offset accordingly.  */
    file_ptr -> fx_file_current_file_offset =
        file_ptr -> fx_file_current_file_offset + size;
 800ecc8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800eccc:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800ecd0:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 800ecd4:	2000      	movs	r0, #0
 800ecd6:	6439      	str	r1, [r7, #64]	; 0x40
 800ecd8:	6478      	str	r0, [r7, #68]	; 0x44
 800ecda:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800ecde:	4621      	mov	r1, r4
 800ece0:	1851      	adds	r1, r2, r1
 800ece2:	63b9      	str	r1, [r7, #56]	; 0x38
 800ece4:	4629      	mov	r1, r5
 800ece6:	eb43 0101 	adc.w	r1, r3, r1
 800ecea:	63f9      	str	r1, [r7, #60]	; 0x3c
    file_ptr -> fx_file_current_file_offset =
 800ecec:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ecf0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800ecf4:	e9c3 1210 	strd	r1, r2, [r3, #64]	; 0x40

    /* Copy the new file size into the directory entry.  */
    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
        file_ptr -> fx_file_current_file_size;
 800ecf8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ecfc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800ed00:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800ed04:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0

    /* Determine if this write was done past the previous file size.  */
    if (file_ptr -> fx_file_current_file_offset >
 800ed08:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ed0c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
        file_ptr -> fx_file_current_file_size)
 800ed10:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800ed14:	e9d1 0112 	ldrd	r0, r1, [r1, #72]	; 0x48
    if (file_ptr -> fx_file_current_file_offset >
 800ed18:	4290      	cmp	r0, r2
 800ed1a:	eb71 0303 	sbcs.w	r3, r1, r3
 800ed1e:	f080 80de 	bcs.w	800eede <_fx_file_write+0xe42>
    {

        /* Yes, we have written past the previous end of the file.  Update
           the file size.  */
        file_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 800ed22:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ed26:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800ed2a:	f8d7 119c 	ldr.w	r1, [r7, #412]	; 0x19c
 800ed2e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

#ifndef FX_DONT_UPDATE_OPEN_FILES

        /* Search the opened files list to see if the same file is opened for reading.  */
        open_count =  media_ptr -> fx_media_opened_file_count;
 800ed32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800ed36:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ed3a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
        search_ptr =  media_ptr -> fx_media_opened_file_list;
 800ed3e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800ed42:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800ed46:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
        while (open_count)
 800ed4a:	e0c3      	b.n	800eed4 <_fx_file_write+0xe38>
        {

            /* Is this file the same file opened for reading?  */
            if ((search_ptr != file_ptr) &&
 800ed4c:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 800ed50:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ed54:	429a      	cmp	r2, r3
 800ed56:	f000 80b3 	beq.w	800eec0 <_fx_file_write+0xe24>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector ==
 800ed5a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800ed5e:	e9d3 012a 	ldrd	r0, r1, [r3, #168]	; 0xa8
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800ed62:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ed66:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
            if ((search_ptr != file_ptr) &&
 800ed6a:	4299      	cmp	r1, r3
 800ed6c:	bf08      	it	eq
 800ed6e:	4290      	cmpeq	r0, r2
 800ed70:	f040 80a6 	bne.w	800eec0 <_fx_file_write+0xe24>
                (search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset ==
 800ed74:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800ed78:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset))
 800ed7c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ed80:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
                 file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector) &&
 800ed84:	429a      	cmp	r2, r3
 800ed86:	f040 809b 	bne.w	800eec0 <_fx_file_write+0xe24>
            {

                /* Yes, the same file is opened for reading.  */

                /* Setup the new size.  */
                search_ptr -> fx_file_current_file_size =  file_ptr -> fx_file_current_file_offset;
 800ed8a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ed8e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800ed92:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800ed96:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

                /* Setup the new directory entry.  */
                search_ptr -> fx_file_dir_entry.fx_dir_entry_cluster =      file_ptr -> fx_file_dir_entry.fx_dir_entry_cluster;
 800ed9a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ed9e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800eda2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800eda6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                search_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =    file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size;
 800edaa:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800edae:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 800edb2:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800edb6:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                search_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector =   file_ptr -> fx_file_dir_entry.fx_dir_entry_log_sector;
 800edba:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800edbe:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 800edc2:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800edc6:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
                search_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset =  file_ptr -> fx_file_dir_entry.fx_dir_entry_byte_offset;
 800edca:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800edce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800edd2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800edd6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Setup the last cluster. This really isn't used during reading, but it is nice to keep things
                   consistent.  */
                search_ptr -> fx_file_last_physical_cluster =  file_ptr -> fx_file_last_physical_cluster;
 800edda:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800edde:	69da      	ldr	r2, [r3, #28]
 800ede0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800ede4:	61da      	str	r2, [r3, #28]

                /* Update the available clusters as well.  */
                search_ptr -> fx_file_current_available_size =  file_ptr -> fx_file_current_available_size;
 800ede6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800edea:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800edee:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800edf2:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

                /* Determine if an empty file was previously opened.  */
                if (search_ptr -> fx_file_total_clusters == 0)
 800edf6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800edfa:	691b      	ldr	r3, [r3, #16]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d15f      	bne.n	800eec0 <_fx_file_write+0xe24>
                {

                    /* Setup initial parameters.  */
                    search_ptr -> fx_file_total_clusters =            file_ptr -> fx_file_total_clusters;
 800ee00:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ee04:	691a      	ldr	r2, [r3, #16]
 800ee06:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800ee0a:	611a      	str	r2, [r3, #16]
                    search_ptr -> fx_file_current_physical_cluster =  file_ptr -> fx_file_first_physical_cluster;
 800ee0c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ee10:	695a      	ldr	r2, [r3, #20]
 800ee12:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800ee16:	621a      	str	r2, [r3, #32]
                    search_ptr -> fx_file_current_relative_cluster =  0;
 800ee18:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	635a      	str	r2, [r3, #52]	; 0x34
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800ee20:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800ee24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee26:	2200      	movs	r2, #0
 800ee28:	633b      	str	r3, [r7, #48]	; 0x30
 800ee2a:	637a      	str	r2, [r7, #52]	; 0x34
                        (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800ee2c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800ee30:	695b      	ldr	r3, [r3, #20]
 800ee32:	3b02      	subs	r3, #2
 800ee34:	2200      	movs	r2, #0
 800ee36:	62bb      	str	r3, [r7, #40]	; 0x28
 800ee38:	62fa      	str	r2, [r7, #44]	; 0x2c
                         ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800ee3a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800ee3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee40:	2200      	movs	r2, #0
 800ee42:	623b      	str	r3, [r7, #32]
 800ee44:	627a      	str	r2, [r7, #36]	; 0x24
                        (((ULONG64)(file_ptr -> fx_file_first_physical_cluster - FX_FAT_ENTRY_START)) *
 800ee46:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800ee4a:	462b      	mov	r3, r5
 800ee4c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800ee50:	4642      	mov	r2, r8
 800ee52:	fb02 f203 	mul.w	r2, r2, r3
 800ee56:	464b      	mov	r3, r9
 800ee58:	4621      	mov	r1, r4
 800ee5a:	fb01 f303 	mul.w	r3, r1, r3
 800ee5e:	4413      	add	r3, r2
 800ee60:	4622      	mov	r2, r4
 800ee62:	4641      	mov	r1, r8
 800ee64:	fba2 1201 	umull	r1, r2, r2, r1
 800ee68:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800ee6c:	460a      	mov	r2, r1
 800ee6e:	f8c7 2160 	str.w	r2, [r7, #352]	; 0x160
 800ee72:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800ee76:	4413      	add	r3, r2
 800ee78:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
                    search_ptr -> fx_file_current_logical_sector =    ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800ee7c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800ee80:	4623      	mov	r3, r4
 800ee82:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	; 0x160
 800ee86:	4602      	mov	r2, r0
 800ee88:	189b      	adds	r3, r3, r2
 800ee8a:	61bb      	str	r3, [r7, #24]
 800ee8c:	462b      	mov	r3, r5
 800ee8e:	460a      	mov	r2, r1
 800ee90:	4153      	adcs	r3, r2
 800ee92:	61fb      	str	r3, [r7, #28]
 800ee94:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800ee98:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ee9c:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
                    search_ptr -> fx_file_current_relative_sector =   0;
 800eea0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800eea4:	2200      	movs	r2, #0
 800eea6:	639a      	str	r2, [r3, #56]	; 0x38
                    search_ptr -> fx_file_current_logical_offset =    0;
 800eea8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800eeac:	2200      	movs	r2, #0
 800eeae:	631a      	str	r2, [r3, #48]	; 0x30
                    search_ptr -> fx_file_current_file_offset =       0;
 800eeb0:	f8d7 11b0 	ldr.w	r1, [r7, #432]	; 0x1b0
 800eeb4:	f04f 0200 	mov.w	r2, #0
 800eeb8:	f04f 0300 	mov.w	r3, #0
 800eebc:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
                }
            }

            /* Adjust the pointer and decrement the search count.  */
            search_ptr =  search_ptr -> fx_file_opened_next;
 800eec0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800eec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eec6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
            open_count--;
 800eeca:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800eece:	3b01      	subs	r3, #1
 800eed0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
        while (open_count)
 800eed4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	f47f af37 	bne.w	800ed4c <_fx_file_write+0xcb0>
        }
#endif
    }

    /* Finally, mark this file as modified.  */
    file_ptr -> fx_file_modified =  FX_TRUE;
 800eede:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800eee2:	2201      	movs	r2, #1
 800eee4:	731a      	strb	r2, [r3, #12]
        file_ptr -> fx_file_maximum_size_used = file_ptr -> fx_file_current_file_offset;
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Invoke file write callback. */
    if (file_ptr -> fx_file_write_notify)
 800eee6:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800eeea:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d006      	beq.n	800ef00 <_fx_file_write+0xe64>
    {
        file_ptr -> fx_file_write_notify(file_ptr);
 800eef2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800eef6:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800eefa:	f8d7 019c 	ldr.w	r0, [r7, #412]	; 0x19c
 800eefe:	4798      	blx	r3
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800ef00:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800ef04:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ef08:	4618      	mov	r0, r3
 800ef0a:	f005 fa4b 	bl	80143a4 <_tx_mutex_put>

    /* Return a successful status to the caller.  */
    return(FX_SUCCESS);
 800ef0e:	2300      	movs	r3, #0
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	f507 77f8 	add.w	r7, r7, #496	; 0x1f0
 800ef16:	46bd      	mov	sp, r7
 800ef18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800ef1c <_fx_media_abort>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_abort(FX_MEDIA  *media_ptr)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b088      	sub	sp, #32
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_aborts++;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800ef2a:	1c5a      	adds	r2, r3, #1
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
#endif

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	4a3f      	ldr	r2, [pc, #252]	; (800f034 <_fx_media_abort+0x118>)
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d001      	beq.n	800ef40 <_fx_media_abort+0x24>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800ef3c:	2311      	movs	r3, #17
 800ef3e:	e074      	b.n	800f02a <_fx_media_abort+0x10e>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_ABORT, media_ptr, 0, 0, 0, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	4a3b      	ldr	r2, [pc, #236]	; (800f034 <_fx_media_abort+0x118>)
 800ef46:	4293      	cmp	r3, r2
 800ef48:	d001      	beq.n	800ef4e <_fx_media_abort+0x32>
 800ef4a:	2311      	movs	r3, #17
 800ef4c:	e06d      	b.n	800f02a <_fx_media_abort+0x10e>
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ef54:	f04f 31ff 	mov.w	r1, #4294967295
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f004 ffab 	bl	8013eb4 <_tx_mutex_get>
 800ef5e:	4603      	mov	r3, r0
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d001      	beq.n	800ef68 <_fx_media_abort+0x4c>
 800ef64:	2311      	movs	r3, #17
 800ef66:	e060      	b.n	800f02a <_fx_media_abort+0x10e>

    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800ef6e:	61fb      	str	r3, [r7, #28]
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800ef76:	61bb      	str	r3, [r7, #24]
    while (open_count)
 800ef78:	e008      	b.n	800ef8c <_fx_media_abort+0x70>
    {

        /* Mark the file as aborted.  */
        file_ptr -> fx_file_id =  FX_FILE_ABORTED_ID;
 800ef7a:	69bb      	ldr	r3, [r7, #24]
 800ef7c:	4a2e      	ldr	r2, [pc, #184]	; (800f038 <_fx_media_abort+0x11c>)
 800ef7e:	601a      	str	r2, [r3, #0]

        /* Adjust the pointer and decrement the file opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 800ef80:	69bb      	ldr	r3, [r7, #24]
 800ef82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ef84:	61bb      	str	r3, [r7, #24]
        open_count--;
 800ef86:	69fb      	ldr	r3, [r7, #28]
 800ef88:	3b01      	subs	r3, #1
 800ef8a:	61fb      	str	r3, [r7, #28]
    while (open_count)
 800ef8c:	69fb      	ldr	r3, [r7, #28]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d1f3      	bne.n	800ef7a <_fx_media_abort+0x5e>
    }

    /* Build the "abort" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_ABORT;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	2203      	movs	r2, #3
 800ef96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	2290      	movs	r2, #144	; 0x90
 800ef9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_ABORT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the abort request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800efa8:	6878      	ldr	r0, [r7, #4]
 800efaa:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800efac:	f3ef 8310 	mrs	r3, PRIMASK
 800efb0:	613b      	str	r3, [r7, #16]
    return(posture);
 800efb2:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800efb4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800efb6:	b672      	cpsid	i
    return(int_posture);
 800efb8:	68fb      	ldr	r3, [r7, #12]

    /* Now remove this media from the open list.  */

    /* Lockout interrupts for media removal.  */
    FX_DISABLE_INTS
 800efba:	617b      	str	r3, [r7, #20]

    /* See if the media is the only one on the media opened list.  */
    if (_fx_system_media_opened_count == ((ULONG) 1))
 800efbc:	4b1f      	ldr	r3, [pc, #124]	; (800f03c <_fx_media_abort+0x120>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	2b01      	cmp	r3, #1
 800efc2:	d103      	bne.n	800efcc <_fx_media_abort+0xb0>
    {

        /* Only opened media, just set the opened list to NULL.  */
        _fx_system_media_opened_ptr =  FX_NULL;
 800efc4:	4b1e      	ldr	r3, [pc, #120]	; (800f040 <_fx_media_abort+0x124>)
 800efc6:	2200      	movs	r2, #0
 800efc8:	601a      	str	r2, [r3, #0]
 800efca:	e019      	b.n	800f000 <_fx_media_abort+0xe4>
    }
    else
    {

        /* Otherwise, not the only opened media, link-up the neighbors.  */
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
            media_ptr -> fx_media_opened_previous;
 800efd2:	687a      	ldr	r2, [r7, #4]
 800efd4:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800efd8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
            media_ptr -> fx_media_opened_next;
 800efe2:	687a      	ldr	r2, [r7, #4]
 800efe4:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800efe8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* See if we have to update the opened list head pointer.  */
        if (_fx_system_media_opened_ptr == media_ptr)
 800efec:	4b14      	ldr	r3, [pc, #80]	; (800f040 <_fx_media_abort+0x124>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	687a      	ldr	r2, [r7, #4]
 800eff2:	429a      	cmp	r2, r3
 800eff4:	d104      	bne.n	800f000 <_fx_media_abort+0xe4>
        {

            /* Yes, move the head pointer to the next opened media. */
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800effc:	4a10      	ldr	r2, [pc, #64]	; (800f040 <_fx_media_abort+0x124>)
 800effe:	6013      	str	r3, [r2, #0]
        }
    }

    /* Decrement the opened media counter.  */
    _fx_system_media_opened_count--;
 800f000:	4b0e      	ldr	r3, [pc, #56]	; (800f03c <_fx_media_abort+0x120>)
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	3b01      	subs	r3, #1
 800f006:	4a0d      	ldr	r2, [pc, #52]	; (800f03c <_fx_media_abort+0x120>)
 800f008:	6013      	str	r3, [r2, #0]

    /* Finally, Indicate that this media is aborted.  */
    media_ptr -> fx_media_id =  FX_MEDIA_ABORTED_ID;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	4a0d      	ldr	r2, [pc, #52]	; (800f044 <_fx_media_abort+0x128>)
 800f00e:	601a      	str	r2, [r3, #0]
 800f010:	697b      	ldr	r3, [r7, #20]
 800f012:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	f383 8810 	msr	PRIMASK, r3
}
 800f01a:	bf00      	nop
#ifndef FX_DONT_CREATE_MUTEX

    /* Note that the protection is never released. The mutex delete
       service will handle all threads waiting access to this media
       control block.  */
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f022:	4618      	mov	r0, r3
 800f024:	f004 fe9c 	bl	8013d60 <_tx_mutex_delete>
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return status to the caller.  */
    return(FX_SUCCESS);
 800f028:	2300      	movs	r3, #0
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	3720      	adds	r7, #32
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}
 800f032:	bf00      	nop
 800f034:	4d454449 	.word	0x4d454449
 800f038:	46494c41 	.word	0x46494c41
 800f03c:	24014c8c 	.word	0x24014c8c
 800f040:	24014c88 	.word	0x24014c88
 800f044:	4d454441 	.word	0x4d454441

0800f048 <_fx_media_boot_info_extract>:
/*                                            check for bimap cache size, */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_boot_info_extract(FX_MEDIA *media_ptr)
{
 800f048:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800f04c:	b084      	sub	sp, #16
 800f04e:	af00      	add	r7, sp, #0
 800f050:	6078      	str	r0, [r7, #4]

UCHAR *boot_sector;


    /* Move the buffer pointer into a local copy.  */
    boot_sector =  media_ptr -> fx_media_driver_buffer;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f058:	60fb      	str	r3, [r7, #12]

    /* Extract the number of bytes per sector.  */
    media_ptr -> fx_media_bytes_per_sector =    _fx_utility_16_unsigned_read(&boot_sector[FX_BYTES_SECTOR]);
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	330b      	adds	r3, #11
 800f05e:	4618      	mov	r0, r3
 800f060:	f001 fc80 	bl	8010964 <_fx_utility_16_unsigned_read>
 800f064:	4602      	mov	r2, r0
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	629a      	str	r2, [r3, #40]	; 0x28
    if (media_ptr -> fx_media_bytes_per_sector == 0)
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d101      	bne.n	800f076 <_fx_media_boot_info_extract+0x2e>
        return(_fx_utility_exFAT_geometry_check(media_ptr, boot_sector));
    }
    else
    {
#else
        return(FX_MEDIA_INVALID);
 800f072:	2302      	movs	r3, #2
 800f074:	e08c      	b.n	800f190 <_fx_media_boot_info_extract+0x148>
#endif /* FX_ENABLE_EXFAT */


        /* FAT12/16/32 volume.  */
        /* Extract the number of sectors per track.  */
        media_ptr -> fx_media_sectors_per_track =   _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_TRK]);
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	3318      	adds	r3, #24
 800f07a:	4618      	mov	r0, r3
 800f07c:	f001 fc72 	bl	8010964 <_fx_utility_16_unsigned_read>
 800f080:	4602      	mov	r2, r0
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Extract the number of heads.  */
        media_ptr -> fx_media_heads =               _fx_utility_16_unsigned_read(&boot_sector[FX_HEADS]);
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	331a      	adds	r3, #26
 800f08a:	4618      	mov	r0, r3
 800f08c:	f001 fc6a 	bl	8010964 <_fx_utility_16_unsigned_read>
 800f090:	4602      	mov	r2, r0
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	631a      	str	r2, [r3, #48]	; 0x30

        /* Extract the total number of sectors.  */
        media_ptr -> fx_media_total_sectors =       _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS]);
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	3313      	adds	r3, #19
 800f09a:	4618      	mov	r0, r3
 800f09c:	f001 fc62 	bl	8010964 <_fx_utility_16_unsigned_read>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	4698      	mov	r8, r3
 800f0a6:	4691      	mov	r9, r2
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
        if (media_ptr -> fx_media_total_sectors == 0)
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f0b4:	4313      	orrs	r3, r2
 800f0b6:	d10b      	bne.n	800f0d0 <_fx_media_boot_info_extract+0x88>
        {
            media_ptr -> fx_media_total_sectors = _fx_utility_32_unsigned_read(&boot_sector[FX_HUGE_SECTORS]);
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	3320      	adds	r3, #32
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f001 fc79 	bl	80109b4 <_fx_utility_32_unsigned_read>
 800f0c2:	4603      	mov	r3, r0
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	461c      	mov	r4, r3
 800f0c8:	4615      	mov	r5, r2
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
        }

        if (media_ptr -> fx_media_total_sectors == 0)
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f0d6:	4313      	orrs	r3, r2
 800f0d8:	d101      	bne.n	800f0de <_fx_media_boot_info_extract+0x96>
        {
            return(FX_MEDIA_INVALID);
 800f0da:	2302      	movs	r3, #2
 800f0dc:	e058      	b.n	800f190 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of reserved sectors before the first FAT.  */
        media_ptr -> fx_media_reserved_sectors =    _fx_utility_16_unsigned_read(&boot_sector[FX_RESERVED_SECTORS]);
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	330e      	adds	r3, #14
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f001 fc3e 	bl	8010964 <_fx_utility_16_unsigned_read>
 800f0e8:	4602      	mov	r2, r0
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	645a      	str	r2, [r3, #68]	; 0x44
        if (media_ptr -> fx_media_reserved_sectors == 0)
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d101      	bne.n	800f0fa <_fx_media_boot_info_extract+0xb2>
        {
            return(FX_MEDIA_INVALID);
 800f0f6:	2302      	movs	r3, #2
 800f0f8:	e04a      	b.n	800f190 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of sectors per cluster.  */
        media_ptr -> fx_media_sectors_per_cluster = ((UINT)boot_sector[FX_SECTORS_CLUSTER] & 0xFF);
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	330d      	adds	r3, #13
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	461a      	mov	r2, r3
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	655a      	str	r2, [r3, #84]	; 0x54

        /* There should always be at least one reserved sector, representing the boot record itself.  */
        if (media_ptr -> fx_media_sectors_per_cluster == 0)
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d101      	bne.n	800f112 <_fx_media_boot_info_extract+0xca>
        {
            return(FX_MEDIA_INVALID);
 800f10e:	2302      	movs	r3, #2
 800f110:	e03e      	b.n	800f190 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of sectors per FAT.  */
        media_ptr -> fx_media_sectors_per_FAT =     _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT]);
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	3316      	adds	r3, #22
 800f116:	4618      	mov	r0, r3
 800f118:	f001 fc24 	bl	8010964 <_fx_utility_16_unsigned_read>
 800f11c:	4602      	mov	r2, r0
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	659a      	str	r2, [r3, #88]	; 0x58
        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f126:	2b00      	cmp	r3, #0
 800f128:	d107      	bne.n	800f13a <_fx_media_boot_info_extract+0xf2>
        {
            media_ptr -> fx_media_sectors_per_FAT = _fx_utility_32_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT_32]);
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	3324      	adds	r3, #36	; 0x24
 800f12e:	4618      	mov	r0, r3
 800f130:	f001 fc40 	bl	80109b4 <_fx_utility_32_unsigned_read>
 800f134:	4602      	mov	r2, r0
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	659a      	str	r2, [r3, #88]	; 0x58
        }

        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d101      	bne.n	800f146 <_fx_media_boot_info_extract+0xfe>
        {
            return(FX_MEDIA_INVALID);
 800f142:	2302      	movs	r3, #2
 800f144:	e024      	b.n	800f190 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of FATs.  */
        media_ptr -> fx_media_number_of_FATs =      ((UINT)boot_sector[FX_NUMBER_OF_FATS] & 0xFF);
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	3310      	adds	r3, #16
 800f14a:	781b      	ldrb	r3, [r3, #0]
 800f14c:	461a      	mov	r2, r3
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	65da      	str	r2, [r3, #92]	; 0x5c
        if (media_ptr -> fx_media_number_of_FATs == 0)
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f156:	2b00      	cmp	r3, #0
 800f158:	d101      	bne.n	800f15e <_fx_media_boot_info_extract+0x116>
        {
            return(FX_BOOT_ERROR);
 800f15a:	2301      	movs	r3, #1
 800f15c:	e018      	b.n	800f190 <_fx_media_boot_info_extract+0x148>

        /* Extract the number of hidden sectors.  */
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_64_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
#else
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_32_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	331c      	adds	r3, #28
 800f162:	4618      	mov	r0, r3
 800f164:	f001 fc26 	bl	80109b4 <_fx_utility_32_unsigned_read>
 800f168:	4602      	mov	r2, r0
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	671a      	str	r2, [r3, #112]	; 0x70
#endif
        /* Extract the number of root directory entries.  */
        media_ptr -> fx_media_root_directory_entries =  _fx_utility_16_unsigned_read(&boot_sector[FX_ROOT_DIR_ENTRIES]);
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	3311      	adds	r3, #17
 800f172:	4618      	mov	r0, r3
 800f174:	f001 fbf6 	bl	8010964 <_fx_utility_16_unsigned_read>
 800f178:	4602      	mov	r2, r0
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Extract root directory starting cluster (32 bit only) and compute start sector */
        media_ptr -> fx_media_root_cluster_32 = _fx_utility_32_unsigned_read(&boot_sector[FX_ROOT_CLUSTER_32]);
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	332c      	adds	r3, #44	; 0x2c
 800f182:	4618      	mov	r0, r3
 800f184:	f001 fc16 	bl	80109b4 <_fx_utility_32_unsigned_read>
 800f188:	4602      	mov	r2, r0
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	675a      	str	r2, [r3, #116]	; 0x74
#ifdef FX_ENABLE_EXFAT
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return a successful status.  */
    return(FX_SUCCESS);
 800f18e:	2300      	movs	r3, #0
}
 800f190:	4618      	mov	r0, r3
 800f192:	3710      	adds	r7, #16
 800f194:	46bd      	mov	sp, r7
 800f196:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800f19c <_fx_media_close>:
/*                                            and cache,                  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_close(FX_MEDIA  *media_ptr)
{
 800f19c:	b580      	push	{r7, lr}
 800f19e:	b092      	sub	sp, #72	; 0x48
 800f1a0:	af04      	add	r7, sp, #16
 800f1a2:	6078      	str	r0, [r7, #4]
#endif /* FX_DISABLE_FILE_CLOSE */
UINT     status;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	4aa6      	ldr	r2, [pc, #664]	; (800f444 <_fx_media_close+0x2a8>)
 800f1aa:	4293      	cmp	r3, r2
 800f1ac:	d001      	beq.n	800f1b2 <_fx_media_close+0x16>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800f1ae:	2311      	movs	r3, #17
 800f1b0:	e1c2      	b.n	800f538 <_fx_media_close+0x39c>

    /* If trace is enabled, unregister this object.  */
    FX_TRACE_OBJECT_UNREGISTER(media_ptr)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	4aa3      	ldr	r2, [pc, #652]	; (800f444 <_fx_media_close+0x2a8>)
 800f1b8:	4293      	cmp	r3, r2
 800f1ba:	d001      	beq.n	800f1c0 <_fx_media_close+0x24>
 800f1bc:	2311      	movs	r3, #17
 800f1be:	e1bb      	b.n	800f538 <_fx_media_close+0x39c>
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f1c6:	f04f 31ff 	mov.w	r1, #4294967295
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f004 fe72 	bl	8013eb4 <_tx_mutex_get>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d001      	beq.n	800f1da <_fx_media_close+0x3e>
 800f1d6:	2311      	movs	r3, #17
 800f1d8:	e1ae      	b.n	800f538 <_fx_media_close+0x39c>

#ifndef FX_DISABLE_FILE_CLOSE
    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800f1e0:	637b      	str	r3, [r7, #52]	; 0x34
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800f1e8:	633b      	str	r3, [r7, #48]	; 0x30
    while (open_count)
 800f1ea:	e046      	b.n	800f27a <_fx_media_close+0xde>
    {

        /* Look at each opened file to see if the same file is opened
           for writing and has been written to.  */
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800f1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ee:	689b      	ldr	r3, [r3, #8]
 800f1f0:	2b01      	cmp	r3, #1
 800f1f2:	d139      	bne.n	800f268 <_fx_media_close+0xcc>
            (file_ptr -> fx_file_modified))
 800f1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1f6:	7b1b      	ldrb	r3, [r3, #12]
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d035      	beq.n	800f268 <_fx_media_close+0xcc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f1fc:	f3ef 8310 	mrs	r3, PRIMASK
 800f200:	61bb      	str	r3, [r7, #24]
    return(posture);
 800f202:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800f204:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f206:	b672      	cpsid	i
    return(int_posture);
 800f208:	697b      	ldr	r3, [r7, #20]
        {

            /* Lockout interrupts for time/date access.  */
            FX_DISABLE_INTS
 800f20a:	623b      	str	r3, [r7, #32]

            /* Set the new time and date.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 800f20c:	4b8e      	ldr	r3, [pc, #568]	; (800f448 <_fx_media_close+0x2ac>)
 800f20e:	681a      	ldr	r2, [r3, #0]
 800f210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f212:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 800f216:	4b8d      	ldr	r3, [pc, #564]	; (800f44c <_fx_media_close+0x2b0>)
 800f218:	681a      	ldr	r2, [r3, #0]
 800f21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f21c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800f220:	6a3b      	ldr	r3, [r7, #32]
 800f222:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f224:	69fb      	ldr	r3, [r7, #28]
 800f226:	f383 8810 	msr	PRIMASK, r3
}
 800f22a:	bf00      	nop
            /* Restore interrupt posture.  */
            FX_RESTORE_INTS

            /* Copy the new file size into the directory entry.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
                file_ptr -> fx_file_current_file_size;
 800f22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f22e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800f232:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f234:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                status = _fx_directory_exFAT_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
            }
            else
            {
#endif /* FX_ENABLE_EXFAT */
                status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 800f238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f23a:	3368      	adds	r3, #104	; 0x68
 800f23c:	4619      	mov	r1, r3
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	f7fb fa9a 	bl	800a778 <_fx_directory_entry_write>
 800f244:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Determine if the status was unsuccessful. */
            if (status != FX_SUCCESS)
 800f246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d00a      	beq.n	800f262 <_fx_media_close+0xc6>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f252:	4618      	mov	r0, r3
 800f254:	f005 f8a6 	bl	80143a4 <_tx_mutex_put>

                /* Call the media abort routine.  */
                _fx_media_abort(media_ptr);
 800f258:	6878      	ldr	r0, [r7, #4]
 800f25a:	f7ff fe5f 	bl	800ef1c <_fx_media_abort>

                /* Return the error status.  */
                return(FX_IO_ERROR);
 800f25e:	2390      	movs	r3, #144	; 0x90
 800f260:	e16a      	b.n	800f538 <_fx_media_close+0x39c>
            }

            /* Clear the file modified flag.  */
            file_ptr -> fx_file_modified =  FX_FALSE;
 800f262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f264:	2200      	movs	r2, #0
 800f266:	731a      	strb	r2, [r3, #12]
        }

        /* Mark the file as closed.  */
        file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 800f268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f26a:	4a79      	ldr	r2, [pc, #484]	; (800f450 <_fx_media_close+0x2b4>)
 800f26c:	601a      	str	r2, [r3, #0]

        /* Adjust the pointer and decrement the opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 800f26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f272:	633b      	str	r3, [r7, #48]	; 0x30
        open_count--;
 800f274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f276:	3b01      	subs	r3, #1
 800f278:	637b      	str	r3, [r7, #52]	; 0x34
    while (open_count)
 800f27a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d1b5      	bne.n	800f1ec <_fx_media_close+0x50>
    }
#endif /* FX_DISABLE_FILE_CLOSE */

    /* Flush the cached individual FAT entries */
    _fx_utility_FAT_flush(media_ptr);
 800f280:	6878      	ldr	r0, [r7, #4]
 800f282:	f001 fef2 	bl	801106a <_fx_utility_FAT_flush>

    /* Flush changed sector(s) in the primary FAT to secondary FATs.  */
    _fx_utility_FAT_map_flush(media_ptr);
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f002 fa40 	bl	801170c <_fx_utility_FAT_map_flush>
        _fx_utility_exFAT_bitmap_flush(media_ptr);
    }
#endif /* FX_ENABLE_EXFAT */

    /* Flush the internal logical sector cache.  */
    status =  _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_FALSE);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f292:	2100      	movs	r1, #0
 800f294:	9102      	str	r1, [sp, #8]
 800f296:	e9cd 2300 	strd	r2, r3, [sp]
 800f29a:	f04f 0201 	mov.w	r2, #1
 800f29e:	f04f 0300 	mov.w	r3, #0
 800f2a2:	6878      	ldr	r0, [r7, #4]
 800f2a4:	f002 fdbc 	bl	8011e20 <_fx_utility_logical_sector_flush>
 800f2a8:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if the flush was unsuccessful. */
    if (status != FX_SUCCESS)
 800f2aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d00a      	beq.n	800f2c6 <_fx_media_close+0x12a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	f005 f874 	bl	80143a4 <_tx_mutex_put>

        /* Call the media abort routine.  */
        _fx_media_abort(media_ptr);
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f7ff fe2d 	bl	800ef1c <_fx_media_abort>

        /* Return the error status.  */
        return(FX_IO_ERROR);
 800f2c2:	2390      	movs	r3, #144	; 0x90
 800f2c4:	e138      	b.n	800f538 <_fx_media_close+0x39c>
    }

    /* Determine if the media needs to have the additional information sector updated. This will
       only be the case for 32-bit FATs. The logic here only needs to be done if the last reported
       available cluster count is different that the currently available clusters.  */
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	f000 80ca 	beq.w	800f464 <_fx_media_close+0x2c8>
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters) &&
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	f000 80c3 	beq.w	800f464 <_fx_media_close+0x2c8>
        (media_ptr -> fx_media_driver_write_protect == FX_FALSE))
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters) &&
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	f040 80bd 	bne.w	800f464 <_fx_media_close+0x2c8>
    ULONG  signature;


#ifndef FX_DISABLE_CACHE
        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	69db      	ldr	r3, [r3, #28]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~(ULONG64)0);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	69d9      	ldr	r1, [r3, #28]
 800f2f6:	f04f 32ff 	mov.w	r2, #4294967295
 800f2fa:	f04f 33ff 	mov.w	r3, #4294967295
 800f2fe:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	69db      	ldr	r3, [r3, #28]
 800f306:	2200      	movs	r2, #0
 800f308:	745a      	strb	r2, [r3, #17]
#else
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2200      	movs	r2, #0
 800f30e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	2290      	movs	r2, #144	; 0x90
 800f316:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f31e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2201      	movs	r2, #1
 800f330:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2203      	movs	r2, #3
 800f338:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800f342:	1c5a      	adds	r2, r3, #1
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d00a      	beq.n	800f374 <_fx_media_close+0x1d8>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f364:	4618      	mov	r0, r3
 800f366:	f005 f81d 	bl	80143a4 <_tx_mutex_put>

            /* Call the media abort routine.  */
            _fx_media_abort(media_ptr);
 800f36a:	6878      	ldr	r0, [r7, #4]
 800f36c:	f7ff fdd6 	bl	800ef1c <_fx_media_abort>

            /* Return the error status.  */
            return(FX_IO_ERROR);
 800f370:	2390      	movs	r3, #144	; 0x90
 800f372:	e0e1      	b.n	800f538 <_fx_media_close+0x39c>
        }

        /* Setup a pointer into the FAT32 additional information sector.  */
        buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f37a:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Pickup the first signature long word.  */
        signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800f37c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f37e:	f001 fb19 	bl	80109b4 <_fx_utility_32_unsigned_read>
 800f382:	6278      	str	r0, [r7, #36]	; 0x24

        /* Determine if the signature is correct.  */
        if (signature == 0x41615252)
 800f384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f386:	4a33      	ldr	r2, [pc, #204]	; (800f454 <_fx_media_close+0x2b8>)
 800f388:	4293      	cmp	r3, r2
 800f38a:	d16b      	bne.n	800f464 <_fx_media_close+0x2c8>
        {

            /* Yes, the first signature is correct, now pickup the next signature.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 800f38c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f38e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f392:	4618      	mov	r0, r3
 800f394:	f001 fb0e 	bl	80109b4 <_fx_utility_32_unsigned_read>
 800f398:	6278      	str	r0, [r7, #36]	; 0x24

            /* Determine if this signature is correct.  */
            if (signature == 0x61417272)
 800f39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f39c:	4a2e      	ldr	r2, [pc, #184]	; (800f458 <_fx_media_close+0x2bc>)
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d160      	bne.n	800f464 <_fx_media_close+0x2c8>
            {

                /* Yes, we have a good FAT32 additional information sector.  */

                /* Set the free cluster count to the available clusters in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[488], media_ptr -> fx_media_available_clusters);
 800f3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f3ac:	4619      	mov	r1, r3
 800f3ae:	4610      	mov	r0, r2
 800f3b0:	f001 fb1d 	bl	80109ee <_fx_utility_32_unsigned_write>

                /* Set the next free cluster number hint to starting search cluster in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[492], media_ptr -> fx_media_cluster_search_start);
 800f3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b6:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f3c0:	4619      	mov	r1, r3
 800f3c2:	4610      	mov	r0, r2
 800f3c4:	f001 fb13 	bl	80109ee <_fx_utility_32_unsigned_write>

                /* Now write the sector back out to the media.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2201      	movs	r2, #1
 800f3cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2290      	movs	r2, #144	; 0x90
 800f3d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          1;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	2201      	movs	r2, #1
 800f3ee:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	2203      	movs	r2, #3
 800f3f6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                /* Set the system write flag since we are writing a directory sector.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2201      	movs	r2, #1
 800f3fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver write sector(s) requests.  */
                media_ptr -> fx_media_driver_write_requests++;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800f408:	1c5a      	adds	r2, r3, #1
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Invoke the driver to write the FAT32 additional information sector.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f416:	6878      	ldr	r0, [r7, #4]
 800f418:	4798      	blx	r3

                /* Clear the system write flag.  */
                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2200      	movs	r2, #0
 800f41e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Determine if the FAT32 sector was written correctly. */
                if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d017      	beq.n	800f45c <_fx_media_close+0x2c0>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f432:	4618      	mov	r0, r3
 800f434:	f004 ffb6 	bl	80143a4 <_tx_mutex_put>

                    /* Call the media abort routine.  */
                    _fx_media_abort(media_ptr);
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f7ff fd6f 	bl	800ef1c <_fx_media_abort>

                    /* Return the sector IO error status.  */
                    return(FX_IO_ERROR);
 800f43e:	2390      	movs	r3, #144	; 0x90
 800f440:	e07a      	b.n	800f538 <_fx_media_close+0x39c>
 800f442:	bf00      	nop
 800f444:	4d454449 	.word	0x4d454449
 800f448:	24014c94 	.word	0x24014c94
 800f44c:	24014c90 	.word	0x24014c90
 800f450:	46494c43 	.word	0x46494c43
 800f454:	41615252 	.word	0x41615252
 800f458:	61417272 	.word	0x61417272
                }

                /* Successful update of the FAT32 additional information sector. Update the
                   last written available cluster count.  */
                media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	66da      	str	r2, [r3, #108]	; 0x6c
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver flush requests.  */
    media_ptr -> fx_media_driver_flush_requests++;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800f46a:	1c5a      	adds	r2, r3, #1
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
#endif

    /* Build the "flush" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_FLUSH;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	2202      	movs	r2, #2
 800f476:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2290      	movs	r2, #144	; 0x90
 800f47e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the flush request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	4798      	blx	r3

    /* Build the "uninitialize" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	2208      	movs	r2, #8
 800f490:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2290      	movs	r2, #144	; 0x90
 800f498:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the uninitialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f4a2:	6878      	ldr	r0, [r7, #4]
 800f4a4:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f4a6:	f3ef 8310 	mrs	r3, PRIMASK
 800f4aa:	613b      	str	r3, [r7, #16]
    return(posture);
 800f4ac:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800f4ae:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f4b0:	b672      	cpsid	i
    return(int_posture);
 800f4b2:	68fb      	ldr	r3, [r7, #12]

    /* Now remove this media from the open list.  */

    /* Lockout interrupts for media removal.  */
    FX_DISABLE_INTS
 800f4b4:	623b      	str	r3, [r7, #32]

    /* See if the media is the only one on the media opened list.  */
    if (_fx_system_media_opened_count == ((ULONG) 1))
 800f4b6:	4b22      	ldr	r3, [pc, #136]	; (800f540 <_fx_media_close+0x3a4>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	2b01      	cmp	r3, #1
 800f4bc:	d103      	bne.n	800f4c6 <_fx_media_close+0x32a>
    {

        /* Only opened media, just set the opened list to NULL.  */
        _fx_system_media_opened_ptr =  FX_NULL;
 800f4be:	4b21      	ldr	r3, [pc, #132]	; (800f544 <_fx_media_close+0x3a8>)
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	601a      	str	r2, [r3, #0]
 800f4c4:	e019      	b.n	800f4fa <_fx_media_close+0x35e>
    }
    else
    {

        /* Otherwise, not the only opened media, link-up the neighbors.  */
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
            media_ptr -> fx_media_opened_previous;
 800f4cc:	687a      	ldr	r2, [r7, #4]
 800f4ce:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800f4d2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
            media_ptr -> fx_media_opened_next;
 800f4dc:	687a      	ldr	r2, [r7, #4]
 800f4de:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800f4e2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* See if we have to update the opened list head pointer.  */
        if (_fx_system_media_opened_ptr == media_ptr)
 800f4e6:	4b17      	ldr	r3, [pc, #92]	; (800f544 <_fx_media_close+0x3a8>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	687a      	ldr	r2, [r7, #4]
 800f4ec:	429a      	cmp	r2, r3
 800f4ee:	d104      	bne.n	800f4fa <_fx_media_close+0x35e>
        {

            /* Yes, move the head pointer to the next opened media. */
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800f4f6:	4a13      	ldr	r2, [pc, #76]	; (800f544 <_fx_media_close+0x3a8>)
 800f4f8:	6013      	str	r3, [r2, #0]
        }
    }

    /* Decrement the opened media counter.  */
    _fx_system_media_opened_count--;
 800f4fa:	4b11      	ldr	r3, [pc, #68]	; (800f540 <_fx_media_close+0x3a4>)
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	3b01      	subs	r3, #1
 800f500:	4a0f      	ldr	r2, [pc, #60]	; (800f540 <_fx_media_close+0x3a4>)
 800f502:	6013      	str	r3, [r2, #0]

    /* Finally, Indicate that this media is closed.  */
    media_ptr -> fx_media_id =  FX_MEDIA_CLOSED_ID;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	4a10      	ldr	r2, [pc, #64]	; (800f548 <_fx_media_close+0x3ac>)
 800f508:	601a      	str	r2, [r3, #0]
 800f50a:	6a3b      	ldr	r3, [r7, #32]
 800f50c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	f383 8810 	msr	PRIMASK, r3
}
 800f514:	bf00      	nop
#ifndef FX_DONT_CREATE_MUTEX

    /* Note that the protection is never released. The mutex delete
       service will handle all threads waiting access to this media
       control block.  */
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f51c:	4618      	mov	r0, r3
 800f51e:	f004 fc1f 	bl	8013d60 <_tx_mutex_delete>
#endif
#endif

    /* Invoke media close callback. */
    if (media_ptr -> fx_media_close_notify)
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d004      	beq.n	800f536 <_fx_media_close+0x39a>
    {
        media_ptr -> fx_media_close_notify(media_ptr);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800f532:	6878      	ldr	r0, [r7, #4]
 800f534:	4798      	blx	r3
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return success status to the caller.  */
    return(FX_SUCCESS);
 800f536:	2300      	movs	r3, #0
}
 800f538:	4618      	mov	r0, r3
 800f53a:	3738      	adds	r7, #56	; 0x38
 800f53c:	46bd      	mov	sp, r7
 800f53e:	bd80      	pop	{r7, pc}
 800f540:	24014c8c 	.word	0x24014c8c
 800f544:	24014c88 	.word	0x24014c88
 800f548:	4d454443 	.word	0x4d454443

0800f54c <_fx_media_flush>:
/*                                            disable cache,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_flush(FX_MEDIA  *media_ptr)
{
 800f54c:	b580      	push	{r7, lr}
 800f54e:	b090      	sub	sp, #64	; 0x40
 800f550:	af04      	add	r7, sp, #16
 800f552:	6078      	str	r0, [r7, #4]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_flushes++;
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f8d3 315c 	ldr.w	r3, [r3, #348]	; 0x15c
 800f55a:	1c5a      	adds	r2, r3, #1
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	4aa2      	ldr	r2, [pc, #648]	; (800f7f0 <_fx_media_flush+0x2a4>)
 800f568:	4293      	cmp	r3, r2
 800f56a:	d001      	beq.n	800f570 <_fx_media_flush+0x24>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800f56c:	2311      	movs	r3, #17
 800f56e:	e175      	b.n	800f85c <_fx_media_flush+0x310>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	4a9e      	ldr	r2, [pc, #632]	; (800f7f0 <_fx_media_flush+0x2a4>)
 800f576:	4293      	cmp	r3, r2
 800f578:	d001      	beq.n	800f57e <_fx_media_flush+0x32>
 800f57a:	2311      	movs	r3, #17
 800f57c:	e16e      	b.n	800f85c <_fx_media_flush+0x310>
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f584:	f04f 31ff 	mov.w	r1, #4294967295
 800f588:	4618      	mov	r0, r3
 800f58a:	f004 fc93 	bl	8013eb4 <_tx_mutex_get>
 800f58e:	4603      	mov	r3, r0
 800f590:	2b00      	cmp	r3, #0
 800f592:	d001      	beq.n	800f598 <_fx_media_flush+0x4c>
 800f594:	2311      	movs	r3, #17
 800f596:	e161      	b.n	800f85c <_fx_media_flush+0x310>

    /* Check for write protect at the media level (set by driver).  */
    if (media_ptr -> fx_media_driver_write_protect)
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d007      	beq.n	800f5b2 <_fx_media_flush+0x66>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	f004 fefb 	bl	80143a4 <_tx_mutex_put>

        /* Return write protect error.  */
        return(FX_WRITE_PROTECT);
 800f5ae:	2323      	movs	r3, #35	; 0x23
 800f5b0:	e154      	b.n	800f85c <_fx_media_flush+0x310>
    }

    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800f5b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800f5c0:	62bb      	str	r3, [r7, #40]	; 0x28
    while (open_count)
 800f5c2:	e040      	b.n	800f646 <_fx_media_flush+0xfa>
    {

        /* Look at each opened file to see if the same file is opened
           for writing and has been written to.  */
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800f5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5c6:	689b      	ldr	r3, [r3, #8]
 800f5c8:	2b01      	cmp	r3, #1
 800f5ca:	d136      	bne.n	800f63a <_fx_media_flush+0xee>
            (file_ptr -> fx_file_modified))
 800f5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ce:	7b1b      	ldrb	r3, [r3, #12]
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d032      	beq.n	800f63a <_fx_media_flush+0xee>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f5d4:	f3ef 8310 	mrs	r3, PRIMASK
 800f5d8:	613b      	str	r3, [r7, #16]
    return(posture);
 800f5da:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800f5dc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f5de:	b672      	cpsid	i
    return(int_posture);
 800f5e0:	68fb      	ldr	r3, [r7, #12]
        {

            /* Protect against update.  */
            FX_DISABLE_INTS
 800f5e2:	61bb      	str	r3, [r7, #24]

            /* Set the new time and date.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 800f5e4:	4b83      	ldr	r3, [pc, #524]	; (800f7f4 <_fx_media_flush+0x2a8>)
 800f5e6:	681a      	ldr	r2, [r3, #0]
 800f5e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 800f5ee:	4b82      	ldr	r3, [pc, #520]	; (800f7f8 <_fx_media_flush+0x2ac>)
 800f5f0:	681a      	ldr	r2, [r3, #0]
 800f5f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5f4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800f5f8:	69bb      	ldr	r3, [r7, #24]
 800f5fa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f5fc:	697b      	ldr	r3, [r7, #20]
 800f5fe:	f383 8810 	msr	PRIMASK, r3
}
 800f602:	bf00      	nop
            /* Restore interrupts.  */
            FX_RESTORE_INTS

            /* Copy the new file size into the directory entry.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
                file_ptr -> fx_file_current_file_size;
 800f604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f606:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800f60a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f60c:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                        media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
            }
            else
            {
#endif /* FX_ENABLE_EXFAT */
                status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 800f610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f612:	3368      	adds	r3, #104	; 0x68
 800f614:	4619      	mov	r1, r3
 800f616:	6878      	ldr	r0, [r7, #4]
 800f618:	f7fb f8ae 	bl	800a778 <_fx_directory_entry_write>
 800f61c:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Check for a good status.  */
            if (status != FX_SUCCESS)
 800f61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f620:	2b00      	cmp	r3, #0
 800f622:	d007      	beq.n	800f634 <_fx_media_flush+0xe8>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f62a:	4618      	mov	r0, r3
 800f62c:	f004 feba 	bl	80143a4 <_tx_mutex_put>

                /* Error writing the directory.  */
                return(status);
 800f630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f632:	e113      	b.n	800f85c <_fx_media_flush+0x310>
            }

            /* Clear the file modified flag.  */
            file_ptr -> fx_file_modified =  FX_FALSE;
 800f634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f636:	2200      	movs	r2, #0
 800f638:	731a      	strb	r2, [r3, #12]
        }

        /* Adjust the pointer and decrement the opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 800f63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f63c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f63e:	62bb      	str	r3, [r7, #40]	; 0x28
        open_count--;
 800f640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f642:	3b01      	subs	r3, #1
 800f644:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (open_count)
 800f646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d1bb      	bne.n	800f5c4 <_fx_media_flush+0x78>
    }

    /* Flush the cached individual FAT entries */
    _fx_utility_FAT_flush(media_ptr);
 800f64c:	6878      	ldr	r0, [r7, #4]
 800f64e:	f001 fd0c 	bl	801106a <_fx_utility_FAT_flush>

    /* Flush changed sector(s) in the primary FAT to secondary FATs.  */
    _fx_utility_FAT_map_flush(media_ptr);
 800f652:	6878      	ldr	r0, [r7, #4]
 800f654:	f002 f85a 	bl	801170c <_fx_utility_FAT_map_flush>
        _fx_utility_exFAT_bitmap_flush(media_ptr);
    }
#endif /* FX_ENABLE_EXFAT */

    /* Flush the internal logical sector cache.  */
    status =  _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_FALSE);
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800f65e:	2100      	movs	r1, #0
 800f660:	9102      	str	r1, [sp, #8]
 800f662:	e9cd 2300 	strd	r2, r3, [sp]
 800f666:	f04f 0201 	mov.w	r2, #1
 800f66a:	f04f 0300 	mov.w	r3, #0
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	f002 fbd6 	bl	8011e20 <_fx_utility_logical_sector_flush>
 800f674:	6278      	str	r0, [r7, #36]	; 0x24

    /* Check for a good status.  */
    if (status != FX_SUCCESS)
 800f676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d007      	beq.n	800f68c <_fx_media_flush+0x140>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f682:	4618      	mov	r0, r3
 800f684:	f004 fe8e 	bl	80143a4 <_tx_mutex_put>

        /* Error writing the directory.  */
        return(status);
 800f688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f68a:	e0e7      	b.n	800f85c <_fx_media_flush+0x310>
    }

    /* Determine if the media needs to have the additional information sector updated. This will
       only be the case for 32-bit FATs. The logic here only needs to be done if the last reported
       available cluster count is different that the currently available clusters.  */
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f690:	2b00      	cmp	r3, #0
 800f692:	f000 80bb 	beq.w	800f80c <_fx_media_flush+0x2c0>
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters))
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800f69e:	429a      	cmp	r2, r3
 800f6a0:	f000 80b4 	beq.w	800f80c <_fx_media_flush+0x2c0>
    ULONG  signature;

#ifndef FX_DISABLE_CACHE

        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	69db      	ldr	r3, [r3, #28]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	623b      	str	r3, [r7, #32]

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~(ULONG64)0);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	69d9      	ldr	r1, [r3, #28]
 800f6b0:	f04f 32ff 	mov.w	r2, #4294967295
 800f6b4:	f04f 33ff 	mov.w	r3, #4294967295
 800f6b8:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	69db      	ldr	r3, [r3, #28]
 800f6c0:	2200      	movs	r2, #0
 800f6c2:	745a      	strb	r2, [r3, #17]
#else
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2290      	movs	r2, #144	; 0x90
 800f6d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6a3a      	ldr	r2, [r7, #32]
 800f6d8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 800f6e6:	687b      	ldr	r3, [r7, #4]
 800f6e8:	2201      	movs	r2, #1
 800f6ea:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	2203      	movs	r2, #3
 800f6f2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800f6fc:	1c5a      	adds	r2, r3, #1
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f70a:	6878      	ldr	r0, [r7, #4]
 800f70c:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f714:	2b00      	cmp	r3, #0
 800f716:	d007      	beq.n	800f728 <_fx_media_flush+0x1dc>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f71e:	4618      	mov	r0, r3
 800f720:	f004 fe40 	bl	80143a4 <_tx_mutex_put>

            /* Return the error status.  */
            return(FX_IO_ERROR);
 800f724:	2390      	movs	r3, #144	; 0x90
 800f726:	e099      	b.n	800f85c <_fx_media_flush+0x310>
        }

        /* Setup a pointer into the FAT32 additional information sector.  */
        buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f72e:	623b      	str	r3, [r7, #32]

        /* Pickup the first signature long word.  */
        signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800f730:	6a38      	ldr	r0, [r7, #32]
 800f732:	f001 f93f 	bl	80109b4 <_fx_utility_32_unsigned_read>
 800f736:	61f8      	str	r0, [r7, #28]

        /* Determine if the signature is correct.  */
        if (signature == 0x41615252)
 800f738:	69fb      	ldr	r3, [r7, #28]
 800f73a:	4a30      	ldr	r2, [pc, #192]	; (800f7fc <_fx_media_flush+0x2b0>)
 800f73c:	4293      	cmp	r3, r2
 800f73e:	d165      	bne.n	800f80c <_fx_media_flush+0x2c0>
        {

            /* Yes, the first signature is correct, now pickup the next signature.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 800f740:	6a3b      	ldr	r3, [r7, #32]
 800f742:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f746:	4618      	mov	r0, r3
 800f748:	f001 f934 	bl	80109b4 <_fx_utility_32_unsigned_read>
 800f74c:	61f8      	str	r0, [r7, #28]

            /* Determine if this signature is correct.  */
            if (signature == 0x61417272)
 800f74e:	69fb      	ldr	r3, [r7, #28]
 800f750:	4a2b      	ldr	r2, [pc, #172]	; (800f800 <_fx_media_flush+0x2b4>)
 800f752:	4293      	cmp	r3, r2
 800f754:	d15a      	bne.n	800f80c <_fx_media_flush+0x2c0>
            {

                /* Yes, we have a good FAT32 additional information sector.  */

                /* Set the free cluster count to the available clusters in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[488], media_ptr -> fx_media_available_clusters);
 800f756:	6a3b      	ldr	r3, [r7, #32]
 800f758:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f760:	4619      	mov	r1, r3
 800f762:	4610      	mov	r0, r2
 800f764:	f001 f943 	bl	80109ee <_fx_utility_32_unsigned_write>

                /* Set the next free cluster number hint to starting search cluster in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[492], media_ptr -> fx_media_cluster_search_start);
 800f768:	6a3b      	ldr	r3, [r7, #32]
 800f76a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f774:	4619      	mov	r1, r3
 800f776:	4610      	mov	r0, r2
 800f778:	f001 f939 	bl	80109ee <_fx_utility_32_unsigned_write>

                /* Now write the sector back out to the media.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2201      	movs	r2, #1
 800f780:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	2290      	movs	r2, #144	; 0x90
 800f788:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	6a3a      	ldr	r2, [r7, #32]
 800f790:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          1;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2201      	movs	r2, #1
 800f7a2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	2203      	movs	r2, #3
 800f7aa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                /* Set the system write flag since we are writing a directory sector.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	2201      	movs	r2, #1
 800f7b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver write sector(s) requests.  */
                media_ptr -> fx_media_driver_write_requests++;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800f7bc:	1c5a      	adds	r2, r3, #1
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Invoke the driver to write the FAT32 additional information sector.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f7ca:	6878      	ldr	r0, [r7, #4]
 800f7cc:	4798      	blx	r3

                /* Clear the system write flag.  */
                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Determine if the FAT32 sector was written correctly. */
                if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d011      	beq.n	800f804 <_fx_media_flush+0x2b8>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f004 fddc 	bl	80143a4 <_tx_mutex_put>

                    /* Return the sector IO error status.  */
                    return(FX_IO_ERROR);
 800f7ec:	2390      	movs	r3, #144	; 0x90
 800f7ee:	e035      	b.n	800f85c <_fx_media_flush+0x310>
 800f7f0:	4d454449 	.word	0x4d454449
 800f7f4:	24014c94 	.word	0x24014c94
 800f7f8:	24014c90 	.word	0x24014c90
 800f7fc:	41615252 	.word	0x41615252
 800f800:	61417272 	.word	0x61417272
                }

                /* Successful update of the FAT32 additional information sector. Update the
                   last written available cluster count.  */
                media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	66da      	str	r2, [r3, #108]	; 0x6c
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver flush requests.  */
    media_ptr -> fx_media_driver_flush_requests++;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800f812:	1c5a      	adds	r2, r3, #1
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
#endif

    /* Build the "flush" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_FLUSH;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	2202      	movs	r2, #2
 800f81e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2290      	movs	r2, #144	; 0x90
 800f826:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the flush request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	4798      	blx	r3

    /* Determine if the I/O driver flushed successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d007      	beq.n	800f84e <_fx_media_flush+0x302>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f844:	4618      	mov	r0, r3
 800f846:	f004 fdad 	bl	80143a4 <_tx_mutex_put>

        /* Return the driver error status.  */
        return(FX_IO_ERROR);
 800f84a:	2390      	movs	r3, #144	; 0x90
 800f84c:	e006      	b.n	800f85c <_fx_media_flush+0x310>
    }

    /* Release media protection.  */
    FX_UNPROTECT
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800f854:	4618      	mov	r0, r3
 800f856:	f004 fda5 	bl	80143a4 <_tx_mutex_put>

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 800f85a:	2300      	movs	r3, #0
}
 800f85c:	4618      	mov	r0, r3
 800f85e:	3730      	adds	r7, #48	; 0x30
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}

0800f864 <_fx_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                     VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                     VOID *memory_ptr, ULONG memory_size)
{
 800f864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f868:	b09a      	sub	sp, #104	; 0x68
 800f86a:	af04      	add	r7, sp, #16
 800f86c:	60f8      	str	r0, [r7, #12]
 800f86e:	60b9      	str	r1, [r7, #8]
 800f870:	607a      	str	r2, [r7, #4]
 800f872:	603b      	str	r3, [r7, #0]
FX_INT_SAVE_AREA


#ifndef FX_DISABLE_BUILD_OPTIONS
    /* Reference the version ID and option words to ensure they are linked in.  */
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 800f874:	4bba      	ldr	r3, [pc, #744]	; (800fb60 <_fx_media_open+0x2fc>)
 800f876:	681a      	ldr	r2, [r3, #0]
 800f878:	4bba      	ldr	r3, [pc, #744]	; (800fb64 <_fx_media_open+0x300>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	431a      	orrs	r2, r3
 800f87e:	4bba      	ldr	r3, [pc, #744]	; (800fb68 <_fx_media_open+0x304>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	4313      	orrs	r3, r2
 800f884:	2b00      	cmp	r3, #0
 800f886:	d003      	beq.n	800f890 <_fx_media_open+0x2c>
        _fx_version_id[0] == 0)
 800f888:	4bb8      	ldr	r3, [pc, #736]	; (800fb6c <_fx_media_open+0x308>)
 800f88a:	781b      	ldrb	r3, [r3, #0]
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d102      	bne.n	800f896 <_fx_media_open+0x32>
    {

        /* We should never get here!  */
        return(FX_NOT_IMPLEMENTED);
 800f890:	2322      	movs	r3, #34	; 0x22
 800f892:	f000 bd53 	b.w	801033c <_fx_media_open+0xad8>
#ifdef FX_DISABLE_CACHE
    media_ptr -> fx_media_memory_buffer_sector = (ULONG64)-1;
#endif /* FX_DISABLE_CACHE */

    /* Save the basic information in the media control block.  */
    media_ptr -> fx_media_name =                        media_name;
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	68ba      	ldr	r2, [r7, #8]
 800f89a:	605a      	str	r2, [r3, #4]
    media_ptr -> fx_media_driver_entry =                media_driver;
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	687a      	ldr	r2, [r7, #4]
 800f8a0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    media_ptr -> fx_media_memory_buffer =               (UCHAR *)memory_ptr;
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f8a8:	609a      	str	r2, [r3, #8]
    media_ptr -> fx_media_memory_size =                 memory_size;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800f8ae:	60da      	str	r2, [r3, #12]
#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    media_ptr -> fx_media_disable_burst_cache =         FX_FALSE;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f8b6:	461a      	mov	r2, r3
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	f8c2 34a4 	str.w	r3, [r2, #1188]	; 0x4a4
    media_ptr -> fx_media_FAT_type =                    0;
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	f883 24b0 	strb.w	r2, [r3, #1200]	; 0x4b0
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Save the original memory pointer.  */
    original_memory_ptr =  (UCHAR *)memory_ptr;
 800f8ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f8cc:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Clear the optional media statistics.  */
    media_ptr -> fx_media_directory_attributes_reads =  0;
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    media_ptr -> fx_media_directory_attributes_sets =  0;
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	2200      	movs	r2, #0
 800f8da:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    media_ptr -> fx_media_directory_creates =  0;
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    media_ptr -> fx_media_directory_default_gets =  0;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    media_ptr -> fx_media_directory_default_sets =  0;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	2200      	movs	r2, #0
 800f8f2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    media_ptr -> fx_media_directory_deletes =  0;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    media_ptr -> fx_media_directory_first_entry_finds =  0;
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	2200      	movs	r2, #0
 800f902:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    media_ptr -> fx_media_directory_first_full_entry_finds =  0;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	2200      	movs	r2, #0
 800f90a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    media_ptr -> fx_media_directory_information_gets =  0;
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	2200      	movs	r2, #0
 800f912:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    media_ptr -> fx_media_directory_local_path_clears =  0;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2200      	movs	r2, #0
 800f91a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    media_ptr -> fx_media_directory_local_path_gets =  0;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	2200      	movs	r2, #0
 800f922:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    media_ptr -> fx_media_directory_local_path_restores =  0;
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	2200      	movs	r2, #0
 800f92a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    media_ptr -> fx_media_directory_local_path_sets =  0;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	2200      	movs	r2, #0
 800f932:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    media_ptr -> fx_media_directory_name_tests =  0;
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	2200      	movs	r2, #0
 800f93a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    media_ptr -> fx_media_directory_next_entry_finds =  0;
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	2200      	movs	r2, #0
 800f942:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    media_ptr -> fx_media_directory_next_full_entry_finds =  0;
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	2200      	movs	r2, #0
 800f94a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    media_ptr -> fx_media_directory_renames =  0;
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	2200      	movs	r2, #0
 800f952:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    media_ptr -> fx_media_file_allocates =  0;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	2200      	movs	r2, #0
 800f95a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    media_ptr -> fx_media_file_attributes_reads =  0;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	2200      	movs	r2, #0
 800f962:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    media_ptr -> fx_media_file_attributes_sets =  0;
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	2200      	movs	r2, #0
 800f96a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    media_ptr -> fx_media_file_best_effort_allocates =  0;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	2200      	movs	r2, #0
 800f972:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    media_ptr -> fx_media_file_closes =  0;
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	2200      	movs	r2, #0
 800f97a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    media_ptr -> fx_media_file_creates =  0;
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	2200      	movs	r2, #0
 800f982:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    media_ptr -> fx_media_file_deletes =  0;
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	2200      	movs	r2, #0
 800f98a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    media_ptr -> fx_media_file_opens =  0;
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	2200      	movs	r2, #0
 800f992:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    media_ptr -> fx_media_file_reads =  0;
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	2200      	movs	r2, #0
 800f99a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    media_ptr -> fx_media_file_relative_seeks =  0;
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	2200      	movs	r2, #0
 800f9a2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    media_ptr -> fx_media_file_renames =  0;
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    media_ptr -> fx_media_file_seeks =  0;
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	2200      	movs	r2, #0
 800f9b2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    media_ptr -> fx_media_file_truncates =  0;
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	2200      	movs	r2, #0
 800f9ba:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    media_ptr -> fx_media_file_truncate_releases =  0;
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    media_ptr -> fx_media_file_writes =  0;
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	2200      	movs	r2, #0
 800f9ca:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    media_ptr -> fx_media_aborts =  0;
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    media_ptr -> fx_media_flushes =  0;
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	2200      	movs	r2, #0
 800f9da:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    media_ptr -> fx_media_reads =  0;
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    media_ptr -> fx_media_writes =  0;
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	2200      	movs	r2, #0
 800f9ea:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    media_ptr -> fx_media_directory_entry_reads =  0;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    media_ptr -> fx_media_directory_entry_writes =  0;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    media_ptr -> fx_media_directory_searches =  0;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	2200      	movs	r2, #0
 800fa02:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
    media_ptr -> fx_media_directory_search_cache_hits =  0;
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	2200      	movs	r2, #0
 800fa0a:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
#endif
    media_ptr -> fx_media_directory_free_searches =  0;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	2200      	movs	r2, #0
 800fa12:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
    media_ptr -> fx_media_fat_entry_reads =  0;
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	2200      	movs	r2, #0
 800fa1a:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_writes =  0;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	2200      	movs	r2, #0
 800fa22:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    media_ptr -> fx_media_fat_entry_cache_read_hits =  0;
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	2200      	movs	r2, #0
 800fa2a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    media_ptr -> fx_media_fat_entry_cache_read_misses =  0;
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	2200      	movs	r2, #0
 800fa32:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    media_ptr -> fx_media_fat_entry_cache_write_hits =  0;
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	2200      	movs	r2, #0
 800fa3a:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    media_ptr -> fx_media_fat_entry_cache_write_misses =  0;
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	2200      	movs	r2, #0
 800fa42:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    media_ptr -> fx_media_fat_cache_flushes =  0;
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	2200      	movs	r2, #0
 800fa4a:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    media_ptr -> fx_media_fat_sector_reads =  0;
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	2200      	movs	r2, #0
 800fa52:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    media_ptr -> fx_media_fat_sector_writes =  0;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	2200      	movs	r2, #0
 800fa5a:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    media_ptr -> fx_media_logical_sector_reads =  0;
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	2200      	movs	r2, #0
 800fa62:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    media_ptr -> fx_media_logical_sector_writes =  0;
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	2200      	movs	r2, #0
 800fa6a:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    media_ptr -> fx_media_logical_sector_cache_read_hits =  0;
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	2200      	movs	r2, #0
 800fa72:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    media_ptr -> fx_media_logical_sector_cache_read_misses =  0;
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	2200      	movs	r2, #0
 800fa7a:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    media_ptr -> fx_media_driver_read_requests =  0;
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	2200      	movs	r2, #0
 800fa82:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    media_ptr -> fx_media_driver_write_requests =  0;
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	2200      	movs	r2, #0
 800fa8a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    media_ptr -> fx_media_driver_boot_read_requests =  0;
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	2200      	movs	r2, #0
 800fa92:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    media_ptr -> fx_media_driver_boot_write_requests =  0;
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	2200      	movs	r2, #0
 800fa9a:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    media_ptr -> fx_media_driver_release_sectors_requests =  0;
 800fa9e:	68fb      	ldr	r3, [r7, #12]
 800faa0:	2200      	movs	r2, #0
 800faa2:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    media_ptr -> fx_media_driver_flush_requests =  0;
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	2200      	movs	r2, #0
 800faaa:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_OPEN, media_ptr, media_driver, memory_ptr, memory_size, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Initialize the supplied media I/O driver.  First, build the
       initialize driver request.  */
    media_ptr -> fx_media_driver_request =              FX_DRIVER_INIT;
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	2204      	movs	r2, #4
 800fab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =               FX_IO_ERROR;
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	2290      	movs	r2, #144	; 0x90
 800faba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    media_ptr -> fx_media_driver_info =                 driver_info_ptr;
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	683a      	ldr	r2, [r7, #0]
 800fac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    media_ptr -> fx_media_driver_write_protect =        FX_FALSE;
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	2200      	movs	r2, #0
 800faca:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    media_ptr -> fx_media_driver_free_sector_update =   FX_FALSE;
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	2200      	movs	r2, #0
 800fad2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    media_ptr -> fx_media_driver_data_sector_read =     FX_FALSE;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	2200      	movs	r2, #0
 800fada:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_INIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the initialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800fae4:	68f8      	ldr	r0, [r7, #12]
 800fae6:	4798      	blx	r3

    /* Determine if the I/O driver initialized successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d002      	beq.n	800faf8 <_fx_media_open+0x294>
    {

        /* Return the driver error status.  */
        return(FX_IO_ERROR);
 800faf2:	2390      	movs	r3, #144	; 0x90
 800faf4:	f000 bc22 	b.w	801033c <_fx_media_open+0xad8>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver boot read requests.  */
    media_ptr -> fx_media_driver_boot_read_requests++;
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800fafe:	1c5a      	adds	r2, r3, #1
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
#endif

    /* Read the boot sector from the device.  Build the read boot sector
       command.  */
    media_ptr -> fx_media_driver_request =          FX_DRIVER_BOOT_READ;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	2205      	movs	r2, #5
 800fb0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	2290      	movs	r2, #144	; 0x90
 800fb12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    media_ptr -> fx_media_driver_buffer =           memory_ptr;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fb1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    media_ptr -> fx_media_driver_sectors =          1;
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	2201      	movs	r2, #1
 800fb22:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    media_ptr -> fx_media_driver_sector_type =      FX_BOOT_SECTOR;
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	2201      	movs	r2, #1
 800fb2a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_BOOT_READ, media_ptr, memory_ptr, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Invoke the driver to read the boot sector.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800fb34:	68f8      	ldr	r0, [r7, #12]
 800fb36:	4798      	blx	r3

    /* Determine if the boot sector was read correctly. */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d016      	beq.n	800fb70 <_fx_media_open+0x30c>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	2208      	movs	r2, #8
 800fb46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	2290      	movs	r2, #144	; 0x90
 800fb4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800fb58:	68f8      	ldr	r0, [r7, #12]
 800fb5a:	4798      	blx	r3

        /* Return the boot sector error status.  */
        return(FX_BOOT_ERROR);
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	e3ed      	b.n	801033c <_fx_media_open+0xad8>
 800fb60:	24014ca0 	.word	0x24014ca0
 800fb64:	24014ca4 	.word	0x24014ca4
 800fb68:	24014ca8 	.word	0x24014ca8
 800fb6c:	24000010 	.word	0x24000010
    }

    /* Extract and validate the media parameters from the boot sector.  */
    if (_fx_media_boot_info_extract(media_ptr) != FX_SUCCESS)
 800fb70:	68f8      	ldr	r0, [r7, #12]
 800fb72:	f7ff fa69 	bl	800f048 <_fx_media_boot_info_extract>
 800fb76:	4603      	mov	r3, r0
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d00e      	beq.n	800fb9a <_fx_media_open+0x336>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	2208      	movs	r2, #8
 800fb80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	2290      	movs	r2, #144	; 0x90
 800fb88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800fb92:	68f8      	ldr	r0, [r7, #12]
 800fb94:	4798      	blx	r3

        /* Return the invalid media error status.  */
        return(FX_MEDIA_INVALID);
 800fb96:	2302      	movs	r3, #2
 800fb98:	e3d0      	b.n	801033c <_fx_media_open+0xad8>
    }

    /* Pickup the additional info sector number. This will only be used in FAT32 situations.  */
    additional_info_sector =  _fx_utility_16_unsigned_read(&media_ptr -> fx_media_driver_buffer[48]);
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fba0:	3330      	adds	r3, #48	; 0x30
 800fba2:	4618      	mov	r0, r3
 800fba4:	f000 fede 	bl	8010964 <_fx_utility_16_unsigned_read>
 800fba8:	63f8      	str	r0, [r7, #60]	; 0x3c

    /* Is there at least one?  */
    if (memory_size < media_ptr -> fx_media_bytes_per_sector)
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fbb0:	429a      	cmp	r2, r3
 800fbb2:	d20e      	bcs.n	800fbd2 <_fx_media_open+0x36e>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	2208      	movs	r2, #8
 800fbb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	2290      	movs	r2, #144	; 0x90
 800fbc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800fbca:	68f8      	ldr	r0, [r7, #12]
 800fbcc:	4798      	blx	r3

        /* Error in the buffer size supplied by user.  */
        return(FX_BUFFER_ERROR);
 800fbce:	2321      	movs	r3, #33	; 0x21
 800fbd0:	e3b4      	b.n	801033c <_fx_media_open+0xad8>
    }

#ifndef FX_DISABLE_CACHE
    /* Determine how many logical sectors can be cached with user's supplied
       buffer area - there must be at least enough for one sector!  */
    media_ptr -> fx_media_sector_cache_size =  memory_size / media_ptr -> fx_media_bytes_per_sector;
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbd6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fbd8:	fbb2 f2f3 	udiv	r2, r2, r3
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	615a      	str	r2, [r3, #20]
    /* If trace is enabled, register this object.  */
    FX_TRACE_OBJECT_REGISTER(FX_TRACE_OBJECT_TYPE_MEDIA, media_ptr, media_name, FX_MAX_FAT_CACHE, media_ptr -> fx_media_sector_cache_size)
    
    /* Adjust the internal cache to fit the fixed number of sector cache control blocks
       built into the media control block.  */
    if (media_ptr -> fx_media_sector_cache_size > FX_MAX_SECTOR_CACHE)
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	695b      	ldr	r3, [r3, #20]
 800fbe4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fbe8:	d903      	bls.n	800fbf2 <_fx_media_open+0x38e>
    {

        /* Adjust the number of cache sectors downward.  If this is insufficient,
           the FX_MAX_SECTOR_CACHE constant in FX_API.H must be changed and the FileX
           library must be rebuilt.  */
        media_ptr -> fx_media_sector_cache_size =  FX_MAX_SECTOR_CACHE;
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fbf0:	615a      	str	r2, [r3, #20]
    }

    /* Otherwise, everything is okay.  Initialize the data structures for managing the
       logical sector cache.  */
    i =  (UINT)media_ptr -> fx_media_sector_cache_size;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	695b      	ldr	r3, [r3, #20]
 800fbf6:	64fb      	str	r3, [r7, #76]	; 0x4c
    cache_entry_ptr =  media_ptr -> fx_media_sector_cache;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 800fbfe:	647b      	str	r3, [r7, #68]	; 0x44
    while (i--)
 800fc00:	e01c      	b.n	800fc3c <_fx_media_open+0x3d8>
    {

        /* Initialize each of the cache entries.  */
        cache_entry_ptr -> fx_cached_sector_memory_buffer =  (UCHAR *)memory_ptr;
 800fc02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fc06:	601a      	str	r2, [r3, #0]
        cache_entry_ptr -> fx_cached_sector =                (~(ULONG64)0);
 800fc08:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fc0a:	f04f 32ff 	mov.w	r2, #4294967295
 800fc0e:	f04f 33ff 	mov.w	r3, #4294967295
 800fc12:	e9c1 2302 	strd	r2, r3, [r1, #8]
        cache_entry_ptr -> fx_cached_sector_buffer_dirty =   FX_FALSE;
 800fc16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc18:	2200      	movs	r2, #0
 800fc1a:	741a      	strb	r2, [r3, #16]
        cache_entry_ptr -> fx_cached_sector_valid =          FX_FALSE;
 800fc1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc1e:	2200      	movs	r2, #0
 800fc20:	745a      	strb	r2, [r3, #17]
        cache_entry_ptr -> fx_cached_sector_next_used =      cache_entry_ptr + 1;
 800fc22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc24:	f103 0218 	add.w	r2, r3, #24
 800fc28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc2a:	615a      	str	r2, [r3, #20]

        /* Move to the next cache sector entry.  */
        cache_entry_ptr++;
 800fc2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc2e:	3318      	adds	r3, #24
 800fc30:	647b      	str	r3, [r7, #68]	; 0x44

        /* Update the memory pointer to the next buffer slot.  */
        memory_ptr =  (VOID *)(((UCHAR *)memory_ptr) + media_ptr -> fx_media_bytes_per_sector);
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc36:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fc38:	4413      	add	r3, r2
 800fc3a:	67bb      	str	r3, [r7, #120]	; 0x78
    while (i--)
 800fc3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc3e:	1e5a      	subs	r2, r3, #1
 800fc40:	64fa      	str	r2, [r7, #76]	; 0x4c
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d1dd      	bne.n	800fc02 <_fx_media_open+0x39e>
    }

    /* Backup to the last cache entry to set its next pointer to NULL.  */
    cache_entry_ptr--;
 800fc46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc48:	3b18      	subs	r3, #24
 800fc4a:	647b      	str	r3, [r7, #68]	; 0x44
    cache_entry_ptr -> fx_cached_sector_next_used =  FX_NULL;
 800fc4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fc4e:	2200      	movs	r2, #0
 800fc50:	615a      	str	r2, [r3, #20]

    /* Remember the last memory address used by the caching logic.  */
    media_ptr -> fx_media_sector_cache_end =  ((UCHAR *)memory_ptr) - 1;
 800fc52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc54:	1e5a      	subs	r2, r3, #1
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	619a      	str	r2, [r3, #24]

    /* Setup the head pointer of the list.  */
    media_ptr -> fx_media_sector_cache_list_ptr =  media_ptr -> fx_media_sector_cache;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	f503 624a 	add.w	r2, r3, #3232	; 0xca0
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	61da      	str	r2, [r3, #28]

    /* Setup the bit map that keeps track of the valid hashed cache logical sectors.  */
    media_ptr -> fx_media_sector_cache_hashed_sector_valid =  0;
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	2200      	movs	r2, #0
 800fc68:	621a      	str	r2, [r3, #32]

    /* Clear the counter of the number of outstanding dirty sectors.  */
    media_ptr -> fx_media_sector_cache_dirty_count =  0;
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Determine if the logical sector cache should be managed by the hash function
       instead of the linear search. The cache must be a power of 2 that is between the
       minimum and maximum cache size.  */
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	695b      	ldr	r3, [r3, #20]
 800fc74:	2b0f      	cmp	r3, #15
 800fc76:	d91a      	bls.n	800fcae <_fx_media_open+0x44a>
        ((media_ptr -> fx_media_sector_cache_size ^ (media_ptr -> fx_media_sector_cache_size - 1)) ==
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	695a      	ldr	r2, [r3, #20]
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	695b      	ldr	r3, [r3, #20]
 800fc80:	3b01      	subs	r3, #1
 800fc82:	405a      	eors	r2, r3
         (media_ptr -> fx_media_sector_cache_size | (media_ptr -> fx_media_sector_cache_size - 1))))
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	6959      	ldr	r1, [r3, #20]
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	695b      	ldr	r3, [r3, #20]
 800fc8c:	3b01      	subs	r3, #1
 800fc8e:	430b      	orrs	r3, r1
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 800fc90:	429a      	cmp	r2, r3
 800fc92:	d10c      	bne.n	800fcae <_fx_media_open+0x44a>
    {


        /* Set the logical sector cache hash flag. When this flag is set, the logical
           sector cache is accessed with a hash function instead of a linear search.  */
        media_ptr -> fx_media_sector_cache_hashed =  FX_TRUE;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	2201      	movs	r2, #1
 800fc98:	611a      	str	r2, [r3, #16]
        media_ptr -> fx_media_sector_cache_hash_mask =
            ((media_ptr -> fx_media_sector_cache_size / FX_SECTOR_CACHE_DEPTH) - 1);
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	695b      	ldr	r3, [r3, #20]
 800fc9e:	089b      	lsrs	r3, r3, #2
 800fca0:	3b01      	subs	r3, #1
        media_ptr -> fx_media_sector_cache_hash_mask =
 800fca2:	68fa      	ldr	r2, [r7, #12]
 800fca4:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800fca8:	f8c2 34a0 	str.w	r3, [r2, #1184]	; 0x4a0
 800fcac:	e002      	b.n	800fcb4 <_fx_media_open+0x450>
    }
    else
    {

        /* Clear the logical sector cache flag.  */
        media_ptr -> fx_media_sector_cache_hashed =  FX_FALSE;
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	611a      	str	r2, [r3, #16]
    media_ptr -> fx_media_memory_buffer = memory_ptr;
#endif /* FX_DISABLE_CACHE */

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Initialize the FAT cache entry array.  */
    for (i = 0; i < FX_MAX_FAT_CACHE; i++)
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fcb8:	e023      	b.n	800fd02 <_fx_media_open+0x49e>
    {

        /* Clear entry in the FAT cache.  */
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 800fcba:	68f9      	ldr	r1, [r7, #12]
 800fcbc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fcbe:	4613      	mov	r3, r2
 800fcc0:	005b      	lsls	r3, r3, #1
 800fcc2:	4413      	add	r3, r2
 800fcc4:	009b      	lsls	r3, r3, #2
 800fcc6:	440b      	add	r3, r1
 800fcc8:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800fccc:	2200      	movs	r2, #0
 800fcce:	601a      	str	r2, [r3, #0]
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 800fcd0:	68f9      	ldr	r1, [r7, #12]
 800fcd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fcd4:	4613      	mov	r3, r2
 800fcd6:	005b      	lsls	r3, r3, #1
 800fcd8:	4413      	add	r3, r2
 800fcda:	009b      	lsls	r3, r3, #2
 800fcdc:	440b      	add	r3, r1
 800fcde:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800fce2:	2200      	movs	r2, #0
 800fce4:	601a      	str	r2, [r3, #0]
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 800fce6:	68f9      	ldr	r1, [r7, #12]
 800fce8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fcea:	4613      	mov	r3, r2
 800fcec:	005b      	lsls	r3, r3, #1
 800fcee:	4413      	add	r3, r2
 800fcf0:	009b      	lsls	r3, r3, #2
 800fcf2:	440b      	add	r3, r1
 800fcf4:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FX_MAX_FAT_CACHE; i++)
 800fcfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcfe:	3301      	adds	r3, #1
 800fd00:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fd02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd04:	2b0f      	cmp	r3, #15
 800fd06:	d9d8      	bls.n	800fcba <_fx_media_open+0x456>
    }

    /* Initialize the secondary FAT update map.  */
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 800fd08:	2300      	movs	r3, #0
 800fd0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fd0c:	e009      	b.n	800fd22 <_fx_media_open+0x4be>
    {

        /* Clear bit map entry for secondary FAT update.  */
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
 800fd0e:	68fa      	ldr	r2, [r7, #12]
 800fd10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd12:	4413      	add	r3, r2
 800fd14:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800fd18:	2200      	movs	r2, #0
 800fd1a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 800fd1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd1e:	3301      	adds	r3, #1
 800fd20:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fd22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd24:	2b7f      	cmp	r3, #127	; 0x7f
 800fd26:	d9f2      	bls.n	800fd0e <_fx_media_open+0x4aa>
    if (media_ptr -> fx_media_FAT_type != FX_exFAT)
    {
#endif /* FX_ENABLE_EXFAT */

        /* Root_sector_start has been computed */
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
            (media_ptr -> fx_media_number_of_FATs *
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
             media_ptr -> fx_media_sectors_per_FAT);
 800fd30:	68f9      	ldr	r1, [r7, #12]
 800fd32:	6d89      	ldr	r1, [r1, #88]	; 0x58
            (media_ptr -> fx_media_number_of_FATs *
 800fd34:	fb01 f303 	mul.w	r3, r1, r3
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 800fd38:	441a      	add	r2, r3
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	649a      	str	r2, [r3, #72]	; 0x48

        /* Calculate the number of directory sectors.  */
        media_ptr -> fx_media_root_sectors =
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fd42:	015a      	lsls	r2, r3, #5
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 800fd48:	4413      	add	r3, r2
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800fd4a:	1e5a      	subs	r2, r3, #1
            media_ptr -> fx_media_bytes_per_sector;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800fd50:	fbb2 f2f3 	udiv	r2, r2, r3
        media_ptr -> fx_media_root_sectors =
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Calculate the starting data sector.  */
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
            media_ptr -> fx_media_root_sectors;
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 800fd60:	441a      	add	r2, r3
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	651a      	str	r2, [r3, #80]	; 0x50

        /* Calculate the total number of clusters.  */
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800fd6c:	68f9      	ldr	r1, [r7, #12]
 800fd6e:	6d09      	ldr	r1, [r1, #80]	; 0x50
 800fd70:	2000      	movs	r0, #0
 800fd72:	460c      	mov	r4, r1
 800fd74:	4605      	mov	r5, r0
 800fd76:	ebb2 0804 	subs.w	r8, r2, r4
 800fd7a:	eb63 0905 	sbc.w	r9, r3, r5
                                                            media_ptr -> fx_media_sectors_per_cluster);
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fd82:	2200      	movs	r2, #0
 800fd84:	469a      	mov	sl, r3
 800fd86:	4693      	mov	fp, r2
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 800fd88:	4652      	mov	r2, sl
 800fd8a:	465b      	mov	r3, fp
 800fd8c:	4640      	mov	r0, r8
 800fd8e:	4649      	mov	r1, r9
 800fd90:	f7f0 fc16 	bl	80005c0 <__aeabi_uldivmod>
 800fd94:	4602      	mov	r2, r0
 800fd96:	460b      	mov	r3, r1
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Determine if a 12-bit FAT is in use.  */
        if (media_ptr -> fx_media_total_clusters < FX_12_BIT_FAT_SIZE)
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fda0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fda4:	4293      	cmp	r3, r2
 800fda6:	d819      	bhi.n	800fddc <_fx_media_open+0x578>
        {

            /* Yes, 12-bit FAT is present.  Set flag accordingly.  */
            media_ptr -> fx_media_12_bit_FAT = FX_TRUE;
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	2201      	movs	r2, #1
 800fdac:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT = FX_FALSE;
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	665a      	str	r2, [r3, #100]	; 0x64
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT12;
#endif /* FX_ENABLE_EXFAT */

            /* No additional information sector in FAT12.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800fdc0:	461a      	mov	r2, r3
 800fdc2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800fdc6:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800fdd0:	461a      	mov	r2, r3
 800fdd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fdd6:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
 800fdda:	e037      	b.n	800fe4c <_fx_media_open+0x5e8>
        }
        else if (media_ptr -> fx_media_total_clusters < FX_16_BIT_FAT_SIZE)
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fde0:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 800fde4:	4293      	cmp	r3, r2
 800fde6:	d819      	bhi.n	800fe1c <_fx_media_open+0x5b8>
        {

            /* A 16-bit FAT is present.  Set flag accordingly.  */
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	2200      	movs	r2, #0
 800fdec:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT =  FX_FALSE;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	665a      	str	r2, [r3, #100]	; 0x64
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT16;
#endif /* FX_ENABLE_EXFAT */

            /* No additional information sector in FAT16.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800fe00:	461a      	mov	r2, r3
 800fe02:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800fe06:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 800fe0a:	68fb      	ldr	r3, [r7, #12]
 800fe0c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800fe10:	461a      	mov	r2, r3
 800fe12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fe16:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
 800fe1a:	e017      	b.n	800fe4c <_fx_media_open+0x5e8>
        }
        else
        {

            /* Yes, a 32-bit FAT is present.  */
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	2200      	movs	r2, #0
 800fe20:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT =  FX_TRUE;
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	2201      	movs	r2, #1
 800fe26:	665a      	str	r2, [r3, #100]	; 0x64
            media_ptr -> fx_media_FAT_type = FX_FAT32;
#endif /* FX_ENABLE_EXFAT */

            /* Save the additional information sector FAT32. This was read from the boot
               sector earlier in this routine. */
            media_ptr -> fx_media_FAT32_additional_info_sector =  additional_info_sector;
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fe2c:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1_32;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800fe34:	461a      	mov	r2, r3
 800fe36:	4b95      	ldr	r3, [pc, #596]	; (801008c <_fx_media_open+0x828>)
 800fe38:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2_32;
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800fe42:	461a      	mov	r2, r3
 800fe44:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800fe48:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
       it is variable in FAT32.  */
#ifdef FX_ENABLE_EXFAT
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE || 
        (media_ptr -> fx_media_FAT_type == FX_exFAT))
#else
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE)
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe50:	2b01      	cmp	r3, #1
 800fe52:	d15f      	bne.n	800ff14 <_fx_media_open+0x6b0>
        if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE)
        {
#endif /* FX_ENABLE_EXFAT */

            /* Root First cluster starts from at least cluster 2, or higher. */
            if (media_ptr -> fx_media_root_cluster_32 < FX_FAT_ENTRY_START)
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe58:	2b01      	cmp	r3, #1
 800fe5a:	d801      	bhi.n	800fe60 <_fx_media_open+0x5fc>
            {
                return(FX_MEDIA_INVALID);
 800fe5c:	2302      	movs	r3, #2
 800fe5e:	e26d      	b.n	801033c <_fx_media_open+0xad8>
            }

            /* Calculate logical number of root dir sector.  */
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe68:	3b02      	subs	r3, #2
                media_ptr -> fx_media_sectors_per_cluster;
 800fe6a:	68f9      	ldr	r1, [r7, #12]
 800fe6c:	6d49      	ldr	r1, [r1, #84]	; 0x54
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 800fe6e:	fb01 f303 	mul.w	r3, r1, r3
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 800fe72:	441a      	add	r2, r3
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	649a      	str	r2, [r3, #72]	; 0x48
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Calculate maximum possible value for fx_media_root_directory_entries */
        i = 0;
 800fe78:	2300      	movs	r3, #0
 800fe7a:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (cluster_number = media_ptr -> fx_media_root_cluster_32;;)
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe80:	657b      	str	r3, [r7, #84]	; 0x54
        {

            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800fe82:	f107 0310 	add.w	r3, r7, #16
 800fe86:	461a      	mov	r2, r3
 800fe88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fe8a:	68f8      	ldr	r0, [r7, #12]
 800fe8c:	f000 fdd0 	bl	8010a30 <_fx_utility_FAT_entry_read>
 800fe90:	63b8      	str	r0, [r7, #56]	; 0x38
            i++;
 800fe92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe94:	3301      	adds	r3, #1
 800fe96:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Determine if the read was successful.  */
            if (status != FX_SUCCESS)
 800fe98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d00e      	beq.n	800febc <_fx_media_open+0x658>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	2208      	movs	r2, #8
 800fea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	2290      	movs	r2, #144	; 0x90
 800feaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800feb4:	68f8      	ldr	r0, [r7, #12]
 800feb6:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800feb8:	2303      	movs	r3, #3
 800feba:	e23f      	b.n	801033c <_fx_media_open+0xad8>
            }

            if ((cluster_number == FAT_entry) || (i > media_ptr -> fx_media_total_clusters))
 800febc:	693b      	ldr	r3, [r7, #16]
 800febe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fec0:	429a      	cmp	r2, r3
 800fec2:	d004      	beq.n	800fece <_fx_media_open+0x66a>
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fec8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800feca:	429a      	cmp	r2, r3
 800fecc:	d90e      	bls.n	800feec <_fx_media_open+0x688>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	2208      	movs	r2, #8
 800fed2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	2290      	movs	r2, #144	; 0x90
 800feda:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800fee4:	68f8      	ldr	r0, [r7, #12]
 800fee6:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800fee8:	2303      	movs	r3, #3
 800feea:	e227      	b.n	801033c <_fx_media_open+0xad8>
            }
            if (FAT_entry >= FX_RESERVED_1_32)
 800feec:	693b      	ldr	r3, [r7, #16]
 800feee:	4a68      	ldr	r2, [pc, #416]	; (8010090 <_fx_media_open+0x82c>)
 800fef0:	4293      	cmp	r3, r2
 800fef2:	d802      	bhi.n	800fefa <_fx_media_open+0x696>
            {
                break;
            }
            cluster_number = FAT_entry;
 800fef4:	693b      	ldr	r3, [r7, #16]
 800fef6:	657b      	str	r3, [r7, #84]	; 0x54
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800fef8:	e7c3      	b.n	800fe82 <_fx_media_open+0x61e>
                break;
 800fefa:	bf00      	nop
        }

        /* Calculate the number of directory entries.  */
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ff02:	fb02 f303 	mul.w	r3, r2, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800ff06:	68fa      	ldr	r2, [r7, #12]
 800ff08:	6a92      	ldr	r2, [r2, #40]	; 0x28
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800ff0a:	fb02 f303 	mul.w	r3, r2, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800ff0e:	095a      	lsrs	r2, r3, #5
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	679a      	str	r2, [r3, #120]	; 0x78
    }

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Calculate the number of available clusters.  */
    media_ptr -> fx_media_available_clusters =  0;
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	2200      	movs	r2, #0
 800ff18:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the cluster search start to an invalid value.  */
    media_ptr -> fx_media_cluster_search_start =  0;
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Determine if there is 32-bit FAT additional information sector. */
    if (media_ptr -> fx_media_FAT32_additional_info_sector)
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	f000 808e 	beq.w	8010048 <_fx_media_open+0x7e4>
        /* Yes, read the FAT32 additional information sector to get the available cluster count and
           the hint for the first available cluster.  */

#ifndef FX_DISABLE_CACHE
        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	69db      	ldr	r3, [r3, #28]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	637b      	str	r3, [r7, #52]	; 0x34

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~((ULONG64) 0));
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	69d9      	ldr	r1, [r3, #28]
 800ff38:	f04f 32ff 	mov.w	r2, #4294967295
 800ff3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ff40:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	69db      	ldr	r3, [r3, #28]
 800ff48:	2200      	movs	r2, #0
 800ff4a:	745a      	strb	r2, [r3, #17]
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
        media_ptr -> fx_media_memory_buffer_sector = (ULONG64)-1;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	2200      	movs	r2, #0
 800ff50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	2290      	movs	r2, #144	; 0x90
 800ff58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ff60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	2201      	movs	r2, #1
 800ff72:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	2203      	movs	r2, #3
 800ff7a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800ff84:	1c5a      	adds	r2, r3, #1
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ff92:	68f8      	ldr	r0, [r7, #12]
 800ff94:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d150      	bne.n	8010042 <_fx_media_open+0x7de>
        {

            /* Yes, setup a pointer into the FAT32 additional information sector.  */
            buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ffa6:	637b      	str	r3, [r7, #52]	; 0x34

            /* Pickup the first signature long word.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800ffa8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ffaa:	f000 fd03 	bl	80109b4 <_fx_utility_32_unsigned_read>
 800ffae:	6338      	str	r0, [r7, #48]	; 0x30

            /* Determine if the signature is correct.  */
            if (signature == 0x41615252)
 800ffb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffb2:	4a38      	ldr	r2, [pc, #224]	; (8010094 <_fx_media_open+0x830>)
 800ffb4:	4293      	cmp	r3, r2
 800ffb6:	d140      	bne.n	801003a <_fx_media_open+0x7d6>
            {

                /* Yes, the first signature is correct, now pickup the next signature.  */
                signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 800ffb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffba:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	f000 fcf8 	bl	80109b4 <_fx_utility_32_unsigned_read>
 800ffc4:	6338      	str	r0, [r7, #48]	; 0x30

                /* Determine if this signature is correct.  */
                if (signature == 0x61417272)
 800ffc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffc8:	4a33      	ldr	r2, [pc, #204]	; (8010098 <_fx_media_open+0x834>)
 800ffca:	4293      	cmp	r3, r2
 800ffcc:	d131      	bne.n	8010032 <_fx_media_open+0x7ce>
                {

                    /* Yes, we have a good FAT32 additional information sector.  */

                    /* Pickup the current available cluster count on the media.  */
                    media_ptr -> fx_media_available_clusters =  _fx_utility_32_unsigned_read(&buffer_ptr[488]);
 800ffce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffd0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	f000 fced 	bl	80109b4 <_fx_utility_32_unsigned_read>
 800ffda:	4602      	mov	r2, r0
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	67da      	str	r2, [r3, #124]	; 0x7c

                    /* Initialize the last reported available cluster count to the same value.  */
                    media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	66da      	str	r2, [r3, #108]	; 0x6c

                    /* Pickup the hint for the starting free cluster search.  */
                    media_ptr -> fx_media_cluster_search_start =  _fx_utility_32_unsigned_read(&buffer_ptr[492]);
 800ffe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffea:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ffee:	4618      	mov	r0, r3
 800fff0:	f000 fce0 	bl	80109b4 <_fx_utility_32_unsigned_read>
 800fff4:	4602      	mov	r2, r0
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                    /* Perform a quick sanity check on the available cluster count and the starting free
                       cluster search.  */
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010004:	429a      	cmp	r2, r3
 8010006:	d80c      	bhi.n	8010022 <_fx_media_open+0x7be>
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010012:	3302      	adds	r3, #2
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 8010014:	429a      	cmp	r2, r3
 8010016:	d804      	bhi.n	8010022 <_fx_media_open+0x7be>
                        (media_ptr -> fx_media_cluster_search_start < FX_FAT_ENTRY_START))
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 801001e:	2b01      	cmp	r3, #1
 8010020:	d812      	bhi.n	8010048 <_fx_media_open+0x7e4>
                    {

                        /* Something is wrong, clear the available cluster count and search so the regular processing
                           is used.  */
                        media_ptr -> fx_media_available_clusters =    0;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	2200      	movs	r2, #0
 8010026:	67da      	str	r2, [r3, #124]	; 0x7c
                        media_ptr -> fx_media_cluster_search_start =  0;
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	2200      	movs	r2, #0
 801002c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8010030:	e00a      	b.n	8010048 <_fx_media_open+0x7e4>
                }
                else
                {

                    /* Signature is bad, invalidate the additional info sector.  */
                    media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	2200      	movs	r2, #0
 8010036:	669a      	str	r2, [r3, #104]	; 0x68
 8010038:	e006      	b.n	8010048 <_fx_media_open+0x7e4>
            }
            else
            {

                /* Signature is bad, invalidate the additional info sector.  */
                media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 801003a:	68fb      	ldr	r3, [r7, #12]
 801003c:	2200      	movs	r2, #0
 801003e:	669a      	str	r2, [r3, #104]	; 0x68
 8010040:	e002      	b.n	8010048 <_fx_media_open+0x7e4>
        }
        else
        {

            /* IO error trying to read additional information sector, invalidate the additional info sector.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	2200      	movs	r2, #0
 8010046:	669a      	str	r2, [r3, #104]	; 0x68

    /* Search the media to find the first available cluster as well as the total
       available clusters.  */

    /* Determine what type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801004c:	2b00      	cmp	r3, #0
 801004e:	d040      	beq.n	80100d2 <_fx_media_open+0x86e>

        /* A 12-bit FAT is present.  Utilize the FAT entry read utility to pickup
           each FAT entry's contents.  */

        /* Loop to read each cluster entry in the first FAT.  */
        for (cluster_number =  FX_FAT_ENTRY_START;
 8010050:	2302      	movs	r3, #2
 8010052:	657b      	str	r3, [r7, #84]	; 0x54
 8010054:	e036      	b.n	80100c4 <_fx_media_open+0x860>
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
             cluster_number++)
        {

            /* Read a FAT entry.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 8010056:	f107 0310 	add.w	r3, r7, #16
 801005a:	461a      	mov	r2, r3
 801005c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801005e:	68f8      	ldr	r0, [r7, #12]
 8010060:	f000 fce6 	bl	8010a30 <_fx_utility_FAT_entry_read>
 8010064:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if the read was successful.  */
            if (status != FX_SUCCESS)
 8010066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010068:	2b00      	cmp	r3, #0
 801006a:	d017      	beq.n	801009c <_fx_media_open+0x838>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	2208      	movs	r2, #8
 8010070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	2290      	movs	r2, #144	; 0x90
 8010078:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010082:	68f8      	ldr	r0, [r7, #12]
 8010084:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 8010086:	2303      	movs	r3, #3
 8010088:	e158      	b.n	801033c <_fx_media_open+0xad8>
 801008a:	bf00      	nop
 801008c:	0ffffff0 	.word	0x0ffffff0
 8010090:	0fffffef 	.word	0x0fffffef
 8010094:	41615252 	.word	0x41615252
 8010098:	61417272 	.word	0x61417272
            }

            /* Now determine if the FAT entry is available.  */
            if (FAT_entry == FX_FREE_CLUSTER)
 801009c:	693b      	ldr	r3, [r7, #16]
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d10d      	bne.n	80100be <_fx_media_open+0x85a>
            {

                /* Increment the number of available clusters.  */
                media_ptr -> fx_media_available_clusters++;
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80100a6:	1c5a      	adds	r2, r3, #1
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Determine if the starting free cluster has been found yet.  */
                if (media_ptr -> fx_media_cluster_search_start == 0)
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d103      	bne.n	80100be <_fx_media_open+0x85a>
                {

                    /* Remember the first free cluster to start further searches from.  */
                    media_ptr -> fx_media_cluster_search_start =  cluster_number;
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80100ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
             cluster_number++)
 80100be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100c0:	3301      	adds	r3, #1
 80100c2:	657b      	str	r3, [r7, #84]	; 0x54
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100c8:	3302      	adds	r3, #2
        for (cluster_number =  FX_FAT_ENTRY_START;
 80100ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80100cc:	429a      	cmp	r2, r3
 80100ce:	d3c2      	bcc.n	8010056 <_fx_media_open+0x7f2>
 80100d0:	e0b4      	b.n	801023c <_fx_media_open+0x9d8>
    }
#ifdef FX_ENABLE_EXFAT
    else if ((media_ptr -> fx_media_available_clusters == 0)
             && (media_ptr -> fx_media_FAT_type != FX_exFAT))
#else
    else if (media_ptr -> fx_media_available_clusters == 0)
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	f040 80b0 	bne.w	801023c <_fx_media_open+0x9d8>
        /* A 16 or 32-bit FAT is present. Read directly into the logical sector
           cache memory to optimize I/O on larger devices. Since we are looking for
           values of zero, endian issues are not important.  */

        /* Invalidate the current logical sector cache.  */
        _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_TRUE);
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80100e2:	2101      	movs	r1, #1
 80100e4:	9102      	str	r1, [sp, #8]
 80100e6:	e9cd 2300 	strd	r2, r3, [sp]
 80100ea:	f04f 0201 	mov.w	r2, #1
 80100ee:	f04f 0300 	mov.w	r3, #0
 80100f2:	68f8      	ldr	r0, [r7, #12]
 80100f4:	f001 fe94 	bl	8011e20 <_fx_utility_logical_sector_flush>

        /* Reset the memory pointer.  */
        media_ptr -> fx_media_memory_buffer =  original_memory_ptr;
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80100fc:	609a      	str	r2, [r3, #8]

        /* Loop through all FAT sectors in the primary FAT.  The first two entries are
           examined in this loop, but they are always unavailable.  */
        cluster_number =  0;
 80100fe:	2300      	movs	r3, #0
 8010100:	657b      	str	r3, [r7, #84]	; 0x54
#ifndef FX_DISABLE_CACHE
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 8010102:	2300      	movs	r3, #0
 8010104:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010106:	e093      	b.n	8010230 <_fx_media_open+0x9cc>
        {

            /* Calculate the starting next FAT sector.  */
            FAT_sector =  media_ptr -> fx_media_reserved_sectors + i;
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801010c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801010e:	4413      	add	r3, r2
 8010110:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Calculate how many sectors to read.  */
            FAT_read_sectors =  media_ptr -> fx_media_sectors_per_FAT - i;
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010118:	1ad3      	subs	r3, r2, r3
 801011a:	653b      	str	r3, [r7, #80]	; 0x50

            /* Determine if there is not enough memory to read the remaining FAT sectors.  */
            if (FAT_read_sectors > media_ptr -> fx_media_sector_cache_size)
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	695b      	ldr	r3, [r3, #20]
 8010120:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010122:	429a      	cmp	r2, r3
 8010124:	d902      	bls.n	801012c <_fx_media_open+0x8c8>
            {
                FAT_read_sectors =  media_ptr -> fx_media_sector_cache_size;
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	695b      	ldr	r3, [r3, #20]
 801012a:	653b      	str	r3, [r7, #80]	; 0x50
            /* Calculate how many sectors to read.  */
            FAT_read_sectors =  1;
#endif /* FX_DISABLE_CACHE */

            /* Read the FAT sectors directly from the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	2200      	movs	r2, #0
 8010130:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	2290      	movs	r2, #144	; 0x90
 8010138:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	689a      	ldr	r2, [r3, #8]
 8010140:	68fb      	ldr	r3, [r7, #12]
 8010142:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            media_ptr -> fx_media_driver_logical_sector =   FAT_sector;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801014a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            media_ptr -> fx_media_driver_sectors =          FAT_read_sectors;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010152:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            media_ptr -> fx_media_driver_sector_type =      FX_FAT_SECTOR;
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	2202      	movs	r2, #2
 801015a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, FAT_sector, FAT_read_sectors, media_ptr -> fx_media_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Invoke the driver to read the FAT sectors.  */
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 801015e:	68fb      	ldr	r3, [r7, #12]
 8010160:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010164:	68f8      	ldr	r0, [r7, #12]
 8010166:	4798      	blx	r3

            /* Determine if the read was successful.  */
            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801016e:	2b00      	cmp	r3, #0
 8010170:	d00e      	beq.n	8010190 <_fx_media_open+0x92c>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	2208      	movs	r2, #8
 8010176:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	2290      	movs	r2, #144	; 0x90
 801017e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010188:	68f8      	ldr	r0, [r7, #12]
 801018a:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 801018c:	2303      	movs	r3, #3
 801018e:	e0d5      	b.n	801033c <_fx_media_open+0xad8>
            }

            /* Calculate the number of bytes in the buffer.  */
            bytes_in_buffer =  (media_ptr -> fx_media_bytes_per_sector * FAT_read_sectors);
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010196:	fb02 f303 	mul.w	r3, r2, r3
 801019a:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Walk through the sector cache memory to search for available clusters and the first
               available if not already found.  */
            for (j = 0; j < bytes_in_buffer;)
 801019c:	2300      	movs	r3, #0
 801019e:	64bb      	str	r3, [r7, #72]	; 0x48
 80101a0:	e03d      	b.n	801021e <_fx_media_open+0x9ba>
            {

                /* Check for a 32-bit FAT.  */
                if (media_ptr -> fx_media_32_bit_FAT)
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d009      	beq.n	80101be <_fx_media_open+0x95a>
                {

                    /* Pickup 32-bit FAT entry.  */
                    FAT_entry =  *((ULONG *)&(media_ptr -> fx_media_memory_buffer[j]));
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	689a      	ldr	r2, [r3, #8]
 80101ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101b0:	4413      	add	r3, r2
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	613b      	str	r3, [r7, #16]

                    /* Advance to next FAT entry.  */
                    j = j + 4;
 80101b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101b8:	3304      	adds	r3, #4
 80101ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80101bc:	e011      	b.n	80101e2 <_fx_media_open+0x97e>
                }
                else
                {

                    /* Process a 16-bit FAT entry.  */
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 80101be:	68fb      	ldr	r3, [r7, #12]
 80101c0:	689a      	ldr	r2, [r3, #8]
 80101c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101c4:	4413      	add	r3, r2
 80101c6:	781b      	ldrb	r3, [r3, #0]
 80101c8:	4619      	mov	r1, r3
                        ((((ULONG)(media_ptr -> fx_media_memory_buffer[j + 1])) & 0xFF) << 8);
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	689a      	ldr	r2, [r3, #8]
 80101ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101d0:	3301      	adds	r3, #1
 80101d2:	4413      	add	r3, r2
 80101d4:	781b      	ldrb	r3, [r3, #0]
 80101d6:	021b      	lsls	r3, r3, #8
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 80101d8:	430b      	orrs	r3, r1
 80101da:	613b      	str	r3, [r7, #16]

                    /* Advance to next FAT entry.  */
                    j =  j + 2;
 80101dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80101de:	3302      	adds	r3, #2
 80101e0:	64bb      	str	r3, [r7, #72]	; 0x48
                }

                /* Determine if the FAT entry is free.  */
                if (FAT_entry == FX_FREE_CLUSTER)
 80101e2:	693b      	ldr	r3, [r7, #16]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d10d      	bne.n	8010204 <_fx_media_open+0x9a0>
                {

                    /* Entry is free, increment available clusters.  */
                    media_ptr -> fx_media_available_clusters++;
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80101ec:	1c5a      	adds	r2, r3, #1
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	67da      	str	r2, [r3, #124]	; 0x7c

                    /* Determine if the starting free cluster has been found yet.  */
                    if (media_ptr -> fx_media_cluster_search_start == 0)
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d103      	bne.n	8010204 <_fx_media_open+0x9a0>
                    {

                        /* Remember the first free cluster to start further searches from.  */
                        media_ptr -> fx_media_cluster_search_start =  cluster_number;
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010200:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                    }
                }

                /* Increment the cluster number.  */
                cluster_number++;
 8010204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010206:	3301      	adds	r3, #1
 8010208:	657b      	str	r3, [r7, #84]	; 0x54

                /* Determine if we have reviewed all FAT entries.  */
                if (cluster_number >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801020e:	3302      	adds	r3, #2
 8010210:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010212:	429a      	cmp	r2, r3
 8010214:	d303      	bcc.n	801021e <_fx_media_open+0x9ba>
                {

                    /* Yes, we have looked at all the FAT entries.  */

                    /* Ensure that the outer loop terminates as well.  */
                    i = media_ptr -> fx_media_sectors_per_FAT;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801021a:	64fb      	str	r3, [r7, #76]	; 0x4c
                    break;
 801021c:	e003      	b.n	8010226 <_fx_media_open+0x9c2>
            for (j = 0; j < bytes_in_buffer;)
 801021e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010222:	429a      	cmp	r2, r3
 8010224:	d3bd      	bcc.n	80101a2 <_fx_media_open+0x93e>
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	695b      	ldr	r3, [r3, #20]
 801022a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801022c:	4413      	add	r3, r2
 801022e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010234:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010236:	429a      	cmp	r2, r3
 8010238:	f4ff af66 	bcc.w	8010108 <_fx_media_open+0x8a4>
    }
#endif /* FX_ENABLE_EXFAT */

    /* If there were no free clusters, just set the search pointer to the
       first cluster number.  */
    if (media_ptr -> fx_media_cluster_search_start == 0)
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010242:	2b00      	cmp	r3, #0
 8010244:	d103      	bne.n	801024e <_fx_media_open+0x9ea>
    {
        media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	2202      	movs	r2, #2
 801024a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Setup the current working directory fields to default to the root
       directory.  */
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
        media_ptr -> fx_media_default_path.fx_path_name_buffer;
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	f503 62ca 	add.w	r2, r3, #1616	; 0x650
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_short_name[0] =  0;
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	2200      	movs	r2, #0
 801025e:	f883 24e4 	strb.w	r2, [r3, #1252]	; 0x4e4
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0] =        0;
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 8010268:	2200      	movs	r2, #0
 801026a:	701a      	strb	r2, [r3, #0]
    media_ptr -> fx_media_default_path.fx_path_string[0] =                      (CHAR)0;
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	2200      	movs	r2, #0
 8010270:	f883 2550 	strb.w	r2, [r3, #1360]	; 0x550
    media_ptr -> fx_media_default_path.fx_path_string[FX_MAXIMUM_PATH - 1] =      (CHAR)0;
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	2200      	movs	r2, #0
 8010278:	f883 264f 	strb.w	r2, [r3, #1615]	; 0x64f
    media_ptr -> fx_media_default_path.fx_path_current_entry =                         0;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	2200      	movs	r2, #0
 8010280:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Invalidate the previously found directory entry.  */
    media_ptr -> fx_media_last_found_name[0] =  0;
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	2200      	movs	r2, #0
 8010288:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
#endif

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Initialize the opened file linked list and associated counter.  */
    media_ptr -> fx_media_opened_file_list =      FX_NULL;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	2200      	movs	r2, #0
 8010290:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    media_ptr -> fx_media_opened_file_count =     0;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	2200      	movs	r2, #0
 8010298:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
#ifndef FX_SINGLE_THREAD

#ifndef FX_DONT_CREATE_MUTEX

    /* Create ThreadX mutex for protection.  */
    tx_mutex_create(&(media_ptr -> fx_media_protect), "FileX Media Mutex", TX_NO_INHERIT);
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 80102a2:	2200      	movs	r2, #0
 80102a4:	4928      	ldr	r1, [pc, #160]	; (8010348 <_fx_media_open+0xae4>)
 80102a6:	4618      	mov	r0, r3
 80102a8:	f003 fd00 	bl	8013cac <_tx_mutex_create>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80102ac:	f3ef 8310 	mrs	r3, PRIMASK
 80102b0:	61fb      	str	r3, [r7, #28]
    return(posture);
 80102b2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80102b4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80102b6:	b672      	cpsid	i
    return(int_posture);
 80102b8:	69bb      	ldr	r3, [r7, #24]
    /* Protect against other threads accessing the media.  */
    FX_PROTECT
#endif

    /* Lockout interrupts.  */
    FX_DISABLE_INTS
 80102ba:	627b      	str	r3, [r7, #36]	; 0x24

    /* At this point, the media has been opened successfully.  Place the
       media on the linked list of currently opened media.  */

    /* Load the media ID field in the media control block.  */
    media_ptr -> fx_media_id =  (ULONG)FX_MEDIA_ID;
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	4a23      	ldr	r2, [pc, #140]	; (801034c <_fx_media_open+0xae8>)
 80102c0:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of opened media.  First,
       check for an empty list.  */
    if (_fx_system_media_opened_ptr)
 80102c2:	4b23      	ldr	r3, [pc, #140]	; (8010350 <_fx_media_open+0xaec>)
 80102c4:	681b      	ldr	r3, [r3, #0]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d017      	beq.n	80102fa <_fx_media_open+0xa96>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _fx_system_media_opened_ptr -> fx_media_opened_previous;
 80102ca:	4b21      	ldr	r3, [pc, #132]	; (8010350 <_fx_media_open+0xaec>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80102d2:	623b      	str	r3, [r7, #32]

        /* Place the new media in the list.  */
        _fx_system_media_opened_ptr -> fx_media_opened_previous =  media_ptr;
 80102d4:	4b1e      	ldr	r3, [pc, #120]	; (8010350 <_fx_media_open+0xaec>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	68fa      	ldr	r2, [r7, #12]
 80102da:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        tail_ptr -> fx_media_opened_next =  media_ptr;
 80102de:	6a3b      	ldr	r3, [r7, #32]
 80102e0:	68fa      	ldr	r2, [r7, #12]
 80102e2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* Setup this media's opened links.  */
        media_ptr -> fx_media_opened_previous =  tail_ptr;
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	6a3a      	ldr	r2, [r7, #32]
 80102ea:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        media_ptr -> fx_media_opened_next =      _fx_system_media_opened_ptr;
 80102ee:	4b18      	ldr	r3, [pc, #96]	; (8010350 <_fx_media_open+0xaec>)
 80102f0:	681a      	ldr	r2, [r3, #0]
 80102f2:	68fb      	ldr	r3, [r7, #12]
 80102f4:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 80102f8:	e00a      	b.n	8010310 <_fx_media_open+0xaac>
    }
    else
    {

        /* The opened media list is empty.  Add the media to empty list.  */
        _fx_system_media_opened_ptr =           media_ptr;
 80102fa:	4a15      	ldr	r2, [pc, #84]	; (8010350 <_fx_media_open+0xaec>)
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	6013      	str	r3, [r2, #0]
        media_ptr -> fx_media_opened_next =     media_ptr;
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	68fa      	ldr	r2, [r7, #12]
 8010304:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        media_ptr -> fx_media_opened_previous = media_ptr;
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	68fa      	ldr	r2, [r7, #12]
 801030c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }

    /* Increment the opened media counter.  */
    _fx_system_media_opened_count++;
 8010310:	4b10      	ldr	r3, [pc, #64]	; (8010354 <_fx_media_open+0xaf0>)
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	3301      	adds	r3, #1
 8010316:	4a0f      	ldr	r2, [pc, #60]	; (8010354 <_fx_media_open+0xaf0>)
 8010318:	6013      	str	r3, [r2, #0]

    /* Invoke media open callback. */
    if (media_ptr -> fx_media_open_notify)
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8010320:	2b00      	cmp	r3, #0
 8010322:	d004      	beq.n	801032e <_fx_media_open+0xaca>
    {
        media_ptr -> fx_media_open_notify(media_ptr);
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801032a:	68f8      	ldr	r0, [r7, #12]
 801032c:	4798      	blx	r3
 801032e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010330:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010332:	697b      	ldr	r3, [r7, #20]
 8010334:	f383 8810 	msr	PRIMASK, r3
}
 8010338:	bf00      	nop
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return a successful status.  */
    return(FX_SUCCESS);
 801033a:	2300      	movs	r3, #0
}
 801033c:	4618      	mov	r0, r3
 801033e:	3758      	adds	r7, #88	; 0x58
 8010340:	46bd      	mov	sp, r7
 8010342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010346:	bf00      	nop
 8010348:	08017f08 	.word	0x08017f08
 801034c:	4d454449 	.word	0x4d454449
 8010350:	24014c88 	.word	0x24014c88
 8010354:	24014c8c 	.word	0x24014c8c

08010358 <_fx_partition_offset_calculate>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_partition_offset_calculate(void  *partition_sector, UINT partition,
                                     ULONG *partition_start, ULONG *partition_size)
{
 8010358:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 801035c:	b090      	sub	sp, #64	; 0x40
 801035e:	af00      	add	r7, sp, #0
 8010360:	60f8      	str	r0, [r7, #12]
 8010362:	60b9      	str	r1, [r7, #8]
 8010364:	607a      	str	r2, [r7, #4]
 8010366:	603b      	str	r3, [r7, #0]
ULONG64             total_sectors;
UCHAR               *partition_sector_ptr;


    /* Setup working pointer and initialize count.  */
    partition_sector_ptr =  partition_sector;
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	637b      	str	r3, [r7, #52]	; 0x34
    count =  0;
 801036c:	2300      	movs	r3, #0
 801036e:	613b      	str	r3, [r7, #16]

    /* Check for a real boot sector instead of a partition table.  */
    if ((partition_sector_ptr[0] == 0xe9) || ((partition_sector_ptr[0] == 0xeb) && (partition_sector_ptr[2] == 0x90)))    
 8010370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010372:	781b      	ldrb	r3, [r3, #0]
 8010374:	2be9      	cmp	r3, #233	; 0xe9
 8010376:	d008      	beq.n	801038a <_fx_partition_offset_calculate+0x32>
 8010378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801037a:	781b      	ldrb	r3, [r3, #0]
 801037c:	2beb      	cmp	r3, #235	; 0xeb
 801037e:	d17d      	bne.n	801047c <_fx_partition_offset_calculate+0x124>
 8010380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010382:	3302      	adds	r3, #2
 8010384:	781b      	ldrb	r3, [r3, #0]
 8010386:	2b90      	cmp	r3, #144	; 0x90
 8010388:	d178      	bne.n	801047c <_fx_partition_offset_calculate+0x124>
    {
    
        /* Yes, a real boot sector could be present.  */  

        /* See if there are good values for sectors per FAT.  */
        if (partition_sector_ptr[0x16] || partition_sector_ptr[0x17] || partition_sector_ptr[0x24] || partition_sector_ptr[0x25] || partition_sector_ptr[0x26] || partition_sector_ptr[0x27])
 801038a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801038c:	3316      	adds	r3, #22
 801038e:	781b      	ldrb	r3, [r3, #0]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d118      	bne.n	80103c6 <_fx_partition_offset_calculate+0x6e>
 8010394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010396:	3317      	adds	r3, #23
 8010398:	781b      	ldrb	r3, [r3, #0]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d113      	bne.n	80103c6 <_fx_partition_offset_calculate+0x6e>
 801039e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103a0:	3324      	adds	r3, #36	; 0x24
 80103a2:	781b      	ldrb	r3, [r3, #0]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d10e      	bne.n	80103c6 <_fx_partition_offset_calculate+0x6e>
 80103a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103aa:	3325      	adds	r3, #37	; 0x25
 80103ac:	781b      	ldrb	r3, [r3, #0]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d109      	bne.n	80103c6 <_fx_partition_offset_calculate+0x6e>
 80103b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103b4:	3326      	adds	r3, #38	; 0x26
 80103b6:	781b      	ldrb	r3, [r3, #0]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d104      	bne.n	80103c6 <_fx_partition_offset_calculate+0x6e>
 80103bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103be:	3327      	adds	r3, #39	; 0x27
 80103c0:	781b      	ldrb	r3, [r3, #0]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d05a      	beq.n	801047c <_fx_partition_offset_calculate+0x124>
        {

            /* There are values for sectors per FAT.  */

            /* Determine if there is a total sector count.  */
            total_sectors =  0;
 80103c6:	f04f 0200 	mov.w	r2, #0
 80103ca:	f04f 0300 	mov.w	r3, #0
 80103ce:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

            if (partition_sector_ptr[0x13] || partition_sector_ptr[0x14])
 80103d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103d4:	3313      	adds	r3, #19
 80103d6:	781b      	ldrb	r3, [r3, #0]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d104      	bne.n	80103e6 <_fx_partition_offset_calculate+0x8e>
 80103dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103de:	3314      	adds	r3, #20
 80103e0:	781b      	ldrb	r3, [r3, #0]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d00d      	beq.n	8010402 <_fx_partition_offset_calculate+0xaa>
            {

                /* Calculate the total sectors, FAT12/16.  */
                total_sectors =  (((ULONG) partition_sector_ptr[0x14]) << 8) | ((ULONG) partition_sector_ptr[0x13]);
 80103e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103e8:	3314      	adds	r3, #20
 80103ea:	781b      	ldrb	r3, [r3, #0]
 80103ec:	021b      	lsls	r3, r3, #8
 80103ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103f0:	3213      	adds	r2, #19
 80103f2:	7812      	ldrb	r2, [r2, #0]
 80103f4:	4313      	orrs	r3, r2
 80103f6:	2200      	movs	r2, #0
 80103f8:	4698      	mov	r8, r3
 80103fa:	4691      	mov	r9, r2
 80103fc:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 8010400:	e02a      	b.n	8010458 <_fx_partition_offset_calculate+0x100>
            }
            else if (partition_sector_ptr[0x20] || partition_sector_ptr[0x21] || partition_sector_ptr[0x22] || partition_sector_ptr[0x23])
 8010402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010404:	3320      	adds	r3, #32
 8010406:	781b      	ldrb	r3, [r3, #0]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d10e      	bne.n	801042a <_fx_partition_offset_calculate+0xd2>
 801040c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801040e:	3321      	adds	r3, #33	; 0x21
 8010410:	781b      	ldrb	r3, [r3, #0]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d109      	bne.n	801042a <_fx_partition_offset_calculate+0xd2>
 8010416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010418:	3322      	adds	r3, #34	; 0x22
 801041a:	781b      	ldrb	r3, [r3, #0]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d104      	bne.n	801042a <_fx_partition_offset_calculate+0xd2>
 8010420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010422:	3323      	adds	r3, #35	; 0x23
 8010424:	781b      	ldrb	r3, [r3, #0]
 8010426:	2b00      	cmp	r3, #0
 8010428:	d016      	beq.n	8010458 <_fx_partition_offset_calculate+0x100>
            {

                /* Calculate the total sectors, FAT32.  */
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 801042a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801042c:	3323      	adds	r3, #35	; 0x23
 801042e:	781b      	ldrb	r3, [r3, #0]
 8010430:	061a      	lsls	r2, r3, #24
                                 (((ULONG) partition_sector_ptr[0x22]) << 16) |
 8010432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010434:	3322      	adds	r3, #34	; 0x22
 8010436:	781b      	ldrb	r3, [r3, #0]
 8010438:	041b      	lsls	r3, r3, #16
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 801043a:	431a      	orrs	r2, r3
                                 (((ULONG) partition_sector_ptr[0x21]) << 8)  |
 801043c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801043e:	3321      	adds	r3, #33	; 0x21
 8010440:	781b      	ldrb	r3, [r3, #0]
 8010442:	021b      	lsls	r3, r3, #8
                                 (((ULONG) partition_sector_ptr[0x22]) << 16) |
 8010444:	4313      	orrs	r3, r2
                                 ((ULONG) partition_sector_ptr[0x20]);
 8010446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010448:	3220      	adds	r2, #32
 801044a:	7812      	ldrb	r2, [r2, #0]
                                 (((ULONG) partition_sector_ptr[0x21]) << 8)  |
 801044c:	4313      	orrs	r3, r2
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 801044e:	2200      	movs	r2, #0
 8010450:	461c      	mov	r4, r3
 8010452:	4615      	mov	r5, r2
 8010454:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
            }       

            /* Determine if there is a total sector count.  */
            if (total_sectors)
 8010458:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 801045c:	4313      	orrs	r3, r2
 801045e:	d00d      	beq.n	801047c <_fx_partition_offset_calculate+0x124>
            {

                if (partition_start != FX_NULL)
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d002      	beq.n	801046c <_fx_partition_offset_calculate+0x114>
                {
                    /* Return an offset of 0, size of boot record, and a successful status.  */
                    *partition_start =  0;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	2200      	movs	r2, #0
 801046a:	601a      	str	r2, [r3, #0]
                }

                /* Determine if the total sectors is required.  */
                if (partition_size != FX_NULL)
 801046c:	683b      	ldr	r3, [r7, #0]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d002      	beq.n	8010478 <_fx_partition_offset_calculate+0x120>
                {

                    /* Return the total sectors.  */
                    *partition_size =  (ULONG)(total_sectors & 0xFFFFFFFF);
 8010472:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010474:	683b      	ldr	r3, [r7, #0]
 8010476:	601a      	str	r2, [r3, #0]
                }

                /* Return success!  */
                return(FX_SUCCESS);
 8010478:	2300      	movs	r3, #0
 801047a:	e032      	b.n	80104e2 <_fx_partition_offset_calculate+0x18a>
        }
#endif /* FX_ENABLE_EXFAT */
    }

    /* Check signature to make sure the buffer is valid.  */
    if ((partition_sector_ptr[510] != 0x55) || (partition_sector_ptr[511] != 0xAA))
 801047c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801047e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010482:	781b      	ldrb	r3, [r3, #0]
 8010484:	2b55      	cmp	r3, #85	; 0x55
 8010486:	d105      	bne.n	8010494 <_fx_partition_offset_calculate+0x13c>
 8010488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801048a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801048e:	781b      	ldrb	r3, [r3, #0]
 8010490:	2baa      	cmp	r3, #170	; 0xaa
 8010492:	d001      	beq.n	8010498 <_fx_partition_offset_calculate+0x140>
    {

        /* Invalid, return an error.  */
        return(FX_NOT_FOUND);
 8010494:	2304      	movs	r3, #4
 8010496:	e024      	b.n	80104e2 <_fx_partition_offset_calculate+0x18a>
    }
    
    /* Not bootable, look for specific partition.  */
    _fx_utility_partition_get(partition_table, &count, 0, partition_sector_ptr);
 8010498:	f107 0110 	add.w	r1, r7, #16
 801049c:	f107 0014 	add.w	r0, r7, #20
 80104a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104a2:	2200      	movs	r2, #0
 80104a4:	f000 f822 	bl	80104ec <_fx_utility_partition_get>

    /* Determine if return value is valid.  */
    if (partition >= count)
 80104a8:	693b      	ldr	r3, [r7, #16]
 80104aa:	68ba      	ldr	r2, [r7, #8]
 80104ac:	429a      	cmp	r2, r3
 80104ae:	d301      	bcc.n	80104b4 <_fx_partition_offset_calculate+0x15c>
    {

        /* No, return an error.  */
        return(FX_NOT_FOUND);
 80104b0:	2304      	movs	r3, #4
 80104b2:	e016      	b.n	80104e2 <_fx_partition_offset_calculate+0x18a>
    }

    /* Return the partition starting sector, if non-NULL.  */
    if (partition_start != FX_NULL)
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d007      	beq.n	80104ca <_fx_partition_offset_calculate+0x172>
    {
        *partition_start =  partition_table[partition].fx_media_part_start;
 80104ba:	68bb      	ldr	r3, [r7, #8]
 80104bc:	00db      	lsls	r3, r3, #3
 80104be:	3340      	adds	r3, #64	; 0x40
 80104c0:	443b      	add	r3, r7
 80104c2:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	601a      	str	r2, [r3, #0]
    }

    /* Return the partition size, if non-NULL.  */
    if (partition_size != FX_NULL)
 80104ca:	683b      	ldr	r3, [r7, #0]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d007      	beq.n	80104e0 <_fx_partition_offset_calculate+0x188>
    {
        *partition_size =  partition_table[partition].fx_media_part_size;
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	00db      	lsls	r3, r3, #3
 80104d4:	3340      	adds	r3, #64	; 0x40
 80104d6:	443b      	add	r3, r7
 80104d8:	f853 2c28 	ldr.w	r2, [r3, #-40]
 80104dc:	683b      	ldr	r3, [r7, #0]
 80104de:	601a      	str	r2, [r3, #0]
    }

    /* Return successful completion.  */
    return(FX_SUCCESS);
 80104e0:	2300      	movs	r3, #0
}
 80104e2:	4618      	mov	r0, r3
 80104e4:	3740      	adds	r7, #64	; 0x40
 80104e6:	46bd      	mov	sp, r7
 80104e8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080104ec <_fx_utility_partition_get>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_partition_get(FX_MEDIA_PARTITION *partition_table, 
                                UINT *count, ULONG sector, UCHAR *sector_buffer)
{
 80104ec:	b480      	push	{r7}
 80104ee:	b089      	sub	sp, #36	; 0x24
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	60f8      	str	r0, [r7, #12]
 80104f4:	60b9      	str	r1, [r7, #8]
 80104f6:	607a      	str	r2, [r7, #4]
 80104f8:	603b      	str	r3, [r7, #0]

    /* This parameter has not been supported yet. */
    FX_PARAMETER_NOT_USED(sector); 

    /* Initialize base sector.  */
    base_sector =  0;
 80104fa:	2300      	movs	r3, #0
 80104fc:	61bb      	str	r3, [r7, #24]

    for(i = 446; i <= 494; i+=16)
 80104fe:	f44f 73df 	mov.w	r3, #446	; 0x1be
 8010502:	61fb      	str	r3, [r7, #28]
 8010504:	e06f      	b.n	80105e6 <_fx_utility_partition_get+0xfa>
    {
        if (sector_buffer[i + 4] == 0) /* no partition entry here */
 8010506:	69fb      	ldr	r3, [r7, #28]
 8010508:	3304      	adds	r3, #4
 801050a:	683a      	ldr	r2, [r7, #0]
 801050c:	4413      	add	r3, r2
 801050e:	781b      	ldrb	r3, [r3, #0]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d10e      	bne.n	8010532 <_fx_utility_partition_get+0x46>
        {

            partition_table[*count].fx_media_part_start = 0;
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	00db      	lsls	r3, r3, #3
 801051a:	68fa      	ldr	r2, [r7, #12]
 801051c:	4413      	add	r3, r2
 801051e:	2200      	movs	r2, #0
 8010520:	601a      	str	r2, [r3, #0]
            partition_table[*count].fx_media_part_size  = 0;
 8010522:	68bb      	ldr	r3, [r7, #8]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	00db      	lsls	r3, r3, #3
 8010528:	68fa      	ldr	r2, [r7, #12]
 801052a:	4413      	add	r3, r2
 801052c:	2200      	movs	r2, #0
 801052e:	605a      	str	r2, [r3, #4]
 8010530:	e051      	b.n	80105d6 <_fx_utility_partition_get+0xea>
        }
        else
        {

            value =  (ULONG) sector_buffer[i + 8]; /* little endian start value */
 8010532:	69fb      	ldr	r3, [r7, #28]
 8010534:	3308      	adds	r3, #8
 8010536:	683a      	ldr	r2, [r7, #0]
 8010538:	4413      	add	r3, r2
 801053a:	781b      	ldrb	r3, [r3, #0]
 801053c:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 9]) << 8) | value;
 801053e:	69fb      	ldr	r3, [r7, #28]
 8010540:	3309      	adds	r3, #9
 8010542:	683a      	ldr	r2, [r7, #0]
 8010544:	4413      	add	r3, r2
 8010546:	781b      	ldrb	r3, [r3, #0]
 8010548:	021b      	lsls	r3, r3, #8
 801054a:	697a      	ldr	r2, [r7, #20]
 801054c:	4313      	orrs	r3, r2
 801054e:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 10]) << 16) | value;
 8010550:	69fb      	ldr	r3, [r7, #28]
 8010552:	330a      	adds	r3, #10
 8010554:	683a      	ldr	r2, [r7, #0]
 8010556:	4413      	add	r3, r2
 8010558:	781b      	ldrb	r3, [r3, #0]
 801055a:	041b      	lsls	r3, r3, #16
 801055c:	697a      	ldr	r2, [r7, #20]
 801055e:	4313      	orrs	r3, r2
 8010560:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 11]) << 24) | value;
 8010562:	69fb      	ldr	r3, [r7, #28]
 8010564:	330b      	adds	r3, #11
 8010566:	683a      	ldr	r2, [r7, #0]
 8010568:	4413      	add	r3, r2
 801056a:	781b      	ldrb	r3, [r3, #0]
 801056c:	061b      	lsls	r3, r3, #24
 801056e:	697a      	ldr	r2, [r7, #20]
 8010570:	4313      	orrs	r3, r2
 8010572:	617b      	str	r3, [r7, #20]
            partition_table[*count].fx_media_part_start = value + base_sector;
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	00db      	lsls	r3, r3, #3
 801057a:	68fa      	ldr	r2, [r7, #12]
 801057c:	4413      	add	r3, r2
 801057e:	6979      	ldr	r1, [r7, #20]
 8010580:	69ba      	ldr	r2, [r7, #24]
 8010582:	440a      	add	r2, r1
 8010584:	601a      	str	r2, [r3, #0]

            value =  (ULONG) sector_buffer[i + 12]; /* little endian size value */
 8010586:	69fb      	ldr	r3, [r7, #28]
 8010588:	330c      	adds	r3, #12
 801058a:	683a      	ldr	r2, [r7, #0]
 801058c:	4413      	add	r3, r2
 801058e:	781b      	ldrb	r3, [r3, #0]
 8010590:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 13]) << 8) | value;
 8010592:	69fb      	ldr	r3, [r7, #28]
 8010594:	330d      	adds	r3, #13
 8010596:	683a      	ldr	r2, [r7, #0]
 8010598:	4413      	add	r3, r2
 801059a:	781b      	ldrb	r3, [r3, #0]
 801059c:	021b      	lsls	r3, r3, #8
 801059e:	697a      	ldr	r2, [r7, #20]
 80105a0:	4313      	orrs	r3, r2
 80105a2:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 14]) << 16) | value;
 80105a4:	69fb      	ldr	r3, [r7, #28]
 80105a6:	330e      	adds	r3, #14
 80105a8:	683a      	ldr	r2, [r7, #0]
 80105aa:	4413      	add	r3, r2
 80105ac:	781b      	ldrb	r3, [r3, #0]
 80105ae:	041b      	lsls	r3, r3, #16
 80105b0:	697a      	ldr	r2, [r7, #20]
 80105b2:	4313      	orrs	r3, r2
 80105b4:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 15]) << 24) | value;
 80105b6:	69fb      	ldr	r3, [r7, #28]
 80105b8:	330f      	adds	r3, #15
 80105ba:	683a      	ldr	r2, [r7, #0]
 80105bc:	4413      	add	r3, r2
 80105be:	781b      	ldrb	r3, [r3, #0]
 80105c0:	061b      	lsls	r3, r3, #24
 80105c2:	697a      	ldr	r2, [r7, #20]
 80105c4:	4313      	orrs	r3, r2
 80105c6:	617b      	str	r3, [r7, #20]
            partition_table[*count].fx_media_part_size = value;
 80105c8:	68bb      	ldr	r3, [r7, #8]
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	00db      	lsls	r3, r3, #3
 80105ce:	68fa      	ldr	r2, [r7, #12]
 80105d0:	4413      	add	r3, r2
 80105d2:	697a      	ldr	r2, [r7, #20]
 80105d4:	605a      	str	r2, [r3, #4]
        }

        (*count)++;
 80105d6:	68bb      	ldr	r3, [r7, #8]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	1c5a      	adds	r2, r3, #1
 80105dc:	68bb      	ldr	r3, [r7, #8]
 80105de:	601a      	str	r2, [r3, #0]
    for(i = 446; i <= 494; i+=16)
 80105e0:	69fb      	ldr	r3, [r7, #28]
 80105e2:	3310      	adds	r3, #16
 80105e4:	61fb      	str	r3, [r7, #28]
 80105e6:	69fb      	ldr	r3, [r7, #28]
 80105e8:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 80105ec:	d98b      	bls.n	8010506 <_fx_utility_partition_get+0x1a>
    }

    /* Return success.  */
    return(FX_SUCCESS);
 80105ee:	2300      	movs	r3, #0
}
 80105f0:	4618      	mov	r0, r3
 80105f2:	3724      	adds	r7, #36	; 0x24
 80105f4:	46bd      	mov	sp, r7
 80105f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fa:	4770      	bx	lr

080105fc <_fx_system_initialize>:
/*                                            disable build options,      */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_system_initialize(VOID)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b084      	sub	sp, #16
 8010600:	af04      	add	r7, sp, #16
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Initialize the head pointer of the opened media list and the
       number of opened media.  */
    _fx_system_media_opened_ptr =       FX_NULL;
 8010602:	4b27      	ldr	r3, [pc, #156]	; (80106a0 <_fx_system_initialize+0xa4>)
 8010604:	2200      	movs	r2, #0
 8010606:	601a      	str	r2, [r3, #0]
    _fx_system_media_opened_count =     0;
 8010608:	4b26      	ldr	r3, [pc, #152]	; (80106a4 <_fx_system_initialize+0xa8>)
 801060a:	2200      	movs	r2, #0
 801060c:	601a      	str	r2, [r3, #0]

    /* Initialize the time and date fields with their default values.  */
    _fx_system_date =   FX_INITIAL_DATE;
 801060e:	4b26      	ldr	r3, [pc, #152]	; (80106a8 <_fx_system_initialize+0xac>)
 8010610:	f644 2221 	movw	r2, #18977	; 0x4a21
 8010614:	601a      	str	r2, [r3, #0]
    _fx_system_time =   FX_INITIAL_TIME;
 8010616:	4b25      	ldr	r3, [pc, #148]	; (80106ac <_fx_system_initialize+0xb0>)
 8010618:	2200      	movs	r2, #0
 801061a:	601a      	str	r2, [r3, #0]

    /* Initialize the sector and FAT cache sizes.  */
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 801061c:	4b24      	ldr	r3, [pc, #144]	; (80106b0 <_fx_system_initialize+0xb4>)
 801061e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010622:	601a      	str	r2, [r3, #0]
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 8010624:	4b23      	ldr	r3, [pc, #140]	; (80106b4 <_fx_system_initialize+0xb8>)
 8010626:	2210      	movs	r2, #16
 8010628:	601a      	str	r2, [r3, #0]
       FX_UPDATE_RATE_IN_TICKS.  Note that the timer is not necessary for
       regular FileX operation - it is only needed for accurate system
       date and time stamps on files.  */

#ifndef FX_NO_TIMER
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 801062a:	2301      	movs	r3, #1
 801062c:	9302      	str	r3, [sp, #8]
 801062e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010632:	9301      	str	r3, [sp, #4]
 8010634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010638:	9300      	str	r3, [sp, #0]
 801063a:	4b1f      	ldr	r3, [pc, #124]	; (80106b8 <_fx_system_initialize+0xbc>)
 801063c:	4a1f      	ldr	r2, [pc, #124]	; (80106bc <_fx_system_initialize+0xc0>)
 801063e:	4920      	ldr	r1, [pc, #128]	; (80106c0 <_fx_system_initialize+0xc4>)
 8010640:	4820      	ldr	r0, [pc, #128]	; (80106c4 <_fx_system_initialize+0xc8>)
 8010642:	f005 fc97 	bl	8015f74 <_tx_timer_create>
    /* Setup the build options variables.  */

    /* Setup the first build options variable.  */
    if (FX_MAX_LONG_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 24);
 8010646:	4b20      	ldr	r3, [pc, #128]	; (80106c8 <_fx_system_initialize+0xcc>)
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801064e:	4a1e      	ldr	r2, [pc, #120]	; (80106c8 <_fx_system_initialize+0xcc>)
 8010650:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)(FX_MAX_LONG_NAME_LEN & 0xFF)) << 24);
    }
    if (FX_MAX_LAST_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 8010652:	4b1d      	ldr	r3, [pc, #116]	; (80106c8 <_fx_system_initialize+0xcc>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801065a:	4a1b      	ldr	r2, [pc, #108]	; (80106c8 <_fx_system_initialize+0xcc>)
 801065c:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFFFF) << 16);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_MAX_SECTOR_CACHE) << 16);
 801065e:	4b1b      	ldr	r3, [pc, #108]	; (80106cc <_fx_system_initialize+0xd0>)
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8010666:	4a19      	ldr	r2, [pc, #100]	; (80106cc <_fx_system_initialize+0xd0>)
 8010668:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFF) << 8);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_FAT_MAP_SIZE) << 8);
 801066a:	4b18      	ldr	r3, [pc, #96]	; (80106cc <_fx_system_initialize+0xd0>)
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010672:	4a16      	ldr	r2, [pc, #88]	; (80106cc <_fx_system_initialize+0xd0>)
 8010674:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)0xFF);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 8010676:	4b15      	ldr	r3, [pc, #84]	; (80106cc <_fx_system_initialize+0xd0>)
 8010678:	681b      	ldr	r3, [r3, #0]
 801067a:	f043 0310 	orr.w	r3, r3, #16
 801067e:	4a13      	ldr	r2, [pc, #76]	; (80106cc <_fx_system_initialize+0xd0>)
 8010680:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)0xFF) << 16);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)FX_UPDATE_RATE_IN_SECONDS) << 16);
 8010682:	4b13      	ldr	r3, [pc, #76]	; (80106d0 <_fx_system_initialize+0xd4>)
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 801068a:	4a11      	ldr	r2, [pc, #68]	; (80106d0 <_fx_system_initialize+0xd4>)
 801068c:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)0xFFFF);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 801068e:	4b10      	ldr	r3, [pc, #64]	; (80106d0 <_fx_system_initialize+0xd4>)
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	f443 737a 	orr.w	r3, r3, #1000	; 0x3e8
 8010696:	4a0e      	ldr	r2, [pc, #56]	; (80106d0 <_fx_system_initialize+0xd4>)
 8010698:	6013      	str	r3, [r2, #0]
    }
#endif /* FX_DISABLE_BUILD_OPTIONS */
}
 801069a:	bf00      	nop
 801069c:	46bd      	mov	sp, r7
 801069e:	bd80      	pop	{r7, pc}
 80106a0:	24014c88 	.word	0x24014c88
 80106a4:	24014c8c 	.word	0x24014c8c
 80106a8:	24014c90 	.word	0x24014c90
 80106ac:	24014c94 	.word	0x24014c94
 80106b0:	24014c98 	.word	0x24014c98
 80106b4:	24014c9c 	.word	0x24014c9c
 80106b8:	46585359 	.word	0x46585359
 80106bc:	080106d5 	.word	0x080106d5
 80106c0:	08017f1c 	.word	0x08017f1c
 80106c4:	24014cac 	.word	0x24014cac
 80106c8:	24014ca0 	.word	0x24014ca0
 80106cc:	24014ca4 	.word	0x24014ca4
 80106d0:	24014ca8 	.word	0x24014ca8

080106d4 <_fx_system_timer_entry>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _fx_system_timer_entry(ULONG id)
{
 80106d4:	b480      	push	{r7}
 80106d6:	b089      	sub	sp, #36	; 0x24
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
UINT month;
UINT year;


    /* Determine if the ID is valid.  */
    if (id == FX_TIMER_ID)
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	4a9d      	ldr	r2, [pc, #628]	; (8010954 <_fx_system_timer_entry+0x280>)
 80106e0:	4293      	cmp	r3, r2
 80106e2:	f040 8132 	bne.w	801094a <_fx_system_timer_entry+0x276>
    {

        /* Break the current date time into separate fields for easier work!  */
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 80106e6:	4b9c      	ldr	r3, [pc, #624]	; (8010958 <_fx_system_timer_entry+0x284>)
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	f003 031f 	and.w	r3, r3, #31
 80106ee:	005b      	lsls	r3, r3, #1
 80106f0:	61fb      	str	r3, [r7, #28]
        minute =  (_fx_system_time >> FX_MINUTE_SHIFT) & FX_MINUTE_MASK;
 80106f2:	4b99      	ldr	r3, [pc, #612]	; (8010958 <_fx_system_timer_entry+0x284>)
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	095b      	lsrs	r3, r3, #5
 80106f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80106fc:	61bb      	str	r3, [r7, #24]
        hour =    (_fx_system_time >> FX_HOUR_SHIFT) & FX_HOUR_MASK;
 80106fe:	4b96      	ldr	r3, [pc, #600]	; (8010958 <_fx_system_timer_entry+0x284>)
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	0adb      	lsrs	r3, r3, #11
 8010704:	f003 031f 	and.w	r3, r3, #31
 8010708:	617b      	str	r3, [r7, #20]
        day =     _fx_system_date & FX_DAY_MASK;
 801070a:	4b94      	ldr	r3, [pc, #592]	; (801095c <_fx_system_timer_entry+0x288>)
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	f003 031f 	and.w	r3, r3, #31
 8010712:	613b      	str	r3, [r7, #16]
        month =   (_fx_system_date >> FX_MONTH_SHIFT) & FX_MONTH_MASK;
 8010714:	4b91      	ldr	r3, [pc, #580]	; (801095c <_fx_system_timer_entry+0x288>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	095b      	lsrs	r3, r3, #5
 801071a:	f003 030f 	and.w	r3, r3, #15
 801071e:	60fb      	str	r3, [r7, #12]
        year =    ((_fx_system_date >> FX_YEAR_SHIFT) & FX_YEAR_MASK) + FX_BASE_YEAR;
 8010720:	4b8e      	ldr	r3, [pc, #568]	; (801095c <_fx_system_timer_entry+0x288>)
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	0a5b      	lsrs	r3, r3, #9
 8010726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801072a:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 801072e:	60bb      	str	r3, [r7, #8]

        /* Now apply the "second" update.  */
        second =  second + FX_UPDATE_RATE_IN_SECONDS;
 8010730:	69fb      	ldr	r3, [r7, #28]
 8010732:	330a      	adds	r3, #10
 8010734:	61fb      	str	r3, [r7, #28]

        /* Determine if we need to adjust the minute field.  */
        if (second > FX_MAXIMUM_SECOND)
 8010736:	69fb      	ldr	r3, [r7, #28]
 8010738:	2b3b      	cmp	r3, #59	; 0x3b
 801073a:	f240 80d4 	bls.w	80108e6 <_fx_system_timer_entry+0x212>
        {

            /* Yes, we need to adjust the minute field.  */
            minute =  minute + second / 60;
 801073e:	69fb      	ldr	r3, [r7, #28]
 8010740:	4a87      	ldr	r2, [pc, #540]	; (8010960 <_fx_system_timer_entry+0x28c>)
 8010742:	fba2 2303 	umull	r2, r3, r2, r3
 8010746:	095b      	lsrs	r3, r3, #5
 8010748:	69ba      	ldr	r2, [r7, #24]
 801074a:	4413      	add	r3, r2
 801074c:	61bb      	str	r3, [r7, #24]
            second =  second % 60;
 801074e:	69fa      	ldr	r2, [r7, #28]
 8010750:	4b83      	ldr	r3, [pc, #524]	; (8010960 <_fx_system_timer_entry+0x28c>)
 8010752:	fba3 1302 	umull	r1, r3, r3, r2
 8010756:	0959      	lsrs	r1, r3, #5
 8010758:	460b      	mov	r3, r1
 801075a:	011b      	lsls	r3, r3, #4
 801075c:	1a5b      	subs	r3, r3, r1
 801075e:	009b      	lsls	r3, r3, #2
 8010760:	1ad3      	subs	r3, r2, r3
 8010762:	61fb      	str	r3, [r7, #28]

            /* Determine if we need to adjust the hour field.  */
            if (minute > FX_MAXIMUM_MINUTE)
 8010764:	69bb      	ldr	r3, [r7, #24]
 8010766:	2b3b      	cmp	r3, #59	; 0x3b
 8010768:	f240 80bd 	bls.w	80108e6 <_fx_system_timer_entry+0x212>
            {

                /* Yes, we need to adjust the hour field.  */
                hour =    hour + minute / 60;
 801076c:	69bb      	ldr	r3, [r7, #24]
 801076e:	4a7c      	ldr	r2, [pc, #496]	; (8010960 <_fx_system_timer_entry+0x28c>)
 8010770:	fba2 2303 	umull	r2, r3, r2, r3
 8010774:	095b      	lsrs	r3, r3, #5
 8010776:	697a      	ldr	r2, [r7, #20]
 8010778:	4413      	add	r3, r2
 801077a:	617b      	str	r3, [r7, #20]
                minute =  minute % 60;
 801077c:	69ba      	ldr	r2, [r7, #24]
 801077e:	4b78      	ldr	r3, [pc, #480]	; (8010960 <_fx_system_timer_entry+0x28c>)
 8010780:	fba3 1302 	umull	r1, r3, r3, r2
 8010784:	0959      	lsrs	r1, r3, #5
 8010786:	460b      	mov	r3, r1
 8010788:	011b      	lsls	r3, r3, #4
 801078a:	1a5b      	subs	r3, r3, r1
 801078c:	009b      	lsls	r3, r3, #2
 801078e:	1ad3      	subs	r3, r2, r3
 8010790:	61bb      	str	r3, [r7, #24]

                /* Determine if we need to adjust the day field.  */
                if (hour > FX_MAXIMUM_HOUR)
 8010792:	697b      	ldr	r3, [r7, #20]
 8010794:	2b17      	cmp	r3, #23
 8010796:	f240 80a6 	bls.w	80108e6 <_fx_system_timer_entry+0x212>
                {

                    /* Yes, we need to adjust the day field.  */
                    hour =  0;
 801079a:	2300      	movs	r3, #0
 801079c:	617b      	str	r3, [r7, #20]
                    day++;
 801079e:	693b      	ldr	r3, [r7, #16]
 80107a0:	3301      	adds	r3, #1
 80107a2:	613b      	str	r3, [r7, #16]

                    /* Determine if we need to adjust the month field.  */
                    switch (month)
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	3b01      	subs	r3, #1
 80107a8:	2b0b      	cmp	r3, #11
 80107aa:	f200 80cb 	bhi.w	8010944 <_fx_system_timer_entry+0x270>
 80107ae:	a201      	add	r2, pc, #4	; (adr r2, 80107b4 <_fx_system_timer_entry+0xe0>)
 80107b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107b4:	080107e5 	.word	0x080107e5
 80107b8:	080107f7 	.word	0x080107f7
 80107bc:	08010825 	.word	0x08010825
 80107c0:	08010837 	.word	0x08010837
 80107c4:	08010849 	.word	0x08010849
 80107c8:	0801085b 	.word	0x0801085b
 80107cc:	0801086d 	.word	0x0801086d
 80107d0:	0801087f 	.word	0x0801087f
 80107d4:	08010891 	.word	0x08010891
 80107d8:	080108a3 	.word	0x080108a3
 80107dc:	080108b5 	.word	0x080108b5
 80107e0:	080108c7 	.word	0x080108c7

                    case 1:                 /* January  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 80107e4:	693b      	ldr	r3, [r7, #16]
 80107e6:	2b1f      	cmp	r3, #31
 80107e8:	d97f      	bls.n	80108ea <_fx_system_timer_entry+0x216>
                        {

                            /* Move to next month.  */
                            day = 1;
 80107ea:	2301      	movs	r3, #1
 80107ec:	613b      	str	r3, [r7, #16]
                            month++;
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	3301      	adds	r3, #1
 80107f2:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 80107f4:	e079      	b.n	80108ea <_fx_system_timer_entry+0x216>
                    {

                        /* Check for leap year.  We don't need to check for leap
                           century her (century years divisible by 400) since 2000
                           is and this FAT format only supports years to 2107. */
                        if ((year % 4) == 0)
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	f003 0303 	and.w	r3, r3, #3
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d108      	bne.n	8010812 <_fx_system_timer_entry+0x13e>
                        {

                            /* Leap year in February... check for 29 days
                               instead of 28.  */
                            if (day > 29)
 8010800:	693b      	ldr	r3, [r7, #16]
 8010802:	2b1d      	cmp	r3, #29
 8010804:	d973      	bls.n	80108ee <_fx_system_timer_entry+0x21a>
                            {

                                /* Adjust the month.  */
                                day =  1;
 8010806:	2301      	movs	r3, #1
 8010808:	613b      	str	r3, [r7, #16]
                                month++;
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	3301      	adds	r3, #1
 801080e:	60fb      	str	r3, [r7, #12]
                                /* Adjust the month.  */
                                day = 1;
                                month++;
                            }
                        }
                        break;
 8010810:	e06d      	b.n	80108ee <_fx_system_timer_entry+0x21a>
                            if (day > 28)
 8010812:	693b      	ldr	r3, [r7, #16]
 8010814:	2b1c      	cmp	r3, #28
 8010816:	d96a      	bls.n	80108ee <_fx_system_timer_entry+0x21a>
                                day = 1;
 8010818:	2301      	movs	r3, #1
 801081a:	613b      	str	r3, [r7, #16]
                                month++;
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	3301      	adds	r3, #1
 8010820:	60fb      	str	r3, [r7, #12]
                        break;
 8010822:	e064      	b.n	80108ee <_fx_system_timer_entry+0x21a>

                    case 3:                 /* March  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8010824:	693b      	ldr	r3, [r7, #16]
 8010826:	2b1f      	cmp	r3, #31
 8010828:	d963      	bls.n	80108f2 <_fx_system_timer_entry+0x21e>
                        {

                            /* Move to next month.  */
                            day = 1;
 801082a:	2301      	movs	r3, #1
 801082c:	613b      	str	r3, [r7, #16]
                            month++;
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	3301      	adds	r3, #1
 8010832:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8010834:	e05d      	b.n	80108f2 <_fx_system_timer_entry+0x21e>

                    case 4:                 /* April  */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 8010836:	693b      	ldr	r3, [r7, #16]
 8010838:	2b1e      	cmp	r3, #30
 801083a:	d95c      	bls.n	80108f6 <_fx_system_timer_entry+0x222>
                        {

                            /* Move to next month.  */
                            day = 1;
 801083c:	2301      	movs	r3, #1
 801083e:	613b      	str	r3, [r7, #16]
                            month++;
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	3301      	adds	r3, #1
 8010844:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8010846:	e056      	b.n	80108f6 <_fx_system_timer_entry+0x222>

                    case 5:                 /* May  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 8010848:	693b      	ldr	r3, [r7, #16]
 801084a:	2b1f      	cmp	r3, #31
 801084c:	d955      	bls.n	80108fa <_fx_system_timer_entry+0x226>
                        {

                            /* Move to next month.  */
                            day = 1;
 801084e:	2301      	movs	r3, #1
 8010850:	613b      	str	r3, [r7, #16]
                            month++;
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	3301      	adds	r3, #1
 8010856:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 8010858:	e04f      	b.n	80108fa <_fx_system_timer_entry+0x226>

                    case 6:                 /* June */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 801085a:	693b      	ldr	r3, [r7, #16]
 801085c:	2b1e      	cmp	r3, #30
 801085e:	d94e      	bls.n	80108fe <_fx_system_timer_entry+0x22a>
                        {

                            /* Move to next month.  */
                            day = 1;
 8010860:	2301      	movs	r3, #1
 8010862:	613b      	str	r3, [r7, #16]
                            month++;
 8010864:	68fb      	ldr	r3, [r7, #12]
 8010866:	3301      	adds	r3, #1
 8010868:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 801086a:	e048      	b.n	80108fe <_fx_system_timer_entry+0x22a>

                    case 7:                 /* July */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 801086c:	693b      	ldr	r3, [r7, #16]
 801086e:	2b1f      	cmp	r3, #31
 8010870:	d947      	bls.n	8010902 <_fx_system_timer_entry+0x22e>
                        {

                            /* Move to next month.  */
                            day = 1;
 8010872:	2301      	movs	r3, #1
 8010874:	613b      	str	r3, [r7, #16]
                            month++;
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	3301      	adds	r3, #1
 801087a:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 801087c:	e041      	b.n	8010902 <_fx_system_timer_entry+0x22e>

                    case 8:                 /* August */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 801087e:	693b      	ldr	r3, [r7, #16]
 8010880:	2b1f      	cmp	r3, #31
 8010882:	d940      	bls.n	8010906 <_fx_system_timer_entry+0x232>
                        {

                            /* Move to next month.  */
                            day = 1;
 8010884:	2301      	movs	r3, #1
 8010886:	613b      	str	r3, [r7, #16]
                            month++;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	3301      	adds	r3, #1
 801088c:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 801088e:	e03a      	b.n	8010906 <_fx_system_timer_entry+0x232>

                    case 9:                 /* September */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 8010890:	693b      	ldr	r3, [r7, #16]
 8010892:	2b1e      	cmp	r3, #30
 8010894:	d939      	bls.n	801090a <_fx_system_timer_entry+0x236>
                        {

                            /* Move to next month.  */
                            day = 1;
 8010896:	2301      	movs	r3, #1
 8010898:	613b      	str	r3, [r7, #16]
                            month++;
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	3301      	adds	r3, #1
 801089e:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 80108a0:	e033      	b.n	801090a <_fx_system_timer_entry+0x236>

                    case 10:                /* October */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 80108a2:	693b      	ldr	r3, [r7, #16]
 80108a4:	2b1f      	cmp	r3, #31
 80108a6:	d932      	bls.n	801090e <_fx_system_timer_entry+0x23a>
                        {

                            /* Move to next month.  */
                            day = 1;
 80108a8:	2301      	movs	r3, #1
 80108aa:	613b      	str	r3, [r7, #16]
                            month++;
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	3301      	adds	r3, #1
 80108b0:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 80108b2:	e02c      	b.n	801090e <_fx_system_timer_entry+0x23a>

                    case 11:                /* November */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 80108b4:	693b      	ldr	r3, [r7, #16]
 80108b6:	2b1e      	cmp	r3, #30
 80108b8:	d92b      	bls.n	8010912 <_fx_system_timer_entry+0x23e>
                        {

                            /* Move to next month.  */
                            day = 1;
 80108ba:	2301      	movs	r3, #1
 80108bc:	613b      	str	r3, [r7, #16]
                            month++;
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	3301      	adds	r3, #1
 80108c2:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 80108c4:	e025      	b.n	8010912 <_fx_system_timer_entry+0x23e>

                    case 12:                /* December */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 80108c6:	693b      	ldr	r3, [r7, #16]
 80108c8:	2b1f      	cmp	r3, #31
 80108ca:	d924      	bls.n	8010916 <_fx_system_timer_entry+0x242>
                        {

                            /* Move to next month.  */
                            day = 1;
 80108cc:	2301      	movs	r3, #1
 80108ce:	613b      	str	r3, [r7, #16]
                            month = 1;
 80108d0:	2301      	movs	r3, #1
 80108d2:	60fb      	str	r3, [r7, #12]

                            /* Also move to next year.  */
                            year++;
 80108d4:	68bb      	ldr	r3, [r7, #8]
 80108d6:	3301      	adds	r3, #1
 80108d8:	60bb      	str	r3, [r7, #8]

                            /* Check for a year that exceeds the representation
                               in this format.  */
                            if (year > FX_MAXIMUM_YEAR)
 80108da:	68bb      	ldr	r3, [r7, #8]
 80108dc:	f640 023b 	movw	r2, #2107	; 0x83b
 80108e0:	4293      	cmp	r3, r2
 80108e2:	d831      	bhi.n	8010948 <_fx_system_timer_entry+0x274>
                            {
                                return;
                            }
                        }
                        break;
 80108e4:	e017      	b.n	8010916 <_fx_system_timer_entry+0x242>

                    default:                /* Invalid month!  */

                        return;             /* Skip updating date/time!  */
                    }
                }
 80108e6:	bf00      	nop
 80108e8:	e016      	b.n	8010918 <_fx_system_timer_entry+0x244>
                        break;
 80108ea:	bf00      	nop
 80108ec:	e014      	b.n	8010918 <_fx_system_timer_entry+0x244>
                        break;
 80108ee:	bf00      	nop
 80108f0:	e012      	b.n	8010918 <_fx_system_timer_entry+0x244>
                        break;
 80108f2:	bf00      	nop
 80108f4:	e010      	b.n	8010918 <_fx_system_timer_entry+0x244>
                        break;
 80108f6:	bf00      	nop
 80108f8:	e00e      	b.n	8010918 <_fx_system_timer_entry+0x244>
                        break;
 80108fa:	bf00      	nop
 80108fc:	e00c      	b.n	8010918 <_fx_system_timer_entry+0x244>
                        break;
 80108fe:	bf00      	nop
 8010900:	e00a      	b.n	8010918 <_fx_system_timer_entry+0x244>
                        break;
 8010902:	bf00      	nop
 8010904:	e008      	b.n	8010918 <_fx_system_timer_entry+0x244>
                        break;
 8010906:	bf00      	nop
 8010908:	e006      	b.n	8010918 <_fx_system_timer_entry+0x244>
                        break;
 801090a:	bf00      	nop
 801090c:	e004      	b.n	8010918 <_fx_system_timer_entry+0x244>
                        break;
 801090e:	bf00      	nop
 8010910:	e002      	b.n	8010918 <_fx_system_timer_entry+0x244>
                        break;
 8010912:	bf00      	nop
 8010914:	e000      	b.n	8010918 <_fx_system_timer_entry+0x244>
                        break;
 8010916:	bf00      	nop
        }

        /* Now apply the new setting to the internal representation.  */

        /* Set the system date.  */
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 8010918:	68bb      	ldr	r3, [r7, #8]
 801091a:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 801091e:	025a      	lsls	r2, r3, #9
                            (month << FX_MONTH_SHIFT) | day;
 8010920:	68fb      	ldr	r3, [r7, #12]
 8010922:	015b      	lsls	r3, r3, #5
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 8010924:	431a      	orrs	r2, r3
                            (month << FX_MONTH_SHIFT) | day;
 8010926:	693b      	ldr	r3, [r7, #16]
 8010928:	4313      	orrs	r3, r2
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 801092a:	4a0c      	ldr	r2, [pc, #48]	; (801095c <_fx_system_timer_entry+0x288>)
 801092c:	6013      	str	r3, [r2, #0]

        /* Set the new system time.  */
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 801092e:	697b      	ldr	r3, [r7, #20]
 8010930:	02da      	lsls	r2, r3, #11
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 8010932:	69bb      	ldr	r3, [r7, #24]
 8010934:	015b      	lsls	r3, r3, #5
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 8010936:	431a      	orrs	r2, r3
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 8010938:	69fb      	ldr	r3, [r7, #28]
 801093a:	085b      	lsrs	r3, r3, #1
 801093c:	4313      	orrs	r3, r2
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 801093e:	4a06      	ldr	r2, [pc, #24]	; (8010958 <_fx_system_timer_entry+0x284>)
 8010940:	6013      	str	r3, [r2, #0]
 8010942:	e002      	b.n	801094a <_fx_system_timer_entry+0x276>
                        return;             /* Skip updating date/time!  */
 8010944:	bf00      	nop
 8010946:	e000      	b.n	801094a <_fx_system_timer_entry+0x276>
                                return;
 8010948:	bf00      	nop
    }
}
 801094a:	3724      	adds	r7, #36	; 0x24
 801094c:	46bd      	mov	sp, r7
 801094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010952:	4770      	bx	lr
 8010954:	46585359 	.word	0x46585359
 8010958:	24014c94 	.word	0x24014c94
 801095c:	24014c90 	.word	0x24014c90
 8010960:	88888889 	.word	0x88888889

08010964 <_fx_utility_16_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_16_unsigned_read(UCHAR *source_ptr)
{
 8010964:	b480      	push	{r7}
 8010966:	b085      	sub	sp, #20
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]

UINT value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	3301      	adds	r3, #1
 8010970:	781b      	ldrb	r3, [r3, #0]
 8010972:	021b      	lsls	r3, r3, #8
              ((UINT)*(source_ptr) & 0xFF);
 8010974:	687a      	ldr	r2, [r7, #4]
 8010976:	7812      	ldrb	r2, [r2, #0]
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 8010978:	4313      	orrs	r3, r2
 801097a:	60fb      	str	r3, [r7, #12]

    /* Return value to caller.  */
    return(value);
 801097c:	68fb      	ldr	r3, [r7, #12]
}
 801097e:	4618      	mov	r0, r3
 8010980:	3714      	adds	r7, #20
 8010982:	46bd      	mov	sp, r7
 8010984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010988:	4770      	bx	lr

0801098a <_fx_utility_16_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_16_unsigned_write(UCHAR *dest_ptr, UINT value)
{
 801098a:	b480      	push	{r7}
 801098c:	b083      	sub	sp, #12
 801098e:	af00      	add	r7, sp, #0
 8010990:	6078      	str	r0, [r7, #4]
 8010992:	6039      	str	r1, [r7, #0]

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 8010994:	683b      	ldr	r3, [r7, #0]
 8010996:	b2da      	uxtb	r2, r3
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 801099c:	683b      	ldr	r3, [r7, #0]
 801099e:	0a1a      	lsrs	r2, r3, #8
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	3301      	adds	r3, #1
 80109a4:	b2d2      	uxtb	r2, r2
 80109a6:	701a      	strb	r2, [r3, #0]
}
 80109a8:	bf00      	nop
 80109aa:	370c      	adds	r7, #12
 80109ac:	46bd      	mov	sp, r7
 80109ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b2:	4770      	bx	lr

080109b4 <_fx_utility_32_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _fx_utility_32_unsigned_read(UCHAR *source_ptr)
{
 80109b4:	b480      	push	{r7}
 80109b6:	b085      	sub	sp, #20
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]

ULONG value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	3303      	adds	r3, #3
 80109c0:	781b      	ldrb	r3, [r3, #0]
 80109c2:	061a      	lsls	r2, r3, #24
             ((((ULONG) *(source_ptr+2)) & 0xFF) << 16) |
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	3302      	adds	r3, #2
 80109c8:	781b      	ldrb	r3, [r3, #0]
 80109ca:	041b      	lsls	r3, r3, #16
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 80109cc:	431a      	orrs	r2, r3
             ((((ULONG) *(source_ptr+1)) & 0xFF) << 8)  |
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	3301      	adds	r3, #1
 80109d2:	781b      	ldrb	r3, [r3, #0]
 80109d4:	021b      	lsls	r3, r3, #8
             ((((ULONG) *(source_ptr+2)) & 0xFF) << 16) |
 80109d6:	4313      	orrs	r3, r2
              (((ULONG) *(source_ptr)) & 0xFF);
 80109d8:	687a      	ldr	r2, [r7, #4]
 80109da:	7812      	ldrb	r2, [r2, #0]
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 80109dc:	4313      	orrs	r3, r2
 80109de:	60fb      	str	r3, [r7, #12]

    /* Return value to caller.  */
    return(value);
 80109e0:	68fb      	ldr	r3, [r7, #12]
}
 80109e2:	4618      	mov	r0, r3
 80109e4:	3714      	adds	r7, #20
 80109e6:	46bd      	mov	sp, r7
 80109e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ec:	4770      	bx	lr

080109ee <_fx_utility_32_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_32_unsigned_write(UCHAR *dest_ptr, ULONG value)
{
 80109ee:	b480      	push	{r7}
 80109f0:	b083      	sub	sp, #12
 80109f2:	af00      	add	r7, sp, #0
 80109f4:	6078      	str	r0, [r7, #4]
 80109f6:	6039      	str	r1, [r7, #0]

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 80109f8:	683b      	ldr	r3, [r7, #0]
 80109fa:	b2da      	uxtb	r2, r3
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 8010a00:	683b      	ldr	r3, [r7, #0]
 8010a02:	0a1a      	lsrs	r2, r3, #8
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	3301      	adds	r3, #1
 8010a08:	b2d2      	uxtb	r2, r2
 8010a0a:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 2) =   (UCHAR)((value >> 16) & 0xFF);
 8010a0c:	683b      	ldr	r3, [r7, #0]
 8010a0e:	0c1a      	lsrs	r2, r3, #16
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	3302      	adds	r3, #2
 8010a14:	b2d2      	uxtb	r2, r2
 8010a16:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 3) =   (UCHAR)((value >> 24) & 0xFF);
 8010a18:	683b      	ldr	r3, [r7, #0]
 8010a1a:	0e1a      	lsrs	r2, r3, #24
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	3303      	adds	r3, #3
 8010a20:	b2d2      	uxtb	r2, r2
 8010a22:	701a      	strb	r2, [r3, #0]
}
 8010a24:	bf00      	nop
 8010a26:	370c      	adds	r7, #12
 8010a28:	46bd      	mov	sp, r7
 8010a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2e:	4770      	bx	lr

08010a30 <_fx_utility_FAT_entry_read>:
/*                                            fixed compiler warning,     */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_read(FX_MEDIA *media_ptr, ULONG cluster, ULONG *entry_ptr)
{
 8010a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010a34:	b098      	sub	sp, #96	; 0x60
 8010a36:	af04      	add	r7, sp, #16
 8010a38:	61f8      	str	r0, [r7, #28]
 8010a3a:	61b9      	str	r1, [r7, #24]
 8010a3c:	617a      	str	r2, [r7, #20]
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of FAT entry reads and cache hits.  */
    media_ptr -> fx_media_fat_entry_reads++;
 8010a3e:	69fb      	ldr	r3, [r7, #28]
 8010a40:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8010a44:	1c5a      	adds	r2, r3, #1
 8010a46:	69fb      	ldr	r3, [r7, #28]
 8010a48:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_cache_read_hits++;
 8010a4c:	69fb      	ldr	r3, [r7, #28]
 8010a4e:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8010a52:	1c5a      	adds	r2, r3, #1
 8010a54:	69fb      	ldr	r3, [r7, #28]
 8010a56:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_READ_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 8010a5a:	69bb      	ldr	r3, [r7, #24]
 8010a5c:	f003 0303 	and.w	r3, r3, #3
 8010a60:	009b      	lsls	r3, r3, #2
 8010a62:	647b      	str	r3, [r7, #68]	; 0x44

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 8010a64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010a66:	4613      	mov	r3, r2
 8010a68:	005b      	lsls	r3, r3, #1
 8010a6a:	4413      	add	r3, r2
 8010a6c:	009b      	lsls	r3, r3, #2
 8010a6e:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8010a72:	69fa      	ldr	r2, [r7, #28]
 8010a74:	4413      	add	r3, r2
 8010a76:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef FX_DISABLE_FAT_ENTRY_REFRESH
    /* Determine if the FAT entry is in the cache - assuming the depth of the FAT cache is
       4 entries.  */
    if ((cache_entry_ptr -> fx_fat_cache_entry_cluster) == cluster)
 8010a78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	69ba      	ldr	r2, [r7, #24]
 8010a7e:	429a      	cmp	r2, r3
 8010a80:	d105      	bne.n	8010a8e <_fx_utility_FAT_entry_read+0x5e>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  cache_entry_ptr -> fx_fat_cache_entry_value;
 8010a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a84:	685a      	ldr	r2, [r3, #4]
 8010a86:	697b      	ldr	r3, [r7, #20]
 8010a88:	601a      	str	r2, [r3, #0]

        /* Don't move anything since we found the entry.  */

        /* Return a successful status.  */
        return(FX_SUCCESS);
 8010a8a:	2300      	movs	r3, #0
 8010a8c:	e1f4      	b.n	8010e78 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 1) -> fx_fat_cache_entry_cluster) == cluster)
 8010a8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a90:	330c      	adds	r3, #12
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	69ba      	ldr	r2, [r7, #24]
 8010a96:	429a      	cmp	r2, r3
 8010a98:	d11d      	bne.n	8010ad6 <_fx_utility_FAT_entry_read+0xa6>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 1) -> fx_fat_cache_entry_value;
 8010a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a9c:	330c      	adds	r3, #12
 8010a9e:	685a      	ldr	r2, [r3, #4]
 8010aa0:	697b      	ldr	r3, [r7, #20]
 8010aa2:	601a      	str	r2, [r3, #0]

        /* Just swap the first and second entry.  */
        temp_cache_entry =        *(cache_entry_ptr);
 8010aa4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010aaa:	ca07      	ldmia	r2, {r0, r1, r2}
 8010aac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 1);
 8010ab0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ab4:	4614      	mov	r4, r2
 8010ab6:	330c      	adds	r3, #12
 8010ab8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010abc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 8010ac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ac2:	330c      	adds	r3, #12
 8010ac4:	461c      	mov	r4, r3
 8010ac6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010aca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010ace:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	e1d0      	b.n	8010e78 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 2) -> fx_fat_cache_entry_cluster) == cluster)
 8010ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ad8:	3318      	adds	r3, #24
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	69ba      	ldr	r2, [r7, #24]
 8010ade:	429a      	cmp	r2, r3
 8010ae0:	d127      	bne.n	8010b32 <_fx_utility_FAT_entry_read+0x102>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 2) -> fx_fat_cache_entry_value;
 8010ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ae4:	3318      	adds	r3, #24
 8010ae6:	685a      	ldr	r2, [r3, #4]
 8010ae8:	697b      	ldr	r3, [r7, #20]
 8010aea:	601a      	str	r2, [r3, #0]

        /* Move the third entry to the top and the first two entries down.  */
        temp_cache_entry =        *(cache_entry_ptr);
 8010aec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010af2:	ca07      	ldmia	r2, {r0, r1, r2}
 8010af4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 2);
 8010af8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010afa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010afc:	4614      	mov	r4, r2
 8010afe:	3318      	adds	r3, #24
 8010b00:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010b04:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8010b08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b0a:	f103 0218 	add.w	r2, r3, #24
 8010b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b10:	4614      	mov	r4, r2
 8010b12:	330c      	adds	r3, #12
 8010b14:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010b18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 8010b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b1e:	330c      	adds	r3, #12
 8010b20:	461c      	mov	r4, r3
 8010b22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010b26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010b2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 8010b2e:	2300      	movs	r3, #0
 8010b30:	e1a2      	b.n	8010e78 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 3) -> fx_fat_cache_entry_cluster) == cluster)
 8010b32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b34:	3324      	adds	r3, #36	; 0x24
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	69ba      	ldr	r2, [r7, #24]
 8010b3a:	429a      	cmp	r2, r3
 8010b3c:	d131      	bne.n	8010ba2 <_fx_utility_FAT_entry_read+0x172>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 3) -> fx_fat_cache_entry_value;
 8010b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b40:	3324      	adds	r3, #36	; 0x24
 8010b42:	685a      	ldr	r2, [r3, #4]
 8010b44:	697b      	ldr	r3, [r7, #20]
 8010b46:	601a      	str	r2, [r3, #0]

        /* Move the last entry to the top and the first three entries down.  */
        temp_cache_entry =        *(cache_entry_ptr);
 8010b48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010b4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010b4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8010b50:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 3);
 8010b54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b58:	4614      	mov	r4, r2
 8010b5a:	3324      	adds	r3, #36	; 0x24
 8010b5c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010b60:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8010b64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b66:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8010b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b6c:	4614      	mov	r4, r2
 8010b6e:	3318      	adds	r3, #24
 8010b70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010b74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8010b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b7a:	f103 0218 	add.w	r2, r3, #24
 8010b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b80:	4614      	mov	r4, r2
 8010b82:	330c      	adds	r3, #12
 8010b84:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010b88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 8010b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010b8e:	330c      	adds	r3, #12
 8010b90:	461c      	mov	r4, r3
 8010b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010b96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010b9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	e16a      	b.n	8010e78 <_fx_utility_FAT_entry_read+0x448>
    }
#endif /* FX_DISABLE_FAT_ENTRY_REFRESH */

    /* Determine if the oldest entry was modified, i.e. whether or not it is
       dirty.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty)
 8010ba2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ba4:	1cda      	adds	r2, r3, #3
 8010ba6:	69f9      	ldr	r1, [r7, #28]
 8010ba8:	4613      	mov	r3, r2
 8010baa:	005b      	lsls	r3, r3, #1
 8010bac:	4413      	add	r3, r2
 8010bae:	009b      	lsls	r3, r3, #2
 8010bb0:	440b      	add	r3, r1
 8010bb2:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d008      	beq.n	8010bce <_fx_utility_FAT_entry_read+0x19e>
    {

        /* Yes, the entry is dirty and needs to be flushed out.  */
        status = _fx_utility_FAT_flush(media_ptr);
 8010bbc:	69f8      	ldr	r0, [r7, #28]
 8010bbe:	f000 fa54 	bl	801106a <_fx_utility_FAT_flush>
 8010bc2:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Check for completion status.  */
        if (status != FX_SUCCESS)
 8010bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d001      	beq.n	8010bce <_fx_utility_FAT_entry_read+0x19e>
        {

            /* Return error status.  */
            return(status);
 8010bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010bcc:	e154      	b.n	8010e78 <_fx_utility_FAT_entry_read+0x448>
       actually read the FAT entry.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_read_hits--;
 8010bce:	69fb      	ldr	r3, [r7, #28]
 8010bd0:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8010bd4:	1e5a      	subs	r2, r3, #1
 8010bd6:	69fb      	ldr	r3, [r7, #28]
 8010bd8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_read_misses++;
 8010bdc:	69fb      	ldr	r3, [r7, #28]
 8010bde:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8010be2:	1c5a      	adds	r2, r3, #1
 8010be4:	69fb      	ldr	r3, [r7, #28]
 8010be6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
#endif

    /* Determine which type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 8010bea:	69fb      	ldr	r3, [r7, #28]
 8010bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	f000 80a7 	beq.w	8010d42 <_fx_utility_FAT_entry_read+0x312>
    {

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 8010bf4:	69bb      	ldr	r3, [r7, #24]
 8010bf6:	005a      	lsls	r2, r3, #1
 8010bf8:	69bb      	ldr	r3, [r7, #24]
 8010bfa:	4413      	add	r3, r2
 8010bfc:	085b      	lsrs	r3, r3, #1
 8010bfe:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010c00:	69fb      	ldr	r3, [r7, #28]
 8010c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c06:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 8010c0a:	69fb      	ldr	r3, [r7, #28]
 8010c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010c0e:	4413      	add	r3, r2
 8010c10:	637b      	str	r3, [r7, #52]	; 0x34

        /* Read the sector in.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c14:	2200      	movs	r2, #0
 8010c16:	60bb      	str	r3, [r7, #8]
 8010c18:	60fa      	str	r2, [r7, #12]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010c1a:	69fb      	ldr	r3, [r7, #28]
 8010c1c:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010c1e:	2202      	movs	r2, #2
 8010c20:	9202      	str	r2, [sp, #8]
 8010c22:	2201      	movs	r2, #1
 8010c24:	9201      	str	r2, [sp, #4]
 8010c26:	9300      	str	r3, [sp, #0]
 8010c28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010c2c:	69f8      	ldr	r0, [r7, #28]
 8010c2e:	f001 fb0d 	bl	801224c <_fx_utility_logical_sector_read>
 8010c32:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 8010c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d001      	beq.n	8010c3e <_fx_utility_FAT_entry_read+0x20e>
        {
            /* Return the error status.  */
            return(status);
 8010c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c3c:	e11c      	b.n	8010e78 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8010c3e:	69fb      	ldr	r3, [r7, #28]
 8010c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010c44:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 8010c46:	69fa      	ldr	r2, [r7, #28]
 8010c48:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8010c4a:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 8010c4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c50:	1ad3      	subs	r3, r2, r3
 8010c52:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8010c54:	69fb      	ldr	r3, [r7, #28]
 8010c56:	689a      	ldr	r2, [r3, #8]
 8010c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c5a:	4413      	add	r3, r2
 8010c5c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if the cluster entry is odd or even.  */
        if (cluster & 1)
 8010c5e:	69bb      	ldr	r3, [r7, #24]
 8010c60:	f003 0301 	and.w	r3, r3, #1
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d030      	beq.n	8010cca <_fx_utility_FAT_entry_read+0x29a>
        {

            /* Odd cluster number.  */

            /* Pickup the lower nibble of the FAT entry.  */
            entry =  (((UINT)*FAT_ptr) & 0xF0) >> 4;
 8010c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c6a:	781b      	ldrb	r3, [r3, #0]
 8010c6c:	091b      	lsrs	r3, r3, #4
 8010c6e:	b2db      	uxtb	r3, r3
 8010c70:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Move to the next byte of the FAT entry.  */
            FAT_ptr++;
 8010c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c74:	3301      	adds	r3, #1
 8010c76:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if we are now past the end of the FAT buffer in memory.  */
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8010c78:	69fb      	ldr	r3, [r7, #28]
 8010c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c7c:	3b01      	subs	r3, #1
 8010c7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010c80:	429a      	cmp	r2, r3
 8010c82:	d11b      	bne.n	8010cbc <_fx_utility_FAT_entry_read+0x28c>
            {

                /* Yes, we need to read the next sector.  */
                FAT_sector++;
 8010c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c86:	3301      	adds	r3, #1
 8010c88:	637b      	str	r3, [r7, #52]	; 0x34
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	603b      	str	r3, [r7, #0]
 8010c90:	607a      	str	r2, [r7, #4]
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010c92:	69fb      	ldr	r3, [r7, #28]
 8010c94:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010c96:	2202      	movs	r2, #2
 8010c98:	9202      	str	r2, [sp, #8]
 8010c9a:	2201      	movs	r2, #1
 8010c9c:	9201      	str	r2, [sp, #4]
 8010c9e:	9300      	str	r3, [sp, #0]
 8010ca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010ca4:	69f8      	ldr	r0, [r7, #28]
 8010ca6:	f001 fad1 	bl	801224c <_fx_utility_logical_sector_read>
 8010caa:	63f8      	str	r0, [r7, #60]	; 0x3c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8010cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d001      	beq.n	8010cb6 <_fx_utility_FAT_entry_read+0x286>
                {

                    /* Return the error status.  */
                    return(status);
 8010cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cb4:	e0e0      	b.n	8010e78 <_fx_utility_FAT_entry_read+0x448>
                }

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8010cb6:	69fb      	ldr	r3, [r7, #28]
 8010cb8:	689b      	ldr	r3, [r3, #8]
 8010cba:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Pickup the upper 8 bits of the FAT entry.  */
            entry =  entry | (((UINT)*FAT_ptr) << 4);
 8010cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cbe:	781b      	ldrb	r3, [r3, #0]
 8010cc0:	011b      	lsls	r3, r3, #4
 8010cc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010cc4:	4313      	orrs	r3, r2
 8010cc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8010cc8:	e02f      	b.n	8010d2a <_fx_utility_FAT_entry_read+0x2fa>
        {

            /* Even cluster number.  */

            /* Pickup the lower byte of the FAT entry.  */
            entry =  (UINT)(((UINT)*FAT_ptr) & 0xFF);
 8010cca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ccc:	781b      	ldrb	r3, [r3, #0]
 8010cce:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Move to the next nibble of the FAT entry.  */
            FAT_ptr++;
 8010cd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010cd2:	3301      	adds	r3, #1
 8010cd4:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if we are now past the end of the FAT buffer in memory.  */
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8010cd6:	69fb      	ldr	r3, [r7, #28]
 8010cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cda:	3b01      	subs	r3, #1
 8010cdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010cde:	429a      	cmp	r2, r3
 8010ce0:	d11b      	bne.n	8010d1a <_fx_utility_FAT_entry_read+0x2ea>
            {

                /* Yes, we need to read the next sector.  */
                FAT_sector++;
 8010ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ce4:	3301      	adds	r3, #1
 8010ce6:	637b      	str	r3, [r7, #52]	; 0x34
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cea:	2200      	movs	r2, #0
 8010cec:	469a      	mov	sl, r3
 8010cee:	4693      	mov	fp, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010cf0:	69fb      	ldr	r3, [r7, #28]
 8010cf2:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010cf4:	2202      	movs	r2, #2
 8010cf6:	9202      	str	r2, [sp, #8]
 8010cf8:	2201      	movs	r2, #1
 8010cfa:	9201      	str	r2, [sp, #4]
 8010cfc:	9300      	str	r3, [sp, #0]
 8010cfe:	4652      	mov	r2, sl
 8010d00:	465b      	mov	r3, fp
 8010d02:	69f8      	ldr	r0, [r7, #28]
 8010d04:	f001 faa2 	bl	801224c <_fx_utility_logical_sector_read>
 8010d08:	63f8      	str	r0, [r7, #60]	; 0x3c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8010d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d001      	beq.n	8010d14 <_fx_utility_FAT_entry_read+0x2e4>
                {
                    return(status);
 8010d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d12:	e0b1      	b.n	8010e78 <_fx_utility_FAT_entry_read+0x448>
                }

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 8010d14:	69fb      	ldr	r3, [r7, #28]
 8010d16:	689b      	ldr	r3, [r3, #8]
 8010d18:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Pickup the upper 4 bits of the FAT entry.  */
            entry =  entry | ((((UINT)*FAT_ptr) & 0x0F) << 8);
 8010d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d1c:	781b      	ldrb	r3, [r3, #0]
 8010d1e:	021b      	lsls	r3, r3, #8
 8010d20:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8010d24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010d26:	4313      	orrs	r3, r2
 8010d28:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* Determine if we need to do sign extension on the 12-bit eof value.  */
        if (entry >= FX_MAX_12BIT_CLUST)
 8010d2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d2c:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 8010d30:	d303      	bcc.n	8010d3a <_fx_utility_FAT_entry_read+0x30a>
        {

            /* Yes, we need to sign extend.  */
            entry =  entry | FX_SIGN_EXTEND;
 8010d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d34:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8010d38:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        *entry_ptr =  entry;
 8010d3a:	697b      	ldr	r3, [r7, #20]
 8010d3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010d3e:	601a      	str	r2, [r3, #0]
 8010d40:	e078      	b.n	8010e34 <_fx_utility_FAT_entry_read+0x404>

    /* Check for a 16-bit FAT.  */
#ifdef FX_ENABLE_EXFAT
    else if (FX_FAT16  == media_ptr -> fx_media_FAT_type)
#else
    else if (!media_ptr -> fx_media_32_bit_FAT)
 8010d42:	69fb      	ldr	r3, [r7, #28]
 8010d44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d139      	bne.n	8010dbe <_fx_utility_FAT_entry_read+0x38e>
    {

        /* 16-bit FAT is present.  */

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster) * 2);
 8010d4a:	69bb      	ldr	r3, [r7, #24]
 8010d4c:	005b      	lsls	r3, r3, #1
 8010d4e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010d50:	69fb      	ldr	r3, [r7, #28]
 8010d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010d56:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 8010d5a:	69fb      	ldr	r3, [r7, #28]
 8010d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010d5e:	4413      	add	r3, r2
 8010d60:	637b      	str	r3, [r7, #52]	; 0x34

        /* Read the FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d64:	2200      	movs	r2, #0
 8010d66:	4698      	mov	r8, r3
 8010d68:	4691      	mov	r9, r2
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010d6a:	69fb      	ldr	r3, [r7, #28]
 8010d6c:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010d6e:	2202      	movs	r2, #2
 8010d70:	9202      	str	r2, [sp, #8]
 8010d72:	2201      	movs	r2, #1
 8010d74:	9201      	str	r2, [sp, #4]
 8010d76:	9300      	str	r3, [sp, #0]
 8010d78:	4642      	mov	r2, r8
 8010d7a:	464b      	mov	r3, r9
 8010d7c:	69f8      	ldr	r0, [r7, #28]
 8010d7e:	f001 fa65 	bl	801224c <_fx_utility_logical_sector_read>
 8010d82:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 8010d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d001      	beq.n	8010d8e <_fx_utility_FAT_entry_read+0x35e>
        {

            /* Return the error code.  */
            return(status);
 8010d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d8c:	e074      	b.n	8010e78 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8010d8e:	69fb      	ldr	r3, [r7, #28]
 8010d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010d92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d94:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 8010d96:	69fa      	ldr	r2, [r7, #28]
 8010d98:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8010d9a:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 8010d9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010da0:	1ad3      	subs	r3, r2, r3
 8010da2:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8010da4:	69fb      	ldr	r3, [r7, #28]
 8010da6:	689a      	ldr	r2, [r3, #8]
 8010da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010daa:	4413      	add	r3, r2
 8010dac:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the FAT entry.  */
        entry =  _fx_utility_16_unsigned_read(FAT_ptr);
 8010dae:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010db0:	f7ff fdd8 	bl	8010964 <_fx_utility_16_unsigned_read>
 8010db4:	64b8      	str	r0, [r7, #72]	; 0x48

        *entry_ptr =  entry;
 8010db6:	697b      	ldr	r3, [r7, #20]
 8010db8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010dba:	601a      	str	r2, [r3, #0]
 8010dbc:	e03a      	b.n	8010e34 <_fx_utility_FAT_entry_read+0x404>
    else
#endif /* FX_ENABLE_EXFAT */
    {

        /* Otherwise, a 32 bit FAT present.  */
        byte_offset =  (((ULONG)cluster) * 4);
 8010dbe:	69bb      	ldr	r3, [r7, #24]
 8010dc0:	009b      	lsls	r3, r3, #2
 8010dc2:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010dc4:	69fb      	ldr	r3, [r7, #28]
 8010dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010dc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010dca:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 8010dce:	69fb      	ldr	r3, [r7, #28]
 8010dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8010dd2:	4413      	add	r3, r2
 8010dd4:	637b      	str	r3, [r7, #52]	; 0x34

        /* Calculate the byte offset to the FAT entry.  */
        byte_offset = (byte_offset % media_ptr -> fx_media_bytes_per_sector);
 8010dd6:	69fb      	ldr	r3, [r7, #28]
 8010dd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ddc:	fbb3 f1f2 	udiv	r1, r3, r2
 8010de0:	fb01 f202 	mul.w	r2, r1, r2
 8010de4:	1a9b      	subs	r3, r3, r2
 8010de6:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Read the appropriate FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dea:	2200      	movs	r2, #0
 8010dec:	461c      	mov	r4, r3
 8010dee:	4615      	mov	r5, r2
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8010df0:	69fb      	ldr	r3, [r7, #28]
 8010df2:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8010df4:	2202      	movs	r2, #2
 8010df6:	9202      	str	r2, [sp, #8]
 8010df8:	2201      	movs	r2, #1
 8010dfa:	9201      	str	r2, [sp, #4]
 8010dfc:	9300      	str	r3, [sp, #0]
 8010dfe:	4622      	mov	r2, r4
 8010e00:	462b      	mov	r3, r5
 8010e02:	69f8      	ldr	r0, [r7, #28]
 8010e04:	f001 fa22 	bl	801224c <_fx_utility_logical_sector_read>
 8010e08:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 8010e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d001      	beq.n	8010e14 <_fx_utility_FAT_entry_read+0x3e4>
        {

            /* Return the error code.  */
            return(status);
 8010e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e12:	e031      	b.n	8010e78 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (ULONG)byte_offset;
 8010e14:	69fb      	ldr	r3, [r7, #28]
 8010e16:	689a      	ldr	r2, [r3, #8]
 8010e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e1a:	4413      	add	r3, r2
 8010e1c:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the FAT entry.  */
        entry32 =  _fx_utility_32_unsigned_read(FAT_ptr);
 8010e1e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8010e20:	f7ff fdc8 	bl	80109b4 <_fx_utility_32_unsigned_read>
 8010e24:	6338      	str	r0, [r7, #48]	; 0x30
        if (media_ptr -> fx_media_FAT_type == FX_FAT32)
        {
#endif /* FX_ENABLE_EXFAT */

            /* Clear upper nibble.  */
            entry32 = entry32 & 0x0FFFFFFF;
 8010e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e28:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010e2c:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        *entry_ptr =  entry32;
 8010e2e:	697b      	ldr	r3, [r7, #20]
 8010e30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e32:	601a      	str	r2, [r3, #0]
    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8010e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e36:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8010e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e3c:	4614      	mov	r4, r2
 8010e3e:	3318      	adds	r3, #24
 8010e40:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010e44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8010e48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e4a:	f103 0218 	add.w	r2, r3, #24
 8010e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e50:	4614      	mov	r4, r2
 8010e52:	330c      	adds	r3, #12
 8010e54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010e58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8010e5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e5e:	330c      	adds	r3, #12
 8010e60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010e62:	ca07      	ldmia	r2, {r0, r1, r2}
 8010e64:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* Setup the new FAT entry in the cache.  */
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 8010e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e6a:	69ba      	ldr	r2, [r7, #24]
 8010e6c:	601a      	str	r2, [r3, #0]
    cache_entry_ptr -> fx_fat_cache_entry_value   =  *entry_ptr;
 8010e6e:	697b      	ldr	r3, [r7, #20]
 8010e70:	681a      	ldr	r2, [r3, #0]
 8010e72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e74:	605a      	str	r2, [r3, #4]

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 8010e76:	2300      	movs	r3, #0
}
 8010e78:	4618      	mov	r0, r3
 8010e7a:	3750      	adds	r7, #80	; 0x50
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010e82 <_fx_utility_FAT_entry_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_write(FX_MEDIA *media_ptr, ULONG cluster, ULONG next_cluster)
{
 8010e82:	b590      	push	{r4, r7, lr}
 8010e84:	b089      	sub	sp, #36	; 0x24
 8010e86:	af00      	add	r7, sp, #0
 8010e88:	60f8      	str	r0, [r7, #12]
 8010e8a:	60b9      	str	r1, [r7, #8]
 8010e8c:	607a      	str	r2, [r7, #4]
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of FAT entry writes and cache hits.  */
    media_ptr -> fx_media_fat_entry_writes++;
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 8010e94:	1c5a      	adds	r2, r3, #1
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    media_ptr -> fx_media_fat_entry_cache_write_hits++;
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8010ea2:	1c5a      	adds	r2, r3, #1
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_WRITE_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 8010eaa:	68bb      	ldr	r3, [r7, #8]
 8010eac:	f003 0303 	and.w	r3, r3, #3
 8010eb0:	009b      	lsls	r3, r3, #2
 8010eb2:	61bb      	str	r3, [r7, #24]

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 8010eb4:	69ba      	ldr	r2, [r7, #24]
 8010eb6:	4613      	mov	r3, r2
 8010eb8:	005b      	lsls	r3, r3, #1
 8010eba:	4413      	add	r3, r2
 8010ebc:	009b      	lsls	r3, r3, #2
 8010ebe:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8010ec2:	68fa      	ldr	r2, [r7, #12]
 8010ec4:	4413      	add	r3, r2
 8010ec6:	617b      	str	r3, [r7, #20]

    /* First search for the entry in the FAT entry cache.  */
    for (i = 0; i < FX_FAT_CACHE_DEPTH; i++)
 8010ec8:	2300      	movs	r3, #0
 8010eca:	61fb      	str	r3, [r7, #28]
 8010ecc:	e051      	b.n	8010f72 <_fx_utility_FAT_entry_write+0xf0>
    {

        /* See if the entry matches the write request.  */
        if (((cache_entry_ptr + i) -> fx_fat_cache_entry_cluster) == cluster)
 8010ece:	69fa      	ldr	r2, [r7, #28]
 8010ed0:	4613      	mov	r3, r2
 8010ed2:	005b      	lsls	r3, r3, #1
 8010ed4:	4413      	add	r3, r2
 8010ed6:	009b      	lsls	r3, r3, #2
 8010ed8:	461a      	mov	r2, r3
 8010eda:	697b      	ldr	r3, [r7, #20]
 8010edc:	4413      	add	r3, r2
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	68ba      	ldr	r2, [r7, #8]
 8010ee2:	429a      	cmp	r2, r3
 8010ee4:	d142      	bne.n	8010f6c <_fx_utility_FAT_entry_write+0xea>
        {

            /* Yes, we have a matching entry.  Save the new information in the FAT
               cache and mark this entry as dirty.  */
            (cache_entry_ptr + i) -> fx_fat_cache_entry_value =     next_cluster;
 8010ee6:	69fa      	ldr	r2, [r7, #28]
 8010ee8:	4613      	mov	r3, r2
 8010eea:	005b      	lsls	r3, r3, #1
 8010eec:	4413      	add	r3, r2
 8010eee:	009b      	lsls	r3, r3, #2
 8010ef0:	461a      	mov	r2, r3
 8010ef2:	697b      	ldr	r3, [r7, #20]
 8010ef4:	4413      	add	r3, r2
 8010ef6:	687a      	ldr	r2, [r7, #4]
 8010ef8:	605a      	str	r2, [r3, #4]
            (cache_entry_ptr + i) -> fx_fat_cache_entry_dirty =     1;
 8010efa:	69fa      	ldr	r2, [r7, #28]
 8010efc:	4613      	mov	r3, r2
 8010efe:	005b      	lsls	r3, r3, #1
 8010f00:	4413      	add	r3, r2
 8010f02:	009b      	lsls	r3, r3, #2
 8010f04:	461a      	mov	r2, r3
 8010f06:	697b      	ldr	r3, [r7, #20]
 8010f08:	4413      	add	r3, r2
 8010f0a:	2201      	movs	r2, #1
 8010f0c:	609a      	str	r2, [r3, #8]

            /* Determine if the driver has requested notification when data sectors in the media
               become free.  This can be useful to FLASH manager software.  */
            if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d027      	beq.n	8010f68 <_fx_utility_FAT_entry_write+0xe6>
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d124      	bne.n	8010f68 <_fx_utility_FAT_entry_write+0xe6>
                   not in use.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver release sectors requests.  */
                media_ptr -> fx_media_driver_release_sectors_requests++;
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8010f24:	1c5a      	adds	r2, r3, #1
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
#endif

                /* This cluster is being released so inform the driver that the
                   corresponding sectors are now available.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	2206      	movs	r2, #6
 8010f30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	2290      	movs	r2, #144	; 0x90
 8010f38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                                 ((cluster - FX_FAT_ENTRY_START) * media_ptr -> fx_media_sectors_per_cluster));
 8010f40:	68bb      	ldr	r3, [r7, #8]
 8010f42:	3b02      	subs	r3, #2
 8010f44:	68f9      	ldr	r1, [r7, #12]
 8010f46:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8010f48:	fb01 f303 	mul.w	r3, r1, r3
                media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 8010f4c:	441a      	add	r2, r3
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          media_ptr -> fx_media_sectors_per_cluster;
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_RELEASE_SECTORS, media_ptr, media_ptr -> fx_media_driver_logical_sector, media_ptr -> fx_media_driver_sectors, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the driver.  */
                (media_ptr -> fx_media_driver_entry)(media_ptr);
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8010f64:	68f8      	ldr	r0, [r7, #12]
 8010f66:	4798      	blx	r3
            }

            /* Done, return successful status.  */
            return(FX_SUCCESS);
 8010f68:	2300      	movs	r3, #0
 8010f6a:	e07a      	b.n	8011062 <_fx_utility_FAT_entry_write+0x1e0>
    for (i = 0; i < FX_FAT_CACHE_DEPTH; i++)
 8010f6c:	69fb      	ldr	r3, [r7, #28]
 8010f6e:	3301      	adds	r3, #1
 8010f70:	61fb      	str	r3, [r7, #28]
 8010f72:	69fb      	ldr	r3, [r7, #28]
 8010f74:	2b03      	cmp	r3, #3
 8010f76:	d9aa      	bls.n	8010ece <_fx_utility_FAT_entry_write+0x4c>
    /* If we reach this point, we know that the FAT write request is not in
       the cache.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_write_hits--;
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8010f7e:	1e5a      	subs	r2, r3, #1
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_write_misses++;
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
 8010f8c:	1c5a      	adds	r2, r3, #1
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
#endif

    /* Determine if the oldest entry is dirty and needs to be flushed.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty == 1)
 8010f94:	69bb      	ldr	r3, [r7, #24]
 8010f96:	1cda      	adds	r2, r3, #3
 8010f98:	68f9      	ldr	r1, [r7, #12]
 8010f9a:	4613      	mov	r3, r2
 8010f9c:	005b      	lsls	r3, r3, #1
 8010f9e:	4413      	add	r3, r2
 8010fa0:	009b      	lsls	r3, r3, #2
 8010fa2:	440b      	add	r3, r1
 8010fa4:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	2b01      	cmp	r3, #1
 8010fac:	d108      	bne.n	8010fc0 <_fx_utility_FAT_entry_write+0x13e>
    {

        /* Flush the dirty entry so it can be used to hold the current
           FAT entry write request.  */
        status = _fx_utility_FAT_flush(media_ptr);
 8010fae:	68f8      	ldr	r0, [r7, #12]
 8010fb0:	f000 f85b 	bl	801106a <_fx_utility_FAT_flush>
 8010fb4:	6138      	str	r0, [r7, #16]

        /* Determine if the write was successful.  */
        if (status != FX_SUCCESS)
 8010fb6:	693b      	ldr	r3, [r7, #16]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d001      	beq.n	8010fc0 <_fx_utility_FAT_entry_write+0x13e>
        {

            /* No, return error status to caller.  */
            return(status);
 8010fbc:	693b      	ldr	r3, [r7, #16]
 8010fbe:	e050      	b.n	8011062 <_fx_utility_FAT_entry_write+0x1e0>
        }

    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 8010fc0:	697b      	ldr	r3, [r7, #20]
 8010fc2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8010fc6:	697b      	ldr	r3, [r7, #20]
 8010fc8:	4614      	mov	r4, r2
 8010fca:	3318      	adds	r3, #24
 8010fcc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010fd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 8010fd4:	697b      	ldr	r3, [r7, #20]
 8010fd6:	f103 0218 	add.w	r2, r3, #24
 8010fda:	697b      	ldr	r3, [r7, #20]
 8010fdc:	4614      	mov	r4, r2
 8010fde:	330c      	adds	r3, #12
 8010fe0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010fe4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 8010fe8:	697b      	ldr	r3, [r7, #20]
 8010fea:	330c      	adds	r3, #12
 8010fec:	697a      	ldr	r2, [r7, #20]
 8010fee:	ca07      	ldmia	r2, {r0, r1, r2}
 8010ff0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* Save the current FAT entry write request and mark as dirty.  */
    cache_entry_ptr -> fx_fat_cache_entry_dirty =    1;
 8010ff4:	697b      	ldr	r3, [r7, #20]
 8010ff6:	2201      	movs	r2, #1
 8010ff8:	609a      	str	r2, [r3, #8]
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 8010ffa:	697b      	ldr	r3, [r7, #20]
 8010ffc:	68ba      	ldr	r2, [r7, #8]
 8010ffe:	601a      	str	r2, [r3, #0]
    cache_entry_ptr -> fx_fat_cache_entry_value =    next_cluster;
 8011000:	697b      	ldr	r3, [r7, #20]
 8011002:	687a      	ldr	r2, [r7, #4]
 8011004:	605a      	str	r2, [r3, #4]

    /* Determine if the driver has requested notification when data sectors in the media
       become free.  This can be useful to FLASH manager software.  */
    if ((media_ptr -> fx_media_driver_free_sector_update) && (next_cluster == FX_FREE_CLUSTER))
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801100c:	2b00      	cmp	r3, #0
 801100e:	d027      	beq.n	8011060 <_fx_utility_FAT_entry_write+0x1de>
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d124      	bne.n	8011060 <_fx_utility_FAT_entry_write+0x1de>
           not in use.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver release sectors requests.  */
        media_ptr -> fx_media_driver_release_sectors_requests++;
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 801101c:	1c5a      	adds	r2, r3, #1
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
#endif

        /* This cluster is being released so inform the driver that the
              corresponding sectors are now available.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_RELEASE_SECTORS;
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	2206      	movs	r2, #6
 8011028:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	2290      	movs	r2, #144	; 0x90
 8011030:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                                         ((cluster - FX_FAT_ENTRY_START) * media_ptr -> fx_media_sectors_per_cluster));
 8011038:	68bb      	ldr	r3, [r7, #8]
 801103a:	3b02      	subs	r3, #2
 801103c:	68f9      	ldr	r1, [r7, #12]
 801103e:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8011040:	fb01 f303 	mul.w	r3, r1, r3
        media_ptr -> fx_media_driver_logical_sector =   (media_ptr -> fx_media_data_sector_start +
 8011044:	441a      	add	r2, r3
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          media_ptr -> fx_media_sectors_per_cluster;
 801104c:	68fb      	ldr	r3, [r7, #12]
 801104e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_RELEASE_SECTORS, media_ptr, media_ptr -> fx_media_driver_logical_sector, media_ptr -> fx_media_driver_sectors, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the driver.  */
        (media_ptr -> fx_media_driver_entry)(media_ptr);
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 801105c:	68f8      	ldr	r0, [r7, #12]
 801105e:	4798      	blx	r3
    }

    /* Return success to caller.  */
    return(FX_SUCCESS);
 8011060:	2300      	movs	r3, #0
}
 8011062:	4618      	mov	r0, r3
 8011064:	3724      	adds	r7, #36	; 0x24
 8011066:	46bd      	mov	sp, r7
 8011068:	bd90      	pop	{r4, r7, pc}

0801106a <_fx_utility_FAT_flush>:
/*                                            FAT secondary update map,   */
/*                                            resulting in version 6.1.2  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_flush(FX_MEDIA *media_ptr)
{
 801106a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801106e:	b09a      	sub	sp, #104	; 0x68
 8011070:	af04      	add	r7, sp, #16
 8011072:	61f8      	str	r0, [r7, #28]
INT    multi_sector_entry;
ULONG  sector;

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of cache flush requests.  */
    media_ptr -> fx_media_fat_cache_flushes++;
 8011074:	69fb      	ldr	r3, [r7, #28]
 8011076:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 801107a:	1c5a      	adds	r2, r3, #1
 801107c:	69fb      	ldr	r3, [r7, #28]
 801107e:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
#endif

    /* Loop through the media's FAT cache and flush out dirty entries.  */
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 8011082:	2300      	movs	r3, #0
 8011084:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011086:	e337      	b.n	80116f8 <_fx_utility_FAT_flush+0x68e>
    {

        /* Determine if the entry is dirty.  */
        if ((media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_dirty) == 0)
 8011088:	69f9      	ldr	r1, [r7, #28]
 801108a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801108c:	4613      	mov	r3, r2
 801108e:	005b      	lsls	r3, r3, #1
 8011090:	4413      	add	r3, r2
 8011092:	009b      	lsls	r3, r3, #2
 8011094:	440b      	add	r3, r1
 8011096:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	2b00      	cmp	r3, #0
 801109e:	f000 8325 	beq.w	80116ec <_fx_utility_FAT_flush+0x682>

        /* Otherwise, the entry is indeed dirty and must be flushed out.  Process
           relative to the type of FAT that is being used.  */

        /* Pickup the contents of the FAT cache entry.  */
        cluster =       media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_cluster;
 80110a2:	69f9      	ldr	r1, [r7, #28]
 80110a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80110a6:	4613      	mov	r3, r2
 80110a8:	005b      	lsls	r3, r3, #1
 80110aa:	4413      	add	r3, r2
 80110ac:	009b      	lsls	r3, r3, #2
 80110ae:	440b      	add	r3, r1
 80110b0:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	643b      	str	r3, [r7, #64]	; 0x40

        /* Determine which type of FAT is present.  */
#ifdef FX_ENABLE_EXFAT
        if (media_ptr -> fx_media_FAT_type == FX_FAT12)
#else
        if (media_ptr -> fx_media_12_bit_FAT)
 80110b8:	69fb      	ldr	r3, [r7, #28]
 80110ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80110bc:	2b00      	cmp	r3, #0
 80110be:	f000 816c 	beq.w	801139a <_fx_utility_FAT_flush+0x330>
#endif /* FX_ENABLE_EXFAT */
        {

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 80110c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110c4:	005a      	lsls	r2, r3, #1
 80110c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80110c8:	4413      	add	r3, r2
 80110ca:	085b      	lsrs	r3, r3, #1
 80110cc:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80110ce:	69fb      	ldr	r3, [r7, #28]
 80110d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80110d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80110d4:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 80110d8:	69fb      	ldr	r3, [r7, #28]
 80110da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80110dc:	4413      	add	r3, r2
 80110de:	657b      	str	r3, [r7, #84]	; 0x54

            /* Initialize as not written.  */
            multi_sector_entry = -1;
 80110e0:	f04f 33ff 	mov.w	r3, #4294967295
 80110e4:	647b      	str	r3, [r7, #68]	; 0x44

            for (;;)
            {

                /* Pickup the FAT sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80110e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110e8:	2200      	movs	r2, #0
 80110ea:	461c      	mov	r4, r3
 80110ec:	4615      	mov	r5, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 80110ee:	69fb      	ldr	r3, [r7, #28]
 80110f0:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80110f2:	2302      	movs	r3, #2
 80110f4:	9302      	str	r3, [sp, #8]
 80110f6:	2301      	movs	r3, #1
 80110f8:	9301      	str	r3, [sp, #4]
 80110fa:	9200      	str	r2, [sp, #0]
 80110fc:	4622      	mov	r2, r4
 80110fe:	462b      	mov	r3, r5
 8011100:	69f8      	ldr	r0, [r7, #28]
 8011102:	f001 f8a3 	bl	801224c <_fx_utility_logical_sector_read>
 8011106:	63b8      	str	r0, [r7, #56]	; 0x38

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8011108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801110a:	2b00      	cmp	r3, #0
 801110c:	d001      	beq.n	8011112 <_fx_utility_FAT_flush+0xa8>
                {

                    /* Return the error status.  */
                    return(status);
 801110e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011110:	e2f7      	b.n	8011702 <_fx_utility_FAT_flush+0x698>
                }

                /* Determine if a mulit-sector FAT update is present.  */
                if (multi_sector_entry != -1)
 8011112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011118:	d037      	beq.n	801118a <_fx_utility_FAT_flush+0x120>

                    /* Yes, store the remaining portion of the new FAT entry in the
                       next FAT sector.  */

                    /* Setup a pointer into the buffer.  */
                    FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 801111a:	69fb      	ldr	r3, [r7, #28]
 801111c:	689b      	ldr	r3, [r3, #8]
 801111e:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Pickup the cluster and next cluster.  */
                    cluster = (media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_cluster);
 8011120:	69f9      	ldr	r1, [r7, #28]
 8011122:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011124:	4613      	mov	r3, r2
 8011126:	005b      	lsls	r3, r3, #1
 8011128:	4413      	add	r3, r2
 801112a:	009b      	lsls	r3, r3, #2
 801112c:	440b      	add	r3, r1
 801112e:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	643b      	str	r3, [r7, #64]	; 0x40
                    next_cluster = media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_value;
 8011136:	69f9      	ldr	r1, [r7, #28]
 8011138:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801113a:	4613      	mov	r3, r2
 801113c:	005b      	lsls	r3, r3, #1
 801113e:	4413      	add	r3, r2
 8011140:	009b      	lsls	r3, r3, #2
 8011142:	440b      	add	r3, r1
 8011144:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8011148:	681b      	ldr	r3, [r3, #0]
 801114a:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Determine if the cluster entry is odd or even.  */
                    if (cluster & 1)
 801114c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801114e:	f003 0301 	and.w	r3, r3, #1
 8011152:	2b00      	cmp	r3, #0
 8011154:	d005      	beq.n	8011162 <_fx_utility_FAT_flush+0xf8>
                    {

                        /* Store the upper 8 bits of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 8011156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011158:	091b      	lsrs	r3, r3, #4
 801115a:	b2db      	uxtb	r3, r3
 801115c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801115e:	7013      	strb	r3, [r2, #0]
 8011160:	e010      	b.n	8011184 <_fx_utility_FAT_flush+0x11a>
                    }
                    else
                    {

                        /* Store the upper 4 bits of the FAT entry.  */
                        temp =  ((UINT)*FAT_ptr) & 0xF0;
 8011162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011164:	781b      	ldrb	r3, [r3, #0]
 8011166:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801116a:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 801116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801116e:	b2da      	uxtb	r2, r3
 8011170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011172:	0a1b      	lsrs	r3, r3, #8
 8011174:	b2db      	uxtb	r3, r3
 8011176:	f003 030f 	and.w	r3, r3, #15
 801117a:	b2db      	uxtb	r3, r3
 801117c:	4313      	orrs	r3, r2
 801117e:	b2db      	uxtb	r3, r3
 8011180:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011182:	7013      	strb	r3, [r2, #0]
                    }

                    /* Clear the multi-sector flag.  */
                    multi_sector_entry = -1;
 8011184:	f04f 33ff 	mov.w	r3, #4294967295
 8011188:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Loop through the remainder of the cache to check for multiple entries
                   within the same FAT sector being written out.  */
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 801118a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801118c:	653b      	str	r3, [r7, #80]	; 0x50
 801118e:	e0a0      	b.n	80112d2 <_fx_utility_FAT_flush+0x268>
                {

                    /* Is the cache entry dirty?  */
                    if ((media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty) == 0)
 8011190:	69f9      	ldr	r1, [r7, #28]
 8011192:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011194:	4613      	mov	r3, r2
 8011196:	005b      	lsls	r3, r3, #1
 8011198:	4413      	add	r3, r2
 801119a:	009b      	lsls	r3, r3, #2
 801119c:	440b      	add	r3, r1
 801119e:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	f000 808a 	beq.w	80112be <_fx_utility_FAT_flush+0x254>
                        /* Not dirty, does not need to be flushed.  */
                        continue;
                    }

                    /* Isolate the cluster.  */
                    cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 80111aa:	69f9      	ldr	r1, [r7, #28]
 80111ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80111ae:	4613      	mov	r3, r2
 80111b0:	005b      	lsls	r3, r3, #1
 80111b2:	4413      	add	r3, r2
 80111b4:	009b      	lsls	r3, r3, #2
 80111b6:	440b      	add	r3, r1
 80111b8:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Calculate the byte offset to the cluster entry.  */
                    byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 80111c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111c2:	005a      	lsls	r2, r3, #1
 80111c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80111c6:	4413      	add	r3, r2
 80111c8:	085b      	lsrs	r3, r3, #1
 80111ca:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Pickup the sector.  */
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80111cc:	69fb      	ldr	r3, [r7, #28]
 80111ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80111d2:	fbb2 f2f3 	udiv	r2, r2, r3
                        (ULONG)media_ptr -> fx_media_reserved_sectors;
 80111d6:	69fb      	ldr	r3, [r7, #28]
 80111d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80111da:	4413      	add	r3, r2
 80111dc:	633b      	str	r3, [r7, #48]	; 0x30

                    /* Is it the current FAT sector?  */
                    if (sector != FAT_sector)
 80111de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80111e2:	429a      	cmp	r2, r3
 80111e4:	d16d      	bne.n	80112c2 <_fx_utility_FAT_flush+0x258>
                        /* Different FAT sector - not in this pass of the loop.  */
                        continue;
                    }

                    /* Pickup new value for this FAT entry.  */
                    next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 80111e6:	69f9      	ldr	r1, [r7, #28]
 80111e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80111ea:	4613      	mov	r3, r2
 80111ec:	005b      	lsls	r3, r3, #1
 80111ee:	4413      	add	r3, r2
 80111f0:	009b      	lsls	r3, r3, #2
 80111f2:	440b      	add	r3, r1
 80111f4:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Now calculate the byte offset into this FAT sector.  */
                    byte_offset =  byte_offset -
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 80111fc:	69fb      	ldr	r3, [r7, #28]
 80111fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011200:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011202:	1ad2      	subs	r2, r2, r3
                         media_ptr -> fx_media_bytes_per_sector);
 8011204:	69fb      	ldr	r3, [r7, #28]
 8011206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8011208:	fb02 f303 	mul.w	r3, r2, r3
                    byte_offset =  byte_offset -
 801120c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801120e:	1ad3      	subs	r3, r2, r3
 8011210:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Determine if we are now past the end of the FAT buffer in memory.  */
                    if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 8011212:	69fb      	ldr	r3, [r7, #28]
 8011214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011216:	3b01      	subs	r3, #1
 8011218:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801121a:	429a      	cmp	r2, r3
 801121c:	d101      	bne.n	8011222 <_fx_utility_FAT_flush+0x1b8>
                    {

                        /* Yes, we need to read the next sector */
                        multi_sector_entry = (INT)i;
 801121e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011220:	647b      	str	r3, [r7, #68]	; 0x44
                    }

                    /* Setup a pointer into the buffer.  */
                    FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8011222:	69fb      	ldr	r3, [r7, #28]
 8011224:	689a      	ldr	r2, [r3, #8]
 8011226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011228:	4413      	add	r3, r2
 801122a:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Clear the dirty flag.  */
                    media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 801122c:	69f9      	ldr	r1, [r7, #28]
 801122e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011230:	4613      	mov	r3, r2
 8011232:	005b      	lsls	r3, r3, #1
 8011234:	4413      	add	r3, r2
 8011236:	009b      	lsls	r3, r3, #2
 8011238:	440b      	add	r3, r1
 801123a:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 801123e:	2200      	movs	r2, #0
 8011240:	601a      	str	r2, [r3, #0]

                    /* Determine if the cluster entry is odd or even.  */
                    if (cluster & 1)
 8011242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011244:	f003 0301 	and.w	r3, r3, #1
 8011248:	2b00      	cmp	r3, #0
 801124a:	d01b      	beq.n	8011284 <_fx_utility_FAT_flush+0x21a>
                        /* Odd cluster number.  */

                        /* Pickup the upper nibble of the FAT entry.  */

                        /* First, set the lower nibble of the FAT entry.  */
                        temp =      (((UINT)*FAT_ptr) & 0x0F);
 801124c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801124e:	781b      	ldrb	r3, [r3, #0]
 8011250:	f003 030f 	and.w	r3, r3, #15
 8011254:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster << 4) & 0xF0));
 8011256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011258:	b2da      	uxtb	r2, r3
 801125a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801125c:	b2db      	uxtb	r3, r3
 801125e:	011b      	lsls	r3, r3, #4
 8011260:	b2db      	uxtb	r3, r3
 8011262:	4313      	orrs	r3, r2
 8011264:	b2db      	uxtb	r3, r3
 8011266:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011268:	7013      	strb	r3, [r2, #0]

                        /* Determine if this is a mulit-sector entry.  */
                        if ((multi_sector_entry) == (INT)i)
 801126a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801126c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801126e:	429a      	cmp	r2, r3
 8011270:	d029      	beq.n	80112c6 <_fx_utility_FAT_flush+0x25c>
                            /* Yes, requires multiple sector - will write rest of the part later.  */
                            continue;
                        }

                        /* Move to the next byte of the FAT entry.  */
                        FAT_ptr++;
 8011272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011274:	3301      	adds	r3, #1
 8011276:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Store the upper 8 bits of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 8011278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801127a:	091b      	lsrs	r3, r3, #4
 801127c:	b2db      	uxtb	r3, r3
 801127e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011280:	7013      	strb	r3, [r2, #0]
 8011282:	e023      	b.n	80112cc <_fx_utility_FAT_flush+0x262>
                    {

                        /* Even cluster number.  */

                        /* Store the lower byte of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)(next_cluster & 0xFF);
 8011284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011286:	b2db      	uxtb	r3, r3
 8011288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801128a:	7013      	strb	r3, [r2, #0]

                        /* Determine if this is a mulit-sector entry.  */
                        if ((multi_sector_entry) == (INT)i)
 801128c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801128e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011290:	429a      	cmp	r2, r3
 8011292:	d01a      	beq.n	80112ca <_fx_utility_FAT_flush+0x260>
                            /* Yes, requires multiple sector - will write rest of the part later.  */
                            continue;
                        }

                        /* Move to the next nibble of the FAT entry.  */
                        FAT_ptr++;
 8011294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011296:	3301      	adds	r3, #1
 8011298:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Store the upper 4 bits of the FAT entry.  */
                        temp =  ((UINT)*FAT_ptr) & 0xF0;
 801129a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801129c:	781b      	ldrb	r3, [r3, #0]
 801129e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80112a2:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 80112a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112a6:	b2da      	uxtb	r2, r3
 80112a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112aa:	0a1b      	lsrs	r3, r3, #8
 80112ac:	b2db      	uxtb	r3, r3
 80112ae:	f003 030f 	and.w	r3, r3, #15
 80112b2:	b2db      	uxtb	r3, r3
 80112b4:	4313      	orrs	r3, r2
 80112b6:	b2db      	uxtb	r3, r3
 80112b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80112ba:	7013      	strb	r3, [r2, #0]
 80112bc:	e006      	b.n	80112cc <_fx_utility_FAT_flush+0x262>
                        continue;
 80112be:	bf00      	nop
 80112c0:	e004      	b.n	80112cc <_fx_utility_FAT_flush+0x262>
                        continue;
 80112c2:	bf00      	nop
 80112c4:	e002      	b.n	80112cc <_fx_utility_FAT_flush+0x262>
                            continue;
 80112c6:	bf00      	nop
 80112c8:	e000      	b.n	80112cc <_fx_utility_FAT_flush+0x262>
                            continue;
 80112ca:	bf00      	nop
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 80112cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112ce:	3301      	adds	r3, #1
 80112d0:	653b      	str	r3, [r7, #80]	; 0x50
 80112d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112d4:	2b0f      	cmp	r3, #15
 80112d6:	f67f af5b 	bls.w	8011190 <_fx_utility_FAT_flush+0x126>
                    }
                }

                /* First, write out the current sector. */
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 80112da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80112dc:	2200      	movs	r2, #0
 80112de:	4698      	mov	r8, r3
 80112e0:	4691      	mov	r9, r2
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 80112e2:	69fb      	ldr	r3, [r7, #28]
 80112e4:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 80112e6:	2302      	movs	r3, #2
 80112e8:	9302      	str	r3, [sp, #8]
 80112ea:	2301      	movs	r3, #1
 80112ec:	9301      	str	r3, [sp, #4]
 80112ee:	9200      	str	r2, [sp, #0]
 80112f0:	4642      	mov	r2, r8
 80112f2:	464b      	mov	r3, r9
 80112f4:	69f8      	ldr	r0, [r7, #28]
 80112f6:	f001 fa3d 	bl	8012774 <_fx_utility_logical_sector_write>
 80112fa:	63b8      	str	r0, [r7, #56]	; 0x38
                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 80112fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d001      	beq.n	8011306 <_fx_utility_FAT_flush+0x29c>
                {

                    /* Return the error status.  */
                    return(status);
 8011302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011304:	e1fd      	b.n	8011702 <_fx_utility_FAT_flush+0x698>
                }

                /* Mark the FAT sector update bit map to indicate this sector has been written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8011306:	69fb      	ldr	r3, [r7, #28]
 8011308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801130a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801130e:	2b00      	cmp	r3, #0
 8011310:	d105      	bne.n	801131e <_fx_utility_FAT_flush+0x2b4>
                {
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 8011312:	69fb      	ldr	r3, [r7, #28]
 8011314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011316:	0a9b      	lsrs	r3, r3, #10
 8011318:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 801131c:	e006      	b.n	801132c <_fx_utility_FAT_flush+0x2c2>
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 801131e:	69fb      	ldr	r3, [r7, #28]
 8011320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011322:	0a9b      	lsrs	r3, r3, #10
 8011324:	b2db      	uxtb	r3, r3
 8011326:	3301      	adds	r3, #1
 8011328:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                }

                /* Check for invalid value.  */
                if (sectors_per_bit == 0)
 801132c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8011330:	2b00      	cmp	r3, #0
 8011332:	d101      	bne.n	8011338 <_fx_utility_FAT_flush+0x2ce>
                {

                    /* Invalid media, return error.  */
                    return(FX_MEDIA_INVALID);
 8011334:	2302      	movs	r3, #2
 8011336:	e1e4      	b.n	8011702 <_fx_utility_FAT_flush+0x698>
                }

                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 8011338:	69fb      	ldr	r3, [r7, #28]
 801133a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801133c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801133e:	1ad2      	subs	r2, r2, r3
 8011340:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8011344:	fbb2 f3f3 	udiv	r3, r2, r3
 8011348:	08db      	lsrs	r3, r3, #3
 801134a:	637b      	str	r3, [r7, #52]	; 0x34
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 801134c:	69fa      	ldr	r2, [r7, #28]
 801134e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011350:	4413      	add	r3, r2
 8011352:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8011356:	781b      	ldrb	r3, [r3, #0]
 8011358:	b259      	sxtb	r1, r3
                    | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 801135a:	69fb      	ldr	r3, [r7, #28]
 801135c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801135e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011360:	1a9a      	subs	r2, r3, r2
 8011362:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8011366:	fbb2 f3f3 	udiv	r3, r2, r3
 801136a:	f003 0207 	and.w	r2, r3, #7
 801136e:	2301      	movs	r3, #1
 8011370:	4093      	lsls	r3, r2
 8011372:	b25b      	sxtb	r3, r3
 8011374:	430b      	orrs	r3, r1
 8011376:	b25b      	sxtb	r3, r3
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8011378:	b2d9      	uxtb	r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 801137a:	69fa      	ldr	r2, [r7, #28]
 801137c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801137e:	4413      	add	r3, r2
 8011380:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8011384:	460b      	mov	r3, r1
 8011386:	7013      	strb	r3, [r2, #0]

                /* Determine if the multi-sector flag is set.  */
                if (multi_sector_entry != -1)
 8011388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801138a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801138e:	f000 81af 	beq.w	80116f0 <_fx_utility_FAT_flush+0x686>
                {

                    /* Yes, position to the next sector and read it in.  */
                    FAT_sector++;
 8011392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011394:	3301      	adds	r3, #1
 8011396:	657b      	str	r3, [r7, #84]	; 0x54
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8011398:	e6a5      	b.n	80110e6 <_fx_utility_FAT_flush+0x7c>
            }
        }
#ifdef FX_ENABLE_EXFAT
        else if (media_ptr -> fx_media_FAT_type == FX_FAT16)
#else
        else if (!media_ptr -> fx_media_32_bit_FAT)
 801139a:	69fb      	ldr	r3, [r7, #28]
 801139c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801139e:	2b00      	cmp	r3, #0
 80113a0:	f040 80d2 	bne.w	8011548 <_fx_utility_FAT_flush+0x4de>
        {

            /* 16-bit FAT is present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) << 1);
 80113a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113a6:	005b      	lsls	r3, r3, #1
 80113a8:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80113aa:	69fb      	ldr	r3, [r7, #28]
 80113ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80113b0:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 80113b4:	69fb      	ldr	r3, [r7, #28]
 80113b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80113b8:	4413      	add	r3, r2
 80113ba:	657b      	str	r3, [r7, #84]	; 0x54

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80113bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113be:	2200      	movs	r2, #0
 80113c0:	469a      	mov	sl, r3
 80113c2:	4693      	mov	fp, r2
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 80113c4:	69fb      	ldr	r3, [r7, #28]
 80113c6:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80113c8:	2302      	movs	r3, #2
 80113ca:	9302      	str	r3, [sp, #8]
 80113cc:	2301      	movs	r3, #1
 80113ce:	9301      	str	r3, [sp, #4]
 80113d0:	9200      	str	r2, [sp, #0]
 80113d2:	4652      	mov	r2, sl
 80113d4:	465b      	mov	r3, fp
 80113d6:	69f8      	ldr	r0, [r7, #28]
 80113d8:	f000 ff38 	bl	801224c <_fx_utility_logical_sector_read>
 80113dc:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 80113de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d001      	beq.n	80113e8 <_fx_utility_FAT_flush+0x37e>
            {

                /* Return the error status.  */
                return(status);
 80113e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113e6:	e18c      	b.n	8011702 <_fx_utility_FAT_flush+0x698>
            }

            /* Loop through the remainder of the cache to check for multiple entries
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 80113e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113ea:	653b      	str	r3, [r7, #80]	; 0x50
 80113ec:	e057      	b.n	801149e <_fx_utility_FAT_flush+0x434>
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 80113ee:	69f9      	ldr	r1, [r7, #28]
 80113f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80113f2:	4613      	mov	r3, r2
 80113f4:	005b      	lsls	r3, r3, #1
 80113f6:	4413      	add	r3, r2
 80113f8:	009b      	lsls	r3, r3, #2
 80113fa:	440b      	add	r3, r1
 80113fc:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d045      	beq.n	8011492 <_fx_utility_FAT_flush+0x428>
                    /* Not dirty, does not need to be flushed.  */
                    continue;
                }

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 8011406:	69f9      	ldr	r1, [r7, #28]
 8011408:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801140a:	4613      	mov	r3, r2
 801140c:	005b      	lsls	r3, r3, #1
 801140e:	4413      	add	r3, r2
 8011410:	009b      	lsls	r3, r3, #2
 8011412:	440b      	add	r3, r1
 8011414:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	643b      	str	r3, [r7, #64]	; 0x40

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 2);
 801141c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801141e:	005b      	lsls	r3, r3, #1
 8011420:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8011422:	69fb      	ldr	r3, [r7, #28]
 8011424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011426:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011428:	fbb2 f2f3 	udiv	r2, r2, r3
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 801142c:	69fb      	ldr	r3, [r7, #28]
 801142e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 8011430:	4413      	add	r3, r2
 8011432:	633b      	str	r3, [r7, #48]	; 0x30

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 8011434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011438:	429a      	cmp	r2, r3
 801143a:	d12c      	bne.n	8011496 <_fx_utility_FAT_flush+0x42c>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 801143c:	69fb      	ldr	r3, [r7, #28]
 801143e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011440:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011442:	1ad2      	subs	r2, r2, r3
                     media_ptr -> fx_media_bytes_per_sector);
 8011444:	69fb      	ldr	r3, [r7, #28]
 8011446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 8011448:	fb02 f303 	mul.w	r3, r2, r3
                byte_offset =  byte_offset -
 801144c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801144e:	1ad3      	subs	r3, r2, r3
 8011450:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 8011452:	69fb      	ldr	r3, [r7, #28]
 8011454:	689a      	ldr	r2, [r3, #8]
 8011456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011458:	4413      	add	r3, r2
 801145a:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 801145c:	69f9      	ldr	r1, [r7, #28]
 801145e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011460:	4613      	mov	r3, r2
 8011462:	005b      	lsls	r3, r3, #1
 8011464:	4413      	add	r3, r2
 8011466:	009b      	lsls	r3, r3, #2
 8011468:	440b      	add	r3, r1
 801146a:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Store the FAT entry.  */
                _fx_utility_16_unsigned_write(FAT_ptr, (UINT)next_cluster);
 8011472:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011474:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011476:	f7ff fa88 	bl	801098a <_fx_utility_16_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 801147a:	69f9      	ldr	r1, [r7, #28]
 801147c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801147e:	4613      	mov	r3, r2
 8011480:	005b      	lsls	r3, r3, #1
 8011482:	4413      	add	r3, r2
 8011484:	009b      	lsls	r3, r3, #2
 8011486:	440b      	add	r3, r1
 8011488:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 801148c:	2200      	movs	r2, #0
 801148e:	601a      	str	r2, [r3, #0]
 8011490:	e002      	b.n	8011498 <_fx_utility_FAT_flush+0x42e>
                    continue;
 8011492:	bf00      	nop
 8011494:	e000      	b.n	8011498 <_fx_utility_FAT_flush+0x42e>
                    continue;
 8011496:	bf00      	nop
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 8011498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801149a:	3301      	adds	r3, #1
 801149c:	653b      	str	r3, [r7, #80]	; 0x50
 801149e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80114a0:	2b0f      	cmp	r3, #15
 80114a2:	d9a4      	bls.n	80113ee <_fx_utility_FAT_flush+0x384>
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 80114a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80114a6:	2200      	movs	r2, #0
 80114a8:	613b      	str	r3, [r7, #16]
 80114aa:	617a      	str	r2, [r7, #20]
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 80114ac:	69fb      	ldr	r3, [r7, #28]
 80114ae:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 80114b0:	2302      	movs	r3, #2
 80114b2:	9302      	str	r3, [sp, #8]
 80114b4:	2301      	movs	r3, #1
 80114b6:	9301      	str	r3, [sp, #4]
 80114b8:	9200      	str	r2, [sp, #0]
 80114ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80114be:	69f8      	ldr	r0, [r7, #28]
 80114c0:	f001 f958 	bl	8012774 <_fx_utility_logical_sector_write>
 80114c4:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 80114c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d001      	beq.n	80114d0 <_fx_utility_FAT_flush+0x466>
            {
                /* Return the error status.  */
                return(status);
 80114cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ce:	e118      	b.n	8011702 <_fx_utility_FAT_flush+0x698>
            }

            /* Mark the FAT sector update bit map to indicate this sector has been
               written.  */
            if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 80114d0:	69fb      	ldr	r3, [r7, #28]
 80114d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80114d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d105      	bne.n	80114e8 <_fx_utility_FAT_flush+0x47e>
            {
                sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 80114dc:	69fb      	ldr	r3, [r7, #28]
 80114de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80114e0:	0a9b      	lsrs	r3, r3, #10
 80114e2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 80114e6:	e006      	b.n	80114f6 <_fx_utility_FAT_flush+0x48c>
            }
            else
            {
                sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 80114e8:	69fb      	ldr	r3, [r7, #28]
 80114ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80114ec:	0a9b      	lsrs	r3, r3, #10
 80114ee:	b2db      	uxtb	r3, r3
 80114f0:	3301      	adds	r3, #1
 80114f2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            }
            ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 80114f6:	69fb      	ldr	r3, [r7, #28]
 80114f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80114fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80114fc:	1ad2      	subs	r2, r2, r3
 80114fe:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8011502:	fbb2 f3f3 	udiv	r3, r2, r3
 8011506:	08db      	lsrs	r3, r3, #3
 8011508:	637b      	str	r3, [r7, #52]	; 0x34
            media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 801150a:	69fa      	ldr	r2, [r7, #28]
 801150c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801150e:	4413      	add	r3, r2
 8011510:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8011514:	781b      	ldrb	r3, [r3, #0]
 8011516:	b259      	sxtb	r1, r3
                | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 8011518:	69fb      	ldr	r3, [r7, #28]
 801151a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801151c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801151e:	1a9a      	subs	r2, r3, r2
 8011520:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8011524:	fbb2 f3f3 	udiv	r3, r2, r3
 8011528:	f003 0207 	and.w	r2, r3, #7
 801152c:	2301      	movs	r3, #1
 801152e:	4093      	lsls	r3, r2
 8011530:	b25b      	sxtb	r3, r3
 8011532:	430b      	orrs	r3, r1
 8011534:	b25b      	sxtb	r3, r3
                (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 8011536:	b2d9      	uxtb	r1, r3
            media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 8011538:	69fa      	ldr	r2, [r7, #28]
 801153a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801153c:	4413      	add	r3, r2
 801153e:	f603 0218 	addw	r2, r3, #2072	; 0x818
 8011542:	460b      	mov	r3, r1
 8011544:	7013      	strb	r3, [r2, #0]
 8011546:	e0d4      	b.n	80116f2 <_fx_utility_FAT_flush+0x688>
        {

            /* 32-bit FAT or exFAT are present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) * 4);
 8011548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801154a:	009b      	lsls	r3, r3, #2
 801154c:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801154e:	69fb      	ldr	r3, [r7, #28]
 8011550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011552:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011554:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 8011558:	69fb      	ldr	r3, [r7, #28]
 801155a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 801155c:	4413      	add	r3, r2
 801155e:	657b      	str	r3, [r7, #84]	; 0x54

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 8011560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011562:	2200      	movs	r2, #0
 8011564:	60bb      	str	r3, [r7, #8]
 8011566:	60fa      	str	r2, [r7, #12]
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8011568:	69fb      	ldr	r3, [r7, #28]
 801156a:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801156c:	2302      	movs	r3, #2
 801156e:	9302      	str	r3, [sp, #8]
 8011570:	2301      	movs	r3, #1
 8011572:	9301      	str	r3, [sp, #4]
 8011574:	9200      	str	r2, [sp, #0]
 8011576:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801157a:	69f8      	ldr	r0, [r7, #28]
 801157c:	f000 fe66 	bl	801224c <_fx_utility_logical_sector_read>
 8011580:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 8011582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011584:	2b00      	cmp	r3, #0
 8011586:	d001      	beq.n	801158c <_fx_utility_FAT_flush+0x522>
            {

                /* Return the error status.  */
                return(status);
 8011588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801158a:	e0ba      	b.n	8011702 <_fx_utility_FAT_flush+0x698>
            }

            /* Loop through the remainder of the cache to check for multiple entries
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 801158c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801158e:	653b      	str	r3, [r7, #80]	; 0x50
 8011590:	e057      	b.n	8011642 <_fx_utility_FAT_flush+0x5d8>
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 8011592:	69f9      	ldr	r1, [r7, #28]
 8011594:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011596:	4613      	mov	r3, r2
 8011598:	005b      	lsls	r3, r3, #1
 801159a:	4413      	add	r3, r2
 801159c:	009b      	lsls	r3, r3, #2
 801159e:	440b      	add	r3, r1
 80115a0:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d045      	beq.n	8011636 <_fx_utility_FAT_flush+0x5cc>
                    /* Not dirty, does not need to be flushed.  */
                    continue;
                }

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 80115aa:	69f9      	ldr	r1, [r7, #28]
 80115ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80115ae:	4613      	mov	r3, r2
 80115b0:	005b      	lsls	r3, r3, #1
 80115b2:	4413      	add	r3, r2
 80115b4:	009b      	lsls	r3, r3, #2
 80115b6:	440b      	add	r3, r1
 80115b8:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	643b      	str	r3, [r7, #64]	; 0x40

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 4);
 80115c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80115c2:	009b      	lsls	r3, r3, #2
 80115c4:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80115c6:	69fb      	ldr	r3, [r7, #28]
 80115c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80115ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80115cc:	fbb2 f2f3 	udiv	r2, r2, r3
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 80115d0:	69fb      	ldr	r3, [r7, #28]
 80115d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 80115d4:	4413      	add	r3, r2
 80115d6:	633b      	str	r3, [r7, #48]	; 0x30

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 80115d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115dc:	429a      	cmp	r2, r3
 80115de:	d12c      	bne.n	801163a <_fx_utility_FAT_flush+0x5d0>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 80115e0:	69fb      	ldr	r3, [r7, #28]
 80115e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80115e6:	1ad2      	subs	r2, r2, r3
                     media_ptr -> fx_media_bytes_per_sector);
 80115e8:	69fb      	ldr	r3, [r7, #28]
 80115ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 80115ec:	fb02 f303 	mul.w	r3, r2, r3
                byte_offset =  byte_offset -
 80115f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80115f2:	1ad3      	subs	r3, r2, r3
 80115f4:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 80115f6:	69fb      	ldr	r3, [r7, #28]
 80115f8:	689a      	ldr	r2, [r3, #8]
 80115fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115fc:	4413      	add	r3, r2
 80115fe:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 8011600:	69f9      	ldr	r1, [r7, #28]
 8011602:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011604:	4613      	mov	r3, r2
 8011606:	005b      	lsls	r3, r3, #1
 8011608:	4413      	add	r3, r2
 801160a:	009b      	lsls	r3, r3, #2
 801160c:	440b      	add	r3, r1
 801160e:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Store the FAT entry.  */
                _fx_utility_32_unsigned_write(FAT_ptr, next_cluster);
 8011616:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011618:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801161a:	f7ff f9e8 	bl	80109ee <_fx_utility_32_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 801161e:	69f9      	ldr	r1, [r7, #28]
 8011620:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011622:	4613      	mov	r3, r2
 8011624:	005b      	lsls	r3, r3, #1
 8011626:	4413      	add	r3, r2
 8011628:	009b      	lsls	r3, r3, #2
 801162a:	440b      	add	r3, r1
 801162c:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 8011630:	2200      	movs	r2, #0
 8011632:	601a      	str	r2, [r3, #0]
 8011634:	e002      	b.n	801163c <_fx_utility_FAT_flush+0x5d2>
                    continue;
 8011636:	bf00      	nop
 8011638:	e000      	b.n	801163c <_fx_utility_FAT_flush+0x5d2>
                    continue;
 801163a:	bf00      	nop
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 801163c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801163e:	3301      	adds	r3, #1
 8011640:	653b      	str	r3, [r7, #80]	; 0x50
 8011642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011644:	2b0f      	cmp	r3, #15
 8011646:	d9a4      	bls.n	8011592 <_fx_utility_FAT_flush+0x528>
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8011648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801164a:	2200      	movs	r2, #0
 801164c:	603b      	str	r3, [r7, #0]
 801164e:	607a      	str	r2, [r7, #4]
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 8011650:	69fb      	ldr	r3, [r7, #28]
 8011652:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 8011654:	2302      	movs	r3, #2
 8011656:	9302      	str	r3, [sp, #8]
 8011658:	2301      	movs	r3, #1
 801165a:	9301      	str	r3, [sp, #4]
 801165c:	9200      	str	r2, [sp, #0]
 801165e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011662:	69f8      	ldr	r0, [r7, #28]
 8011664:	f001 f886 	bl	8012774 <_fx_utility_logical_sector_write>
 8011668:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 801166a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801166c:	2b00      	cmp	r3, #0
 801166e:	d001      	beq.n	8011674 <_fx_utility_FAT_flush+0x60a>
            {

                /* Return the error status.  */
                return(status);
 8011670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011672:	e046      	b.n	8011702 <_fx_utility_FAT_flush+0x698>
            {
#endif /* FX_ENABLE_EXFAT */

                /* Mark the FAT sector update bit map to indicate this sector has been
                   written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8011674:	69fb      	ldr	r3, [r7, #28]
 8011676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011678:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801167c:	2b00      	cmp	r3, #0
 801167e:	d105      	bne.n	801168c <_fx_utility_FAT_flush+0x622>
                {
                    sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 8011680:	69fb      	ldr	r3, [r7, #28]
 8011682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011684:	0a9b      	lsrs	r3, r3, #10
 8011686:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 801168a:	e006      	b.n	801169a <_fx_utility_FAT_flush+0x630>
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 801168c:	69fb      	ldr	r3, [r7, #28]
 801168e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011690:	0a9b      	lsrs	r3, r3, #10
 8011692:	b2db      	uxtb	r3, r3
 8011694:	3301      	adds	r3, #1
 8011696:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                }
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 801169a:	69fb      	ldr	r3, [r7, #28]
 801169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801169e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80116a0:	1ad2      	subs	r2, r2, r3
 80116a2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80116a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80116aa:	08db      	lsrs	r3, r3, #3
 80116ac:	637b      	str	r3, [r7, #52]	; 0x34
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 80116ae:	69fa      	ldr	r2, [r7, #28]
 80116b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116b2:	4413      	add	r3, r2
 80116b4:	f603 0318 	addw	r3, r3, #2072	; 0x818
 80116b8:	781b      	ldrb	r3, [r3, #0]
 80116ba:	b259      	sxtb	r1, r3
                    | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 80116bc:	69fb      	ldr	r3, [r7, #28]
 80116be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80116c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116c2:	1a9a      	subs	r2, r3, r2
 80116c4:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80116c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80116cc:	f003 0207 	and.w	r2, r3, #7
 80116d0:	2301      	movs	r3, #1
 80116d2:	4093      	lsls	r3, r2
 80116d4:	b25b      	sxtb	r3, r3
 80116d6:	430b      	orrs	r3, r1
 80116d8:	b25b      	sxtb	r3, r3
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 80116da:	b2d9      	uxtb	r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 80116dc:	69fa      	ldr	r2, [r7, #28]
 80116de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116e0:	4413      	add	r3, r2
 80116e2:	f603 0218 	addw	r2, r3, #2072	; 0x818
 80116e6:	460b      	mov	r3, r1
 80116e8:	7013      	strb	r3, [r2, #0]
 80116ea:	e002      	b.n	80116f2 <_fx_utility_FAT_flush+0x688>
            continue;
 80116ec:	bf00      	nop
 80116ee:	e000      	b.n	80116f2 <_fx_utility_FAT_flush+0x688>
                    break;
 80116f0:	bf00      	nop
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 80116f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116f4:	3301      	adds	r3, #1
 80116f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80116f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116fa:	2b0f      	cmp	r3, #15
 80116fc:	f67f acc4 	bls.w	8011088 <_fx_utility_FAT_flush+0x1e>
        media_ptr -> fx_media_fault_tolerant_cached_FAT_sector = 0;
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Return successful status.  */
    return(FX_SUCCESS);
 8011700:	2300      	movs	r3, #0
}
 8011702:	4618      	mov	r0, r3
 8011704:	3758      	adds	r7, #88	; 0x58
 8011706:	46bd      	mov	sp, r7
 8011708:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801170c <_fx_utility_FAT_map_flush>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_map_flush(FX_MEDIA *media_ptr)
{
 801170c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011710:	b092      	sub	sp, #72	; 0x48
 8011712:	af04      	add	r7, sp, #16
 8011714:	61f8      	str	r0, [r7, #28]
       or more primary FAT sectors. Because of this, it is possible some FAT sectors that
       were not changed may get flushed out to the secondary FAT.  However, this method
       provides very nice performance benefits during normal operation and is much more
       reasonable than performing a total copy of the primary FAT to each secondary FAT
       on media flush and media close.  */
    if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 8011716:	69fb      	ldr	r3, [r7, #28]
 8011718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801171a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801171e:	2b00      	cmp	r3, #0
 8011720:	d105      	bne.n	801172e <_fx_utility_FAT_map_flush+0x22>
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 8011722:	69fb      	ldr	r3, [r7, #28]
 8011724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011726:	0a9b      	lsrs	r3, r3, #10
 8011728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801172c:	e006      	b.n	801173c <_fx_utility_FAT_map_flush+0x30>
    }
    else
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 801172e:	69fb      	ldr	r3, [r7, #28]
 8011730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011732:	0a9b      	lsrs	r3, r3, #10
 8011734:	b2db      	uxtb	r3, r3
 8011736:	3301      	adds	r3, #1
 8011738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Loop through the FAT update map to mirror primary FAT sectors to secondary FAT(s).  */
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 801173c:	2300      	movs	r3, #0
 801173e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011740:	e089      	b.n	8011856 <_fx_utility_FAT_map_flush+0x14a>
    {

        /* Determine if there are FAT changes specified by this entry.  */
        if ((media_ptr -> fx_media_fat_secondary_update_map[i >> 3] & (1 << (i & 7))) == 0)
 8011742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011744:	08db      	lsrs	r3, r3, #3
 8011746:	69fa      	ldr	r2, [r7, #28]
 8011748:	4413      	add	r3, r2
 801174a:	f893 3818 	ldrb.w	r3, [r3, #2072]	; 0x818
 801174e:	461a      	mov	r2, r3
 8011750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011752:	f003 0307 	and.w	r3, r3, #7
 8011756:	fa42 f303 	asr.w	r3, r2, r3
 801175a:	f003 0301 	and.w	r3, r3, #1
 801175e:	2b00      	cmp	r3, #0
 8011760:	d075      	beq.n	801184e <_fx_utility_FAT_map_flush+0x142>
            /* No, look at the next bit map entry.  */
            continue;
        }

        /* Setup the parameters for performing the update.  */
        FAT_sector =    i * sectors_per_bit + media_ptr -> fx_media_reserved_sectors;
 8011762:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011768:	fb03 f202 	mul.w	r2, r3, r2
 801176c:	69fb      	ldr	r3, [r7, #28]
 801176e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011770:	4413      	add	r3, r2
 8011772:	637b      	str	r3, [r7, #52]	; 0x34
        last_sector =   FAT_sector + sectors_per_bit;
 8011774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011778:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801177a:	4413      	add	r3, r2
 801177c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Make sure the last update sector is within range.  */
        if (last_sector > (media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors))
 801177e:	69fb      	ldr	r3, [r7, #28]
 8011780:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011782:	69fb      	ldr	r3, [r7, #28]
 8011784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011786:	4413      	add	r3, r2
 8011788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801178a:	429a      	cmp	r2, r3
 801178c:	d95a      	bls.n	8011844 <_fx_utility_FAT_map_flush+0x138>
        {
            last_sector =  media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors;
 801178e:	69fb      	ldr	r3, [r7, #28]
 8011790:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011792:	69fb      	ldr	r3, [r7, #28]
 8011794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011796:	4413      	add	r3, r2
 8011798:	633b      	str	r3, [r7, #48]	; 0x30
        }

        /* Loop to mirror primary FAT sectors to secondary FAT(s).  */
        for (; FAT_sector < last_sector; FAT_sector++)
 801179a:	e053      	b.n	8011844 <_fx_utility_FAT_map_flush+0x138>
        {

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 801179c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801179e:	2200      	movs	r2, #0
 80117a0:	613b      	str	r3, [r7, #16]
 80117a2:	617a      	str	r2, [r7, #20]
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 80117a4:	69fb      	ldr	r3, [r7, #28]
 80117a6:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 80117a8:	2302      	movs	r3, #2
 80117aa:	9302      	str	r3, [sp, #8]
 80117ac:	2301      	movs	r3, #1
 80117ae:	9301      	str	r3, [sp, #4]
 80117b0:	9200      	str	r2, [sp, #0]
 80117b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80117b6:	69f8      	ldr	r0, [r7, #28]
 80117b8:	f000 fd48 	bl	801224c <_fx_utility_logical_sector_read>
 80117bc:	6238      	str	r0, [r7, #32]

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 80117be:	6a3b      	ldr	r3, [r7, #32]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d001      	beq.n	80117c8 <_fx_utility_FAT_map_flush+0xbc>
            {
                /* Return the error status.  */
                return(status);
 80117c4:	6a3b      	ldr	r3, [r7, #32]
 80117c6:	e05c      	b.n	8011882 <_fx_utility_FAT_map_flush+0x176>
            }

            /* Pickup how many secondary FATs there are.  */
            FATs =  media_ptr -> fx_media_number_of_FATs - 1;
 80117c8:	69fb      	ldr	r3, [r7, #28]
 80117ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80117cc:	3b01      	subs	r3, #1
 80117ce:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop to update additional FAT entries.  */
            while (FATs)
 80117d0:	e032      	b.n	8011838 <_fx_utility_FAT_map_flush+0x12c>
            {

                /* Mirror main FAT sector write into the additional FATs.  */
                status =  _fx_utility_logical_sector_write(media_ptr,
                                                           ((ULONG64) FAT_sector) + ((ULONG64)FATs * (ULONG64)(media_ptr -> fx_media_sectors_per_FAT)),
 80117d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117d4:	2200      	movs	r2, #0
 80117d6:	60bb      	str	r3, [r7, #8]
 80117d8:	60fa      	str	r2, [r7, #12]
 80117da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117dc:	2200      	movs	r2, #0
 80117de:	4698      	mov	r8, r3
 80117e0:	4691      	mov	r9, r2
 80117e2:	69fb      	ldr	r3, [r7, #28]
 80117e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80117e6:	2200      	movs	r2, #0
 80117e8:	469a      	mov	sl, r3
 80117ea:	4693      	mov	fp, r2
 80117ec:	fb0a f209 	mul.w	r2, sl, r9
 80117f0:	fb08 f30b 	mul.w	r3, r8, fp
 80117f4:	4413      	add	r3, r2
 80117f6:	fba8 450a 	umull	r4, r5, r8, sl
 80117fa:	442b      	add	r3, r5
 80117fc:	461d      	mov	r5, r3
                status =  _fx_utility_logical_sector_write(media_ptr,
 80117fe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8011802:	460b      	mov	r3, r1
 8011804:	191b      	adds	r3, r3, r4
 8011806:	603b      	str	r3, [r7, #0]
 8011808:	4613      	mov	r3, r2
 801180a:	416b      	adcs	r3, r5
 801180c:	607b      	str	r3, [r7, #4]
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 801180e:	69fb      	ldr	r3, [r7, #28]
 8011810:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_write(media_ptr,
 8011812:	2302      	movs	r3, #2
 8011814:	9302      	str	r3, [sp, #8]
 8011816:	2301      	movs	r3, #1
 8011818:	9301      	str	r3, [sp, #4]
 801181a:	9200      	str	r2, [sp, #0]
 801181c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011820:	69f8      	ldr	r0, [r7, #28]
 8011822:	f000 ffa7 	bl	8012774 <_fx_utility_logical_sector_write>
 8011826:	6238      	str	r0, [r7, #32]

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 8011828:	6a3b      	ldr	r3, [r7, #32]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d001      	beq.n	8011832 <_fx_utility_FAT_map_flush+0x126>
                {

                    /* Return the error status.  */
                    return(status);
 801182e:	6a3b      	ldr	r3, [r7, #32]
 8011830:	e027      	b.n	8011882 <_fx_utility_FAT_map_flush+0x176>
                }

                /* Decrement the number of FATs.  */
                FATs--;
 8011832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011834:	3b01      	subs	r3, #1
 8011836:	62bb      	str	r3, [r7, #40]	; 0x28
            while (FATs)
 8011838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801183a:	2b00      	cmp	r3, #0
 801183c:	d1c9      	bne.n	80117d2 <_fx_utility_FAT_map_flush+0xc6>
        for (; FAT_sector < last_sector; FAT_sector++)
 801183e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011840:	3301      	adds	r3, #1
 8011842:	637b      	str	r3, [r7, #52]	; 0x34
 8011844:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011848:	429a      	cmp	r2, r3
 801184a:	d3a7      	bcc.n	801179c <_fx_utility_FAT_map_flush+0x90>
 801184c:	e000      	b.n	8011850 <_fx_utility_FAT_map_flush+0x144>
            continue;
 801184e:	bf00      	nop
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 8011850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011852:	3301      	adds	r3, #1
 8011854:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011858:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801185c:	f4ff af71 	bcc.w	8011742 <_fx_utility_FAT_map_flush+0x36>
            }
        }
    }

    /* Clear the bit map that indicates primary FAT updates.  */
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 8011860:	2300      	movs	r3, #0
 8011862:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011864:	e009      	b.n	801187a <_fx_utility_FAT_map_flush+0x16e>
    {

        /* Clear each entry in the bit map.  */
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
 8011866:	69fa      	ldr	r2, [r7, #28]
 8011868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801186a:	4413      	add	r3, r2
 801186c:	f603 0318 	addw	r3, r3, #2072	; 0x818
 8011870:	2200      	movs	r2, #0
 8011872:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 8011874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011876:	3301      	adds	r3, #1
 8011878:	62fb      	str	r3, [r7, #44]	; 0x2c
 801187a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801187c:	2b7f      	cmp	r3, #127	; 0x7f
 801187e:	d9f2      	bls.n	8011866 <_fx_utility_FAT_map_flush+0x15a>
    }

    /* Return a successful completion.  */
    return(FX_SUCCESS);
 8011880:	2300      	movs	r3, #0
}
 8011882:	4618      	mov	r0, r3
 8011884:	3738      	adds	r7, #56	; 0x38
 8011886:	46bd      	mov	sp, r7
 8011888:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801188c <_fx_utility_logical_sector_cache_entry_read>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
FX_CACHED_SECTOR  *_fx_utility_logical_sector_cache_entry_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                                               FX_CACHED_SECTOR **previous_cache_entry)
{
 801188c:	b480      	push	{r7}
 801188e:	b08f      	sub	sp, #60	; 0x3c
 8011890:	af00      	add	r7, sp, #0
 8011892:	60f8      	str	r0, [r7, #12]
 8011894:	e9c7 2300 	strd	r2, r3, [r7]
ULONG             cache_size;
ULONG             index;


    /* Determine if the logical sector cache access should use the hash function.  */
    if (media_ptr -> fx_media_sector_cache_hashed)
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	691b      	ldr	r3, [r3, #16]
 801189c:	2b00      	cmp	r3, #0
 801189e:	f000 8275 	beq.w	8011d8c <_fx_utility_logical_sector_cache_entry_read+0x500>

        /* Calculate the area of the cache for this logical sector.  */

        /* First compute the hashed value of this index by simply using the lower bits of
           the sector number.  */
        index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 80118a2:	683a      	ldr	r2, [r7, #0]
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80118aa:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80118ae:	4013      	ands	r3, r2
 80118b0:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Set the bit indicating there is one or more valid sectors at this cache index.  */
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	6a1a      	ldr	r2, [r3, #32]
 80118b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118b8:	f003 031f 	and.w	r3, r3, #31
 80118bc:	2101      	movs	r1, #1
 80118be:	fa01 f303 	lsl.w	r3, r1, r3
 80118c2:	431a      	orrs	r2, r3
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	621a      	str	r2, [r3, #32]

        /* Compute the actual array index by multiplying by the cache depth.  */
        index =  index * FX_SECTOR_CACHE_DEPTH;
 80118c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ca:	009b      	lsls	r3, r3, #2
 80118cc:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Build a pointer to the cache entry.  */
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 80118ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80118d0:	4613      	mov	r3, r2
 80118d2:	005b      	lsls	r3, r3, #1
 80118d4:	4413      	add	r3, r2
 80118d6:	00db      	lsls	r3, r3, #3
 80118d8:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 80118dc:	68fa      	ldr	r2, [r7, #12]
 80118de:	4413      	add	r3, r2
 80118e0:	637b      	str	r3, [r7, #52]	; 0x34

        /* Determine if the logical sector is in the cache - assuming the depth of the
           sector cache is 4 entries.  */
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 80118e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118e4:	7c5b      	ldrb	r3, [r3, #17]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d015      	beq.n	8011916 <_fx_utility_logical_sector_cache_entry_read+0x8a>
 80118ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80118f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80118f4:	4299      	cmp	r1, r3
 80118f6:	bf08      	it	eq
 80118f8:	4290      	cmpeq	r0, r2
 80118fa:	d10c      	bne.n	8011916 <_fx_utility_logical_sector_cache_entry_read+0x8a>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 80118fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118fe:	681a      	ldr	r2, [r3, #0]
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 801190a:	1c5a      	adds	r2, r3, #1
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif
            /* Success, return to caller immediately!  */
            return(FX_NULL);
 8011912:	2300      	movs	r3, #0
 8011914:	e27e      	b.n	8011e14 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 1) -> fx_cached_sector_valid) && ((cache_entry + 1) -> fx_cached_sector == logical_sector))
 8011916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011918:	3318      	adds	r3, #24
 801191a:	7c5b      	ldrb	r3, [r3, #17]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d060      	beq.n	80119e2 <_fx_utility_logical_sector_cache_entry_read+0x156>
 8011920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011922:	3318      	adds	r3, #24
 8011924:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011928:	e9d7 0100 	ldrd	r0, r1, [r7]
 801192c:	4299      	cmp	r1, r3
 801192e:	bf08      	it	eq
 8011930:	4290      	cmpeq	r0, r2
 8011932:	d156      	bne.n	80119e2 <_fx_utility_logical_sector_cache_entry_read+0x156>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8011934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011936:	3318      	adds	r3, #24
 8011938:	681a      	ldr	r2, [r3, #0]
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8011944:	1c5a      	adds	r2, r3, #1
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Swap the first and second cache entries to keep the most recently used
               at the top.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 801194c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8011952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011954:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011958:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 801195c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801195e:	7c1b      	ldrb	r3, [r3, #16]
 8011960:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 8011964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011966:	7c5b      	ldrb	r3, [r3, #17]
 8011968:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 801196c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801196e:	7c9b      	ldrb	r3, [r3, #18]
 8011970:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8011974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011976:	3318      	adds	r3, #24
 8011978:	681a      	ldr	r2, [r3, #0]
 801197a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801197c:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 1) -> fx_cached_sector;
 801197e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011980:	3318      	adds	r3, #24
 8011982:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011986:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011988:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 801198c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801198e:	3318      	adds	r3, #24
 8011990:	7c1a      	ldrb	r2, [r3, #16]
 8011992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011994:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 1) -> fx_cached_sector_valid;
 8011996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011998:	3318      	adds	r3, #24
 801199a:	7c5a      	ldrb	r2, [r3, #17]
 801199c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801199e:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 1) -> fx_cached_sector_type;
 80119a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119a2:	3318      	adds	r3, #24
 80119a4:	7c9a      	ldrb	r2, [r3, #18]
 80119a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119a8:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 80119aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119ac:	3318      	adds	r3, #24
 80119ae:	693a      	ldr	r2, [r7, #16]
 80119b0:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 80119b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119b4:	f103 0118 	add.w	r1, r3, #24
 80119b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80119bc:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 80119c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119c2:	3318      	adds	r3, #24
 80119c4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80119c8:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 80119ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119cc:	3318      	adds	r3, #24
 80119ce:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80119d2:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 80119d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119d6:	3318      	adds	r3, #24
 80119d8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80119dc:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 80119de:	2300      	movs	r3, #0
 80119e0:	e218      	b.n	8011e14 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 2) -> fx_cached_sector_valid) && ((cache_entry + 2) -> fx_cached_sector == logical_sector))
 80119e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119e4:	3330      	adds	r3, #48	; 0x30
 80119e6:	7c5b      	ldrb	r3, [r3, #17]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	f000 8086 	beq.w	8011afa <_fx_utility_logical_sector_cache_entry_read+0x26e>
 80119ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119f0:	3330      	adds	r3, #48	; 0x30
 80119f2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80119f6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80119fa:	4299      	cmp	r1, r3
 80119fc:	bf08      	it	eq
 80119fe:	4290      	cmpeq	r0, r2
 8011a00:	d17b      	bne.n	8011afa <_fx_utility_logical_sector_cache_entry_read+0x26e>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8011a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a04:	3330      	adds	r3, #48	; 0x30
 8011a06:	681a      	ldr	r2, [r3, #0]
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8011a12:	1c5a      	adds	r2, r3, #1
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Move the third entry to the top and the first two entries down.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8011a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8011a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a22:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011a26:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 8011a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a2c:	7c1b      	ldrb	r3, [r3, #16]
 8011a2e:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 8011a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a34:	7c5b      	ldrb	r3, [r3, #17]
 8011a36:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 8011a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a3c:	7c9b      	ldrb	r3, [r3, #18]
 8011a3e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8011a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a44:	3330      	adds	r3, #48	; 0x30
 8011a46:	681a      	ldr	r2, [r3, #0]
 8011a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a4a:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 2) -> fx_cached_sector;
 8011a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a4e:	3330      	adds	r3, #48	; 0x30
 8011a50:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011a54:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011a56:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8011a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a5c:	3330      	adds	r3, #48	; 0x30
 8011a5e:	7c1a      	ldrb	r2, [r3, #16]
 8011a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a62:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 2) -> fx_cached_sector_valid;
 8011a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a66:	3330      	adds	r3, #48	; 0x30
 8011a68:	7c5a      	ldrb	r2, [r3, #17]
 8011a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a6c:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 2) -> fx_cached_sector_type;
 8011a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a70:	3330      	adds	r3, #48	; 0x30
 8011a72:	7c9a      	ldrb	r2, [r3, #18]
 8011a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a76:	749a      	strb	r2, [r3, #18]

            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8011a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a7a:	f103 0218 	add.w	r2, r3, #24
 8011a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a80:	3330      	adds	r3, #48	; 0x30
 8011a82:	6812      	ldr	r2, [r2, #0]
 8011a84:	601a      	str	r2, [r3, #0]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8011a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a88:	3318      	adds	r3, #24
 8011a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a8c:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8011a90:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011a94:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8011a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a9a:	f103 0218 	add.w	r2, r3, #24
 8011a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011aa0:	3330      	adds	r3, #48	; 0x30
 8011aa2:	7c12      	ldrb	r2, [r2, #16]
 8011aa4:	741a      	strb	r2, [r3, #16]
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8011aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011aa8:	f103 0218 	add.w	r2, r3, #24
 8011aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011aae:	3330      	adds	r3, #48	; 0x30
 8011ab0:	7c52      	ldrb	r2, [r2, #17]
 8011ab2:	745a      	strb	r2, [r3, #17]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8011ab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ab6:	f103 0218 	add.w	r2, r3, #24
 8011aba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011abc:	3330      	adds	r3, #48	; 0x30
 8011abe:	7c92      	ldrb	r2, [r2, #18]
 8011ac0:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 8011ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ac4:	3318      	adds	r3, #24
 8011ac6:	693a      	ldr	r2, [r7, #16]
 8011ac8:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 8011aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011acc:	f103 0118 	add.w	r1, r3, #24
 8011ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011ad4:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 8011ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ada:	3318      	adds	r3, #24
 8011adc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8011ae0:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8011ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ae4:	3318      	adds	r3, #24
 8011ae6:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8011aea:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8011aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011aee:	3318      	adds	r3, #24
 8011af0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8011af4:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 8011af6:	2300      	movs	r3, #0
 8011af8:	e18c      	b.n	8011e14 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 3) -> fx_cached_sector_valid) && ((cache_entry + 3) -> fx_cached_sector == logical_sector))
 8011afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011afc:	3348      	adds	r3, #72	; 0x48
 8011afe:	7c5b      	ldrb	r3, [r3, #17]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	f000 80ac 	beq.w	8011c5e <_fx_utility_logical_sector_cache_entry_read+0x3d2>
 8011b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b08:	3348      	adds	r3, #72	; 0x48
 8011b0a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011b0e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011b12:	4299      	cmp	r1, r3
 8011b14:	bf08      	it	eq
 8011b16:	4290      	cmpeq	r0, r2
 8011b18:	f040 80a1 	bne.w	8011c5e <_fx_utility_logical_sector_cache_entry_read+0x3d2>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 8011b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b1e:	3348      	adds	r3, #72	; 0x48
 8011b20:	681a      	ldr	r2, [r3, #0]
 8011b22:	68fb      	ldr	r3, [r7, #12]
 8011b24:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8011b2c:	1c5a      	adds	r2, r3, #1
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Move the last entry to the top and the first three entries down.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 8011b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 8011b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b3c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011b40:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 8011b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b46:	7c1b      	ldrb	r3, [r3, #16]
 8011b48:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 8011b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b4e:	7c5b      	ldrb	r3, [r3, #17]
 8011b50:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 8011b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b56:	7c9b      	ldrb	r3, [r3, #18]
 8011b58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 8011b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b5e:	3348      	adds	r3, #72	; 0x48
 8011b60:	681a      	ldr	r2, [r3, #0]
 8011b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b64:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 3) -> fx_cached_sector;
 8011b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b68:	3348      	adds	r3, #72	; 0x48
 8011b6a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011b6e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011b70:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 8011b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b76:	3348      	adds	r3, #72	; 0x48
 8011b78:	7c1a      	ldrb	r2, [r3, #16]
 8011b7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b7c:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 3) -> fx_cached_sector_valid;
 8011b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b80:	3348      	adds	r3, #72	; 0x48
 8011b82:	7c5a      	ldrb	r2, [r3, #17]
 8011b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b86:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 3) -> fx_cached_sector_type;
 8011b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b8a:	3348      	adds	r3, #72	; 0x48
 8011b8c:	7c9a      	ldrb	r2, [r3, #18]
 8011b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b90:	749a      	strb	r2, [r3, #18]

            (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8011b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b94:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b9a:	3348      	adds	r3, #72	; 0x48
 8011b9c:	6812      	ldr	r2, [r2, #0]
 8011b9e:	601a      	str	r2, [r3, #0]
            (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 8011ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ba2:	3330      	adds	r3, #48	; 0x30
 8011ba4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ba6:	f102 0148 	add.w	r1, r2, #72	; 0x48
 8011baa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011bae:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8011bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bb4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bba:	3348      	adds	r3, #72	; 0x48
 8011bbc:	7c12      	ldrb	r2, [r2, #16]
 8011bbe:	741a      	strb	r2, [r3, #16]
            (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 8011bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bc2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bc8:	3348      	adds	r3, #72	; 0x48
 8011bca:	7c52      	ldrb	r2, [r2, #17]
 8011bcc:	745a      	strb	r2, [r3, #17]
            (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 8011bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bd0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bd6:	3348      	adds	r3, #72	; 0x48
 8011bd8:	7c92      	ldrb	r2, [r2, #18]
 8011bda:	749a      	strb	r2, [r3, #18]

            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8011bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bde:	f103 0218 	add.w	r2, r3, #24
 8011be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011be4:	3330      	adds	r3, #48	; 0x30
 8011be6:	6812      	ldr	r2, [r2, #0]
 8011be8:	601a      	str	r2, [r3, #0]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8011bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bec:	3318      	adds	r3, #24
 8011bee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011bf0:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8011bf4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011bf8:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8011bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bfe:	f103 0218 	add.w	r2, r3, #24
 8011c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c04:	3330      	adds	r3, #48	; 0x30
 8011c06:	7c12      	ldrb	r2, [r2, #16]
 8011c08:	741a      	strb	r2, [r3, #16]
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8011c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c0c:	f103 0218 	add.w	r2, r3, #24
 8011c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c12:	3330      	adds	r3, #48	; 0x30
 8011c14:	7c52      	ldrb	r2, [r2, #17]
 8011c16:	745a      	strb	r2, [r3, #17]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8011c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c1a:	f103 0218 	add.w	r2, r3, #24
 8011c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c20:	3330      	adds	r3, #48	; 0x30
 8011c22:	7c92      	ldrb	r2, [r2, #18]
 8011c24:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 8011c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c28:	3318      	adds	r3, #24
 8011c2a:	693a      	ldr	r2, [r7, #16]
 8011c2c:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 8011c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c30:	f103 0118 	add.w	r1, r3, #24
 8011c34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011c38:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 8011c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c3e:	3318      	adds	r3, #24
 8011c40:	f897 2020 	ldrb.w	r2, [r7, #32]
 8011c44:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 8011c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c48:	3318      	adds	r3, #24
 8011c4a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8011c4e:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 8011c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c52:	3318      	adds	r3, #24
 8011c54:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8011c58:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	e0da      	b.n	8011e14 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }

        /* At this point we have a cache miss.  We need to move all of the sectors down one slot, swapping
           the 4th entry with the first.  */
        temp_storage.fx_cached_sector_memory_buffer =           (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 8011c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c60:	3348      	adds	r3, #72	; 0x48
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	613b      	str	r3, [r7, #16]
        temp_storage.fx_cached_sector =                         (cache_entry + 3) -> fx_cached_sector;
 8011c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c68:	3348      	adds	r3, #72	; 0x48
 8011c6a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011c6e:	e9c7 2306 	strd	r2, r3, [r7, #24]
        temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 8011c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c74:	3348      	adds	r3, #72	; 0x48
 8011c76:	7c1b      	ldrb	r3, [r3, #16]
 8011c78:	f887 3020 	strb.w	r3, [r7, #32]
        temp_storage.fx_cached_sector_valid =                   (cache_entry + 3) -> fx_cached_sector_valid;
 8011c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c7e:	3348      	adds	r3, #72	; 0x48
 8011c80:	7c5b      	ldrb	r3, [r3, #17]
 8011c82:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        temp_storage.fx_cached_sector_type =                    (cache_entry + 3) -> fx_cached_sector_type;
 8011c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c88:	3348      	adds	r3, #72	; 0x48
 8011c8a:	7c9b      	ldrb	r3, [r3, #18]
 8011c8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

        (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 8011c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c92:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011c98:	3348      	adds	r3, #72	; 0x48
 8011c9a:	6812      	ldr	r2, [r2, #0]
 8011c9c:	601a      	str	r2, [r3, #0]
        (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 8011c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ca0:	3330      	adds	r3, #48	; 0x30
 8011ca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ca4:	f102 0148 	add.w	r1, r2, #72	; 0x48
 8011ca8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011cac:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 8011cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cb2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cb8:	3348      	adds	r3, #72	; 0x48
 8011cba:	7c12      	ldrb	r2, [r2, #16]
 8011cbc:	741a      	strb	r2, [r3, #16]
        (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 8011cbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cc0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cc6:	3348      	adds	r3, #72	; 0x48
 8011cc8:	7c52      	ldrb	r2, [r2, #17]
 8011cca:	745a      	strb	r2, [r3, #17]
        (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 8011ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cce:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cd4:	3348      	adds	r3, #72	; 0x48
 8011cd6:	7c92      	ldrb	r2, [r2, #18]
 8011cd8:	749a      	strb	r2, [r3, #18]

        (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 8011cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cdc:	f103 0218 	add.w	r2, r3, #24
 8011ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ce2:	3330      	adds	r3, #48	; 0x30
 8011ce4:	6812      	ldr	r2, [r2, #0]
 8011ce6:	601a      	str	r2, [r3, #0]
        (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 8011ce8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cea:	3318      	adds	r3, #24
 8011cec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011cee:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8011cf2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011cf6:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 8011cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011cfc:	f103 0218 	add.w	r2, r3, #24
 8011d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d02:	3330      	adds	r3, #48	; 0x30
 8011d04:	7c12      	ldrb	r2, [r2, #16]
 8011d06:	741a      	strb	r2, [r3, #16]
        (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 8011d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d0a:	f103 0218 	add.w	r2, r3, #24
 8011d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d10:	3330      	adds	r3, #48	; 0x30
 8011d12:	7c52      	ldrb	r2, [r2, #17]
 8011d14:	745a      	strb	r2, [r3, #17]
        (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 8011d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d18:	f103 0218 	add.w	r2, r3, #24
 8011d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d1e:	3330      	adds	r3, #48	; 0x30
 8011d20:	7c92      	ldrb	r2, [r2, #18]
 8011d22:	749a      	strb	r2, [r3, #18]

        (cache_entry + 1) -> fx_cached_sector_memory_buffer =   (cache_entry) -> fx_cached_sector_memory_buffer;
 8011d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d26:	3318      	adds	r3, #24
 8011d28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d2a:	6812      	ldr	r2, [r2, #0]
 8011d2c:	601a      	str	r2, [r3, #0]
        (cache_entry + 1) -> fx_cached_sector =                 (cache_entry) -> fx_cached_sector;
 8011d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d30:	f103 0118 	add.w	r1, r3, #24
 8011d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d36:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011d3a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    (cache_entry) -> fx_cached_sector_buffer_dirty;
 8011d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d40:	3318      	adds	r3, #24
 8011d42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d44:	7c12      	ldrb	r2, [r2, #16]
 8011d46:	741a      	strb	r2, [r3, #16]
        (cache_entry + 1) -> fx_cached_sector_valid =           (cache_entry) -> fx_cached_sector_valid;
 8011d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d4a:	3318      	adds	r3, #24
 8011d4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d4e:	7c52      	ldrb	r2, [r2, #17]
 8011d50:	745a      	strb	r2, [r3, #17]
        (cache_entry + 1) -> fx_cached_sector_type =            (cache_entry) -> fx_cached_sector_type;
 8011d52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d54:	3318      	adds	r3, #24
 8011d56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011d58:	7c92      	ldrb	r2, [r2, #18]
 8011d5a:	749a      	strb	r2, [r3, #18]

        (cache_entry) -> fx_cached_sector_memory_buffer =       temp_storage.fx_cached_sector_memory_buffer;
 8011d5c:	693a      	ldr	r2, [r7, #16]
 8011d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d60:	601a      	str	r2, [r3, #0]
        (cache_entry) -> fx_cached_sector =                     temp_storage.fx_cached_sector;
 8011d62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8011d66:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8011d68:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry) -> fx_cached_sector_buffer_dirty =        temp_storage.fx_cached_sector_buffer_dirty;
 8011d6c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8011d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d72:	741a      	strb	r2, [r3, #16]
        (cache_entry) -> fx_cached_sector_valid =               temp_storage.fx_cached_sector_valid;
 8011d74:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8011d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d7a:	745a      	strb	r2, [r3, #17]
        (cache_entry) -> fx_cached_sector_type =                temp_storage.fx_cached_sector_type;
 8011d7c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8011d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d82:	749a      	strb	r2, [r3, #18]

        /* Set the previous pointer to NULL to avoid the linked list update below.  */
        *previous_cache_entry =  FX_NULL;
 8011d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d86:	2200      	movs	r2, #0
 8011d88:	601a      	str	r2, [r3, #0]
 8011d8a:	e042      	b.n	8011e12 <_fx_utility_logical_sector_cache_entry_read+0x586>
    }
    else
    {

        /* Search for an entry in the cache that matches this request.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	695b      	ldr	r3, [r3, #20]
 8011d90:	633b      	str	r3, [r7, #48]	; 0x30
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	69db      	ldr	r3, [r3, #28]
 8011d96:	637b      	str	r3, [r7, #52]	; 0x34
        *previous_cache_entry =  FX_NULL;
 8011d98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	601a      	str	r2, [r3, #0]

        /* Look at the cache entries until a match is found or the end of
           the cache is reached.  */
        while (cache_size--)
 8011d9e:	e033      	b.n	8011e08 <_fx_utility_logical_sector_cache_entry_read+0x57c>
        {

            /* Determine if the requested sector has been found.  */
            if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 8011da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011da2:	7c5b      	ldrb	r3, [r3, #17]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d025      	beq.n	8011df4 <_fx_utility_logical_sector_cache_entry_read+0x568>
 8011da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011daa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011dae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8011db2:	4299      	cmp	r1, r3
 8011db4:	bf08      	it	eq
 8011db6:	4290      	cmpeq	r0, r2
 8011db8:	d11c      	bne.n	8011df4 <_fx_utility_logical_sector_cache_entry_read+0x568>
            {

                /* Yes, we found a match.  Simply setup the pointer to this
                   buffer and return.  */
                media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 8011dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dbc:	681a      	ldr	r2, [r3, #0]
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	609a      	str	r2, [r3, #8]

                /* Determine if we need to update the last used list.  */
                if (*previous_cache_entry)
 8011dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d00b      	beq.n	8011de2 <_fx_utility_logical_sector_cache_entry_read+0x556>

                    /* Yes, the current entry is not at the front of the list
                       so we need to change the order.  */

                    /* Link the previous entry to this entry's next pointer.  */
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 8011dca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011dcc:	681b      	ldr	r3, [r3, #0]
                        cache_entry -> fx_cached_sector_next_used;
 8011dce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011dd0:	6952      	ldr	r2, [r2, #20]
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 8011dd2:	615a      	str	r2, [r3, #20]

                    /* Place this entry at the head of the list.  */
                    cache_entry -> fx_cached_sector_next_used =
                        media_ptr -> fx_media_sector_cache_list_ptr;
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	69da      	ldr	r2, [r3, #28]
                    cache_entry -> fx_cached_sector_next_used =
 8011dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dda:	615a      	str	r2, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011de0:	61da      	str	r2, [r3, #28]
                }

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of logical sectors cache read hits.  */
                media_ptr -> fx_media_logical_sector_cache_read_hits++;
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8011de8:	1c5a      	adds	r2, r3, #1
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

                /* Success, return to caller immediately!  */
                return(FX_NULL);
 8011df0:	2300      	movs	r3, #0
 8011df2:	e00f      	b.n	8011e14 <_fx_utility_logical_sector_cache_entry_read+0x588>
            }

            /* Otherwise, we have not found the cached entry yet.  */

            /* If there are more entries, move to the next one.  */
            if (cache_entry -> fx_cached_sector_next_used)
 8011df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011df6:	695b      	ldr	r3, [r3, #20]
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d005      	beq.n	8011e08 <_fx_utility_logical_sector_cache_entry_read+0x57c>
            {

                *previous_cache_entry =  cache_entry;
 8011dfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011dfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011e00:	601a      	str	r2, [r3, #0]
                cache_entry =           cache_entry -> fx_cached_sector_next_used;
 8011e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e04:	695b      	ldr	r3, [r3, #20]
 8011e06:	637b      	str	r3, [r7, #52]	; 0x34
        while (cache_size--)
 8011e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e0a:	1e5a      	subs	r2, r3, #1
 8011e0c:	633a      	str	r2, [r7, #48]	; 0x30
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d1c6      	bne.n	8011da0 <_fx_utility_logical_sector_cache_entry_read+0x514>
            }
        }
    }

    /* The requested sector is not in cache, return the last cache entry.  */
    return(cache_entry);
 8011e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    FX_PARAMETER_NOT_USED(media_ptr);
    FX_PARAMETER_NOT_USED(logical_sector);
    FX_PARAMETER_NOT_USED(previous_cache_entry);
    return(FX_NULL);
#endif /* FX_DISABLE_CACHE */
}
 8011e14:	4618      	mov	r0, r3
 8011e16:	373c      	adds	r7, #60	; 0x3c
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1e:	4770      	bx	lr

08011e20 <_fx_utility_logical_sector_flush>:
/*                                            errors without cache,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_flush(FX_MEDIA *media_ptr, ULONG64 starting_sector, ULONG64 sectors, UINT invalidate)
{
 8011e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011e24:	b094      	sub	sp, #80	; 0x50
 8011e26:	af00      	add	r7, sp, #0
 8011e28:	61f8      	str	r0, [r7, #28]
 8011e2a:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_FLUSH_EXTENSION

    /* Calculate the ending sector.  */
    ending_sector =  starting_sector + sectors - 1;
 8011e2e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8011e32:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8011e36:	1884      	adds	r4, r0, r2
 8011e38:	eb41 0503 	adc.w	r5, r1, r3
 8011e3c:	1e63      	subs	r3, r4, #1
 8011e3e:	60bb      	str	r3, [r7, #8]
 8011e40:	f145 33ff 	adc.w	r3, r5, #4294967295
 8011e44:	60fb      	str	r3, [r7, #12]
 8011e46:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8011e4a:	e9c7 3408 	strd	r3, r4, [r7, #32]

    /* Pickup the number of dirty sectors currently in the cache.  */
    remaining_dirty =  media_ptr -> fx_media_sector_cache_dirty_count;
 8011e4e:	69fb      	ldr	r3, [r7, #28]
 8011e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e52:	633b      	str	r3, [r7, #48]	; 0x30

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_MEDIA_FLUSH, media_ptr, media_ptr -> fx_media_sector_cache_dirty_count, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine what type of cache configuration we have.  */
    if (media_ptr -> fx_media_sector_cache_hashed == FX_FALSE)
 8011e54:	69fb      	ldr	r3, [r7, #28]
 8011e56:	691b      	ldr	r3, [r3, #16]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	f040 80b4 	bne.w	8011fc6 <_fx_utility_logical_sector_flush+0x1a6>

        /* Linear cache present, simply walk through the search list until
           an unused cache entry is present.  */

        /* Flush and invalidate the internal logical sector cache.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 8011e5e:	69fb      	ldr	r3, [r7, #28]
 8011e60:	695b      	ldr	r3, [r3, #20]
 8011e62:	64bb      	str	r3, [r7, #72]	; 0x48
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8011e64:	69fb      	ldr	r3, [r7, #28]
 8011e66:	69db      	ldr	r3, [r3, #28]
 8011e68:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Look at the cache entries that have been written to.  */
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 8011e6a:	e09f      	b.n	8011fac <_fx_utility_logical_sector_flush+0x18c>
        {

            /* Determine if invalidation is not required and there are no
               more dirty sectors. */
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 8011e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d103      	bne.n	8011e7a <_fx_utility_logical_sector_flush+0x5a>
 8011e72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	f000 81de 	beq.w	8012236 <_fx_utility_logical_sector_flush+0x416>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if (sectors == 0)
 8011e7a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8011e7e:	4313      	orrs	r3, r2
 8011e80:	f000 81db 	beq.w	801223a <_fx_utility_logical_sector_flush+0x41a>
                /* No more sectors required to process.  */
                break;
            }

            /* Determine if this cached sector is within the specified range and is valid.  */
            if ((cache_entry -> fx_cached_sector_valid) &&
 8011e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e86:	7c5b      	ldrb	r3, [r3, #17]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	f000 808c 	beq.w	8011fa6 <_fx_utility_logical_sector_flush+0x186>
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 8011e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e90:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
            if ((cache_entry -> fx_cached_sector_valid) &&
 8011e94:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011e98:	4290      	cmp	r0, r2
 8011e9a:	eb71 0303 	sbcs.w	r3, r1, r3
 8011e9e:	f0c0 8082 	bcc.w	8011fa6 <_fx_utility_logical_sector_flush+0x186>
                (cache_entry -> fx_cached_sector <= ending_sector))
 8011ea2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ea4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 8011ea8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8011eac:	4290      	cmp	r0, r2
 8011eae:	eb71 0303 	sbcs.w	r3, r1, r3
 8011eb2:	d378      	bcc.n	8011fa6 <_fx_utility_logical_sector_flush+0x186>
            {

                /* Yes, the cache entry is valid and within the specified range. Determine if
                   the requested sector has been written to.  */
                if (cache_entry -> fx_cached_sector_buffer_dirty)
 8011eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011eb6:	7c1b      	ldrb	r3, [r3, #16]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d04d      	beq.n	8011f58 <_fx_utility_logical_sector_flush+0x138>
                {

                    /* Yes, write the cached sector out to the media.  */

                    /* Check for write protect at the media level (set by driver).  */
                    if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 8011ebc:	69fb      	ldr	r3, [r7, #28]
 8011ebe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d148      	bne.n	8011f58 <_fx_utility_logical_sector_flush+0x138>
                    {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                        /* Increment the number of driver write sector(s) requests.  */
                        media_ptr -> fx_media_driver_write_requests++;
 8011ec6:	69fb      	ldr	r3, [r7, #28]
 8011ec8:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8011ecc:	1c5a      	adds	r2, r3, #1
 8011ece:	69fb      	ldr	r3, [r7, #28]
 8011ed0:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                        /* Build write request to the driver.  */
                        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8011ed4:	69fb      	ldr	r3, [r7, #28]
 8011ed6:	2201      	movs	r2, #1
 8011ed8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8011edc:	69fb      	ldr	r3, [r7, #28]
 8011ede:	2290      	movs	r2, #144	; 0x90
 8011ee0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8011ee4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ee6:	681a      	ldr	r2, [r3, #0]
 8011ee8:	69fb      	ldr	r3, [r7, #28]
 8011eea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                        media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                        media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8011eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ef0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011ef4:	69fb      	ldr	r3, [r7, #28]
 8011ef6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                        media_ptr -> fx_media_driver_sectors =          1;
 8011efa:	69fb      	ldr	r3, [r7, #28]
 8011efc:	2201      	movs	r2, #1
 8011efe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                        media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8011f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f04:	7c9b      	ldrb	r3, [r3, #18]
 8011f06:	461a      	mov	r2, r3
 8011f08:	69fb      	ldr	r3, [r7, #28]
 8011f0a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                        /* Sectors other than FX_DATA_SECTOR will never be dirty when FX_FAULT_TOLERANT is defined. */
#ifndef FX_FAULT_TOLERANT
                        /* Determine if the system write flag needs to be set.  */
                        if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8011f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f10:	7c9b      	ldrb	r3, [r3, #18]
 8011f12:	2b04      	cmp	r3, #4
 8011f14:	d003      	beq.n	8011f1e <_fx_utility_logical_sector_flush+0xfe>
                        {

                            /* Yes, a system sector write is present so set the flag.  The driver
                               can use this flag to make extra safeguards in writing the sector
                               out, yielding more fault tolerance.  */
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8011f16:	69fb      	ldr	r3, [r7, #28]
 8011f18:	2201      	movs	r2, #1
 8011f1a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                        /* If trace is enabled, insert this event into the trace buffer.  */
                        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                        /* Invoke the driver to write the sector.  */
                        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8011f1e:	69fb      	ldr	r3, [r7, #28]
 8011f20:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011f24:	69f8      	ldr	r0, [r7, #28]
 8011f26:	4798      	blx	r3

                        /* Clear the system write flag.  */
                        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8011f28:	69fb      	ldr	r3, [r7, #28]
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                        /* Check for successful completion.  */
                        if (media_ptr -> fx_media_driver_status)
 8011f30:	69fb      	ldr	r3, [r7, #28]
 8011f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d003      	beq.n	8011f42 <_fx_utility_logical_sector_flush+0x122>
                        {

                            /* Error writing a cached sector out.  Return the
                               error status.  */
                            return(media_ptr -> fx_media_driver_status);
 8011f3a:	69fb      	ldr	r3, [r7, #28]
 8011f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011f40:	e17f      	b.n	8012242 <_fx_utility_logical_sector_flush+0x422>
                        }

                        /* Clear the buffer dirty flag since it has been flushed
                           out.  */
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8011f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f44:	2200      	movs	r2, #0
 8011f46:	741a      	strb	r2, [r3, #16]

                        /* Decrement the number of dirty sectors currently in the cache.  */
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 8011f48:	69fb      	ldr	r3, [r7, #28]
 8011f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f4c:	1e5a      	subs	r2, r3, #1
 8011f4e:	69fb      	ldr	r3, [r7, #28]
 8011f50:	625a      	str	r2, [r3, #36]	; 0x24
                        remaining_dirty--;
 8011f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f54:	3b01      	subs	r3, #1
 8011f56:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                }

                /* Determine if the invalidate option is specified.  */
                if (invalidate)
 8011f58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d018      	beq.n	8011f90 <_fx_utility_logical_sector_flush+0x170>
                {

                    /* Invalidate the cache entry.  */
                    cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8011f5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f60:	2200      	movs	r2, #0
 8011f62:	745a      	strb	r2, [r3, #17]

                    /* Place all ones in the sector number.  */
                    cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8011f64:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011f66:	f04f 32ff 	mov.w	r2, #4294967295
 8011f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8011f6e:	e9c1 2302 	strd	r2, r3, [r1, #8]

                    /* Determine if this sector is still dirty, this could be the case if
                       write protection was turned on.  */
                    if (cache_entry -> fx_cached_sector_buffer_dirty)
 8011f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f74:	7c1b      	ldrb	r3, [r3, #16]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d00a      	beq.n	8011f90 <_fx_utility_logical_sector_flush+0x170>
                    {

                        /* Yes, clear the dirty flag.  */
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8011f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f7c:	2200      	movs	r2, #0
 8011f7e:	741a      	strb	r2, [r3, #16]

                        /* Decrement the number of dirty sectors currently in the cache.  */
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 8011f80:	69fb      	ldr	r3, [r7, #28]
 8011f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f84:	1e5a      	subs	r2, r3, #1
 8011f86:	69fb      	ldr	r3, [r7, #28]
 8011f88:	625a      	str	r2, [r3, #36]	; 0x24
                        remaining_dirty--;
 8011f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f8c:	3b01      	subs	r3, #1
 8011f8e:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                }

                /* Decrement the number of sectors in the range that have been processed.  */
                sectors--;
 8011f90:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8011f94:	1e51      	subs	r1, r2, #1
 8011f96:	6039      	str	r1, [r7, #0]
 8011f98:	f143 33ff 	adc.w	r3, r3, #4294967295
 8011f9c:	607b      	str	r3, [r7, #4]
 8011f9e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8011fa2:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
            }

            /* Move to the next entry in the sector cache.  */
            cache_entry =  cache_entry -> fx_cached_sector_next_used;
 8011fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fa8:	695b      	ldr	r3, [r3, #20]
 8011faa:	64fb      	str	r3, [r7, #76]	; 0x4c
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 8011fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011fae:	1e5a      	subs	r2, r3, #1
 8011fb0:	64ba      	str	r2, [r7, #72]	; 0x48
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	f000 8144 	beq.w	8012240 <_fx_utility_logical_sector_flush+0x420>
 8011fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011fba:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8011fbe:	4313      	orrs	r3, r2
 8011fc0:	f47f af54 	bne.w	8011e6c <_fx_utility_logical_sector_flush+0x4c>
 8011fc4:	e13c      	b.n	8012240 <_fx_utility_logical_sector_flush+0x420>
    }
    else
    {

        /* Hashed cache is present. Pickup the cache size.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 8011fc6:	69fb      	ldr	r3, [r7, #28]
 8011fc8:	695b      	ldr	r3, [r3, #20]
 8011fca:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Initialize the loop control parameters.  */
        bit_set =  0;
 8011fcc:	2300      	movs	r3, #0
 8011fce:	643b      	str	r3, [r7, #64]	; 0x40
        valid_bit_map =  media_ptr -> fx_media_sector_cache_hashed_sector_valid;
 8011fd0:	69fb      	ldr	r3, [r7, #28]
 8011fd2:	6a1b      	ldr	r3, [r3, #32]
 8011fd4:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine how to process the hashed cache based on the number of sectors
           to process. If the sequential sector range is less than the bit map size,
           simply use the starting sector to derive the index into the cache.  */
        if (sectors < 32)
 8011fd6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8011fda:	2a20      	cmp	r2, #32
 8011fdc:	f173 0300 	sbcs.w	r3, r3, #0
 8011fe0:	d202      	bcs.n	8011fe8 <_fx_utility_logical_sector_flush+0x1c8>
        {
            use_starting_sector =  FX_TRUE;
 8011fe2:	2301      	movs	r3, #1
 8011fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011fe6:	e121      	b.n	801222c <_fx_utility_logical_sector_flush+0x40c>
        }
        else
        {
            use_starting_sector =  FX_FALSE;
 8011fe8:	2300      	movs	r3, #0
 8011fea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* Determine if there is anything valid in the cache.  */
        while (valid_bit_map)
 8011fec:	e11e      	b.n	801222c <_fx_utility_logical_sector_flush+0x40c>
        {

            /* Determine if invalidation is not required and there are no
               more dirty sectors. */
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 8011fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d103      	bne.n	8011ffc <_fx_utility_logical_sector_flush+0x1dc>
 8011ff4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	f000 8121 	beq.w	801223e <_fx_utility_logical_sector_flush+0x41e>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if ((sectors == 0) || (starting_sector > ending_sector))
 8011ffc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8012000:	4313      	orrs	r3, r2
 8012002:	f000 811d 	beq.w	8012240 <_fx_utility_logical_sector_flush+0x420>
 8012006:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801200a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801200e:	4290      	cmp	r0, r2
 8012010:	eb71 0303 	sbcs.w	r3, r1, r3
 8012014:	f0c0 8114 	bcc.w	8012240 <_fx_utility_logical_sector_flush+0x420>
                /* No more sectors required to process.  */
                break;
            }

            /* Determine how to compute the hash index.  */
            if (use_starting_sector)
 8012018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801201a:	2b00      	cmp	r3, #0
 801201c:	d015      	beq.n	801204a <_fx_utility_logical_sector_flush+0x22a>
            {

                /* Calculate the hash value of this sector using the lower bits.  */
                index =  (ULONG)(starting_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 801201e:	693a      	ldr	r2, [r7, #16]
 8012020:	69fb      	ldr	r3, [r7, #28]
 8012022:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8012026:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 801202a:	4013      	ands	r3, r2
 801202c:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Calculate the bit set indicating there is one or more valid sectors at this cache index.  */
                bit_set =  (index % 32);
 801202e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012030:	f003 031f 	and.w	r3, r3, #31
 8012034:	643b      	str	r3, [r7, #64]	; 0x40

                /* Compute the actual array index by multiplying by the cache depth.  */
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 8012036:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012038:	009b      	lsls	r3, r3, #2
 801203a:	63bb      	str	r3, [r7, #56]	; 0x38
 801203c:	e00d      	b.n	801205a <_fx_utility_logical_sector_flush+0x23a>
                /* Find the next set bit.  */
                while ((valid_bit_map & 1) == 0)
                {

                    /* Otherwise, shift down the bit in the bit map.  */
                    valid_bit_map =  valid_bit_map >> 1;
 801203e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012040:	085b      	lsrs	r3, r3, #1
 8012042:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Increment the set bit marker.  */
                    bit_set++;
 8012044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012046:	3301      	adds	r3, #1
 8012048:	643b      	str	r3, [r7, #64]	; 0x40
                while ((valid_bit_map & 1) == 0)
 801204a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801204c:	f003 0301 	and.w	r3, r3, #1
 8012050:	2b00      	cmp	r3, #0
 8012052:	d0f4      	beq.n	801203e <_fx_utility_logical_sector_flush+0x21e>
                }

                /* Compute the first actual index into the hashed cache.  */
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 8012054:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012056:	009b      	lsls	r3, r3, #2
 8012058:	63bb      	str	r3, [r7, #56]	; 0x38
            /* At this point, bit_set represents the next group of hashed sectors that could
               have valid cache entries and index represents the index into the sector cache
               of that sector group.  */

            /* Clear the remaining valid sectors for this entry in the bit map.  */
            remaining_valid =  0;
 801205a:	2300      	movs	r3, #0
 801205c:	637b      	str	r3, [r7, #52]	; 0x34
            /* Loop to check the corresponding hash entries.  */
            do
            {

                /* Setup pointer to the cache entry.  */
                cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 801205e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012060:	4613      	mov	r3, r2
 8012062:	005b      	lsls	r3, r3, #1
 8012064:	4413      	add	r3, r2
 8012066:	00db      	lsls	r3, r3, #3
 8012068:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 801206c:	69fa      	ldr	r2, [r7, #28]
 801206e:	4413      	add	r3, r2
 8012070:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Loop to examine the full depth of the hashed cache.  */
                for (i = 0; i < 4; i++)
 8012072:	2300      	movs	r3, #0
 8012074:	647b      	str	r3, [r7, #68]	; 0x44
 8012076:	e0a7      	b.n	80121c8 <_fx_utility_logical_sector_flush+0x3a8>
                {

                    /* Determine if this cached sector is within the specified range and is valid.  */
                    if ((cache_entry -> fx_cached_sector_valid) &&
 8012078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801207a:	7c5b      	ldrb	r3, [r3, #17]
 801207c:	2b00      	cmp	r3, #0
 801207e:	f000 8089 	beq.w	8012194 <_fx_utility_logical_sector_flush+0x374>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 8012082:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012084:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
                    if ((cache_entry -> fx_cached_sector_valid) &&
 8012088:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801208c:	4290      	cmp	r0, r2
 801208e:	eb71 0303 	sbcs.w	r3, r1, r3
 8012092:	d37f      	bcc.n	8012194 <_fx_utility_logical_sector_flush+0x374>
                        (cache_entry -> fx_cached_sector <= ending_sector))
 8012094:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012096:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 801209a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801209e:	4290      	cmp	r0, r2
 80120a0:	eb71 0303 	sbcs.w	r3, r1, r3
 80120a4:	d376      	bcc.n	8012194 <_fx_utility_logical_sector_flush+0x374>
                    {

                        /* Determine if the requested sector has been written to.  */
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 80120a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120a8:	7c1b      	ldrb	r3, [r3, #16]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d04d      	beq.n	801214a <_fx_utility_logical_sector_flush+0x32a>


                            /* Yes, write the cached sector out to the media.  */

                            /* Check for write protect at the media level (set by driver).  */
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 80120ae:	69fb      	ldr	r3, [r7, #28]
 80120b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d148      	bne.n	801214a <_fx_utility_logical_sector_flush+0x32a>
                            {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                                /* Increment the number of driver write sector(s) requests.  */
                                media_ptr -> fx_media_driver_write_requests++;
 80120b8:	69fb      	ldr	r3, [r7, #28]
 80120ba:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80120be:	1c5a      	adds	r2, r3, #1
 80120c0:	69fb      	ldr	r3, [r7, #28]
 80120c2:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                                /* Build Write request to the driver.  */
                                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 80120c6:	69fb      	ldr	r3, [r7, #28]
 80120c8:	2201      	movs	r2, #1
 80120ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80120ce:	69fb      	ldr	r3, [r7, #28]
 80120d0:	2290      	movs	r2, #144	; 0x90
 80120d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 80120d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120d8:	681a      	ldr	r2, [r3, #0]
 80120da:	69fb      	ldr	r3, [r7, #28]
 80120dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                                media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 80120e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120e2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80120e6:	69fb      	ldr	r3, [r7, #28]
 80120e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                                media_ptr -> fx_media_driver_sectors =          1;
 80120ec:	69fb      	ldr	r3, [r7, #28]
 80120ee:	2201      	movs	r2, #1
 80120f0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 80120f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120f6:	7c9b      	ldrb	r3, [r3, #18]
 80120f8:	461a      	mov	r2, r3
 80120fa:	69fb      	ldr	r3, [r7, #28]
 80120fc:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                                /* Sectors other than FX_DATA_SECTOR will never be dirty when FX_FAULT_TOLERANT is defined. */
#ifndef FX_FAULT_TOLERANT
                                /* Determine if the system write flag needs to be set.  */
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 8012100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012102:	7c9b      	ldrb	r3, [r3, #18]
 8012104:	2b04      	cmp	r3, #4
 8012106:	d003      	beq.n	8012110 <_fx_utility_logical_sector_flush+0x2f0>
                                {

                                    /* Yes, a system sector write is present so set the flag.  The driver
                                       can use this flag to make extra safeguards in writing the sector
                                       out, yielding more fault tolerance.  */
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8012108:	69fb      	ldr	r3, [r7, #28]
 801210a:	2201      	movs	r2, #1
 801210c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                                /* If trace is enabled, insert this event into the trace buffer.  */
                                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                                /* Invoke the driver to write the sector.  */
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 8012110:	69fb      	ldr	r3, [r7, #28]
 8012112:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8012116:	69f8      	ldr	r0, [r7, #28]
 8012118:	4798      	blx	r3

                                /* Clear the system write flag.  */
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801211a:	69fb      	ldr	r3, [r7, #28]
 801211c:	2200      	movs	r2, #0
 801211e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                                /* Check for successful completion.  */
                                if (media_ptr -> fx_media_driver_status)
 8012122:	69fb      	ldr	r3, [r7, #28]
 8012124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012128:	2b00      	cmp	r3, #0
 801212a:	d003      	beq.n	8012134 <_fx_utility_logical_sector_flush+0x314>
                                {

                                    /* Error writing a cached sector out.  Return the
                                       error status.  */
                                    return(media_ptr -> fx_media_driver_status);
 801212c:	69fb      	ldr	r3, [r7, #28]
 801212e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012132:	e086      	b.n	8012242 <_fx_utility_logical_sector_flush+0x422>
                                }

                                /* Clear the buffer dirty flag since it has been flushed
                                   out.  */
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8012134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012136:	2200      	movs	r2, #0
 8012138:	741a      	strb	r2, [r3, #16]

                                /* Decrement the number of dirty sectors currently in the cache.  */
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 801213a:	69fb      	ldr	r3, [r7, #28]
 801213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801213e:	1e5a      	subs	r2, r3, #1
 8012140:	69fb      	ldr	r3, [r7, #28]
 8012142:	625a      	str	r2, [r3, #36]	; 0x24
                                remaining_dirty--;
 8012144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012146:	3b01      	subs	r3, #1
 8012148:	633b      	str	r3, [r7, #48]	; 0x30
                            }
                        }

                        /* Determine if the invalidate option is specified.  */
                        if (invalidate)
 801214a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801214c:	2b00      	cmp	r3, #0
 801214e:	d018      	beq.n	8012182 <_fx_utility_logical_sector_flush+0x362>
                        {

                            /* Invalidate the cache entry.  */
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 8012150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012152:	2200      	movs	r2, #0
 8012154:	745a      	strb	r2, [r3, #17]

                            /* Place all ones in the sector number.  */
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8012156:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012158:	f04f 32ff 	mov.w	r2, #4294967295
 801215c:	f04f 33ff 	mov.w	r3, #4294967295
 8012160:	e9c1 2302 	strd	r2, r3, [r1, #8]

                            /* Determine if this sector is still dirty, this could be the case if
                               write protection was turned on.  */
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 8012164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012166:	7c1b      	ldrb	r3, [r3, #16]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d00a      	beq.n	8012182 <_fx_utility_logical_sector_flush+0x362>
                            {

                                /* Yes, clear the dirty flag.  */
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 801216c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801216e:	2200      	movs	r2, #0
 8012170:	741a      	strb	r2, [r3, #16]

                                /* Decrement the number of dirty sectors currently in the cache.  */
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 8012172:	69fb      	ldr	r3, [r7, #28]
 8012174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012176:	1e5a      	subs	r2, r3, #1
 8012178:	69fb      	ldr	r3, [r7, #28]
 801217a:	625a      	str	r2, [r3, #36]	; 0x24
                                remaining_dirty--;
 801217c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801217e:	3b01      	subs	r3, #1
 8012180:	633b      	str	r3, [r7, #48]	; 0x30
                            }
                        }

                        /* Decrement the number of sectors in the range that have been processed.  */
                        sectors--;
 8012182:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8012186:	f112 38ff 	adds.w	r8, r2, #4294967295
 801218a:	f143 39ff 	adc.w	r9, r3, #4294967295
 801218e:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
 8012192:	e006      	b.n	80121a2 <_fx_utility_logical_sector_flush+0x382>
                    }
                    else
                    {

                        /* Determine if the sector is valid.  */
                        if (cache_entry -> fx_cached_sector_valid)
 8012194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012196:	7c5b      	ldrb	r3, [r3, #17]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d002      	beq.n	80121a2 <_fx_utility_logical_sector_flush+0x382>
                        {

                            /* Increment the number of still remaining but out of range sectors.  */
                            remaining_valid++;
 801219c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801219e:	3301      	adds	r3, #1
 80121a0:	637b      	str	r3, [r7, #52]	; 0x34
                        }
                    }

                    /* Determine if invalidation is not required and there are no
                       more dirty sectors. */
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 80121a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d102      	bne.n	80121ae <_fx_utility_logical_sector_flush+0x38e>
 80121a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d011      	beq.n	80121d2 <_fx_utility_logical_sector_flush+0x3b2>
                        /* Yes, nothing left to do.  */
                        break;
                    }

                    /* Determine if there are any more sectors to process.  */
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 80121ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80121b2:	4313      	orrs	r3, r2
 80121b4:	d102      	bne.n	80121bc <_fx_utility_logical_sector_flush+0x39c>
 80121b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d00c      	beq.n	80121d6 <_fx_utility_logical_sector_flush+0x3b6>
                        /* No more sectors required to process.  */
                        break;
                    }

                    /* Move to the next cache entry.  */
                    cache_entry++;
 80121bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80121be:	3318      	adds	r3, #24
 80121c0:	64fb      	str	r3, [r7, #76]	; 0x4c
                for (i = 0; i < 4; i++)
 80121c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121c4:	3301      	adds	r3, #1
 80121c6:	647b      	str	r3, [r7, #68]	; 0x44
 80121c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121ca:	2b03      	cmp	r3, #3
 80121cc:	f67f af54 	bls.w	8012078 <_fx_utility_logical_sector_flush+0x258>
 80121d0:	e002      	b.n	80121d8 <_fx_utility_logical_sector_flush+0x3b8>
                        break;
 80121d2:	bf00      	nop
 80121d4:	e000      	b.n	80121d8 <_fx_utility_logical_sector_flush+0x3b8>
                        break;
 80121d6:	bf00      	nop
                }

                /* Move the index to the next position since the bit map can only represent 32
                   cache entries.  */
                index =  index + (32 * FX_SECTOR_CACHE_DEPTH);
 80121d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121da:	3380      	adds	r3, #128	; 0x80
 80121dc:	63bb      	str	r3, [r7, #56]	; 0x38
            } while (index < cache_size);
 80121de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80121e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80121e2:	429a      	cmp	r2, r3
 80121e4:	f4ff af3b 	bcc.w	801205e <_fx_utility_logical_sector_flush+0x23e>

            /* Determine if invalidation was required and there are no more valid sectors
               associated with this bit position.  */
            if ((invalidate) && (remaining_valid == 0))
 80121e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d00c      	beq.n	8012208 <_fx_utility_logical_sector_flush+0x3e8>
 80121ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d109      	bne.n	8012208 <_fx_utility_logical_sector_flush+0x3e8>
            {

                /* Clear this bit position.  */
                media_ptr -> fx_media_sector_cache_hashed_sector_valid &=  ~(((ULONG)1) << bit_set);
 80121f4:	69fb      	ldr	r3, [r7, #28]
 80121f6:	6a1a      	ldr	r2, [r3, #32]
 80121f8:	2101      	movs	r1, #1
 80121fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80121fc:	fa01 f303 	lsl.w	r3, r1, r3
 8012200:	43db      	mvns	r3, r3
 8012202:	401a      	ands	r2, r3
 8012204:	69fb      	ldr	r3, [r7, #28]
 8012206:	621a      	str	r2, [r3, #32]
            }

            /* Determine if the starting sector is being used for examination of the hash.  */
            if (use_starting_sector)
 8012208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801220a:	2b00      	cmp	r3, #0
 801220c:	d008      	beq.n	8012220 <_fx_utility_logical_sector_flush+0x400>
            {

                /* Move to the next sector.  */
                starting_sector++;
 801220e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012212:	f112 0a01 	adds.w	sl, r2, #1
 8012216:	f143 0b00 	adc.w	fp, r3, #0
 801221a:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 801221e:	e005      	b.n	801222c <_fx_utility_logical_sector_flush+0x40c>
            }
            else
            {

                /* Move to next bit in the map.  */
                valid_bit_map =  valid_bit_map >> 1;
 8012220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012222:	085b      	lsrs	r3, r3, #1
 8012224:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Increment the set bit marker.  */
                bit_set++;
 8012226:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012228:	3301      	adds	r3, #1
 801222a:	643b      	str	r3, [r7, #64]	; 0x40
        while (valid_bit_map)
 801222c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801222e:	2b00      	cmp	r3, #0
 8012230:	f47f aedd 	bne.w	8011fee <_fx_utility_logical_sector_flush+0x1ce>
 8012234:	e004      	b.n	8012240 <_fx_utility_logical_sector_flush+0x420>
                break;
 8012236:	bf00      	nop
 8012238:	e002      	b.n	8012240 <_fx_utility_logical_sector_flush+0x420>
                break;
 801223a:	bf00      	nop
 801223c:	e000      	b.n	8012240 <_fx_utility_logical_sector_flush+0x420>
                break;
 801223e:	bf00      	nop
    FX_PARAMETER_NOT_USED(sectors);
    FX_PARAMETER_NOT_USED(invalidate);
#endif /* FX_DISABLE_CACHE */

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 8012240:	2300      	movs	r3, #0
}
 8012242:	4618      	mov	r0, r3
 8012244:	3750      	adds	r7, #80	; 0x50
 8012246:	46bd      	mov	sp, r7
 8012248:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801224c <_fx_utility_logical_sector_read>:
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                      VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 801224c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012250:	b09c      	sub	sp, #112	; 0x70
 8012252:	af04      	add	r7, sp, #16
 8012254:	64f8      	str	r0, [r7, #76]	; 0x4c
 8012256:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 801225a:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 801225e:	2b02      	cmp	r3, #2
 8012260:	d106      	bne.n	8012270 <_fx_utility_logical_sector_read+0x24>
    {

        /* Increment the number of FAT sector reads.  */
        media_ptr -> fx_media_fat_sector_reads++;
 8012262:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012264:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8012268:	1c5a      	adds	r2, r3, #1
 801226a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801226c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    }

    /* Increment the number of logical sectors read.  */
    media_ptr -> fx_media_logical_sector_reads++;
 8012270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012272:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8012276:	1c5a      	adds	r2, r3, #1
 8012278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801227a:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION

#ifndef FX_DISABLE_CACHE
    /* Determine if the request is for the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 801227e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012280:	689a      	ldr	r2, [r3, #8]
 8012282:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012286:	4293      	cmp	r3, r2
 8012288:	f0c0 80d9 	bcc.w	801243e <_fx_utility_logical_sector_read+0x1f2>
        (((UCHAR *)buffer_ptr) <= media_ptr -> fx_media_sector_cache_end))
 801228c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801228e:	699a      	ldr	r2, [r3, #24]
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 8012290:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012294:	4293      	cmp	r3, r2
 8012296:	f200 80d2 	bhi.w	801243e <_fx_utility_logical_sector_read+0x1f2>
    {

        /* Internal cache buffer is requested.  */

        /* Examine the logical sector cache.  */
        cache_entry = _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 801229a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801229e:	9300      	str	r3, [sp, #0]
 80122a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80122a4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80122a6:	f7ff faf1 	bl	801188c <_fx_utility_logical_sector_cache_entry_read>
 80122aa:	6578      	str	r0, [r7, #84]	; 0x54

        /* Was the sector found?  */
        if (cache_entry == FX_NULL)
 80122ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d101      	bne.n	80122b6 <_fx_utility_logical_sector_read+0x6a>
        {

            /* Yes, the sector was found. Return success!  */
            return(FX_SUCCESS);
 80122b2:	2300      	movs	r3, #0
 80122b4:	e259      	b.n	801276a <_fx_utility_logical_sector_read+0x51e>
        /* At this point, we need to read in a sector from the media.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of logical sectors cache read misses.  */
        media_ptr -> fx_media_logical_sector_cache_read_misses++;
 80122b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122b8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 80122bc:	1c5a      	adds	r2, r3, #1
 80122be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122c0:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_LOG_SECTOR_CACHE_MISS, media_ptr, logical_sector, 0, media_ptr -> fx_media_sector_cache_size, FX_TRACE_INTERNAL_EVENTS, 0, 0)
#endif

        /* First, check and see if the last used entry has been
           modified.  */
        if ((cache_entry -> fx_cached_sector_valid) &&
 80122c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80122c6:	7c5b      	ldrb	r3, [r3, #17]
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d049      	beq.n	8012360 <_fx_utility_logical_sector_read+0x114>
            (cache_entry -> fx_cached_sector_buffer_dirty))
 80122cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80122ce:	7c1b      	ldrb	r3, [r3, #16]
        if ((cache_entry -> fx_cached_sector_valid) &&
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d045      	beq.n	8012360 <_fx_utility_logical_sector_read+0x114>
               before we read in the new buffer.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of driver write sector(s) requests.  */
            media_ptr -> fx_media_driver_write_requests++;
 80122d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122d6:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80122da:	1c5a      	adds	r2, r3, #1
 80122dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122de:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

            /* Build write request to the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 80122e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122e4:	2201      	movs	r2, #1
 80122e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80122ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122ec:	2290      	movs	r2, #144	; 0x90
 80122ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 80122f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80122f4:	681a      	ldr	r2, [r3, #0]
 80122f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
            media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
            media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 80122fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80122fe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8012302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012304:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
            media_ptr -> fx_media_driver_sectors =          1;
 8012308:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801230a:	2201      	movs	r2, #1
 801230c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8012310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012312:	7c9b      	ldrb	r3, [r3, #18]
 8012314:	461a      	mov	r2, r3
 8012316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012318:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* Determine if the sector is a data sector or a system sector.  */
            if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 801231c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801231e:	7c9b      	ldrb	r3, [r3, #18]
 8012320:	2b04      	cmp	r3, #4
 8012322:	d003      	beq.n	801232c <_fx_utility_logical_sector_read+0xe0>
            {

                /* System sector is present.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8012324:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012326:	2201      	movs	r2, #1
 8012328:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Invoke the driver to write the sector.  */
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 801232c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801232e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8012332:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8012334:	4798      	blx	r3

            /* Clear the system write flag.  */
            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8012336:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012338:	2200      	movs	r2, #0
 801233a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* Check for successful completion.  */
            if (media_ptr -> fx_media_driver_status)
 801233e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012340:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012344:	2b00      	cmp	r3, #0
 8012346:	d003      	beq.n	8012350 <_fx_utility_logical_sector_read+0x104>
            {

                /* Error writing a cached sector out.  Return the
                   error status.  */
                return(media_ptr -> fx_media_driver_status);
 8012348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801234a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801234e:	e20c      	b.n	801276a <_fx_utility_logical_sector_read+0x51e>
            }

            /* Clear the buffer dirty flag since it has been flushed
               out.  */
            cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 8012350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012352:	2200      	movs	r2, #0
 8012354:	741a      	strb	r2, [r3, #16]

            /* Decrement the number of outstanding dirty cache entries.  */
            media_ptr -> fx_media_sector_cache_dirty_count--;
 8012356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801235a:	1e5a      	subs	r2, r3, #1
 801235c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801235e:	625a      	str	r2, [r3, #36]	; 0x24

        /* At this point, we can go out and setup this cached sector
           entry.  */

        /* Compare against logical sector to make sure it is valid.  */
        if (logical_sector >= media_ptr -> fx_media_total_sectors)
 8012360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012362:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8012366:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 801236a:	4290      	cmp	r0, r2
 801236c:	eb71 0303 	sbcs.w	r3, r1, r3
 8012370:	d301      	bcc.n	8012376 <_fx_utility_logical_sector_read+0x12a>
        {
            return(FX_SECTOR_INVALID);
 8012372:	2389      	movs	r3, #137	; 0x89
 8012374:	e1f9      	b.n	801276a <_fx_utility_logical_sector_read+0x51e>
        }

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 8012376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012378:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 801237c:	1c5a      	adds	r2, r3, #1
 801237e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012380:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
#endif

        /* Build Read request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 8012384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012386:	2200      	movs	r2, #0
 8012388:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 801238c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801238e:	2290      	movs	r2, #144	; 0x90
 8012390:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8012394:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012396:	681a      	ldr	r2, [r3, #0]
 8012398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801239a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 801239e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80123a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123a2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          1;
 80123a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123a8:	2201      	movs	r2, #1
 80123aa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 80123ae:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 80123b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123b4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 80123b8:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80123bc:	2b04      	cmp	r3, #4
 80123be:	d103      	bne.n	80123c8 <_fx_utility_logical_sector_read+0x17c>
        {

            /* Data sector is present.  */
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 80123c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123c2:	2201      	movs	r2, #1
 80123c4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 80123c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80123ce:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80123d0:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 80123d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123d4:	2200      	movs	r2, #0
 80123d6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* Determine if the read was successful.  */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 80123da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d11a      	bne.n	801241a <_fx_utility_logical_sector_read+0x1ce>
        {

            /* Remember the sector number.  */
            cache_entry -> fx_cached_sector =  logical_sector;
 80123e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80123e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80123ea:	e9c1 2302 	strd	r2, r3, [r1, #8]

            /* Make the cache entry valid.  */
            cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 80123ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123f0:	2201      	movs	r2, #1
 80123f2:	745a      	strb	r2, [r3, #17]

            /* Remember the sector type.  */
            cache_entry -> fx_cached_sector_type =  sector_type;
 80123f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123f6:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 80123fa:	749a      	strb	r2, [r3, #18]

            /* Place this entry that the head of the cached sector
               list.  */

            /* Determine if we need to update the last used list.  */
            if (previous_cache_entry)
 80123fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d015      	beq.n	801242e <_fx_utility_logical_sector_read+0x1e2>

                /* Yes, the current entry is not at the front of the list
                   so we need to change the order.  */

                /* Link the previous entry to this entry's next pointer.  */
                previous_cache_entry -> fx_cached_sector_next_used =
 8012402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                    cache_entry -> fx_cached_sector_next_used;
 8012404:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012406:	6952      	ldr	r2, [r2, #20]
                previous_cache_entry -> fx_cached_sector_next_used =
 8012408:	615a      	str	r2, [r3, #20]

                /* Place this entry at the head of the list.  */
                cache_entry -> fx_cached_sector_next_used =
                    media_ptr -> fx_media_sector_cache_list_ptr;
 801240a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801240c:	69da      	ldr	r2, [r3, #28]
                cache_entry -> fx_cached_sector_next_used =
 801240e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012410:	615a      	str	r2, [r3, #20]
                media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8012412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012414:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012416:	61da      	str	r2, [r3, #28]
 8012418:	e009      	b.n	801242e <_fx_utility_logical_sector_read+0x1e2>
        }
        else
        {

            /* Invalidate the cache entry on read errors.  */
            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 801241a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801241c:	2200      	movs	r2, #0
 801241e:	745a      	strb	r2, [r3, #17]

            /* Put all ones in the sector value.  */
            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 8012420:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012422:	f04f 32ff 	mov.w	r2, #4294967295
 8012426:	f04f 33ff 	mov.w	r3, #4294967295
 801242a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        }

        /* Simply setup the pointer to this buffer and return.  */
        media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 801242e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012430:	681a      	ldr	r2, [r3, #0]
 8012432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012434:	609a      	str	r2, [r3, #8]

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 8012436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801243c:	e195      	b.n	801276a <_fx_utility_logical_sector_read+0x51e>
    {

        /* Direct I/O to application buffer area.  */

        /* Compare against logical sector to make sure it is valid.  */
        if ((logical_sector + sectors - 1) > (ULONG)media_ptr -> fx_media_total_sectors)
 801243e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012442:	2200      	movs	r2, #0
 8012444:	469a      	mov	sl, r3
 8012446:	4693      	mov	fp, r2
 8012448:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801244c:	eb1a 0402 	adds.w	r4, sl, r2
 8012450:	eb4b 0503 	adc.w	r5, fp, r3
 8012454:	f114 38ff 	adds.w	r8, r4, #4294967295
 8012458:	f145 39ff 	adc.w	r9, r5, #4294967295
 801245c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801245e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8012462:	2300      	movs	r3, #0
 8012464:	63ba      	str	r2, [r7, #56]	; 0x38
 8012466:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012468:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 801246c:	460b      	mov	r3, r1
 801246e:	4543      	cmp	r3, r8
 8012470:	4613      	mov	r3, r2
 8012472:	eb73 0309 	sbcs.w	r3, r3, r9
 8012476:	d22c      	bcs.n	80124d2 <_fx_utility_logical_sector_read+0x286>
        {
            return(FX_SECTOR_INVALID);
 8012478:	2389      	movs	r3, #137	; 0x89
 801247a:	e176      	b.n	801276a <_fx_utility_logical_sector_read+0x51e>
        /* Attempt to fill the beginning of the buffer from cached sectors.  */
        while (sectors)
        {

            /* Determine if the sector is in the cache.  */
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry))
 801247c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012480:	9300      	str	r3, [sp, #0]
 8012482:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8012486:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8012488:	f7ff fa00 	bl	801188c <_fx_utility_logical_sector_cache_entry_read>
 801248c:	4603      	mov	r3, r0
 801248e:	2b00      	cmp	r3, #0
 8012490:	d124      	bne.n	80124dc <_fx_utility_logical_sector_read+0x290>
                /* Not in the cache - get out of the loop!  */
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, buffer_ptr, media_ptr -> fx_media_bytes_per_sector); /* Use case of memcpy is verified. */
 8012492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012494:	6898      	ldr	r0, [r3, #8]
 8012496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801249a:	461a      	mov	r2, r3
 801249c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80124a0:	f000 fad0 	bl	8012a44 <_fx_utility_memory_copy>

            /* Advance the destination buffer.  */
            buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 80124a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80124a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80124ac:	4413      	add	r3, r2
 80124ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

            /* Advance the sector and decrement the number of sectors left.  */
            logical_sector++;
 80124b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80124b6:	1c51      	adds	r1, r2, #1
 80124b8:	61b9      	str	r1, [r7, #24]
 80124ba:	f143 0300 	adc.w	r3, r3, #0
 80124be:	61fb      	str	r3, [r7, #28]
 80124c0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80124c4:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
            sectors--;
 80124c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80124cc:	3b01      	subs	r3, #1
 80124ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (sectors)
 80124d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d1d0      	bne.n	801247c <_fx_utility_logical_sector_read+0x230>
 80124da:	e000      	b.n	80124de <_fx_utility_logical_sector_read+0x292>
                break;
 80124dc:	bf00      	nop
        }

        /* Calculate the end sector.  */
        end_sector = logical_sector + sectors - 1;
 80124de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80124e2:	2200      	movs	r2, #0
 80124e4:	633b      	str	r3, [r7, #48]	; 0x30
 80124e6:	637a      	str	r2, [r7, #52]	; 0x34
 80124e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80124ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80124f0:	4621      	mov	r1, r4
 80124f2:	1889      	adds	r1, r1, r2
 80124f4:	62b9      	str	r1, [r7, #40]	; 0x28
 80124f6:	4629      	mov	r1, r5
 80124f8:	eb43 0101 	adc.w	r1, r3, r1
 80124fc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80124fe:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8012502:	460b      	mov	r3, r1
 8012504:	3b01      	subs	r3, #1
 8012506:	613b      	str	r3, [r7, #16]
 8012508:	4613      	mov	r3, r2
 801250a:	f143 33ff 	adc.w	r3, r3, #4294967295
 801250e:	617b      	str	r3, [r7, #20]
 8012510:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8012514:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58

        /* Attempt to fill the end of the buffer from the opposite direction.  */
        while (sectors)
 8012518:	e02b      	b.n	8012572 <_fx_utility_logical_sector_read+0x326>
        {

            /* Determine if the sector is in the cache.  */
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, end_sector, &previous_cache_entry))
 801251a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801251e:	9300      	str	r3, [sp, #0]
 8012520:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8012524:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8012526:	f7ff f9b1 	bl	801188c <_fx_utility_logical_sector_cache_entry_read>
 801252a:	4603      	mov	r3, r0
 801252c:	2b00      	cmp	r3, #0
 801252e:	d125      	bne.n	801257c <_fx_utility_logical_sector_read+0x330>
                /* Not in the cache - get out of the loop!  */
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 8012530:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012532:	6898      	ldr	r0, [r3, #8]
                                    ((UCHAR *)buffer_ptr) + ((sectors - 1) * media_ptr -> fx_media_bytes_per_sector),
 8012534:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012538:	3b01      	subs	r3, #1
 801253a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801253c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801253e:	fb02 f303 	mul.w	r3, r2, r3
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 8012542:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012546:	18d1      	adds	r1, r2, r3
                                    media_ptr -> fx_media_bytes_per_sector);
 8012548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801254a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 801254c:	461a      	mov	r2, r3
 801254e:	f000 fa79 	bl	8012a44 <_fx_utility_memory_copy>

            /* Move sector to previous sector and decrement the number of sectors left.  */
            end_sector--;
 8012552:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8012556:	1e51      	subs	r1, r2, #1
 8012558:	60b9      	str	r1, [r7, #8]
 801255a:	f143 33ff 	adc.w	r3, r3, #4294967295
 801255e:	60fb      	str	r3, [r7, #12]
 8012560:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8012564:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
            sectors--;
 8012568:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801256c:	3b01      	subs	r3, #1
 801256e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (sectors)
 8012572:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012576:	2b00      	cmp	r3, #0
 8012578:	d1cf      	bne.n	801251a <_fx_utility_logical_sector_read+0x2ce>
 801257a:	e000      	b.n	801257e <_fx_utility_logical_sector_read+0x332>
                break;
 801257c:	bf00      	nop
        }

        /* Determine if there are still sectors left to read.  */
        if (sectors == 0)
 801257e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012582:	2b00      	cmp	r3, #0
 8012584:	d101      	bne.n	801258a <_fx_utility_logical_sector_read+0x33e>
        {

            /* No more sectors to read - return success!  */
            return(FX_SUCCESS);
 8012586:	2300      	movs	r3, #0
 8012588:	e0ef      	b.n	801276a <_fx_utility_logical_sector_read+0x51e>
        }

        /* Flush and invalidate any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 801258a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801258e:	2200      	movs	r2, #0
 8012590:	623b      	str	r3, [r7, #32]
 8012592:	627a      	str	r2, [r7, #36]	; 0x24
 8012594:	2301      	movs	r3, #1
 8012596:	9302      	str	r3, [sp, #8]
 8012598:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 801259c:	e9cd 3400 	strd	r3, r4, [sp]
 80125a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80125a4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80125a6:	f7ff fc3b 	bl	8011e20 <_fx_utility_logical_sector_flush>
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 80125aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125ac:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80125b0:	1c5a      	adds	r2, r3, #1
 80125b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125b4:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
#endif

        /* Build read request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 80125b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125ba:	2200      	movs	r2, #0
 80125bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80125c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125c2:	2290      	movs	r2, #144	; 0x90
 80125c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 80125c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80125ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 80125d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80125d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 80125da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80125e0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 80125e4:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 80125e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125ea:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 80125ee:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80125f2:	2b04      	cmp	r3, #4
 80125f4:	d103      	bne.n	80125fe <_fx_utility_logical_sector_read+0x3b2>
        {

            /* Data sector is present.  */
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 80125f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125f8:	2201      	movs	r2, #1
 80125fa:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 80125fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012600:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8012604:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8012606:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 8012608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801260a:	2200      	movs	r2, #0
 801260c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

#ifndef FX_DISABLE_DIRECT_DATA_READ_CACHE_FILL

        /* Determine if the read was successful and if number of sectors just read will
           reasonably fit into the cache.  */
        if ((media_ptr -> fx_media_driver_status == FX_SUCCESS) && (sectors < (media_ptr -> fx_media_sector_cache_size / 4)))
 8012610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012616:	2b00      	cmp	r3, #0
 8012618:	f040 80a4 	bne.w	8012764 <_fx_utility_logical_sector_read+0x518>
 801261c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801261e:	695b      	ldr	r3, [r3, #20]
 8012620:	089b      	lsrs	r3, r3, #2
 8012622:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012626:	429a      	cmp	r2, r3
 8012628:	f080 809c 	bcs.w	8012764 <_fx_utility_logical_sector_read+0x518>

            /* Yes, read of direct sectors was successful.  */

            /* Copy the sectors directly read into the cache so they are available on
               subsequent read requests.  */
            while (sectors)
 801262c:	e095      	b.n	801275a <_fx_utility_logical_sector_read+0x50e>
            {

                /* Attempt to read the cache entry.  */
                cache_entry =  _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 801262e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012632:	9300      	str	r3, [sp, #0]
 8012634:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8012638:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801263a:	f7ff f927 	bl	801188c <_fx_utility_logical_sector_cache_entry_read>
 801263e:	6578      	str	r0, [r7, #84]	; 0x54
                FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION_1

                /* At this point, a cache entry should always be present since we invalidated
                   the cache over this sector range previously. In any case, check for the error
                   condition.  */
                if (cache_entry == FX_NULL)
 8012640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012642:	2b00      	cmp	r3, #0
 8012644:	d101      	bne.n	801264a <_fx_utility_logical_sector_read+0x3fe>
                {

                    /* This case should never happen, however, if it does simply give up on updating the
                       cache with the sectors from the direct read.  */
                    return(FX_SUCCESS);
 8012646:	2300      	movs	r3, #0
 8012648:	e08f      	b.n	801276a <_fx_utility_logical_sector_read+0x51e>
                }

                /* Determine if the cache entry is dirty and needs to be written out before it is used.  */
                if ((cache_entry -> fx_cached_sector_valid) &&
 801264a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801264c:	7c5b      	ldrb	r3, [r3, #17]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d049      	beq.n	80126e6 <_fx_utility_logical_sector_read+0x49a>
                    (cache_entry -> fx_cached_sector_buffer_dirty))
 8012652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012654:	7c1b      	ldrb	r3, [r3, #16]
                if ((cache_entry -> fx_cached_sector_valid) &&
 8012656:	2b00      	cmp	r3, #0
 8012658:	d045      	beq.n	80126e6 <_fx_utility_logical_sector_read+0x49a>
                       before we read in the new buffer.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

                    /* Increment the number of driver write sector(s) requests.  */
                    media_ptr -> fx_media_driver_write_requests++;
 801265a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801265c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8012660:	1c5a      	adds	r2, r3, #1
 8012662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012664:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                    /* Build write request to the driver.  */
                    media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 8012668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801266a:	2201      	movs	r2, #1
 801266c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8012670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012672:	2290      	movs	r2, #144	; 0x90
 8012674:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                    media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 8012678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801267a:	681a      	ldr	r2, [r3, #0]
 801267c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801267e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                    media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                    media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 8012682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012684:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8012688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801268a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                    media_ptr -> fx_media_driver_sectors =          1;
 801268e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012690:	2201      	movs	r2, #1
 8012692:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                    media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 8012696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012698:	7c9b      	ldrb	r3, [r3, #18]
 801269a:	461a      	mov	r2, r3
 801269c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801269e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                    /* Only data sectors may be dirty when FX_FAULT_TOLERANT is defined */
#ifndef FX_FAULT_TOLERANT
                    /* Determine if the sector is a data sector or a system sector.  */
                    if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 80126a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80126a4:	7c9b      	ldrb	r3, [r3, #18]
 80126a6:	2b04      	cmp	r3, #4
 80126a8:	d003      	beq.n	80126b2 <_fx_utility_logical_sector_read+0x466>
                    {

                        /* System sector is present.  */
                        media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 80126aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126ac:	2201      	movs	r2, #1
 80126ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                    /* Invoke the driver to write the sector.  */
                    (media_ptr -> fx_media_driver_entry) (media_ptr);
 80126b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126b4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80126b8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80126ba:	4798      	blx	r3

                    /* Clear the system write flag.  */
                    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 80126bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126be:	2200      	movs	r2, #0
 80126c0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                    /* Check for successful completion.  */
                    if (media_ptr -> fx_media_driver_status)
 80126c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d003      	beq.n	80126d6 <_fx_utility_logical_sector_read+0x48a>
                    {

                        /* Error writing a cached sector out.  Return the
                           error status.  */
                        return(media_ptr -> fx_media_driver_status);
 80126ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80126d4:	e049      	b.n	801276a <_fx_utility_logical_sector_read+0x51e>
                    }

                    /* Clear the buffer dirty flag since it has been flushed
                       out.  */
                    cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 80126d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80126d8:	2200      	movs	r2, #0
 80126da:	741a      	strb	r2, [r3, #16]

                    /* Decrement the number of outstanding dirty cache entries.  */
                    media_ptr -> fx_media_sector_cache_dirty_count--;
 80126dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126e0:	1e5a      	subs	r2, r3, #1
 80126e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126e4:	625a      	str	r2, [r3, #36]	; 0x24
                }

                /* Now setup the cache entry with information from the new sector.  */

                /* Remember the sector number.  */
                cache_entry -> fx_cached_sector =  logical_sector;
 80126e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80126e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80126ec:	e9c1 2302 	strd	r2, r3, [r1, #8]

                /* Make the cache entry valid.  */
                cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 80126f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80126f2:	2201      	movs	r2, #1
 80126f4:	745a      	strb	r2, [r3, #17]

                /* Remember the sector type.  */
                cache_entry -> fx_cached_sector_type =  sector_type;
 80126f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80126f8:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 80126fc:	749a      	strb	r2, [r3, #18]

                /* Place this entry that the head of the cached sector
                   list.  */

                /* Determine if we need to update the last used list.  */
                if (previous_cache_entry)
 80126fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012700:	2b00      	cmp	r3, #0
 8012702:	d00a      	beq.n	801271a <_fx_utility_logical_sector_read+0x4ce>

                    /* Yes, the current entry is not at the front of the list
                       so we need to change the order.  */

                    /* Link the previous entry to this entry's next pointer.  */
                    previous_cache_entry -> fx_cached_sector_next_used =
 8012704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        cache_entry -> fx_cached_sector_next_used;
 8012706:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012708:	6952      	ldr	r2, [r2, #20]
                    previous_cache_entry -> fx_cached_sector_next_used =
 801270a:	615a      	str	r2, [r3, #20]

                    /* Place this entry at the head of the list.  */
                    cache_entry -> fx_cached_sector_next_used =
                        media_ptr -> fx_media_sector_cache_list_ptr;
 801270c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801270e:	69da      	ldr	r2, [r3, #28]
                    cache_entry -> fx_cached_sector_next_used =
 8012710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012712:	615a      	str	r2, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 8012714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012716:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012718:	61da      	str	r2, [r3, #28]
                }

                /* Copy the data from the destination buffer to the cache entry.  */
                _fx_utility_memory_copy(buffer_ptr, /* Use case of memcpy is verified. */
 801271a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801271c:	6819      	ldr	r1, [r3, #0]
                                        cache_entry -> fx_cached_sector_memory_buffer,
                                        media_ptr -> fx_media_bytes_per_sector);
 801271e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                _fx_utility_memory_copy(buffer_ptr, /* Use case of memcpy is verified. */
 8012722:	461a      	mov	r2, r3
 8012724:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8012728:	f000 f98c 	bl	8012a44 <_fx_utility_memory_copy>

                /* Advance the destination buffer.  */
                buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 801272c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801272e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012730:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012734:	4413      	add	r3, r2
 8012736:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                /* Advance the source sector and decrement the sector count.  */
                logical_sector++;
 801273a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 801273e:	1c51      	adds	r1, r2, #1
 8012740:	6039      	str	r1, [r7, #0]
 8012742:	f143 0300 	adc.w	r3, r3, #0
 8012746:	607b      	str	r3, [r7, #4]
 8012748:	e9d7 3400 	ldrd	r3, r4, [r7]
 801274c:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                sectors--;
 8012750:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012754:	3b01      	subs	r3, #1
 8012756:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            while (sectors)
 801275a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801275e:	2b00      	cmp	r3, #0
 8012760:	f47f af65 	bne.w	801262e <_fx_utility_logical_sector_read+0x3e2>
            }
        }
#endif

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 8012764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
}
 801276a:	4618      	mov	r0, r3
 801276c:	3760      	adds	r7, #96	; 0x60
 801276e:	46bd      	mov	sp, r7
 8012770:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08012774 <_fx_utility_logical_sector_write>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_write(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                       VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 8012774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012778:	b096      	sub	sp, #88	; 0x58
 801277a:	af04      	add	r7, sp, #16
 801277c:	62f8      	str	r0, [r7, #44]	; 0x2c
 801277e:	e9c7 2308 	strd	r2, r3, [r7, #32]
#ifndef FX_DISABLE_CACHE
FX_CACHED_SECTOR *cache_entry;
UINT              cache_size;
UINT              index;
UINT              i;
UCHAR             cache_found = FX_FALSE;
 8012782:	2300      	movs	r3, #0
 8012784:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 8012788:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 801278c:	2b02      	cmp	r3, #2
 801278e:	d106      	bne.n	801279e <_fx_utility_logical_sector_write+0x2a>
    {

        /* Increment the number of FAT sector writes.  */
        media_ptr -> fx_media_fat_sector_writes++;
 8012790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012792:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8012796:	1c5a      	adds	r2, r3, #1
 8012798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801279a:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    }

    /* Increment the number of logical sectors written.  */
    media_ptr -> fx_media_logical_sector_writes++;
 801279e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127a0:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80127a4:	1c5a      	adds	r2, r3, #1
 80127a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127a8:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_WRITE_EXTENSION

#ifndef FX_DISABLE_CACHE
    /* Determine if the request is from the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 80127ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ae:	689a      	ldr	r2, [r3, #8]
 80127b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80127b2:	4293      	cmp	r3, r2
 80127b4:	f0c0 80d8 	bcc.w	8012968 <_fx_utility_logical_sector_write+0x1f4>
        (((UCHAR *)buffer_ptr) <= media_ptr -> fx_media_sector_cache_end))
 80127b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ba:	699a      	ldr	r2, [r3, #24]
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 80127bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80127be:	4293      	cmp	r3, r2
 80127c0:	f200 80d2 	bhi.w	8012968 <_fx_utility_logical_sector_write+0x1f4>
    {

        /* Internal cache buffer is requested.  */

        /* Determine if the logical sector cache access should use the hash function.  */
        if (media_ptr -> fx_media_sector_cache_hashed)
 80127c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127c6:	691b      	ldr	r3, [r3, #16]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d030      	beq.n	801282e <_fx_utility_logical_sector_write+0xba>
        {

            /* Calculate the area of the cache for this logical sector.  */
            index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask) * FX_SECTOR_CACHE_DEPTH;
 80127cc:	6a3a      	ldr	r2, [r7, #32]
 80127ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80127d4:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 80127d8:	4013      	ands	r3, r2
 80127da:	009b      	lsls	r3, r3, #2
 80127dc:	637b      	str	r3, [r7, #52]	; 0x34

            /* Build a pointer to the cache entry.  */
            cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 80127de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80127e0:	4613      	mov	r3, r2
 80127e2:	005b      	lsls	r3, r3, #1
 80127e4:	4413      	add	r3, r2
 80127e6:	00db      	lsls	r3, r3, #3
 80127e8:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 80127ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80127ee:	4413      	add	r3, r2
 80127f0:	647b      	str	r3, [r7, #68]	; 0x44

            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 80127f2:	2300      	movs	r3, #0
 80127f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80127f6:	e016      	b.n	8012826 <_fx_utility_logical_sector_write+0xb2>
            {


                /* Determine if the logical sector is in the cache - assuming the depth of the
                   sector cache is 4 entries.  */
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 80127f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80127fa:	7c5b      	ldrb	r3, [r3, #17]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d00c      	beq.n	801281a <_fx_utility_logical_sector_write+0xa6>
 8012800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012802:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8012806:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801280a:	4299      	cmp	r1, r3
 801280c:	bf08      	it	eq
 801280e:	4290      	cmpeq	r0, r2
 8012810:	d103      	bne.n	801281a <_fx_utility_logical_sector_write+0xa6>
                {
                    cache_found = FX_TRUE;
 8012812:	2301      	movs	r3, #1
 8012814:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    break;
 8012818:	e02d      	b.n	8012876 <_fx_utility_logical_sector_write+0x102>
            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 801281a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801281c:	3301      	adds	r3, #1
 801281e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012820:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012822:	3318      	adds	r3, #24
 8012824:	647b      	str	r3, [r7, #68]	; 0x44
 8012826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012828:	2b03      	cmp	r3, #3
 801282a:	d9e5      	bls.n	80127f8 <_fx_utility_logical_sector_write+0x84>
 801282c:	e023      	b.n	8012876 <_fx_utility_logical_sector_write+0x102>
        }
        else
        {

            /* Search for an entry in the cache that matches this request.  */
            cache_size =            media_ptr -> fx_media_sector_cache_size;
 801282e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012830:	695b      	ldr	r3, [r3, #20]
 8012832:	643b      	str	r3, [r7, #64]	; 0x40
            cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 8012834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012836:	69db      	ldr	r3, [r3, #28]
 8012838:	647b      	str	r3, [r7, #68]	; 0x44

            /* Look at the cache entries until a match is found or the end of
               the cache is reached.  */
            while (cache_size--)
 801283a:	e017      	b.n	801286c <_fx_utility_logical_sector_write+0xf8>
            {

                /* Determine if the requested sector has been found.  */
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 801283c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801283e:	7c5b      	ldrb	r3, [r3, #17]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d00c      	beq.n	801285e <_fx_utility_logical_sector_write+0xea>
 8012844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012846:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801284a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801284e:	4299      	cmp	r1, r3
 8012850:	bf08      	it	eq
 8012852:	4290      	cmpeq	r0, r2
 8012854:	d103      	bne.n	801285e <_fx_utility_logical_sector_write+0xea>
                {
                    cache_found = FX_TRUE;
 8012856:	2301      	movs	r3, #1
 8012858:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    break;
 801285c:	e00b      	b.n	8012876 <_fx_utility_logical_sector_write+0x102>
                }

                /* Otherwise, we have not found the cached entry yet.  */

                /* If there are more entries, move to the next one.  */
                if (cache_entry -> fx_cached_sector_next_used)
 801285e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012860:	695b      	ldr	r3, [r3, #20]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d002      	beq.n	801286c <_fx_utility_logical_sector_write+0xf8>
                {

                    /* Move to the next cache entry.  */
                    cache_entry =  cache_entry -> fx_cached_sector_next_used;
 8012866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012868:	695b      	ldr	r3, [r3, #20]
 801286a:	647b      	str	r3, [r7, #68]	; 0x44
            while (cache_size--)
 801286c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801286e:	1e5a      	subs	r2, r3, #1
 8012870:	643a      	str	r2, [r7, #64]	; 0x40
 8012872:	2b00      	cmp	r3, #0
 8012874:	d1e2      	bne.n	801283c <_fx_utility_logical_sector_write+0xc8>
                }
            }
        }
#endif /* FX_ENABLE_FAULT_TOLERANT */

        if (cache_found)
 8012876:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801287a:	2b00      	cmp	r3, #0
 801287c:	d00d      	beq.n	801289a <_fx_utility_logical_sector_write+0x126>
                return(media_ptr -> fx_media_driver_status);
            }
#endif

            /* Determine if this is the first write of this logical sector.  */
            if (cache_entry -> fx_cached_sector_buffer_dirty == FX_FALSE)
 801287e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012880:	7c1b      	ldrb	r3, [r3, #16]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d107      	bne.n	8012896 <_fx_utility_logical_sector_write+0x122>
            {

                /* Yes, increment the number of outstanding dirty sectors.  */
                media_ptr -> fx_media_sector_cache_dirty_count++;
 8012886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801288a:	1c5a      	adds	r2, r3, #1
 801288c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801288e:	625a      	str	r2, [r3, #36]	; 0x24

                /* Simply mark this entry as dirty.  */
                cache_entry -> fx_cached_sector_buffer_dirty =  FX_TRUE;
 8012890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012892:	2201      	movs	r2, #1
 8012894:	741a      	strb	r2, [r3, #16]

            /* Don't bother updating the cache linked list since writes are
               preceded by reads anyway.  */

            /* Success, return to caller immediately!  */
            return(FX_SUCCESS);
 8012896:	2300      	movs	r3, #0
 8012898:	e0cf      	b.n	8012a3a <_fx_utility_logical_sector_write+0x2c6>

        /* Okay, so if we are here the request must be for the additional FAT writes, since this is the
           only time a write request is made without a preceding read request.  */

        /* Is the logical sector valid?  */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 801289a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801289e:	4313      	orrs	r3, r2
 80128a0:	d004      	beq.n	80128ac <_fx_utility_logical_sector_write+0x138>
 80128a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80128a6:	1c51      	adds	r1, r2, #1
 80128a8:	430b      	orrs	r3, r1
 80128aa:	d101      	bne.n	80128b0 <_fx_utility_logical_sector_write+0x13c>
        {
            return(FX_SECTOR_INVALID);
 80128ac:	2389      	movs	r3, #137	; 0x89
 80128ae:	e0c4      	b.n	8012a3a <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= media_ptr -> fx_media_total_sectors)
 80128b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80128b2:	2200      	movs	r2, #0
 80128b4:	61bb      	str	r3, [r7, #24]
 80128b6:	61fa      	str	r2, [r7, #28]
 80128b8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80128bc:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80128c0:	4621      	mov	r1, r4
 80128c2:	1889      	adds	r1, r1, r2
 80128c4:	6139      	str	r1, [r7, #16]
 80128c6:	4629      	mov	r1, r5
 80128c8:	eb43 0101 	adc.w	r1, r3, r1
 80128cc:	6179      	str	r1, [r7, #20]
 80128ce:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80128d2:	460b      	mov	r3, r1
 80128d4:	f113 3aff 	adds.w	sl, r3, #4294967295
 80128d8:	4613      	mov	r3, r2
 80128da:	f143 3bff 	adc.w	fp, r3, #4294967295
 80128de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128e0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80128e4:	4592      	cmp	sl, r2
 80128e6:	eb7b 0303 	sbcs.w	r3, fp, r3
 80128ea:	d301      	bcc.n	80128f0 <_fx_utility_logical_sector_write+0x17c>
        {
            return(FX_SECTOR_INVALID);
 80128ec:	2389      	movs	r3, #137	; 0x89
 80128ee:	e0a4      	b.n	8012a3a <_fx_utility_logical_sector_write+0x2c6>
        /* Just write the buffer to the media.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 80128f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128f2:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80128f6:	1c5a      	adds	r2, r3, #1
 80128f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128fa:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

        /* Build write request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 80128fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012900:	2201      	movs	r2, #1
 8012902:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 8012906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012908:	2290      	movs	r2, #144	; 0x90
 801290a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 801290e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012910:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012912:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 8012916:	6a3a      	ldr	r2, [r7, #32]
 8012918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801291a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 801291e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012920:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012922:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8012926:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 801292a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801292c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 8012930:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8012934:	2b04      	cmp	r3, #4
 8012936:	d003      	beq.n	8012940 <_fx_utility_logical_sector_write+0x1cc>
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8012938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801293a:	2201      	movs	r2, #1
 801293c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8012940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012942:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8012946:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012948:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 801294a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801294c:	2200      	movs	r2, #0
 801294e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Check for successful completion.  */
        if (media_ptr -> fx_media_driver_status)
 8012952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012958:	2b00      	cmp	r3, #0
 801295a:	d003      	beq.n	8012964 <_fx_utility_logical_sector_write+0x1f0>
        {

            /* Error writing a internal sector out.  Return the
               error status.  */
            return(media_ptr -> fx_media_driver_status);
 801295c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801295e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012962:	e06a      	b.n	8012a3a <_fx_utility_logical_sector_write+0x2c6>
        }

        /* At this point, we have a successful write.  */
        return(FX_SUCCESS);
 8012964:	2300      	movs	r3, #0
 8012966:	e068      	b.n	8012a3a <_fx_utility_logical_sector_write+0x2c6>

        /* Otherwise, the write request is being made directly from an application
           buffer. Determine if the logical sector is valid.  */

        /* Is the logical sector valid? */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 8012968:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801296c:	4313      	orrs	r3, r2
 801296e:	d004      	beq.n	801297a <_fx_utility_logical_sector_write+0x206>
 8012970:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012974:	1c51      	adds	r1, r2, #1
 8012976:	430b      	orrs	r3, r1
 8012978:	d101      	bne.n	801297e <_fx_utility_logical_sector_write+0x20a>
        {
            return(FX_SECTOR_INVALID);
 801297a:	2389      	movs	r3, #137	; 0x89
 801297c:	e05d      	b.n	8012a3a <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= media_ptr -> fx_media_total_sectors)
 801297e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012980:	2200      	movs	r2, #0
 8012982:	60bb      	str	r3, [r7, #8]
 8012984:	60fa      	str	r2, [r7, #12]
 8012986:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801298a:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 801298e:	4651      	mov	r1, sl
 8012990:	eb11 0802 	adds.w	r8, r1, r2
 8012994:	4659      	mov	r1, fp
 8012996:	eb41 0903 	adc.w	r9, r1, r3
 801299a:	f118 34ff 	adds.w	r4, r8, #4294967295
 801299e:	f149 35ff 	adc.w	r5, r9, #4294967295
 80129a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129a4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80129a8:	4294      	cmp	r4, r2
 80129aa:	eb75 0303 	sbcs.w	r3, r5, r3
 80129ae:	d301      	bcc.n	80129b4 <_fx_utility_logical_sector_write+0x240>
        {
            return(FX_SECTOR_INVALID);
 80129b0:	2389      	movs	r3, #137	; 0x89
 80129b2:	e042      	b.n	8012a3a <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Flush and invalidate for any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 80129b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80129b6:	2200      	movs	r2, #0
 80129b8:	603b      	str	r3, [r7, #0]
 80129ba:	607a      	str	r2, [r7, #4]
 80129bc:	2301      	movs	r3, #1
 80129be:	9302      	str	r3, [sp, #8]
 80129c0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80129c4:	e9cd 3400 	strd	r3, r4, [sp]
 80129c8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80129cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80129ce:	f7ff fa27 	bl	8011e20 <_fx_utility_logical_sector_flush>
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 80129d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129d4:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80129d8:	1c5a      	adds	r2, r3, #1
 80129da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129dc:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

        /* Build request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 80129e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129e2:	2201      	movs	r2, #1
 80129e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 80129e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ea:	2290      	movs	r2, #144	; 0x90
 80129ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 80129f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80129f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 80129f8:	6a3a      	ldr	r2, [r7, #32]
 80129fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 8012a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012a04:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 8012a08:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 8012a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a0e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 8012a12:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8012a16:	2b04      	cmp	r3, #4
 8012a18:	d003      	beq.n	8012a22 <_fx_utility_logical_sector_write+0x2ae>
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 8012a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a1c:	2201      	movs	r2, #1
 8012a1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 8012a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a24:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8012a28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a2a:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 8012a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a2e:	2200      	movs	r2, #0
 8012a30:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Return driver status.  */
        return(media_ptr -> fx_media_driver_status);
 8012a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
}
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	3748      	adds	r7, #72	; 0x48
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08012a44 <_fx_utility_memory_copy>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_memory_copy(UCHAR *source_ptr, UCHAR *dest_ptr, ULONG size)
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b084      	sub	sp, #16
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	60f8      	str	r0, [r7, #12]
 8012a4c:	60b9      	str	r1, [r7, #8]
 8012a4e:	607a      	str	r2, [r7, #4]

    /* Copy the memory.  */
    memcpy(dest_ptr, source_ptr, size); /* Use case of memcpy is verified. */
 8012a50:	687a      	ldr	r2, [r7, #4]
 8012a52:	68f9      	ldr	r1, [r7, #12]
 8012a54:	68b8      	ldr	r0, [r7, #8]
 8012a56:	f004 f9cf 	bl	8016df8 <memcpy>
}
 8012a5a:	bf00      	nop
 8012a5c:	3710      	adds	r7, #16
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	bd80      	pop	{r7, pc}
	...

08012a64 <_fxe_file_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_close(FX_FILE *file_ptr)
{
 8012a64:	b580      	push	{r7, lr}
 8012a66:	b084      	sub	sp, #16
 8012a68:	af00      	add	r7, sp, #0
 8012a6a:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d101      	bne.n	8012a76 <_fxe_file_close+0x12>
    {
        return(FX_PTR_ERROR);
 8012a72:	2318      	movs	r3, #24
 8012a74:	e018      	b.n	8012aa8 <_fxe_file_close+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012a76:	f3ef 8305 	mrs	r3, IPSR
 8012a7a:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8012a7c:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8012a7e:	4b0c      	ldr	r3, [pc, #48]	; (8012ab0 <_fxe_file_close+0x4c>)
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	4313      	orrs	r3, r2
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d108      	bne.n	8012a9a <_fxe_file_close+0x36>
 8012a88:	4b0a      	ldr	r3, [pc, #40]	; (8012ab4 <_fxe_file_close+0x50>)
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d004      	beq.n	8012a9a <_fxe_file_close+0x36>
 8012a90:	4b08      	ldr	r3, [pc, #32]	; (8012ab4 <_fxe_file_close+0x50>)
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	4a08      	ldr	r2, [pc, #32]	; (8012ab8 <_fxe_file_close+0x54>)
 8012a96:	4293      	cmp	r3, r2
 8012a98:	d101      	bne.n	8012a9e <_fxe_file_close+0x3a>
 8012a9a:	2320      	movs	r3, #32
 8012a9c:	e004      	b.n	8012aa8 <_fxe_file_close+0x44>

    /* Call actual file close service.  */
    status =  _fx_file_close(file_ptr);
 8012a9e:	6878      	ldr	r0, [r7, #4]
 8012aa0:	f7f9 fe82 	bl	800c7a8 <_fx_file_close>
 8012aa4:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 8012aa6:	68fb      	ldr	r3, [r7, #12]
}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3710      	adds	r7, #16
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}
 8012ab0:	2400006c 	.word	0x2400006c
 8012ab4:	24014f1c 	.word	0x24014f1c
 8012ab8:	24015064 	.word	0x24015064

08012abc <_fxe_file_create>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_create(FX_MEDIA *media_ptr, CHAR *file_name)
{
 8012abc:	b580      	push	{r7, lr}
 8012abe:	b084      	sub	sp, #16
 8012ac0:	af00      	add	r7, sp, #0
 8012ac2:	6078      	str	r0, [r7, #4]
 8012ac4:	6039      	str	r1, [r7, #0]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d101      	bne.n	8012ad0 <_fxe_file_create+0x14>
    {
        return(FX_PTR_ERROR);
 8012acc:	2318      	movs	r3, #24
 8012ace:	e019      	b.n	8012b04 <_fxe_file_create+0x48>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012ad0:	f3ef 8305 	mrs	r3, IPSR
 8012ad4:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8012ad6:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8012ad8:	4b0c      	ldr	r3, [pc, #48]	; (8012b0c <_fxe_file_create+0x50>)
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	4313      	orrs	r3, r2
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d108      	bne.n	8012af4 <_fxe_file_create+0x38>
 8012ae2:	4b0b      	ldr	r3, [pc, #44]	; (8012b10 <_fxe_file_create+0x54>)
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d004      	beq.n	8012af4 <_fxe_file_create+0x38>
 8012aea:	4b09      	ldr	r3, [pc, #36]	; (8012b10 <_fxe_file_create+0x54>)
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	4a09      	ldr	r2, [pc, #36]	; (8012b14 <_fxe_file_create+0x58>)
 8012af0:	4293      	cmp	r3, r2
 8012af2:	d101      	bne.n	8012af8 <_fxe_file_create+0x3c>
 8012af4:	2320      	movs	r3, #32
 8012af6:	e005      	b.n	8012b04 <_fxe_file_create+0x48>

    /* Call actual file create service.  */
    status =  _fx_file_create(media_ptr, file_name);
 8012af8:	6839      	ldr	r1, [r7, #0]
 8012afa:	6878      	ldr	r0, [r7, #4]
 8012afc:	f7f9 fef8 	bl	800c8f0 <_fx_file_create>
 8012b00:	60f8      	str	r0, [r7, #12]

    /* File create is complete, return status.  */
    return(status);
 8012b02:	68fb      	ldr	r3, [r7, #12]
}
 8012b04:	4618      	mov	r0, r3
 8012b06:	3710      	adds	r7, #16
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	bd80      	pop	{r7, pc}
 8012b0c:	2400006c 	.word	0x2400006c
 8012b10:	24014f1c 	.word	0x24014f1c
 8012b14:	24015064 	.word	0x24015064

08012b18 <_fxe_file_open>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_open(FX_MEDIA *media_ptr, FX_FILE *file_ptr, CHAR *file_name, UINT open_type, UINT file_control_block_size)
{
 8012b18:	b580      	push	{r7, lr}
 8012b1a:	b088      	sub	sp, #32
 8012b1c:	af00      	add	r7, sp, #0
 8012b1e:	60f8      	str	r0, [r7, #12]
 8012b20:	60b9      	str	r1, [r7, #8]
 8012b22:	607a      	str	r2, [r7, #4]
 8012b24:	603b      	str	r3, [r7, #0]
FX_FILE *current_file;
ULONG    open_count;


    /* Check for a null media or file pointer.  */
    if ((media_ptr == FX_NULL) || (media_ptr -> fx_media_id != FX_MEDIA_ID) || (file_ptr == FX_NULL) || (file_control_block_size != sizeof(FX_FILE)))
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d00b      	beq.n	8012b44 <_fxe_file_open+0x2c>
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	4a36      	ldr	r2, [pc, #216]	; (8012c0c <_fxe_file_open+0xf4>)
 8012b32:	4293      	cmp	r3, r2
 8012b34:	d106      	bne.n	8012b44 <_fxe_file_open+0x2c>
 8012b36:	68bb      	ldr	r3, [r7, #8]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d003      	beq.n	8012b44 <_fxe_file_open+0x2c>
 8012b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b3e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8012b42:	d001      	beq.n	8012b48 <_fxe_file_open+0x30>
    {
        return(FX_PTR_ERROR);
 8012b44:	2318      	movs	r3, #24
 8012b46:	e05d      	b.n	8012c04 <_fxe_file_open+0xec>
    }

    /* Check for an invalid open type.  */
    if ((open_type != FX_OPEN_FOR_READ) && (open_type != FX_OPEN_FOR_READ_FAST) && (open_type != FX_OPEN_FOR_WRITE))
 8012b48:	683b      	ldr	r3, [r7, #0]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d007      	beq.n	8012b5e <_fxe_file_open+0x46>
 8012b4e:	683b      	ldr	r3, [r7, #0]
 8012b50:	2b02      	cmp	r3, #2
 8012b52:	d004      	beq.n	8012b5e <_fxe_file_open+0x46>
 8012b54:	683b      	ldr	r3, [r7, #0]
 8012b56:	2b01      	cmp	r3, #1
 8012b58:	d001      	beq.n	8012b5e <_fxe_file_open+0x46>
    {
        return(FX_ACCESS_ERROR);
 8012b5a:	2306      	movs	r3, #6
 8012b5c:	e052      	b.n	8012c04 <_fxe_file_open+0xec>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012b5e:	f3ef 8305 	mrs	r3, IPSR
 8012b62:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8012b64:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8012b66:	4b2a      	ldr	r3, [pc, #168]	; (8012c10 <_fxe_file_open+0xf8>)
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	4313      	orrs	r3, r2
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d108      	bne.n	8012b82 <_fxe_file_open+0x6a>
 8012b70:	4b28      	ldr	r3, [pc, #160]	; (8012c14 <_fxe_file_open+0xfc>)
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d004      	beq.n	8012b82 <_fxe_file_open+0x6a>
 8012b78:	4b26      	ldr	r3, [pc, #152]	; (8012c14 <_fxe_file_open+0xfc>)
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	4a26      	ldr	r2, [pc, #152]	; (8012c18 <_fxe_file_open+0x100>)
 8012b7e:	4293      	cmp	r3, r2
 8012b80:	d101      	bne.n	8012b86 <_fxe_file_open+0x6e>
 8012b82:	2320      	movs	r3, #32
 8012b84:	e03e      	b.n	8012c04 <_fxe_file_open+0xec>

    /* Get protection.  */
    FX_PROTECT
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	4a20      	ldr	r2, [pc, #128]	; (8012c0c <_fxe_file_open+0xf4>)
 8012b8c:	4293      	cmp	r3, r2
 8012b8e:	d001      	beq.n	8012b94 <_fxe_file_open+0x7c>
 8012b90:	2311      	movs	r3, #17
 8012b92:	e037      	b.n	8012c04 <_fxe_file_open+0xec>
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8012b9a:	f04f 31ff 	mov.w	r1, #4294967295
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	f001 f988 	bl	8013eb4 <_tx_mutex_get>
 8012ba4:	4603      	mov	r3, r0
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d001      	beq.n	8012bae <_fxe_file_open+0x96>
 8012baa:	2311      	movs	r3, #17
 8012bac:	e02a      	b.n	8012c04 <_fxe_file_open+0xec>

    /* Check for a duplicate file open.  */

    /* Loop to search the list for the same file handle.  */
    current_file =  media_ptr -> fx_media_opened_file_list;
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8012bb4:	61fb      	str	r3, [r7, #28]
    open_count =    media_ptr -> fx_media_opened_file_count;
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8012bbc:	61bb      	str	r3, [r7, #24]

    while (open_count--)
 8012bbe:	e00e      	b.n	8012bde <_fxe_file_open+0xc6>
    {

        /* See if a match exists.  */
        if (file_ptr == current_file)
 8012bc0:	68ba      	ldr	r2, [r7, #8]
 8012bc2:	69fb      	ldr	r3, [r7, #28]
 8012bc4:	429a      	cmp	r2, r3
 8012bc6:	d107      	bne.n	8012bd8 <_fxe_file_open+0xc0>
        {

            /* Release protection.  */
            FX_UNPROTECT
 8012bc8:	68fb      	ldr	r3, [r7, #12]
 8012bca:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f001 fbe8 	bl	80143a4 <_tx_mutex_put>

            /* Return error.  */
            return(FX_PTR_ERROR);
 8012bd4:	2318      	movs	r3, #24
 8012bd6:	e015      	b.n	8012c04 <_fxe_file_open+0xec>
        }

        /* Move to the next opened file.  */
        current_file =  current_file -> fx_file_opened_next;
 8012bd8:	69fb      	ldr	r3, [r7, #28]
 8012bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012bdc:	61fb      	str	r3, [r7, #28]
    while (open_count--)
 8012bde:	69bb      	ldr	r3, [r7, #24]
 8012be0:	1e5a      	subs	r2, r3, #1
 8012be2:	61ba      	str	r2, [r7, #24]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d1eb      	bne.n	8012bc0 <_fxe_file_open+0xa8>
    }

    /* Release protection.  */
    FX_UNPROTECT
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8012bee:	4618      	mov	r0, r3
 8012bf0:	f001 fbd8 	bl	80143a4 <_tx_mutex_put>

    /* Call actual file open service.  */
    status =  _fx_file_open(media_ptr, file_ptr, file_name, open_type);
 8012bf4:	683b      	ldr	r3, [r7, #0]
 8012bf6:	687a      	ldr	r2, [r7, #4]
 8012bf8:	68b9      	ldr	r1, [r7, #8]
 8012bfa:	68f8      	ldr	r0, [r7, #12]
 8012bfc:	f7fa fab6 	bl	800d16c <_fx_file_open>
 8012c00:	6178      	str	r0, [r7, #20]

    /* Open is complete, return status.  */
    return(status);
 8012c02:	697b      	ldr	r3, [r7, #20]
}
 8012c04:	4618      	mov	r0, r3
 8012c06:	3720      	adds	r7, #32
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	bd80      	pop	{r7, pc}
 8012c0c:	4d454449 	.word	0x4d454449
 8012c10:	2400006c 	.word	0x2400006c
 8012c14:	24014f1c 	.word	0x24014f1c
 8012c18:	24015064 	.word	0x24015064

08012c1c <_fxe_file_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_read(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG request_size, ULONG *actual_size)
{
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	b086      	sub	sp, #24
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	60f8      	str	r0, [r7, #12]
 8012c24:	60b9      	str	r1, [r7, #8]
 8012c26:	607a      	str	r2, [r7, #4]
 8012c28:	603b      	str	r3, [r7, #0]

UINT status;


    /* Check for a null file or buffer pointer.  */
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL) || (actual_size == FX_NULL))
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d005      	beq.n	8012c3c <_fxe_file_read+0x20>
 8012c30:	68bb      	ldr	r3, [r7, #8]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d002      	beq.n	8012c3c <_fxe_file_read+0x20>
 8012c36:	683b      	ldr	r3, [r7, #0]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d101      	bne.n	8012c40 <_fxe_file_read+0x24>
    {
        return(FX_PTR_ERROR);
 8012c3c:	2318      	movs	r3, #24
 8012c3e:	e01b      	b.n	8012c78 <_fxe_file_read+0x5c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012c40:	f3ef 8305 	mrs	r3, IPSR
 8012c44:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8012c46:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8012c48:	4b0d      	ldr	r3, [pc, #52]	; (8012c80 <_fxe_file_read+0x64>)
 8012c4a:	681b      	ldr	r3, [r3, #0]
 8012c4c:	4313      	orrs	r3, r2
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d108      	bne.n	8012c64 <_fxe_file_read+0x48>
 8012c52:	4b0c      	ldr	r3, [pc, #48]	; (8012c84 <_fxe_file_read+0x68>)
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d004      	beq.n	8012c64 <_fxe_file_read+0x48>
 8012c5a:	4b0a      	ldr	r3, [pc, #40]	; (8012c84 <_fxe_file_read+0x68>)
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	4a0a      	ldr	r2, [pc, #40]	; (8012c88 <_fxe_file_read+0x6c>)
 8012c60:	4293      	cmp	r3, r2
 8012c62:	d101      	bne.n	8012c68 <_fxe_file_read+0x4c>
 8012c64:	2320      	movs	r3, #32
 8012c66:	e007      	b.n	8012c78 <_fxe_file_read+0x5c>

    /* Call actual file read service.  */
    status =  _fx_file_read(file_ptr, buffer_ptr, request_size, actual_size);
 8012c68:	683b      	ldr	r3, [r7, #0]
 8012c6a:	687a      	ldr	r2, [r7, #4]
 8012c6c:	68b9      	ldr	r1, [r7, #8]
 8012c6e:	68f8      	ldr	r0, [r7, #12]
 8012c70:	f7fa ff5e 	bl	800db30 <_fx_file_read>
 8012c74:	6178      	str	r0, [r7, #20]

    /* Return status to the caller.  */
    return(status);
 8012c76:	697b      	ldr	r3, [r7, #20]
}
 8012c78:	4618      	mov	r0, r3
 8012c7a:	3718      	adds	r7, #24
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	bd80      	pop	{r7, pc}
 8012c80:	2400006c 	.word	0x2400006c
 8012c84:	24014f1c 	.word	0x24014f1c
 8012c88:	24015064 	.word	0x24015064

08012c8c <_fxe_file_seek>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_seek(FX_FILE *file_ptr, ULONG byte_offset)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b084      	sub	sp, #16
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
 8012c94:	6039      	str	r1, [r7, #0]

UINT status;


    /* Check for a null file pointer.  */
    if (file_ptr == FX_NULL)
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d101      	bne.n	8012ca0 <_fxe_file_seek+0x14>
    {
        return(FX_PTR_ERROR);
 8012c9c:	2318      	movs	r3, #24
 8012c9e:	e019      	b.n	8012cd4 <_fxe_file_seek+0x48>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012ca0:	f3ef 8305 	mrs	r3, IPSR
 8012ca4:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8012ca6:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8012ca8:	4b0c      	ldr	r3, [pc, #48]	; (8012cdc <_fxe_file_seek+0x50>)
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	4313      	orrs	r3, r2
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d108      	bne.n	8012cc4 <_fxe_file_seek+0x38>
 8012cb2:	4b0b      	ldr	r3, [pc, #44]	; (8012ce0 <_fxe_file_seek+0x54>)
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d004      	beq.n	8012cc4 <_fxe_file_seek+0x38>
 8012cba:	4b09      	ldr	r3, [pc, #36]	; (8012ce0 <_fxe_file_seek+0x54>)
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	4a09      	ldr	r2, [pc, #36]	; (8012ce4 <_fxe_file_seek+0x58>)
 8012cc0:	4293      	cmp	r3, r2
 8012cc2:	d101      	bne.n	8012cc8 <_fxe_file_seek+0x3c>
 8012cc4:	2320      	movs	r3, #32
 8012cc6:	e005      	b.n	8012cd4 <_fxe_file_seek+0x48>

    /* Call actual file seek service.  */
    status =  _fx_file_seek(file_ptr, byte_offset);
 8012cc8:	6839      	ldr	r1, [r7, #0]
 8012cca:	6878      	ldr	r0, [r7, #4]
 8012ccc:	f7fb f9d4 	bl	800e078 <_fx_file_seek>
 8012cd0:	60f8      	str	r0, [r7, #12]

    /* Seek is complete, return status.  */
    return(status);
 8012cd2:	68fb      	ldr	r3, [r7, #12]
}
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	3710      	adds	r7, #16
 8012cd8:	46bd      	mov	sp, r7
 8012cda:	bd80      	pop	{r7, pc}
 8012cdc:	2400006c 	.word	0x2400006c
 8012ce0:	24014f1c 	.word	0x24014f1c
 8012ce4:	24015064 	.word	0x24015064

08012ce8 <_fxe_file_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_file_write(FX_FILE *file_ptr, VOID *buffer_ptr, ULONG size)
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b086      	sub	sp, #24
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	60f8      	str	r0, [r7, #12]
 8012cf0:	60b9      	str	r1, [r7, #8]
 8012cf2:	607a      	str	r2, [r7, #4]

UINT status;


    /* Check for a null file or buffer pointer.  */
    if ((file_ptr == FX_NULL) || (buffer_ptr == FX_NULL))
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d002      	beq.n	8012d00 <_fxe_file_write+0x18>
 8012cfa:	68bb      	ldr	r3, [r7, #8]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d101      	bne.n	8012d04 <_fxe_file_write+0x1c>
    {
        return(FX_PTR_ERROR);
 8012d00:	2318      	movs	r3, #24
 8012d02:	e01a      	b.n	8012d3a <_fxe_file_write+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012d04:	f3ef 8305 	mrs	r3, IPSR
 8012d08:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8012d0a:	693a      	ldr	r2, [r7, #16]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8012d0c:	4b0d      	ldr	r3, [pc, #52]	; (8012d44 <_fxe_file_write+0x5c>)
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	4313      	orrs	r3, r2
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d108      	bne.n	8012d28 <_fxe_file_write+0x40>
 8012d16:	4b0c      	ldr	r3, [pc, #48]	; (8012d48 <_fxe_file_write+0x60>)
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d004      	beq.n	8012d28 <_fxe_file_write+0x40>
 8012d1e:	4b0a      	ldr	r3, [pc, #40]	; (8012d48 <_fxe_file_write+0x60>)
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	4a0a      	ldr	r2, [pc, #40]	; (8012d4c <_fxe_file_write+0x64>)
 8012d24:	4293      	cmp	r3, r2
 8012d26:	d101      	bne.n	8012d2c <_fxe_file_write+0x44>
 8012d28:	2320      	movs	r3, #32
 8012d2a:	e006      	b.n	8012d3a <_fxe_file_write+0x52>

    /* Call actual file write service.  */
    status =  _fx_file_write(file_ptr, buffer_ptr, size);
 8012d2c:	687a      	ldr	r2, [r7, #4]
 8012d2e:	68b9      	ldr	r1, [r7, #8]
 8012d30:	68f8      	ldr	r0, [r7, #12]
 8012d32:	f7fb f9b3 	bl	800e09c <_fx_file_write>
 8012d36:	6178      	str	r0, [r7, #20]

    /* Return status to the caller.  */
    return(status);
 8012d38:	697b      	ldr	r3, [r7, #20]
}
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	3718      	adds	r7, #24
 8012d3e:	46bd      	mov	sp, r7
 8012d40:	bd80      	pop	{r7, pc}
 8012d42:	bf00      	nop
 8012d44:	2400006c 	.word	0x2400006c
 8012d48:	24014f1c 	.word	0x24014f1c
 8012d4c:	24015064 	.word	0x24015064

08012d50 <_fxe_media_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_close(FX_MEDIA  *media_ptr)
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b084      	sub	sp, #16
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d101      	bne.n	8012d62 <_fxe_media_close+0x12>
    {
        return(FX_PTR_ERROR);
 8012d5e:	2318      	movs	r3, #24
 8012d60:	e018      	b.n	8012d94 <_fxe_media_close+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012d62:	f3ef 8305 	mrs	r3, IPSR
 8012d66:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8012d68:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8012d6a:	4b0c      	ldr	r3, [pc, #48]	; (8012d9c <_fxe_media_close+0x4c>)
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	4313      	orrs	r3, r2
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d108      	bne.n	8012d86 <_fxe_media_close+0x36>
 8012d74:	4b0a      	ldr	r3, [pc, #40]	; (8012da0 <_fxe_media_close+0x50>)
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d004      	beq.n	8012d86 <_fxe_media_close+0x36>
 8012d7c:	4b08      	ldr	r3, [pc, #32]	; (8012da0 <_fxe_media_close+0x50>)
 8012d7e:	681b      	ldr	r3, [r3, #0]
 8012d80:	4a08      	ldr	r2, [pc, #32]	; (8012da4 <_fxe_media_close+0x54>)
 8012d82:	4293      	cmp	r3, r2
 8012d84:	d101      	bne.n	8012d8a <_fxe_media_close+0x3a>
 8012d86:	2320      	movs	r3, #32
 8012d88:	e004      	b.n	8012d94 <_fxe_media_close+0x44>

    /* Call actual media close service.  */
    status =  _fx_media_close(media_ptr);
 8012d8a:	6878      	ldr	r0, [r7, #4]
 8012d8c:	f7fc fa06 	bl	800f19c <_fx_media_close>
 8012d90:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 8012d92:	68fb      	ldr	r3, [r7, #12]
}
 8012d94:	4618      	mov	r0, r3
 8012d96:	3710      	adds	r7, #16
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	bd80      	pop	{r7, pc}
 8012d9c:	2400006c 	.word	0x2400006c
 8012da0:	24014f1c 	.word	0x24014f1c
 8012da4:	24015064 	.word	0x24015064

08012da8 <_fxe_media_flush>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_flush(FX_MEDIA  *media_ptr)
{
 8012da8:	b580      	push	{r7, lr}
 8012daa:	b084      	sub	sp, #16
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d101      	bne.n	8012dba <_fxe_media_flush+0x12>
    {
        return(FX_PTR_ERROR);
 8012db6:	2318      	movs	r3, #24
 8012db8:	e018      	b.n	8012dec <_fxe_media_flush+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012dba:	f3ef 8305 	mrs	r3, IPSR
 8012dbe:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 8012dc0:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8012dc2:	4b0c      	ldr	r3, [pc, #48]	; (8012df4 <_fxe_media_flush+0x4c>)
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	4313      	orrs	r3, r2
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d108      	bne.n	8012dde <_fxe_media_flush+0x36>
 8012dcc:	4b0a      	ldr	r3, [pc, #40]	; (8012df8 <_fxe_media_flush+0x50>)
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d004      	beq.n	8012dde <_fxe_media_flush+0x36>
 8012dd4:	4b08      	ldr	r3, [pc, #32]	; (8012df8 <_fxe_media_flush+0x50>)
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	4a08      	ldr	r2, [pc, #32]	; (8012dfc <_fxe_media_flush+0x54>)
 8012dda:	4293      	cmp	r3, r2
 8012ddc:	d101      	bne.n	8012de2 <_fxe_media_flush+0x3a>
 8012dde:	2320      	movs	r3, #32
 8012de0:	e004      	b.n	8012dec <_fxe_media_flush+0x44>

    /* Call actual media flush service.  */
    status =  _fx_media_flush(media_ptr);
 8012de2:	6878      	ldr	r0, [r7, #4]
 8012de4:	f7fc fbb2 	bl	800f54c <_fx_media_flush>
 8012de8:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 8012dea:	68fb      	ldr	r3, [r7, #12]
}
 8012dec:	4618      	mov	r0, r3
 8012dee:	3710      	adds	r7, #16
 8012df0:	46bd      	mov	sp, r7
 8012df2:	bd80      	pop	{r7, pc}
 8012df4:	2400006c 	.word	0x2400006c
 8012df8:	24014f1c 	.word	0x24014f1c
 8012dfc:	24015064 	.word	0x24015064

08012e00 <_fxe_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                      VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                      VOID *memory_ptr, ULONG memory_size, UINT media_control_block_size)
{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b08e      	sub	sp, #56	; 0x38
 8012e04:	af02      	add	r7, sp, #8
 8012e06:	60f8      	str	r0, [r7, #12]
 8012e08:	60b9      	str	r1, [r7, #8]
 8012e0a:	607a      	str	r2, [r7, #4]
 8012e0c:	603b      	str	r3, [r7, #0]
UINT       old_threshold;
#endif


    /* Check for invalid input pointers.  */
    if ((media_ptr == FX_NULL) || (media_driver == FX_NULL) || (memory_ptr == FX_NULL) || (media_control_block_size != sizeof(FX_MEDIA)))
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d00a      	beq.n	8012e2a <_fxe_media_open+0x2a>
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d007      	beq.n	8012e2a <_fxe_media_open+0x2a>
 8012e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d004      	beq.n	8012e2a <_fxe_media_open+0x2a>
 8012e20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e22:	f242 42b8 	movw	r2, #9400	; 0x24b8
 8012e26:	4293      	cmp	r3, r2
 8012e28:	d001      	beq.n	8012e2e <_fxe_media_open+0x2e>
    {
        return(FX_PTR_ERROR);
 8012e2a:	2318      	movs	r3, #24
 8012e2c:	e071      	b.n	8012f12 <_fxe_media_open+0x112>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012e2e:	f3ef 8305 	mrs	r3, IPSR
 8012e32:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8012e34:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 8012e36:	4b39      	ldr	r3, [pc, #228]	; (8012f1c <_fxe_media_open+0x11c>)
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	4313      	orrs	r3, r2
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d108      	bne.n	8012e52 <_fxe_media_open+0x52>
 8012e40:	4b37      	ldr	r3, [pc, #220]	; (8012f20 <_fxe_media_open+0x120>)
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d004      	beq.n	8012e52 <_fxe_media_open+0x52>
 8012e48:	4b35      	ldr	r3, [pc, #212]	; (8012f20 <_fxe_media_open+0x120>)
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	4a35      	ldr	r2, [pc, #212]	; (8012f24 <_fxe_media_open+0x124>)
 8012e4e:	4293      	cmp	r3, r2
 8012e50:	d101      	bne.n	8012e56 <_fxe_media_open+0x56>
 8012e52:	2320      	movs	r3, #32
 8012e54:	e05d      	b.n	8012f12 <_fxe_media_open+0x112>

    /* Check for proper size of the logical sector cache.  */
    temp =  _fx_system_media_max_sector_cache;
 8012e56:	4b34      	ldr	r3, [pc, #208]	; (8012f28 <_fxe_media_open+0x128>)
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 8012e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e5e:	425b      	negs	r3, r3
 8012e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e62:	4013      	ands	r3, r2
 8012e64:	627b      	str	r3, [r7, #36]	; 0x24

    /* If FX_MAX_SECTOR_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_sector_cache))
 8012e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e68:	2b01      	cmp	r3, #1
 8012e6a:	d004      	beq.n	8012e76 <_fxe_media_open+0x76>
 8012e6c:	4b2e      	ldr	r3, [pc, #184]	; (8012f28 <_fxe_media_open+0x128>)
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e72:	429a      	cmp	r2, r3
 8012e74:	d001      	beq.n	8012e7a <_fxe_media_open+0x7a>
    {

        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
 8012e76:	2302      	movs	r3, #2
 8012e78:	e04b      	b.n	8012f12 <_fxe_media_open+0x112>
    }

    /* Check for proper size of the FAT cache.  */
    temp =  _fx_system_media_max_fat_cache;
 8012e7a:	4b2c      	ldr	r3, [pc, #176]	; (8012f2c <_fxe_media_open+0x12c>)
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 8012e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e82:	425b      	negs	r3, r3
 8012e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e86:	4013      	ands	r3, r2
 8012e88:	627b      	str	r3, [r7, #36]	; 0x24

    /* If FX_MAX_FAT_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_fat_cache))
 8012e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e8c:	2b01      	cmp	r3, #1
 8012e8e:	d004      	beq.n	8012e9a <_fxe_media_open+0x9a>
 8012e90:	4b26      	ldr	r3, [pc, #152]	; (8012f2c <_fxe_media_open+0x12c>)
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e96:	429a      	cmp	r2, r3
 8012e98:	d001      	beq.n	8012e9e <_fxe_media_open+0x9e>
    {

        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
 8012e9a:	2302      	movs	r3, #2
 8012e9c:	e039      	b.n	8012f12 <_fxe_media_open+0x112>

#ifndef FX_SINGLE_THREAD

    /* Pickup current thread pointer. At this point we know the current thread pointer is non-null since 
       it was checked by code in FX_CALLER_CHECKING_CODE macro.  */
    current_thread =  tx_thread_identify();
 8012e9e:	f002 fbd1 	bl	8015644 <_tx_thread_identify>
 8012ea2:	6238      	str	r0, [r7, #32]

    /* Disable preemption temporarily.  */
    tx_thread_preemption_change(current_thread, 0, &old_threshold);
 8012ea4:	f107 0314 	add.w	r3, r7, #20
 8012ea8:	461a      	mov	r2, r3
 8012eaa:	2100      	movs	r1, #0
 8012eac:	6a38      	ldr	r0, [r7, #32]
 8012eae:	f002 fc23 	bl	80156f8 <_tx_thread_preemption_change>
#endif

    /* Loop to check for the media already opened.  */
    current_media =  _fx_system_media_opened_ptr;
 8012eb2:	4b1f      	ldr	r3, [pc, #124]	; (8012f30 <_fxe_media_open+0x130>)
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    open_count =     _fx_system_media_opened_count;
 8012eb8:	4b1e      	ldr	r3, [pc, #120]	; (8012f34 <_fxe_media_open+0x134>)
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	62bb      	str	r3, [r7, #40]	; 0x28
    while (open_count--)
 8012ebe:	e010      	b.n	8012ee2 <_fxe_media_open+0xe2>
    {

        /* Is the new media pointer already open?  */
        if (media_ptr == current_media)
 8012ec0:	68fa      	ldr	r2, [r7, #12]
 8012ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ec4:	429a      	cmp	r2, r3
 8012ec6:	d108      	bne.n	8012eda <_fxe_media_open+0xda>
        {

#ifndef FX_SINGLE_THREAD

            /* Restore preemption.  */
            tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8012ec8:	697b      	ldr	r3, [r7, #20]
 8012eca:	f107 0214 	add.w	r2, r7, #20
 8012ece:	4619      	mov	r1, r3
 8012ed0:	6a38      	ldr	r0, [r7, #32]
 8012ed2:	f002 fc11 	bl	80156f8 <_tx_thread_preemption_change>
#endif

            /* Duplicate media open, return an error!  */
            return(FX_PTR_ERROR);
 8012ed6:	2318      	movs	r3, #24
 8012ed8:	e01b      	b.n	8012f12 <_fxe_media_open+0x112>
        }

        /* Move to next entry.  */
        current_media =  current_media -> fx_media_opened_next;
 8012eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012edc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8012ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (open_count--)
 8012ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee4:	1e5a      	subs	r2, r3, #1
 8012ee6:	62ba      	str	r2, [r7, #40]	; 0x28
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d1e9      	bne.n	8012ec0 <_fxe_media_open+0xc0>
    }

#ifndef FX_SINGLE_THREAD

    /* Restore preemption.  */
    tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 8012eec:	697b      	ldr	r3, [r7, #20]
 8012eee:	f107 0214 	add.w	r2, r7, #20
 8012ef2:	4619      	mov	r1, r3
 8012ef4:	6a38      	ldr	r0, [r7, #32]
 8012ef6:	f002 fbff 	bl	80156f8 <_tx_thread_preemption_change>
#endif

    /* Call actual media open service.  */
    status =  _fx_media_open(media_ptr, media_name, media_driver, driver_info_ptr,
 8012efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012efc:	9301      	str	r3, [sp, #4]
 8012efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012f00:	9300      	str	r3, [sp, #0]
 8012f02:	683b      	ldr	r3, [r7, #0]
 8012f04:	687a      	ldr	r2, [r7, #4]
 8012f06:	68b9      	ldr	r1, [r7, #8]
 8012f08:	68f8      	ldr	r0, [r7, #12]
 8012f0a:	f7fc fcab 	bl	800f864 <_fx_media_open>
 8012f0e:	61f8      	str	r0, [r7, #28]
                             memory_ptr, memory_size);

    /* Return status.  */
    return(status);
 8012f10:	69fb      	ldr	r3, [r7, #28]
}
 8012f12:	4618      	mov	r0, r3
 8012f14:	3730      	adds	r7, #48	; 0x30
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}
 8012f1a:	bf00      	nop
 8012f1c:	2400006c 	.word	0x2400006c
 8012f20:	24014f1c 	.word	0x24014f1c
 8012f24:	24015064 	.word	0x24015064
 8012f28:	24014c98 	.word	0x24014c98
 8012f2c:	24014c9c 	.word	0x24014c9c
 8012f30:	24014c88 	.word	0x24014c88
 8012f34:	24014c8c 	.word	0x24014c8c

08012f38 <check_sd_status>:

static UINT is_initialized = 0;


static INT check_sd_status(uint32_t instance)
{
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b084      	sub	sp, #16
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	6078      	str	r0, [r7, #4]
  uint32_t start = FX_STM32_SD_CURRENT_TIME();
 8012f40:	f002 fffa 	bl	8015f38 <_tx_time_get>
 8012f44:	60f8      	str	r0, [r7, #12]

  while (FX_STM32_SD_CURRENT_TIME() - start < FX_STM32_SD_DEFAULT_TIMEOUT)
 8012f46:	e007      	b.n	8012f58 <check_sd_status+0x20>
  {
    if (fx_stm32_sd_get_status(instance) == 0)
 8012f48:	6878      	ldr	r0, [r7, #4]
 8012f4a:	f7f7 f825 	bl	8009f98 <fx_stm32_sd_get_status>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d101      	bne.n	8012f58 <check_sd_status+0x20>
    {
      return 0;
 8012f54:	2300      	movs	r3, #0
 8012f56:	e008      	b.n	8012f6a <check_sd_status+0x32>
  while (FX_STM32_SD_CURRENT_TIME() - start < FX_STM32_SD_DEFAULT_TIMEOUT)
 8012f58:	f002 ffee 	bl	8015f38 <_tx_time_get>
 8012f5c:	4602      	mov	r2, r0
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	1ad3      	subs	r3, r2, r3
 8012f62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012f66:	d3ef      	bcc.n	8012f48 <check_sd_status+0x10>
    }
  }

  return 1;
 8012f68:	2301      	movs	r3, #1
}
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	3710      	adds	r7, #16
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	bd80      	pop	{r7, pc}
	...

08012f74 <fx_stm32_sd_driver>:
* It relies on the STM32 peripheral library from ST.
* @param media_ptr: FileX's Media Config Block
* @retval None
*/
VOID  fx_stm32_sd_driver(FX_MEDIA *media_ptr)
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b086      	sub	sp, #24
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	6078      	str	r0, [r7, #4]
  ULONG partition_start;
  ULONG partition_size;

#if (FX_STM32_SD_INIT == 0)
 /* the SD was initialized by the application */
  is_initialized = 1;
 8012f7c:	4b7e      	ldr	r3, [pc, #504]	; (8013178 <fx_stm32_sd_driver+0x204>)
 8012f7e:	2201      	movs	r2, #1
 8012f80:	601a      	str	r2, [r3, #0]
#endif
  /* before performing any operation, check the status of the SD IP */
  if (is_initialized == 1)
 8012f82:	4b7d      	ldr	r3, [pc, #500]	; (8013178 <fx_stm32_sd_driver+0x204>)
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	2b01      	cmp	r3, #1
 8012f88:	d10a      	bne.n	8012fa0 <fx_stm32_sd_driver+0x2c>
  {
    if (check_sd_status(FX_STM32_SD_INSTANCE) != 0)
 8012f8a:	2000      	movs	r0, #0
 8012f8c:	f7ff ffd4 	bl	8012f38 <check_sd_status>
 8012f90:	4603      	mov	r3, r0
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d004      	beq.n	8012fa0 <fx_stm32_sd_driver+0x2c>
    {
      media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	2290      	movs	r2, #144	; 0x90
 8012f9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8012f9e:	e0e7      	b.n	8013170 <fx_stm32_sd_driver+0x1fc>
    }
  }

#if (FX_STM32_SD_DMA_API == 1)
  /* the SD DMA requires a 4-byte aligned buffers */
  unaligned_buffer = (UINT)(media_ptr->fx_media_driver_buffer) & 0x3;
 8012fa0:	687b      	ldr	r3, [r7, #4]
 8012fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012fa6:	f003 0303 	and.w	r3, r3, #3
 8012faa:	617b      	str	r3, [r7, #20]
#else
  /* if the DMA is not used there isn't any constraint on buffer alignment */
  unaligned_buffer = 0;
#endif
  /* Process the driver request specified in the media control block.  */
  switch(media_ptr->fx_media_driver_request)
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012fb2:	2b08      	cmp	r3, #8
 8012fb4:	f200 80d2 	bhi.w	801315c <fx_stm32_sd_driver+0x1e8>
 8012fb8:	a201      	add	r2, pc, #4	; (adr r2, 8012fc0 <fx_stm32_sd_driver+0x4c>)
 8012fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fbe:	bf00      	nop
 8012fc0:	08013033 	.word	0x08013033
 8012fc4:	08013067 	.word	0x08013067
 8012fc8:	08013099 	.word	0x08013099
 8012fcc:	080130a3 	.word	0x080130a3
 8012fd0:	08012fe5 	.word	0x08012fe5
 8012fd4:	080130ad 	.word	0x080130ad
 8012fd8:	0801315d 	.word	0x0801315d
 8012fdc:	08013141 	.word	0x08013141
 8012fe0:	0801301d 	.word	0x0801301d
  {
  case FX_DRIVER_INIT:
    {
      media_ptr->fx_media_driver_status = FX_SUCCESS;
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	2200      	movs	r2, #0
 8012fe8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      FX_STM32_SD_PRE_INIT(media_ptr);
 8012fec:	231c      	movs	r3, #28
 8012fee:	2200      	movs	r2, #0
 8012ff0:	4962      	ldr	r1, [pc, #392]	; (801317c <fx_stm32_sd_driver+0x208>)
 8012ff2:	4863      	ldr	r0, [pc, #396]	; (8013180 <fx_stm32_sd_driver+0x20c>)
 8012ff4:	f003 fcb0 	bl	8016958 <_txe_semaphore_create>
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d109      	bne.n	8013012 <fx_stm32_sd_driver+0x9e>
 8012ffe:	231c      	movs	r3, #28
 8013000:	2200      	movs	r2, #0
 8013002:	4960      	ldr	r1, [pc, #384]	; (8013184 <fx_stm32_sd_driver+0x210>)
 8013004:	4860      	ldr	r0, [pc, #384]	; (8013188 <fx_stm32_sd_driver+0x214>)
 8013006:	f003 fca7 	bl	8016958 <_txe_semaphore_create>
 801300a:	4603      	mov	r3, r0
 801300c:	2b00      	cmp	r3, #0
 801300e:	f000 80aa 	beq.w	8013166 <fx_stm32_sd_driver+0x1f2>
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	2290      	movs	r2, #144	; 0x90
 8013016:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }
#endif
      /* call post init user macro */
      FX_STM32_SD_POST_INIT(media_ptr);
      break;
 801301a:	e0a4      	b.n	8013166 <fx_stm32_sd_driver+0x1f2>
    }

  case FX_DRIVER_UNINIT:
    {
      media_ptr->fx_media_driver_status = FX_SUCCESS;
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	2200      	movs	r2, #0
 8013020:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      {
        is_initialized = 0;
      }
#endif
      /* call post deinit processing  */
      FX_STM32_SD_POST_DEINIT(media_ptr);
 8013024:	4856      	ldr	r0, [pc, #344]	; (8013180 <fx_stm32_sd_driver+0x20c>)
 8013026:	f003 fd2d 	bl	8016a84 <_txe_semaphore_delete>
 801302a:	4857      	ldr	r0, [pc, #348]	; (8013188 <fx_stm32_sd_driver+0x214>)
 801302c:	f003 fd2a 	bl	8016a84 <_txe_semaphore_delete>

      break;
 8013030:	e09e      	b.n	8013170 <fx_stm32_sd_driver+0x1fc>
    }

  case FX_DRIVER_READ:
    {
      media_ptr->fx_media_driver_status = FX_IO_ERROR;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	2290      	movs	r2, #144	; 0x90
 8013036:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      if (sd_read_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013044:	18d1      	adds	r1, r2, r3
                       media_ptr->fx_media_driver_sectors, unaligned_buffer) == FX_SUCCESS)
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
      if (sd_read_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 801304c:	697b      	ldr	r3, [r7, #20]
 801304e:	6878      	ldr	r0, [r7, #4]
 8013050:	f000 f89c 	bl	801318c <sd_read_data>
 8013054:	4603      	mov	r3, r0
 8013056:	2b00      	cmp	r3, #0
 8013058:	f040 8087 	bne.w	801316a <fx_stm32_sd_driver+0x1f6>
      {
        media_ptr->fx_media_driver_status = FX_SUCCESS;
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	2200      	movs	r2, #0
 8013060:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }

      break;
 8013064:	e081      	b.n	801316a <fx_stm32_sd_driver+0x1f6>
    }

  case FX_DRIVER_WRITE:
    {
      media_ptr->fx_media_driver_status = FX_IO_ERROR;
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	2290      	movs	r2, #144	; 0x90
 801306a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      if (sd_write_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013078:	18d1      	adds	r1, r2, r3
                        media_ptr->fx_media_driver_sectors, unaligned_buffer) == FX_SUCCESS)
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
      if (sd_write_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 8013080:	697b      	ldr	r3, [r7, #20]
 8013082:	6878      	ldr	r0, [r7, #4]
 8013084:	f000 f940 	bl	8013308 <sd_write_data>
 8013088:	4603      	mov	r3, r0
 801308a:	2b00      	cmp	r3, #0
 801308c:	d16f      	bne.n	801316e <fx_stm32_sd_driver+0x1fa>
      {
        media_ptr->fx_media_driver_status = FX_SUCCESS;
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	2200      	movs	r2, #0
 8013092:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }

      break;
 8013096:	e06a      	b.n	801316e <fx_stm32_sd_driver+0x1fa>
    }

  case FX_DRIVER_FLUSH:
    {
      /* Return driver success.  */
      media_ptr->fx_media_driver_status =  FX_SUCCESS;
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	2200      	movs	r2, #0
 801309c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 80130a0:	e066      	b.n	8013170 <fx_stm32_sd_driver+0x1fc>
    }

  case FX_DRIVER_ABORT:
    {
      /* Return driver success.  */
      media_ptr->fx_media_driver_status =  FX_SUCCESS;
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	2200      	movs	r2, #0
 80130a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      FX_STM32_SD_POST_ABORT(media_ptr);
      break;
 80130aa:	e061      	b.n	8013170 <fx_stm32_sd_driver+0x1fc>
    }

  case FX_DRIVER_BOOT_READ:
    {
      /* the boot sector is the sector zero */
      status = sd_read_data(media_ptr, 0, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80130b2:	697b      	ldr	r3, [r7, #20]
 80130b4:	2100      	movs	r1, #0
 80130b6:	6878      	ldr	r0, [r7, #4]
 80130b8:	f000 f868 	bl	801318c <sd_read_data>
 80130bc:	6138      	str	r0, [r7, #16]

      if (status != FX_SUCCESS)
 80130be:	693b      	ldr	r3, [r7, #16]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d004      	beq.n	80130ce <fx_stm32_sd_driver+0x15a>
      {
        media_ptr->fx_media_driver_status = status;
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	693a      	ldr	r2, [r7, #16]
 80130c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 80130cc:	e050      	b.n	8013170 <fx_stm32_sd_driver+0x1fc>

      /* Check if the sector 0 is the actual boot sector, otherwise calculate the offset into it.
      Please note that this should belong to higher level of MW to do this check and it is here
      as a temporary work solution */

      partition_start =  0;
 80130ce:	2300      	movs	r3, #0
 80130d0:	60fb      	str	r3, [r7, #12]

      status =  _fx_partition_offset_calculate(media_ptr -> fx_media_driver_buffer, 0,
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 80130d8:	f107 0308 	add.w	r3, r7, #8
 80130dc:	f107 020c 	add.w	r2, r7, #12
 80130e0:	2100      	movs	r1, #0
 80130e2:	f7fd f939 	bl	8010358 <_fx_partition_offset_calculate>
 80130e6:	6138      	str	r0, [r7, #16]
                                               &partition_start, &partition_size);

      /* Check partition read error.  */
      if (status)
 80130e8:	693b      	ldr	r3, [r7, #16]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d004      	beq.n	80130f8 <fx_stm32_sd_driver+0x184>
      {
        /* Unsuccessful driver request.  */
        media_ptr -> fx_media_driver_status =  FX_IO_ERROR;
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	2290      	movs	r2, #144	; 0x90
 80130f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 80130f6:	e03b      	b.n	8013170 <fx_stm32_sd_driver+0x1fc>
      }

      /* Now determine if there is a partition...   */
      if (partition_start)
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d01b      	beq.n	8013136 <fx_stm32_sd_driver+0x1c2>
      {

        if (check_sd_status(FX_STM32_SD_INSTANCE) != 0)
 80130fe:	2000      	movs	r0, #0
 8013100:	f7ff ff1a 	bl	8012f38 <check_sd_status>
 8013104:	4603      	mov	r3, r0
 8013106:	2b00      	cmp	r3, #0
 8013108:	d004      	beq.n	8013114 <fx_stm32_sd_driver+0x1a0>
        {
          media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	2290      	movs	r2, #144	; 0x90
 801310e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          break;
 8013112:	e02d      	b.n	8013170 <fx_stm32_sd_driver+0x1fc>
        }

        /* Yes, now lets read the actual boot record.  */
        status = sd_read_data(media_ptr, partition_start, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 8013114:	68f9      	ldr	r1, [r7, #12]
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801311c:	697b      	ldr	r3, [r7, #20]
 801311e:	6878      	ldr	r0, [r7, #4]
 8013120:	f000 f834 	bl	801318c <sd_read_data>
 8013124:	6138      	str	r0, [r7, #16]

        if (status != FX_SUCCESS)
 8013126:	693b      	ldr	r3, [r7, #16]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d004      	beq.n	8013136 <fx_stm32_sd_driver+0x1c2>
        {
          media_ptr->fx_media_driver_status = status;
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	693a      	ldr	r2, [r7, #16]
 8013130:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          break;
 8013134:	e01c      	b.n	8013170 <fx_stm32_sd_driver+0x1fc>
        }
      }

      /* Successful driver request.  */
      media_ptr -> fx_media_driver_status =  FX_SUCCESS;
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	2200      	movs	r2, #0
 801313a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 801313e:	e017      	b.n	8013170 <fx_stm32_sd_driver+0x1fc>
    }

  case FX_DRIVER_BOOT_WRITE:
    {
      status = sd_write_data(media_ptr, 0, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8013146:	697b      	ldr	r3, [r7, #20]
 8013148:	2100      	movs	r1, #0
 801314a:	6878      	ldr	r0, [r7, #4]
 801314c:	f000 f8dc 	bl	8013308 <sd_write_data>
 8013150:	6138      	str	r0, [r7, #16]

      media_ptr->fx_media_driver_status = status;
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	693a      	ldr	r2, [r7, #16]
 8013156:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      break;
 801315a:	e009      	b.n	8013170 <fx_stm32_sd_driver+0x1fc>
    }

  default:
    {
      media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	2290      	movs	r2, #144	; 0x90
 8013160:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 8013164:	e004      	b.n	8013170 <fx_stm32_sd_driver+0x1fc>
      break;
 8013166:	bf00      	nop
 8013168:	e002      	b.n	8013170 <fx_stm32_sd_driver+0x1fc>
      break;
 801316a:	bf00      	nop
 801316c:	e000      	b.n	8013170 <fx_stm32_sd_driver+0x1fc>
      break;
 801316e:	bf00      	nop
    }
  }
}
 8013170:	3718      	adds	r7, #24
 8013172:	46bd      	mov	sp, r7
 8013174:	bd80      	pop	{r7, pc}
 8013176:	bf00      	nop
 8013178:	24014ee0 	.word	0x24014ee0
 801317c:	08017f30 	.word	0x08017f30
 8013180:	24014c6c 	.word	0x24014c6c
 8013184:	08017f4c 	.word	0x08017f4c
 8013188:	24014c50 	.word	0x24014c50

0801318c <sd_read_data>:
* @param UINT use_scratch_buffer to enable scratch buffer usage or not.
* @retval FX_SUCCESS on success FX_BUFFER_ERROR / FX_ACCESS_ERROR / FX_IO_ERROR otherwise
*/

static UINT sd_read_data(FX_MEDIA *media_ptr, ULONG start_sector, UINT num_sectors, UINT use_scratch_buffer)
{
 801318c:	b580      	push	{r7, lr}
 801318e:	b090      	sub	sp, #64	; 0x40
 8013190:	af00      	add	r7, sp, #0
 8013192:	60f8      	str	r0, [r7, #12]
 8013194:	60b9      	str	r1, [r7, #8]
 8013196:	607a      	str	r2, [r7, #4]
 8013198:	603b      	str	r3, [r7, #0]
  INT i = 0;
 801319a:	2300      	movs	r3, #0
 801319c:	63fb      	str	r3, [r7, #60]	; 0x3c
  UCHAR *read_addr;

 /* perform the Pre read operations */
  FX_STM32_SD_PRE_READ_TRANSFER(media_ptr);

  if (use_scratch_buffer)
 801319e:	683b      	ldr	r3, [r7, #0]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d061      	beq.n	8013268 <sd_read_data+0xdc>
  {
    read_addr = media_ptr->fx_media_driver_buffer;
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80131aa:	637b      	str	r3, [r7, #52]	; 0x34

    for (i = 0; i < num_sectors; i++)
 80131ac:	2300      	movs	r3, #0
 80131ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80131b0:	e04c      	b.n	801324c <sd_read_data+0xc0>
    {
      /* Start reading into the scratch buffer */
      status = fx_stm32_sd_read_blocks(FX_STM32_SD_INSTANCE, (UINT *)scratch, (UINT)start_sector++, 1);
 80131b2:	68ba      	ldr	r2, [r7, #8]
 80131b4:	1c53      	adds	r3, r2, #1
 80131b6:	60bb      	str	r3, [r7, #8]
 80131b8:	2301      	movs	r3, #1
 80131ba:	4950      	ldr	r1, [pc, #320]	; (80132fc <sd_read_data+0x170>)
 80131bc:	2000      	movs	r0, #0
 80131be:	f7f6 ff01 	bl	8009fc4 <fx_stm32_sd_read_blocks>
 80131c2:	4603      	mov	r3, r0
 80131c4:	63bb      	str	r3, [r7, #56]	; 0x38

      if (status != 0)
 80131c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d001      	beq.n	80131d0 <sd_read_data+0x44>
      {
        /* read error occurred, call the error handler code then return immediately */
        FX_STM32_SD_READ_TRANSFER_ERROR(status);
        return FX_IO_ERROR;
 80131cc:	2390      	movs	r3, #144	; 0x90
 80131ce:	e090      	b.n	80132f2 <sd_read_data+0x166>
      }

    /* wait for read transfer notification */
       FX_STM32_SD_READ_CPLT_NOTIFY();
 80131d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80131d4:	484a      	ldr	r0, [pc, #296]	; (8013300 <sd_read_data+0x174>)
 80131d6:	f003 fc93 	bl	8016b00 <_txe_semaphore_get>
 80131da:	4603      	mov	r3, r0
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d001      	beq.n	80131e4 <sd_read_data+0x58>
 80131e0:	2390      	movs	r3, #144	; 0x90
 80131e2:	e086      	b.n	80132f2 <sd_read_data+0x166>
 80131e4:	4b45      	ldr	r3, [pc, #276]	; (80132fc <sd_read_data+0x170>)
 80131e6:	633b      	str	r3, [r7, #48]	; 0x30
 80131e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80131ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80131ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	dd1d      	ble.n	8013230 <sd_read_data+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80131f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f6:	f003 021f 	and.w	r2, r3, #31
 80131fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131fc:	4413      	add	r3, r2
 80131fe:	62bb      	str	r3, [r7, #40]	; 0x28
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8013200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013202:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8013204:	f3bf 8f4f 	dsb	sy
}
 8013208:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 801320a:	4a3e      	ldr	r2, [pc, #248]	; (8013304 <sd_read_data+0x178>)
 801320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801320e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8013212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013214:	3320      	adds	r3, #32
 8013216:	627b      	str	r3, [r7, #36]	; 0x24
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8013218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801321a:	3b20      	subs	r3, #32
 801321c:	62bb      	str	r3, [r7, #40]	; 0x28
      } while ( op_size > 0 );
 801321e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013220:	2b00      	cmp	r3, #0
 8013222:	dcf2      	bgt.n	801320a <sd_read_data+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8013224:	f3bf 8f4f 	dsb	sy
}
 8013228:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801322a:	f3bf 8f6f 	isb	sy
}
 801322e:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8013230:	bf00      	nop

#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
      invalidate_cache_by_addr((uint32_t*)scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif

      _fx_utility_memory_copy(scratch, read_addr, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 8013232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013236:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013238:	4830      	ldr	r0, [pc, #192]	; (80132fc <sd_read_data+0x170>)
 801323a:	f7ff fc03 	bl	8012a44 <_fx_utility_memory_copy>
      read_addr += FX_STM32_SD_DEFAULT_SECTOR_SIZE;
 801323e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013240:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8013244:	637b      	str	r3, [r7, #52]	; 0x34
    for (i = 0; i < num_sectors; i++)
 8013246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013248:	3301      	adds	r3, #1
 801324a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801324c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801324e:	687a      	ldr	r2, [r7, #4]
 8013250:	429a      	cmp	r2, r3
 8013252:	d8ae      	bhi.n	80131b2 <sd_read_data+0x26>
    }

    /* Check if all sectors were read */
    if (i == num_sectors)
 8013254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013256:	687a      	ldr	r2, [r7, #4]
 8013258:	429a      	cmp	r2, r3
 801325a:	d102      	bne.n	8013262 <sd_read_data+0xd6>
    {
      status = FX_SUCCESS;
 801325c:	2300      	movs	r3, #0
 801325e:	63bb      	str	r3, [r7, #56]	; 0x38
 8013260:	e046      	b.n	80132f0 <sd_read_data+0x164>
    }
    else
    {
      status = FX_BUFFER_ERROR;
 8013262:	2321      	movs	r3, #33	; 0x21
 8013264:	63bb      	str	r3, [r7, #56]	; 0x38
 8013266:	e043      	b.n	80132f0 <sd_read_data+0x164>
    }
  }
  else
  {

    status = fx_stm32_sd_read_blocks(FX_STM32_SD_INSTANCE, (UINT *)media_ptr->fx_media_driver_buffer, (UINT)start_sector, num_sectors);
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	68ba      	ldr	r2, [r7, #8]
 8013272:	2000      	movs	r0, #0
 8013274:	f7f6 fea6 	bl	8009fc4 <fx_stm32_sd_read_blocks>
 8013278:	4603      	mov	r3, r0
 801327a:	63bb      	str	r3, [r7, #56]	; 0x38

    if (status != 0)
 801327c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801327e:	2b00      	cmp	r3, #0
 8013280:	d001      	beq.n	8013286 <sd_read_data+0xfa>
    {
      /* read error occurred, call the error handler code then return immediately */
      FX_STM32_SD_READ_TRANSFER_ERROR(status);

      return FX_IO_ERROR;
 8013282:	2390      	movs	r3, #144	; 0x90
 8013284:	e035      	b.n	80132f2 <sd_read_data+0x166>
    }

    /* wait for read transfer notification */
       FX_STM32_SD_READ_CPLT_NOTIFY();
 8013286:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801328a:	481d      	ldr	r0, [pc, #116]	; (8013300 <sd_read_data+0x174>)
 801328c:	f003 fc38 	bl	8016b00 <_txe_semaphore_get>
 8013290:	4603      	mov	r3, r0
 8013292:	2b00      	cmp	r3, #0
 8013294:	d001      	beq.n	801329a <sd_read_data+0x10e>
 8013296:	2390      	movs	r3, #144	; 0x90
 8013298:	e02b      	b.n	80132f2 <sd_read_data+0x166>

#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
    invalidate_cache_by_addr((uint32_t*)media_ptr->fx_media_driver_buffer, num_sectors * FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	025b      	lsls	r3, r3, #9
 80132a4:	623a      	str	r2, [r7, #32]
 80132a6:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 80132a8:	69fb      	ldr	r3, [r7, #28]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	dd1d      	ble.n	80132ea <sd_read_data+0x15e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80132ae:	6a3b      	ldr	r3, [r7, #32]
 80132b0:	f003 021f 	and.w	r2, r3, #31
 80132b4:	69fb      	ldr	r3, [r7, #28]
 80132b6:	4413      	add	r3, r2
 80132b8:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80132ba:	6a3b      	ldr	r3, [r7, #32]
 80132bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80132be:	f3bf 8f4f 	dsb	sy
}
 80132c2:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80132c4:	4a0f      	ldr	r2, [pc, #60]	; (8013304 <sd_read_data+0x178>)
 80132c6:	697b      	ldr	r3, [r7, #20]
 80132c8:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80132cc:	697b      	ldr	r3, [r7, #20]
 80132ce:	3320      	adds	r3, #32
 80132d0:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80132d2:	69bb      	ldr	r3, [r7, #24]
 80132d4:	3b20      	subs	r3, #32
 80132d6:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 80132d8:	69bb      	ldr	r3, [r7, #24]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	dcf2      	bgt.n	80132c4 <sd_read_data+0x138>
  __ASM volatile ("dsb 0xF":::"memory");
 80132de:	f3bf 8f4f 	dsb	sy
}
 80132e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80132e4:	f3bf 8f6f 	isb	sy
}
 80132e8:	bf00      	nop
}
 80132ea:	bf00      	nop
#endif

    status = FX_SUCCESS;
 80132ec:	2300      	movs	r3, #0
 80132ee:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  /* Operation finished, call the post read macro if defined */

  FX_STM32_SD_POST_READ_TRANSFER(media_ptr);
  return status;
 80132f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80132f2:	4618      	mov	r0, r3
 80132f4:	3740      	adds	r7, #64	; 0x40
 80132f6:	46bd      	mov	sp, r7
 80132f8:	bd80      	pop	{r7, pc}
 80132fa:	bf00      	nop
 80132fc:	24014ce0 	.word	0x24014ce0
 8013300:	24014c6c 	.word	0x24014c6c
 8013304:	e000ed00 	.word	0xe000ed00

08013308 <sd_write_data>:
* @param UINT use_scratch_buffer to enable scratch buffer usage or not.
* @retval FX_SUCCESS on success FX_BUFFER_ERROR / FX_ACCESS_ERROR / FX_IO_ERROR otherwise
*/

static UINT sd_write_data(FX_MEDIA *media_ptr, ULONG start_sector, UINT num_sectors, UINT use_scratch_buffer)
{
 8013308:	b580      	push	{r7, lr}
 801330a:	b090      	sub	sp, #64	; 0x40
 801330c:	af00      	add	r7, sp, #0
 801330e:	60f8      	str	r0, [r7, #12]
 8013310:	60b9      	str	r1, [r7, #8]
 8013312:	607a      	str	r2, [r7, #4]
 8013314:	603b      	str	r3, [r7, #0]
  INT i = 0;
 8013316:	2300      	movs	r3, #0
 8013318:	63fb      	str	r3, [r7, #60]	; 0x3c
  UCHAR *write_addr;

  /* call Pre write operation macro */
  FX_STM32_SD_PRE_WRITE_TRANSFER(media_ptr);

  if (use_scratch_buffer)
 801331a:	683b      	ldr	r3, [r7, #0]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d061      	beq.n	80133e4 <sd_write_data+0xdc>
  {
    write_addr = media_ptr->fx_media_driver_buffer;
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013326:	637b      	str	r3, [r7, #52]	; 0x34

    for (i = 0; i < num_sectors; i++)
 8013328:	2300      	movs	r3, #0
 801332a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801332c:	e04c      	b.n	80133c8 <sd_write_data+0xc0>
    {
      _fx_utility_memory_copy(write_addr, scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 801332e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013332:	4951      	ldr	r1, [pc, #324]	; (8013478 <sd_write_data+0x170>)
 8013334:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013336:	f7ff fb85 	bl	8012a44 <_fx_utility_memory_copy>
      write_addr += FX_STM32_SD_DEFAULT_SECTOR_SIZE;
 801333a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801333c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8013340:	637b      	str	r3, [r7, #52]	; 0x34
 8013342:	4b4d      	ldr	r3, [pc, #308]	; (8013478 <sd_write_data+0x170>)
 8013344:	633b      	str	r3, [r7, #48]	; 0x30
 8013346:	f44f 7300 	mov.w	r3, #512	; 0x200
 801334a:	62fb      	str	r3, [r7, #44]	; 0x2c
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 801334c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801334e:	2b00      	cmp	r3, #0
 8013350:	dd1d      	ble.n	801338e <sd_write_data+0x86>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8013352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013354:	f003 021f 	and.w	r2, r3, #31
 8013358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801335a:	4413      	add	r3, r2
 801335c:	62bb      	str	r3, [r7, #40]	; 0x28
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 801335e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013360:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8013362:	f3bf 8f4f 	dsb	sy
}
 8013366:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8013368:	4a44      	ldr	r2, [pc, #272]	; (801347c <sd_write_data+0x174>)
 801336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801336c:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8013370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013372:	3320      	adds	r3, #32
 8013374:	627b      	str	r3, [r7, #36]	; 0x24
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8013376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013378:	3b20      	subs	r3, #32
 801337a:	62bb      	str	r3, [r7, #40]	; 0x28
      } while ( op_size > 0 );
 801337c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801337e:	2b00      	cmp	r3, #0
 8013380:	dcf2      	bgt.n	8013368 <sd_write_data+0x60>
  __ASM volatile ("dsb 0xF":::"memory");
 8013382:	f3bf 8f4f 	dsb	sy
}
 8013386:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013388:	f3bf 8f6f 	isb	sy
}
 801338c:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 801338e:	bf00      	nop
#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
      /* Clean the DCache to make the SD DMA see the actual content of the scratch buffer */
      clean_cache_by_addr((uint32_t*)scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif

      status = fx_stm32_sd_write_blocks(FX_STM32_SD_INSTANCE, (UINT *)scratch, (UINT)start_sector++, 1);
 8013390:	68ba      	ldr	r2, [r7, #8]
 8013392:	1c53      	adds	r3, r2, #1
 8013394:	60bb      	str	r3, [r7, #8]
 8013396:	2301      	movs	r3, #1
 8013398:	4937      	ldr	r1, [pc, #220]	; (8013478 <sd_write_data+0x170>)
 801339a:	2000      	movs	r0, #0
 801339c:	f7f6 fe2e 	bl	8009ffc <fx_stm32_sd_write_blocks>
 80133a0:	4603      	mov	r3, r0
 80133a2:	63bb      	str	r3, [r7, #56]	; 0x38

      if (status != 0)
 80133a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d001      	beq.n	80133ae <sd_write_data+0xa6>
      {
        /* in case of error call the error handling macro */
        FX_STM32_SD_WRITE_TRANSFER_ERROR(status);
        return FX_IO_ERROR;
 80133aa:	2390      	movs	r3, #144	; 0x90
 80133ac:	e05f      	b.n	801346e <sd_write_data+0x166>
      }

      /*  */
       FX_STM32_SD_WRITE_CPLT_NOTIFY();
 80133ae:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80133b2:	4833      	ldr	r0, [pc, #204]	; (8013480 <sd_write_data+0x178>)
 80133b4:	f003 fba4 	bl	8016b00 <_txe_semaphore_get>
 80133b8:	4603      	mov	r3, r0
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d001      	beq.n	80133c2 <sd_write_data+0xba>
 80133be:	2390      	movs	r3, #144	; 0x90
 80133c0:	e055      	b.n	801346e <sd_write_data+0x166>
    for (i = 0; i < num_sectors; i++)
 80133c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133c4:	3301      	adds	r3, #1
 80133c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80133c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133ca:	687a      	ldr	r2, [r7, #4]
 80133cc:	429a      	cmp	r2, r3
 80133ce:	d8ae      	bhi.n	801332e <sd_write_data+0x26>
    }

    if (i == num_sectors)
 80133d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80133d2:	687a      	ldr	r2, [r7, #4]
 80133d4:	429a      	cmp	r2, r3
 80133d6:	d102      	bne.n	80133de <sd_write_data+0xd6>
    {
      status = FX_SUCCESS;
 80133d8:	2300      	movs	r3, #0
 80133da:	63bb      	str	r3, [r7, #56]	; 0x38
 80133dc:	e046      	b.n	801346c <sd_write_data+0x164>
    }
    else
    {
      status = FX_BUFFER_ERROR;
 80133de:	2321      	movs	r3, #33	; 0x21
 80133e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80133e2:	e043      	b.n	801346c <sd_write_data+0x164>
    }
  }
  else
  {
#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
    clean_cache_by_addr((uint32_t*)media_ptr->fx_media_driver_buffer, num_sectors * FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	025b      	lsls	r3, r3, #9
 80133ee:	623a      	str	r2, [r7, #32]
 80133f0:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 80133f2:	69fb      	ldr	r3, [r7, #28]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	dd1d      	ble.n	8013434 <sd_write_data+0x12c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80133f8:	6a3b      	ldr	r3, [r7, #32]
 80133fa:	f003 021f 	and.w	r2, r3, #31
 80133fe:	69fb      	ldr	r3, [r7, #28]
 8013400:	4413      	add	r3, r2
 8013402:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8013404:	6a3b      	ldr	r3, [r7, #32]
 8013406:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8013408:	f3bf 8f4f 	dsb	sy
}
 801340c:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 801340e:	4a1b      	ldr	r2, [pc, #108]	; (801347c <sd_write_data+0x174>)
 8013410:	697b      	ldr	r3, [r7, #20]
 8013412:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8013416:	697b      	ldr	r3, [r7, #20]
 8013418:	3320      	adds	r3, #32
 801341a:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 801341c:	69bb      	ldr	r3, [r7, #24]
 801341e:	3b20      	subs	r3, #32
 8013420:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8013422:	69bb      	ldr	r3, [r7, #24]
 8013424:	2b00      	cmp	r3, #0
 8013426:	dcf2      	bgt.n	801340e <sd_write_data+0x106>
  __ASM volatile ("dsb 0xF":::"memory");
 8013428:	f3bf 8f4f 	dsb	sy
}
 801342c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801342e:	f3bf 8f6f 	isb	sy
}
 8013432:	bf00      	nop
}
 8013434:	bf00      	nop
#endif
    status = fx_stm32_sd_write_blocks(FX_STM32_SD_INSTANCE, (UINT *)media_ptr->fx_media_driver_buffer, (UINT)start_sector, num_sectors);
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	68ba      	ldr	r2, [r7, #8]
 8013440:	2000      	movs	r0, #0
 8013442:	f7f6 fddb 	bl	8009ffc <fx_stm32_sd_write_blocks>
 8013446:	4603      	mov	r3, r0
 8013448:	63bb      	str	r3, [r7, #56]	; 0x38

    if (status != 0)
 801344a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801344c:	2b00      	cmp	r3, #0
 801344e:	d001      	beq.n	8013454 <sd_write_data+0x14c>
    {
      FX_STM32_SD_WRITE_TRANSFER_ERROR(status);
      return FX_IO_ERROR;
 8013450:	2390      	movs	r3, #144	; 0x90
 8013452:	e00c      	b.n	801346e <sd_write_data+0x166>
    }

    /* when defined, wait for the write notification */
     FX_STM32_SD_WRITE_CPLT_NOTIFY();
 8013454:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8013458:	4809      	ldr	r0, [pc, #36]	; (8013480 <sd_write_data+0x178>)
 801345a:	f003 fb51 	bl	8016b00 <_txe_semaphore_get>
 801345e:	4603      	mov	r3, r0
 8013460:	2b00      	cmp	r3, #0
 8013462:	d001      	beq.n	8013468 <sd_write_data+0x160>
 8013464:	2390      	movs	r3, #144	; 0x90
 8013466:	e002      	b.n	801346e <sd_write_data+0x166>

    status = FX_SUCCESS;
 8013468:	2300      	movs	r3, #0
 801346a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* perform post write operations */
  FX_STM32_SD_POST_WRITE_TRANSFER(media_ptr);


  return status;
 801346c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 801346e:	4618      	mov	r0, r3
 8013470:	3740      	adds	r7, #64	; 0x40
 8013472:	46bd      	mov	sp, r7
 8013474:	bd80      	pop	{r7, pc}
 8013476:	bf00      	nop
 8013478:	24014ce0 	.word	0x24014ce0
 801347c:	e000ed00 	.word	0xe000ed00
 8013480:	24014c50 	.word	0x24014c50

08013484 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8013484:	b580      	push	{r7, lr}
 8013486:	b096      	sub	sp, #88	; 0x58
 8013488:	af00      	add	r7, sp, #0
 801348a:	60f8      	str	r0, [r7, #12]
 801348c:	60b9      	str	r1, [r7, #8]
 801348e:	607a      	str	r2, [r7, #4]
 8013490:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	3303      	adds	r3, #3
 8013496:	f023 0303 	bic.w	r3, r3, #3
 801349a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801349c:	f3ef 8310 	mrs	r3, PRIMASK
 80134a0:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 80134a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 80134a4:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80134a6:	b672      	cpsid	i
    return(int_posture);
 80134a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 80134aa:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80134ac:	4b55      	ldr	r3, [pc, #340]	; (8013604 <_tx_byte_allocate+0x180>)
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 80134b2:	2300      	movs	r3, #0
 80134b4:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80134ba:	621a      	str	r2, [r3, #32]
 80134bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80134be:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80134c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134c2:	f383 8810 	msr	PRIMASK, r3
}
 80134c6:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 80134c8:	6879      	ldr	r1, [r7, #4]
 80134ca:	68f8      	ldr	r0, [r7, #12]
 80134cc:	f000 f9b2 	bl	8013834 <_tx_byte_pool_search>
 80134d0:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80134d2:	f3ef 8310 	mrs	r3, PRIMASK
 80134d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80134d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80134da:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80134dc:	b672      	cpsid	i
    return(int_posture);
 80134de:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 80134e0:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 80134e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d002      	beq.n	80134ee <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 80134e8:	2301      	movs	r3, #1
 80134ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80134ec:	e006      	b.n	80134fc <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	6a1b      	ldr	r3, [r3, #32]
 80134f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80134f4:	429a      	cmp	r2, r3
 80134f6:	d101      	bne.n	80134fc <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 80134f8:	2301      	movs	r3, #1
 80134fa:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 80134fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d0d9      	beq.n	80134b6 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8013502:	68bb      	ldr	r3, [r7, #8]
 8013504:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013506:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8013508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801350a:	2b00      	cmp	r3, #0
 801350c:	d008      	beq.n	8013520 <_tx_byte_allocate+0x9c>
 801350e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013510:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013512:	6a3b      	ldr	r3, [r7, #32]
 8013514:	f383 8810 	msr	PRIMASK, r3
}
 8013518:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 801351a:	2300      	movs	r3, #0
 801351c:	653b      	str	r3, [r7, #80]	; 0x50
 801351e:	e06c      	b.n	80135fa <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8013520:	683b      	ldr	r3, [r7, #0]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d061      	beq.n	80135ea <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8013526:	4b38      	ldr	r3, [pc, #224]	; (8013608 <_tx_byte_allocate+0x184>)
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d007      	beq.n	801353e <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 801352e:	2310      	movs	r3, #16
 8013530:	653b      	str	r3, [r7, #80]	; 0x50
 8013532:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013534:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013536:	69fb      	ldr	r3, [r7, #28]
 8013538:	f383 8810 	msr	PRIMASK, r3
}
 801353c:	e05d      	b.n	80135fa <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 801353e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013540:	4a32      	ldr	r2, [pc, #200]	; (801360c <_tx_byte_allocate+0x188>)
 8013542:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8013544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013546:	68fa      	ldr	r2, [r7, #12]
 8013548:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 801354a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801354c:	68ba      	ldr	r2, [r7, #8]
 801354e:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8013550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013552:	687a      	ldr	r2, [r7, #4]
 8013554:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8013556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013558:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801355c:	1c5a      	adds	r2, r3, #1
 801355e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013560:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013568:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801356e:	1c5a      	adds	r2, r3, #1
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8013574:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013576:	2b00      	cmp	r3, #0
 8013578:	d109      	bne.n	801358e <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801357e:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8013580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013582:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013584:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8013586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013588:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801358a:	675a      	str	r2, [r3, #116]	; 0x74
 801358c:	e011      	b.n	80135b2 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013592:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8013594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013596:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013598:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 801359a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801359c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801359e:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 80135a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80135a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80135a4:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 80135a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80135a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80135aa:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 80135ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80135b0:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 80135b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80135b4:	2209      	movs	r2, #9
 80135b6:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80135b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80135ba:	2201      	movs	r2, #1
 80135bc:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80135be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80135c0:	683a      	ldr	r2, [r7, #0]
 80135c2:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 80135c4:	4b10      	ldr	r3, [pc, #64]	; (8013608 <_tx_byte_allocate+0x184>)
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	3301      	adds	r3, #1
 80135ca:	4a0f      	ldr	r2, [pc, #60]	; (8013608 <_tx_byte_allocate+0x184>)
 80135cc:	6013      	str	r3, [r2, #0]
 80135ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80135d0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80135d2:	69bb      	ldr	r3, [r7, #24]
 80135d4:	f383 8810 	msr	PRIMASK, r3
}
 80135d8:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80135da:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80135dc:	f002 fb06 	bl	8015bec <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80135e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80135e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80135e6:	653b      	str	r3, [r7, #80]	; 0x50
 80135e8:	e007      	b.n	80135fa <_tx_byte_allocate+0x176>
 80135ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80135ec:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80135ee:	697b      	ldr	r3, [r7, #20]
 80135f0:	f383 8810 	msr	PRIMASK, r3
}
 80135f4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 80135f6:	2310      	movs	r3, #16
 80135f8:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 80135fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 80135fc:	4618      	mov	r0, r3
 80135fe:	3758      	adds	r7, #88	; 0x58
 8013600:	46bd      	mov	sp, r7
 8013602:	bd80      	pop	{r7, pc}
 8013604:	24014f1c 	.word	0x24014f1c
 8013608:	24014fb4 	.word	0x24014fb4
 801360c:	08013611 	.word	0x08013611

08013610 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8013610:	b580      	push	{r7, lr}
 8013612:	b08e      	sub	sp, #56	; 0x38
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]
 8013618:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801361a:	f3ef 8310 	mrs	r3, PRIMASK
 801361e:	623b      	str	r3, [r7, #32]
    return(posture);
 8013620:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8013622:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013624:	b672      	cpsid	i
    return(int_posture);
 8013626:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8013628:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801362e:	4a33      	ldr	r2, [pc, #204]	; (80136fc <_tx_byte_pool_cleanup+0xec>)
 8013630:	4293      	cmp	r3, r2
 8013632:	d158      	bne.n	80136e6 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801363a:	683a      	ldr	r2, [r7, #0]
 801363c:	429a      	cmp	r2, r3
 801363e:	d152      	bne.n	80136e6 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013644:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 8013646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013648:	2b00      	cmp	r3, #0
 801364a:	d04c      	beq.n	80136e6 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 801364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	4a2b      	ldr	r2, [pc, #172]	; (8013700 <_tx_byte_pool_cleanup+0xf0>)
 8013652:	4293      	cmp	r3, r2
 8013654:	d147      	bne.n	80136e6 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 8013656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801365a:	2b00      	cmp	r3, #0
 801365c:	d043      	beq.n	80136e6 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	2200      	movs	r2, #0
 8013662:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 8013664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013668:	1e5a      	subs	r2, r3, #1
 801366a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801366c:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 801366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013672:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8013674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013676:	2b00      	cmp	r3, #0
 8013678:	d103      	bne.n	8013682 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 801367a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801367c:	2200      	movs	r2, #0
 801367e:	625a      	str	r2, [r3, #36]	; 0x24
 8013680:	e013      	b.n	80136aa <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013686:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801368c:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801368e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013692:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8013694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013698:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 801369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801369e:	687a      	ldr	r2, [r7, #4]
 80136a0:	429a      	cmp	r2, r3
 80136a2:	d102      	bne.n	80136aa <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 80136a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80136a8:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80136ae:	2b09      	cmp	r3, #9
 80136b0:	d119      	bne.n	80136e6 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	2210      	movs	r2, #16
 80136b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80136ba:	4b12      	ldr	r3, [pc, #72]	; (8013704 <_tx_byte_pool_cleanup+0xf4>)
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	3301      	adds	r3, #1
 80136c0:	4a10      	ldr	r2, [pc, #64]	; (8013704 <_tx_byte_pool_cleanup+0xf4>)
 80136c2:	6013      	str	r3, [r2, #0]
 80136c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136c6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80136c8:	693b      	ldr	r3, [r7, #16]
 80136ca:	f383 8810 	msr	PRIMASK, r3
}
 80136ce:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80136d0:	6878      	ldr	r0, [r7, #4]
 80136d2:	f002 f98b 	bl	80159ec <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80136d6:	f3ef 8310 	mrs	r3, PRIMASK
 80136da:	61bb      	str	r3, [r7, #24]
    return(posture);
 80136dc:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80136de:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80136e0:	b672      	cpsid	i
    return(int_posture);
 80136e2:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80136e4:	637b      	str	r3, [r7, #52]	; 0x34
 80136e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80136e8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	f383 8810 	msr	PRIMASK, r3
}
 80136f0:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80136f2:	bf00      	nop
 80136f4:	3738      	adds	r7, #56	; 0x38
 80136f6:	46bd      	mov	sp, r7
 80136f8:	bd80      	pop	{r7, pc}
 80136fa:	bf00      	nop
 80136fc:	08013611 	.word	0x08013611
 8013700:	42595445 	.word	0x42595445
 8013704:	24014fb4 	.word	0x24014fb4

08013708 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8013708:	b580      	push	{r7, lr}
 801370a:	b08e      	sub	sp, #56	; 0x38
 801370c:	af00      	add	r7, sp, #0
 801370e:	60f8      	str	r0, [r7, #12]
 8013710:	60b9      	str	r1, [r7, #8]
 8013712:	607a      	str	r2, [r7, #4]
 8013714:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8013716:	2234      	movs	r2, #52	; 0x34
 8013718:	2100      	movs	r1, #0
 801371a:	68f8      	ldr	r0, [r7, #12]
 801371c:	f003 fb7a 	bl	8016e14 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8013720:	683b      	ldr	r3, [r7, #0]
 8013722:	f023 0303 	bic.w	r3, r3, #3
 8013726:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	68ba      	ldr	r2, [r7, #8]
 801372c:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	687a      	ldr	r2, [r7, #4]
 8013732:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	683a      	ldr	r2, [r7, #0]
 8013738:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	687a      	ldr	r2, [r7, #4]
 801373e:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	687a      	ldr	r2, [r7, #4]
 8013744:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8013746:	683b      	ldr	r3, [r7, #0]
 8013748:	f1a3 0208 	sub.w	r2, r3, #8
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8013750:	68fb      	ldr	r3, [r7, #12]
 8013752:	2202      	movs	r2, #2
 8013754:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 801375a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801375c:	683b      	ldr	r3, [r7, #0]
 801375e:	4413      	add	r3, r2
 8013760:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8013762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013764:	3b04      	subs	r3, #4
 8013766:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 801376c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801376e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 8013770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013772:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013774:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8013776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013778:	3b04      	subs	r3, #4
 801377a:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 801377c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801377e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8013780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013782:	687a      	ldr	r2, [r7, #4]
 8013784:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 801378a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801378c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 801378e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013790:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013792:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8013798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801379a:	3304      	adds	r3, #4
 801379c:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 801379e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137a0:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 80137a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137a4:	4a1f      	ldr	r2, [pc, #124]	; (8013824 <_tx_byte_pool_create+0x11c>)
 80137a6:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	2200      	movs	r2, #0
 80137ac:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80137ae:	f3ef 8310 	mrs	r3, PRIMASK
 80137b2:	61bb      	str	r3, [r7, #24]
    return(posture);
 80137b4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80137b6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80137b8:	b672      	cpsid	i
    return(int_posture);
 80137ba:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 80137bc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	4a19      	ldr	r2, [pc, #100]	; (8013828 <_tx_byte_pool_create+0x120>)
 80137c2:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 80137c4:	4b19      	ldr	r3, [pc, #100]	; (801382c <_tx_byte_pool_create+0x124>)
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d109      	bne.n	80137e0 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 80137cc:	4a18      	ldr	r2, [pc, #96]	; (8013830 <_tx_byte_pool_create+0x128>)
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	68fa      	ldr	r2, [r7, #12]
 80137d6:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	68fa      	ldr	r2, [r7, #12]
 80137dc:	631a      	str	r2, [r3, #48]	; 0x30
 80137de:	e011      	b.n	8013804 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 80137e0:	4b13      	ldr	r3, [pc, #76]	; (8013830 <_tx_byte_pool_create+0x128>)
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 80137e6:	6a3b      	ldr	r3, [r7, #32]
 80137e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137ea:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 80137ec:	6a3b      	ldr	r3, [r7, #32]
 80137ee:	68fa      	ldr	r2, [r7, #12]
 80137f0:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 80137f2:	69fb      	ldr	r3, [r7, #28]
 80137f4:	68fa      	ldr	r2, [r7, #12]
 80137f6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	69fa      	ldr	r2, [r7, #28]
 80137fc:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	6a3a      	ldr	r2, [r7, #32]
 8013802:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8013804:	4b09      	ldr	r3, [pc, #36]	; (801382c <_tx_byte_pool_create+0x124>)
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	3301      	adds	r3, #1
 801380a:	4a08      	ldr	r2, [pc, #32]	; (801382c <_tx_byte_pool_create+0x124>)
 801380c:	6013      	str	r3, [r2, #0]
 801380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013810:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013812:	693b      	ldr	r3, [r7, #16]
 8013814:	f383 8810 	msr	PRIMASK, r3
}
 8013818:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801381a:	2300      	movs	r3, #0
}
 801381c:	4618      	mov	r0, r3
 801381e:	3738      	adds	r7, #56	; 0x38
 8013820:	46bd      	mov	sp, r7
 8013822:	bd80      	pop	{r7, pc}
 8013824:	ffffeeee 	.word	0xffffeeee
 8013828:	42595445 	.word	0x42595445
 801382c:	24014f10 	.word	0x24014f10
 8013830:	24014f0c 	.word	0x24014f0c

08013834 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 8013834:	b480      	push	{r7}
 8013836:	b097      	sub	sp, #92	; 0x5c
 8013838:	af00      	add	r7, sp, #0
 801383a:	6078      	str	r0, [r7, #4]
 801383c:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 801383e:	2300      	movs	r3, #0
 8013840:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013842:	f3ef 8310 	mrs	r3, PRIMASK
 8013846:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8013848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801384a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 801384c:	b672      	cpsid	i
    return(int_posture);
 801384e:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 8013850:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	689a      	ldr	r2, [r3, #8]
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	68db      	ldr	r3, [r3, #12]
 801385a:	3b02      	subs	r3, #2
 801385c:	00db      	lsls	r3, r3, #3
 801385e:	4413      	add	r3, r2
 8013860:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 8013862:	683a      	ldr	r2, [r7, #0]
 8013864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013866:	429a      	cmp	r2, r3
 8013868:	d308      	bcc.n	801387c <_tx_byte_pool_search+0x48>
 801386a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801386c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801386e:	69fb      	ldr	r3, [r7, #28]
 8013870:	f383 8810 	msr	PRIMASK, r3
}
 8013874:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8013876:	2300      	movs	r3, #0
 8013878:	653b      	str	r3, [r7, #80]	; 0x50
 801387a:	e0dd      	b.n	8013a38 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 801387c:	4b72      	ldr	r3, [pc, #456]	; (8013a48 <_tx_byte_pool_search+0x214>)
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013886:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	695b      	ldr	r3, [r3, #20]
 801388c:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	68db      	ldr	r3, [r3, #12]
 8013892:	3301      	adds	r3, #1
 8013894:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 8013896:	2300      	movs	r3, #0
 8013898:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 801389a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801389c:	3304      	adds	r3, #4
 801389e:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80138a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138a2:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 80138a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	4a68      	ldr	r2, [pc, #416]	; (8013a4c <_tx_byte_pool_search+0x218>)
 80138aa:	4293      	cmp	r3, r2
 80138ac:	d143      	bne.n	8013936 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 80138ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d104      	bne.n	80138be <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80138b8:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 80138ba:	2301      	movs	r3, #1
 80138bc:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80138be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138c0:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 80138c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 80138c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80138ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80138cc:	1ad3      	subs	r3, r2, r3
 80138ce:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 80138d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138d2:	3b08      	subs	r3, #8
 80138d4:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 80138d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80138d8:	683b      	ldr	r3, [r7, #0]
 80138da:	429a      	cmp	r2, r3
 80138dc:	d257      	bcs.n	801398e <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 80138de:	2300      	movs	r3, #0
 80138e0:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80138e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138e4:	3304      	adds	r3, #4
 80138e6:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80138e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138ea:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 80138ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	4a56      	ldr	r2, [pc, #344]	; (8013a4c <_tx_byte_pool_search+0x218>)
 80138f2:	4293      	cmp	r3, r2
 80138f4:	d113      	bne.n	801391e <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80138f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138f8:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 80138fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138fc:	681a      	ldr	r2, [r3, #0]
 80138fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013900:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	68db      	ldr	r3, [r3, #12]
 8013906:	1e5a      	subs	r2, r3, #1
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	695b      	ldr	r3, [r3, #20]
 8013910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013912:	429a      	cmp	r2, r3
 8013914:	d114      	bne.n	8013940 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801391a:	615a      	str	r2, [r3, #20]
 801391c:	e010      	b.n	8013940 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 801391e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013920:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 8013922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 8013928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801392a:	2b00      	cmp	r3, #0
 801392c:	d008      	beq.n	8013940 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 801392e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013930:	3b01      	subs	r3, #1
 8013932:	64bb      	str	r3, [r7, #72]	; 0x48
 8013934:	e004      	b.n	8013940 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8013936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013938:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 801393a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 8013940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013942:	2b00      	cmp	r3, #0
 8013944:	d002      	beq.n	801394c <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 8013946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013948:	3b01      	subs	r3, #1
 801394a:	64bb      	str	r3, [r7, #72]	; 0x48
 801394c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801394e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013950:	693b      	ldr	r3, [r7, #16]
 8013952:	f383 8810 	msr	PRIMASK, r3
}
 8013956:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013958:	f3ef 8310 	mrs	r3, PRIMASK
 801395c:	61bb      	str	r3, [r7, #24]
    return(posture);
 801395e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013960:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013962:	b672      	cpsid	i
    return(int_posture);
 8013964:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 8013966:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	6a1b      	ldr	r3, [r3, #32]
 801396c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801396e:	429a      	cmp	r2, r3
 8013970:	d009      	beq.n	8013986 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	695b      	ldr	r3, [r3, #20]
 8013976:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	68db      	ldr	r3, [r3, #12]
 801397c:	3301      	adds	r3, #1
 801397e:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013984:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 8013986:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013988:	2b00      	cmp	r3, #0
 801398a:	d186      	bne.n	801389a <_tx_byte_pool_search+0x66>
 801398c:	e000      	b.n	8013990 <_tx_byte_pool_search+0x15c>
                    break;
 801398e:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8013990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013992:	2b00      	cmp	r3, #0
 8013994:	d048      	beq.n	8013a28 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 8013996:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013998:	683b      	ldr	r3, [r7, #0]
 801399a:	1ad3      	subs	r3, r2, r3
 801399c:	2b13      	cmp	r3, #19
 801399e:	d91e      	bls.n	80139de <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80139a0:	683b      	ldr	r3, [r7, #0]
 80139a2:	3308      	adds	r3, #8
 80139a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80139a6:	4413      	add	r3, r2
 80139a8:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80139aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139ac:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80139ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139b0:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 80139b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139b4:	681a      	ldr	r2, [r3, #0]
 80139b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139b8:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 80139ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139bc:	3304      	adds	r3, #4
 80139be:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 80139c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139c2:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 80139c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139c6:	4a21      	ldr	r2, [pc, #132]	; (8013a4c <_tx_byte_pool_search+0x218>)
 80139c8:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	68db      	ldr	r3, [r3, #12]
 80139ce:	1c5a      	adds	r2, r3, #1
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 80139d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80139d8:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 80139da:	683b      	ldr	r3, [r7, #0]
 80139dc:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 80139de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80139e0:	3304      	adds	r3, #4
 80139e2:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 80139e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139e6:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80139e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139ea:	687a      	ldr	r2, [r7, #4]
 80139ec:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	689a      	ldr	r2, [r3, #8]
 80139f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139f4:	1ad3      	subs	r3, r2, r3
 80139f6:	f1a3 0208 	sub.w	r2, r3, #8
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	695b      	ldr	r3, [r3, #20]
 8013a02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013a04:	429a      	cmp	r2, r3
 8013a06:	d105      	bne.n	8013a14 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8013a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a0a:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8013a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a0e:	681a      	ldr	r2, [r3, #0]
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	615a      	str	r2, [r3, #20]
 8013a14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a16:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013a18:	68fb      	ldr	r3, [r7, #12]
 8013a1a:	f383 8810 	msr	PRIMASK, r3
}
 8013a1e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8013a20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a22:	3308      	adds	r3, #8
 8013a24:	653b      	str	r3, [r7, #80]	; 0x50
 8013a26:	e007      	b.n	8013a38 <_tx_byte_pool_search+0x204>
 8013a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a2a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013a2c:	68bb      	ldr	r3, [r7, #8]
 8013a2e:	f383 8810 	msr	PRIMASK, r3
}
 8013a32:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 8013a34:	2300      	movs	r3, #0
 8013a36:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 8013a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	375c      	adds	r7, #92	; 0x5c
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a44:	4770      	bx	lr
 8013a46:	bf00      	nop
 8013a48:	24014f1c 	.word	0x24014f1c
 8013a4c:	ffffeeee 	.word	0xffffeeee

08013a50 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8013a54:	f001 fe14 	bl	8015680 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 8013a58:	f002 fb12 	bl	8016080 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8013a5c:	4b12      	ldr	r3, [pc, #72]	; (8013aa8 <_tx_initialize_high_level+0x58>)
 8013a5e:	2200      	movs	r2, #0
 8013a60:	601a      	str	r2, [r3, #0]
 8013a62:	4b12      	ldr	r3, [pc, #72]	; (8013aac <_tx_initialize_high_level+0x5c>)
 8013a64:	2200      	movs	r2, #0
 8013a66:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 8013a68:	4b11      	ldr	r3, [pc, #68]	; (8013ab0 <_tx_initialize_high_level+0x60>)
 8013a6a:	2200      	movs	r2, #0
 8013a6c:	601a      	str	r2, [r3, #0]
 8013a6e:	4b11      	ldr	r3, [pc, #68]	; (8013ab4 <_tx_initialize_high_level+0x64>)
 8013a70:	2200      	movs	r2, #0
 8013a72:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8013a74:	4b10      	ldr	r3, [pc, #64]	; (8013ab8 <_tx_initialize_high_level+0x68>)
 8013a76:	2200      	movs	r2, #0
 8013a78:	601a      	str	r2, [r3, #0]
 8013a7a:	4b10      	ldr	r3, [pc, #64]	; (8013abc <_tx_initialize_high_level+0x6c>)
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8013a80:	4b0f      	ldr	r3, [pc, #60]	; (8013ac0 <_tx_initialize_high_level+0x70>)
 8013a82:	2200      	movs	r2, #0
 8013a84:	601a      	str	r2, [r3, #0]
 8013a86:	4b0f      	ldr	r3, [pc, #60]	; (8013ac4 <_tx_initialize_high_level+0x74>)
 8013a88:	2200      	movs	r2, #0
 8013a8a:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8013a8c:	4b0e      	ldr	r3, [pc, #56]	; (8013ac8 <_tx_initialize_high_level+0x78>)
 8013a8e:	2200      	movs	r2, #0
 8013a90:	601a      	str	r2, [r3, #0]
 8013a92:	4b0e      	ldr	r3, [pc, #56]	; (8013acc <_tx_initialize_high_level+0x7c>)
 8013a94:	2200      	movs	r2, #0
 8013a96:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8013a98:	4b0d      	ldr	r3, [pc, #52]	; (8013ad0 <_tx_initialize_high_level+0x80>)
 8013a9a:	2200      	movs	r2, #0
 8013a9c:	601a      	str	r2, [r3, #0]
 8013a9e:	4b0d      	ldr	r3, [pc, #52]	; (8013ad4 <_tx_initialize_high_level+0x84>)
 8013aa0:	2200      	movs	r2, #0
 8013aa2:	601a      	str	r2, [r3, #0]
#endif
}
 8013aa4:	bf00      	nop
 8013aa6:	bd80      	pop	{r7, pc}
 8013aa8:	24014ee4 	.word	0x24014ee4
 8013aac:	24014ee8 	.word	0x24014ee8
 8013ab0:	24014eec 	.word	0x24014eec
 8013ab4:	24014ef0 	.word	0x24014ef0
 8013ab8:	24014ef4 	.word	0x24014ef4
 8013abc:	24014ef8 	.word	0x24014ef8
 8013ac0:	24014f04 	.word	0x24014f04
 8013ac4:	24014f08 	.word	0x24014f08
 8013ac8:	24014f0c 	.word	0x24014f0c
 8013acc:	24014f10 	.word	0x24014f10
 8013ad0:	24014efc 	.word	0x24014efc
 8013ad4:	24014f00 	.word	0x24014f00

08013ad8 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8013adc:	4b10      	ldr	r3, [pc, #64]	; (8013b20 <_tx_initialize_kernel_enter+0x48>)
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 8013ae4:	d00c      	beq.n	8013b00 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8013ae6:	4b0e      	ldr	r3, [pc, #56]	; (8013b20 <_tx_initialize_kernel_enter+0x48>)
 8013ae8:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8013aec:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8013aee:	f7ec fbf7 	bl	80002e0 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8013af2:	f7ff ffad 	bl	8013a50 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8013af6:	4b0b      	ldr	r3, [pc, #44]	; (8013b24 <_tx_initialize_kernel_enter+0x4c>)
 8013af8:	681b      	ldr	r3, [r3, #0]
 8013afa:	3301      	adds	r3, #1
 8013afc:	4a09      	ldr	r2, [pc, #36]	; (8013b24 <_tx_initialize_kernel_enter+0x4c>)
 8013afe:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8013b00:	4b07      	ldr	r3, [pc, #28]	; (8013b20 <_tx_initialize_kernel_enter+0x48>)
 8013b02:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 8013b06:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8013b08:	4b07      	ldr	r3, [pc, #28]	; (8013b28 <_tx_initialize_kernel_enter+0x50>)
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	f7ec fed9 	bl	80008c4 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8013b12:	4b03      	ldr	r3, [pc, #12]	; (8013b20 <_tx_initialize_kernel_enter+0x48>)
 8013b14:	2200      	movs	r2, #0
 8013b16:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8013b18:	f7ec fc22 	bl	8000360 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8013b1c:	bf00      	nop
 8013b1e:	bd80      	pop	{r7, pc}
 8013b20:	2400006c 	.word	0x2400006c
 8013b24:	24014fb4 	.word	0x24014fb4
 8013b28:	24014f14 	.word	0x24014f14

08013b2c <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	b08e      	sub	sp, #56	; 0x38
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
 8013b34:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013b36:	f3ef 8310 	mrs	r3, PRIMASK
 8013b3a:	623b      	str	r3, [r7, #32]
    return(posture);
 8013b3c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8013b3e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013b40:	b672      	cpsid	i
    return(int_posture);
 8013b42:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 8013b44:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013b4a:	4a33      	ldr	r2, [pc, #204]	; (8013c18 <_tx_mutex_cleanup+0xec>)
 8013b4c:	4293      	cmp	r3, r2
 8013b4e:	d158      	bne.n	8013c02 <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013b56:	683a      	ldr	r2, [r7, #0]
 8013b58:	429a      	cmp	r2, r3
 8013b5a:	d152      	bne.n	8013c02 <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b60:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 8013b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d04c      	beq.n	8013c02 <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 8013b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	4a2b      	ldr	r2, [pc, #172]	; (8013c1c <_tx_mutex_cleanup+0xf0>)
 8013b6e:	4293      	cmp	r3, r2
 8013b70:	d147      	bne.n	8013c02 <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8013b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b74:	69db      	ldr	r3, [r3, #28]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d043      	beq.n	8013c02 <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 8013b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b82:	69db      	ldr	r3, [r3, #28]
 8013b84:	1e5a      	subs	r2, r3, #1
 8013b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b88:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8013b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b8c:	69db      	ldr	r3, [r3, #28]
 8013b8e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8013b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d103      	bne.n	8013b9e <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8013b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b98:	2200      	movs	r2, #0
 8013b9a:	619a      	str	r2, [r3, #24]
 8013b9c:	e013      	b.n	8013bc6 <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013ba2:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ba8:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8013baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013bae:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8013bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013bb4:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8013bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bb8:	699b      	ldr	r3, [r3, #24]
 8013bba:	687a      	ldr	r2, [r7, #4]
 8013bbc:	429a      	cmp	r2, r3
 8013bbe:	d102      	bne.n	8013bc6 <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 8013bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013bc4:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bca:	2b0d      	cmp	r3, #13
 8013bcc:	d119      	bne.n	8013c02 <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	221d      	movs	r2, #29
 8013bd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8013bd6:	4b12      	ldr	r3, [pc, #72]	; (8013c20 <_tx_mutex_cleanup+0xf4>)
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	3301      	adds	r3, #1
 8013bdc:	4a10      	ldr	r2, [pc, #64]	; (8013c20 <_tx_mutex_cleanup+0xf4>)
 8013bde:	6013      	str	r3, [r2, #0]
 8013be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013be2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013be4:	693b      	ldr	r3, [r7, #16]
 8013be6:	f383 8810 	msr	PRIMASK, r3
}
 8013bea:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8013bec:	6878      	ldr	r0, [r7, #4]
 8013bee:	f001 fefd 	bl	80159ec <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8013bf6:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013bf8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013bfa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013bfc:	b672      	cpsid	i
    return(int_posture);
 8013bfe:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8013c00:	637b      	str	r3, [r7, #52]	; 0x34
 8013c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c04:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c06:	68fb      	ldr	r3, [r7, #12]
 8013c08:	f383 8810 	msr	PRIMASK, r3
}
 8013c0c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8013c0e:	bf00      	nop
 8013c10:	3738      	adds	r7, #56	; 0x38
 8013c12:	46bd      	mov	sp, r7
 8013c14:	bd80      	pop	{r7, pc}
 8013c16:	bf00      	nop
 8013c18:	08013b2d 	.word	0x08013b2d
 8013c1c:	4d555445 	.word	0x4d555445
 8013c20:	24014fb4 	.word	0x24014fb4

08013c24 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b08a      	sub	sp, #40	; 0x28
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013c2c:	f3ef 8310 	mrs	r3, PRIMASK
 8013c30:	61fb      	str	r3, [r7, #28]
    return(posture);
 8013c32:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8013c34:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013c36:	b672      	cpsid	i
    return(int_posture);
 8013c38:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 8013c3a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8013c3c:	4b1a      	ldr	r3, [pc, #104]	; (8013ca8 <_tx_mutex_thread_release+0x84>)
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	3301      	adds	r3, #1
 8013c42:	4a19      	ldr	r2, [pc, #100]	; (8013ca8 <_tx_mutex_thread_release+0x84>)
 8013c44:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013c4c:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 8013c4e:	6a3b      	ldr	r3, [r7, #32]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d017      	beq.n	8013c84 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8013c54:	6a3b      	ldr	r3, [r7, #32]
 8013c56:	2201      	movs	r2, #1
 8013c58:	609a      	str	r2, [r3, #8]
 8013c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c5c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	f383 8810 	msr	PRIMASK, r3
}
 8013c64:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 8013c66:	6a38      	ldr	r0, [r7, #32]
 8013c68:	f000 fb9c 	bl	80143a4 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8013c70:	617b      	str	r3, [r7, #20]
    return(posture);
 8013c72:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8013c74:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013c76:	b672      	cpsid	i
    return(int_posture);
 8013c78:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 8013c7a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013c82:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 8013c84:	6a3b      	ldr	r3, [r7, #32]
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d1dd      	bne.n	8013c46 <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 8013c8a:	4b07      	ldr	r3, [pc, #28]	; (8013ca8 <_tx_mutex_thread_release+0x84>)
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	3b01      	subs	r3, #1
 8013c90:	4a05      	ldr	r2, [pc, #20]	; (8013ca8 <_tx_mutex_thread_release+0x84>)
 8013c92:	6013      	str	r3, [r2, #0]
 8013c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c96:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013c98:	68bb      	ldr	r3, [r7, #8]
 8013c9a:	f383 8810 	msr	PRIMASK, r3
}
 8013c9e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 8013ca0:	bf00      	nop
 8013ca2:	3728      	adds	r7, #40	; 0x28
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	bd80      	pop	{r7, pc}
 8013ca8:	24014fb4 	.word	0x24014fb4

08013cac <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b08a      	sub	sp, #40	; 0x28
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	60f8      	str	r0, [r7, #12]
 8013cb4:	60b9      	str	r1, [r7, #8]
 8013cb6:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 8013cb8:	2234      	movs	r2, #52	; 0x34
 8013cba:	2100      	movs	r1, #0
 8013cbc:	68f8      	ldr	r0, [r7, #12]
 8013cbe:	f003 f8a9 	bl	8016e14 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	68ba      	ldr	r2, [r7, #8]
 8013cc6:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	687a      	ldr	r2, [r7, #4]
 8013ccc:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013cce:	f3ef 8310 	mrs	r3, PRIMASK
 8013cd2:	61bb      	str	r3, [r7, #24]
    return(posture);
 8013cd4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8013cd6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013cd8:	b672      	cpsid	i
    return(int_posture);
 8013cda:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 8013cdc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	4a1a      	ldr	r2, [pc, #104]	; (8013d4c <_tx_mutex_create+0xa0>)
 8013ce2:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8013ce4:	4b1a      	ldr	r3, [pc, #104]	; (8013d50 <_tx_mutex_create+0xa4>)
 8013ce6:	4a1b      	ldr	r2, [pc, #108]	; (8013d54 <_tx_mutex_create+0xa8>)
 8013ce8:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8013cea:	4b1b      	ldr	r3, [pc, #108]	; (8013d58 <_tx_mutex_create+0xac>)
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d109      	bne.n	8013d06 <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 8013cf2:	4a1a      	ldr	r2, [pc, #104]	; (8013d5c <_tx_mutex_create+0xb0>)
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	68fa      	ldr	r2, [r7, #12]
 8013cfc:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	68fa      	ldr	r2, [r7, #12]
 8013d02:	625a      	str	r2, [r3, #36]	; 0x24
 8013d04:	e011      	b.n	8013d2a <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 8013d06:	4b15      	ldr	r3, [pc, #84]	; (8013d5c <_tx_mutex_create+0xb0>)
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 8013d0c:	6a3b      	ldr	r3, [r7, #32]
 8013d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d10:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 8013d12:	6a3b      	ldr	r3, [r7, #32]
 8013d14:	68fa      	ldr	r2, [r7, #12]
 8013d16:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 8013d18:	69fb      	ldr	r3, [r7, #28]
 8013d1a:	68fa      	ldr	r2, [r7, #12]
 8013d1c:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	69fa      	ldr	r2, [r7, #28]
 8013d22:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	6a3a      	ldr	r2, [r7, #32]
 8013d28:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 8013d2a:	4b0b      	ldr	r3, [pc, #44]	; (8013d58 <_tx_mutex_create+0xac>)
 8013d2c:	681b      	ldr	r3, [r3, #0]
 8013d2e:	3301      	adds	r3, #1
 8013d30:	4a09      	ldr	r2, [pc, #36]	; (8013d58 <_tx_mutex_create+0xac>)
 8013d32:	6013      	str	r3, [r2, #0]
 8013d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d36:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013d38:	693b      	ldr	r3, [r7, #16]
 8013d3a:	f383 8810 	msr	PRIMASK, r3
}
 8013d3e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8013d40:	2300      	movs	r3, #0
}
 8013d42:	4618      	mov	r0, r3
 8013d44:	3728      	adds	r7, #40	; 0x28
 8013d46:	46bd      	mov	sp, r7
 8013d48:	bd80      	pop	{r7, pc}
 8013d4a:	bf00      	nop
 8013d4c:	4d555445 	.word	0x4d555445
 8013d50:	24014fb8 	.word	0x24014fb8
 8013d54:	08013c25 	.word	0x08013c25
 8013d58:	24014f00 	.word	0x24014f00
 8013d5c:	24014efc 	.word	0x24014efc

08013d60 <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 8013d60:	b580      	push	{r7, lr}
 8013d62:	b096      	sub	sp, #88	; 0x58
 8013d64:	af00      	add	r7, sp, #0
 8013d66:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013d68:	f3ef 8310 	mrs	r3, PRIMASK
 8013d6c:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8013d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8013d70:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8013d72:	b672      	cpsid	i
    return(int_posture);
 8013d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 8013d76:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 8013d7e:	4b4a      	ldr	r3, [pc, #296]	; (8013ea8 <_tx_mutex_delete+0x148>)
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	3b01      	subs	r3, #1
 8013d84:	4a48      	ldr	r2, [pc, #288]	; (8013ea8 <_tx_mutex_delete+0x148>)
 8013d86:	6013      	str	r3, [r2, #0]

    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8013d88:	4b47      	ldr	r3, [pc, #284]	; (8013ea8 <_tx_mutex_delete+0x148>)
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d103      	bne.n	8013d98 <_tx_mutex_delete+0x38>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 8013d90:	4b46      	ldr	r3, [pc, #280]	; (8013eac <_tx_mutex_delete+0x14c>)
 8013d92:	2200      	movs	r2, #0
 8013d94:	601a      	str	r2, [r3, #0]
 8013d96:	e013      	b.n	8013dc0 <_tx_mutex_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	6a1b      	ldr	r3, [r3, #32]
 8013d9c:	64bb      	str	r3, [r7, #72]	; 0x48
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013da2:	647b      	str	r3, [r7, #68]	; 0x44
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 8013da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013da6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013da8:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 8013daa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013dac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013dae:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 8013db0:	4b3e      	ldr	r3, [pc, #248]	; (8013eac <_tx_mutex_delete+0x14c>)
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	687a      	ldr	r2, [r7, #4]
 8013db6:	429a      	cmp	r2, r3
 8013db8:	d102      	bne.n	8013dc0 <_tx_mutex_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 8013dba:	4a3c      	ldr	r2, [pc, #240]	; (8013eac <_tx_mutex_delete+0x14c>)
 8013dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013dbe:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8013dc0:	4b3b      	ldr	r3, [pc, #236]	; (8013eb0 <_tx_mutex_delete+0x150>)
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	3301      	adds	r3, #1
 8013dc6:	4a3a      	ldr	r2, [pc, #232]	; (8013eb0 <_tx_mutex_delete+0x150>)
 8013dc8:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	699b      	ldr	r3, [r3, #24]
 8013dce:	653b      	str	r3, [r7, #80]	; 0x50
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 8013dd6:	687b      	ldr	r3, [r7, #4]
 8013dd8:	69db      	ldr	r3, [r3, #28]
 8013dda:	64fb      	str	r3, [r7, #76]	; 0x4c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	2200      	movs	r2, #0
 8013de0:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	68db      	ldr	r3, [r3, #12]
 8013de6:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 8013de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013dea:	2b00      	cmp	r3, #0
 8013dec:	d013      	beq.n	8013e16 <_tx_mutex_delete+0xb6>
    {

        /* Yes, remove this mutex from the owned list.  */

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	2201      	movs	r2, #1
 8013df2:	609a      	str	r2, [r3, #8]
 8013df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013df6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dfa:	f383 8810 	msr	PRIMASK, r3
}
 8013dfe:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 8013e00:	6878      	ldr	r0, [r7, #4]
 8013e02:	f000 facf 	bl	80143a4 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013e06:	f3ef 8310 	mrs	r3, PRIMASK
 8013e0a:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 8013e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 8013e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 8013e10:	b672      	cpsid	i
    return(int_posture);
 8013e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 8013e14:	657b      	str	r3, [r7, #84]	; 0x54
 8013e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013e18:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e1c:	f383 8810 	msr	PRIMASK, r3
}
 8013e20:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 8013e22:	e024      	b.n	8013e6e <_tx_mutex_delete+0x10e>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8013e24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e26:	3b01      	subs	r3, #1
 8013e28:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8013e2e:	61fb      	str	r3, [r7, #28]
    return(posture);
 8013e30:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8013e32:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013e34:	b672      	cpsid	i
    return(int_posture);
 8013e36:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 8013e38:	657b      	str	r3, [r7, #84]	; 0x54

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8013e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e3c:	2200      	movs	r2, #0
 8013e3e:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8013e40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e42:	2201      	movs	r2, #1
 8013e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8013e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 8013e4e:	4b18      	ldr	r3, [pc, #96]	; (8013eb0 <_tx_mutex_delete+0x150>)
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	3301      	adds	r3, #1
 8013e54:	4a16      	ldr	r2, [pc, #88]	; (8013eb0 <_tx_mutex_delete+0x150>)
 8013e56:	6013      	str	r3, [r2, #0]
 8013e58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013e5a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013e5c:	6a3b      	ldr	r3, [r7, #32]
 8013e5e:	f383 8810 	msr	PRIMASK, r3
}
 8013e62:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8013e64:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8013e66:	f001 fdc1 	bl	80159ec <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 8013e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e6c:	653b      	str	r3, [r7, #80]	; 0x50
    while (suspended_count != ((ULONG) 0))
 8013e6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d1d7      	bne.n	8013e24 <_tx_mutex_delete+0xc4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013e74:	f3ef 8310 	mrs	r3, PRIMASK
 8013e78:	613b      	str	r3, [r7, #16]
    return(posture);
 8013e7a:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 8013e7c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013e7e:	b672      	cpsid	i
    return(int_posture);
 8013e80:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8013e82:	657b      	str	r3, [r7, #84]	; 0x54

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8013e84:	4b0a      	ldr	r3, [pc, #40]	; (8013eb0 <_tx_mutex_delete+0x150>)
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	3b01      	subs	r3, #1
 8013e8a:	4a09      	ldr	r2, [pc, #36]	; (8013eb0 <_tx_mutex_delete+0x150>)
 8013e8c:	6013      	str	r3, [r2, #0]
 8013e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013e90:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013e92:	697b      	ldr	r3, [r7, #20]
 8013e94:	f383 8810 	msr	PRIMASK, r3
}
 8013e98:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 8013e9a:	f001 fd6d 	bl	8015978 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8013e9e:	2300      	movs	r3, #0
}
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	3758      	adds	r7, #88	; 0x58
 8013ea4:	46bd      	mov	sp, r7
 8013ea6:	bd80      	pop	{r7, pc}
 8013ea8:	24014f00 	.word	0x24014f00
 8013eac:	24014efc 	.word	0x24014efc
 8013eb0:	24014fb4 	.word	0x24014fb4

08013eb4 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b092      	sub	sp, #72	; 0x48
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
 8013ebc:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8013ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8013ec2:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8013ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8013ec6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8013ec8:	b672      	cpsid	i
    return(int_posture);
 8013eca:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 8013ecc:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8013ece:	4b7a      	ldr	r3, [pc, #488]	; (80140b8 <_tx_mutex_get+0x204>)
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	689b      	ldr	r3, [r3, #8]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d144      	bne.n	8013f66 <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	2201      	movs	r2, #1
 8013ee0:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013ee6:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 8013ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d032      	beq.n	8013f54 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	691b      	ldr	r3, [r3, #16]
 8013ef2:	2b01      	cmp	r3, #1
 8013ef4:	d106      	bne.n	8013f04 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8013ef6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	2220      	movs	r2, #32
 8013f02:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8013f04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8013f0a:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 8013f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d00f      	beq.n	8013f32 <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8013f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f16:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8013f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f1a:	687a      	ldr	r2, [r7, #4]
 8013f1c:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8013f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f20:	687a      	ldr	r2, [r7, #4]
 8013f22:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013f28:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013f2e:	62da      	str	r2, [r3, #44]	; 0x2c
 8013f30:	e009      	b.n	8013f46 <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8013f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f34:	687a      	ldr	r2, [r7, #4]
 8013f36:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	687a      	ldr	r2, [r7, #4]
 8013f3e:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	687a      	ldr	r2, [r7, #4]
 8013f44:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 8013f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8013f4c:	1c5a      	adds	r2, r3, #1
 8013f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f50:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8013f54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f56:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013f58:	69fb      	ldr	r3, [r7, #28]
 8013f5a:	f383 8810 	msr	PRIMASK, r3
}
 8013f5e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8013f60:	2300      	movs	r3, #0
 8013f62:	647b      	str	r3, [r7, #68]	; 0x44
 8013f64:	e0a2      	b.n	80140ac <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	68db      	ldr	r3, [r3, #12]
 8013f6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013f6c:	429a      	cmp	r2, r3
 8013f6e:	d10d      	bne.n	8013f8c <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	689b      	ldr	r3, [r3, #8]
 8013f74:	1c5a      	adds	r2, r3, #1
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	609a      	str	r2, [r3, #8]
 8013f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f7c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013f7e:	69bb      	ldr	r3, [r7, #24]
 8013f80:	f383 8810 	msr	PRIMASK, r3
}
 8013f84:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 8013f86:	2300      	movs	r3, #0
 8013f88:	647b      	str	r3, [r7, #68]	; 0x44
 8013f8a:	e08f      	b.n	80140ac <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8013f8c:	683b      	ldr	r3, [r7, #0]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	f000 8084 	beq.w	801409c <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8013f94:	4b49      	ldr	r3, [pc, #292]	; (80140bc <_tx_mutex_get+0x208>)
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d008      	beq.n	8013fae <_tx_mutex_get+0xfa>
 8013f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013f9e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8013fa0:	697b      	ldr	r3, [r7, #20]
 8013fa2:	f383 8810 	msr	PRIMASK, r3
}
 8013fa6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 8013fa8:	231d      	movs	r3, #29
 8013faa:	647b      	str	r3, [r7, #68]	; 0x44
 8013fac:	e07e      	b.n	80140ac <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	68db      	ldr	r3, [r3, #12]
 8013fb2:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 8013fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013fb6:	4a42      	ldr	r2, [pc, #264]	; (80140c0 <_tx_mutex_get+0x20c>)
 8013fb8:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 8013fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013fbc:	687a      	ldr	r2, [r7, #4]
 8013fbe:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8013fc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013fc2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8013fc6:	1c5a      	adds	r2, r3, #1
 8013fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013fca:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	69db      	ldr	r3, [r3, #28]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d109      	bne.n	8013fea <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013fda:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8013fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013fde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013fe0:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8013fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013fe4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013fe6:	675a      	str	r2, [r3, #116]	; 0x74
 8013fe8:	e011      	b.n	801400e <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	699b      	ldr	r3, [r3, #24]
 8013fee:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8013ff0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ff4:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8013ff6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ffa:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8013ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ffe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014000:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8014002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014004:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014006:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8014008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801400a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801400c:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	69db      	ldr	r3, [r3, #28]
 8014012:	1c5a      	adds	r2, r3, #1
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 8014018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801401a:	220d      	movs	r2, #13
 801401c:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801401e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014020:	2201      	movs	r2, #1
 8014022:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8014024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014026:	683a      	ldr	r2, [r7, #0]
 8014028:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 801402a:	4b24      	ldr	r3, [pc, #144]	; (80140bc <_tx_mutex_get+0x208>)
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	3301      	adds	r3, #1
 8014030:	4a22      	ldr	r2, [pc, #136]	; (80140bc <_tx_mutex_get+0x208>)
 8014032:	6013      	str	r3, [r2, #0]
 8014034:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014036:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014038:	693b      	ldr	r3, [r7, #16]
 801403a:	f383 8810 	msr	PRIMASK, r3
}
 801403e:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	691b      	ldr	r3, [r3, #16]
 8014044:	2b01      	cmp	r3, #1
 8014046:	d121      	bne.n	801408c <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801404c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801404e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014050:	429a      	cmp	r2, r3
 8014052:	d903      	bls.n	801405c <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 8014054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 801405c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801405e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014062:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8014066:	429a      	cmp	r2, r3
 8014068:	d204      	bcs.n	8014074 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 801406a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801406c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801406e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014070:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 8014074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801407c:	429a      	cmp	r2, r3
 801407e:	d905      	bls.n	801408c <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 8014080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014084:	4619      	mov	r1, r3
 8014086:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014088:	f000 f8ce 	bl	8014228 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 801408c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 801408e:	f001 fdad 	bl	8015bec <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8014092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014094:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014098:	647b      	str	r3, [r7, #68]	; 0x44
 801409a:	e007      	b.n	80140ac <_tx_mutex_get+0x1f8>
 801409c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801409e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80140a0:	68fb      	ldr	r3, [r7, #12]
 80140a2:	f383 8810 	msr	PRIMASK, r3
}
 80140a6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 80140a8:	231d      	movs	r3, #29
 80140aa:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 80140ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80140ae:	4618      	mov	r0, r3
 80140b0:	3748      	adds	r7, #72	; 0x48
 80140b2:	46bd      	mov	sp, r7
 80140b4:	bd80      	pop	{r7, pc}
 80140b6:	bf00      	nop
 80140b8:	24014f1c 	.word	0x24014f1c
 80140bc:	24014fb4 	.word	0x24014fb4
 80140c0:	08013b2d 	.word	0x08013b2d

080140c4 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 80140c4:	b580      	push	{r7, lr}
 80140c6:	b092      	sub	sp, #72	; 0x48
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80140cc:	f3ef 8310 	mrs	r3, PRIMASK
 80140d0:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 80140d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 80140d4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 80140d6:	b672      	cpsid	i
    return(int_posture);
 80140d8:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 80140da:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	69db      	ldr	r3, [r3, #28]
 80140e0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 80140e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140e4:	2b01      	cmp	r3, #1
 80140e6:	d805      	bhi.n	80140f4 <_tx_mutex_prioritize+0x30>
 80140e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80140ea:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80140ec:	69fb      	ldr	r3, [r7, #28]
 80140ee:	f383 8810 	msr	PRIMASK, r3
}
 80140f2:	e092      	b.n	801421a <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 80140f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140f6:	2b02      	cmp	r3, #2
 80140f8:	d114      	bne.n	8014124 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	699b      	ldr	r3, [r3, #24]
 80140fe:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8014100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014104:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 8014106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801410a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801410c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801410e:	429a      	cmp	r2, r3
 8014110:	d202      	bcs.n	8014118 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014116:	619a      	str	r2, [r3, #24]
 8014118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801411a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801411c:	69bb      	ldr	r3, [r7, #24]
 801411e:	f383 8810 	msr	PRIMASK, r3
}
 8014122:	e07a      	b.n	801421a <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	699b      	ldr	r3, [r3, #24]
 8014128:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 801412a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801412c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 801412e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014132:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8014134:	4b3b      	ldr	r3, [pc, #236]	; (8014224 <_tx_mutex_prioritize+0x160>)
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	3301      	adds	r3, #1
 801413a:	4a3a      	ldr	r2, [pc, #232]	; (8014224 <_tx_mutex_prioritize+0x160>)
 801413c:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 801413e:	2300      	movs	r3, #0
 8014140:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8014142:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801414a:	429a      	cmp	r2, r3
 801414c:	d201      	bcs.n	8014152 <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 801414e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014150:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014152:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014154:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	f383 8810 	msr	PRIMASK, r3
}
 801415c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801415e:	f3ef 8310 	mrs	r3, PRIMASK
 8014162:	617b      	str	r3, [r7, #20]
    return(posture);
 8014164:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8014166:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014168:	b672      	cpsid	i
    return(int_posture);
 801416a:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 801416c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	699b      	ldr	r3, [r3, #24]
 8014172:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014174:	429a      	cmp	r2, r3
 8014176:	d002      	beq.n	801417e <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 8014178:	2301      	movs	r3, #1
 801417a:	633b      	str	r3, [r7, #48]	; 0x30
 801417c:	e006      	b.n	801418c <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	69db      	ldr	r3, [r3, #28]
 8014182:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014184:	429a      	cmp	r2, r3
 8014186:	d001      	beq.n	801418c <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 8014188:	2301      	movs	r3, #1
 801418a:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 801418c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801418e:	2b00      	cmp	r3, #0
 8014190:	d103      	bne.n	801419a <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8014192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014196:	643b      	str	r3, [r7, #64]	; 0x40
 8014198:	e00c      	b.n	80141b4 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	699b      	ldr	r3, [r3, #24]
 801419e:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	69db      	ldr	r3, [r3, #28]
 80141a4:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 80141a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141a8:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 80141aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80141ae:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 80141b0:	2300      	movs	r3, #0
 80141b2:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 80141b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80141b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141b8:	429a      	cmp	r2, r3
 80141ba:	d1c2      	bne.n	8014142 <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 80141bc:	4b19      	ldr	r3, [pc, #100]	; (8014224 <_tx_mutex_prioritize+0x160>)
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	3b01      	subs	r3, #1
 80141c2:	4a18      	ldr	r2, [pc, #96]	; (8014224 <_tx_mutex_prioritize+0x160>)
 80141c4:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 80141c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80141c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141ca:	429a      	cmp	r2, r3
 80141cc:	d01d      	beq.n	801420a <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 80141ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80141d2:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 80141d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80141d8:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 80141da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80141de:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 80141e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80141e4:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 80141e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80141ea:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 80141ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80141f0:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 80141f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80141f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80141f6:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 80141f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80141fc:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 80141fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014200:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014202:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014208:	619a      	str	r2, [r3, #24]
 801420a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801420c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	f383 8810 	msr	PRIMASK, r3
}
 8014214:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8014216:	f001 fbaf 	bl	8015978 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 801421a:	2300      	movs	r3, #0
#endif
}
 801421c:	4618      	mov	r0, r3
 801421e:	3748      	adds	r7, #72	; 0x48
 8014220:	46bd      	mov	sp, r7
 8014222:	bd80      	pop	{r7, pc}
 8014224:	24014fb4 	.word	0x24014fb4

08014228 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 8014228:	b580      	push	{r7, lr}
 801422a:	b090      	sub	sp, #64	; 0x40
 801422c:	af00      	add	r7, sp, #0
 801422e:	6078      	str	r0, [r7, #4]
 8014230:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014232:	f3ef 8310 	mrs	r3, PRIMASK
 8014236:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8014238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801423a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801423c:	b672      	cpsid	i
    return(int_posture);
 801423e:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8014240:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014246:	2b00      	cmp	r3, #0
 8014248:	d017      	beq.n	801427a <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	683a      	ldr	r2, [r7, #0]
 801424e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8014256:	683a      	ldr	r2, [r7, #0]
 8014258:	429a      	cmp	r2, r3
 801425a:	d905      	bls.n	8014268 <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	63da      	str	r2, [r3, #60]	; 0x3c
 8014266:	e002      	b.n	801426e <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	683a      	ldr	r2, [r7, #0]
 801426c:	63da      	str	r2, [r3, #60]	; 0x3c
 801426e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014270:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014274:	f383 8810 	msr	PRIMASK, r3
}
 8014278:	e089      	b.n	801438e <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 801427a:	4b47      	ldr	r3, [pc, #284]	; (8014398 <_tx_mutex_priority_change+0x170>)
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014284:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 8014286:	4b45      	ldr	r3, [pc, #276]	; (801439c <_tx_mutex_priority_change+0x174>)
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	3302      	adds	r3, #2
 801428c:	4a43      	ldr	r2, [pc, #268]	; (801439c <_tx_mutex_priority_change+0x174>)
 801428e:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	220e      	movs	r2, #14
 8014294:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	2201      	movs	r2, #1
 801429a:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	2200      	movs	r2, #0
 80142a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80142a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142a4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80142a6:	69bb      	ldr	r3, [r7, #24]
 80142a8:	f383 8810 	msr	PRIMASK, r3
}
 80142ac:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 80142ae:	6878      	ldr	r0, [r7, #4]
 80142b0:	f001 fc9c 	bl	8015bec <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80142b4:	f3ef 8310 	mrs	r3, PRIMASK
 80142b8:	623b      	str	r3, [r7, #32]
    return(posture);
 80142ba:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80142bc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80142be:	b672      	cpsid	i
    return(int_posture);
 80142c0:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 80142c2:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	683a      	ldr	r2, [r7, #0]
 80142c8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80142d0:	683a      	ldr	r2, [r7, #0]
 80142d2:	429a      	cmp	r2, r3
 80142d4:	d905      	bls.n	80142e2 <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	63da      	str	r2, [r3, #60]	; 0x3c
 80142e0:	e002      	b.n	80142e8 <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	683a      	ldr	r2, [r7, #0]
 80142e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80142e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142ea:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80142ec:	68fb      	ldr	r3, [r7, #12]
 80142ee:	f383 8810 	msr	PRIMASK, r3
}
 80142f2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 80142f4:	6878      	ldr	r0, [r7, #4]
 80142f6:	f001 fb79 	bl	80159ec <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80142fa:	f3ef 8310 	mrs	r3, PRIMASK
 80142fe:	617b      	str	r3, [r7, #20]
    return(posture);
 8014300:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8014302:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014304:	b672      	cpsid	i
    return(int_posture);
 8014306:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8014308:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 801430a:	4b23      	ldr	r3, [pc, #140]	; (8014398 <_tx_mutex_priority_change+0x170>)
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 8014310:	687a      	ldr	r2, [r7, #4]
 8014312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014314:	429a      	cmp	r2, r3
 8014316:	d034      	beq.n	8014382 <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801431c:	2b00      	cmp	r3, #0
 801431e:	d130      	bne.n	8014382 <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014328:	429a      	cmp	r2, r3
 801432a:	d811      	bhi.n	8014350 <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 801432c:	687a      	ldr	r2, [r7, #4]
 801432e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014330:	429a      	cmp	r2, r3
 8014332:	d126      	bne.n	8014382 <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 8014334:	4a18      	ldr	r2, [pc, #96]	; (8014398 <_tx_mutex_priority_change+0x170>)
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 801433a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801433c:	683b      	ldr	r3, [r7, #0]
 801433e:	429a      	cmp	r2, r3
 8014340:	d21f      	bcs.n	8014382 <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014346:	4916      	ldr	r1, [pc, #88]	; (80143a0 <_tx_mutex_priority_change+0x178>)
 8014348:	687a      	ldr	r2, [r7, #4]
 801434a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801434e:	e018      	b.n	8014382 <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014358:	429a      	cmp	r2, r3
 801435a:	d212      	bcs.n	8014382 <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014364:	429a      	cmp	r2, r3
 8014366:	d80c      	bhi.n	8014382 <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8014368:	4a0b      	ldr	r2, [pc, #44]	; (8014398 <_tx_mutex_priority_change+0x170>)
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 801436e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014370:	683b      	ldr	r3, [r7, #0]
 8014372:	429a      	cmp	r2, r3
 8014374:	d205      	bcs.n	8014382 <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801437a:	4909      	ldr	r1, [pc, #36]	; (80143a0 <_tx_mutex_priority_change+0x178>)
 801437c:	687a      	ldr	r2, [r7, #4]
 801437e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8014382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014384:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014386:	68bb      	ldr	r3, [r7, #8]
 8014388:	f383 8810 	msr	PRIMASK, r3
}
 801438c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 801438e:	bf00      	nop
 8014390:	3740      	adds	r7, #64	; 0x40
 8014392:	46bd      	mov	sp, r7
 8014394:	bd80      	pop	{r7, pc}
 8014396:	bf00      	nop
 8014398:	24014f20 	.word	0x24014f20
 801439c:	24014fb4 	.word	0x24014fb4
 80143a0:	24014f34 	.word	0x24014f34

080143a4 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b0a6      	sub	sp, #152	; 0x98
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 80143ac:	2320      	movs	r3, #32
 80143ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80143b2:	f3ef 8310 	mrs	r3, PRIMASK
 80143b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 80143b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 80143ba:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 80143bc:	b672      	cpsid	i
    return(int_posture);
 80143be:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 80143c0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	689b      	ldr	r3, [r3, #8]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	f000 81ff 	beq.w	80147cc <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	68db      	ldr	r3, [r3, #12]
 80143d2:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80143d4:	4ba3      	ldr	r3, [pc, #652]	; (8014664 <_tx_mutex_put+0x2c0>)
 80143d6:	681b      	ldr	r3, [r3, #0]
 80143d8:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	68db      	ldr	r3, [r3, #12]
 80143de:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80143e0:	429a      	cmp	r2, r3
 80143e2:	d00d      	beq.n	8014400 <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 80143e4:	4ba0      	ldr	r3, [pc, #640]	; (8014668 <_tx_mutex_put+0x2c4>)
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d109      	bne.n	8014400 <_tx_mutex_put+0x5c>
 80143ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80143f0:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80143f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80143f4:	f383 8810 	msr	PRIMASK, r3
}
 80143f8:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 80143fa:	231e      	movs	r3, #30
 80143fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 8014400:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014404:	2b20      	cmp	r3, #32
 8014406:	f040 81eb 	bne.w	80147e0 <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	689b      	ldr	r3, [r3, #8]
 801440e:	1e5a      	subs	r2, r3, #1
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	689b      	ldr	r3, [r3, #8]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d00a      	beq.n	8014432 <_tx_mutex_put+0x8e>
 801441c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014420:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014424:	f383 8810 	msr	PRIMASK, r3
}
 8014428:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 801442a:	2300      	movs	r3, #0
 801442c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014430:	e1d6      	b.n	80147e0 <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 8014432:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014434:	2b00      	cmp	r3, #0
 8014436:	d10a      	bne.n	801444e <_tx_mutex_put+0xaa>
 8014438:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801443c:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801443e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014440:	f383 8810 	msr	PRIMASK, r3
}
 8014444:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 8014446:	2300      	movs	r3, #0
 8014448:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801444c:	e1c8      	b.n	80147e0 <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 801444e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014450:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014454:	1e5a      	subs	r2, r3, #1
 8014456:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014458:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 801445c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801445e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014462:	2b00      	cmp	r3, #0
 8014464:	d104      	bne.n	8014470 <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 8014466:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014468:	2200      	movs	r2, #0
 801446a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 801446e:	e019      	b.n	80144a4 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014474:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801447c:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 801447e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014482:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014484:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 8014486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014488:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801448c:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 801448e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014490:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014494:	687a      	ldr	r2, [r7, #4]
 8014496:	429a      	cmp	r2, r3
 8014498:	d104      	bne.n	80144a4 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 801449a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801449c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80144a0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	699b      	ldr	r3, [r3, #24]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d110      	bne.n	80144ce <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	691b      	ldr	r3, [r3, #16]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d10c      	bne.n	80144ce <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	2200      	movs	r2, #0
 80144b8:	60da      	str	r2, [r3, #12]
 80144ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80144be:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80144c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80144c2:	f383 8810 	msr	PRIMASK, r3
}
 80144c6:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 80144c8:	2300      	movs	r3, #0
 80144ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 80144ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80144d2:	2b20      	cmp	r3, #32
 80144d4:	f040 8184 	bne.w	80147e0 <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 80144d8:	2300      	movs	r3, #0
 80144da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 80144de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80144e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80144e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	691b      	ldr	r3, [r3, #16]
 80144ec:	2b01      	cmp	r3, #1
 80144ee:	d155      	bne.n	801459c <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80144f0:	4b5d      	ldr	r3, [pc, #372]	; (8014668 <_tx_mutex_put+0x2c4>)
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	3301      	adds	r3, #1
 80144f6:	4a5c      	ldr	r2, [pc, #368]	; (8014668 <_tx_mutex_put+0x2c4>)
 80144f8:	6013      	str	r3, [r2, #0]
 80144fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80144fe:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014502:	f383 8810 	msr	PRIMASK, r3
}
 8014506:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8014508:	2320      	movs	r3, #32
 801450a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 801450e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014510:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8014514:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 8014518:	e01f      	b.n	801455a <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 801451a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801451e:	691b      	ldr	r3, [r3, #16]
 8014520:	2b01      	cmp	r3, #1
 8014522:	d10b      	bne.n	801453c <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 8014524:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801452a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801452e:	429a      	cmp	r2, r3
 8014530:	d904      	bls.n	801453c <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 8014532:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014538:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 801453c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014542:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 8014546:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014548:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801454c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8014550:	429a      	cmp	r2, r3
 8014552:	d102      	bne.n	801455a <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 8014554:	2300      	movs	r3, #0
 8014556:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 801455a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801455e:	2b00      	cmp	r3, #0
 8014560:	d1db      	bne.n	801451a <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014562:	f3ef 8310 	mrs	r3, PRIMASK
 8014566:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 8014568:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 801456a:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 801456c:	b672      	cpsid	i
    return(int_posture);
 801456e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 8014570:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8014574:	4b3c      	ldr	r3, [pc, #240]	; (8014668 <_tx_mutex_put+0x2c4>)
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	3b01      	subs	r3, #1
 801457a:	4a3b      	ldr	r2, [pc, #236]	; (8014668 <_tx_mutex_put+0x2c4>)
 801457c:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 801457e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014580:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014584:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 8014588:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801458c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014590:	429a      	cmp	r2, r3
 8014592:	d203      	bcs.n	801459c <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 8014594:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014598:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	69db      	ldr	r3, [r3, #28]
 80145a0:	2b01      	cmp	r3, #1
 80145a2:	d920      	bls.n	80145e6 <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	691b      	ldr	r3, [r3, #16]
 80145a8:	2b01      	cmp	r3, #1
 80145aa:	d11c      	bne.n	80145e6 <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 80145ac:	4b2e      	ldr	r3, [pc, #184]	; (8014668 <_tx_mutex_put+0x2c4>)
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	3301      	adds	r3, #1
 80145b2:	4a2d      	ldr	r2, [pc, #180]	; (8014668 <_tx_mutex_put+0x2c4>)
 80145b4:	6013      	str	r3, [r2, #0]
 80145b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80145ba:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80145bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145be:	f383 8810 	msr	PRIMASK, r3
}
 80145c2:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 80145c4:	6878      	ldr	r0, [r7, #4]
 80145c6:	f7ff fd7d 	bl	80140c4 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80145ca:	f3ef 8310 	mrs	r3, PRIMASK
 80145ce:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 80145d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 80145d2:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 80145d4:	b672      	cpsid	i
    return(int_posture);
 80145d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 80145d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 80145dc:	4b22      	ldr	r3, [pc, #136]	; (8014668 <_tx_mutex_put+0x2c4>)
 80145de:	681b      	ldr	r3, [r3, #0]
 80145e0:	3b01      	subs	r3, #1
 80145e2:	4a21      	ldr	r2, [pc, #132]	; (8014668 <_tx_mutex_put+0x2c4>)
 80145e4:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	699b      	ldr	r3, [r3, #24]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d13e      	bne.n	801466c <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80145ee:	4b1e      	ldr	r3, [pc, #120]	; (8014668 <_tx_mutex_put+0x2c4>)
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	3301      	adds	r3, #1
 80145f4:	4a1c      	ldr	r2, [pc, #112]	; (8014668 <_tx_mutex_put+0x2c4>)
 80145f6:	6013      	str	r3, [r2, #0]
 80145f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80145fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80145fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014600:	f383 8810 	msr	PRIMASK, r3
}
 8014604:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	2220      	movs	r2, #32
 801460a:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	68db      	ldr	r3, [r3, #12]
 8014610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014612:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8014616:	429a      	cmp	r2, r3
 8014618:	d006      	beq.n	8014628 <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	68db      	ldr	r3, [r3, #12]
 801461e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8014622:	4618      	mov	r0, r3
 8014624:	f7ff fe00 	bl	8014228 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014628:	f3ef 8310 	mrs	r3, PRIMASK
 801462c:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 801462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8014630:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014632:	b672      	cpsid	i
    return(int_posture);
 8014634:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 8014636:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 801463a:	4b0b      	ldr	r3, [pc, #44]	; (8014668 <_tx_mutex_put+0x2c4>)
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	3b01      	subs	r3, #1
 8014640:	4a09      	ldr	r2, [pc, #36]	; (8014668 <_tx_mutex_put+0x2c4>)
 8014642:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8014644:	687b      	ldr	r3, [r7, #4]
 8014646:	2200      	movs	r2, #0
 8014648:	60da      	str	r2, [r3, #12]
 801464a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801464e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014652:	f383 8810 	msr	PRIMASK, r3
}
 8014656:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 8014658:	f001 f98e 	bl	8015978 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 801465c:	2300      	movs	r3, #0
 801465e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014662:	e0bd      	b.n	80147e0 <_tx_mutex_put+0x43c>
 8014664:	24014f1c 	.word	0x24014f1c
 8014668:	24014fb4 	.word	0x24014fb4
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	699b      	ldr	r3, [r3, #24]
 8014670:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	691b      	ldr	r3, [r3, #16]
 8014676:	2b01      	cmp	r3, #1
 8014678:	d10a      	bne.n	8014690 <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	68db      	ldr	r3, [r3, #12]
 801467e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8014682:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	2220      	movs	r2, #32
 801468e:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8014690:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014692:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014696:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8014698:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801469a:	2b00      	cmp	r3, #0
 801469c:	d10a      	bne.n	80146b4 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 801469e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80146a0:	687a      	ldr	r2, [r7, #4]
 80146a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	687a      	ldr	r2, [r7, #4]
 80146aa:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	687a      	ldr	r2, [r7, #4]
 80146b0:	631a      	str	r2, [r3, #48]	; 0x30
 80146b2:	e016      	b.n	80146e2 <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 80146b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80146b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80146ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 80146be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80146c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146c4:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 80146c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80146ca:	687a      	ldr	r2, [r7, #4]
 80146cc:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 80146ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80146d0:	687a      	ldr	r2, [r7, #4]
 80146d2:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80146d8:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80146e0:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 80146e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80146e4:	1c5a      	adds	r2, r3, #1
 80146e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80146e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	2201      	movs	r2, #1
 80146f0:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80146f6:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	69db      	ldr	r3, [r3, #28]
 80146fc:	1e5a      	subs	r2, r3, #1
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	69db      	ldr	r3, [r3, #28]
 8014706:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8014708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801470a:	2b00      	cmp	r3, #0
 801470c:	d103      	bne.n	8014716 <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	2200      	movs	r2, #0
 8014712:	619a      	str	r2, [r3, #24]
 8014714:	e00e      	b.n	8014734 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8014716:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801471a:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014720:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8014722:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014726:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8014728:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801472a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801472c:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 801472e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014730:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8014732:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8014734:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014736:	2200      	movs	r2, #0
 8014738:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801473a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801473c:	2200      	movs	r2, #0
 801473e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8014742:	4b2a      	ldr	r3, [pc, #168]	; (80147ec <_tx_mutex_put+0x448>)
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	3301      	adds	r3, #1
 8014748:	4a28      	ldr	r2, [pc, #160]	; (80147ec <_tx_mutex_put+0x448>)
 801474a:	6013      	str	r3, [r2, #0]
 801474c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8014750:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014752:	69fb      	ldr	r3, [r7, #28]
 8014754:	f383 8810 	msr	PRIMASK, r3
}
 8014758:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	691b      	ldr	r3, [r3, #16]
 801475e:	2b01      	cmp	r3, #1
 8014760:	d12d      	bne.n	80147be <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	69db      	ldr	r3, [r3, #28]
 8014766:	2b00      	cmp	r3, #0
 8014768:	d01c      	beq.n	80147a4 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 801476a:	6878      	ldr	r0, [r7, #4]
 801476c:	f7ff fcaa 	bl	80140c4 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014770:	f3ef 8310 	mrs	r3, PRIMASK
 8014774:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014776:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014778:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801477a:	b672      	cpsid	i
    return(int_posture);
 801477c:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 801477e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	699b      	ldr	r3, [r3, #24]
 8014786:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 8014788:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801478a:	2b00      	cmp	r3, #0
 801478c:	d003      	beq.n	8014796 <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 801478e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014790:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	629a      	str	r2, [r3, #40]	; 0x28
 8014796:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801479a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801479c:	693b      	ldr	r3, [r7, #16]
 801479e:	f383 8810 	msr	PRIMASK, r3
}
 80147a2:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 80147a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80147a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147aa:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80147ae:	429a      	cmp	r2, r3
 80147b0:	d005      	beq.n	80147be <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 80147b2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80147b6:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80147ba:	f7ff fd35 	bl	8014228 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 80147be:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80147c0:	f001 f914 	bl	80159ec <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 80147c4:	2300      	movs	r3, #0
 80147c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80147ca:	e009      	b.n	80147e0 <_tx_mutex_put+0x43c>
 80147cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80147d0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	f383 8810 	msr	PRIMASK, r3
}
 80147d8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 80147da:	231e      	movs	r3, #30
 80147dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 80147e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 80147e4:	4618      	mov	r0, r3
 80147e6:	3798      	adds	r7, #152	; 0x98
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bd80      	pop	{r7, pc}
 80147ec:	24014fb4 	.word	0x24014fb4

080147f0 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b08e      	sub	sp, #56	; 0x38
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	6078      	str	r0, [r7, #4]
 80147f8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80147fa:	f3ef 8310 	mrs	r3, PRIMASK
 80147fe:	623b      	str	r3, [r7, #32]
    return(posture);
 8014800:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014802:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014804:	b672      	cpsid	i
    return(int_posture);
 8014806:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 8014808:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801480e:	4a37      	ldr	r2, [pc, #220]	; (80148ec <_tx_queue_cleanup+0xfc>)
 8014810:	4293      	cmp	r3, r2
 8014812:	d161      	bne.n	80148d8 <_tx_queue_cleanup+0xe8>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801481a:	683a      	ldr	r2, [r7, #0]
 801481c:	429a      	cmp	r2, r3
 801481e:	d15b      	bne.n	80148d8 <_tx_queue_cleanup+0xe8>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014824:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 8014826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014828:	2b00      	cmp	r3, #0
 801482a:	d055      	beq.n	80148d8 <_tx_queue_cleanup+0xe8>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 801482c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	4a2f      	ldr	r2, [pc, #188]	; (80148f0 <_tx_queue_cleanup+0x100>)
 8014832:	4293      	cmp	r3, r2
 8014834:	d150      	bne.n	80148d8 <_tx_queue_cleanup+0xe8>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 8014836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801483a:	2b00      	cmp	r3, #0
 801483c:	d04c      	beq.n	80148d8 <_tx_queue_cleanup+0xe8>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	2200      	movs	r2, #0
 8014842:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 8014844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014848:	1e5a      	subs	r2, r3, #1
 801484a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801484c:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 801484e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014852:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8014854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014856:	2b00      	cmp	r3, #0
 8014858:	d103      	bne.n	8014862 <_tx_queue_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 801485a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801485c:	2200      	movs	r2, #0
 801485e:	629a      	str	r2, [r3, #40]	; 0x28
 8014860:	e013      	b.n	801488a <_tx_queue_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014866:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801486c:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801486e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014872:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8014874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014876:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014878:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 801487a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801487c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801487e:	687a      	ldr	r2, [r7, #4]
 8014880:	429a      	cmp	r2, r3
 8014882:	d102      	bne.n	801488a <_tx_queue_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 8014884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014886:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014888:	629a      	str	r2, [r3, #40]	; 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801488e:	2b05      	cmp	r3, #5
 8014890:	d122      	bne.n	80148d8 <_tx_queue_cleanup+0xe8>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8014892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014894:	691b      	ldr	r3, [r3, #16]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d004      	beq.n	80148a4 <_tx_queue_cleanup+0xb4>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	220b      	movs	r2, #11
 801489e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80148a2:	e003      	b.n	80148ac <_tx_queue_cleanup+0xbc>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	220a      	movs	r2, #10
 80148a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80148ac:	4b11      	ldr	r3, [pc, #68]	; (80148f4 <_tx_queue_cleanup+0x104>)
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	3301      	adds	r3, #1
 80148b2:	4a10      	ldr	r2, [pc, #64]	; (80148f4 <_tx_queue_cleanup+0x104>)
 80148b4:	6013      	str	r3, [r2, #0]
 80148b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148b8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80148ba:	693b      	ldr	r3, [r7, #16]
 80148bc:	f383 8810 	msr	PRIMASK, r3
}
 80148c0:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80148c2:	6878      	ldr	r0, [r7, #4]
 80148c4:	f001 f892 	bl	80159ec <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80148c8:	f3ef 8310 	mrs	r3, PRIMASK
 80148cc:	61bb      	str	r3, [r7, #24]
    return(posture);
 80148ce:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80148d0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80148d2:	b672      	cpsid	i
    return(int_posture);
 80148d4:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80148d6:	637b      	str	r3, [r7, #52]	; 0x34
 80148d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148da:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	f383 8810 	msr	PRIMASK, r3
}
 80148e2:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80148e4:	bf00      	nop
 80148e6:	3738      	adds	r7, #56	; 0x38
 80148e8:	46bd      	mov	sp, r7
 80148ea:	bd80      	pop	{r7, pc}
 80148ec:	080147f1 	.word	0x080147f1
 80148f0:	51554555 	.word	0x51554555
 80148f4:	24014fb4 	.word	0x24014fb4

080148f8 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b08c      	sub	sp, #48	; 0x30
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	60f8      	str	r0, [r7, #12]
 8014900:	60b9      	str	r1, [r7, #8]
 8014902:	607a      	str	r2, [r7, #4]
 8014904:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 8014906:	2238      	movs	r2, #56	; 0x38
 8014908:	2100      	movs	r1, #0
 801490a:	68f8      	ldr	r0, [r7, #12]
 801490c:	f002 fa82 	bl	8016e14 <memset>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	68ba      	ldr	r2, [r7, #8]
 8014914:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 8014916:	68fb      	ldr	r3, [r7, #12]
 8014918:	687a      	ldr	r2, [r7, #4]
 801491a:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	009b      	lsls	r3, r3, #2
 8014920:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014922:	fbb2 f3f3 	udiv	r3, r2, r3
 8014926:	62fb      	str	r3, [r7, #44]	; 0x2c
    used_words =  capacity * message_size;
 8014928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801492a:	687a      	ldr	r2, [r7, #4]
 801492c:	fb02 f303 	mul.w	r3, r2, r3
 8014930:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	683a      	ldr	r2, [r7, #0]
 8014936:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	699a      	ldr	r2, [r3, #24]
 801493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801493e:	009b      	lsls	r3, r3, #2
 8014940:	441a      	add	r2, r3
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	683a      	ldr	r2, [r7, #0]
 801494a:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	683a      	ldr	r2, [r7, #0]
 8014950:	625a      	str	r2, [r3, #36]	; 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014956:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801495c:	60da      	str	r2, [r3, #12]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801495e:	f3ef 8310 	mrs	r3, PRIMASK
 8014962:	61bb      	str	r3, [r7, #24]
    return(posture);
 8014964:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8014966:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014968:	b672      	cpsid	i
    return(int_posture);
 801496a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 801496c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	4a18      	ldr	r2, [pc, #96]	; (80149d4 <_tx_queue_create+0xdc>)
 8014972:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 8014974:	4b18      	ldr	r3, [pc, #96]	; (80149d8 <_tx_queue_create+0xe0>)
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	2b00      	cmp	r3, #0
 801497a:	d109      	bne.n	8014990 <_tx_queue_create+0x98>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 801497c:	4a17      	ldr	r2, [pc, #92]	; (80149dc <_tx_queue_create+0xe4>)
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	6013      	str	r3, [r2, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	68fa      	ldr	r2, [r7, #12]
 8014986:	631a      	str	r2, [r3, #48]	; 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	68fa      	ldr	r2, [r7, #12]
 801498c:	635a      	str	r2, [r3, #52]	; 0x34
 801498e:	e011      	b.n	80149b4 <_tx_queue_create+0xbc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 8014990:	4b12      	ldr	r3, [pc, #72]	; (80149dc <_tx_queue_create+0xe4>)
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 8014996:	6a3b      	ldr	r3, [r7, #32]
 8014998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801499a:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 801499c:	6a3b      	ldr	r3, [r7, #32]
 801499e:	68fa      	ldr	r2, [r7, #12]
 80149a0:	635a      	str	r2, [r3, #52]	; 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 80149a2:	69fb      	ldr	r3, [r7, #28]
 80149a4:	68fa      	ldr	r2, [r7, #12]
 80149a6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	69fa      	ldr	r2, [r7, #28]
 80149ac:	635a      	str	r2, [r3, #52]	; 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	6a3a      	ldr	r2, [r7, #32]
 80149b2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 80149b4:	4b08      	ldr	r3, [pc, #32]	; (80149d8 <_tx_queue_create+0xe0>)
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	3301      	adds	r3, #1
 80149ba:	4a07      	ldr	r2, [pc, #28]	; (80149d8 <_tx_queue_create+0xe0>)
 80149bc:	6013      	str	r3, [r2, #0]
 80149be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149c0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80149c2:	693b      	ldr	r3, [r7, #16]
 80149c4:	f383 8810 	msr	PRIMASK, r3
}
 80149c8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80149ca:	2300      	movs	r3, #0
}
 80149cc:	4618      	mov	r0, r3
 80149ce:	3730      	adds	r7, #48	; 0x30
 80149d0:	46bd      	mov	sp, r7
 80149d2:	bd80      	pop	{r7, pc}
 80149d4:	51554555 	.word	0x51554555
 80149d8:	24014ef0 	.word	0x24014ef0
 80149dc:	24014eec 	.word	0x24014eec

080149e0 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b096      	sub	sp, #88	; 0x58
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	60f8      	str	r0, [r7, #12]
 80149e8:	60b9      	str	r1, [r7, #8]
 80149ea:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 80149ec:	2300      	movs	r3, #0
 80149ee:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80149f0:	f3ef 8310 	mrs	r3, PRIMASK
 80149f4:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 80149f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 80149f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 80149fa:	b672      	cpsid	i
    return(int_posture);
 80149fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 80149fe:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a04:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	691b      	ldr	r3, [r3, #16]
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	f000 8136 	beq.w	8014c7c <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8014a10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d13c      	bne.n	8014a90 <_tx_queue_receive+0xb0>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 8014a16:	68fb      	ldr	r3, [r7, #12]
 8014a18:	6a1b      	ldr	r3, [r3, #32]
 8014a1a:	657b      	str	r3, [r7, #84]	; 0x54
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8014a1c:	68bb      	ldr	r3, [r7, #8]
 8014a1e:	653b      	str	r3, [r7, #80]	; 0x50
            size =         queue_ptr -> tx_queue_message_size;
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	689b      	ldr	r3, [r3, #8]
 8014a24:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8014a26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014a28:	1d13      	adds	r3, r2, #4
 8014a2a:	657b      	str	r3, [r7, #84]	; 0x54
 8014a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a2e:	1d19      	adds	r1, r3, #4
 8014a30:	6539      	str	r1, [r7, #80]	; 0x50
 8014a32:	6812      	ldr	r2, [r2, #0]
 8014a34:	601a      	str	r2, [r3, #0]
 8014a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a38:	2b01      	cmp	r3, #1
 8014a3a:	d90e      	bls.n	8014a5a <_tx_queue_receive+0x7a>
 8014a3c:	e007      	b.n	8014a4e <_tx_queue_receive+0x6e>
 8014a3e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014a40:	1d13      	adds	r3, r2, #4
 8014a42:	657b      	str	r3, [r7, #84]	; 0x54
 8014a44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014a46:	1d19      	adds	r1, r3, #4
 8014a48:	6539      	str	r1, [r7, #80]	; 0x50
 8014a4a:	6812      	ldr	r2, [r2, #0]
 8014a4c:	601a      	str	r2, [r3, #0]
 8014a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a50:	3b01      	subs	r3, #1
 8014a52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d1f1      	bne.n	8014a3e <_tx_queue_receive+0x5e>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	69db      	ldr	r3, [r3, #28]
 8014a5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014a60:	429a      	cmp	r2, r3
 8014a62:	d102      	bne.n	8014a6a <_tx_queue_receive+0x8a>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	699b      	ldr	r3, [r3, #24]
 8014a68:	657b      	str	r3, [r7, #84]	; 0x54
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 8014a6a:	68fb      	ldr	r3, [r7, #12]
 8014a6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014a6e:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	695b      	ldr	r3, [r3, #20]
 8014a74:	1c5a      	adds	r2, r3, #1
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	691b      	ldr	r3, [r3, #16]
 8014a7e:	1e5a      	subs	r2, r3, #1
 8014a80:	68fb      	ldr	r3, [r7, #12]
 8014a82:	611a      	str	r2, [r3, #16]
 8014a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014a86:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a8a:	f383 8810 	msr	PRIMASK, r3
}
 8014a8e:	e163      	b.n	8014d58 <_tx_queue_receive+0x378>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a94:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 8014a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014a98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014a9c:	2b01      	cmp	r3, #1
 8014a9e:	d153      	bne.n	8014b48 <_tx_queue_receive+0x168>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8014aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014aa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014aa4:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8014aa6:	68bb      	ldr	r3, [r7, #8]
 8014aa8:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8014aaa:	68fb      	ldr	r3, [r7, #12]
 8014aac:	689b      	ldr	r3, [r3, #8]
 8014aae:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8014ab0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014ab2:	1d13      	adds	r3, r2, #4
 8014ab4:	657b      	str	r3, [r7, #84]	; 0x54
 8014ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ab8:	1d19      	adds	r1, r3, #4
 8014aba:	6539      	str	r1, [r7, #80]	; 0x50
 8014abc:	6812      	ldr	r2, [r2, #0]
 8014abe:	601a      	str	r2, [r3, #0]
 8014ac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ac2:	2b01      	cmp	r3, #1
 8014ac4:	d90e      	bls.n	8014ae4 <_tx_queue_receive+0x104>
 8014ac6:	e007      	b.n	8014ad8 <_tx_queue_receive+0xf8>
 8014ac8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014aca:	1d13      	adds	r3, r2, #4
 8014acc:	657b      	str	r3, [r7, #84]	; 0x54
 8014ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014ad0:	1d19      	adds	r1, r3, #4
 8014ad2:	6539      	str	r1, [r7, #80]	; 0x50
 8014ad4:	6812      	ldr	r2, [r2, #0]
 8014ad6:	601a      	str	r2, [r3, #0]
 8014ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ada:	3b01      	subs	r3, #1
 8014adc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d1f1      	bne.n	8014ac8 <_tx_queue_receive+0xe8>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 8014ae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014ae6:	3b01      	subs	r3, #1
 8014ae8:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 8014aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d103      	bne.n	8014af8 <_tx_queue_receive+0x118>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	2200      	movs	r2, #0
 8014af4:	629a      	str	r2, [r3, #40]	; 0x28
 8014af6:	e00e      	b.n	8014b16 <_tx_queue_receive+0x136>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8014af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014afc:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014b02:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8014b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b08:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 8014b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014b0e:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 8014b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014b14:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014b1a:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8014b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b1e:	2200      	movs	r2, #0
 8014b20:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8014b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b24:	2200      	movs	r2, #0
 8014b26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8014b2a:	4b8e      	ldr	r3, [pc, #568]	; (8014d64 <_tx_queue_receive+0x384>)
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	3301      	adds	r3, #1
 8014b30:	4a8c      	ldr	r2, [pc, #560]	; (8014d64 <_tx_queue_receive+0x384>)
 8014b32:	6013      	str	r3, [r2, #0]
 8014b34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014b36:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b3a:	f383 8810 	msr	PRIMASK, r3
}
 8014b3e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8014b40:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014b42:	f000 ff53 	bl	80159ec <_tx_thread_system_resume>
 8014b46:	e107      	b.n	8014d58 <_tx_queue_receive+0x378>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 8014b48:	68fb      	ldr	r3, [r7, #12]
 8014b4a:	6a1b      	ldr	r3, [r3, #32]
 8014b4c:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8014b4e:	68bb      	ldr	r3, [r7, #8]
 8014b50:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8014b52:	68fb      	ldr	r3, [r7, #12]
 8014b54:	689b      	ldr	r3, [r3, #8]
 8014b56:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8014b58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014b5a:	1d13      	adds	r3, r2, #4
 8014b5c:	657b      	str	r3, [r7, #84]	; 0x54
 8014b5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b60:	1d19      	adds	r1, r3, #4
 8014b62:	6539      	str	r1, [r7, #80]	; 0x50
 8014b64:	6812      	ldr	r2, [r2, #0]
 8014b66:	601a      	str	r2, [r3, #0]
 8014b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b6a:	2b01      	cmp	r3, #1
 8014b6c:	d90e      	bls.n	8014b8c <_tx_queue_receive+0x1ac>
 8014b6e:	e007      	b.n	8014b80 <_tx_queue_receive+0x1a0>
 8014b70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014b72:	1d13      	adds	r3, r2, #4
 8014b74:	657b      	str	r3, [r7, #84]	; 0x54
 8014b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b78:	1d19      	adds	r1, r3, #4
 8014b7a:	6539      	str	r1, [r7, #80]	; 0x50
 8014b7c:	6812      	ldr	r2, [r2, #0]
 8014b7e:	601a      	str	r2, [r3, #0]
 8014b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b82:	3b01      	subs	r3, #1
 8014b84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d1f1      	bne.n	8014b70 <_tx_queue_receive+0x190>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 8014b8c:	68fb      	ldr	r3, [r7, #12]
 8014b8e:	69db      	ldr	r3, [r3, #28]
 8014b90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014b92:	429a      	cmp	r2, r3
 8014b94:	d102      	bne.n	8014b9c <_tx_queue_receive+0x1bc>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	699b      	ldr	r3, [r3, #24]
 8014b9a:	657b      	str	r3, [r7, #84]	; 0x54
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014ba0:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 8014ba2:	4b70      	ldr	r3, [pc, #448]	; (8014d64 <_tx_queue_receive+0x384>)
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	3301      	adds	r3, #1
 8014ba8:	4a6e      	ldr	r2, [pc, #440]	; (8014d64 <_tx_queue_receive+0x384>)
 8014baa:	6013      	str	r3, [r2, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 8014bac:	4b6d      	ldr	r3, [pc, #436]	; (8014d64 <_tx_queue_receive+0x384>)
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	3b01      	subs	r3, #1
 8014bb2:	4a6c      	ldr	r2, [pc, #432]	; (8014d64 <_tx_queue_receive+0x384>)
 8014bb4:	6013      	str	r3, [r2, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8014bb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014bb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014bba:	657b      	str	r3, [r7, #84]	; 0x54
                destination =  queue_ptr -> tx_queue_write;
 8014bbc:	68fb      	ldr	r3, [r7, #12]
 8014bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bc0:	653b      	str	r3, [r7, #80]	; 0x50
                size =         queue_ptr -> tx_queue_message_size;
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	689b      	ldr	r3, [r3, #8]
 8014bc6:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8014bc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014bca:	1d13      	adds	r3, r2, #4
 8014bcc:	657b      	str	r3, [r7, #84]	; 0x54
 8014bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014bd0:	1d19      	adds	r1, r3, #4
 8014bd2:	6539      	str	r1, [r7, #80]	; 0x50
 8014bd4:	6812      	ldr	r2, [r2, #0]
 8014bd6:	601a      	str	r2, [r3, #0]
 8014bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bda:	2b01      	cmp	r3, #1
 8014bdc:	d90e      	bls.n	8014bfc <_tx_queue_receive+0x21c>
 8014bde:	e007      	b.n	8014bf0 <_tx_queue_receive+0x210>
 8014be0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014be2:	1d13      	adds	r3, r2, #4
 8014be4:	657b      	str	r3, [r7, #84]	; 0x54
 8014be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014be8:	1d19      	adds	r1, r3, #4
 8014bea:	6539      	str	r1, [r7, #80]	; 0x50
 8014bec:	6812      	ldr	r2, [r2, #0]
 8014bee:	601a      	str	r2, [r3, #0]
 8014bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bf2:	3b01      	subs	r3, #1
 8014bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d1f1      	bne.n	8014be0 <_tx_queue_receive+0x200>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	69db      	ldr	r3, [r3, #28]
 8014c00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014c02:	429a      	cmp	r2, r3
 8014c04:	d102      	bne.n	8014c0c <_tx_queue_receive+0x22c>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	699b      	ldr	r3, [r3, #24]
 8014c0a:	653b      	str	r3, [r7, #80]	; 0x50
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014c10:	625a      	str	r2, [r3, #36]	; 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c16:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 8014c18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014c1a:	3b01      	subs	r3, #1
 8014c1c:	643b      	str	r3, [r7, #64]	; 0x40
                if (suspended_count == TX_NO_SUSPENSIONS)
 8014c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d103      	bne.n	8014c2c <_tx_queue_receive+0x24c>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	2200      	movs	r2, #0
 8014c28:	629a      	str	r2, [r3, #40]	; 0x28
 8014c2a:	e00e      	b.n	8014c4a <_tx_queue_receive+0x26a>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8014c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c30:	63bb      	str	r3, [r7, #56]	; 0x38
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014c36:	629a      	str	r2, [r3, #40]	; 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8014c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014c3c:	637b      	str	r3, [r7, #52]	; 0x34
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 8014c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014c42:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 8014c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014c46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014c48:	671a      	str	r2, [r3, #112]	; 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8014c4a:	68fb      	ldr	r3, [r7, #12]
 8014c4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014c4e:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8014c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c52:	2200      	movs	r2, #0
 8014c54:	669a      	str	r2, [r3, #104]	; 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8014c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c58:	2200      	movs	r2, #0
 8014c5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8014c5e:	4b41      	ldr	r3, [pc, #260]	; (8014d64 <_tx_queue_receive+0x384>)
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	3301      	adds	r3, #1
 8014c64:	4a3f      	ldr	r2, [pc, #252]	; (8014d64 <_tx_queue_receive+0x384>)
 8014c66:	6013      	str	r3, [r2, #0]
 8014c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c6a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014c6c:	6a3b      	ldr	r3, [r7, #32]
 8014c6e:	f383 8810 	msr	PRIMASK, r3
}
 8014c72:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8014c74:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014c76:	f000 feb9 	bl	80159ec <_tx_thread_system_resume>
 8014c7a:	e06d      	b.n	8014d58 <_tx_queue_receive+0x378>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d062      	beq.n	8014d48 <_tx_queue_receive+0x368>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8014c82:	4b38      	ldr	r3, [pc, #224]	; (8014d64 <_tx_queue_receive+0x384>)
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d008      	beq.n	8014c9c <_tx_queue_receive+0x2bc>
 8014c8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014c8c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014c8e:	69fb      	ldr	r3, [r7, #28]
 8014c90:	f383 8810 	msr	PRIMASK, r3
}
 8014c94:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 8014c96:	230a      	movs	r3, #10
 8014c98:	64bb      	str	r3, [r7, #72]	; 0x48
 8014c9a:	e05d      	b.n	8014d58 <_tx_queue_receive+0x378>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014c9c:	4b32      	ldr	r3, [pc, #200]	; (8014d68 <_tx_queue_receive+0x388>)
 8014c9e:	681b      	ldr	r3, [r3, #0]
 8014ca0:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8014ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ca4:	4a31      	ldr	r2, [pc, #196]	; (8014d6c <_tx_queue_receive+0x38c>)
 8014ca6:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8014ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014caa:	68fa      	ldr	r2, [r7, #12]
 8014cac:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 8014cae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cb0:	68ba      	ldr	r2, [r7, #8]
 8014cb2:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8014cb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cb6:	2200      	movs	r2, #0
 8014cb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8014cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cbe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014cc2:	1c5a      	adds	r2, r3, #1
 8014cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cc6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8014cca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d109      	bne.n	8014ce4 <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014cd4:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8014cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cd8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014cda:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8014cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cde:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014ce0:	675a      	str	r2, [r3, #116]	; 0x74
 8014ce2:	e011      	b.n	8014d08 <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ce8:	63bb      	str	r3, [r7, #56]	; 0x38
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8014cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014cee:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8014cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014cf4:	637b      	str	r3, [r7, #52]	; 0x34
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8014cf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014cf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014cfa:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8014cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014cfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014d00:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8014d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014d06:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8014d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d0a:	1c5a      	adds	r2, r3, #1
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8014d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d12:	2205      	movs	r2, #5
 8014d14:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8014d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d18:	2201      	movs	r2, #1
 8014d1a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8014d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d1e:	687a      	ldr	r2, [r7, #4]
 8014d20:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8014d22:	4b10      	ldr	r3, [pc, #64]	; (8014d64 <_tx_queue_receive+0x384>)
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	3301      	adds	r3, #1
 8014d28:	4a0e      	ldr	r2, [pc, #56]	; (8014d64 <_tx_queue_receive+0x384>)
 8014d2a:	6013      	str	r3, [r2, #0]
 8014d2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d2e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014d30:	69bb      	ldr	r3, [r7, #24]
 8014d32:	f383 8810 	msr	PRIMASK, r3
}
 8014d36:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8014d38:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8014d3a:	f000 ff57 	bl	8015bec <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8014d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014d44:	64bb      	str	r3, [r7, #72]	; 0x48
 8014d46:	e007      	b.n	8014d58 <_tx_queue_receive+0x378>
 8014d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014d4a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014d4c:	697b      	ldr	r3, [r7, #20]
 8014d4e:	f383 8810 	msr	PRIMASK, r3
}
 8014d52:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 8014d54:	230a      	movs	r3, #10
 8014d56:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    /* Return completion status.  */
    return(status);
 8014d58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	3758      	adds	r7, #88	; 0x58
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	bd80      	pop	{r7, pc}
 8014d62:	bf00      	nop
 8014d64:	24014fb4 	.word	0x24014fb4
 8014d68:	24014f1c 	.word	0x24014f1c
 8014d6c:	080147f1 	.word	0x080147f1

08014d70 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b094      	sub	sp, #80	; 0x50
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	60f8      	str	r0, [r7, #12]
 8014d78:	60b9      	str	r1, [r7, #8]
 8014d7a:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014d80:	f3ef 8310 	mrs	r3, PRIMASK
 8014d84:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8014d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8014d88:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8014d8a:	b672      	cpsid	i
    return(int_posture);
 8014d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 8014d8e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d94:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	695b      	ldr	r3, [r3, #20]
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	f000 809b 	beq.w	8014ed6 <_tx_queue_send+0x166>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8014da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d13c      	bne.n	8014e20 <_tx_queue_send+0xb0>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	695b      	ldr	r3, [r3, #20]
 8014daa:	1e5a      	subs	r2, r3, #1
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	691b      	ldr	r3, [r3, #16]
 8014db4:	1c5a      	adds	r2, r3, #1
 8014db6:	68fb      	ldr	r3, [r7, #12]
 8014db8:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8014dba:	68bb      	ldr	r3, [r7, #8]
 8014dbc:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  queue_ptr -> tx_queue_write;
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dc2:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	689b      	ldr	r3, [r3, #8]
 8014dc8:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8014dca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014dcc:	1d13      	adds	r3, r2, #4
 8014dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014dd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014dd2:	1d19      	adds	r1, r3, #4
 8014dd4:	64b9      	str	r1, [r7, #72]	; 0x48
 8014dd6:	6812      	ldr	r2, [r2, #0]
 8014dd8:	601a      	str	r2, [r3, #0]
 8014dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ddc:	2b01      	cmp	r3, #1
 8014dde:	d90e      	bls.n	8014dfe <_tx_queue_send+0x8e>
 8014de0:	e007      	b.n	8014df2 <_tx_queue_send+0x82>
 8014de2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014de4:	1d13      	adds	r3, r2, #4
 8014de6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014dea:	1d19      	adds	r1, r3, #4
 8014dec:	64b9      	str	r1, [r7, #72]	; 0x48
 8014dee:	6812      	ldr	r2, [r2, #0]
 8014df0:	601a      	str	r2, [r3, #0]
 8014df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014df4:	3b01      	subs	r3, #1
 8014df6:	647b      	str	r3, [r7, #68]	; 0x44
 8014df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d1f1      	bne.n	8014de2 <_tx_queue_send+0x72>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 8014dfe:	68fb      	ldr	r3, [r7, #12]
 8014e00:	69db      	ldr	r3, [r3, #28]
 8014e02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014e04:	429a      	cmp	r2, r3
 8014e06:	d102      	bne.n	8014e0e <_tx_queue_send+0x9e>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	699b      	ldr	r3, [r3, #24]
 8014e0c:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 8014e0e:	68fb      	ldr	r3, [r7, #12]
 8014e10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014e12:	625a      	str	r2, [r3, #36]	; 0x24
 8014e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014e16:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014e18:	6a3b      	ldr	r3, [r7, #32]
 8014e1a:	f383 8810 	msr	PRIMASK, r3
}
 8014e1e:	e0c8      	b.n	8014fb2 <_tx_queue_send+0x242>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e24:	637b      	str	r3, [r7, #52]	; 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 8014e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e28:	3b01      	subs	r3, #1
 8014e2a:	63bb      	str	r3, [r7, #56]	; 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 8014e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d103      	bne.n	8014e3a <_tx_queue_send+0xca>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	2200      	movs	r2, #0
 8014e36:	629a      	str	r2, [r3, #40]	; 0x28
 8014e38:	e012      	b.n	8014e60 <_tx_queue_send+0xf0>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8014e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8014e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e46:	633b      	str	r3, [r7, #48]	; 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 8014e48:	68fb      	ldr	r3, [r7, #12]
 8014e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e4c:	629a      	str	r2, [r3, #40]	; 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8014e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014e52:	62fb      	str	r3, [r7, #44]	; 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 8014e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014e58:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 8014e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e5e:	671a      	str	r2, [r3, #112]	; 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014e64:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8014e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e68:	2200      	movs	r2, #0
 8014e6a:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8014e6c:	68bb      	ldr	r3, [r7, #8]
 8014e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8014e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014e74:	64bb      	str	r3, [r7, #72]	; 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8014e76:	68fb      	ldr	r3, [r7, #12]
 8014e78:	689b      	ldr	r3, [r3, #8]
 8014e7a:	647b      	str	r3, [r7, #68]	; 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8014e7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014e7e:	1d13      	adds	r3, r2, #4
 8014e80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e84:	1d19      	adds	r1, r3, #4
 8014e86:	64b9      	str	r1, [r7, #72]	; 0x48
 8014e88:	6812      	ldr	r2, [r2, #0]
 8014e8a:	601a      	str	r2, [r3, #0]
 8014e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014e8e:	2b01      	cmp	r3, #1
 8014e90:	d90e      	bls.n	8014eb0 <_tx_queue_send+0x140>
 8014e92:	e007      	b.n	8014ea4 <_tx_queue_send+0x134>
 8014e94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014e96:	1d13      	adds	r3, r2, #4
 8014e98:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014e9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e9c:	1d19      	adds	r1, r3, #4
 8014e9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8014ea0:	6812      	ldr	r2, [r2, #0]
 8014ea2:	601a      	str	r2, [r3, #0]
 8014ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014ea6:	3b01      	subs	r3, #1
 8014ea8:	647b      	str	r3, [r7, #68]	; 0x44
 8014eaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d1f1      	bne.n	8014e94 <_tx_queue_send+0x124>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8014eb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014eb2:	2200      	movs	r2, #0
 8014eb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8014eb8:	4b40      	ldr	r3, [pc, #256]	; (8014fbc <_tx_queue_send+0x24c>)
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	3301      	adds	r3, #1
 8014ebe:	4a3f      	ldr	r2, [pc, #252]	; (8014fbc <_tx_queue_send+0x24c>)
 8014ec0:	6013      	str	r3, [r2, #0]
 8014ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ec4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014ec6:	69fb      	ldr	r3, [r7, #28]
 8014ec8:	f383 8810 	msr	PRIMASK, r3
}
 8014ecc:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 8014ece:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014ed0:	f000 fd8c 	bl	80159ec <_tx_thread_system_resume>
 8014ed4:	e06d      	b.n	8014fb2 <_tx_queue_send+0x242>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d062      	beq.n	8014fa2 <_tx_queue_send+0x232>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8014edc:	4b37      	ldr	r3, [pc, #220]	; (8014fbc <_tx_queue_send+0x24c>)
 8014ede:	681b      	ldr	r3, [r3, #0]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d008      	beq.n	8014ef6 <_tx_queue_send+0x186>
 8014ee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ee6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014ee8:	69bb      	ldr	r3, [r7, #24]
 8014eea:	f383 8810 	msr	PRIMASK, r3
}
 8014eee:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 8014ef0:	230b      	movs	r3, #11
 8014ef2:	643b      	str	r3, [r7, #64]	; 0x40
 8014ef4:	e05d      	b.n	8014fb2 <_tx_queue_send+0x242>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8014ef6:	4b32      	ldr	r3, [pc, #200]	; (8014fc0 <_tx_queue_send+0x250>)
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	637b      	str	r3, [r7, #52]	; 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8014efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014efe:	4a31      	ldr	r2, [pc, #196]	; (8014fc4 <_tx_queue_send+0x254>)
 8014f00:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8014f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f04:	68fa      	ldr	r2, [r7, #12]
 8014f06:	66da      	str	r2, [r3, #108]	; 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 8014f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f0a:	68ba      	ldr	r2, [r7, #8]
 8014f0c:	67da      	str	r2, [r3, #124]	; 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8014f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f10:	2200      	movs	r2, #0
 8014f12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8014f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f18:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014f1c:	1c5a      	adds	r2, r3, #1
 8014f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f20:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8014f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d109      	bne.n	8014f3e <_tx_queue_send+0x1ce>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014f2e:	629a      	str	r2, [r3, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8014f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014f34:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8014f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014f3a:	675a      	str	r2, [r3, #116]	; 0x74
 8014f3c:	e011      	b.n	8014f62 <_tx_queue_send+0x1f2>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8014f3e:	68fb      	ldr	r3, [r7, #12]
 8014f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f42:	633b      	str	r3, [r7, #48]	; 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8014f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014f48:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8014f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8014f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014f54:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8014f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014f5a:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8014f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014f60:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8014f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f64:	1c5a      	adds	r2, r3, #1
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8014f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f6c:	2205      	movs	r2, #5
 8014f6e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8014f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f72:	2201      	movs	r2, #1
 8014f74:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8014f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f78:	687a      	ldr	r2, [r7, #4]
 8014f7a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8014f7c:	4b0f      	ldr	r3, [pc, #60]	; (8014fbc <_tx_queue_send+0x24c>)
 8014f7e:	681b      	ldr	r3, [r3, #0]
 8014f80:	3301      	adds	r3, #1
 8014f82:	4a0e      	ldr	r2, [pc, #56]	; (8014fbc <_tx_queue_send+0x24c>)
 8014f84:	6013      	str	r3, [r2, #0]
 8014f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f88:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014f8a:	697b      	ldr	r3, [r7, #20]
 8014f8c:	f383 8810 	msr	PRIMASK, r3
}
 8014f90:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8014f92:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8014f94:	f000 fe2a 	bl	8015bec <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8014f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014f9e:	643b      	str	r3, [r7, #64]	; 0x40
 8014fa0:	e007      	b.n	8014fb2 <_tx_queue_send+0x242>
 8014fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014fa4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8014fa6:	693b      	ldr	r3, [r7, #16]
 8014fa8:	f383 8810 	msr	PRIMASK, r3
}
 8014fac:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 8014fae:	230b      	movs	r3, #11
 8014fb0:	643b      	str	r3, [r7, #64]	; 0x40
    }

    /* Return completion status.  */
    return(status);
 8014fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	3750      	adds	r7, #80	; 0x50
 8014fb8:	46bd      	mov	sp, r7
 8014fba:	bd80      	pop	{r7, pc}
 8014fbc:	24014fb4 	.word	0x24014fb4
 8014fc0:	24014f1c 	.word	0x24014f1c
 8014fc4:	080147f1 	.word	0x080147f1

08014fc8 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b08e      	sub	sp, #56	; 0x38
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
 8014fd0:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8014fd2:	f3ef 8310 	mrs	r3, PRIMASK
 8014fd6:	623b      	str	r3, [r7, #32]
    return(posture);
 8014fd8:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8014fda:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8014fdc:	b672      	cpsid	i
    return(int_posture);
 8014fde:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8014fe0:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014fe6:	4a33      	ldr	r2, [pc, #204]	; (80150b4 <_tx_semaphore_cleanup+0xec>)
 8014fe8:	4293      	cmp	r3, r2
 8014fea:	d158      	bne.n	801509e <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8014ff2:	683a      	ldr	r2, [r7, #0]
 8014ff4:	429a      	cmp	r2, r3
 8014ff6:	d152      	bne.n	801509e <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ffc:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 8014ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015000:	2b00      	cmp	r3, #0
 8015002:	d04c      	beq.n	801509e <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 8015004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	4a2b      	ldr	r2, [pc, #172]	; (80150b8 <_tx_semaphore_cleanup+0xf0>)
 801500a:	4293      	cmp	r3, r2
 801500c:	d147      	bne.n	801509e <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 801500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015010:	691b      	ldr	r3, [r3, #16]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d043      	beq.n	801509e <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	2200      	movs	r2, #0
 801501a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 801501c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801501e:	691b      	ldr	r3, [r3, #16]
 8015020:	1e5a      	subs	r2, r3, #1
 8015022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015024:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8015026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015028:	691b      	ldr	r3, [r3, #16]
 801502a:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 801502c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801502e:	2b00      	cmp	r3, #0
 8015030:	d103      	bne.n	801503a <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8015032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015034:	2200      	movs	r2, #0
 8015036:	60da      	str	r2, [r3, #12]
 8015038:	e013      	b.n	8015062 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801503e:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015044:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8015046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801504a:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 801504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801504e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015050:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 8015052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015054:	68db      	ldr	r3, [r3, #12]
 8015056:	687a      	ldr	r2, [r7, #4]
 8015058:	429a      	cmp	r2, r3
 801505a:	d102      	bne.n	8015062 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 801505c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801505e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015060:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015066:	2b06      	cmp	r3, #6
 8015068:	d119      	bne.n	801509e <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	220d      	movs	r2, #13
 801506e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8015072:	4b12      	ldr	r3, [pc, #72]	; (80150bc <_tx_semaphore_cleanup+0xf4>)
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	3301      	adds	r3, #1
 8015078:	4a10      	ldr	r2, [pc, #64]	; (80150bc <_tx_semaphore_cleanup+0xf4>)
 801507a:	6013      	str	r3, [r2, #0]
 801507c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801507e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015080:	693b      	ldr	r3, [r7, #16]
 8015082:	f383 8810 	msr	PRIMASK, r3
}
 8015086:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8015088:	6878      	ldr	r0, [r7, #4]
 801508a:	f000 fcaf 	bl	80159ec <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801508e:	f3ef 8310 	mrs	r3, PRIMASK
 8015092:	61bb      	str	r3, [r7, #24]
    return(posture);
 8015094:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8015096:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015098:	b672      	cpsid	i
    return(int_posture);
 801509a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 801509c:	637b      	str	r3, [r7, #52]	; 0x34
 801509e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150a0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	f383 8810 	msr	PRIMASK, r3
}
 80150a8:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80150aa:	bf00      	nop
 80150ac:	3738      	adds	r7, #56	; 0x38
 80150ae:	46bd      	mov	sp, r7
 80150b0:	bd80      	pop	{r7, pc}
 80150b2:	bf00      	nop
 80150b4:	08014fc9 	.word	0x08014fc9
 80150b8:	53454d41 	.word	0x53454d41
 80150bc:	24014fb4 	.word	0x24014fb4

080150c0 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 80150c0:	b580      	push	{r7, lr}
 80150c2:	b08a      	sub	sp, #40	; 0x28
 80150c4:	af00      	add	r7, sp, #0
 80150c6:	60f8      	str	r0, [r7, #12]
 80150c8:	60b9      	str	r1, [r7, #8]
 80150ca:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 80150cc:	221c      	movs	r2, #28
 80150ce:	2100      	movs	r1, #0
 80150d0:	68f8      	ldr	r0, [r7, #12]
 80150d2:	f001 fe9f 	bl	8016e14 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 80150d6:	68fb      	ldr	r3, [r7, #12]
 80150d8:	68ba      	ldr	r2, [r7, #8]
 80150da:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	687a      	ldr	r2, [r7, #4]
 80150e0:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80150e2:	f3ef 8310 	mrs	r3, PRIMASK
 80150e6:	61bb      	str	r3, [r7, #24]
    return(posture);
 80150e8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80150ea:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80150ec:	b672      	cpsid	i
    return(int_posture);
 80150ee:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 80150f0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	4a18      	ldr	r2, [pc, #96]	; (8015158 <_tx_semaphore_create+0x98>)
 80150f6:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 80150f8:	4b18      	ldr	r3, [pc, #96]	; (801515c <_tx_semaphore_create+0x9c>)
 80150fa:	681b      	ldr	r3, [r3, #0]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d109      	bne.n	8015114 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8015100:	4a17      	ldr	r2, [pc, #92]	; (8015160 <_tx_semaphore_create+0xa0>)
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	68fa      	ldr	r2, [r7, #12]
 801510a:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	68fa      	ldr	r2, [r7, #12]
 8015110:	619a      	str	r2, [r3, #24]
 8015112:	e011      	b.n	8015138 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 8015114:	4b12      	ldr	r3, [pc, #72]	; (8015160 <_tx_semaphore_create+0xa0>)
 8015116:	681b      	ldr	r3, [r3, #0]
 8015118:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 801511a:	6a3b      	ldr	r3, [r7, #32]
 801511c:	699b      	ldr	r3, [r3, #24]
 801511e:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8015120:	6a3b      	ldr	r3, [r7, #32]
 8015122:	68fa      	ldr	r2, [r7, #12]
 8015124:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 8015126:	69fb      	ldr	r3, [r7, #28]
 8015128:	68fa      	ldr	r2, [r7, #12]
 801512a:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 801512c:	68fb      	ldr	r3, [r7, #12]
 801512e:	69fa      	ldr	r2, [r7, #28]
 8015130:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	6a3a      	ldr	r2, [r7, #32]
 8015136:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8015138:	4b08      	ldr	r3, [pc, #32]	; (801515c <_tx_semaphore_create+0x9c>)
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	3301      	adds	r3, #1
 801513e:	4a07      	ldr	r2, [pc, #28]	; (801515c <_tx_semaphore_create+0x9c>)
 8015140:	6013      	str	r3, [r2, #0]
 8015142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015144:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015146:	693b      	ldr	r3, [r7, #16]
 8015148:	f383 8810 	msr	PRIMASK, r3
}
 801514c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801514e:	2300      	movs	r3, #0
}
 8015150:	4618      	mov	r0, r3
 8015152:	3728      	adds	r7, #40	; 0x28
 8015154:	46bd      	mov	sp, r7
 8015156:	bd80      	pop	{r7, pc}
 8015158:	53454d41 	.word	0x53454d41
 801515c:	24014ee8 	.word	0x24014ee8
 8015160:	24014ee4 	.word	0x24014ee4

08015164 <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8015164:	b580      	push	{r7, lr}
 8015166:	b092      	sub	sp, #72	; 0x48
 8015168:	af00      	add	r7, sp, #0
 801516a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801516c:	f3ef 8310 	mrs	r3, PRIMASK
 8015170:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8015172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8015174:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8015176:	b672      	cpsid	i
    return(int_posture);
 8015178:	6abb      	ldr	r3, [r7, #40]	; 0x28
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 801517a:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	2200      	movs	r2, #0
 8015180:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 8015182:	4b3d      	ldr	r3, [pc, #244]	; (8015278 <_tx_semaphore_delete+0x114>)
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	3b01      	subs	r3, #1
 8015188:	4a3b      	ldr	r2, [pc, #236]	; (8015278 <_tx_semaphore_delete+0x114>)
 801518a:	6013      	str	r3, [r2, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 801518c:	4b3a      	ldr	r3, [pc, #232]	; (8015278 <_tx_semaphore_delete+0x114>)
 801518e:	681b      	ldr	r3, [r3, #0]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d103      	bne.n	801519c <_tx_semaphore_delete+0x38>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 8015194:	4b39      	ldr	r3, [pc, #228]	; (801527c <_tx_semaphore_delete+0x118>)
 8015196:	2200      	movs	r2, #0
 8015198:	601a      	str	r2, [r3, #0]
 801519a:	e013      	b.n	80151c4 <_tx_semaphore_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	695b      	ldr	r3, [r3, #20]
 80151a0:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	699b      	ldr	r3, [r3, #24]
 80151a6:	637b      	str	r3, [r7, #52]	; 0x34
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 80151a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80151ac:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 80151ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80151b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80151b2:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 80151b4:	4b31      	ldr	r3, [pc, #196]	; (801527c <_tx_semaphore_delete+0x118>)
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	687a      	ldr	r2, [r7, #4]
 80151ba:	429a      	cmp	r2, r3
 80151bc:	d102      	bne.n	80151c4 <_tx_semaphore_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 80151be:	4a2f      	ldr	r2, [pc, #188]	; (801527c <_tx_semaphore_delete+0x118>)
 80151c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151c2:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80151c4:	4b2e      	ldr	r3, [pc, #184]	; (8015280 <_tx_semaphore_delete+0x11c>)
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	3301      	adds	r3, #1
 80151ca:	4a2d      	ldr	r2, [pc, #180]	; (8015280 <_tx_semaphore_delete+0x11c>)
 80151cc:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	68db      	ldr	r3, [r3, #12]
 80151d2:	647b      	str	r3, [r7, #68]	; 0x44
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	2200      	movs	r2, #0
 80151d8:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	691b      	ldr	r3, [r3, #16]
 80151de:	643b      	str	r3, [r7, #64]	; 0x40
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	2200      	movs	r2, #0
 80151e4:	611a      	str	r2, [r3, #16]
 80151e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80151e8:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80151ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ec:	f383 8810 	msr	PRIMASK, r3
}
 80151f0:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 80151f2:	e024      	b.n	801523e <_tx_semaphore_delete+0xda>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 80151f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80151f6:	3b01      	subs	r3, #1
 80151f8:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80151fa:	f3ef 8310 	mrs	r3, PRIMASK
 80151fe:	61fb      	str	r3, [r7, #28]
    return(posture);
 8015200:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8015202:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015204:	b672      	cpsid	i
    return(int_posture);
 8015206:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 8015208:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801520a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801520c:	2200      	movs	r2, #0
 801520e:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8015210:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015212:	2201      	movs	r2, #1
 8015214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8015218:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801521a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801521c:	633b      	str	r3, [r7, #48]	; 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 801521e:	4b18      	ldr	r3, [pc, #96]	; (8015280 <_tx_semaphore_delete+0x11c>)
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	3301      	adds	r3, #1
 8015224:	4a16      	ldr	r2, [pc, #88]	; (8015280 <_tx_semaphore_delete+0x11c>)
 8015226:	6013      	str	r3, [r2, #0]
 8015228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801522a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801522c:	6a3b      	ldr	r3, [r7, #32]
 801522e:	f383 8810 	msr	PRIMASK, r3
}
 8015232:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8015234:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015236:	f000 fbd9 	bl	80159ec <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 801523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801523c:	647b      	str	r3, [r7, #68]	; 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 801523e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015240:	2b00      	cmp	r3, #0
 8015242:	d1d7      	bne.n	80151f4 <_tx_semaphore_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015244:	f3ef 8310 	mrs	r3, PRIMASK
 8015248:	613b      	str	r3, [r7, #16]
    return(posture);
 801524a:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 801524c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 801524e:	b672      	cpsid	i
    return(int_posture);
 8015250:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 8015252:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 8015254:	4b0a      	ldr	r3, [pc, #40]	; (8015280 <_tx_semaphore_delete+0x11c>)
 8015256:	681b      	ldr	r3, [r3, #0]
 8015258:	3b01      	subs	r3, #1
 801525a:	4a09      	ldr	r2, [pc, #36]	; (8015280 <_tx_semaphore_delete+0x11c>)
 801525c:	6013      	str	r3, [r2, #0]
 801525e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015260:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015262:	697b      	ldr	r3, [r7, #20]
 8015264:	f383 8810 	msr	PRIMASK, r3
}
 8015268:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 801526a:	f000 fb85 	bl	8015978 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 801526e:	2300      	movs	r3, #0
}
 8015270:	4618      	mov	r0, r3
 8015272:	3748      	adds	r7, #72	; 0x48
 8015274:	46bd      	mov	sp, r7
 8015276:	bd80      	pop	{r7, pc}
 8015278:	24014ee8 	.word	0x24014ee8
 801527c:	24014ee4 	.word	0x24014ee4
 8015280:	24014fb4 	.word	0x24014fb4

08015284 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8015284:	b580      	push	{r7, lr}
 8015286:	b08e      	sub	sp, #56	; 0x38
 8015288:	af00      	add	r7, sp, #0
 801528a:	6078      	str	r0, [r7, #4]
 801528c:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 801528e:	2300      	movs	r3, #0
 8015290:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015292:	f3ef 8310 	mrs	r3, PRIMASK
 8015296:	623b      	str	r3, [r7, #32]
    return(posture);
 8015298:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801529a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801529c:	b672      	cpsid	i
    return(int_posture);
 801529e:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 80152a0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	689b      	ldr	r3, [r3, #8]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d00a      	beq.n	80152c0 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	689b      	ldr	r3, [r3, #8]
 80152ae:	1e5a      	subs	r2, r3, #1
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	609a      	str	r2, [r3, #8]
 80152b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152b6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80152b8:	69bb      	ldr	r3, [r7, #24]
 80152ba:	f383 8810 	msr	PRIMASK, r3
}
 80152be:	e068      	b.n	8015392 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 80152c0:	683b      	ldr	r3, [r7, #0]
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d05d      	beq.n	8015382 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80152c6:	4b35      	ldr	r3, [pc, #212]	; (801539c <_tx_semaphore_get+0x118>)
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d008      	beq.n	80152e0 <_tx_semaphore_get+0x5c>
 80152ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152d0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80152d2:	697b      	ldr	r3, [r7, #20]
 80152d4:	f383 8810 	msr	PRIMASK, r3
}
 80152d8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 80152da:	230d      	movs	r3, #13
 80152dc:	637b      	str	r3, [r7, #52]	; 0x34
 80152de:	e058      	b.n	8015392 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80152e0:	4b2f      	ldr	r3, [pc, #188]	; (80153a0 <_tx_semaphore_get+0x11c>)
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 80152e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152e8:	4a2e      	ldr	r2, [pc, #184]	; (80153a4 <_tx_semaphore_get+0x120>)
 80152ea:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 80152ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152ee:	687a      	ldr	r2, [r7, #4]
 80152f0:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 80152f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80152f8:	1c5a      	adds	r2, r3, #1
 80152fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152fc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	691b      	ldr	r3, [r3, #16]
 8015304:	2b00      	cmp	r3, #0
 8015306:	d109      	bne.n	801531c <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801530c:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 801530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015312:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8015314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015316:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015318:	675a      	str	r2, [r3, #116]	; 0x74
 801531a:	e011      	b.n	8015340 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	68db      	ldr	r3, [r3, #12]
 8015320:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8015322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015326:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8015328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801532a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801532c:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 801532e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015332:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8015334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015338:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801533a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801533c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801533e:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	691b      	ldr	r3, [r3, #16]
 8015344:	1c5a      	adds	r2, r3, #1
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 801534a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801534c:	2206      	movs	r2, #6
 801534e:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8015350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015352:	2201      	movs	r2, #1
 8015354:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8015356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015358:	683a      	ldr	r2, [r7, #0]
 801535a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 801535c:	4b0f      	ldr	r3, [pc, #60]	; (801539c <_tx_semaphore_get+0x118>)
 801535e:	681b      	ldr	r3, [r3, #0]
 8015360:	3301      	adds	r3, #1
 8015362:	4a0e      	ldr	r2, [pc, #56]	; (801539c <_tx_semaphore_get+0x118>)
 8015364:	6013      	str	r3, [r2, #0]
 8015366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015368:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801536a:	693b      	ldr	r3, [r7, #16]
 801536c:	f383 8810 	msr	PRIMASK, r3
}
 8015370:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8015372:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015374:	f000 fc3a 	bl	8015bec <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8015378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801537a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801537e:	637b      	str	r3, [r7, #52]	; 0x34
 8015380:	e007      	b.n	8015392 <_tx_semaphore_get+0x10e>
 8015382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015384:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	f383 8810 	msr	PRIMASK, r3
}
 801538c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 801538e:	230d      	movs	r3, #13
 8015390:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 8015392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015394:	4618      	mov	r0, r3
 8015396:	3738      	adds	r7, #56	; 0x38
 8015398:	46bd      	mov	sp, r7
 801539a:	bd80      	pop	{r7, pc}
 801539c:	24014fb4 	.word	0x24014fb4
 80153a0:	24014f1c 	.word	0x24014f1c
 80153a4:	08014fc9 	.word	0x08014fc9

080153a8 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 80153a8:	b580      	push	{r7, lr}
 80153aa:	b08c      	sub	sp, #48	; 0x30
 80153ac:	af00      	add	r7, sp, #0
 80153ae:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80153b0:	f3ef 8310 	mrs	r3, PRIMASK
 80153b4:	61bb      	str	r3, [r7, #24]
    return(posture);
 80153b6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80153b8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80153ba:	b672      	cpsid	i
    return(int_posture);
 80153bc:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 80153be:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	691b      	ldr	r3, [r3, #16]
 80153c4:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 80153c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d10a      	bne.n	80153e2 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	689b      	ldr	r3, [r3, #8]
 80153d0:	1c5a      	adds	r2, r3, #1
 80153d2:	687b      	ldr	r3, [r7, #4]
 80153d4:	609a      	str	r2, [r3, #8]
 80153d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153d8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80153da:	693b      	ldr	r3, [r7, #16]
 80153dc:	f383 8810 	msr	PRIMASK, r3
}
 80153e0:	e033      	b.n	801544a <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	68db      	ldr	r3, [r3, #12]
 80153e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 80153e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153ea:	3b01      	subs	r3, #1
 80153ec:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 80153ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	d103      	bne.n	80153fc <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	2200      	movs	r2, #0
 80153f8:	60da      	str	r2, [r3, #12]
 80153fa:	e00e      	b.n	801541a <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 80153fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015400:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	6a3a      	ldr	r2, [r7, #32]
 8015406:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8015408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801540a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801540c:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801540e:	6a3b      	ldr	r3, [r7, #32]
 8015410:	69fa      	ldr	r2, [r7, #28]
 8015412:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8015414:	69fb      	ldr	r3, [r7, #28]
 8015416:	6a3a      	ldr	r2, [r7, #32]
 8015418:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801541e:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8015420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015422:	2200      	movs	r2, #0
 8015424:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8015426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015428:	2200      	movs	r2, #0
 801542a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 801542e:	4b09      	ldr	r3, [pc, #36]	; (8015454 <_tx_semaphore_put+0xac>)
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	3301      	adds	r3, #1
 8015434:	4a07      	ldr	r2, [pc, #28]	; (8015454 <_tx_semaphore_put+0xac>)
 8015436:	6013      	str	r3, [r2, #0]
 8015438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801543a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801543c:	68fb      	ldr	r3, [r7, #12]
 801543e:	f383 8810 	msr	PRIMASK, r3
}
 8015442:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8015444:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015446:	f000 fad1 	bl	80159ec <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 801544a:	2300      	movs	r3, #0
}
 801544c:	4618      	mov	r0, r3
 801544e:	3730      	adds	r7, #48	; 0x30
 8015450:	46bd      	mov	sp, r7
 8015452:	bd80      	pop	{r7, pc}
 8015454:	24014fb4 	.word	0x24014fb4

08015458 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8015458:	b580      	push	{r7, lr}
 801545a:	b092      	sub	sp, #72	; 0x48
 801545c:	af00      	add	r7, sp, #0
 801545e:	60f8      	str	r0, [r7, #12]
 8015460:	60b9      	str	r1, [r7, #8]
 8015462:	607a      	str	r2, [r7, #4]
 8015464:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8015466:	2300      	movs	r3, #0
 8015468:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 801546a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801546c:	21ef      	movs	r1, #239	; 0xef
 801546e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8015470:	f001 fcd0 	bl	8016e14 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8015474:	22b0      	movs	r2, #176	; 0xb0
 8015476:	2100      	movs	r1, #0
 8015478:	68f8      	ldr	r0, [r7, #12]
 801547a:	f001 fccb 	bl	8016e14 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 801547e:	68fb      	ldr	r3, [r7, #12]
 8015480:	68ba      	ldr	r2, [r7, #8]
 8015482:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	687a      	ldr	r2, [r7, #4]
 8015488:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 801548a:	68fb      	ldr	r3, [r7, #12]
 801548c:	683a      	ldr	r2, [r7, #0]
 801548e:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015494:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801549a:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80154a0:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80154a6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80154ae:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 80154b0:	68fb      	ldr	r3, [r7, #12]
 80154b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80154b4:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	2220      	movs	r2, #32
 80154ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80154be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80154c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 80154c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80154c4:	3b01      	subs	r3, #1
 80154c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80154c8:	4413      	add	r3, r2
 80154ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 80154cc:	68fb      	ldr	r3, [r7, #12]
 80154ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80154d0:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 80154d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80154d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80154d6:	429a      	cmp	r2, r3
 80154d8:	d007      	beq.n	80154ea <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	2200      	movs	r2, #0
 80154de:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	2200      	movs	r2, #0
 80154e4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80154e8:	e006      	b.n	80154f8 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80154ee:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80154f4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	2203      	movs	r2, #3
 80154fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	4a48      	ldr	r2, [pc, #288]	; (8015624 <_tx_thread_create+0x1cc>)
 8015502:	655a      	str	r2, [r3, #84]	; 0x54
 8015504:	68fa      	ldr	r2, [r7, #12]
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 801550a:	4947      	ldr	r1, [pc, #284]	; (8015628 <_tx_thread_create+0x1d0>)
 801550c:	68f8      	ldr	r0, [r7, #12]
 801550e:	f7ea ff87 	bl	8000420 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015512:	f3ef 8310 	mrs	r3, PRIMASK
 8015516:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8015518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801551a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801551c:	b672      	cpsid	i
    return(int_posture);
 801551e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8015520:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	4a41      	ldr	r2, [pc, #260]	; (801562c <_tx_thread_create+0x1d4>)
 8015526:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8015528:	4b41      	ldr	r3, [pc, #260]	; (8015630 <_tx_thread_create+0x1d8>)
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d10b      	bne.n	8015548 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8015530:	4a40      	ldr	r2, [pc, #256]	; (8015634 <_tx_thread_create+0x1dc>)
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	68fa      	ldr	r2, [r7, #12]
 801553a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	68fa      	ldr	r2, [r7, #12]
 8015542:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8015546:	e016      	b.n	8015576 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8015548:	4b3a      	ldr	r3, [pc, #232]	; (8015634 <_tx_thread_create+0x1dc>)
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 801554e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015550:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015554:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8015556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015558:	68fa      	ldr	r2, [r7, #12]
 801555a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 801555e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015560:	68fa      	ldr	r2, [r7, #12]
 8015562:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801556a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8015576:	4b2e      	ldr	r3, [pc, #184]	; (8015630 <_tx_thread_create+0x1d8>)
 8015578:	681b      	ldr	r3, [r3, #0]
 801557a:	3301      	adds	r3, #1
 801557c:	4a2c      	ldr	r2, [pc, #176]	; (8015630 <_tx_thread_create+0x1d8>)
 801557e:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8015580:	4b2d      	ldr	r3, [pc, #180]	; (8015638 <_tx_thread_create+0x1e0>)
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	3301      	adds	r3, #1
 8015586:	4a2c      	ldr	r2, [pc, #176]	; (8015638 <_tx_thread_create+0x1e0>)
 8015588:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 801558a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801558c:	2b01      	cmp	r3, #1
 801558e:	d129      	bne.n	80155e4 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015590:	f3ef 8305 	mrs	r3, IPSR
 8015594:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 8015596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8015598:	4b28      	ldr	r3, [pc, #160]	; (801563c <_tx_thread_create+0x1e4>)
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	4313      	orrs	r3, r2
 801559e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80155a2:	d30d      	bcc.n	80155c0 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80155a4:	4b26      	ldr	r3, [pc, #152]	; (8015640 <_tx_thread_create+0x1e8>)
 80155a6:	681b      	ldr	r3, [r3, #0]
 80155a8:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80155aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d009      	beq.n	80155c4 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80155b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80155b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80155b4:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80155b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80155b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80155ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80155bc:	63da      	str	r2, [r3, #60]	; 0x3c
 80155be:	e001      	b.n	80155c4 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 80155c0:	2300      	movs	r3, #0
 80155c2:	647b      	str	r3, [r7, #68]	; 0x44
 80155c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155c6:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80155c8:	6a3b      	ldr	r3, [r7, #32]
 80155ca:	f383 8810 	msr	PRIMASK, r3
}
 80155ce:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 80155d0:	68f8      	ldr	r0, [r7, #12]
 80155d2:	f000 fa0b 	bl	80159ec <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 80155d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d01e      	beq.n	801561a <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 80155dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80155de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80155e0:	63da      	str	r2, [r3, #60]	; 0x3c
 80155e2:	e01a      	b.n	801561a <_tx_thread_create+0x1c2>
 80155e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155e6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80155e8:	693b      	ldr	r3, [r7, #16]
 80155ea:	f383 8810 	msr	PRIMASK, r3
}
 80155ee:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80155f0:	f3ef 8310 	mrs	r3, PRIMASK
 80155f4:	61bb      	str	r3, [r7, #24]
    return(posture);
 80155f6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80155f8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80155fa:	b672      	cpsid	i
    return(int_posture);
 80155fc:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 80155fe:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8015600:	4b0d      	ldr	r3, [pc, #52]	; (8015638 <_tx_thread_create+0x1e0>)
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	3b01      	subs	r3, #1
 8015606:	4a0c      	ldr	r2, [pc, #48]	; (8015638 <_tx_thread_create+0x1e0>)
 8015608:	6013      	str	r3, [r2, #0]
 801560a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801560c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801560e:	69fb      	ldr	r3, [r7, #28]
 8015610:	f383 8810 	msr	PRIMASK, r3
}
 8015614:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8015616:	f000 f9af 	bl	8015978 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 801561a:	2300      	movs	r3, #0
}
 801561c:	4618      	mov	r0, r3
 801561e:	3748      	adds	r7, #72	; 0x48
 8015620:	46bd      	mov	sp, r7
 8015622:	bd80      	pop	{r7, pc}
 8015624:	08015ec1 	.word	0x08015ec1
 8015628:	080157e1 	.word	0x080157e1
 801562c:	54485244 	.word	0x54485244
 8015630:	24014f28 	.word	0x24014f28
 8015634:	24014f24 	.word	0x24014f24
 8015638:	24014fb4 	.word	0x24014fb4
 801563c:	2400006c 	.word	0x2400006c
 8015640:	24014f20 	.word	0x24014f20

08015644 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 8015644:	b480      	push	{r7}
 8015646:	b087      	sub	sp, #28
 8015648:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801564a:	f3ef 8310 	mrs	r3, PRIMASK
 801564e:	60bb      	str	r3, [r7, #8]
    return(posture);
 8015650:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8015652:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015654:	b672      	cpsid	i
    return(int_posture);
 8015656:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8015658:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801565a:	4b08      	ldr	r3, [pc, #32]	; (801567c <_tx_thread_identify+0x38>)
 801565c:	681b      	ldr	r3, [r3, #0]
 801565e:	613b      	str	r3, [r7, #16]
 8015660:	697b      	ldr	r3, [r7, #20]
 8015662:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	f383 8810 	msr	PRIMASK, r3
}
 801566a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 801566c:	693b      	ldr	r3, [r7, #16]
}
 801566e:	4618      	mov	r0, r3
 8015670:	371c      	adds	r7, #28
 8015672:	46bd      	mov	sp, r7
 8015674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015678:	4770      	bx	lr
 801567a:	bf00      	nop
 801567c:	24014f1c 	.word	0x24014f1c

08015680 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8015680:	b580      	push	{r7, lr}
 8015682:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8015684:	4b12      	ldr	r3, [pc, #72]	; (80156d0 <_tx_thread_initialize+0x50>)
 8015686:	2200      	movs	r2, #0
 8015688:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 801568a:	4b12      	ldr	r3, [pc, #72]	; (80156d4 <_tx_thread_initialize+0x54>)
 801568c:	2200      	movs	r2, #0
 801568e:	601a      	str	r2, [r3, #0]
 8015690:	4b11      	ldr	r3, [pc, #68]	; (80156d8 <_tx_thread_initialize+0x58>)
 8015692:	2200      	movs	r2, #0
 8015694:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8015696:	4b11      	ldr	r3, [pc, #68]	; (80156dc <_tx_thread_initialize+0x5c>)
 8015698:	2220      	movs	r2, #32
 801569a:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 801569c:	2280      	movs	r2, #128	; 0x80
 801569e:	2100      	movs	r1, #0
 80156a0:	480f      	ldr	r0, [pc, #60]	; (80156e0 <_tx_thread_initialize+0x60>)
 80156a2:	f001 fbb7 	bl	8016e14 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 80156a6:	4b0f      	ldr	r3, [pc, #60]	; (80156e4 <_tx_thread_initialize+0x64>)
 80156a8:	2200      	movs	r2, #0
 80156aa:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 80156ac:	4b0e      	ldr	r3, [pc, #56]	; (80156e8 <_tx_thread_initialize+0x68>)
 80156ae:	2200      	movs	r2, #0
 80156b0:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 80156b2:	4b0e      	ldr	r3, [pc, #56]	; (80156ec <_tx_thread_initialize+0x6c>)
 80156b4:	2200      	movs	r2, #0
 80156b6:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 80156b8:	4b0d      	ldr	r3, [pc, #52]	; (80156f0 <_tx_thread_initialize+0x70>)
 80156ba:	2200      	movs	r2, #0
 80156bc:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 80156be:	4b0d      	ldr	r3, [pc, #52]	; (80156f4 <_tx_thread_initialize+0x74>)
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 80156c6:	4a0b      	ldr	r2, [pc, #44]	; (80156f4 <_tx_thread_initialize+0x74>)
 80156c8:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 80156ca:	bf00      	nop
 80156cc:	bd80      	pop	{r7, pc}
 80156ce:	bf00      	nop
 80156d0:	24014f1c 	.word	0x24014f1c
 80156d4:	24014f20 	.word	0x24014f20
 80156d8:	24014f2c 	.word	0x24014f2c
 80156dc:	24014f30 	.word	0x24014f30
 80156e0:	24014f34 	.word	0x24014f34
 80156e4:	24014f24 	.word	0x24014f24
 80156e8:	24014f28 	.word	0x24014f28
 80156ec:	24014fb4 	.word	0x24014fb4
 80156f0:	24014fb8 	.word	0x24014fb8
 80156f4:	24014fbc 	.word	0x24014fbc

080156f8 <_tx_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b08c      	sub	sp, #48	; 0x30
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	60f8      	str	r0, [r7, #12]
 8015700:	60b9      	str	r1, [r7, #8]
 8015702:	607a      	str	r2, [r7, #4]
#endif
UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8015704:	2300      	movs	r3, #0
 8015706:	62bb      	str	r3, [r7, #40]	; 0x28
#ifdef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Only allow 0 (disable all preemption) and returning preemption-threshold to the
       current thread priority if preemption-threshold is disabled. All other threshold
       values are converted to 0.  */
    if (thread_ptr -> tx_thread_user_priority != new_threshold)
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801570e:	68ba      	ldr	r2, [r7, #8]
 8015710:	429a      	cmp	r2, r3
 8015712:	d004      	beq.n	801571e <_tx_thread_preemption_change+0x26>
    {

        /* Is the new threshold zero?  */
        if (new_threshold != ((UINT) 0))
 8015714:	68bb      	ldr	r3, [r7, #8]
 8015716:	2b00      	cmp	r3, #0
 8015718:	d001      	beq.n	801571e <_tx_thread_preemption_change+0x26>
        {

            /* Convert the new threshold to disable all preemption, since preemption-threshold is
               not supported.  */
            new_threshold =  ((UINT) 0);
 801571a:	2300      	movs	r3, #0
 801571c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801571e:	f3ef 8310 	mrs	r3, PRIMASK
 8015722:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8015724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 8015726:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015728:	b672      	cpsid	i
    return(int_posture);
 801572a:	6a3b      	ldr	r3, [r7, #32]
        }
    }
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 801572c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8015734:	68ba      	ldr	r2, [r7, #8]
 8015736:	429a      	cmp	r2, r3
 8015738:	d902      	bls.n	8015740 <_tx_thread_preemption_change+0x48>
    {

        /* Return error.  */
        status =  TX_THRESH_ERROR;
 801573a:	2318      	movs	r3, #24
 801573c:	62bb      	str	r3, [r7, #40]	; 0x28
 801573e:	e03e      	b.n	80157be <_tx_thread_preemption_change+0xc6>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	601a      	str	r2, [r3, #0]

        /* Setup the new threshold.  */
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	68ba      	ldr	r2, [r7, #8]
 801574e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Determine if the new threshold represents a higher priority than the priority inheritance threshold.  */
        if (new_threshold < thread_ptr -> tx_thread_inherit_priority)
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8015758:	68ba      	ldr	r2, [r7, #8]
 801575a:	429a      	cmp	r2, r3
 801575c:	d203      	bcs.n	8015766 <_tx_thread_preemption_change+0x6e>
        {

            /* Update the actual preemption-threshold with the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_threshold;
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	68ba      	ldr	r2, [r7, #8]
 8015762:	63da      	str	r2, [r3, #60]	; 0x3c
 8015764:	e004      	b.n	8015770 <_tx_thread_preemption_change+0x78>
        }
        else
        {

            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 8015766:	68fb      	ldr	r3, [r7, #12]
 8015768:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801576c:	68fb      	ldr	r3, [r7, #12]
 801576e:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015774:	4b17      	ldr	r3, [pc, #92]	; (80157d4 <_tx_thread_preemption_change+0xdc>)
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	429a      	cmp	r2, r3
 801577a:	d920      	bls.n	80157be <_tx_thread_preemption_change+0xc6>
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 801577c:	4b15      	ldr	r3, [pc, #84]	; (80157d4 <_tx_thread_preemption_change+0xdc>)
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	68ba      	ldr	r2, [r7, #8]
 8015782:	429a      	cmp	r2, r3
 8015784:	d91b      	bls.n	80157be <_tx_thread_preemption_change+0xc6>
            {

                /* If the current execute pointer is the same at this thread, preemption needs to take place.  */
                if (_tx_thread_execute_ptr == thread_ptr)
 8015786:	4b14      	ldr	r3, [pc, #80]	; (80157d8 <_tx_thread_preemption_change+0xe0>)
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	68fa      	ldr	r2, [r7, #12]
 801578c:	429a      	cmp	r2, r3
 801578e:	d116      	bne.n	80157be <_tx_thread_preemption_change+0xc6>
                        _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
                    }
#endif

                    /* Setup the highest priority thread to execute.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8015790:	4b10      	ldr	r3, [pc, #64]	; (80157d4 <_tx_thread_preemption_change+0xdc>)
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	4a11      	ldr	r2, [pc, #68]	; (80157dc <_tx_thread_preemption_change+0xe4>)
 8015796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801579a:	4a0f      	ldr	r2, [pc, #60]	; (80157d8 <_tx_thread_preemption_change+0xe0>)
 801579c:	6013      	str	r3, [r2, #0]
 801579e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157a0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80157a2:	697b      	ldr	r3, [r7, #20]
 80157a4:	f383 8810 	msr	PRIMASK, r3
}
 80157a8:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Check for preemption.  */
                    _tx_thread_system_preempt_check();
 80157aa:	f000 f8e5 	bl	8015978 <_tx_thread_system_preempt_check>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80157ae:	f3ef 8310 	mrs	r3, PRIMASK
 80157b2:	61fb      	str	r3, [r7, #28]
    return(posture);
 80157b4:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80157b6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80157b8:	b672      	cpsid	i
    return(int_posture);
 80157ba:	69bb      	ldr	r3, [r7, #24]

                    /* Disable interrupts.  */
                    TX_DISABLE
 80157bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80157be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157c0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80157c2:	693b      	ldr	r3, [r7, #16]
 80157c4:	f383 8810 	msr	PRIMASK, r3
}
 80157c8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 80157ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80157cc:	4618      	mov	r0, r3
 80157ce:	3730      	adds	r7, #48	; 0x30
 80157d0:	46bd      	mov	sp, r7
 80157d2:	bd80      	pop	{r7, pc}
 80157d4:	24014f30 	.word	0x24014f30
 80157d8:	24014f20 	.word	0x24014f20
 80157dc:	24014f34 	.word	0x24014f34

080157e0 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 80157e0:	b580      	push	{r7, lr}
 80157e2:	b088      	sub	sp, #32
 80157e4:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80157e6:	4b21      	ldr	r3, [pc, #132]	; (801586c <_tx_thread_shell_entry+0x8c>)
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 80157ec:	69fb      	ldr	r3, [r7, #28]
 80157ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80157f0:	69fa      	ldr	r2, [r7, #28]
 80157f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80157f4:	4610      	mov	r0, r2
 80157f6:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 80157f8:	4b1d      	ldr	r3, [pc, #116]	; (8015870 <_tx_thread_shell_entry+0x90>)
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d003      	beq.n	8015808 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8015800:	4b1b      	ldr	r3, [pc, #108]	; (8015870 <_tx_thread_shell_entry+0x90>)
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	69f8      	ldr	r0, [r7, #28]
 8015806:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015808:	f3ef 8310 	mrs	r3, PRIMASK
 801580c:	607b      	str	r3, [r7, #4]
    return(posture);
 801580e:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8015810:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015812:	b672      	cpsid	i
    return(int_posture);
 8015814:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8015816:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8015818:	69fb      	ldr	r3, [r7, #28]
 801581a:	2201      	movs	r2, #1
 801581c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801581e:	69fb      	ldr	r3, [r7, #28]
 8015820:	2201      	movs	r2, #1
 8015822:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8015824:	69fb      	ldr	r3, [r7, #28]
 8015826:	2200      	movs	r2, #0
 8015828:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 801582a:	4b12      	ldr	r3, [pc, #72]	; (8015874 <_tx_thread_shell_entry+0x94>)
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	3301      	adds	r3, #1
 8015830:	4a10      	ldr	r2, [pc, #64]	; (8015874 <_tx_thread_shell_entry+0x94>)
 8015832:	6013      	str	r3, [r2, #0]
 8015834:	69bb      	ldr	r3, [r7, #24]
 8015836:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015838:	68bb      	ldr	r3, [r7, #8]
 801583a:	f383 8810 	msr	PRIMASK, r3
}
 801583e:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8015840:	f3ef 8314 	mrs	r3, CONTROL
 8015844:	60fb      	str	r3, [r7, #12]
    return(control_value);
 8015846:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 8015848:	617b      	str	r3, [r7, #20]
 801584a:	697b      	ldr	r3, [r7, #20]
 801584c:	f023 0304 	bic.w	r3, r3, #4
 8015850:	617b      	str	r3, [r7, #20]
 8015852:	697b      	ldr	r3, [r7, #20]
 8015854:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 8015856:	693b      	ldr	r3, [r7, #16]
 8015858:	f383 8814 	msr	CONTROL, r3
}
 801585c:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 801585e:	69f8      	ldr	r0, [r7, #28]
 8015860:	f000 f9c4 	bl	8015bec <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8015864:	bf00      	nop
 8015866:	3720      	adds	r7, #32
 8015868:	46bd      	mov	sp, r7
 801586a:	bd80      	pop	{r7, pc}
 801586c:	24014f1c 	.word	0x24014f1c
 8015870:	24014fb8 	.word	0x24014fb8
 8015874:	24014fb4 	.word	0x24014fb4

08015878 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8015878:	b580      	push	{r7, lr}
 801587a:	b08e      	sub	sp, #56	; 0x38
 801587c:	af00      	add	r7, sp, #0
 801587e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015880:	f3ef 8310 	mrs	r3, PRIMASK
 8015884:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8015886:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8015888:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 801588a:	b672      	cpsid	i
    return(int_posture);
 801588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 801588e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8015890:	4b35      	ldr	r3, [pc, #212]	; (8015968 <_tx_thread_sleep+0xf0>)
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8015896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015898:	2b00      	cmp	r3, #0
 801589a:	d108      	bne.n	80158ae <_tx_thread_sleep+0x36>
 801589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801589e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80158a0:	6a3b      	ldr	r3, [r7, #32]
 80158a2:	f383 8810 	msr	PRIMASK, r3
}
 80158a6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80158a8:	2313      	movs	r3, #19
 80158aa:	637b      	str	r3, [r7, #52]	; 0x34
 80158ac:	e056      	b.n	801595c <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80158ae:	f3ef 8305 	mrs	r3, IPSR
 80158b2:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80158b4:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80158b6:	4b2d      	ldr	r3, [pc, #180]	; (801596c <_tx_thread_sleep+0xf4>)
 80158b8:	681b      	ldr	r3, [r3, #0]
 80158ba:	4313      	orrs	r3, r2
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d008      	beq.n	80158d2 <_tx_thread_sleep+0x5a>
 80158c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158c2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80158c4:	69bb      	ldr	r3, [r7, #24]
 80158c6:	f383 8810 	msr	PRIMASK, r3
}
 80158ca:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80158cc:	2313      	movs	r3, #19
 80158ce:	637b      	str	r3, [r7, #52]	; 0x34
 80158d0:	e044      	b.n	801595c <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 80158d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158d4:	4a26      	ldr	r2, [pc, #152]	; (8015970 <_tx_thread_sleep+0xf8>)
 80158d6:	4293      	cmp	r3, r2
 80158d8:	d108      	bne.n	80158ec <_tx_thread_sleep+0x74>
 80158da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158dc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80158de:	697b      	ldr	r3, [r7, #20]
 80158e0:	f383 8810 	msr	PRIMASK, r3
}
 80158e4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80158e6:	2313      	movs	r3, #19
 80158e8:	637b      	str	r3, [r7, #52]	; 0x34
 80158ea:	e037      	b.n	801595c <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d108      	bne.n	8015904 <_tx_thread_sleep+0x8c>
 80158f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80158f4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80158f6:	693b      	ldr	r3, [r7, #16]
 80158f8:	f383 8810 	msr	PRIMASK, r3
}
 80158fc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 80158fe:	2300      	movs	r3, #0
 8015900:	637b      	str	r3, [r7, #52]	; 0x34
 8015902:	e02b      	b.n	801595c <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8015904:	4b1b      	ldr	r3, [pc, #108]	; (8015974 <_tx_thread_sleep+0xfc>)
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	2b00      	cmp	r3, #0
 801590a:	d008      	beq.n	801591e <_tx_thread_sleep+0xa6>
 801590c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801590e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	f383 8810 	msr	PRIMASK, r3
}
 8015916:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8015918:	2313      	movs	r3, #19
 801591a:	637b      	str	r3, [r7, #52]	; 0x34
 801591c:	e01e      	b.n	801595c <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 801591e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015920:	2204      	movs	r2, #4
 8015922:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8015924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015926:	2201      	movs	r2, #1
 8015928:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801592a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801592c:	2200      	movs	r2, #0
 801592e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8015932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015934:	687a      	ldr	r2, [r7, #4]
 8015936:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8015938:	4b0e      	ldr	r3, [pc, #56]	; (8015974 <_tx_thread_sleep+0xfc>)
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	3301      	adds	r3, #1
 801593e:	4a0d      	ldr	r2, [pc, #52]	; (8015974 <_tx_thread_sleep+0xfc>)
 8015940:	6013      	str	r3, [r2, #0]
 8015942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015944:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015946:	68bb      	ldr	r3, [r7, #8]
 8015948:	f383 8810 	msr	PRIMASK, r3
}
 801594c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801594e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015950:	f000 f94c 	bl	8015bec <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8015954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801595a:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 801595c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801595e:	4618      	mov	r0, r3
 8015960:	3738      	adds	r7, #56	; 0x38
 8015962:	46bd      	mov	sp, r7
 8015964:	bd80      	pop	{r7, pc}
 8015966:	bf00      	nop
 8015968:	24014f1c 	.word	0x24014f1c
 801596c:	2400006c 	.word	0x2400006c
 8015970:	24015064 	.word	0x24015064
 8015974:	24014fb4 	.word	0x24014fb4

08015978 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8015978:	b480      	push	{r7}
 801597a:	b089      	sub	sp, #36	; 0x24
 801597c:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801597e:	4b17      	ldr	r3, [pc, #92]	; (80159dc <_tx_thread_system_preempt_check+0x64>)
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8015984:	69fb      	ldr	r3, [r7, #28]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d121      	bne.n	80159ce <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 801598a:	4b15      	ldr	r3, [pc, #84]	; (80159e0 <_tx_thread_system_preempt_check+0x68>)
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8015990:	4b14      	ldr	r3, [pc, #80]	; (80159e4 <_tx_thread_system_preempt_check+0x6c>)
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8015996:	69ba      	ldr	r2, [r7, #24]
 8015998:	697b      	ldr	r3, [r7, #20]
 801599a:	429a      	cmp	r2, r3
 801599c:	d017      	beq.n	80159ce <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801599e:	4b12      	ldr	r3, [pc, #72]	; (80159e8 <_tx_thread_system_preempt_check+0x70>)
 80159a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80159a4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80159a6:	f3ef 8305 	mrs	r3, IPSR
 80159aa:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80159ac:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d10c      	bne.n	80159cc <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80159b2:	f3ef 8310 	mrs	r3, PRIMASK
 80159b6:	60fb      	str	r3, [r7, #12]
    return(posture);
 80159b8:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 80159ba:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80159bc:	b662      	cpsie	i
}
 80159be:	bf00      	nop
 80159c0:	68bb      	ldr	r3, [r7, #8]
 80159c2:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	f383 8810 	msr	PRIMASK, r3
}
 80159ca:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 80159cc:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 80159ce:	bf00      	nop
 80159d0:	3724      	adds	r7, #36	; 0x24
 80159d2:	46bd      	mov	sp, r7
 80159d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159d8:	4770      	bx	lr
 80159da:	bf00      	nop
 80159dc:	24014fb4 	.word	0x24014fb4
 80159e0:	24014f1c 	.word	0x24014f1c
 80159e4:	24014f20 	.word	0x24014f20
 80159e8:	e000ed04 	.word	0xe000ed04

080159ec <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80159ec:	b580      	push	{r7, lr}
 80159ee:	b096      	sub	sp, #88	; 0x58
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80159f4:	f3ef 8310 	mrs	r3, PRIMASK
 80159f8:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 80159fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 80159fc:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80159fe:	b672      	cpsid	i
    return(int_posture);
 8015a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8015a02:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d005      	beq.n	8015a18 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	334c      	adds	r3, #76	; 0x4c
 8015a10:	4618      	mov	r0, r3
 8015a12:	f000 fc13 	bl	801623c <_tx_timer_system_deactivate>
 8015a16:	e002      	b.n	8015a1e <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	2200      	movs	r2, #0
 8015a1c:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8015a1e:	4b6c      	ldr	r3, [pc, #432]	; (8015bd0 <_tx_thread_system_resume+0x1e4>)
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	3b01      	subs	r3, #1
 8015a24:	4a6a      	ldr	r2, [pc, #424]	; (8015bd0 <_tx_thread_system_resume+0x1e4>)
 8015a26:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	f040 8083 	bne.w	8015b38 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	f000 8097 	beq.w	8015b6a <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d172      	bne.n	8015b2a <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	2200      	movs	r2, #0
 8015a48:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a4e:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8015a50:	4a60      	ldr	r2, [pc, #384]	; (8015bd4 <_tx_thread_system_resume+0x1e8>)
 8015a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015a58:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 8015a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d154      	bne.n	8015b0a <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8015a60:	495c      	ldr	r1, [pc, #368]	; (8015bd4 <_tx_thread_system_resume+0x1e8>)
 8015a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a64:	687a      	ldr	r2, [r7, #4]
 8015a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	687a      	ldr	r2, [r7, #4]
 8015a6e:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	687a      	ldr	r2, [r7, #4]
 8015a74:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8015a76:	2201      	movs	r2, #1
 8015a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8015a7e:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8015a80:	4b55      	ldr	r3, [pc, #340]	; (8015bd8 <_tx_thread_system_resume+0x1ec>)
 8015a82:	681a      	ldr	r2, [r3, #0]
 8015a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015a86:	4313      	orrs	r3, r2
 8015a88:	4a53      	ldr	r2, [pc, #332]	; (8015bd8 <_tx_thread_system_resume+0x1ec>)
 8015a8a:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8015a8c:	4b53      	ldr	r3, [pc, #332]	; (8015bdc <_tx_thread_system_resume+0x1f0>)
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015a92:	429a      	cmp	r2, r3
 8015a94:	d269      	bcs.n	8015b6a <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8015a96:	4a51      	ldr	r2, [pc, #324]	; (8015bdc <_tx_thread_system_resume+0x1f0>)
 8015a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a9a:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8015a9c:	4b50      	ldr	r3, [pc, #320]	; (8015be0 <_tx_thread_system_resume+0x1f4>)
 8015a9e:	681b      	ldr	r3, [r3, #0]
 8015aa0:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8015aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d103      	bne.n	8015ab0 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8015aa8:	4a4d      	ldr	r2, [pc, #308]	; (8015be0 <_tx_thread_system_resume+0x1f4>)
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	6013      	str	r3, [r2, #0]
 8015aae:	e05c      	b.n	8015b6a <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8015ab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015ab4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015ab6:	429a      	cmp	r2, r3
 8015ab8:	d257      	bcs.n	8015b6a <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8015aba:	4a49      	ldr	r2, [pc, #292]	; (8015be0 <_tx_thread_system_resume+0x1f4>)
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	6013      	str	r3, [r2, #0]
 8015ac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ac6:	f383 8810 	msr	PRIMASK, r3
}
 8015aca:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8015acc:	4b40      	ldr	r3, [pc, #256]	; (8015bd0 <_tx_thread_system_resume+0x1e4>)
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8015ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d174      	bne.n	8015bc2 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8015ad8:	4b42      	ldr	r3, [pc, #264]	; (8015be4 <_tx_thread_system_resume+0x1f8>)
 8015ada:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ade:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015ae0:	f3ef 8305 	mrs	r3, IPSR
 8015ae4:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 8015ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d10c      	bne.n	8015b06 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015aec:	f3ef 8310 	mrs	r3, PRIMASK
 8015af0:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8015af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8015af4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8015af6:	b662      	cpsie	i
}
 8015af8:	bf00      	nop
 8015afa:	6a3b      	ldr	r3, [r7, #32]
 8015afc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015afe:	69fb      	ldr	r3, [r7, #28]
 8015b00:	f383 8810 	msr	PRIMASK, r3
}
 8015b04:	bf00      	nop
}
 8015b06:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8015b08:	e05b      	b.n	8015bc2 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8015b0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b0e:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8015b10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015b12:	687a      	ldr	r2, [r7, #4]
 8015b14:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8015b16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015b18:	687a      	ldr	r2, [r7, #4]
 8015b1a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015b20:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015b26:	621a      	str	r2, [r3, #32]
 8015b28:	e01f      	b.n	8015b6a <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	2200      	movs	r2, #0
 8015b2e:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	2203      	movs	r2, #3
 8015b34:	631a      	str	r2, [r3, #48]	; 0x30
 8015b36:	e018      	b.n	8015b6a <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b3c:	2b01      	cmp	r3, #1
 8015b3e:	d014      	beq.n	8015b6a <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b44:	2b02      	cmp	r3, #2
 8015b46:	d010      	beq.n	8015b6a <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d106      	bne.n	8015b5e <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	2200      	movs	r2, #0
 8015b54:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	2200      	movs	r2, #0
 8015b5a:	631a      	str	r2, [r3, #48]	; 0x30
 8015b5c:	e005      	b.n	8015b6a <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	2200      	movs	r2, #0
 8015b62:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	2203      	movs	r2, #3
 8015b68:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8015b6a:	4b1f      	ldr	r3, [pc, #124]	; (8015be8 <_tx_thread_system_resume+0x1fc>)
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8015b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015b72:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015b74:	69bb      	ldr	r3, [r7, #24]
 8015b76:	f383 8810 	msr	PRIMASK, r3
}
 8015b7a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8015b7c:	4b18      	ldr	r3, [pc, #96]	; (8015be0 <_tx_thread_system_resume+0x1f4>)
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015b82:	429a      	cmp	r2, r3
 8015b84:	d020      	beq.n	8015bc8 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8015b86:	4b12      	ldr	r3, [pc, #72]	; (8015bd0 <_tx_thread_system_resume+0x1e4>)
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 8015b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d11a      	bne.n	8015bc8 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8015b92:	4b14      	ldr	r3, [pc, #80]	; (8015be4 <_tx_thread_system_resume+0x1f8>)
 8015b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b98:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015b9a:	f3ef 8305 	mrs	r3, IPSR
 8015b9e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8015ba0:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d10f      	bne.n	8015bc6 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8015baa:	613b      	str	r3, [r7, #16]
    return(posture);
 8015bac:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8015bae:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8015bb0:	b662      	cpsie	i
}
 8015bb2:	bf00      	nop
 8015bb4:	68fb      	ldr	r3, [r7, #12]
 8015bb6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015bb8:	68bb      	ldr	r3, [r7, #8]
 8015bba:	f383 8810 	msr	PRIMASK, r3
}
 8015bbe:	bf00      	nop
}
 8015bc0:	e001      	b.n	8015bc6 <_tx_thread_system_resume+0x1da>
                                return;
 8015bc2:	bf00      	nop
 8015bc4:	e000      	b.n	8015bc8 <_tx_thread_system_resume+0x1dc>
 8015bc6:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8015bc8:	3758      	adds	r7, #88	; 0x58
 8015bca:	46bd      	mov	sp, r7
 8015bcc:	bd80      	pop	{r7, pc}
 8015bce:	bf00      	nop
 8015bd0:	24014fb4 	.word	0x24014fb4
 8015bd4:	24014f34 	.word	0x24014f34
 8015bd8:	24014f2c 	.word	0x24014f2c
 8015bdc:	24014f30 	.word	0x24014f30
 8015be0:	24014f20 	.word	0x24014f20
 8015be4:	e000ed04 	.word	0xe000ed04
 8015be8:	24014f1c 	.word	0x24014f1c

08015bec <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8015bec:	b580      	push	{r7, lr}
 8015bee:	b09e      	sub	sp, #120	; 0x78
 8015bf0:	af00      	add	r7, sp, #0
 8015bf2:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8015bf4:	4b81      	ldr	r3, [pc, #516]	; (8015dfc <_tx_thread_system_suspend+0x210>)
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8015bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8015c00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8015c02:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8015c04:	b672      	cpsid	i
    return(int_posture);
 8015c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8015c08:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8015c0a:	687a      	ldr	r2, [r7, #4]
 8015c0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015c0e:	429a      	cmp	r2, r3
 8015c10:	d112      	bne.n	8015c38 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015c16:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8015c18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d008      	beq.n	8015c30 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8015c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c24:	d004      	beq.n	8015c30 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	334c      	adds	r3, #76	; 0x4c
 8015c2a:	4618      	mov	r0, r3
 8015c2c:	f000 faa4 	bl	8016178 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	69db      	ldr	r3, [r3, #28]
 8015c34:	4a72      	ldr	r2, [pc, #456]	; (8015e00 <_tx_thread_system_suspend+0x214>)
 8015c36:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8015c38:	4b72      	ldr	r3, [pc, #456]	; (8015e04 <_tx_thread_system_suspend+0x218>)
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	3b01      	subs	r3, #1
 8015c3e:	4a71      	ldr	r2, [pc, #452]	; (8015e04 <_tx_thread_system_suspend+0x218>)
 8015c40:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015c46:	2b01      	cmp	r3, #1
 8015c48:	f040 80a6 	bne.w	8015d98 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	2200      	movs	r2, #0
 8015c50:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c56:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	6a1b      	ldr	r3, [r3, #32]
 8015c5c:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8015c5e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	429a      	cmp	r2, r3
 8015c64:	d015      	beq.n	8015c92 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c6a:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8015c6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015c6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015c70:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8015c72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015c74:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015c76:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8015c78:	4a63      	ldr	r2, [pc, #396]	; (8015e08 <_tx_thread_system_suspend+0x21c>)
 8015c7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015c80:	687a      	ldr	r2, [r7, #4]
 8015c82:	429a      	cmp	r2, r3
 8015c84:	d157      	bne.n	8015d36 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8015c86:	4960      	ldr	r1, [pc, #384]	; (8015e08 <_tx_thread_system_suspend+0x21c>)
 8015c88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015c8a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8015c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8015c90:	e051      	b.n	8015d36 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8015c92:	4a5d      	ldr	r2, [pc, #372]	; (8015e08 <_tx_thread_system_suspend+0x21c>)
 8015c94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015c96:	2100      	movs	r1, #0
 8015c98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8015c9c:	2201      	movs	r2, #1
 8015c9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8015ca4:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8015ca6:	4b59      	ldr	r3, [pc, #356]	; (8015e0c <_tx_thread_system_suspend+0x220>)
 8015ca8:	681a      	ldr	r2, [r3, #0]
 8015caa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015cac:	43db      	mvns	r3, r3
 8015cae:	4013      	ands	r3, r2
 8015cb0:	4a56      	ldr	r2, [pc, #344]	; (8015e0c <_tx_thread_system_suspend+0x220>)
 8015cb2:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8015cb8:	4b54      	ldr	r3, [pc, #336]	; (8015e0c <_tx_thread_system_suspend+0x220>)
 8015cba:	681b      	ldr	r3, [r3, #0]
 8015cbc:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8015cbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d12b      	bne.n	8015d1c <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8015cc4:	4b52      	ldr	r3, [pc, #328]	; (8015e10 <_tx_thread_system_suspend+0x224>)
 8015cc6:	2220      	movs	r2, #32
 8015cc8:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8015cca:	4b52      	ldr	r3, [pc, #328]	; (8015e14 <_tx_thread_system_suspend+0x228>)
 8015ccc:	2200      	movs	r2, #0
 8015cce:	601a      	str	r2, [r3, #0]
 8015cd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015cd2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015cd6:	f383 8810 	msr	PRIMASK, r3
}
 8015cda:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8015cdc:	4b49      	ldr	r3, [pc, #292]	; (8015e04 <_tx_thread_system_suspend+0x218>)
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8015ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	f040 8081 	bne.w	8015dec <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8015cea:	4b4b      	ldr	r3, [pc, #300]	; (8015e18 <_tx_thread_system_suspend+0x22c>)
 8015cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015cf0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015cf2:	f3ef 8305 	mrs	r3, IPSR
 8015cf6:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8015cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d10c      	bne.n	8015d18 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015cfe:	f3ef 8310 	mrs	r3, PRIMASK
 8015d02:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8015d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8015d06:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8015d08:	b662      	cpsie	i
}
 8015d0a:	bf00      	nop
 8015d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d0e:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015d10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015d12:	f383 8810 	msr	PRIMASK, r3
}
 8015d16:	bf00      	nop
}
 8015d18:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8015d1a:	e067      	b.n	8015dec <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8015d1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015d1e:	fa93 f3a3 	rbit	r3, r3
 8015d22:	65bb      	str	r3, [r7, #88]	; 0x58
 8015d24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015d26:	fab3 f383 	clz	r3, r3
 8015d2a:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8015d2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8015d2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015d30:	4413      	add	r3, r2
 8015d32:	4a37      	ldr	r2, [pc, #220]	; (8015e10 <_tx_thread_system_suspend+0x224>)
 8015d34:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8015d36:	4b37      	ldr	r3, [pc, #220]	; (8015e14 <_tx_thread_system_suspend+0x228>)
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	687a      	ldr	r2, [r7, #4]
 8015d3c:	429a      	cmp	r2, r3
 8015d3e:	d12b      	bne.n	8015d98 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8015d40:	4b33      	ldr	r3, [pc, #204]	; (8015e10 <_tx_thread_system_suspend+0x224>)
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	4a30      	ldr	r2, [pc, #192]	; (8015e08 <_tx_thread_system_suspend+0x21c>)
 8015d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015d4a:	4a32      	ldr	r2, [pc, #200]	; (8015e14 <_tx_thread_system_suspend+0x228>)
 8015d4c:	6013      	str	r3, [r2, #0]
 8015d4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015d50:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d54:	f383 8810 	msr	PRIMASK, r3
}
 8015d58:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8015d5a:	4b2a      	ldr	r3, [pc, #168]	; (8015e04 <_tx_thread_system_suspend+0x218>)
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8015d60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d144      	bne.n	8015df0 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8015d66:	4b2c      	ldr	r3, [pc, #176]	; (8015e18 <_tx_thread_system_suspend+0x22c>)
 8015d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d6c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015d6e:	f3ef 8305 	mrs	r3, IPSR
 8015d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8015d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d10c      	bne.n	8015d94 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015d7a:	f3ef 8310 	mrs	r3, PRIMASK
 8015d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8015d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8015d82:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8015d84:	b662      	cpsie	i
}
 8015d86:	bf00      	nop
 8015d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d8a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015d8c:	6a3b      	ldr	r3, [r7, #32]
 8015d8e:	f383 8810 	msr	PRIMASK, r3
}
 8015d92:	bf00      	nop
}
 8015d94:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8015d96:	e02b      	b.n	8015df0 <_tx_thread_system_suspend+0x204>
 8015d98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015d9a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015d9c:	69fb      	ldr	r3, [r7, #28]
 8015d9e:	f383 8810 	msr	PRIMASK, r3
}
 8015da2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8015da4:	4b1b      	ldr	r3, [pc, #108]	; (8015e14 <_tx_thread_system_suspend+0x228>)
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015daa:	429a      	cmp	r2, r3
 8015dac:	d022      	beq.n	8015df4 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8015dae:	4b15      	ldr	r3, [pc, #84]	; (8015e04 <_tx_thread_system_suspend+0x218>)
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8015db4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d11c      	bne.n	8015df4 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8015dba:	4b17      	ldr	r3, [pc, #92]	; (8015e18 <_tx_thread_system_suspend+0x22c>)
 8015dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015dc0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8015dc2:	f3ef 8305 	mrs	r3, IPSR
 8015dc6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8015dc8:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d10c      	bne.n	8015de8 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015dce:	f3ef 8310 	mrs	r3, PRIMASK
 8015dd2:	617b      	str	r3, [r7, #20]
    return(posture);
 8015dd4:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8015dd6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8015dd8:	b662      	cpsie	i
}
 8015dda:	bf00      	nop
 8015ddc:	693b      	ldr	r3, [r7, #16]
 8015dde:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	f383 8810 	msr	PRIMASK, r3
}
 8015de6:	bf00      	nop
}
 8015de8:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8015dea:	e003      	b.n	8015df4 <_tx_thread_system_suspend+0x208>
                return;
 8015dec:	bf00      	nop
 8015dee:	e002      	b.n	8015df6 <_tx_thread_system_suspend+0x20a>
            return;
 8015df0:	bf00      	nop
 8015df2:	e000      	b.n	8015df6 <_tx_thread_system_suspend+0x20a>
    return;
 8015df4:	bf00      	nop
}
 8015df6:	3778      	adds	r7, #120	; 0x78
 8015df8:	46bd      	mov	sp, r7
 8015dfa:	bd80      	pop	{r7, pc}
 8015dfc:	24014f1c 	.word	0x24014f1c
 8015e00:	24015520 	.word	0x24015520
 8015e04:	24014fb4 	.word	0x24014fb4
 8015e08:	24014f34 	.word	0x24014f34
 8015e0c:	24014f2c 	.word	0x24014f2c
 8015e10:	24014f30 	.word	0x24014f30
 8015e14:	24014f20 	.word	0x24014f20
 8015e18:	e000ed04 	.word	0xe000ed04

08015e1c <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8015e1c:	b480      	push	{r7}
 8015e1e:	b087      	sub	sp, #28
 8015e20:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8015e22:	4b21      	ldr	r3, [pc, #132]	; (8015ea8 <_tx_thread_time_slice+0x8c>)
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015e28:	f3ef 8310 	mrs	r3, PRIMASK
 8015e2c:	60fb      	str	r3, [r7, #12]
    return(posture);
 8015e2e:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8015e30:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015e32:	b672      	cpsid	i
    return(int_posture);
 8015e34:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8015e36:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8015e38:	4b1c      	ldr	r3, [pc, #112]	; (8015eac <_tx_thread_time_slice+0x90>)
 8015e3a:	2200      	movs	r2, #0
 8015e3c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8015e3e:	697b      	ldr	r3, [r7, #20]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d024      	beq.n	8015e8e <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8015e44:	697b      	ldr	r3, [r7, #20]
 8015e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d120      	bne.n	8015e8e <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8015e4c:	697b      	ldr	r3, [r7, #20]
 8015e4e:	69da      	ldr	r2, [r3, #28]
 8015e50:	697b      	ldr	r3, [r7, #20]
 8015e52:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8015e54:	697b      	ldr	r3, [r7, #20]
 8015e56:	699b      	ldr	r3, [r3, #24]
 8015e58:	4a15      	ldr	r2, [pc, #84]	; (8015eb0 <_tx_thread_time_slice+0x94>)
 8015e5a:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8015e5c:	697b      	ldr	r3, [r7, #20]
 8015e5e:	6a1b      	ldr	r3, [r3, #32]
 8015e60:	697a      	ldr	r2, [r7, #20]
 8015e62:	429a      	cmp	r2, r3
 8015e64:	d013      	beq.n	8015e8e <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8015e66:	697b      	ldr	r3, [r7, #20]
 8015e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015e6a:	697b      	ldr	r3, [r7, #20]
 8015e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015e6e:	429a      	cmp	r2, r3
 8015e70:	d10d      	bne.n	8015e8e <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8015e72:	697b      	ldr	r3, [r7, #20]
 8015e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e76:	697a      	ldr	r2, [r7, #20]
 8015e78:	6a12      	ldr	r2, [r2, #32]
 8015e7a:	490e      	ldr	r1, [pc, #56]	; (8015eb4 <_tx_thread_time_slice+0x98>)
 8015e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8015e80:	4b0d      	ldr	r3, [pc, #52]	; (8015eb8 <_tx_thread_time_slice+0x9c>)
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	4a0b      	ldr	r2, [pc, #44]	; (8015eb4 <_tx_thread_time_slice+0x98>)
 8015e86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015e8a:	4a0c      	ldr	r2, [pc, #48]	; (8015ebc <_tx_thread_time_slice+0xa0>)
 8015e8c:	6013      	str	r3, [r2, #0]
 8015e8e:	693b      	ldr	r3, [r7, #16]
 8015e90:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	f383 8810 	msr	PRIMASK, r3
}
 8015e98:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8015e9a:	bf00      	nop
 8015e9c:	371c      	adds	r7, #28
 8015e9e:	46bd      	mov	sp, r7
 8015ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea4:	4770      	bx	lr
 8015ea6:	bf00      	nop
 8015ea8:	24014f1c 	.word	0x24014f1c
 8015eac:	24014fc4 	.word	0x24014fc4
 8015eb0:	24015520 	.word	0x24015520
 8015eb4:	24014f34 	.word	0x24014f34
 8015eb8:	24014f30 	.word	0x24014f30
 8015ebc:	24014f20 	.word	0x24014f20

08015ec0 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8015ec0:	b580      	push	{r7, lr}
 8015ec2:	b08a      	sub	sp, #40	; 0x28
 8015ec4:	af00      	add	r7, sp, #0
 8015ec6:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015ecc:	f3ef 8310 	mrs	r3, PRIMASK
 8015ed0:	617b      	str	r3, [r7, #20]
    return(posture);
 8015ed2:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8015ed4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015ed6:	b672      	cpsid	i
    return(int_posture);
 8015ed8:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8015eda:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8015edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ee0:	2b04      	cmp	r3, #4
 8015ee2:	d10e      	bne.n	8015f02 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8015ee4:	4b13      	ldr	r3, [pc, #76]	; (8015f34 <_tx_thread_timeout+0x74>)
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	3301      	adds	r3, #1
 8015eea:	4a12      	ldr	r2, [pc, #72]	; (8015f34 <_tx_thread_timeout+0x74>)
 8015eec:	6013      	str	r3, [r2, #0]
 8015eee:	6a3b      	ldr	r3, [r7, #32]
 8015ef0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015ef2:	68fb      	ldr	r3, [r7, #12]
 8015ef4:	f383 8810 	msr	PRIMASK, r3
}
 8015ef8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8015efa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015efc:	f7ff fd76 	bl	80159ec <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8015f00:	e013      	b.n	8015f2a <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8015f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015f06:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8015f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015f0e:	61bb      	str	r3, [r7, #24]
 8015f10:	6a3b      	ldr	r3, [r7, #32]
 8015f12:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015f14:	68bb      	ldr	r3, [r7, #8]
 8015f16:	f383 8810 	msr	PRIMASK, r3
}
 8015f1a:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8015f1c:	69fb      	ldr	r3, [r7, #28]
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d003      	beq.n	8015f2a <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8015f22:	69fb      	ldr	r3, [r7, #28]
 8015f24:	69b9      	ldr	r1, [r7, #24]
 8015f26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015f28:	4798      	blx	r3
}
 8015f2a:	bf00      	nop
 8015f2c:	3728      	adds	r7, #40	; 0x28
 8015f2e:	46bd      	mov	sp, r7
 8015f30:	bd80      	pop	{r7, pc}
 8015f32:	bf00      	nop
 8015f34:	24014fb4 	.word	0x24014fb4

08015f38 <_tx_time_get>:
/*  12-31-2020     Andres Mlinar            Modified comment(s),          */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
ULONG  _tx_time_get(VOID)
{
 8015f38:	b480      	push	{r7}
 8015f3a:	b087      	sub	sp, #28
 8015f3c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015f3e:	f3ef 8310 	mrs	r3, PRIMASK
 8015f42:	60bb      	str	r3, [r7, #8]
    return(posture);
 8015f44:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8015f46:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015f48:	b672      	cpsid	i
    return(int_posture);
 8015f4a:	687b      	ldr	r3, [r7, #4]
#endif
ULONG   temp_time;


    /* Disable interrupts.  */
    TX_DISABLE
 8015f4c:	617b      	str	r3, [r7, #20]

    /* Pickup the system clock time.  */
    temp_time =  _tx_timer_system_clock;
 8015f4e:	4b08      	ldr	r3, [pc, #32]	; (8015f70 <_tx_time_get+0x38>)
 8015f50:	681b      	ldr	r3, [r3, #0]
 8015f52:	613b      	str	r3, [r7, #16]
 8015f54:	697b      	ldr	r3, [r7, #20]
 8015f56:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8015f58:	68fb      	ldr	r3, [r7, #12]
 8015f5a:	f383 8810 	msr	PRIMASK, r3
}
 8015f5e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the time.  */
    return(temp_time);
 8015f60:	693b      	ldr	r3, [r7, #16]
}
 8015f62:	4618      	mov	r0, r3
 8015f64:	371c      	adds	r7, #28
 8015f66:	46bd      	mov	sp, r7
 8015f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f6c:	4770      	bx	lr
 8015f6e:	bf00      	nop
 8015f70:	24014fc0 	.word	0x24014fc0

08015f74 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 8015f74:	b580      	push	{r7, lr}
 8015f76:	b08a      	sub	sp, #40	; 0x28
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	60f8      	str	r0, [r7, #12]
 8015f7c:	60b9      	str	r1, [r7, #8]
 8015f7e:	607a      	str	r2, [r7, #4]
 8015f80:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 8015f82:	222c      	movs	r2, #44	; 0x2c
 8015f84:	2100      	movs	r1, #0
 8015f86:	68f8      	ldr	r0, [r7, #12]
 8015f88:	f000 ff44 	bl	8016e14 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	68ba      	ldr	r2, [r7, #8]
 8015f90:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015f96:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015f9c:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	687a      	ldr	r2, [r7, #4]
 8015fa2:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	683a      	ldr	r2, [r7, #0]
 8015fa8:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8015faa:	f3ef 8310 	mrs	r3, PRIMASK
 8015fae:	61bb      	str	r3, [r7, #24]
    return(posture);
 8015fb0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8015fb2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8015fb4:	b672      	cpsid	i
    return(int_posture);
 8015fb6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8015fb8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	4a1c      	ldr	r2, [pc, #112]	; (8016030 <_tx_timer_create+0xbc>)
 8015fbe:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 8015fc0:	4b1c      	ldr	r3, [pc, #112]	; (8016034 <_tx_timer_create+0xc0>)
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	d109      	bne.n	8015fdc <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 8015fc8:	4a1b      	ldr	r2, [pc, #108]	; (8016038 <_tx_timer_create+0xc4>)
 8015fca:	68fb      	ldr	r3, [r7, #12]
 8015fcc:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	68fa      	ldr	r2, [r7, #12]
 8015fd2:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	68fa      	ldr	r2, [r7, #12]
 8015fd8:	629a      	str	r2, [r3, #40]	; 0x28
 8015fda:	e011      	b.n	8016000 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 8015fdc:	4b16      	ldr	r3, [pc, #88]	; (8016038 <_tx_timer_create+0xc4>)
 8015fde:	681b      	ldr	r3, [r3, #0]
 8015fe0:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 8015fe2:	6a3b      	ldr	r3, [r7, #32]
 8015fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015fe6:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 8015fe8:	6a3b      	ldr	r3, [r7, #32]
 8015fea:	68fa      	ldr	r2, [r7, #12]
 8015fec:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 8015fee:	69fb      	ldr	r3, [r7, #28]
 8015ff0:	68fa      	ldr	r2, [r7, #12]
 8015ff2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	69fa      	ldr	r2, [r7, #28]
 8015ff8:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	6a3a      	ldr	r2, [r7, #32]
 8015ffe:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 8016000:	4b0c      	ldr	r3, [pc, #48]	; (8016034 <_tx_timer_create+0xc0>)
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	3301      	adds	r3, #1
 8016006:	4a0b      	ldr	r2, [pc, #44]	; (8016034 <_tx_timer_create+0xc0>)
 8016008:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 801600a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801600c:	2b01      	cmp	r3, #1
 801600e:	d104      	bne.n	801601a <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	3308      	adds	r3, #8
 8016014:	4618      	mov	r0, r3
 8016016:	f000 f8af 	bl	8016178 <_tx_timer_system_activate>
 801601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801601c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801601e:	693b      	ldr	r3, [r7, #16]
 8016020:	f383 8810 	msr	PRIMASK, r3
}
 8016024:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8016026:	2300      	movs	r3, #0
}
 8016028:	4618      	mov	r0, r3
 801602a:	3728      	adds	r7, #40	; 0x28
 801602c:	46bd      	mov	sp, r7
 801602e:	bd80      	pop	{r7, pc}
 8016030:	4154494d 	.word	0x4154494d
 8016034:	2401505c 	.word	0x2401505c
 8016038:	24015058 	.word	0x24015058

0801603c <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 801603c:	b580      	push	{r7, lr}
 801603e:	b084      	sub	sp, #16
 8016040:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016042:	f3ef 8310 	mrs	r3, PRIMASK
 8016046:	607b      	str	r3, [r7, #4]
    return(posture);
 8016048:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 801604a:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 801604c:	b672      	cpsid	i
    return(int_posture);
 801604e:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8016050:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8016052:	4b09      	ldr	r3, [pc, #36]	; (8016078 <_tx_timer_expiration_process+0x3c>)
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	3301      	adds	r3, #1
 8016058:	4a07      	ldr	r2, [pc, #28]	; (8016078 <_tx_timer_expiration_process+0x3c>)
 801605a:	6013      	str	r3, [r2, #0]
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016060:	68bb      	ldr	r3, [r7, #8]
 8016062:	f383 8810 	msr	PRIMASK, r3
}
 8016066:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8016068:	4804      	ldr	r0, [pc, #16]	; (801607c <_tx_timer_expiration_process+0x40>)
 801606a:	f7ff fcbf 	bl	80159ec <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801606e:	bf00      	nop
 8016070:	3710      	adds	r7, #16
 8016072:	46bd      	mov	sp, r7
 8016074:	bd80      	pop	{r7, pc}
 8016076:	bf00      	nop
 8016078:	24014fb4 	.word	0x24014fb4
 801607c:	24015064 	.word	0x24015064

08016080 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8016080:	b590      	push	{r4, r7, lr}
 8016082:	b089      	sub	sp, #36	; 0x24
 8016084:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8016086:	4b28      	ldr	r3, [pc, #160]	; (8016128 <_tx_timer_initialize+0xa8>)
 8016088:	2200      	movs	r2, #0
 801608a:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 801608c:	4b27      	ldr	r3, [pc, #156]	; (801612c <_tx_timer_initialize+0xac>)
 801608e:	2200      	movs	r2, #0
 8016090:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8016092:	4b27      	ldr	r3, [pc, #156]	; (8016130 <_tx_timer_initialize+0xb0>)
 8016094:	2200      	movs	r2, #0
 8016096:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8016098:	4b26      	ldr	r3, [pc, #152]	; (8016134 <_tx_timer_initialize+0xb4>)
 801609a:	2200      	movs	r2, #0
 801609c:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 801609e:	4b26      	ldr	r3, [pc, #152]	; (8016138 <_tx_timer_initialize+0xb8>)
 80160a0:	2200      	movs	r2, #0
 80160a2:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 80160a4:	2280      	movs	r2, #128	; 0x80
 80160a6:	2100      	movs	r1, #0
 80160a8:	4824      	ldr	r0, [pc, #144]	; (801613c <_tx_timer_initialize+0xbc>)
 80160aa:	f000 feb3 	bl	8016e14 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 80160ae:	4b24      	ldr	r3, [pc, #144]	; (8016140 <_tx_timer_initialize+0xc0>)
 80160b0:	4a22      	ldr	r2, [pc, #136]	; (801613c <_tx_timer_initialize+0xbc>)
 80160b2:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 80160b4:	4b23      	ldr	r3, [pc, #140]	; (8016144 <_tx_timer_initialize+0xc4>)
 80160b6:	4a21      	ldr	r2, [pc, #132]	; (801613c <_tx_timer_initialize+0xbc>)
 80160b8:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 80160ba:	4b23      	ldr	r3, [pc, #140]	; (8016148 <_tx_timer_initialize+0xc8>)
 80160bc:	4a23      	ldr	r2, [pc, #140]	; (801614c <_tx_timer_initialize+0xcc>)
 80160be:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 80160c0:	4b21      	ldr	r3, [pc, #132]	; (8016148 <_tx_timer_initialize+0xc8>)
 80160c2:	681b      	ldr	r3, [r3, #0]
 80160c4:	3304      	adds	r3, #4
 80160c6:	4a20      	ldr	r2, [pc, #128]	; (8016148 <_tx_timer_initialize+0xc8>)
 80160c8:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 80160ca:	4b21      	ldr	r3, [pc, #132]	; (8016150 <_tx_timer_initialize+0xd0>)
 80160cc:	4a21      	ldr	r2, [pc, #132]	; (8016154 <_tx_timer_initialize+0xd4>)
 80160ce:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 80160d0:	4b21      	ldr	r3, [pc, #132]	; (8016158 <_tx_timer_initialize+0xd8>)
 80160d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80160d6:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 80160d8:	4b20      	ldr	r3, [pc, #128]	; (801615c <_tx_timer_initialize+0xdc>)
 80160da:	2200      	movs	r2, #0
 80160dc:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 80160de:	4b1c      	ldr	r3, [pc, #112]	; (8016150 <_tx_timer_initialize+0xd0>)
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	4a1d      	ldr	r2, [pc, #116]	; (8016158 <_tx_timer_initialize+0xd8>)
 80160e4:	6812      	ldr	r2, [r2, #0]
 80160e6:	491d      	ldr	r1, [pc, #116]	; (801615c <_tx_timer_initialize+0xdc>)
 80160e8:	6809      	ldr	r1, [r1, #0]
 80160ea:	481c      	ldr	r0, [pc, #112]	; (801615c <_tx_timer_initialize+0xdc>)
 80160ec:	6800      	ldr	r0, [r0, #0]
 80160ee:	2400      	movs	r4, #0
 80160f0:	9405      	str	r4, [sp, #20]
 80160f2:	2400      	movs	r4, #0
 80160f4:	9404      	str	r4, [sp, #16]
 80160f6:	9003      	str	r0, [sp, #12]
 80160f8:	9102      	str	r1, [sp, #8]
 80160fa:	9201      	str	r2, [sp, #4]
 80160fc:	9300      	str	r3, [sp, #0]
 80160fe:	4b18      	ldr	r3, [pc, #96]	; (8016160 <_tx_timer_initialize+0xe0>)
 8016100:	4a18      	ldr	r2, [pc, #96]	; (8016164 <_tx_timer_initialize+0xe4>)
 8016102:	4919      	ldr	r1, [pc, #100]	; (8016168 <_tx_timer_initialize+0xe8>)
 8016104:	4819      	ldr	r0, [pc, #100]	; (801616c <_tx_timer_initialize+0xec>)
 8016106:	f7ff f9a7 	bl	8015458 <_tx_thread_create>
 801610a:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	2b00      	cmp	r3, #0
 8016110:	d1e5      	bne.n	80160de <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8016112:	4b17      	ldr	r3, [pc, #92]	; (8016170 <_tx_timer_initialize+0xf0>)
 8016114:	2200      	movs	r2, #0
 8016116:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8016118:	4b16      	ldr	r3, [pc, #88]	; (8016174 <_tx_timer_initialize+0xf4>)
 801611a:	2200      	movs	r2, #0
 801611c:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 801611e:	bf00      	nop
 8016120:	370c      	adds	r7, #12
 8016122:	46bd      	mov	sp, r7
 8016124:	bd90      	pop	{r4, r7, pc}
 8016126:	bf00      	nop
 8016128:	24014fc0 	.word	0x24014fc0
 801612c:	24015520 	.word	0x24015520
 8016130:	24014fc4 	.word	0x24014fc4
 8016134:	24015054 	.word	0x24015054
 8016138:	24015060 	.word	0x24015060
 801613c:	24014fc8 	.word	0x24014fc8
 8016140:	24015048 	.word	0x24015048
 8016144:	24015050 	.word	0x24015050
 8016148:	2401504c 	.word	0x2401504c
 801614c:	24015044 	.word	0x24015044
 8016150:	24015114 	.word	0x24015114
 8016154:	24015120 	.word	0x24015120
 8016158:	24015118 	.word	0x24015118
 801615c:	2401511c 	.word	0x2401511c
 8016160:	4154494d 	.word	0x4154494d
 8016164:	080162ad 	.word	0x080162ad
 8016168:	08017f68 	.word	0x08017f68
 801616c:	24015064 	.word	0x24015064
 8016170:	24015058 	.word	0x24015058
 8016174:	2401505c 	.word	0x2401505c

08016178 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8016178:	b480      	push	{r7}
 801617a:	b089      	sub	sp, #36	; 0x24
 801617c:	af00      	add	r7, sp, #0
 801617e:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8016186:	697b      	ldr	r3, [r7, #20]
 8016188:	2b00      	cmp	r3, #0
 801618a:	d04a      	beq.n	8016222 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 801618c:	697b      	ldr	r3, [r7, #20]
 801618e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016192:	d046      	beq.n	8016222 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	699b      	ldr	r3, [r3, #24]
 8016198:	2b00      	cmp	r3, #0
 801619a:	d142      	bne.n	8016222 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 801619c:	697b      	ldr	r3, [r7, #20]
 801619e:	2b20      	cmp	r3, #32
 80161a0:	d902      	bls.n	80161a8 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 80161a2:	231f      	movs	r3, #31
 80161a4:	61bb      	str	r3, [r7, #24]
 80161a6:	e002      	b.n	80161ae <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 80161a8:	697b      	ldr	r3, [r7, #20]
 80161aa:	3b01      	subs	r3, #1
 80161ac:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 80161ae:	4b20      	ldr	r3, [pc, #128]	; (8016230 <_tx_timer_system_activate+0xb8>)
 80161b0:	681a      	ldr	r2, [r3, #0]
 80161b2:	69bb      	ldr	r3, [r7, #24]
 80161b4:	009b      	lsls	r3, r3, #2
 80161b6:	4413      	add	r3, r2
 80161b8:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 80161ba:	4b1e      	ldr	r3, [pc, #120]	; (8016234 <_tx_timer_system_activate+0xbc>)
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	69fa      	ldr	r2, [r7, #28]
 80161c0:	429a      	cmp	r2, r3
 80161c2:	d30b      	bcc.n	80161dc <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 80161c4:	4b1b      	ldr	r3, [pc, #108]	; (8016234 <_tx_timer_system_activate+0xbc>)
 80161c6:	681b      	ldr	r3, [r3, #0]
 80161c8:	69fa      	ldr	r2, [r7, #28]
 80161ca:	1ad3      	subs	r3, r2, r3
 80161cc:	109b      	asrs	r3, r3, #2
 80161ce:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 80161d0:	4b19      	ldr	r3, [pc, #100]	; (8016238 <_tx_timer_system_activate+0xc0>)
 80161d2:	681a      	ldr	r2, [r3, #0]
 80161d4:	693b      	ldr	r3, [r7, #16]
 80161d6:	009b      	lsls	r3, r3, #2
 80161d8:	4413      	add	r3, r2
 80161da:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 80161dc:	69fb      	ldr	r3, [r7, #28]
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d109      	bne.n	80161f8 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	687a      	ldr	r2, [r7, #4]
 80161e8:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	687a      	ldr	r2, [r7, #4]
 80161ee:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 80161f0:	69fb      	ldr	r3, [r7, #28]
 80161f2:	687a      	ldr	r2, [r7, #4]
 80161f4:	601a      	str	r2, [r3, #0]
 80161f6:	e011      	b.n	801621c <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 80161f8:	69fb      	ldr	r3, [r7, #28]
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	695b      	ldr	r3, [r3, #20]
 8016202:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8016204:	68bb      	ldr	r3, [r7, #8]
 8016206:	687a      	ldr	r2, [r7, #4]
 8016208:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	687a      	ldr	r2, [r7, #4]
 801620e:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	68fa      	ldr	r2, [r7, #12]
 8016214:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	68ba      	ldr	r2, [r7, #8]
 801621a:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	69fa      	ldr	r2, [r7, #28]
 8016220:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8016222:	bf00      	nop
 8016224:	3724      	adds	r7, #36	; 0x24
 8016226:	46bd      	mov	sp, r7
 8016228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801622c:	4770      	bx	lr
 801622e:	bf00      	nop
 8016230:	24015050 	.word	0x24015050
 8016234:	2401504c 	.word	0x2401504c
 8016238:	24015048 	.word	0x24015048

0801623c <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 801623c:	b480      	push	{r7}
 801623e:	b087      	sub	sp, #28
 8016240:	af00      	add	r7, sp, #0
 8016242:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	699b      	ldr	r3, [r3, #24]
 8016248:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 801624a:	697b      	ldr	r3, [r7, #20]
 801624c:	2b00      	cmp	r3, #0
 801624e:	d026      	beq.n	801629e <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	691b      	ldr	r3, [r3, #16]
 8016254:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8016256:	687a      	ldr	r2, [r7, #4]
 8016258:	693b      	ldr	r3, [r7, #16]
 801625a:	429a      	cmp	r2, r3
 801625c:	d108      	bne.n	8016270 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 801625e:	697b      	ldr	r3, [r7, #20]
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	687a      	ldr	r2, [r7, #4]
 8016264:	429a      	cmp	r2, r3
 8016266:	d117      	bne.n	8016298 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8016268:	697b      	ldr	r3, [r7, #20]
 801626a:	2200      	movs	r2, #0
 801626c:	601a      	str	r2, [r3, #0]
 801626e:	e013      	b.n	8016298 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	695b      	ldr	r3, [r3, #20]
 8016274:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8016276:	693b      	ldr	r3, [r7, #16]
 8016278:	68fa      	ldr	r2, [r7, #12]
 801627a:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 801627c:	68fb      	ldr	r3, [r7, #12]
 801627e:	693a      	ldr	r2, [r7, #16]
 8016280:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8016282:	697b      	ldr	r3, [r7, #20]
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	687a      	ldr	r2, [r7, #4]
 8016288:	429a      	cmp	r2, r3
 801628a:	d105      	bne.n	8016298 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 801628c:	693b      	ldr	r3, [r7, #16]
 801628e:	697a      	ldr	r2, [r7, #20]
 8016290:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8016292:	697b      	ldr	r3, [r7, #20]
 8016294:	693a      	ldr	r2, [r7, #16]
 8016296:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	2200      	movs	r2, #0
 801629c:	619a      	str	r2, [r3, #24]
    }
}
 801629e:	bf00      	nop
 80162a0:	371c      	adds	r7, #28
 80162a2:	46bd      	mov	sp, r7
 80162a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162a8:	4770      	bx	lr
	...

080162ac <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b098      	sub	sp, #96	; 0x60
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 80162b4:	2300      	movs	r3, #0
 80162b6:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 80162b8:	687b      	ldr	r3, [r7, #4]
 80162ba:	4a73      	ldr	r2, [pc, #460]	; (8016488 <_tx_timer_thread_entry+0x1dc>)
 80162bc:	4293      	cmp	r3, r2
 80162be:	f040 80de 	bne.w	801647e <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80162c2:	f3ef 8310 	mrs	r3, PRIMASK
 80162c6:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 80162c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 80162ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 80162cc:	b672      	cpsid	i
    return(int_posture);
 80162ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 80162d0:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 80162d2:	4b6e      	ldr	r3, [pc, #440]	; (801648c <_tx_timer_thread_entry+0x1e0>)
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d003      	beq.n	80162e8 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	f107 020c 	add.w	r2, r7, #12
 80162e6:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80162e8:	4b68      	ldr	r3, [pc, #416]	; (801648c <_tx_timer_thread_entry+0x1e0>)
 80162ea:	681b      	ldr	r3, [r3, #0]
 80162ec:	2200      	movs	r2, #0
 80162ee:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80162f0:	4b66      	ldr	r3, [pc, #408]	; (801648c <_tx_timer_thread_entry+0x1e0>)
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	3304      	adds	r3, #4
 80162f6:	4a65      	ldr	r2, [pc, #404]	; (801648c <_tx_timer_thread_entry+0x1e0>)
 80162f8:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80162fa:	4b64      	ldr	r3, [pc, #400]	; (801648c <_tx_timer_thread_entry+0x1e0>)
 80162fc:	681a      	ldr	r2, [r3, #0]
 80162fe:	4b64      	ldr	r3, [pc, #400]	; (8016490 <_tx_timer_thread_entry+0x1e4>)
 8016300:	681b      	ldr	r3, [r3, #0]
 8016302:	429a      	cmp	r2, r3
 8016304:	d103      	bne.n	801630e <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8016306:	4b63      	ldr	r3, [pc, #396]	; (8016494 <_tx_timer_thread_entry+0x1e8>)
 8016308:	681b      	ldr	r3, [r3, #0]
 801630a:	4a60      	ldr	r2, [pc, #384]	; (801648c <_tx_timer_thread_entry+0x1e0>)
 801630c:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 801630e:	4b62      	ldr	r3, [pc, #392]	; (8016498 <_tx_timer_thread_entry+0x1ec>)
 8016310:	2200      	movs	r2, #0
 8016312:	601a      	str	r2, [r3, #0]
 8016314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016316:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801631a:	f383 8810 	msr	PRIMASK, r3
}
 801631e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016320:	f3ef 8310 	mrs	r3, PRIMASK
 8016324:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 8016326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 8016328:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 801632a:	b672      	cpsid	i
    return(int_posture);
 801632c:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 801632e:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8016330:	e07f      	b.n	8016432 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8016332:	68fb      	ldr	r3, [r7, #12]
 8016334:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8016336:	68fb      	ldr	r3, [r7, #12]
 8016338:	691b      	ldr	r3, [r3, #16]
 801633a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 801633c:	2300      	movs	r3, #0
 801633e:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8016340:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016342:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016344:	429a      	cmp	r2, r3
 8016346:	d102      	bne.n	801634e <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8016348:	2300      	movs	r3, #0
 801634a:	60fb      	str	r3, [r7, #12]
 801634c:	e00e      	b.n	801636c <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 801634e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016350:	695b      	ldr	r3, [r3, #20]
 8016352:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8016354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016356:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016358:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 801635a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801635c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801635e:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8016360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016362:	f107 020c 	add.w	r2, r7, #12
 8016366:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8016368:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801636a:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 801636c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	2b20      	cmp	r3, #32
 8016372:	d911      	bls.n	8016398 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8016374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 801637c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801637e:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8016380:	2300      	movs	r3, #0
 8016382:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8016384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016386:	f107 0208 	add.w	r2, r7, #8
 801638a:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 801638c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801638e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016390:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8016392:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016394:	60bb      	str	r3, [r7, #8]
 8016396:	e01a      	b.n	80163ce <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8016398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801639a:	689b      	ldr	r3, [r3, #8]
 801639c:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 801639e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80163a0:	68db      	ldr	r3, [r3, #12]
 80163a2:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 80163a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80163a6:	685a      	ldr	r2, [r3, #4]
 80163a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80163aa:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 80163ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80163ae:	681b      	ldr	r3, [r3, #0]
 80163b0:	2b00      	cmp	r3, #0
 80163b2:	d009      	beq.n	80163c8 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80163b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80163b6:	f107 0208 	add.w	r2, r7, #8
 80163ba:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 80163bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80163be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80163c0:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 80163c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80163c4:	60bb      	str	r3, [r7, #8]
 80163c6:	e002      	b.n	80163ce <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 80163c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80163ca:	2200      	movs	r2, #0
 80163cc:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 80163ce:	4a33      	ldr	r2, [pc, #204]	; (801649c <_tx_timer_thread_entry+0x1f0>)
 80163d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80163d2:	6013      	str	r3, [r2, #0]
 80163d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80163d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80163d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163da:	f383 8810 	msr	PRIMASK, r3
}
 80163de:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 80163e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d002      	beq.n	80163ec <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 80163e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80163e8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80163ea:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80163ec:	f3ef 8310 	mrs	r3, PRIMASK
 80163f0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80163f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80163f4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80163f6:	b672      	cpsid	i
    return(int_posture);
 80163f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80163fa:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80163fc:	4b27      	ldr	r3, [pc, #156]	; (801649c <_tx_timer_thread_entry+0x1f0>)
 80163fe:	2200      	movs	r2, #0
 8016400:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8016402:	68bb      	ldr	r3, [r7, #8]
 8016404:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016406:	429a      	cmp	r2, r3
 8016408:	d105      	bne.n	8016416 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 801640a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801640c:	2200      	movs	r2, #0
 801640e:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8016410:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8016412:	f7ff feb1 	bl	8016178 <_tx_timer_system_activate>
 8016416:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016418:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801641a:	69bb      	ldr	r3, [r7, #24]
 801641c:	f383 8810 	msr	PRIMASK, r3
}
 8016420:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016422:	f3ef 8310 	mrs	r3, PRIMASK
 8016426:	623b      	str	r3, [r7, #32]
    return(posture);
 8016428:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801642a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801642c:	b672      	cpsid	i
    return(int_posture);
 801642e:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8016430:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	2b00      	cmp	r3, #0
 8016436:	f47f af7c 	bne.w	8016332 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 801643a:	4b17      	ldr	r3, [pc, #92]	; (8016498 <_tx_timer_thread_entry+0x1ec>)
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	2b00      	cmp	r3, #0
 8016440:	d116      	bne.n	8016470 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8016442:	4b17      	ldr	r3, [pc, #92]	; (80164a0 <_tx_timer_thread_entry+0x1f4>)
 8016444:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8016446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016448:	2203      	movs	r2, #3
 801644a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801644c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801644e:	2201      	movs	r2, #1
 8016450:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8016452:	4b14      	ldr	r3, [pc, #80]	; (80164a4 <_tx_timer_thread_entry+0x1f8>)
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	3301      	adds	r3, #1
 8016458:	4a12      	ldr	r2, [pc, #72]	; (80164a4 <_tx_timer_thread_entry+0x1f8>)
 801645a:	6013      	str	r3, [r2, #0]
 801645c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801645e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016460:	697b      	ldr	r3, [r7, #20]
 8016462:	f383 8810 	msr	PRIMASK, r3
}
 8016466:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8016468:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801646a:	f7ff fbbf 	bl	8015bec <_tx_thread_system_suspend>
 801646e:	e728      	b.n	80162c2 <_tx_timer_thread_entry+0x16>
 8016470:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016472:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016474:	693b      	ldr	r3, [r7, #16]
 8016476:	f383 8810 	msr	PRIMASK, r3
}
 801647a:	bf00      	nop
            TX_DISABLE
 801647c:	e721      	b.n	80162c2 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 801647e:	bf00      	nop
 8016480:	3760      	adds	r7, #96	; 0x60
 8016482:	46bd      	mov	sp, r7
 8016484:	bd80      	pop	{r7, pc}
 8016486:	bf00      	nop
 8016488:	4154494d 	.word	0x4154494d
 801648c:	24015050 	.word	0x24015050
 8016490:	2401504c 	.word	0x2401504c
 8016494:	24015048 	.word	0x24015048
 8016498:	24015054 	.word	0x24015054
 801649c:	24015060 	.word	0x24015060
 80164a0:	24015064 	.word	0x24015064
 80164a4:	24014fb4 	.word	0x24014fb4

080164a8 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 80164a8:	b580      	push	{r7, lr}
 80164aa:	b08a      	sub	sp, #40	; 0x28
 80164ac:	af00      	add	r7, sp, #0
 80164ae:	60f8      	str	r0, [r7, #12]
 80164b0:	60b9      	str	r1, [r7, #8]
 80164b2:	607a      	str	r2, [r7, #4]
 80164b4:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80164b6:	2300      	movs	r3, #0
 80164b8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80164ba:	68fb      	ldr	r3, [r7, #12]
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d102      	bne.n	80164c6 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80164c0:	2302      	movs	r3, #2
 80164c2:	627b      	str	r3, [r7, #36]	; 0x24
 80164c4:	e029      	b.n	801651a <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	4a2d      	ldr	r2, [pc, #180]	; (8016580 <_txe_byte_allocate+0xd8>)
 80164cc:	4293      	cmp	r3, r2
 80164ce:	d002      	beq.n	80164d6 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80164d0:	2302      	movs	r3, #2
 80164d2:	627b      	str	r3, [r7, #36]	; 0x24
 80164d4:	e021      	b.n	801651a <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 80164d6:	68bb      	ldr	r3, [r7, #8]
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d102      	bne.n	80164e2 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80164dc:	2303      	movs	r3, #3
 80164de:	627b      	str	r3, [r7, #36]	; 0x24
 80164e0:	e01b      	b.n	801651a <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d102      	bne.n	80164ee <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 80164e8:	2305      	movs	r3, #5
 80164ea:	627b      	str	r3, [r7, #36]	; 0x24
 80164ec:	e015      	b.n	801651a <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	69db      	ldr	r3, [r3, #28]
 80164f2:	687a      	ldr	r2, [r7, #4]
 80164f4:	429a      	cmp	r2, r3
 80164f6:	d902      	bls.n	80164fe <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 80164f8:	2305      	movs	r3, #5
 80164fa:	627b      	str	r3, [r7, #36]	; 0x24
 80164fc:	e00d      	b.n	801651a <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80164fe:	683b      	ldr	r3, [r7, #0]
 8016500:	2b00      	cmp	r3, #0
 8016502:	d00a      	beq.n	801651a <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016504:	f3ef 8305 	mrs	r3, IPSR
 8016508:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 801650a:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801650c:	4b1d      	ldr	r3, [pc, #116]	; (8016584 <_txe_byte_allocate+0xdc>)
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	4313      	orrs	r3, r2
 8016512:	2b00      	cmp	r3, #0
 8016514:	d001      	beq.n	801651a <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8016516:	2304      	movs	r3, #4
 8016518:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 801651a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801651c:	2b00      	cmp	r3, #0
 801651e:	d108      	bne.n	8016532 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8016520:	4b19      	ldr	r3, [pc, #100]	; (8016588 <_txe_byte_allocate+0xe0>)
 8016522:	681b      	ldr	r3, [r3, #0]
 8016524:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8016526:	6a3b      	ldr	r3, [r7, #32]
 8016528:	4a18      	ldr	r2, [pc, #96]	; (801658c <_txe_byte_allocate+0xe4>)
 801652a:	4293      	cmp	r3, r2
 801652c:	d101      	bne.n	8016532 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 801652e:	2313      	movs	r3, #19
 8016530:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8016532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016534:	2b00      	cmp	r3, #0
 8016536:	d114      	bne.n	8016562 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016538:	f3ef 8305 	mrs	r3, IPSR
 801653c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801653e:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8016540:	4b10      	ldr	r3, [pc, #64]	; (8016584 <_txe_byte_allocate+0xdc>)
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	4313      	orrs	r3, r2
 8016546:	2b00      	cmp	r3, #0
 8016548:	d00b      	beq.n	8016562 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801654a:	f3ef 8305 	mrs	r3, IPSR
 801654e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8016550:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8016552:	4b0c      	ldr	r3, [pc, #48]	; (8016584 <_txe_byte_allocate+0xdc>)
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	4313      	orrs	r3, r2
 8016558:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801655c:	d201      	bcs.n	8016562 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801655e:	2313      	movs	r3, #19
 8016560:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8016562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016564:	2b00      	cmp	r3, #0
 8016566:	d106      	bne.n	8016576 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8016568:	683b      	ldr	r3, [r7, #0]
 801656a:	687a      	ldr	r2, [r7, #4]
 801656c:	68b9      	ldr	r1, [r7, #8]
 801656e:	68f8      	ldr	r0, [r7, #12]
 8016570:	f7fc ff88 	bl	8013484 <_tx_byte_allocate>
 8016574:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 8016576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016578:	4618      	mov	r0, r3
 801657a:	3728      	adds	r7, #40	; 0x28
 801657c:	46bd      	mov	sp, r7
 801657e:	bd80      	pop	{r7, pc}
 8016580:	42595445 	.word	0x42595445
 8016584:	2400006c 	.word	0x2400006c
 8016588:	24014f1c 	.word	0x24014f1c
 801658c:	24015064 	.word	0x24015064

08016590 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8016590:	b580      	push	{r7, lr}
 8016592:	b092      	sub	sp, #72	; 0x48
 8016594:	af00      	add	r7, sp, #0
 8016596:	60f8      	str	r0, [r7, #12]
 8016598:	60b9      	str	r1, [r7, #8]
 801659a:	607a      	str	r2, [r7, #4]
 801659c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801659e:	2300      	movs	r3, #0
 80165a0:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80165a2:	68fb      	ldr	r3, [r7, #12]
 80165a4:	2b00      	cmp	r3, #0
 80165a6:	d102      	bne.n	80165ae <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80165a8:	2302      	movs	r3, #2
 80165aa:	647b      	str	r3, [r7, #68]	; 0x44
 80165ac:	e075      	b.n	801669a <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 80165ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165b0:	2b34      	cmp	r3, #52	; 0x34
 80165b2:	d002      	beq.n	80165ba <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80165b4:	2302      	movs	r3, #2
 80165b6:	647b      	str	r3, [r7, #68]	; 0x44
 80165b8:	e06f      	b.n	801669a <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80165ba:	f3ef 8310 	mrs	r3, PRIMASK
 80165be:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 80165c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 80165c2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80165c4:	b672      	cpsid	i
    return(int_posture);
 80165c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80165c8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80165ca:	4b3b      	ldr	r3, [pc, #236]	; (80166b8 <_txe_byte_pool_create+0x128>)
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	3301      	adds	r3, #1
 80165d0:	4a39      	ldr	r2, [pc, #228]	; (80166b8 <_txe_byte_pool_create+0x128>)
 80165d2:	6013      	str	r3, [r2, #0]
 80165d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165d6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80165d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165da:	f383 8810 	msr	PRIMASK, r3
}
 80165de:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 80165e0:	4b36      	ldr	r3, [pc, #216]	; (80166bc <_txe_byte_pool_create+0x12c>)
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80165e6:	2300      	movs	r3, #0
 80165e8:	643b      	str	r3, [r7, #64]	; 0x40
 80165ea:	e009      	b.n	8016600 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 80165ec:	68fa      	ldr	r2, [r7, #12]
 80165ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165f0:	429a      	cmp	r2, r3
 80165f2:	d00b      	beq.n	801660c <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 80165f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80165f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 80165fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80165fc:	3301      	adds	r3, #1
 80165fe:	643b      	str	r3, [r7, #64]	; 0x40
 8016600:	4b2f      	ldr	r3, [pc, #188]	; (80166c0 <_txe_byte_pool_create+0x130>)
 8016602:	681b      	ldr	r3, [r3, #0]
 8016604:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016606:	429a      	cmp	r2, r3
 8016608:	d3f0      	bcc.n	80165ec <_txe_byte_pool_create+0x5c>
 801660a:	e000      	b.n	801660e <_txe_byte_pool_create+0x7e>
                break;
 801660c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801660e:	f3ef 8310 	mrs	r3, PRIMASK
 8016612:	623b      	str	r3, [r7, #32]
    return(posture);
 8016614:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8016616:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8016618:	b672      	cpsid	i
    return(int_posture);
 801661a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 801661c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801661e:	4b26      	ldr	r3, [pc, #152]	; (80166b8 <_txe_byte_pool_create+0x128>)
 8016620:	681b      	ldr	r3, [r3, #0]
 8016622:	3b01      	subs	r3, #1
 8016624:	4a24      	ldr	r2, [pc, #144]	; (80166b8 <_txe_byte_pool_create+0x128>)
 8016626:	6013      	str	r3, [r2, #0]
 8016628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801662a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801662e:	f383 8810 	msr	PRIMASK, r3
}
 8016632:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8016634:	f7ff f9a0 	bl	8015978 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8016638:	68fa      	ldr	r2, [r7, #12]
 801663a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801663c:	429a      	cmp	r2, r3
 801663e:	d102      	bne.n	8016646 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8016640:	2302      	movs	r3, #2
 8016642:	647b      	str	r3, [r7, #68]	; 0x44
 8016644:	e029      	b.n	801669a <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d102      	bne.n	8016652 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 801664c:	2303      	movs	r3, #3
 801664e:	647b      	str	r3, [r7, #68]	; 0x44
 8016650:	e023      	b.n	801669a <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8016652:	683b      	ldr	r3, [r7, #0]
 8016654:	2b63      	cmp	r3, #99	; 0x63
 8016656:	d802      	bhi.n	801665e <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8016658:	2305      	movs	r3, #5
 801665a:	647b      	str	r3, [r7, #68]	; 0x44
 801665c:	e01d      	b.n	801669a <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801665e:	4b19      	ldr	r3, [pc, #100]	; (80166c4 <_txe_byte_pool_create+0x134>)
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8016664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016666:	4a18      	ldr	r2, [pc, #96]	; (80166c8 <_txe_byte_pool_create+0x138>)
 8016668:	4293      	cmp	r3, r2
 801666a:	d101      	bne.n	8016670 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801666c:	2313      	movs	r3, #19
 801666e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016670:	f3ef 8305 	mrs	r3, IPSR
 8016674:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8016676:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8016678:	4b14      	ldr	r3, [pc, #80]	; (80166cc <_txe_byte_pool_create+0x13c>)
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	4313      	orrs	r3, r2
 801667e:	2b00      	cmp	r3, #0
 8016680:	d00b      	beq.n	801669a <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016682:	f3ef 8305 	mrs	r3, IPSR
 8016686:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8016688:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801668a:	4b10      	ldr	r3, [pc, #64]	; (80166cc <_txe_byte_pool_create+0x13c>)
 801668c:	681b      	ldr	r3, [r3, #0]
 801668e:	4313      	orrs	r3, r2
 8016690:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8016694:	d201      	bcs.n	801669a <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8016696:	2313      	movs	r3, #19
 8016698:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801669a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801669c:	2b00      	cmp	r3, #0
 801669e:	d106      	bne.n	80166ae <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 80166a0:	683b      	ldr	r3, [r7, #0]
 80166a2:	687a      	ldr	r2, [r7, #4]
 80166a4:	68b9      	ldr	r1, [r7, #8]
 80166a6:	68f8      	ldr	r0, [r7, #12]
 80166a8:	f7fd f82e 	bl	8013708 <_tx_byte_pool_create>
 80166ac:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80166ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80166b0:	4618      	mov	r0, r3
 80166b2:	3748      	adds	r7, #72	; 0x48
 80166b4:	46bd      	mov	sp, r7
 80166b6:	bd80      	pop	{r7, pc}
 80166b8:	24014fb4 	.word	0x24014fb4
 80166bc:	24014f0c 	.word	0x24014f0c
 80166c0:	24014f10 	.word	0x24014f10
 80166c4:	24014f1c 	.word	0x24014f1c
 80166c8:	24015064 	.word	0x24015064
 80166cc:	2400006c 	.word	0x2400006c

080166d0 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 80166d0:	b580      	push	{r7, lr}
 80166d2:	b094      	sub	sp, #80	; 0x50
 80166d4:	af02      	add	r7, sp, #8
 80166d6:	60f8      	str	r0, [r7, #12]
 80166d8:	60b9      	str	r1, [r7, #8]
 80166da:	607a      	str	r2, [r7, #4]
 80166dc:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80166de:	2300      	movs	r3, #0
 80166e0:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d102      	bne.n	80166ee <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80166e8:	2309      	movs	r3, #9
 80166ea:	647b      	str	r3, [r7, #68]	; 0x44
 80166ec:	e083      	b.n	80167f6 <_txe_queue_create+0x126>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 80166ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80166f0:	2b38      	cmp	r3, #56	; 0x38
 80166f2:	d002      	beq.n	80166fa <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80166f4:	2309      	movs	r3, #9
 80166f6:	647b      	str	r3, [r7, #68]	; 0x44
 80166f8:	e07d      	b.n	80167f6 <_txe_queue_create+0x126>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80166fa:	f3ef 8310 	mrs	r3, PRIMASK
 80166fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8016700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8016702:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8016704:	b672      	cpsid	i
    return(int_posture);
 8016706:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8016708:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801670a:	4b43      	ldr	r3, [pc, #268]	; (8016818 <_txe_queue_create+0x148>)
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	3301      	adds	r3, #1
 8016710:	4a41      	ldr	r2, [pc, #260]	; (8016818 <_txe_queue_create+0x148>)
 8016712:	6013      	str	r3, [r2, #0]
 8016714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016716:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801671a:	f383 8810 	msr	PRIMASK, r3
}
 801671e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 8016720:	4b3e      	ldr	r3, [pc, #248]	; (801681c <_txe_queue_create+0x14c>)
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 8016726:	2300      	movs	r3, #0
 8016728:	643b      	str	r3, [r7, #64]	; 0x40
 801672a:	e009      	b.n	8016740 <_txe_queue_create+0x70>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 801672c:	68fa      	ldr	r2, [r7, #12]
 801672e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016730:	429a      	cmp	r2, r3
 8016732:	d00b      	beq.n	801674c <_txe_queue_create+0x7c>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 8016734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016738:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 801673a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801673c:	3301      	adds	r3, #1
 801673e:	643b      	str	r3, [r7, #64]	; 0x40
 8016740:	4b37      	ldr	r3, [pc, #220]	; (8016820 <_txe_queue_create+0x150>)
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8016746:	429a      	cmp	r2, r3
 8016748:	d3f0      	bcc.n	801672c <_txe_queue_create+0x5c>
 801674a:	e000      	b.n	801674e <_txe_queue_create+0x7e>
                break;
 801674c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801674e:	f3ef 8310 	mrs	r3, PRIMASK
 8016752:	623b      	str	r3, [r7, #32]
    return(posture);
 8016754:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8016756:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8016758:	b672      	cpsid	i
    return(int_posture);
 801675a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 801675c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801675e:	4b2e      	ldr	r3, [pc, #184]	; (8016818 <_txe_queue_create+0x148>)
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	3b01      	subs	r3, #1
 8016764:	4a2c      	ldr	r2, [pc, #176]	; (8016818 <_txe_queue_create+0x148>)
 8016766:	6013      	str	r3, [r2, #0]
 8016768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801676a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801676e:	f383 8810 	msr	PRIMASK, r3
}
 8016772:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8016774:	f7ff f900 	bl	8015978 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 8016778:	68fa      	ldr	r2, [r7, #12]
 801677a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801677c:	429a      	cmp	r2, r3
 801677e:	d102      	bne.n	8016786 <_txe_queue_create+0xb6>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 8016780:	2309      	movs	r3, #9
 8016782:	647b      	str	r3, [r7, #68]	; 0x44
 8016784:	e037      	b.n	80167f6 <_txe_queue_create+0x126>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 8016786:	683b      	ldr	r3, [r7, #0]
 8016788:	2b00      	cmp	r3, #0
 801678a:	d102      	bne.n	8016792 <_txe_queue_create+0xc2>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 801678c:	2303      	movs	r3, #3
 801678e:	647b      	str	r3, [r7, #68]	; 0x44
 8016790:	e031      	b.n	80167f6 <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	2b00      	cmp	r3, #0
 8016796:	d102      	bne.n	801679e <_txe_queue_create+0xce>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 8016798:	2305      	movs	r3, #5
 801679a:	647b      	str	r3, [r7, #68]	; 0x44
 801679c:	e02b      	b.n	80167f6 <_txe_queue_create+0x126>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	2b10      	cmp	r3, #16
 80167a2:	d902      	bls.n	80167aa <_txe_queue_create+0xda>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 80167a4:	2305      	movs	r3, #5
 80167a6:	647b      	str	r3, [r7, #68]	; 0x44
 80167a8:	e025      	b.n	80167f6 <_txe_queue_create+0x126>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 80167aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80167ac:	089b      	lsrs	r3, r3, #2
 80167ae:	687a      	ldr	r2, [r7, #4]
 80167b0:	429a      	cmp	r2, r3
 80167b2:	d902      	bls.n	80167ba <_txe_queue_create+0xea>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 80167b4:	2305      	movs	r3, #5
 80167b6:	647b      	str	r3, [r7, #68]	; 0x44
 80167b8:	e01d      	b.n	80167f6 <_txe_queue_create+0x126>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80167ba:	4b1a      	ldr	r3, [pc, #104]	; (8016824 <_txe_queue_create+0x154>)
 80167bc:	681b      	ldr	r3, [r3, #0]
 80167be:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80167c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80167c2:	4a19      	ldr	r2, [pc, #100]	; (8016828 <_txe_queue_create+0x158>)
 80167c4:	4293      	cmp	r3, r2
 80167c6:	d101      	bne.n	80167cc <_txe_queue_create+0xfc>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80167c8:	2313      	movs	r3, #19
 80167ca:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80167cc:	f3ef 8305 	mrs	r3, IPSR
 80167d0:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80167d2:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80167d4:	4b15      	ldr	r3, [pc, #84]	; (801682c <_txe_queue_create+0x15c>)
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	4313      	orrs	r3, r2
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d00b      	beq.n	80167f6 <_txe_queue_create+0x126>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80167de:	f3ef 8305 	mrs	r3, IPSR
 80167e2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80167e4:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80167e6:	4b11      	ldr	r3, [pc, #68]	; (801682c <_txe_queue_create+0x15c>)
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	4313      	orrs	r3, r2
 80167ec:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80167f0:	d201      	bcs.n	80167f6 <_txe_queue_create+0x126>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80167f2:	2313      	movs	r3, #19
 80167f4:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80167f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80167f8:	2b00      	cmp	r3, #0
 80167fa:	d108      	bne.n	801680e <_txe_queue_create+0x13e>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 80167fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80167fe:	9300      	str	r3, [sp, #0]
 8016800:	683b      	ldr	r3, [r7, #0]
 8016802:	687a      	ldr	r2, [r7, #4]
 8016804:	68b9      	ldr	r1, [r7, #8]
 8016806:	68f8      	ldr	r0, [r7, #12]
 8016808:	f7fe f876 	bl	80148f8 <_tx_queue_create>
 801680c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 801680e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8016810:	4618      	mov	r0, r3
 8016812:	3748      	adds	r7, #72	; 0x48
 8016814:	46bd      	mov	sp, r7
 8016816:	bd80      	pop	{r7, pc}
 8016818:	24014fb4 	.word	0x24014fb4
 801681c:	24014eec 	.word	0x24014eec
 8016820:	24014ef0 	.word	0x24014ef0
 8016824:	24014f1c 	.word	0x24014f1c
 8016828:	24015064 	.word	0x24015064
 801682c:	2400006c 	.word	0x2400006c

08016830 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8016830:	b580      	push	{r7, lr}
 8016832:	b088      	sub	sp, #32
 8016834:	af00      	add	r7, sp, #0
 8016836:	60f8      	str	r0, [r7, #12]
 8016838:	60b9      	str	r1, [r7, #8]
 801683a:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801683c:	2300      	movs	r3, #0
 801683e:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8016840:	68fb      	ldr	r3, [r7, #12]
 8016842:	2b00      	cmp	r3, #0
 8016844:	d102      	bne.n	801684c <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8016846:	2309      	movs	r3, #9
 8016848:	61fb      	str	r3, [r7, #28]
 801684a:	e025      	b.n	8016898 <_txe_queue_receive+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	4a18      	ldr	r2, [pc, #96]	; (80168b4 <_txe_queue_receive+0x84>)
 8016852:	4293      	cmp	r3, r2
 8016854:	d002      	beq.n	801685c <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8016856:	2309      	movs	r3, #9
 8016858:	61fb      	str	r3, [r7, #28]
 801685a:	e01d      	b.n	8016898 <_txe_queue_receive+0x68>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 801685c:	68bb      	ldr	r3, [r7, #8]
 801685e:	2b00      	cmp	r3, #0
 8016860:	d102      	bne.n	8016868 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8016862:	2303      	movs	r3, #3
 8016864:	61fb      	str	r3, [r7, #28]
 8016866:	e017      	b.n	8016898 <_txe_queue_receive+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	2b00      	cmp	r3, #0
 801686c:	d014      	beq.n	8016898 <_txe_queue_receive+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801686e:	f3ef 8305 	mrs	r3, IPSR
 8016872:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8016874:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8016876:	4b10      	ldr	r3, [pc, #64]	; (80168b8 <_txe_queue_receive+0x88>)
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	4313      	orrs	r3, r2
 801687c:	2b00      	cmp	r3, #0
 801687e:	d002      	beq.n	8016886 <_txe_queue_receive+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8016880:	2304      	movs	r3, #4
 8016882:	61fb      	str	r3, [r7, #28]
 8016884:	e008      	b.n	8016898 <_txe_queue_receive+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8016886:	4b0d      	ldr	r3, [pc, #52]	; (80168bc <_txe_queue_receive+0x8c>)
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 801688c:	69bb      	ldr	r3, [r7, #24]
 801688e:	4a0c      	ldr	r2, [pc, #48]	; (80168c0 <_txe_queue_receive+0x90>)
 8016890:	4293      	cmp	r3, r2
 8016892:	d101      	bne.n	8016898 <_txe_queue_receive+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8016894:	2304      	movs	r3, #4
 8016896:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8016898:	69fb      	ldr	r3, [r7, #28]
 801689a:	2b00      	cmp	r3, #0
 801689c:	d105      	bne.n	80168aa <_txe_queue_receive+0x7a>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 801689e:	687a      	ldr	r2, [r7, #4]
 80168a0:	68b9      	ldr	r1, [r7, #8]
 80168a2:	68f8      	ldr	r0, [r7, #12]
 80168a4:	f7fe f89c 	bl	80149e0 <_tx_queue_receive>
 80168a8:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80168aa:	69fb      	ldr	r3, [r7, #28]
}
 80168ac:	4618      	mov	r0, r3
 80168ae:	3720      	adds	r7, #32
 80168b0:	46bd      	mov	sp, r7
 80168b2:	bd80      	pop	{r7, pc}
 80168b4:	51554555 	.word	0x51554555
 80168b8:	2400006c 	.word	0x2400006c
 80168bc:	24014f1c 	.word	0x24014f1c
 80168c0:	24015064 	.word	0x24015064

080168c4 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 80168c4:	b580      	push	{r7, lr}
 80168c6:	b088      	sub	sp, #32
 80168c8:	af00      	add	r7, sp, #0
 80168ca:	60f8      	str	r0, [r7, #12]
 80168cc:	60b9      	str	r1, [r7, #8]
 80168ce:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80168d0:	2300      	movs	r3, #0
 80168d2:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d102      	bne.n	80168e0 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80168da:	2309      	movs	r3, #9
 80168dc:	61fb      	str	r3, [r7, #28]
 80168de:	e025      	b.n	801692c <_txe_queue_send+0x68>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	681b      	ldr	r3, [r3, #0]
 80168e4:	4a18      	ldr	r2, [pc, #96]	; (8016948 <_txe_queue_send+0x84>)
 80168e6:	4293      	cmp	r3, r2
 80168e8:	d002      	beq.n	80168f0 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80168ea:	2309      	movs	r3, #9
 80168ec:	61fb      	str	r3, [r7, #28]
 80168ee:	e01d      	b.n	801692c <_txe_queue_send+0x68>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 80168f0:	68bb      	ldr	r3, [r7, #8]
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d102      	bne.n	80168fc <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80168f6:	2303      	movs	r3, #3
 80168f8:	61fb      	str	r3, [r7, #28]
 80168fa:	e017      	b.n	801692c <_txe_queue_send+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	2b00      	cmp	r3, #0
 8016900:	d014      	beq.n	801692c <_txe_queue_send+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016902:	f3ef 8305 	mrs	r3, IPSR
 8016906:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8016908:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801690a:	4b10      	ldr	r3, [pc, #64]	; (801694c <_txe_queue_send+0x88>)
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	4313      	orrs	r3, r2
 8016910:	2b00      	cmp	r3, #0
 8016912:	d002      	beq.n	801691a <_txe_queue_send+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8016914:	2304      	movs	r3, #4
 8016916:	61fb      	str	r3, [r7, #28]
 8016918:	e008      	b.n	801692c <_txe_queue_send+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 801691a:	4b0d      	ldr	r3, [pc, #52]	; (8016950 <_txe_queue_send+0x8c>)
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8016920:	69bb      	ldr	r3, [r7, #24]
 8016922:	4a0c      	ldr	r2, [pc, #48]	; (8016954 <_txe_queue_send+0x90>)
 8016924:	4293      	cmp	r3, r2
 8016926:	d101      	bne.n	801692c <_txe_queue_send+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8016928:	2304      	movs	r3, #4
 801692a:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801692c:	69fb      	ldr	r3, [r7, #28]
 801692e:	2b00      	cmp	r3, #0
 8016930:	d105      	bne.n	801693e <_txe_queue_send+0x7a>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 8016932:	687a      	ldr	r2, [r7, #4]
 8016934:	68b9      	ldr	r1, [r7, #8]
 8016936:	68f8      	ldr	r0, [r7, #12]
 8016938:	f7fe fa1a 	bl	8014d70 <_tx_queue_send>
 801693c:	61f8      	str	r0, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 801693e:	69fb      	ldr	r3, [r7, #28]
}
 8016940:	4618      	mov	r0, r3
 8016942:	3720      	adds	r7, #32
 8016944:	46bd      	mov	sp, r7
 8016946:	bd80      	pop	{r7, pc}
 8016948:	51554555 	.word	0x51554555
 801694c:	2400006c 	.word	0x2400006c
 8016950:	24014f1c 	.word	0x24014f1c
 8016954:	24015064 	.word	0x24015064

08016958 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8016958:	b580      	push	{r7, lr}
 801695a:	b092      	sub	sp, #72	; 0x48
 801695c:	af00      	add	r7, sp, #0
 801695e:	60f8      	str	r0, [r7, #12]
 8016960:	60b9      	str	r1, [r7, #8]
 8016962:	607a      	str	r2, [r7, #4]
 8016964:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8016966:	2300      	movs	r3, #0
 8016968:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 801696a:	68fb      	ldr	r3, [r7, #12]
 801696c:	2b00      	cmp	r3, #0
 801696e:	d102      	bne.n	8016976 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8016970:	230c      	movs	r3, #12
 8016972:	647b      	str	r3, [r7, #68]	; 0x44
 8016974:	e054      	b.n	8016a20 <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 8016976:	683b      	ldr	r3, [r7, #0]
 8016978:	2b1c      	cmp	r3, #28
 801697a:	d002      	beq.n	8016982 <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801697c:	230c      	movs	r3, #12
 801697e:	647b      	str	r3, [r7, #68]	; 0x44
 8016980:	e04e      	b.n	8016a20 <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016982:	f3ef 8310 	mrs	r3, PRIMASK
 8016986:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8016988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801698a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 801698c:	b672      	cpsid	i
    return(int_posture);
 801698e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8016990:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8016992:	4b36      	ldr	r3, [pc, #216]	; (8016a6c <_txe_semaphore_create+0x114>)
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	3301      	adds	r3, #1
 8016998:	4a34      	ldr	r2, [pc, #208]	; (8016a6c <_txe_semaphore_create+0x114>)
 801699a:	6013      	str	r3, [r2, #0]
 801699c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801699e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80169a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169a2:	f383 8810 	msr	PRIMASK, r3
}
 80169a6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 80169a8:	4b31      	ldr	r3, [pc, #196]	; (8016a70 <_txe_semaphore_create+0x118>)
 80169aa:	681b      	ldr	r3, [r3, #0]
 80169ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80169ae:	2300      	movs	r3, #0
 80169b0:	643b      	str	r3, [r7, #64]	; 0x40
 80169b2:	e009      	b.n	80169c8 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 80169b4:	68fa      	ldr	r2, [r7, #12]
 80169b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80169b8:	429a      	cmp	r2, r3
 80169ba:	d00b      	beq.n	80169d4 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 80169bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80169be:	695b      	ldr	r3, [r3, #20]
 80169c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80169c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80169c4:	3301      	adds	r3, #1
 80169c6:	643b      	str	r3, [r7, #64]	; 0x40
 80169c8:	4b2a      	ldr	r3, [pc, #168]	; (8016a74 <_txe_semaphore_create+0x11c>)
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80169ce:	429a      	cmp	r2, r3
 80169d0:	d3f0      	bcc.n	80169b4 <_txe_semaphore_create+0x5c>
 80169d2:	e000      	b.n	80169d6 <_txe_semaphore_create+0x7e>
                break;
 80169d4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80169d6:	f3ef 8310 	mrs	r3, PRIMASK
 80169da:	623b      	str	r3, [r7, #32]
    return(posture);
 80169dc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 80169de:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 80169e0:	b672      	cpsid	i
    return(int_posture);
 80169e2:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80169e4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80169e6:	4b21      	ldr	r3, [pc, #132]	; (8016a6c <_txe_semaphore_create+0x114>)
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	3b01      	subs	r3, #1
 80169ec:	4a1f      	ldr	r2, [pc, #124]	; (8016a6c <_txe_semaphore_create+0x114>)
 80169ee:	6013      	str	r3, [r2, #0]
 80169f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169f2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80169f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169f6:	f383 8810 	msr	PRIMASK, r3
}
 80169fa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80169fc:	f7fe ffbc 	bl	8015978 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8016a00:	68fa      	ldr	r2, [r7, #12]
 8016a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a04:	429a      	cmp	r2, r3
 8016a06:	d102      	bne.n	8016a0e <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 8016a08:	230c      	movs	r3, #12
 8016a0a:	647b      	str	r3, [r7, #68]	; 0x44
 8016a0c:	e008      	b.n	8016a20 <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8016a0e:	4b1a      	ldr	r3, [pc, #104]	; (8016a78 <_txe_semaphore_create+0x120>)
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8016a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a16:	4a19      	ldr	r2, [pc, #100]	; (8016a7c <_txe_semaphore_create+0x124>)
 8016a18:	4293      	cmp	r3, r2
 8016a1a:	d101      	bne.n	8016a20 <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8016a1c:	2313      	movs	r3, #19
 8016a1e:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8016a20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d114      	bne.n	8016a50 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016a26:	f3ef 8305 	mrs	r3, IPSR
 8016a2a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8016a2c:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8016a2e:	4b14      	ldr	r3, [pc, #80]	; (8016a80 <_txe_semaphore_create+0x128>)
 8016a30:	681b      	ldr	r3, [r3, #0]
 8016a32:	4313      	orrs	r3, r2
 8016a34:	2b00      	cmp	r3, #0
 8016a36:	d00b      	beq.n	8016a50 <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016a38:	f3ef 8305 	mrs	r3, IPSR
 8016a3c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8016a3e:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8016a40:	4b0f      	ldr	r3, [pc, #60]	; (8016a80 <_txe_semaphore_create+0x128>)
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	4313      	orrs	r3, r2
 8016a46:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8016a4a:	d201      	bcs.n	8016a50 <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8016a4c:	2313      	movs	r3, #19
 8016a4e:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8016a50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d105      	bne.n	8016a62 <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 8016a56:	687a      	ldr	r2, [r7, #4]
 8016a58:	68b9      	ldr	r1, [r7, #8]
 8016a5a:	68f8      	ldr	r0, [r7, #12]
 8016a5c:	f7fe fb30 	bl	80150c0 <_tx_semaphore_create>
 8016a60:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 8016a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8016a64:	4618      	mov	r0, r3
 8016a66:	3748      	adds	r7, #72	; 0x48
 8016a68:	46bd      	mov	sp, r7
 8016a6a:	bd80      	pop	{r7, pc}
 8016a6c:	24014fb4 	.word	0x24014fb4
 8016a70:	24014ee4 	.word	0x24014ee4
 8016a74:	24014ee8 	.word	0x24014ee8
 8016a78:	24014f1c 	.word	0x24014f1c
 8016a7c:	24015064 	.word	0x24015064
 8016a80:	2400006c 	.word	0x2400006c

08016a84 <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8016a84:	b580      	push	{r7, lr}
 8016a86:	b086      	sub	sp, #24
 8016a88:	af00      	add	r7, sp, #0
 8016a8a:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8016a8c:	2300      	movs	r3, #0
 8016a8e:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d102      	bne.n	8016a9c <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8016a96:	230c      	movs	r3, #12
 8016a98:	617b      	str	r3, [r7, #20]
 8016a9a:	e01c      	b.n	8016ad6 <_txe_semaphore_delete+0x52>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	4a13      	ldr	r2, [pc, #76]	; (8016af0 <_txe_semaphore_delete+0x6c>)
 8016aa2:	4293      	cmp	r3, r2
 8016aa4:	d002      	beq.n	8016aac <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8016aa6:	230c      	movs	r3, #12
 8016aa8:	617b      	str	r3, [r7, #20]
 8016aaa:	e014      	b.n	8016ad6 <_txe_semaphore_delete+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016aac:	f3ef 8305 	mrs	r3, IPSR
 8016ab0:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8016ab2:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8016ab4:	4b0f      	ldr	r3, [pc, #60]	; (8016af4 <_txe_semaphore_delete+0x70>)
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	4313      	orrs	r3, r2
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	d002      	beq.n	8016ac4 <_txe_semaphore_delete+0x40>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8016abe:	2313      	movs	r3, #19
 8016ac0:	617b      	str	r3, [r7, #20]
 8016ac2:	e008      	b.n	8016ad6 <_txe_semaphore_delete+0x52>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8016ac4:	4b0c      	ldr	r3, [pc, #48]	; (8016af8 <_txe_semaphore_delete+0x74>)
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 8016aca:	693b      	ldr	r3, [r7, #16]
 8016acc:	4a0b      	ldr	r2, [pc, #44]	; (8016afc <_txe_semaphore_delete+0x78>)
 8016ace:	4293      	cmp	r3, r2
 8016ad0:	d101      	bne.n	8016ad6 <_txe_semaphore_delete+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8016ad2:	2313      	movs	r3, #19
 8016ad4:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8016ad6:	697b      	ldr	r3, [r7, #20]
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d103      	bne.n	8016ae4 <_txe_semaphore_delete+0x60>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 8016adc:	6878      	ldr	r0, [r7, #4]
 8016ade:	f7fe fb41 	bl	8015164 <_tx_semaphore_delete>
 8016ae2:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8016ae4:	697b      	ldr	r3, [r7, #20]
}
 8016ae6:	4618      	mov	r0, r3
 8016ae8:	3718      	adds	r7, #24
 8016aea:	46bd      	mov	sp, r7
 8016aec:	bd80      	pop	{r7, pc}
 8016aee:	bf00      	nop
 8016af0:	53454d41 	.word	0x53454d41
 8016af4:	2400006c 	.word	0x2400006c
 8016af8:	24014f1c 	.word	0x24014f1c
 8016afc:	24015064 	.word	0x24015064

08016b00 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8016b00:	b580      	push	{r7, lr}
 8016b02:	b086      	sub	sp, #24
 8016b04:	af00      	add	r7, sp, #0
 8016b06:	6078      	str	r0, [r7, #4]
 8016b08:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8016b0a:	2300      	movs	r3, #0
 8016b0c:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d102      	bne.n	8016b1a <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8016b14:	230c      	movs	r3, #12
 8016b16:	617b      	str	r3, [r7, #20]
 8016b18:	e01f      	b.n	8016b5a <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	4a15      	ldr	r2, [pc, #84]	; (8016b74 <_txe_semaphore_get+0x74>)
 8016b20:	4293      	cmp	r3, r2
 8016b22:	d002      	beq.n	8016b2a <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8016b24:	230c      	movs	r3, #12
 8016b26:	617b      	str	r3, [r7, #20]
 8016b28:	e017      	b.n	8016b5a <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8016b2a:	683b      	ldr	r3, [r7, #0]
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d014      	beq.n	8016b5a <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016b30:	f3ef 8305 	mrs	r3, IPSR
 8016b34:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8016b36:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8016b38:	4b0f      	ldr	r3, [pc, #60]	; (8016b78 <_txe_semaphore_get+0x78>)
 8016b3a:	681b      	ldr	r3, [r3, #0]
 8016b3c:	4313      	orrs	r3, r2
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d002      	beq.n	8016b48 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8016b42:	2304      	movs	r3, #4
 8016b44:	617b      	str	r3, [r7, #20]
 8016b46:	e008      	b.n	8016b5a <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8016b48:	4b0c      	ldr	r3, [pc, #48]	; (8016b7c <_txe_semaphore_get+0x7c>)
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8016b4e:	693b      	ldr	r3, [r7, #16]
 8016b50:	4a0b      	ldr	r2, [pc, #44]	; (8016b80 <_txe_semaphore_get+0x80>)
 8016b52:	4293      	cmp	r3, r2
 8016b54:	d101      	bne.n	8016b5a <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8016b56:	2304      	movs	r3, #4
 8016b58:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8016b5a:	697b      	ldr	r3, [r7, #20]
 8016b5c:	2b00      	cmp	r3, #0
 8016b5e:	d104      	bne.n	8016b6a <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8016b60:	6839      	ldr	r1, [r7, #0]
 8016b62:	6878      	ldr	r0, [r7, #4]
 8016b64:	f7fe fb8e 	bl	8015284 <_tx_semaphore_get>
 8016b68:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8016b6a:	697b      	ldr	r3, [r7, #20]
}
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	3718      	adds	r7, #24
 8016b70:	46bd      	mov	sp, r7
 8016b72:	bd80      	pop	{r7, pc}
 8016b74:	53454d41 	.word	0x53454d41
 8016b78:	2400006c 	.word	0x2400006c
 8016b7c:	24014f1c 	.word	0x24014f1c
 8016b80:	24015064 	.word	0x24015064

08016b84 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8016b84:	b580      	push	{r7, lr}
 8016b86:	b084      	sub	sp, #16
 8016b88:	af00      	add	r7, sp, #0
 8016b8a:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d102      	bne.n	8016b98 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8016b92:	230c      	movs	r3, #12
 8016b94:	60fb      	str	r3, [r7, #12]
 8016b96:	e00b      	b.n	8016bb0 <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	4a07      	ldr	r2, [pc, #28]	; (8016bbc <_txe_semaphore_put+0x38>)
 8016b9e:	4293      	cmp	r3, r2
 8016ba0:	d002      	beq.n	8016ba8 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8016ba2:	230c      	movs	r3, #12
 8016ba4:	60fb      	str	r3, [r7, #12]
 8016ba6:	e003      	b.n	8016bb0 <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 8016ba8:	6878      	ldr	r0, [r7, #4]
 8016baa:	f7fe fbfd 	bl	80153a8 <_tx_semaphore_put>
 8016bae:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8016bb0:	68fb      	ldr	r3, [r7, #12]
}
 8016bb2:	4618      	mov	r0, r3
 8016bb4:	3710      	adds	r7, #16
 8016bb6:	46bd      	mov	sp, r7
 8016bb8:	bd80      	pop	{r7, pc}
 8016bba:	bf00      	nop
 8016bbc:	53454d41 	.word	0x53454d41

08016bc0 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	b09a      	sub	sp, #104	; 0x68
 8016bc4:	af06      	add	r7, sp, #24
 8016bc6:	60f8      	str	r0, [r7, #12]
 8016bc8:	60b9      	str	r1, [r7, #8]
 8016bca:	607a      	str	r2, [r7, #4]
 8016bcc:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8016bce:	2300      	movs	r3, #0
 8016bd0:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	2b00      	cmp	r3, #0
 8016bd6:	d102      	bne.n	8016bde <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8016bd8:	230e      	movs	r3, #14
 8016bda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016bdc:	e0bb      	b.n	8016d56 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8016bde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8016be0:	2bb0      	cmp	r3, #176	; 0xb0
 8016be2:	d002      	beq.n	8016bea <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8016be4:	230e      	movs	r3, #14
 8016be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016be8:	e0b5      	b.n	8016d56 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016bea:	f3ef 8310 	mrs	r3, PRIMASK
 8016bee:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8016bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8016bf2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8016bf4:	b672      	cpsid	i
    return(int_posture);
 8016bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8016bf8:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8016bfa:	4b64      	ldr	r3, [pc, #400]	; (8016d8c <_txe_thread_create+0x1cc>)
 8016bfc:	681b      	ldr	r3, [r3, #0]
 8016bfe:	3301      	adds	r3, #1
 8016c00:	4a62      	ldr	r2, [pc, #392]	; (8016d8c <_txe_thread_create+0x1cc>)
 8016c02:	6013      	str	r3, [r2, #0]
 8016c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c0a:	f383 8810 	msr	PRIMASK, r3
}
 8016c0e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8016c10:	2300      	movs	r3, #0
 8016c12:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 8016c14:	4b5e      	ldr	r3, [pc, #376]	; (8016d90 <_txe_thread_create+0x1d0>)
 8016c16:	681b      	ldr	r3, [r3, #0]
 8016c18:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8016c1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016c1c:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8016c1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016c20:	3b01      	subs	r3, #1
 8016c22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016c24:	4413      	add	r3, r2
 8016c26:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8016c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c2a:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8016c2c:	2300      	movs	r3, #0
 8016c2e:	647b      	str	r3, [r7, #68]	; 0x44
 8016c30:	e02b      	b.n	8016c8a <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8016c32:	68fa      	ldr	r2, [r7, #12]
 8016c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c36:	429a      	cmp	r2, r3
 8016c38:	d101      	bne.n	8016c3e <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8016c3a:	2301      	movs	r3, #1
 8016c3c:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8016c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016c40:	2b01      	cmp	r3, #1
 8016c42:	d028      	beq.n	8016c96 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8016c44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c46:	68db      	ldr	r3, [r3, #12]
 8016c48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016c4a:	429a      	cmp	r2, r3
 8016c4c:	d308      	bcc.n	8016c60 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8016c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c50:	691b      	ldr	r3, [r3, #16]
 8016c52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016c54:	429a      	cmp	r2, r3
 8016c56:	d203      	bcs.n	8016c60 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8016c58:	2300      	movs	r3, #0
 8016c5a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8016c5c:	2301      	movs	r3, #1
 8016c5e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8016c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c62:	68db      	ldr	r3, [r3, #12]
 8016c64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016c66:	429a      	cmp	r2, r3
 8016c68:	d308      	bcc.n	8016c7c <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8016c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c6c:	691b      	ldr	r3, [r3, #16]
 8016c6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016c70:	429a      	cmp	r2, r3
 8016c72:	d203      	bcs.n	8016c7c <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8016c74:	2300      	movs	r3, #0
 8016c76:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8016c78:	2301      	movs	r3, #1
 8016c7a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8016c7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016c82:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8016c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016c86:	3301      	adds	r3, #1
 8016c88:	647b      	str	r3, [r7, #68]	; 0x44
 8016c8a:	4b42      	ldr	r3, [pc, #264]	; (8016d94 <_txe_thread_create+0x1d4>)
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016c90:	429a      	cmp	r2, r3
 8016c92:	d3ce      	bcc.n	8016c32 <_txe_thread_create+0x72>
 8016c94:	e000      	b.n	8016c98 <_txe_thread_create+0xd8>
                break;
 8016c96:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8016c98:	f3ef 8310 	mrs	r3, PRIMASK
 8016c9c:	61fb      	str	r3, [r7, #28]
    return(posture);
 8016c9e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8016ca0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 8016ca2:	b672      	cpsid	i
    return(int_posture);
 8016ca4:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8016ca6:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8016ca8:	4b38      	ldr	r3, [pc, #224]	; (8016d8c <_txe_thread_create+0x1cc>)
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	3b01      	subs	r3, #1
 8016cae:	4a37      	ldr	r2, [pc, #220]	; (8016d8c <_txe_thread_create+0x1cc>)
 8016cb0:	6013      	str	r3, [r2, #0]
 8016cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016cb4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8016cb6:	6a3b      	ldr	r3, [r7, #32]
 8016cb8:	f383 8810 	msr	PRIMASK, r3
}
 8016cbc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8016cbe:	f7fe fe5b 	bl	8015978 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8016cc2:	68fa      	ldr	r2, [r7, #12]
 8016cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016cc6:	429a      	cmp	r2, r3
 8016cc8:	d102      	bne.n	8016cd0 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8016cca:	230e      	movs	r3, #14
 8016ccc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016cce:	e042      	b.n	8016d56 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8016cd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d102      	bne.n	8016cdc <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8016cd6:	2303      	movs	r3, #3
 8016cd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016cda:	e03c      	b.n	8016d56 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d102      	bne.n	8016ce8 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8016ce2:	2303      	movs	r3, #3
 8016ce4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016ce6:	e036      	b.n	8016d56 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8016ce8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016cea:	2bc7      	cmp	r3, #199	; 0xc7
 8016cec:	d802      	bhi.n	8016cf4 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8016cee:	2305      	movs	r3, #5
 8016cf0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016cf2:	e030      	b.n	8016d56 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8016cf4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016cf6:	2b1f      	cmp	r3, #31
 8016cf8:	d902      	bls.n	8016d00 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8016cfa:	230f      	movs	r3, #15
 8016cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016cfe:	e02a      	b.n	8016d56 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8016d00:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8016d02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016d04:	429a      	cmp	r2, r3
 8016d06:	d902      	bls.n	8016d0e <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8016d08:	2318      	movs	r3, #24
 8016d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016d0c:	e023      	b.n	8016d56 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8016d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016d10:	2b01      	cmp	r3, #1
 8016d12:	d902      	bls.n	8016d1a <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8016d14:	2310      	movs	r3, #16
 8016d16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016d18:	e01d      	b.n	8016d56 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8016d1a:	4b1f      	ldr	r3, [pc, #124]	; (8016d98 <_txe_thread_create+0x1d8>)
 8016d1c:	681b      	ldr	r3, [r3, #0]
 8016d1e:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8016d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d22:	4a1e      	ldr	r2, [pc, #120]	; (8016d9c <_txe_thread_create+0x1dc>)
 8016d24:	4293      	cmp	r3, r2
 8016d26:	d101      	bne.n	8016d2c <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8016d28:	2313      	movs	r3, #19
 8016d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016d2c:	f3ef 8305 	mrs	r3, IPSR
 8016d30:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8016d32:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8016d34:	4b1a      	ldr	r3, [pc, #104]	; (8016da0 <_txe_thread_create+0x1e0>)
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	4313      	orrs	r3, r2
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d00b      	beq.n	8016d56 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8016d3e:	f3ef 8305 	mrs	r3, IPSR
 8016d42:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8016d44:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8016d46:	4b16      	ldr	r3, [pc, #88]	; (8016da0 <_txe_thread_create+0x1e0>)
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	4313      	orrs	r3, r2
 8016d4c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8016d50:	d201      	bcs.n	8016d56 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8016d52:	2313      	movs	r3, #19
 8016d54:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8016d56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d112      	bne.n	8016d82 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8016d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016d5e:	9305      	str	r3, [sp, #20]
 8016d60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016d62:	9304      	str	r3, [sp, #16]
 8016d64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016d66:	9303      	str	r3, [sp, #12]
 8016d68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016d6a:	9302      	str	r3, [sp, #8]
 8016d6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016d6e:	9301      	str	r3, [sp, #4]
 8016d70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016d72:	9300      	str	r3, [sp, #0]
 8016d74:	683b      	ldr	r3, [r7, #0]
 8016d76:	687a      	ldr	r2, [r7, #4]
 8016d78:	68b9      	ldr	r1, [r7, #8]
 8016d7a:	68f8      	ldr	r0, [r7, #12]
 8016d7c:	f7fe fb6c 	bl	8015458 <_tx_thread_create>
 8016d80:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 8016d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8016d84:	4618      	mov	r0, r3
 8016d86:	3750      	adds	r7, #80	; 0x50
 8016d88:	46bd      	mov	sp, r7
 8016d8a:	bd80      	pop	{r7, pc}
 8016d8c:	24014fb4 	.word	0x24014fb4
 8016d90:	24014f24 	.word	0x24014f24
 8016d94:	24014f28 	.word	0x24014f28
 8016d98:	24014f1c 	.word	0x24014f1c
 8016d9c:	24015064 	.word	0x24015064
 8016da0:	2400006c 	.word	0x2400006c

08016da4 <__errno>:
 8016da4:	4b01      	ldr	r3, [pc, #4]	; (8016dac <__errno+0x8>)
 8016da6:	6818      	ldr	r0, [r3, #0]
 8016da8:	4770      	bx	lr
 8016daa:	bf00      	nop
 8016dac:	24000070 	.word	0x24000070

08016db0 <__libc_init_array>:
 8016db0:	b570      	push	{r4, r5, r6, lr}
 8016db2:	4d0d      	ldr	r5, [pc, #52]	; (8016de8 <__libc_init_array+0x38>)
 8016db4:	4c0d      	ldr	r4, [pc, #52]	; (8016dec <__libc_init_array+0x3c>)
 8016db6:	1b64      	subs	r4, r4, r5
 8016db8:	10a4      	asrs	r4, r4, #2
 8016dba:	2600      	movs	r6, #0
 8016dbc:	42a6      	cmp	r6, r4
 8016dbe:	d109      	bne.n	8016dd4 <__libc_init_array+0x24>
 8016dc0:	4d0b      	ldr	r5, [pc, #44]	; (8016df0 <__libc_init_array+0x40>)
 8016dc2:	4c0c      	ldr	r4, [pc, #48]	; (8016df4 <__libc_init_array+0x44>)
 8016dc4:	f001 f832 	bl	8017e2c <_init>
 8016dc8:	1b64      	subs	r4, r4, r5
 8016dca:	10a4      	asrs	r4, r4, #2
 8016dcc:	2600      	movs	r6, #0
 8016dce:	42a6      	cmp	r6, r4
 8016dd0:	d105      	bne.n	8016dde <__libc_init_array+0x2e>
 8016dd2:	bd70      	pop	{r4, r5, r6, pc}
 8016dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8016dd8:	4798      	blx	r3
 8016dda:	3601      	adds	r6, #1
 8016ddc:	e7ee      	b.n	8016dbc <__libc_init_array+0xc>
 8016dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8016de2:	4798      	blx	r3
 8016de4:	3601      	adds	r6, #1
 8016de6:	e7f2      	b.n	8016dce <__libc_init_array+0x1e>
 8016de8:	08018054 	.word	0x08018054
 8016dec:	08018054 	.word	0x08018054
 8016df0:	08018054 	.word	0x08018054
 8016df4:	08018058 	.word	0x08018058

08016df8 <memcpy>:
 8016df8:	440a      	add	r2, r1
 8016dfa:	4291      	cmp	r1, r2
 8016dfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8016e00:	d100      	bne.n	8016e04 <memcpy+0xc>
 8016e02:	4770      	bx	lr
 8016e04:	b510      	push	{r4, lr}
 8016e06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016e0e:	4291      	cmp	r1, r2
 8016e10:	d1f9      	bne.n	8016e06 <memcpy+0xe>
 8016e12:	bd10      	pop	{r4, pc}

08016e14 <memset>:
 8016e14:	4402      	add	r2, r0
 8016e16:	4603      	mov	r3, r0
 8016e18:	4293      	cmp	r3, r2
 8016e1a:	d100      	bne.n	8016e1e <memset+0xa>
 8016e1c:	4770      	bx	lr
 8016e1e:	f803 1b01 	strb.w	r1, [r3], #1
 8016e22:	e7f9      	b.n	8016e18 <memset+0x4>

08016e24 <iprintf>:
 8016e24:	b40f      	push	{r0, r1, r2, r3}
 8016e26:	4b0a      	ldr	r3, [pc, #40]	; (8016e50 <iprintf+0x2c>)
 8016e28:	b513      	push	{r0, r1, r4, lr}
 8016e2a:	681c      	ldr	r4, [r3, #0]
 8016e2c:	b124      	cbz	r4, 8016e38 <iprintf+0x14>
 8016e2e:	69a3      	ldr	r3, [r4, #24]
 8016e30:	b913      	cbnz	r3, 8016e38 <iprintf+0x14>
 8016e32:	4620      	mov	r0, r4
 8016e34:	f000 fa5e 	bl	80172f4 <__sinit>
 8016e38:	ab05      	add	r3, sp, #20
 8016e3a:	9a04      	ldr	r2, [sp, #16]
 8016e3c:	68a1      	ldr	r1, [r4, #8]
 8016e3e:	9301      	str	r3, [sp, #4]
 8016e40:	4620      	mov	r0, r4
 8016e42:	f000 fc67 	bl	8017714 <_vfiprintf_r>
 8016e46:	b002      	add	sp, #8
 8016e48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e4c:	b004      	add	sp, #16
 8016e4e:	4770      	bx	lr
 8016e50:	24000070 	.word	0x24000070

08016e54 <_puts_r>:
 8016e54:	b570      	push	{r4, r5, r6, lr}
 8016e56:	460e      	mov	r6, r1
 8016e58:	4605      	mov	r5, r0
 8016e5a:	b118      	cbz	r0, 8016e64 <_puts_r+0x10>
 8016e5c:	6983      	ldr	r3, [r0, #24]
 8016e5e:	b90b      	cbnz	r3, 8016e64 <_puts_r+0x10>
 8016e60:	f000 fa48 	bl	80172f4 <__sinit>
 8016e64:	69ab      	ldr	r3, [r5, #24]
 8016e66:	68ac      	ldr	r4, [r5, #8]
 8016e68:	b913      	cbnz	r3, 8016e70 <_puts_r+0x1c>
 8016e6a:	4628      	mov	r0, r5
 8016e6c:	f000 fa42 	bl	80172f4 <__sinit>
 8016e70:	4b2c      	ldr	r3, [pc, #176]	; (8016f24 <_puts_r+0xd0>)
 8016e72:	429c      	cmp	r4, r3
 8016e74:	d120      	bne.n	8016eb8 <_puts_r+0x64>
 8016e76:	686c      	ldr	r4, [r5, #4]
 8016e78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016e7a:	07db      	lsls	r3, r3, #31
 8016e7c:	d405      	bmi.n	8016e8a <_puts_r+0x36>
 8016e7e:	89a3      	ldrh	r3, [r4, #12]
 8016e80:	0598      	lsls	r0, r3, #22
 8016e82:	d402      	bmi.n	8016e8a <_puts_r+0x36>
 8016e84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016e86:	f000 fad3 	bl	8017430 <__retarget_lock_acquire_recursive>
 8016e8a:	89a3      	ldrh	r3, [r4, #12]
 8016e8c:	0719      	lsls	r1, r3, #28
 8016e8e:	d51d      	bpl.n	8016ecc <_puts_r+0x78>
 8016e90:	6923      	ldr	r3, [r4, #16]
 8016e92:	b1db      	cbz	r3, 8016ecc <_puts_r+0x78>
 8016e94:	3e01      	subs	r6, #1
 8016e96:	68a3      	ldr	r3, [r4, #8]
 8016e98:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016e9c:	3b01      	subs	r3, #1
 8016e9e:	60a3      	str	r3, [r4, #8]
 8016ea0:	bb39      	cbnz	r1, 8016ef2 <_puts_r+0x9e>
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	da38      	bge.n	8016f18 <_puts_r+0xc4>
 8016ea6:	4622      	mov	r2, r4
 8016ea8:	210a      	movs	r1, #10
 8016eaa:	4628      	mov	r0, r5
 8016eac:	f000 f848 	bl	8016f40 <__swbuf_r>
 8016eb0:	3001      	adds	r0, #1
 8016eb2:	d011      	beq.n	8016ed8 <_puts_r+0x84>
 8016eb4:	250a      	movs	r5, #10
 8016eb6:	e011      	b.n	8016edc <_puts_r+0x88>
 8016eb8:	4b1b      	ldr	r3, [pc, #108]	; (8016f28 <_puts_r+0xd4>)
 8016eba:	429c      	cmp	r4, r3
 8016ebc:	d101      	bne.n	8016ec2 <_puts_r+0x6e>
 8016ebe:	68ac      	ldr	r4, [r5, #8]
 8016ec0:	e7da      	b.n	8016e78 <_puts_r+0x24>
 8016ec2:	4b1a      	ldr	r3, [pc, #104]	; (8016f2c <_puts_r+0xd8>)
 8016ec4:	429c      	cmp	r4, r3
 8016ec6:	bf08      	it	eq
 8016ec8:	68ec      	ldreq	r4, [r5, #12]
 8016eca:	e7d5      	b.n	8016e78 <_puts_r+0x24>
 8016ecc:	4621      	mov	r1, r4
 8016ece:	4628      	mov	r0, r5
 8016ed0:	f000 f888 	bl	8016fe4 <__swsetup_r>
 8016ed4:	2800      	cmp	r0, #0
 8016ed6:	d0dd      	beq.n	8016e94 <_puts_r+0x40>
 8016ed8:	f04f 35ff 	mov.w	r5, #4294967295
 8016edc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016ede:	07da      	lsls	r2, r3, #31
 8016ee0:	d405      	bmi.n	8016eee <_puts_r+0x9a>
 8016ee2:	89a3      	ldrh	r3, [r4, #12]
 8016ee4:	059b      	lsls	r3, r3, #22
 8016ee6:	d402      	bmi.n	8016eee <_puts_r+0x9a>
 8016ee8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016eea:	f000 faa2 	bl	8017432 <__retarget_lock_release_recursive>
 8016eee:	4628      	mov	r0, r5
 8016ef0:	bd70      	pop	{r4, r5, r6, pc}
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	da04      	bge.n	8016f00 <_puts_r+0xac>
 8016ef6:	69a2      	ldr	r2, [r4, #24]
 8016ef8:	429a      	cmp	r2, r3
 8016efa:	dc06      	bgt.n	8016f0a <_puts_r+0xb6>
 8016efc:	290a      	cmp	r1, #10
 8016efe:	d004      	beq.n	8016f0a <_puts_r+0xb6>
 8016f00:	6823      	ldr	r3, [r4, #0]
 8016f02:	1c5a      	adds	r2, r3, #1
 8016f04:	6022      	str	r2, [r4, #0]
 8016f06:	7019      	strb	r1, [r3, #0]
 8016f08:	e7c5      	b.n	8016e96 <_puts_r+0x42>
 8016f0a:	4622      	mov	r2, r4
 8016f0c:	4628      	mov	r0, r5
 8016f0e:	f000 f817 	bl	8016f40 <__swbuf_r>
 8016f12:	3001      	adds	r0, #1
 8016f14:	d1bf      	bne.n	8016e96 <_puts_r+0x42>
 8016f16:	e7df      	b.n	8016ed8 <_puts_r+0x84>
 8016f18:	6823      	ldr	r3, [r4, #0]
 8016f1a:	250a      	movs	r5, #10
 8016f1c:	1c5a      	adds	r2, r3, #1
 8016f1e:	6022      	str	r2, [r4, #0]
 8016f20:	701d      	strb	r5, [r3, #0]
 8016f22:	e7db      	b.n	8016edc <_puts_r+0x88>
 8016f24:	08017fd8 	.word	0x08017fd8
 8016f28:	08017ff8 	.word	0x08017ff8
 8016f2c:	08017fb8 	.word	0x08017fb8

08016f30 <puts>:
 8016f30:	4b02      	ldr	r3, [pc, #8]	; (8016f3c <puts+0xc>)
 8016f32:	4601      	mov	r1, r0
 8016f34:	6818      	ldr	r0, [r3, #0]
 8016f36:	f7ff bf8d 	b.w	8016e54 <_puts_r>
 8016f3a:	bf00      	nop
 8016f3c:	24000070 	.word	0x24000070

08016f40 <__swbuf_r>:
 8016f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f42:	460e      	mov	r6, r1
 8016f44:	4614      	mov	r4, r2
 8016f46:	4605      	mov	r5, r0
 8016f48:	b118      	cbz	r0, 8016f52 <__swbuf_r+0x12>
 8016f4a:	6983      	ldr	r3, [r0, #24]
 8016f4c:	b90b      	cbnz	r3, 8016f52 <__swbuf_r+0x12>
 8016f4e:	f000 f9d1 	bl	80172f4 <__sinit>
 8016f52:	4b21      	ldr	r3, [pc, #132]	; (8016fd8 <__swbuf_r+0x98>)
 8016f54:	429c      	cmp	r4, r3
 8016f56:	d12b      	bne.n	8016fb0 <__swbuf_r+0x70>
 8016f58:	686c      	ldr	r4, [r5, #4]
 8016f5a:	69a3      	ldr	r3, [r4, #24]
 8016f5c:	60a3      	str	r3, [r4, #8]
 8016f5e:	89a3      	ldrh	r3, [r4, #12]
 8016f60:	071a      	lsls	r2, r3, #28
 8016f62:	d52f      	bpl.n	8016fc4 <__swbuf_r+0x84>
 8016f64:	6923      	ldr	r3, [r4, #16]
 8016f66:	b36b      	cbz	r3, 8016fc4 <__swbuf_r+0x84>
 8016f68:	6923      	ldr	r3, [r4, #16]
 8016f6a:	6820      	ldr	r0, [r4, #0]
 8016f6c:	1ac0      	subs	r0, r0, r3
 8016f6e:	6963      	ldr	r3, [r4, #20]
 8016f70:	b2f6      	uxtb	r6, r6
 8016f72:	4283      	cmp	r3, r0
 8016f74:	4637      	mov	r7, r6
 8016f76:	dc04      	bgt.n	8016f82 <__swbuf_r+0x42>
 8016f78:	4621      	mov	r1, r4
 8016f7a:	4628      	mov	r0, r5
 8016f7c:	f000 f926 	bl	80171cc <_fflush_r>
 8016f80:	bb30      	cbnz	r0, 8016fd0 <__swbuf_r+0x90>
 8016f82:	68a3      	ldr	r3, [r4, #8]
 8016f84:	3b01      	subs	r3, #1
 8016f86:	60a3      	str	r3, [r4, #8]
 8016f88:	6823      	ldr	r3, [r4, #0]
 8016f8a:	1c5a      	adds	r2, r3, #1
 8016f8c:	6022      	str	r2, [r4, #0]
 8016f8e:	701e      	strb	r6, [r3, #0]
 8016f90:	6963      	ldr	r3, [r4, #20]
 8016f92:	3001      	adds	r0, #1
 8016f94:	4283      	cmp	r3, r0
 8016f96:	d004      	beq.n	8016fa2 <__swbuf_r+0x62>
 8016f98:	89a3      	ldrh	r3, [r4, #12]
 8016f9a:	07db      	lsls	r3, r3, #31
 8016f9c:	d506      	bpl.n	8016fac <__swbuf_r+0x6c>
 8016f9e:	2e0a      	cmp	r6, #10
 8016fa0:	d104      	bne.n	8016fac <__swbuf_r+0x6c>
 8016fa2:	4621      	mov	r1, r4
 8016fa4:	4628      	mov	r0, r5
 8016fa6:	f000 f911 	bl	80171cc <_fflush_r>
 8016faa:	b988      	cbnz	r0, 8016fd0 <__swbuf_r+0x90>
 8016fac:	4638      	mov	r0, r7
 8016fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fb0:	4b0a      	ldr	r3, [pc, #40]	; (8016fdc <__swbuf_r+0x9c>)
 8016fb2:	429c      	cmp	r4, r3
 8016fb4:	d101      	bne.n	8016fba <__swbuf_r+0x7a>
 8016fb6:	68ac      	ldr	r4, [r5, #8]
 8016fb8:	e7cf      	b.n	8016f5a <__swbuf_r+0x1a>
 8016fba:	4b09      	ldr	r3, [pc, #36]	; (8016fe0 <__swbuf_r+0xa0>)
 8016fbc:	429c      	cmp	r4, r3
 8016fbe:	bf08      	it	eq
 8016fc0:	68ec      	ldreq	r4, [r5, #12]
 8016fc2:	e7ca      	b.n	8016f5a <__swbuf_r+0x1a>
 8016fc4:	4621      	mov	r1, r4
 8016fc6:	4628      	mov	r0, r5
 8016fc8:	f000 f80c 	bl	8016fe4 <__swsetup_r>
 8016fcc:	2800      	cmp	r0, #0
 8016fce:	d0cb      	beq.n	8016f68 <__swbuf_r+0x28>
 8016fd0:	f04f 37ff 	mov.w	r7, #4294967295
 8016fd4:	e7ea      	b.n	8016fac <__swbuf_r+0x6c>
 8016fd6:	bf00      	nop
 8016fd8:	08017fd8 	.word	0x08017fd8
 8016fdc:	08017ff8 	.word	0x08017ff8
 8016fe0:	08017fb8 	.word	0x08017fb8

08016fe4 <__swsetup_r>:
 8016fe4:	4b32      	ldr	r3, [pc, #200]	; (80170b0 <__swsetup_r+0xcc>)
 8016fe6:	b570      	push	{r4, r5, r6, lr}
 8016fe8:	681d      	ldr	r5, [r3, #0]
 8016fea:	4606      	mov	r6, r0
 8016fec:	460c      	mov	r4, r1
 8016fee:	b125      	cbz	r5, 8016ffa <__swsetup_r+0x16>
 8016ff0:	69ab      	ldr	r3, [r5, #24]
 8016ff2:	b913      	cbnz	r3, 8016ffa <__swsetup_r+0x16>
 8016ff4:	4628      	mov	r0, r5
 8016ff6:	f000 f97d 	bl	80172f4 <__sinit>
 8016ffa:	4b2e      	ldr	r3, [pc, #184]	; (80170b4 <__swsetup_r+0xd0>)
 8016ffc:	429c      	cmp	r4, r3
 8016ffe:	d10f      	bne.n	8017020 <__swsetup_r+0x3c>
 8017000:	686c      	ldr	r4, [r5, #4]
 8017002:	89a3      	ldrh	r3, [r4, #12]
 8017004:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017008:	0719      	lsls	r1, r3, #28
 801700a:	d42c      	bmi.n	8017066 <__swsetup_r+0x82>
 801700c:	06dd      	lsls	r5, r3, #27
 801700e:	d411      	bmi.n	8017034 <__swsetup_r+0x50>
 8017010:	2309      	movs	r3, #9
 8017012:	6033      	str	r3, [r6, #0]
 8017014:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017018:	81a3      	strh	r3, [r4, #12]
 801701a:	f04f 30ff 	mov.w	r0, #4294967295
 801701e:	e03e      	b.n	801709e <__swsetup_r+0xba>
 8017020:	4b25      	ldr	r3, [pc, #148]	; (80170b8 <__swsetup_r+0xd4>)
 8017022:	429c      	cmp	r4, r3
 8017024:	d101      	bne.n	801702a <__swsetup_r+0x46>
 8017026:	68ac      	ldr	r4, [r5, #8]
 8017028:	e7eb      	b.n	8017002 <__swsetup_r+0x1e>
 801702a:	4b24      	ldr	r3, [pc, #144]	; (80170bc <__swsetup_r+0xd8>)
 801702c:	429c      	cmp	r4, r3
 801702e:	bf08      	it	eq
 8017030:	68ec      	ldreq	r4, [r5, #12]
 8017032:	e7e6      	b.n	8017002 <__swsetup_r+0x1e>
 8017034:	0758      	lsls	r0, r3, #29
 8017036:	d512      	bpl.n	801705e <__swsetup_r+0x7a>
 8017038:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801703a:	b141      	cbz	r1, 801704e <__swsetup_r+0x6a>
 801703c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017040:	4299      	cmp	r1, r3
 8017042:	d002      	beq.n	801704a <__swsetup_r+0x66>
 8017044:	4630      	mov	r0, r6
 8017046:	f000 fa5b 	bl	8017500 <_free_r>
 801704a:	2300      	movs	r3, #0
 801704c:	6363      	str	r3, [r4, #52]	; 0x34
 801704e:	89a3      	ldrh	r3, [r4, #12]
 8017050:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017054:	81a3      	strh	r3, [r4, #12]
 8017056:	2300      	movs	r3, #0
 8017058:	6063      	str	r3, [r4, #4]
 801705a:	6923      	ldr	r3, [r4, #16]
 801705c:	6023      	str	r3, [r4, #0]
 801705e:	89a3      	ldrh	r3, [r4, #12]
 8017060:	f043 0308 	orr.w	r3, r3, #8
 8017064:	81a3      	strh	r3, [r4, #12]
 8017066:	6923      	ldr	r3, [r4, #16]
 8017068:	b94b      	cbnz	r3, 801707e <__swsetup_r+0x9a>
 801706a:	89a3      	ldrh	r3, [r4, #12]
 801706c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017074:	d003      	beq.n	801707e <__swsetup_r+0x9a>
 8017076:	4621      	mov	r1, r4
 8017078:	4630      	mov	r0, r6
 801707a:	f000 fa01 	bl	8017480 <__smakebuf_r>
 801707e:	89a0      	ldrh	r0, [r4, #12]
 8017080:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017084:	f010 0301 	ands.w	r3, r0, #1
 8017088:	d00a      	beq.n	80170a0 <__swsetup_r+0xbc>
 801708a:	2300      	movs	r3, #0
 801708c:	60a3      	str	r3, [r4, #8]
 801708e:	6963      	ldr	r3, [r4, #20]
 8017090:	425b      	negs	r3, r3
 8017092:	61a3      	str	r3, [r4, #24]
 8017094:	6923      	ldr	r3, [r4, #16]
 8017096:	b943      	cbnz	r3, 80170aa <__swsetup_r+0xc6>
 8017098:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801709c:	d1ba      	bne.n	8017014 <__swsetup_r+0x30>
 801709e:	bd70      	pop	{r4, r5, r6, pc}
 80170a0:	0781      	lsls	r1, r0, #30
 80170a2:	bf58      	it	pl
 80170a4:	6963      	ldrpl	r3, [r4, #20]
 80170a6:	60a3      	str	r3, [r4, #8]
 80170a8:	e7f4      	b.n	8017094 <__swsetup_r+0xb0>
 80170aa:	2000      	movs	r0, #0
 80170ac:	e7f7      	b.n	801709e <__swsetup_r+0xba>
 80170ae:	bf00      	nop
 80170b0:	24000070 	.word	0x24000070
 80170b4:	08017fd8 	.word	0x08017fd8
 80170b8:	08017ff8 	.word	0x08017ff8
 80170bc:	08017fb8 	.word	0x08017fb8

080170c0 <__sflush_r>:
 80170c0:	898a      	ldrh	r2, [r1, #12]
 80170c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80170c6:	4605      	mov	r5, r0
 80170c8:	0710      	lsls	r0, r2, #28
 80170ca:	460c      	mov	r4, r1
 80170cc:	d458      	bmi.n	8017180 <__sflush_r+0xc0>
 80170ce:	684b      	ldr	r3, [r1, #4]
 80170d0:	2b00      	cmp	r3, #0
 80170d2:	dc05      	bgt.n	80170e0 <__sflush_r+0x20>
 80170d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80170d6:	2b00      	cmp	r3, #0
 80170d8:	dc02      	bgt.n	80170e0 <__sflush_r+0x20>
 80170da:	2000      	movs	r0, #0
 80170dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80170e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80170e2:	2e00      	cmp	r6, #0
 80170e4:	d0f9      	beq.n	80170da <__sflush_r+0x1a>
 80170e6:	2300      	movs	r3, #0
 80170e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80170ec:	682f      	ldr	r7, [r5, #0]
 80170ee:	602b      	str	r3, [r5, #0]
 80170f0:	d032      	beq.n	8017158 <__sflush_r+0x98>
 80170f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80170f4:	89a3      	ldrh	r3, [r4, #12]
 80170f6:	075a      	lsls	r2, r3, #29
 80170f8:	d505      	bpl.n	8017106 <__sflush_r+0x46>
 80170fa:	6863      	ldr	r3, [r4, #4]
 80170fc:	1ac0      	subs	r0, r0, r3
 80170fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017100:	b10b      	cbz	r3, 8017106 <__sflush_r+0x46>
 8017102:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017104:	1ac0      	subs	r0, r0, r3
 8017106:	2300      	movs	r3, #0
 8017108:	4602      	mov	r2, r0
 801710a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801710c:	6a21      	ldr	r1, [r4, #32]
 801710e:	4628      	mov	r0, r5
 8017110:	47b0      	blx	r6
 8017112:	1c43      	adds	r3, r0, #1
 8017114:	89a3      	ldrh	r3, [r4, #12]
 8017116:	d106      	bne.n	8017126 <__sflush_r+0x66>
 8017118:	6829      	ldr	r1, [r5, #0]
 801711a:	291d      	cmp	r1, #29
 801711c:	d82c      	bhi.n	8017178 <__sflush_r+0xb8>
 801711e:	4a2a      	ldr	r2, [pc, #168]	; (80171c8 <__sflush_r+0x108>)
 8017120:	40ca      	lsrs	r2, r1
 8017122:	07d6      	lsls	r6, r2, #31
 8017124:	d528      	bpl.n	8017178 <__sflush_r+0xb8>
 8017126:	2200      	movs	r2, #0
 8017128:	6062      	str	r2, [r4, #4]
 801712a:	04d9      	lsls	r1, r3, #19
 801712c:	6922      	ldr	r2, [r4, #16]
 801712e:	6022      	str	r2, [r4, #0]
 8017130:	d504      	bpl.n	801713c <__sflush_r+0x7c>
 8017132:	1c42      	adds	r2, r0, #1
 8017134:	d101      	bne.n	801713a <__sflush_r+0x7a>
 8017136:	682b      	ldr	r3, [r5, #0]
 8017138:	b903      	cbnz	r3, 801713c <__sflush_r+0x7c>
 801713a:	6560      	str	r0, [r4, #84]	; 0x54
 801713c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801713e:	602f      	str	r7, [r5, #0]
 8017140:	2900      	cmp	r1, #0
 8017142:	d0ca      	beq.n	80170da <__sflush_r+0x1a>
 8017144:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017148:	4299      	cmp	r1, r3
 801714a:	d002      	beq.n	8017152 <__sflush_r+0x92>
 801714c:	4628      	mov	r0, r5
 801714e:	f000 f9d7 	bl	8017500 <_free_r>
 8017152:	2000      	movs	r0, #0
 8017154:	6360      	str	r0, [r4, #52]	; 0x34
 8017156:	e7c1      	b.n	80170dc <__sflush_r+0x1c>
 8017158:	6a21      	ldr	r1, [r4, #32]
 801715a:	2301      	movs	r3, #1
 801715c:	4628      	mov	r0, r5
 801715e:	47b0      	blx	r6
 8017160:	1c41      	adds	r1, r0, #1
 8017162:	d1c7      	bne.n	80170f4 <__sflush_r+0x34>
 8017164:	682b      	ldr	r3, [r5, #0]
 8017166:	2b00      	cmp	r3, #0
 8017168:	d0c4      	beq.n	80170f4 <__sflush_r+0x34>
 801716a:	2b1d      	cmp	r3, #29
 801716c:	d001      	beq.n	8017172 <__sflush_r+0xb2>
 801716e:	2b16      	cmp	r3, #22
 8017170:	d101      	bne.n	8017176 <__sflush_r+0xb6>
 8017172:	602f      	str	r7, [r5, #0]
 8017174:	e7b1      	b.n	80170da <__sflush_r+0x1a>
 8017176:	89a3      	ldrh	r3, [r4, #12]
 8017178:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801717c:	81a3      	strh	r3, [r4, #12]
 801717e:	e7ad      	b.n	80170dc <__sflush_r+0x1c>
 8017180:	690f      	ldr	r7, [r1, #16]
 8017182:	2f00      	cmp	r7, #0
 8017184:	d0a9      	beq.n	80170da <__sflush_r+0x1a>
 8017186:	0793      	lsls	r3, r2, #30
 8017188:	680e      	ldr	r6, [r1, #0]
 801718a:	bf08      	it	eq
 801718c:	694b      	ldreq	r3, [r1, #20]
 801718e:	600f      	str	r7, [r1, #0]
 8017190:	bf18      	it	ne
 8017192:	2300      	movne	r3, #0
 8017194:	eba6 0807 	sub.w	r8, r6, r7
 8017198:	608b      	str	r3, [r1, #8]
 801719a:	f1b8 0f00 	cmp.w	r8, #0
 801719e:	dd9c      	ble.n	80170da <__sflush_r+0x1a>
 80171a0:	6a21      	ldr	r1, [r4, #32]
 80171a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80171a4:	4643      	mov	r3, r8
 80171a6:	463a      	mov	r2, r7
 80171a8:	4628      	mov	r0, r5
 80171aa:	47b0      	blx	r6
 80171ac:	2800      	cmp	r0, #0
 80171ae:	dc06      	bgt.n	80171be <__sflush_r+0xfe>
 80171b0:	89a3      	ldrh	r3, [r4, #12]
 80171b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80171b6:	81a3      	strh	r3, [r4, #12]
 80171b8:	f04f 30ff 	mov.w	r0, #4294967295
 80171bc:	e78e      	b.n	80170dc <__sflush_r+0x1c>
 80171be:	4407      	add	r7, r0
 80171c0:	eba8 0800 	sub.w	r8, r8, r0
 80171c4:	e7e9      	b.n	801719a <__sflush_r+0xda>
 80171c6:	bf00      	nop
 80171c8:	20400001 	.word	0x20400001

080171cc <_fflush_r>:
 80171cc:	b538      	push	{r3, r4, r5, lr}
 80171ce:	690b      	ldr	r3, [r1, #16]
 80171d0:	4605      	mov	r5, r0
 80171d2:	460c      	mov	r4, r1
 80171d4:	b913      	cbnz	r3, 80171dc <_fflush_r+0x10>
 80171d6:	2500      	movs	r5, #0
 80171d8:	4628      	mov	r0, r5
 80171da:	bd38      	pop	{r3, r4, r5, pc}
 80171dc:	b118      	cbz	r0, 80171e6 <_fflush_r+0x1a>
 80171de:	6983      	ldr	r3, [r0, #24]
 80171e0:	b90b      	cbnz	r3, 80171e6 <_fflush_r+0x1a>
 80171e2:	f000 f887 	bl	80172f4 <__sinit>
 80171e6:	4b14      	ldr	r3, [pc, #80]	; (8017238 <_fflush_r+0x6c>)
 80171e8:	429c      	cmp	r4, r3
 80171ea:	d11b      	bne.n	8017224 <_fflush_r+0x58>
 80171ec:	686c      	ldr	r4, [r5, #4]
 80171ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d0ef      	beq.n	80171d6 <_fflush_r+0xa>
 80171f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80171f8:	07d0      	lsls	r0, r2, #31
 80171fa:	d404      	bmi.n	8017206 <_fflush_r+0x3a>
 80171fc:	0599      	lsls	r1, r3, #22
 80171fe:	d402      	bmi.n	8017206 <_fflush_r+0x3a>
 8017200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017202:	f000 f915 	bl	8017430 <__retarget_lock_acquire_recursive>
 8017206:	4628      	mov	r0, r5
 8017208:	4621      	mov	r1, r4
 801720a:	f7ff ff59 	bl	80170c0 <__sflush_r>
 801720e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017210:	07da      	lsls	r2, r3, #31
 8017212:	4605      	mov	r5, r0
 8017214:	d4e0      	bmi.n	80171d8 <_fflush_r+0xc>
 8017216:	89a3      	ldrh	r3, [r4, #12]
 8017218:	059b      	lsls	r3, r3, #22
 801721a:	d4dd      	bmi.n	80171d8 <_fflush_r+0xc>
 801721c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801721e:	f000 f908 	bl	8017432 <__retarget_lock_release_recursive>
 8017222:	e7d9      	b.n	80171d8 <_fflush_r+0xc>
 8017224:	4b05      	ldr	r3, [pc, #20]	; (801723c <_fflush_r+0x70>)
 8017226:	429c      	cmp	r4, r3
 8017228:	d101      	bne.n	801722e <_fflush_r+0x62>
 801722a:	68ac      	ldr	r4, [r5, #8]
 801722c:	e7df      	b.n	80171ee <_fflush_r+0x22>
 801722e:	4b04      	ldr	r3, [pc, #16]	; (8017240 <_fflush_r+0x74>)
 8017230:	429c      	cmp	r4, r3
 8017232:	bf08      	it	eq
 8017234:	68ec      	ldreq	r4, [r5, #12]
 8017236:	e7da      	b.n	80171ee <_fflush_r+0x22>
 8017238:	08017fd8 	.word	0x08017fd8
 801723c:	08017ff8 	.word	0x08017ff8
 8017240:	08017fb8 	.word	0x08017fb8

08017244 <std>:
 8017244:	2300      	movs	r3, #0
 8017246:	b510      	push	{r4, lr}
 8017248:	4604      	mov	r4, r0
 801724a:	e9c0 3300 	strd	r3, r3, [r0]
 801724e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017252:	6083      	str	r3, [r0, #8]
 8017254:	8181      	strh	r1, [r0, #12]
 8017256:	6643      	str	r3, [r0, #100]	; 0x64
 8017258:	81c2      	strh	r2, [r0, #14]
 801725a:	6183      	str	r3, [r0, #24]
 801725c:	4619      	mov	r1, r3
 801725e:	2208      	movs	r2, #8
 8017260:	305c      	adds	r0, #92	; 0x5c
 8017262:	f7ff fdd7 	bl	8016e14 <memset>
 8017266:	4b05      	ldr	r3, [pc, #20]	; (801727c <std+0x38>)
 8017268:	6263      	str	r3, [r4, #36]	; 0x24
 801726a:	4b05      	ldr	r3, [pc, #20]	; (8017280 <std+0x3c>)
 801726c:	62a3      	str	r3, [r4, #40]	; 0x28
 801726e:	4b05      	ldr	r3, [pc, #20]	; (8017284 <std+0x40>)
 8017270:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017272:	4b05      	ldr	r3, [pc, #20]	; (8017288 <std+0x44>)
 8017274:	6224      	str	r4, [r4, #32]
 8017276:	6323      	str	r3, [r4, #48]	; 0x30
 8017278:	bd10      	pop	{r4, pc}
 801727a:	bf00      	nop
 801727c:	08017cbd 	.word	0x08017cbd
 8017280:	08017cdf 	.word	0x08017cdf
 8017284:	08017d17 	.word	0x08017d17
 8017288:	08017d3b 	.word	0x08017d3b

0801728c <_cleanup_r>:
 801728c:	4901      	ldr	r1, [pc, #4]	; (8017294 <_cleanup_r+0x8>)
 801728e:	f000 b8af 	b.w	80173f0 <_fwalk_reent>
 8017292:	bf00      	nop
 8017294:	080171cd 	.word	0x080171cd

08017298 <__sfmoreglue>:
 8017298:	b570      	push	{r4, r5, r6, lr}
 801729a:	2268      	movs	r2, #104	; 0x68
 801729c:	1e4d      	subs	r5, r1, #1
 801729e:	4355      	muls	r5, r2
 80172a0:	460e      	mov	r6, r1
 80172a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80172a6:	f000 f997 	bl	80175d8 <_malloc_r>
 80172aa:	4604      	mov	r4, r0
 80172ac:	b140      	cbz	r0, 80172c0 <__sfmoreglue+0x28>
 80172ae:	2100      	movs	r1, #0
 80172b0:	e9c0 1600 	strd	r1, r6, [r0]
 80172b4:	300c      	adds	r0, #12
 80172b6:	60a0      	str	r0, [r4, #8]
 80172b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80172bc:	f7ff fdaa 	bl	8016e14 <memset>
 80172c0:	4620      	mov	r0, r4
 80172c2:	bd70      	pop	{r4, r5, r6, pc}

080172c4 <__sfp_lock_acquire>:
 80172c4:	4801      	ldr	r0, [pc, #4]	; (80172cc <__sfp_lock_acquire+0x8>)
 80172c6:	f000 b8b3 	b.w	8017430 <__retarget_lock_acquire_recursive>
 80172ca:	bf00      	nop
 80172cc:	24015525 	.word	0x24015525

080172d0 <__sfp_lock_release>:
 80172d0:	4801      	ldr	r0, [pc, #4]	; (80172d8 <__sfp_lock_release+0x8>)
 80172d2:	f000 b8ae 	b.w	8017432 <__retarget_lock_release_recursive>
 80172d6:	bf00      	nop
 80172d8:	24015525 	.word	0x24015525

080172dc <__sinit_lock_acquire>:
 80172dc:	4801      	ldr	r0, [pc, #4]	; (80172e4 <__sinit_lock_acquire+0x8>)
 80172de:	f000 b8a7 	b.w	8017430 <__retarget_lock_acquire_recursive>
 80172e2:	bf00      	nop
 80172e4:	24015526 	.word	0x24015526

080172e8 <__sinit_lock_release>:
 80172e8:	4801      	ldr	r0, [pc, #4]	; (80172f0 <__sinit_lock_release+0x8>)
 80172ea:	f000 b8a2 	b.w	8017432 <__retarget_lock_release_recursive>
 80172ee:	bf00      	nop
 80172f0:	24015526 	.word	0x24015526

080172f4 <__sinit>:
 80172f4:	b510      	push	{r4, lr}
 80172f6:	4604      	mov	r4, r0
 80172f8:	f7ff fff0 	bl	80172dc <__sinit_lock_acquire>
 80172fc:	69a3      	ldr	r3, [r4, #24]
 80172fe:	b11b      	cbz	r3, 8017308 <__sinit+0x14>
 8017300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017304:	f7ff bff0 	b.w	80172e8 <__sinit_lock_release>
 8017308:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801730c:	6523      	str	r3, [r4, #80]	; 0x50
 801730e:	4b13      	ldr	r3, [pc, #76]	; (801735c <__sinit+0x68>)
 8017310:	4a13      	ldr	r2, [pc, #76]	; (8017360 <__sinit+0x6c>)
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	62a2      	str	r2, [r4, #40]	; 0x28
 8017316:	42a3      	cmp	r3, r4
 8017318:	bf04      	itt	eq
 801731a:	2301      	moveq	r3, #1
 801731c:	61a3      	streq	r3, [r4, #24]
 801731e:	4620      	mov	r0, r4
 8017320:	f000 f820 	bl	8017364 <__sfp>
 8017324:	6060      	str	r0, [r4, #4]
 8017326:	4620      	mov	r0, r4
 8017328:	f000 f81c 	bl	8017364 <__sfp>
 801732c:	60a0      	str	r0, [r4, #8]
 801732e:	4620      	mov	r0, r4
 8017330:	f000 f818 	bl	8017364 <__sfp>
 8017334:	2200      	movs	r2, #0
 8017336:	60e0      	str	r0, [r4, #12]
 8017338:	2104      	movs	r1, #4
 801733a:	6860      	ldr	r0, [r4, #4]
 801733c:	f7ff ff82 	bl	8017244 <std>
 8017340:	68a0      	ldr	r0, [r4, #8]
 8017342:	2201      	movs	r2, #1
 8017344:	2109      	movs	r1, #9
 8017346:	f7ff ff7d 	bl	8017244 <std>
 801734a:	68e0      	ldr	r0, [r4, #12]
 801734c:	2202      	movs	r2, #2
 801734e:	2112      	movs	r1, #18
 8017350:	f7ff ff78 	bl	8017244 <std>
 8017354:	2301      	movs	r3, #1
 8017356:	61a3      	str	r3, [r4, #24]
 8017358:	e7d2      	b.n	8017300 <__sinit+0xc>
 801735a:	bf00      	nop
 801735c:	08017fb4 	.word	0x08017fb4
 8017360:	0801728d 	.word	0x0801728d

08017364 <__sfp>:
 8017364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017366:	4607      	mov	r7, r0
 8017368:	f7ff ffac 	bl	80172c4 <__sfp_lock_acquire>
 801736c:	4b1e      	ldr	r3, [pc, #120]	; (80173e8 <__sfp+0x84>)
 801736e:	681e      	ldr	r6, [r3, #0]
 8017370:	69b3      	ldr	r3, [r6, #24]
 8017372:	b913      	cbnz	r3, 801737a <__sfp+0x16>
 8017374:	4630      	mov	r0, r6
 8017376:	f7ff ffbd 	bl	80172f4 <__sinit>
 801737a:	3648      	adds	r6, #72	; 0x48
 801737c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017380:	3b01      	subs	r3, #1
 8017382:	d503      	bpl.n	801738c <__sfp+0x28>
 8017384:	6833      	ldr	r3, [r6, #0]
 8017386:	b30b      	cbz	r3, 80173cc <__sfp+0x68>
 8017388:	6836      	ldr	r6, [r6, #0]
 801738a:	e7f7      	b.n	801737c <__sfp+0x18>
 801738c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017390:	b9d5      	cbnz	r5, 80173c8 <__sfp+0x64>
 8017392:	4b16      	ldr	r3, [pc, #88]	; (80173ec <__sfp+0x88>)
 8017394:	60e3      	str	r3, [r4, #12]
 8017396:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801739a:	6665      	str	r5, [r4, #100]	; 0x64
 801739c:	f000 f847 	bl	801742e <__retarget_lock_init_recursive>
 80173a0:	f7ff ff96 	bl	80172d0 <__sfp_lock_release>
 80173a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80173a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80173ac:	6025      	str	r5, [r4, #0]
 80173ae:	61a5      	str	r5, [r4, #24]
 80173b0:	2208      	movs	r2, #8
 80173b2:	4629      	mov	r1, r5
 80173b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80173b8:	f7ff fd2c 	bl	8016e14 <memset>
 80173bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80173c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80173c4:	4620      	mov	r0, r4
 80173c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173c8:	3468      	adds	r4, #104	; 0x68
 80173ca:	e7d9      	b.n	8017380 <__sfp+0x1c>
 80173cc:	2104      	movs	r1, #4
 80173ce:	4638      	mov	r0, r7
 80173d0:	f7ff ff62 	bl	8017298 <__sfmoreglue>
 80173d4:	4604      	mov	r4, r0
 80173d6:	6030      	str	r0, [r6, #0]
 80173d8:	2800      	cmp	r0, #0
 80173da:	d1d5      	bne.n	8017388 <__sfp+0x24>
 80173dc:	f7ff ff78 	bl	80172d0 <__sfp_lock_release>
 80173e0:	230c      	movs	r3, #12
 80173e2:	603b      	str	r3, [r7, #0]
 80173e4:	e7ee      	b.n	80173c4 <__sfp+0x60>
 80173e6:	bf00      	nop
 80173e8:	08017fb4 	.word	0x08017fb4
 80173ec:	ffff0001 	.word	0xffff0001

080173f0 <_fwalk_reent>:
 80173f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80173f4:	4606      	mov	r6, r0
 80173f6:	4688      	mov	r8, r1
 80173f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80173fc:	2700      	movs	r7, #0
 80173fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017402:	f1b9 0901 	subs.w	r9, r9, #1
 8017406:	d505      	bpl.n	8017414 <_fwalk_reent+0x24>
 8017408:	6824      	ldr	r4, [r4, #0]
 801740a:	2c00      	cmp	r4, #0
 801740c:	d1f7      	bne.n	80173fe <_fwalk_reent+0xe>
 801740e:	4638      	mov	r0, r7
 8017410:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017414:	89ab      	ldrh	r3, [r5, #12]
 8017416:	2b01      	cmp	r3, #1
 8017418:	d907      	bls.n	801742a <_fwalk_reent+0x3a>
 801741a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801741e:	3301      	adds	r3, #1
 8017420:	d003      	beq.n	801742a <_fwalk_reent+0x3a>
 8017422:	4629      	mov	r1, r5
 8017424:	4630      	mov	r0, r6
 8017426:	47c0      	blx	r8
 8017428:	4307      	orrs	r7, r0
 801742a:	3568      	adds	r5, #104	; 0x68
 801742c:	e7e9      	b.n	8017402 <_fwalk_reent+0x12>

0801742e <__retarget_lock_init_recursive>:
 801742e:	4770      	bx	lr

08017430 <__retarget_lock_acquire_recursive>:
 8017430:	4770      	bx	lr

08017432 <__retarget_lock_release_recursive>:
 8017432:	4770      	bx	lr

08017434 <__swhatbuf_r>:
 8017434:	b570      	push	{r4, r5, r6, lr}
 8017436:	460e      	mov	r6, r1
 8017438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801743c:	2900      	cmp	r1, #0
 801743e:	b096      	sub	sp, #88	; 0x58
 8017440:	4614      	mov	r4, r2
 8017442:	461d      	mov	r5, r3
 8017444:	da08      	bge.n	8017458 <__swhatbuf_r+0x24>
 8017446:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801744a:	2200      	movs	r2, #0
 801744c:	602a      	str	r2, [r5, #0]
 801744e:	061a      	lsls	r2, r3, #24
 8017450:	d410      	bmi.n	8017474 <__swhatbuf_r+0x40>
 8017452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017456:	e00e      	b.n	8017476 <__swhatbuf_r+0x42>
 8017458:	466a      	mov	r2, sp
 801745a:	f000 fc95 	bl	8017d88 <_fstat_r>
 801745e:	2800      	cmp	r0, #0
 8017460:	dbf1      	blt.n	8017446 <__swhatbuf_r+0x12>
 8017462:	9a01      	ldr	r2, [sp, #4]
 8017464:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017468:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801746c:	425a      	negs	r2, r3
 801746e:	415a      	adcs	r2, r3
 8017470:	602a      	str	r2, [r5, #0]
 8017472:	e7ee      	b.n	8017452 <__swhatbuf_r+0x1e>
 8017474:	2340      	movs	r3, #64	; 0x40
 8017476:	2000      	movs	r0, #0
 8017478:	6023      	str	r3, [r4, #0]
 801747a:	b016      	add	sp, #88	; 0x58
 801747c:	bd70      	pop	{r4, r5, r6, pc}
	...

08017480 <__smakebuf_r>:
 8017480:	898b      	ldrh	r3, [r1, #12]
 8017482:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017484:	079d      	lsls	r5, r3, #30
 8017486:	4606      	mov	r6, r0
 8017488:	460c      	mov	r4, r1
 801748a:	d507      	bpl.n	801749c <__smakebuf_r+0x1c>
 801748c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017490:	6023      	str	r3, [r4, #0]
 8017492:	6123      	str	r3, [r4, #16]
 8017494:	2301      	movs	r3, #1
 8017496:	6163      	str	r3, [r4, #20]
 8017498:	b002      	add	sp, #8
 801749a:	bd70      	pop	{r4, r5, r6, pc}
 801749c:	ab01      	add	r3, sp, #4
 801749e:	466a      	mov	r2, sp
 80174a0:	f7ff ffc8 	bl	8017434 <__swhatbuf_r>
 80174a4:	9900      	ldr	r1, [sp, #0]
 80174a6:	4605      	mov	r5, r0
 80174a8:	4630      	mov	r0, r6
 80174aa:	f000 f895 	bl	80175d8 <_malloc_r>
 80174ae:	b948      	cbnz	r0, 80174c4 <__smakebuf_r+0x44>
 80174b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80174b4:	059a      	lsls	r2, r3, #22
 80174b6:	d4ef      	bmi.n	8017498 <__smakebuf_r+0x18>
 80174b8:	f023 0303 	bic.w	r3, r3, #3
 80174bc:	f043 0302 	orr.w	r3, r3, #2
 80174c0:	81a3      	strh	r3, [r4, #12]
 80174c2:	e7e3      	b.n	801748c <__smakebuf_r+0xc>
 80174c4:	4b0d      	ldr	r3, [pc, #52]	; (80174fc <__smakebuf_r+0x7c>)
 80174c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80174c8:	89a3      	ldrh	r3, [r4, #12]
 80174ca:	6020      	str	r0, [r4, #0]
 80174cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80174d0:	81a3      	strh	r3, [r4, #12]
 80174d2:	9b00      	ldr	r3, [sp, #0]
 80174d4:	6163      	str	r3, [r4, #20]
 80174d6:	9b01      	ldr	r3, [sp, #4]
 80174d8:	6120      	str	r0, [r4, #16]
 80174da:	b15b      	cbz	r3, 80174f4 <__smakebuf_r+0x74>
 80174dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80174e0:	4630      	mov	r0, r6
 80174e2:	f000 fc63 	bl	8017dac <_isatty_r>
 80174e6:	b128      	cbz	r0, 80174f4 <__smakebuf_r+0x74>
 80174e8:	89a3      	ldrh	r3, [r4, #12]
 80174ea:	f023 0303 	bic.w	r3, r3, #3
 80174ee:	f043 0301 	orr.w	r3, r3, #1
 80174f2:	81a3      	strh	r3, [r4, #12]
 80174f4:	89a0      	ldrh	r0, [r4, #12]
 80174f6:	4305      	orrs	r5, r0
 80174f8:	81a5      	strh	r5, [r4, #12]
 80174fa:	e7cd      	b.n	8017498 <__smakebuf_r+0x18>
 80174fc:	0801728d 	.word	0x0801728d

08017500 <_free_r>:
 8017500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017502:	2900      	cmp	r1, #0
 8017504:	d044      	beq.n	8017590 <_free_r+0x90>
 8017506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801750a:	9001      	str	r0, [sp, #4]
 801750c:	2b00      	cmp	r3, #0
 801750e:	f1a1 0404 	sub.w	r4, r1, #4
 8017512:	bfb8      	it	lt
 8017514:	18e4      	addlt	r4, r4, r3
 8017516:	f000 fc6b 	bl	8017df0 <__malloc_lock>
 801751a:	4a1e      	ldr	r2, [pc, #120]	; (8017594 <_free_r+0x94>)
 801751c:	9801      	ldr	r0, [sp, #4]
 801751e:	6813      	ldr	r3, [r2, #0]
 8017520:	b933      	cbnz	r3, 8017530 <_free_r+0x30>
 8017522:	6063      	str	r3, [r4, #4]
 8017524:	6014      	str	r4, [r2, #0]
 8017526:	b003      	add	sp, #12
 8017528:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801752c:	f000 bc66 	b.w	8017dfc <__malloc_unlock>
 8017530:	42a3      	cmp	r3, r4
 8017532:	d908      	bls.n	8017546 <_free_r+0x46>
 8017534:	6825      	ldr	r5, [r4, #0]
 8017536:	1961      	adds	r1, r4, r5
 8017538:	428b      	cmp	r3, r1
 801753a:	bf01      	itttt	eq
 801753c:	6819      	ldreq	r1, [r3, #0]
 801753e:	685b      	ldreq	r3, [r3, #4]
 8017540:	1949      	addeq	r1, r1, r5
 8017542:	6021      	streq	r1, [r4, #0]
 8017544:	e7ed      	b.n	8017522 <_free_r+0x22>
 8017546:	461a      	mov	r2, r3
 8017548:	685b      	ldr	r3, [r3, #4]
 801754a:	b10b      	cbz	r3, 8017550 <_free_r+0x50>
 801754c:	42a3      	cmp	r3, r4
 801754e:	d9fa      	bls.n	8017546 <_free_r+0x46>
 8017550:	6811      	ldr	r1, [r2, #0]
 8017552:	1855      	adds	r5, r2, r1
 8017554:	42a5      	cmp	r5, r4
 8017556:	d10b      	bne.n	8017570 <_free_r+0x70>
 8017558:	6824      	ldr	r4, [r4, #0]
 801755a:	4421      	add	r1, r4
 801755c:	1854      	adds	r4, r2, r1
 801755e:	42a3      	cmp	r3, r4
 8017560:	6011      	str	r1, [r2, #0]
 8017562:	d1e0      	bne.n	8017526 <_free_r+0x26>
 8017564:	681c      	ldr	r4, [r3, #0]
 8017566:	685b      	ldr	r3, [r3, #4]
 8017568:	6053      	str	r3, [r2, #4]
 801756a:	4421      	add	r1, r4
 801756c:	6011      	str	r1, [r2, #0]
 801756e:	e7da      	b.n	8017526 <_free_r+0x26>
 8017570:	d902      	bls.n	8017578 <_free_r+0x78>
 8017572:	230c      	movs	r3, #12
 8017574:	6003      	str	r3, [r0, #0]
 8017576:	e7d6      	b.n	8017526 <_free_r+0x26>
 8017578:	6825      	ldr	r5, [r4, #0]
 801757a:	1961      	adds	r1, r4, r5
 801757c:	428b      	cmp	r3, r1
 801757e:	bf04      	itt	eq
 8017580:	6819      	ldreq	r1, [r3, #0]
 8017582:	685b      	ldreq	r3, [r3, #4]
 8017584:	6063      	str	r3, [r4, #4]
 8017586:	bf04      	itt	eq
 8017588:	1949      	addeq	r1, r1, r5
 801758a:	6021      	streq	r1, [r4, #0]
 801758c:	6054      	str	r4, [r2, #4]
 801758e:	e7ca      	b.n	8017526 <_free_r+0x26>
 8017590:	b003      	add	sp, #12
 8017592:	bd30      	pop	{r4, r5, pc}
 8017594:	24015528 	.word	0x24015528

08017598 <sbrk_aligned>:
 8017598:	b570      	push	{r4, r5, r6, lr}
 801759a:	4e0e      	ldr	r6, [pc, #56]	; (80175d4 <sbrk_aligned+0x3c>)
 801759c:	460c      	mov	r4, r1
 801759e:	6831      	ldr	r1, [r6, #0]
 80175a0:	4605      	mov	r5, r0
 80175a2:	b911      	cbnz	r1, 80175aa <sbrk_aligned+0x12>
 80175a4:	f000 fb7a 	bl	8017c9c <_sbrk_r>
 80175a8:	6030      	str	r0, [r6, #0]
 80175aa:	4621      	mov	r1, r4
 80175ac:	4628      	mov	r0, r5
 80175ae:	f000 fb75 	bl	8017c9c <_sbrk_r>
 80175b2:	1c43      	adds	r3, r0, #1
 80175b4:	d00a      	beq.n	80175cc <sbrk_aligned+0x34>
 80175b6:	1cc4      	adds	r4, r0, #3
 80175b8:	f024 0403 	bic.w	r4, r4, #3
 80175bc:	42a0      	cmp	r0, r4
 80175be:	d007      	beq.n	80175d0 <sbrk_aligned+0x38>
 80175c0:	1a21      	subs	r1, r4, r0
 80175c2:	4628      	mov	r0, r5
 80175c4:	f000 fb6a 	bl	8017c9c <_sbrk_r>
 80175c8:	3001      	adds	r0, #1
 80175ca:	d101      	bne.n	80175d0 <sbrk_aligned+0x38>
 80175cc:	f04f 34ff 	mov.w	r4, #4294967295
 80175d0:	4620      	mov	r0, r4
 80175d2:	bd70      	pop	{r4, r5, r6, pc}
 80175d4:	2401552c 	.word	0x2401552c

080175d8 <_malloc_r>:
 80175d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80175dc:	1ccd      	adds	r5, r1, #3
 80175de:	f025 0503 	bic.w	r5, r5, #3
 80175e2:	3508      	adds	r5, #8
 80175e4:	2d0c      	cmp	r5, #12
 80175e6:	bf38      	it	cc
 80175e8:	250c      	movcc	r5, #12
 80175ea:	2d00      	cmp	r5, #0
 80175ec:	4607      	mov	r7, r0
 80175ee:	db01      	blt.n	80175f4 <_malloc_r+0x1c>
 80175f0:	42a9      	cmp	r1, r5
 80175f2:	d905      	bls.n	8017600 <_malloc_r+0x28>
 80175f4:	230c      	movs	r3, #12
 80175f6:	603b      	str	r3, [r7, #0]
 80175f8:	2600      	movs	r6, #0
 80175fa:	4630      	mov	r0, r6
 80175fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017600:	4e2e      	ldr	r6, [pc, #184]	; (80176bc <_malloc_r+0xe4>)
 8017602:	f000 fbf5 	bl	8017df0 <__malloc_lock>
 8017606:	6833      	ldr	r3, [r6, #0]
 8017608:	461c      	mov	r4, r3
 801760a:	bb34      	cbnz	r4, 801765a <_malloc_r+0x82>
 801760c:	4629      	mov	r1, r5
 801760e:	4638      	mov	r0, r7
 8017610:	f7ff ffc2 	bl	8017598 <sbrk_aligned>
 8017614:	1c43      	adds	r3, r0, #1
 8017616:	4604      	mov	r4, r0
 8017618:	d14d      	bne.n	80176b6 <_malloc_r+0xde>
 801761a:	6834      	ldr	r4, [r6, #0]
 801761c:	4626      	mov	r6, r4
 801761e:	2e00      	cmp	r6, #0
 8017620:	d140      	bne.n	80176a4 <_malloc_r+0xcc>
 8017622:	6823      	ldr	r3, [r4, #0]
 8017624:	4631      	mov	r1, r6
 8017626:	4638      	mov	r0, r7
 8017628:	eb04 0803 	add.w	r8, r4, r3
 801762c:	f000 fb36 	bl	8017c9c <_sbrk_r>
 8017630:	4580      	cmp	r8, r0
 8017632:	d13a      	bne.n	80176aa <_malloc_r+0xd2>
 8017634:	6821      	ldr	r1, [r4, #0]
 8017636:	3503      	adds	r5, #3
 8017638:	1a6d      	subs	r5, r5, r1
 801763a:	f025 0503 	bic.w	r5, r5, #3
 801763e:	3508      	adds	r5, #8
 8017640:	2d0c      	cmp	r5, #12
 8017642:	bf38      	it	cc
 8017644:	250c      	movcc	r5, #12
 8017646:	4629      	mov	r1, r5
 8017648:	4638      	mov	r0, r7
 801764a:	f7ff ffa5 	bl	8017598 <sbrk_aligned>
 801764e:	3001      	adds	r0, #1
 8017650:	d02b      	beq.n	80176aa <_malloc_r+0xd2>
 8017652:	6823      	ldr	r3, [r4, #0]
 8017654:	442b      	add	r3, r5
 8017656:	6023      	str	r3, [r4, #0]
 8017658:	e00e      	b.n	8017678 <_malloc_r+0xa0>
 801765a:	6822      	ldr	r2, [r4, #0]
 801765c:	1b52      	subs	r2, r2, r5
 801765e:	d41e      	bmi.n	801769e <_malloc_r+0xc6>
 8017660:	2a0b      	cmp	r2, #11
 8017662:	d916      	bls.n	8017692 <_malloc_r+0xba>
 8017664:	1961      	adds	r1, r4, r5
 8017666:	42a3      	cmp	r3, r4
 8017668:	6025      	str	r5, [r4, #0]
 801766a:	bf18      	it	ne
 801766c:	6059      	strne	r1, [r3, #4]
 801766e:	6863      	ldr	r3, [r4, #4]
 8017670:	bf08      	it	eq
 8017672:	6031      	streq	r1, [r6, #0]
 8017674:	5162      	str	r2, [r4, r5]
 8017676:	604b      	str	r3, [r1, #4]
 8017678:	4638      	mov	r0, r7
 801767a:	f104 060b 	add.w	r6, r4, #11
 801767e:	f000 fbbd 	bl	8017dfc <__malloc_unlock>
 8017682:	f026 0607 	bic.w	r6, r6, #7
 8017686:	1d23      	adds	r3, r4, #4
 8017688:	1af2      	subs	r2, r6, r3
 801768a:	d0b6      	beq.n	80175fa <_malloc_r+0x22>
 801768c:	1b9b      	subs	r3, r3, r6
 801768e:	50a3      	str	r3, [r4, r2]
 8017690:	e7b3      	b.n	80175fa <_malloc_r+0x22>
 8017692:	6862      	ldr	r2, [r4, #4]
 8017694:	42a3      	cmp	r3, r4
 8017696:	bf0c      	ite	eq
 8017698:	6032      	streq	r2, [r6, #0]
 801769a:	605a      	strne	r2, [r3, #4]
 801769c:	e7ec      	b.n	8017678 <_malloc_r+0xa0>
 801769e:	4623      	mov	r3, r4
 80176a0:	6864      	ldr	r4, [r4, #4]
 80176a2:	e7b2      	b.n	801760a <_malloc_r+0x32>
 80176a4:	4634      	mov	r4, r6
 80176a6:	6876      	ldr	r6, [r6, #4]
 80176a8:	e7b9      	b.n	801761e <_malloc_r+0x46>
 80176aa:	230c      	movs	r3, #12
 80176ac:	603b      	str	r3, [r7, #0]
 80176ae:	4638      	mov	r0, r7
 80176b0:	f000 fba4 	bl	8017dfc <__malloc_unlock>
 80176b4:	e7a1      	b.n	80175fa <_malloc_r+0x22>
 80176b6:	6025      	str	r5, [r4, #0]
 80176b8:	e7de      	b.n	8017678 <_malloc_r+0xa0>
 80176ba:	bf00      	nop
 80176bc:	24015528 	.word	0x24015528

080176c0 <__sfputc_r>:
 80176c0:	6893      	ldr	r3, [r2, #8]
 80176c2:	3b01      	subs	r3, #1
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	b410      	push	{r4}
 80176c8:	6093      	str	r3, [r2, #8]
 80176ca:	da08      	bge.n	80176de <__sfputc_r+0x1e>
 80176cc:	6994      	ldr	r4, [r2, #24]
 80176ce:	42a3      	cmp	r3, r4
 80176d0:	db01      	blt.n	80176d6 <__sfputc_r+0x16>
 80176d2:	290a      	cmp	r1, #10
 80176d4:	d103      	bne.n	80176de <__sfputc_r+0x1e>
 80176d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176da:	f7ff bc31 	b.w	8016f40 <__swbuf_r>
 80176de:	6813      	ldr	r3, [r2, #0]
 80176e0:	1c58      	adds	r0, r3, #1
 80176e2:	6010      	str	r0, [r2, #0]
 80176e4:	7019      	strb	r1, [r3, #0]
 80176e6:	4608      	mov	r0, r1
 80176e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176ec:	4770      	bx	lr

080176ee <__sfputs_r>:
 80176ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176f0:	4606      	mov	r6, r0
 80176f2:	460f      	mov	r7, r1
 80176f4:	4614      	mov	r4, r2
 80176f6:	18d5      	adds	r5, r2, r3
 80176f8:	42ac      	cmp	r4, r5
 80176fa:	d101      	bne.n	8017700 <__sfputs_r+0x12>
 80176fc:	2000      	movs	r0, #0
 80176fe:	e007      	b.n	8017710 <__sfputs_r+0x22>
 8017700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017704:	463a      	mov	r2, r7
 8017706:	4630      	mov	r0, r6
 8017708:	f7ff ffda 	bl	80176c0 <__sfputc_r>
 801770c:	1c43      	adds	r3, r0, #1
 801770e:	d1f3      	bne.n	80176f8 <__sfputs_r+0xa>
 8017710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017714 <_vfiprintf_r>:
 8017714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017718:	460d      	mov	r5, r1
 801771a:	b09d      	sub	sp, #116	; 0x74
 801771c:	4614      	mov	r4, r2
 801771e:	4698      	mov	r8, r3
 8017720:	4606      	mov	r6, r0
 8017722:	b118      	cbz	r0, 801772c <_vfiprintf_r+0x18>
 8017724:	6983      	ldr	r3, [r0, #24]
 8017726:	b90b      	cbnz	r3, 801772c <_vfiprintf_r+0x18>
 8017728:	f7ff fde4 	bl	80172f4 <__sinit>
 801772c:	4b89      	ldr	r3, [pc, #548]	; (8017954 <_vfiprintf_r+0x240>)
 801772e:	429d      	cmp	r5, r3
 8017730:	d11b      	bne.n	801776a <_vfiprintf_r+0x56>
 8017732:	6875      	ldr	r5, [r6, #4]
 8017734:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017736:	07d9      	lsls	r1, r3, #31
 8017738:	d405      	bmi.n	8017746 <_vfiprintf_r+0x32>
 801773a:	89ab      	ldrh	r3, [r5, #12]
 801773c:	059a      	lsls	r2, r3, #22
 801773e:	d402      	bmi.n	8017746 <_vfiprintf_r+0x32>
 8017740:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017742:	f7ff fe75 	bl	8017430 <__retarget_lock_acquire_recursive>
 8017746:	89ab      	ldrh	r3, [r5, #12]
 8017748:	071b      	lsls	r3, r3, #28
 801774a:	d501      	bpl.n	8017750 <_vfiprintf_r+0x3c>
 801774c:	692b      	ldr	r3, [r5, #16]
 801774e:	b9eb      	cbnz	r3, 801778c <_vfiprintf_r+0x78>
 8017750:	4629      	mov	r1, r5
 8017752:	4630      	mov	r0, r6
 8017754:	f7ff fc46 	bl	8016fe4 <__swsetup_r>
 8017758:	b1c0      	cbz	r0, 801778c <_vfiprintf_r+0x78>
 801775a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801775c:	07dc      	lsls	r4, r3, #31
 801775e:	d50e      	bpl.n	801777e <_vfiprintf_r+0x6a>
 8017760:	f04f 30ff 	mov.w	r0, #4294967295
 8017764:	b01d      	add	sp, #116	; 0x74
 8017766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801776a:	4b7b      	ldr	r3, [pc, #492]	; (8017958 <_vfiprintf_r+0x244>)
 801776c:	429d      	cmp	r5, r3
 801776e:	d101      	bne.n	8017774 <_vfiprintf_r+0x60>
 8017770:	68b5      	ldr	r5, [r6, #8]
 8017772:	e7df      	b.n	8017734 <_vfiprintf_r+0x20>
 8017774:	4b79      	ldr	r3, [pc, #484]	; (801795c <_vfiprintf_r+0x248>)
 8017776:	429d      	cmp	r5, r3
 8017778:	bf08      	it	eq
 801777a:	68f5      	ldreq	r5, [r6, #12]
 801777c:	e7da      	b.n	8017734 <_vfiprintf_r+0x20>
 801777e:	89ab      	ldrh	r3, [r5, #12]
 8017780:	0598      	lsls	r0, r3, #22
 8017782:	d4ed      	bmi.n	8017760 <_vfiprintf_r+0x4c>
 8017784:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017786:	f7ff fe54 	bl	8017432 <__retarget_lock_release_recursive>
 801778a:	e7e9      	b.n	8017760 <_vfiprintf_r+0x4c>
 801778c:	2300      	movs	r3, #0
 801778e:	9309      	str	r3, [sp, #36]	; 0x24
 8017790:	2320      	movs	r3, #32
 8017792:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017796:	f8cd 800c 	str.w	r8, [sp, #12]
 801779a:	2330      	movs	r3, #48	; 0x30
 801779c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017960 <_vfiprintf_r+0x24c>
 80177a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80177a4:	f04f 0901 	mov.w	r9, #1
 80177a8:	4623      	mov	r3, r4
 80177aa:	469a      	mov	sl, r3
 80177ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80177b0:	b10a      	cbz	r2, 80177b6 <_vfiprintf_r+0xa2>
 80177b2:	2a25      	cmp	r2, #37	; 0x25
 80177b4:	d1f9      	bne.n	80177aa <_vfiprintf_r+0x96>
 80177b6:	ebba 0b04 	subs.w	fp, sl, r4
 80177ba:	d00b      	beq.n	80177d4 <_vfiprintf_r+0xc0>
 80177bc:	465b      	mov	r3, fp
 80177be:	4622      	mov	r2, r4
 80177c0:	4629      	mov	r1, r5
 80177c2:	4630      	mov	r0, r6
 80177c4:	f7ff ff93 	bl	80176ee <__sfputs_r>
 80177c8:	3001      	adds	r0, #1
 80177ca:	f000 80aa 	beq.w	8017922 <_vfiprintf_r+0x20e>
 80177ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80177d0:	445a      	add	r2, fp
 80177d2:	9209      	str	r2, [sp, #36]	; 0x24
 80177d4:	f89a 3000 	ldrb.w	r3, [sl]
 80177d8:	2b00      	cmp	r3, #0
 80177da:	f000 80a2 	beq.w	8017922 <_vfiprintf_r+0x20e>
 80177de:	2300      	movs	r3, #0
 80177e0:	f04f 32ff 	mov.w	r2, #4294967295
 80177e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80177e8:	f10a 0a01 	add.w	sl, sl, #1
 80177ec:	9304      	str	r3, [sp, #16]
 80177ee:	9307      	str	r3, [sp, #28]
 80177f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80177f4:	931a      	str	r3, [sp, #104]	; 0x68
 80177f6:	4654      	mov	r4, sl
 80177f8:	2205      	movs	r2, #5
 80177fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80177fe:	4858      	ldr	r0, [pc, #352]	; (8017960 <_vfiprintf_r+0x24c>)
 8017800:	f7e8 fe8e 	bl	8000520 <memchr>
 8017804:	9a04      	ldr	r2, [sp, #16]
 8017806:	b9d8      	cbnz	r0, 8017840 <_vfiprintf_r+0x12c>
 8017808:	06d1      	lsls	r1, r2, #27
 801780a:	bf44      	itt	mi
 801780c:	2320      	movmi	r3, #32
 801780e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017812:	0713      	lsls	r3, r2, #28
 8017814:	bf44      	itt	mi
 8017816:	232b      	movmi	r3, #43	; 0x2b
 8017818:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801781c:	f89a 3000 	ldrb.w	r3, [sl]
 8017820:	2b2a      	cmp	r3, #42	; 0x2a
 8017822:	d015      	beq.n	8017850 <_vfiprintf_r+0x13c>
 8017824:	9a07      	ldr	r2, [sp, #28]
 8017826:	4654      	mov	r4, sl
 8017828:	2000      	movs	r0, #0
 801782a:	f04f 0c0a 	mov.w	ip, #10
 801782e:	4621      	mov	r1, r4
 8017830:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017834:	3b30      	subs	r3, #48	; 0x30
 8017836:	2b09      	cmp	r3, #9
 8017838:	d94e      	bls.n	80178d8 <_vfiprintf_r+0x1c4>
 801783a:	b1b0      	cbz	r0, 801786a <_vfiprintf_r+0x156>
 801783c:	9207      	str	r2, [sp, #28]
 801783e:	e014      	b.n	801786a <_vfiprintf_r+0x156>
 8017840:	eba0 0308 	sub.w	r3, r0, r8
 8017844:	fa09 f303 	lsl.w	r3, r9, r3
 8017848:	4313      	orrs	r3, r2
 801784a:	9304      	str	r3, [sp, #16]
 801784c:	46a2      	mov	sl, r4
 801784e:	e7d2      	b.n	80177f6 <_vfiprintf_r+0xe2>
 8017850:	9b03      	ldr	r3, [sp, #12]
 8017852:	1d19      	adds	r1, r3, #4
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	9103      	str	r1, [sp, #12]
 8017858:	2b00      	cmp	r3, #0
 801785a:	bfbb      	ittet	lt
 801785c:	425b      	neglt	r3, r3
 801785e:	f042 0202 	orrlt.w	r2, r2, #2
 8017862:	9307      	strge	r3, [sp, #28]
 8017864:	9307      	strlt	r3, [sp, #28]
 8017866:	bfb8      	it	lt
 8017868:	9204      	strlt	r2, [sp, #16]
 801786a:	7823      	ldrb	r3, [r4, #0]
 801786c:	2b2e      	cmp	r3, #46	; 0x2e
 801786e:	d10c      	bne.n	801788a <_vfiprintf_r+0x176>
 8017870:	7863      	ldrb	r3, [r4, #1]
 8017872:	2b2a      	cmp	r3, #42	; 0x2a
 8017874:	d135      	bne.n	80178e2 <_vfiprintf_r+0x1ce>
 8017876:	9b03      	ldr	r3, [sp, #12]
 8017878:	1d1a      	adds	r2, r3, #4
 801787a:	681b      	ldr	r3, [r3, #0]
 801787c:	9203      	str	r2, [sp, #12]
 801787e:	2b00      	cmp	r3, #0
 8017880:	bfb8      	it	lt
 8017882:	f04f 33ff 	movlt.w	r3, #4294967295
 8017886:	3402      	adds	r4, #2
 8017888:	9305      	str	r3, [sp, #20]
 801788a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017970 <_vfiprintf_r+0x25c>
 801788e:	7821      	ldrb	r1, [r4, #0]
 8017890:	2203      	movs	r2, #3
 8017892:	4650      	mov	r0, sl
 8017894:	f7e8 fe44 	bl	8000520 <memchr>
 8017898:	b140      	cbz	r0, 80178ac <_vfiprintf_r+0x198>
 801789a:	2340      	movs	r3, #64	; 0x40
 801789c:	eba0 000a 	sub.w	r0, r0, sl
 80178a0:	fa03 f000 	lsl.w	r0, r3, r0
 80178a4:	9b04      	ldr	r3, [sp, #16]
 80178a6:	4303      	orrs	r3, r0
 80178a8:	3401      	adds	r4, #1
 80178aa:	9304      	str	r3, [sp, #16]
 80178ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178b0:	482c      	ldr	r0, [pc, #176]	; (8017964 <_vfiprintf_r+0x250>)
 80178b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80178b6:	2206      	movs	r2, #6
 80178b8:	f7e8 fe32 	bl	8000520 <memchr>
 80178bc:	2800      	cmp	r0, #0
 80178be:	d03f      	beq.n	8017940 <_vfiprintf_r+0x22c>
 80178c0:	4b29      	ldr	r3, [pc, #164]	; (8017968 <_vfiprintf_r+0x254>)
 80178c2:	bb1b      	cbnz	r3, 801790c <_vfiprintf_r+0x1f8>
 80178c4:	9b03      	ldr	r3, [sp, #12]
 80178c6:	3307      	adds	r3, #7
 80178c8:	f023 0307 	bic.w	r3, r3, #7
 80178cc:	3308      	adds	r3, #8
 80178ce:	9303      	str	r3, [sp, #12]
 80178d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178d2:	443b      	add	r3, r7
 80178d4:	9309      	str	r3, [sp, #36]	; 0x24
 80178d6:	e767      	b.n	80177a8 <_vfiprintf_r+0x94>
 80178d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80178dc:	460c      	mov	r4, r1
 80178de:	2001      	movs	r0, #1
 80178e0:	e7a5      	b.n	801782e <_vfiprintf_r+0x11a>
 80178e2:	2300      	movs	r3, #0
 80178e4:	3401      	adds	r4, #1
 80178e6:	9305      	str	r3, [sp, #20]
 80178e8:	4619      	mov	r1, r3
 80178ea:	f04f 0c0a 	mov.w	ip, #10
 80178ee:	4620      	mov	r0, r4
 80178f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80178f4:	3a30      	subs	r2, #48	; 0x30
 80178f6:	2a09      	cmp	r2, #9
 80178f8:	d903      	bls.n	8017902 <_vfiprintf_r+0x1ee>
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d0c5      	beq.n	801788a <_vfiprintf_r+0x176>
 80178fe:	9105      	str	r1, [sp, #20]
 8017900:	e7c3      	b.n	801788a <_vfiprintf_r+0x176>
 8017902:	fb0c 2101 	mla	r1, ip, r1, r2
 8017906:	4604      	mov	r4, r0
 8017908:	2301      	movs	r3, #1
 801790a:	e7f0      	b.n	80178ee <_vfiprintf_r+0x1da>
 801790c:	ab03      	add	r3, sp, #12
 801790e:	9300      	str	r3, [sp, #0]
 8017910:	462a      	mov	r2, r5
 8017912:	4b16      	ldr	r3, [pc, #88]	; (801796c <_vfiprintf_r+0x258>)
 8017914:	a904      	add	r1, sp, #16
 8017916:	4630      	mov	r0, r6
 8017918:	f3af 8000 	nop.w
 801791c:	4607      	mov	r7, r0
 801791e:	1c78      	adds	r0, r7, #1
 8017920:	d1d6      	bne.n	80178d0 <_vfiprintf_r+0x1bc>
 8017922:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017924:	07d9      	lsls	r1, r3, #31
 8017926:	d405      	bmi.n	8017934 <_vfiprintf_r+0x220>
 8017928:	89ab      	ldrh	r3, [r5, #12]
 801792a:	059a      	lsls	r2, r3, #22
 801792c:	d402      	bmi.n	8017934 <_vfiprintf_r+0x220>
 801792e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017930:	f7ff fd7f 	bl	8017432 <__retarget_lock_release_recursive>
 8017934:	89ab      	ldrh	r3, [r5, #12]
 8017936:	065b      	lsls	r3, r3, #25
 8017938:	f53f af12 	bmi.w	8017760 <_vfiprintf_r+0x4c>
 801793c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801793e:	e711      	b.n	8017764 <_vfiprintf_r+0x50>
 8017940:	ab03      	add	r3, sp, #12
 8017942:	9300      	str	r3, [sp, #0]
 8017944:	462a      	mov	r2, r5
 8017946:	4b09      	ldr	r3, [pc, #36]	; (801796c <_vfiprintf_r+0x258>)
 8017948:	a904      	add	r1, sp, #16
 801794a:	4630      	mov	r0, r6
 801794c:	f000 f880 	bl	8017a50 <_printf_i>
 8017950:	e7e4      	b.n	801791c <_vfiprintf_r+0x208>
 8017952:	bf00      	nop
 8017954:	08017fd8 	.word	0x08017fd8
 8017958:	08017ff8 	.word	0x08017ff8
 801795c:	08017fb8 	.word	0x08017fb8
 8017960:	08018018 	.word	0x08018018
 8017964:	08018022 	.word	0x08018022
 8017968:	00000000 	.word	0x00000000
 801796c:	080176ef 	.word	0x080176ef
 8017970:	0801801e 	.word	0x0801801e

08017974 <_printf_common>:
 8017974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017978:	4616      	mov	r6, r2
 801797a:	4699      	mov	r9, r3
 801797c:	688a      	ldr	r2, [r1, #8]
 801797e:	690b      	ldr	r3, [r1, #16]
 8017980:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017984:	4293      	cmp	r3, r2
 8017986:	bfb8      	it	lt
 8017988:	4613      	movlt	r3, r2
 801798a:	6033      	str	r3, [r6, #0]
 801798c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017990:	4607      	mov	r7, r0
 8017992:	460c      	mov	r4, r1
 8017994:	b10a      	cbz	r2, 801799a <_printf_common+0x26>
 8017996:	3301      	adds	r3, #1
 8017998:	6033      	str	r3, [r6, #0]
 801799a:	6823      	ldr	r3, [r4, #0]
 801799c:	0699      	lsls	r1, r3, #26
 801799e:	bf42      	ittt	mi
 80179a0:	6833      	ldrmi	r3, [r6, #0]
 80179a2:	3302      	addmi	r3, #2
 80179a4:	6033      	strmi	r3, [r6, #0]
 80179a6:	6825      	ldr	r5, [r4, #0]
 80179a8:	f015 0506 	ands.w	r5, r5, #6
 80179ac:	d106      	bne.n	80179bc <_printf_common+0x48>
 80179ae:	f104 0a19 	add.w	sl, r4, #25
 80179b2:	68e3      	ldr	r3, [r4, #12]
 80179b4:	6832      	ldr	r2, [r6, #0]
 80179b6:	1a9b      	subs	r3, r3, r2
 80179b8:	42ab      	cmp	r3, r5
 80179ba:	dc26      	bgt.n	8017a0a <_printf_common+0x96>
 80179bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80179c0:	1e13      	subs	r3, r2, #0
 80179c2:	6822      	ldr	r2, [r4, #0]
 80179c4:	bf18      	it	ne
 80179c6:	2301      	movne	r3, #1
 80179c8:	0692      	lsls	r2, r2, #26
 80179ca:	d42b      	bmi.n	8017a24 <_printf_common+0xb0>
 80179cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80179d0:	4649      	mov	r1, r9
 80179d2:	4638      	mov	r0, r7
 80179d4:	47c0      	blx	r8
 80179d6:	3001      	adds	r0, #1
 80179d8:	d01e      	beq.n	8017a18 <_printf_common+0xa4>
 80179da:	6823      	ldr	r3, [r4, #0]
 80179dc:	68e5      	ldr	r5, [r4, #12]
 80179de:	6832      	ldr	r2, [r6, #0]
 80179e0:	f003 0306 	and.w	r3, r3, #6
 80179e4:	2b04      	cmp	r3, #4
 80179e6:	bf08      	it	eq
 80179e8:	1aad      	subeq	r5, r5, r2
 80179ea:	68a3      	ldr	r3, [r4, #8]
 80179ec:	6922      	ldr	r2, [r4, #16]
 80179ee:	bf0c      	ite	eq
 80179f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80179f4:	2500      	movne	r5, #0
 80179f6:	4293      	cmp	r3, r2
 80179f8:	bfc4      	itt	gt
 80179fa:	1a9b      	subgt	r3, r3, r2
 80179fc:	18ed      	addgt	r5, r5, r3
 80179fe:	2600      	movs	r6, #0
 8017a00:	341a      	adds	r4, #26
 8017a02:	42b5      	cmp	r5, r6
 8017a04:	d11a      	bne.n	8017a3c <_printf_common+0xc8>
 8017a06:	2000      	movs	r0, #0
 8017a08:	e008      	b.n	8017a1c <_printf_common+0xa8>
 8017a0a:	2301      	movs	r3, #1
 8017a0c:	4652      	mov	r2, sl
 8017a0e:	4649      	mov	r1, r9
 8017a10:	4638      	mov	r0, r7
 8017a12:	47c0      	blx	r8
 8017a14:	3001      	adds	r0, #1
 8017a16:	d103      	bne.n	8017a20 <_printf_common+0xac>
 8017a18:	f04f 30ff 	mov.w	r0, #4294967295
 8017a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a20:	3501      	adds	r5, #1
 8017a22:	e7c6      	b.n	80179b2 <_printf_common+0x3e>
 8017a24:	18e1      	adds	r1, r4, r3
 8017a26:	1c5a      	adds	r2, r3, #1
 8017a28:	2030      	movs	r0, #48	; 0x30
 8017a2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017a2e:	4422      	add	r2, r4
 8017a30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017a34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017a38:	3302      	adds	r3, #2
 8017a3a:	e7c7      	b.n	80179cc <_printf_common+0x58>
 8017a3c:	2301      	movs	r3, #1
 8017a3e:	4622      	mov	r2, r4
 8017a40:	4649      	mov	r1, r9
 8017a42:	4638      	mov	r0, r7
 8017a44:	47c0      	blx	r8
 8017a46:	3001      	adds	r0, #1
 8017a48:	d0e6      	beq.n	8017a18 <_printf_common+0xa4>
 8017a4a:	3601      	adds	r6, #1
 8017a4c:	e7d9      	b.n	8017a02 <_printf_common+0x8e>
	...

08017a50 <_printf_i>:
 8017a50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017a54:	7e0f      	ldrb	r7, [r1, #24]
 8017a56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017a58:	2f78      	cmp	r7, #120	; 0x78
 8017a5a:	4691      	mov	r9, r2
 8017a5c:	4680      	mov	r8, r0
 8017a5e:	460c      	mov	r4, r1
 8017a60:	469a      	mov	sl, r3
 8017a62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017a66:	d807      	bhi.n	8017a78 <_printf_i+0x28>
 8017a68:	2f62      	cmp	r7, #98	; 0x62
 8017a6a:	d80a      	bhi.n	8017a82 <_printf_i+0x32>
 8017a6c:	2f00      	cmp	r7, #0
 8017a6e:	f000 80d8 	beq.w	8017c22 <_printf_i+0x1d2>
 8017a72:	2f58      	cmp	r7, #88	; 0x58
 8017a74:	f000 80a3 	beq.w	8017bbe <_printf_i+0x16e>
 8017a78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017a7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017a80:	e03a      	b.n	8017af8 <_printf_i+0xa8>
 8017a82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017a86:	2b15      	cmp	r3, #21
 8017a88:	d8f6      	bhi.n	8017a78 <_printf_i+0x28>
 8017a8a:	a101      	add	r1, pc, #4	; (adr r1, 8017a90 <_printf_i+0x40>)
 8017a8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017a90:	08017ae9 	.word	0x08017ae9
 8017a94:	08017afd 	.word	0x08017afd
 8017a98:	08017a79 	.word	0x08017a79
 8017a9c:	08017a79 	.word	0x08017a79
 8017aa0:	08017a79 	.word	0x08017a79
 8017aa4:	08017a79 	.word	0x08017a79
 8017aa8:	08017afd 	.word	0x08017afd
 8017aac:	08017a79 	.word	0x08017a79
 8017ab0:	08017a79 	.word	0x08017a79
 8017ab4:	08017a79 	.word	0x08017a79
 8017ab8:	08017a79 	.word	0x08017a79
 8017abc:	08017c09 	.word	0x08017c09
 8017ac0:	08017b2d 	.word	0x08017b2d
 8017ac4:	08017beb 	.word	0x08017beb
 8017ac8:	08017a79 	.word	0x08017a79
 8017acc:	08017a79 	.word	0x08017a79
 8017ad0:	08017c2b 	.word	0x08017c2b
 8017ad4:	08017a79 	.word	0x08017a79
 8017ad8:	08017b2d 	.word	0x08017b2d
 8017adc:	08017a79 	.word	0x08017a79
 8017ae0:	08017a79 	.word	0x08017a79
 8017ae4:	08017bf3 	.word	0x08017bf3
 8017ae8:	682b      	ldr	r3, [r5, #0]
 8017aea:	1d1a      	adds	r2, r3, #4
 8017aec:	681b      	ldr	r3, [r3, #0]
 8017aee:	602a      	str	r2, [r5, #0]
 8017af0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017af4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017af8:	2301      	movs	r3, #1
 8017afa:	e0a3      	b.n	8017c44 <_printf_i+0x1f4>
 8017afc:	6820      	ldr	r0, [r4, #0]
 8017afe:	6829      	ldr	r1, [r5, #0]
 8017b00:	0606      	lsls	r6, r0, #24
 8017b02:	f101 0304 	add.w	r3, r1, #4
 8017b06:	d50a      	bpl.n	8017b1e <_printf_i+0xce>
 8017b08:	680e      	ldr	r6, [r1, #0]
 8017b0a:	602b      	str	r3, [r5, #0]
 8017b0c:	2e00      	cmp	r6, #0
 8017b0e:	da03      	bge.n	8017b18 <_printf_i+0xc8>
 8017b10:	232d      	movs	r3, #45	; 0x2d
 8017b12:	4276      	negs	r6, r6
 8017b14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017b18:	485e      	ldr	r0, [pc, #376]	; (8017c94 <_printf_i+0x244>)
 8017b1a:	230a      	movs	r3, #10
 8017b1c:	e019      	b.n	8017b52 <_printf_i+0x102>
 8017b1e:	680e      	ldr	r6, [r1, #0]
 8017b20:	602b      	str	r3, [r5, #0]
 8017b22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017b26:	bf18      	it	ne
 8017b28:	b236      	sxthne	r6, r6
 8017b2a:	e7ef      	b.n	8017b0c <_printf_i+0xbc>
 8017b2c:	682b      	ldr	r3, [r5, #0]
 8017b2e:	6820      	ldr	r0, [r4, #0]
 8017b30:	1d19      	adds	r1, r3, #4
 8017b32:	6029      	str	r1, [r5, #0]
 8017b34:	0601      	lsls	r1, r0, #24
 8017b36:	d501      	bpl.n	8017b3c <_printf_i+0xec>
 8017b38:	681e      	ldr	r6, [r3, #0]
 8017b3a:	e002      	b.n	8017b42 <_printf_i+0xf2>
 8017b3c:	0646      	lsls	r6, r0, #25
 8017b3e:	d5fb      	bpl.n	8017b38 <_printf_i+0xe8>
 8017b40:	881e      	ldrh	r6, [r3, #0]
 8017b42:	4854      	ldr	r0, [pc, #336]	; (8017c94 <_printf_i+0x244>)
 8017b44:	2f6f      	cmp	r7, #111	; 0x6f
 8017b46:	bf0c      	ite	eq
 8017b48:	2308      	moveq	r3, #8
 8017b4a:	230a      	movne	r3, #10
 8017b4c:	2100      	movs	r1, #0
 8017b4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017b52:	6865      	ldr	r5, [r4, #4]
 8017b54:	60a5      	str	r5, [r4, #8]
 8017b56:	2d00      	cmp	r5, #0
 8017b58:	bfa2      	ittt	ge
 8017b5a:	6821      	ldrge	r1, [r4, #0]
 8017b5c:	f021 0104 	bicge.w	r1, r1, #4
 8017b60:	6021      	strge	r1, [r4, #0]
 8017b62:	b90e      	cbnz	r6, 8017b68 <_printf_i+0x118>
 8017b64:	2d00      	cmp	r5, #0
 8017b66:	d04d      	beq.n	8017c04 <_printf_i+0x1b4>
 8017b68:	4615      	mov	r5, r2
 8017b6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8017b6e:	fb03 6711 	mls	r7, r3, r1, r6
 8017b72:	5dc7      	ldrb	r7, [r0, r7]
 8017b74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017b78:	4637      	mov	r7, r6
 8017b7a:	42bb      	cmp	r3, r7
 8017b7c:	460e      	mov	r6, r1
 8017b7e:	d9f4      	bls.n	8017b6a <_printf_i+0x11a>
 8017b80:	2b08      	cmp	r3, #8
 8017b82:	d10b      	bne.n	8017b9c <_printf_i+0x14c>
 8017b84:	6823      	ldr	r3, [r4, #0]
 8017b86:	07de      	lsls	r6, r3, #31
 8017b88:	d508      	bpl.n	8017b9c <_printf_i+0x14c>
 8017b8a:	6923      	ldr	r3, [r4, #16]
 8017b8c:	6861      	ldr	r1, [r4, #4]
 8017b8e:	4299      	cmp	r1, r3
 8017b90:	bfde      	ittt	le
 8017b92:	2330      	movle	r3, #48	; 0x30
 8017b94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017b98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017b9c:	1b52      	subs	r2, r2, r5
 8017b9e:	6122      	str	r2, [r4, #16]
 8017ba0:	f8cd a000 	str.w	sl, [sp]
 8017ba4:	464b      	mov	r3, r9
 8017ba6:	aa03      	add	r2, sp, #12
 8017ba8:	4621      	mov	r1, r4
 8017baa:	4640      	mov	r0, r8
 8017bac:	f7ff fee2 	bl	8017974 <_printf_common>
 8017bb0:	3001      	adds	r0, #1
 8017bb2:	d14c      	bne.n	8017c4e <_printf_i+0x1fe>
 8017bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8017bb8:	b004      	add	sp, #16
 8017bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017bbe:	4835      	ldr	r0, [pc, #212]	; (8017c94 <_printf_i+0x244>)
 8017bc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8017bc4:	6829      	ldr	r1, [r5, #0]
 8017bc6:	6823      	ldr	r3, [r4, #0]
 8017bc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8017bcc:	6029      	str	r1, [r5, #0]
 8017bce:	061d      	lsls	r5, r3, #24
 8017bd0:	d514      	bpl.n	8017bfc <_printf_i+0x1ac>
 8017bd2:	07df      	lsls	r7, r3, #31
 8017bd4:	bf44      	itt	mi
 8017bd6:	f043 0320 	orrmi.w	r3, r3, #32
 8017bda:	6023      	strmi	r3, [r4, #0]
 8017bdc:	b91e      	cbnz	r6, 8017be6 <_printf_i+0x196>
 8017bde:	6823      	ldr	r3, [r4, #0]
 8017be0:	f023 0320 	bic.w	r3, r3, #32
 8017be4:	6023      	str	r3, [r4, #0]
 8017be6:	2310      	movs	r3, #16
 8017be8:	e7b0      	b.n	8017b4c <_printf_i+0xfc>
 8017bea:	6823      	ldr	r3, [r4, #0]
 8017bec:	f043 0320 	orr.w	r3, r3, #32
 8017bf0:	6023      	str	r3, [r4, #0]
 8017bf2:	2378      	movs	r3, #120	; 0x78
 8017bf4:	4828      	ldr	r0, [pc, #160]	; (8017c98 <_printf_i+0x248>)
 8017bf6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017bfa:	e7e3      	b.n	8017bc4 <_printf_i+0x174>
 8017bfc:	0659      	lsls	r1, r3, #25
 8017bfe:	bf48      	it	mi
 8017c00:	b2b6      	uxthmi	r6, r6
 8017c02:	e7e6      	b.n	8017bd2 <_printf_i+0x182>
 8017c04:	4615      	mov	r5, r2
 8017c06:	e7bb      	b.n	8017b80 <_printf_i+0x130>
 8017c08:	682b      	ldr	r3, [r5, #0]
 8017c0a:	6826      	ldr	r6, [r4, #0]
 8017c0c:	6961      	ldr	r1, [r4, #20]
 8017c0e:	1d18      	adds	r0, r3, #4
 8017c10:	6028      	str	r0, [r5, #0]
 8017c12:	0635      	lsls	r5, r6, #24
 8017c14:	681b      	ldr	r3, [r3, #0]
 8017c16:	d501      	bpl.n	8017c1c <_printf_i+0x1cc>
 8017c18:	6019      	str	r1, [r3, #0]
 8017c1a:	e002      	b.n	8017c22 <_printf_i+0x1d2>
 8017c1c:	0670      	lsls	r0, r6, #25
 8017c1e:	d5fb      	bpl.n	8017c18 <_printf_i+0x1c8>
 8017c20:	8019      	strh	r1, [r3, #0]
 8017c22:	2300      	movs	r3, #0
 8017c24:	6123      	str	r3, [r4, #16]
 8017c26:	4615      	mov	r5, r2
 8017c28:	e7ba      	b.n	8017ba0 <_printf_i+0x150>
 8017c2a:	682b      	ldr	r3, [r5, #0]
 8017c2c:	1d1a      	adds	r2, r3, #4
 8017c2e:	602a      	str	r2, [r5, #0]
 8017c30:	681d      	ldr	r5, [r3, #0]
 8017c32:	6862      	ldr	r2, [r4, #4]
 8017c34:	2100      	movs	r1, #0
 8017c36:	4628      	mov	r0, r5
 8017c38:	f7e8 fc72 	bl	8000520 <memchr>
 8017c3c:	b108      	cbz	r0, 8017c42 <_printf_i+0x1f2>
 8017c3e:	1b40      	subs	r0, r0, r5
 8017c40:	6060      	str	r0, [r4, #4]
 8017c42:	6863      	ldr	r3, [r4, #4]
 8017c44:	6123      	str	r3, [r4, #16]
 8017c46:	2300      	movs	r3, #0
 8017c48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017c4c:	e7a8      	b.n	8017ba0 <_printf_i+0x150>
 8017c4e:	6923      	ldr	r3, [r4, #16]
 8017c50:	462a      	mov	r2, r5
 8017c52:	4649      	mov	r1, r9
 8017c54:	4640      	mov	r0, r8
 8017c56:	47d0      	blx	sl
 8017c58:	3001      	adds	r0, #1
 8017c5a:	d0ab      	beq.n	8017bb4 <_printf_i+0x164>
 8017c5c:	6823      	ldr	r3, [r4, #0]
 8017c5e:	079b      	lsls	r3, r3, #30
 8017c60:	d413      	bmi.n	8017c8a <_printf_i+0x23a>
 8017c62:	68e0      	ldr	r0, [r4, #12]
 8017c64:	9b03      	ldr	r3, [sp, #12]
 8017c66:	4298      	cmp	r0, r3
 8017c68:	bfb8      	it	lt
 8017c6a:	4618      	movlt	r0, r3
 8017c6c:	e7a4      	b.n	8017bb8 <_printf_i+0x168>
 8017c6e:	2301      	movs	r3, #1
 8017c70:	4632      	mov	r2, r6
 8017c72:	4649      	mov	r1, r9
 8017c74:	4640      	mov	r0, r8
 8017c76:	47d0      	blx	sl
 8017c78:	3001      	adds	r0, #1
 8017c7a:	d09b      	beq.n	8017bb4 <_printf_i+0x164>
 8017c7c:	3501      	adds	r5, #1
 8017c7e:	68e3      	ldr	r3, [r4, #12]
 8017c80:	9903      	ldr	r1, [sp, #12]
 8017c82:	1a5b      	subs	r3, r3, r1
 8017c84:	42ab      	cmp	r3, r5
 8017c86:	dcf2      	bgt.n	8017c6e <_printf_i+0x21e>
 8017c88:	e7eb      	b.n	8017c62 <_printf_i+0x212>
 8017c8a:	2500      	movs	r5, #0
 8017c8c:	f104 0619 	add.w	r6, r4, #25
 8017c90:	e7f5      	b.n	8017c7e <_printf_i+0x22e>
 8017c92:	bf00      	nop
 8017c94:	08018029 	.word	0x08018029
 8017c98:	0801803a 	.word	0x0801803a

08017c9c <_sbrk_r>:
 8017c9c:	b538      	push	{r3, r4, r5, lr}
 8017c9e:	4d06      	ldr	r5, [pc, #24]	; (8017cb8 <_sbrk_r+0x1c>)
 8017ca0:	2300      	movs	r3, #0
 8017ca2:	4604      	mov	r4, r0
 8017ca4:	4608      	mov	r0, r1
 8017ca6:	602b      	str	r3, [r5, #0]
 8017ca8:	f7e9 fc22 	bl	80014f0 <_sbrk>
 8017cac:	1c43      	adds	r3, r0, #1
 8017cae:	d102      	bne.n	8017cb6 <_sbrk_r+0x1a>
 8017cb0:	682b      	ldr	r3, [r5, #0]
 8017cb2:	b103      	cbz	r3, 8017cb6 <_sbrk_r+0x1a>
 8017cb4:	6023      	str	r3, [r4, #0]
 8017cb6:	bd38      	pop	{r3, r4, r5, pc}
 8017cb8:	24015530 	.word	0x24015530

08017cbc <__sread>:
 8017cbc:	b510      	push	{r4, lr}
 8017cbe:	460c      	mov	r4, r1
 8017cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cc4:	f000 f8a0 	bl	8017e08 <_read_r>
 8017cc8:	2800      	cmp	r0, #0
 8017cca:	bfab      	itete	ge
 8017ccc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017cce:	89a3      	ldrhlt	r3, [r4, #12]
 8017cd0:	181b      	addge	r3, r3, r0
 8017cd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017cd6:	bfac      	ite	ge
 8017cd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8017cda:	81a3      	strhlt	r3, [r4, #12]
 8017cdc:	bd10      	pop	{r4, pc}

08017cde <__swrite>:
 8017cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ce2:	461f      	mov	r7, r3
 8017ce4:	898b      	ldrh	r3, [r1, #12]
 8017ce6:	05db      	lsls	r3, r3, #23
 8017ce8:	4605      	mov	r5, r0
 8017cea:	460c      	mov	r4, r1
 8017cec:	4616      	mov	r6, r2
 8017cee:	d505      	bpl.n	8017cfc <__swrite+0x1e>
 8017cf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cf4:	2302      	movs	r3, #2
 8017cf6:	2200      	movs	r2, #0
 8017cf8:	f000 f868 	bl	8017dcc <_lseek_r>
 8017cfc:	89a3      	ldrh	r3, [r4, #12]
 8017cfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017d02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017d06:	81a3      	strh	r3, [r4, #12]
 8017d08:	4632      	mov	r2, r6
 8017d0a:	463b      	mov	r3, r7
 8017d0c:	4628      	mov	r0, r5
 8017d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017d12:	f000 b817 	b.w	8017d44 <_write_r>

08017d16 <__sseek>:
 8017d16:	b510      	push	{r4, lr}
 8017d18:	460c      	mov	r4, r1
 8017d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d1e:	f000 f855 	bl	8017dcc <_lseek_r>
 8017d22:	1c43      	adds	r3, r0, #1
 8017d24:	89a3      	ldrh	r3, [r4, #12]
 8017d26:	bf15      	itete	ne
 8017d28:	6560      	strne	r0, [r4, #84]	; 0x54
 8017d2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017d2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017d32:	81a3      	strheq	r3, [r4, #12]
 8017d34:	bf18      	it	ne
 8017d36:	81a3      	strhne	r3, [r4, #12]
 8017d38:	bd10      	pop	{r4, pc}

08017d3a <__sclose>:
 8017d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d3e:	f000 b813 	b.w	8017d68 <_close_r>
	...

08017d44 <_write_r>:
 8017d44:	b538      	push	{r3, r4, r5, lr}
 8017d46:	4d07      	ldr	r5, [pc, #28]	; (8017d64 <_write_r+0x20>)
 8017d48:	4604      	mov	r4, r0
 8017d4a:	4608      	mov	r0, r1
 8017d4c:	4611      	mov	r1, r2
 8017d4e:	2200      	movs	r2, #0
 8017d50:	602a      	str	r2, [r5, #0]
 8017d52:	461a      	mov	r2, r3
 8017d54:	f7e9 fb7b 	bl	800144e <_write>
 8017d58:	1c43      	adds	r3, r0, #1
 8017d5a:	d102      	bne.n	8017d62 <_write_r+0x1e>
 8017d5c:	682b      	ldr	r3, [r5, #0]
 8017d5e:	b103      	cbz	r3, 8017d62 <_write_r+0x1e>
 8017d60:	6023      	str	r3, [r4, #0]
 8017d62:	bd38      	pop	{r3, r4, r5, pc}
 8017d64:	24015530 	.word	0x24015530

08017d68 <_close_r>:
 8017d68:	b538      	push	{r3, r4, r5, lr}
 8017d6a:	4d06      	ldr	r5, [pc, #24]	; (8017d84 <_close_r+0x1c>)
 8017d6c:	2300      	movs	r3, #0
 8017d6e:	4604      	mov	r4, r0
 8017d70:	4608      	mov	r0, r1
 8017d72:	602b      	str	r3, [r5, #0]
 8017d74:	f7e9 fb87 	bl	8001486 <_close>
 8017d78:	1c43      	adds	r3, r0, #1
 8017d7a:	d102      	bne.n	8017d82 <_close_r+0x1a>
 8017d7c:	682b      	ldr	r3, [r5, #0]
 8017d7e:	b103      	cbz	r3, 8017d82 <_close_r+0x1a>
 8017d80:	6023      	str	r3, [r4, #0]
 8017d82:	bd38      	pop	{r3, r4, r5, pc}
 8017d84:	24015530 	.word	0x24015530

08017d88 <_fstat_r>:
 8017d88:	b538      	push	{r3, r4, r5, lr}
 8017d8a:	4d07      	ldr	r5, [pc, #28]	; (8017da8 <_fstat_r+0x20>)
 8017d8c:	2300      	movs	r3, #0
 8017d8e:	4604      	mov	r4, r0
 8017d90:	4608      	mov	r0, r1
 8017d92:	4611      	mov	r1, r2
 8017d94:	602b      	str	r3, [r5, #0]
 8017d96:	f7e9 fb82 	bl	800149e <_fstat>
 8017d9a:	1c43      	adds	r3, r0, #1
 8017d9c:	d102      	bne.n	8017da4 <_fstat_r+0x1c>
 8017d9e:	682b      	ldr	r3, [r5, #0]
 8017da0:	b103      	cbz	r3, 8017da4 <_fstat_r+0x1c>
 8017da2:	6023      	str	r3, [r4, #0]
 8017da4:	bd38      	pop	{r3, r4, r5, pc}
 8017da6:	bf00      	nop
 8017da8:	24015530 	.word	0x24015530

08017dac <_isatty_r>:
 8017dac:	b538      	push	{r3, r4, r5, lr}
 8017dae:	4d06      	ldr	r5, [pc, #24]	; (8017dc8 <_isatty_r+0x1c>)
 8017db0:	2300      	movs	r3, #0
 8017db2:	4604      	mov	r4, r0
 8017db4:	4608      	mov	r0, r1
 8017db6:	602b      	str	r3, [r5, #0]
 8017db8:	f7e9 fb81 	bl	80014be <_isatty>
 8017dbc:	1c43      	adds	r3, r0, #1
 8017dbe:	d102      	bne.n	8017dc6 <_isatty_r+0x1a>
 8017dc0:	682b      	ldr	r3, [r5, #0]
 8017dc2:	b103      	cbz	r3, 8017dc6 <_isatty_r+0x1a>
 8017dc4:	6023      	str	r3, [r4, #0]
 8017dc6:	bd38      	pop	{r3, r4, r5, pc}
 8017dc8:	24015530 	.word	0x24015530

08017dcc <_lseek_r>:
 8017dcc:	b538      	push	{r3, r4, r5, lr}
 8017dce:	4d07      	ldr	r5, [pc, #28]	; (8017dec <_lseek_r+0x20>)
 8017dd0:	4604      	mov	r4, r0
 8017dd2:	4608      	mov	r0, r1
 8017dd4:	4611      	mov	r1, r2
 8017dd6:	2200      	movs	r2, #0
 8017dd8:	602a      	str	r2, [r5, #0]
 8017dda:	461a      	mov	r2, r3
 8017ddc:	f7e9 fb7a 	bl	80014d4 <_lseek>
 8017de0:	1c43      	adds	r3, r0, #1
 8017de2:	d102      	bne.n	8017dea <_lseek_r+0x1e>
 8017de4:	682b      	ldr	r3, [r5, #0]
 8017de6:	b103      	cbz	r3, 8017dea <_lseek_r+0x1e>
 8017de8:	6023      	str	r3, [r4, #0]
 8017dea:	bd38      	pop	{r3, r4, r5, pc}
 8017dec:	24015530 	.word	0x24015530

08017df0 <__malloc_lock>:
 8017df0:	4801      	ldr	r0, [pc, #4]	; (8017df8 <__malloc_lock+0x8>)
 8017df2:	f7ff bb1d 	b.w	8017430 <__retarget_lock_acquire_recursive>
 8017df6:	bf00      	nop
 8017df8:	24015524 	.word	0x24015524

08017dfc <__malloc_unlock>:
 8017dfc:	4801      	ldr	r0, [pc, #4]	; (8017e04 <__malloc_unlock+0x8>)
 8017dfe:	f7ff bb18 	b.w	8017432 <__retarget_lock_release_recursive>
 8017e02:	bf00      	nop
 8017e04:	24015524 	.word	0x24015524

08017e08 <_read_r>:
 8017e08:	b538      	push	{r3, r4, r5, lr}
 8017e0a:	4d07      	ldr	r5, [pc, #28]	; (8017e28 <_read_r+0x20>)
 8017e0c:	4604      	mov	r4, r0
 8017e0e:	4608      	mov	r0, r1
 8017e10:	4611      	mov	r1, r2
 8017e12:	2200      	movs	r2, #0
 8017e14:	602a      	str	r2, [r5, #0]
 8017e16:	461a      	mov	r2, r3
 8017e18:	f7e9 fafc 	bl	8001414 <_read>
 8017e1c:	1c43      	adds	r3, r0, #1
 8017e1e:	d102      	bne.n	8017e26 <_read_r+0x1e>
 8017e20:	682b      	ldr	r3, [r5, #0]
 8017e22:	b103      	cbz	r3, 8017e26 <_read_r+0x1e>
 8017e24:	6023      	str	r3, [r4, #0]
 8017e26:	bd38      	pop	{r3, r4, r5, pc}
 8017e28:	24015530 	.word	0x24015530

08017e2c <_init>:
 8017e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e2e:	bf00      	nop
 8017e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e32:	bc08      	pop	{r3}
 8017e34:	469e      	mov	lr, r3
 8017e36:	4770      	bx	lr

08017e38 <_fini>:
 8017e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e3a:	bf00      	nop
 8017e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e3e:	bc08      	pop	{r3}
 8017e40:	469e      	mov	lr, r3
 8017e42:	4770      	bx	lr
