
bootloader_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d00c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000344  0800d2ac  0800d2ac  0001d2ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5f0  0800d5f0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d5f0  0800d5f0  0001d5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5f8  0800d5f8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5f8  0800d5f8  0001d5f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d5fc  0800d5fc  0001d5fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  24000000  0800d600  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012a88  24000080  0800d67c  00020080  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  24012b08  0800d67c  00022b08  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c07a  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000669d  00000000  00000000  0004c124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b98  00000000  00000000  000527c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017e0  00000000  00000000  00054360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00047bfc  00000000  00000000  00055b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002bf46  00000000  00000000  0009d73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b55fb  00000000  00000000  000c9682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0027ec7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000071a4  00000000  00000000  0027ecd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000080 	.word	0x24000080
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d294 	.word	0x0800d294

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000084 	.word	0x24000084
 80002dc:	0800d294 	.word	0x0800d294

080002e0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80002e0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002e2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002e6:	4919      	ldr	r1, [pc, #100]	; (800034c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80002e8:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002ec:	4818      	ldr	r0, [pc, #96]	; (8000350 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002ee:	4917      	ldr	r1, [pc, #92]	; (800034c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 80002f0:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 80002f2:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80002f4:	4817      	ldr	r0, [pc, #92]	; (8000354 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 80002f6:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 80002f8:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 80002fc:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002fe:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000302:	4915      	ldr	r1, [pc, #84]	; (8000358 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000304:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000306:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800030a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800030c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000310:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000314:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000318:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800031c:	490f      	ldr	r1, [pc, #60]	; (800035c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800031e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000322:	4770      	bx	lr

08000324 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000324:	f7ff bffe 	b.w	8000324 <__tx_BadHandler>

08000328 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000328:	f7ff bffe 	b.w	8000328 <__tx_HardfaultHandler>

0800032c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800032c:	f7ff bffe 	b.w	800032c <__tx_SVCallHandler>

08000330 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000330:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000332:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000336:	4770      	bx	lr

08000338 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000338:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800033a:	f000 f891 	bl	8000460 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800033e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000342:	4770      	bx	lr

08000344 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000344:	f7ff bffe 	b.w	8000344 <__tx_NMIHandler>

08000348 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000348:	f7ff bffe 	b.w	8000348 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800034c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000350:	240124ec 	.word	0x240124ec
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000354:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000358:	0009c3ff 	.word	0x0009c3ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800035c:	40ff0000 	.word	0x40ff0000

08000360 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000360:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000364:	4a2a      	ldr	r2, [pc, #168]	; (8000410 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000366:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000368:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800036c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000370:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000374:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000376:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800037a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800037e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000382:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000386:	f3bf 8f6f 	isb	sy

0800038a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800038a:	e7fe      	b.n	800038a <__tx_wait_here>

0800038c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800038c:	4821      	ldr	r0, [pc, #132]	; (8000414 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800038e:	4a22      	ldr	r2, [pc, #136]	; (8000418 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 8000390:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000394:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000396:	b191      	cbz	r1, 80003be <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000398:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800039a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800039e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003a2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80003a6:	d101      	bne.n	80003ac <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80003a8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080003ac <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ac:	4c1b      	ldr	r4, [pc, #108]	; (800041c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80003ae:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80003b2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80003b4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80003b8:	b10d      	cbz	r5, 80003be <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80003ba:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80003bc:	6023      	str	r3, [r4, #0]

080003be <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003be:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80003c0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80003c2:	b1b1      	cbz	r1, 80003f2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80003c4:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003c6:	b662      	cpsie	i

080003c8 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80003c8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ca:	4c14      	ldr	r4, [pc, #80]	; (800041c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80003cc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80003ce:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80003d2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80003d4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80003d6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80003da:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003de:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80003e2:	d101      	bne.n	80003e8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80003e4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003e8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003e8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003ec:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 80003f0:	4770      	bx	lr

080003f2 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003f2:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003f4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003f6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003f8:	b909      	cbnz	r1, 80003fe <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003fa:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003fc:	e7f9      	b.n	80003f2 <__tx_ts_wait>

080003fe <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003fe:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000402:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000406:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800040a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800040c:	e7dc      	b.n	80003c8 <__tx_ts_restore>

0800040e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800040e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000410:	24012588 	.word	0x24012588
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000414:	240124f0 	.word	0x240124f0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000418:	240124f4 	.word	0x240124f4
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800041c:	24012af4 	.word	0x24012af4

08000420 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000420:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000422:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000426:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800042a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800042e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000430:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000434:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000436:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000438:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800043a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800043c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800043e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000440:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000442:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000444:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000446:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000448:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800044a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800044c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800044e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000452:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000454:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000456:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800045a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800045c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800045e:	4770      	bx	lr

08000460 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000460:	4922      	ldr	r1, [pc, #136]	; (80004ec <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000462:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000464:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000468:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800046a:	4b21      	ldr	r3, [pc, #132]	; (80004f0 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800046c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800046e:	b13a      	cbz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000470:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000474:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000476:	b91a      	cbnz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800047a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800047e:	6018      	str	r0, [r3, #0]

08000480 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000480:	491d      	ldr	r1, [pc, #116]	; (80004f8 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000482:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000484:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000486:	b122      	cbz	r2, 8000492 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000488:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800048a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800048e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000490:	e008      	b.n	80004a4 <__tx_timer_done>

08000492 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000492:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000496:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000498:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800049a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800049c:	d101      	bne.n	80004a2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800049e:	4b19      	ldr	r3, [pc, #100]	; (8000504 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80004a0:	6818      	ldr	r0, [r3, #0]

080004a2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80004a2:	6008      	str	r0, [r1, #0]

080004a4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80004a4:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80004a6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80004a8:	b912      	cbnz	r2, 80004b0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80004aa:	4914      	ldr	r1, [pc, #80]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004ac:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80004ae:	b1d0      	cbz	r0, 80004e6 <__tx_timer_nothing_expired>

080004b0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80004b0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80004b4:	4911      	ldr	r1, [pc, #68]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004b6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80004b8:	b108      	cbz	r0, 80004be <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80004ba:	f00b f949 	bl	800b750 <_tx_timer_expiration_process>

080004be <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80004c0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004c2:	b172      	cbz	r2, 80004e2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004c4:	f00b f852 	bl	800b56c <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004c8:	480f      	ldr	r0, [pc, #60]	; (8000508 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004ca:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004cc:	b949      	cbnz	r1, 80004e2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004ce:	480f      	ldr	r0, [pc, #60]	; (800050c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80004d0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004d2:	4a0f      	ldr	r2, [pc, #60]	; (8000510 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80004d4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004d6:	480f      	ldr	r0, [pc, #60]	; (8000514 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80004d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80004dc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80004de:	d000      	beq.n	80004e2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80004e0:	6002      	str	r2, [r0, #0]

080004e2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80004e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004e6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004e6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004ea:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004ec:	24012594 	.word	0x24012594
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004f0:	24012af4 	.word	0x24012af4
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004f4:	24012598 	.word	0x24012598
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004f8:	24012624 	.word	0x24012624
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004fc:	24012628 	.word	0x24012628
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000500:	24012620 	.word	0x24012620
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000504:	2401261c 	.word	0x2401261c
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000508:	24012588 	.word	0x24012588
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800050c:	240124f0 	.word	0x240124f0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000510:	240124f4 	.word	0x240124f4
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000514:	e000ed04 	.word	0xe000ed04
	...

08000520 <memchr>:
 8000520:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000524:	2a10      	cmp	r2, #16
 8000526:	db2b      	blt.n	8000580 <memchr+0x60>
 8000528:	f010 0f07 	tst.w	r0, #7
 800052c:	d008      	beq.n	8000540 <memchr+0x20>
 800052e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000532:	3a01      	subs	r2, #1
 8000534:	428b      	cmp	r3, r1
 8000536:	d02d      	beq.n	8000594 <memchr+0x74>
 8000538:	f010 0f07 	tst.w	r0, #7
 800053c:	b342      	cbz	r2, 8000590 <memchr+0x70>
 800053e:	d1f6      	bne.n	800052e <memchr+0xe>
 8000540:	b4f0      	push	{r4, r5, r6, r7}
 8000542:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000546:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800054a:	f022 0407 	bic.w	r4, r2, #7
 800054e:	f07f 0700 	mvns.w	r7, #0
 8000552:	2300      	movs	r3, #0
 8000554:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000558:	3c08      	subs	r4, #8
 800055a:	ea85 0501 	eor.w	r5, r5, r1
 800055e:	ea86 0601 	eor.w	r6, r6, r1
 8000562:	fa85 f547 	uadd8	r5, r5, r7
 8000566:	faa3 f587 	sel	r5, r3, r7
 800056a:	fa86 f647 	uadd8	r6, r6, r7
 800056e:	faa5 f687 	sel	r6, r5, r7
 8000572:	b98e      	cbnz	r6, 8000598 <memchr+0x78>
 8000574:	d1ee      	bne.n	8000554 <memchr+0x34>
 8000576:	bcf0      	pop	{r4, r5, r6, r7}
 8000578:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800057c:	f002 0207 	and.w	r2, r2, #7
 8000580:	b132      	cbz	r2, 8000590 <memchr+0x70>
 8000582:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000586:	3a01      	subs	r2, #1
 8000588:	ea83 0301 	eor.w	r3, r3, r1
 800058c:	b113      	cbz	r3, 8000594 <memchr+0x74>
 800058e:	d1f8      	bne.n	8000582 <memchr+0x62>
 8000590:	2000      	movs	r0, #0
 8000592:	4770      	bx	lr
 8000594:	3801      	subs	r0, #1
 8000596:	4770      	bx	lr
 8000598:	2d00      	cmp	r5, #0
 800059a:	bf06      	itte	eq
 800059c:	4635      	moveq	r5, r6
 800059e:	3803      	subeq	r0, #3
 80005a0:	3807      	subne	r0, #7
 80005a2:	f015 0f01 	tst.w	r5, #1
 80005a6:	d107      	bne.n	80005b8 <memchr+0x98>
 80005a8:	3001      	adds	r0, #1
 80005aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80005ae:	bf02      	ittt	eq
 80005b0:	3001      	addeq	r0, #1
 80005b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80005b6:	3001      	addeq	r0, #1
 80005b8:	bcf0      	pop	{r4, r5, r6, r7}
 80005ba:	3801      	subs	r0, #1
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <__aeabi_uldivmod>:
 80005c0:	b953      	cbnz	r3, 80005d8 <__aeabi_uldivmod+0x18>
 80005c2:	b94a      	cbnz	r2, 80005d8 <__aeabi_uldivmod+0x18>
 80005c4:	2900      	cmp	r1, #0
 80005c6:	bf08      	it	eq
 80005c8:	2800      	cmpeq	r0, #0
 80005ca:	bf1c      	itt	ne
 80005cc:	f04f 31ff 	movne.w	r1, #4294967295
 80005d0:	f04f 30ff 	movne.w	r0, #4294967295
 80005d4:	f000 b974 	b.w	80008c0 <__aeabi_idiv0>
 80005d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005e0:	f000 f806 	bl	80005f0 <__udivmoddi4>
 80005e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005ec:	b004      	add	sp, #16
 80005ee:	4770      	bx	lr

080005f0 <__udivmoddi4>:
 80005f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005f4:	9d08      	ldr	r5, [sp, #32]
 80005f6:	4604      	mov	r4, r0
 80005f8:	468e      	mov	lr, r1
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d14d      	bne.n	800069a <__udivmoddi4+0xaa>
 80005fe:	428a      	cmp	r2, r1
 8000600:	4694      	mov	ip, r2
 8000602:	d969      	bls.n	80006d8 <__udivmoddi4+0xe8>
 8000604:	fab2 f282 	clz	r2, r2
 8000608:	b152      	cbz	r2, 8000620 <__udivmoddi4+0x30>
 800060a:	fa01 f302 	lsl.w	r3, r1, r2
 800060e:	f1c2 0120 	rsb	r1, r2, #32
 8000612:	fa20 f101 	lsr.w	r1, r0, r1
 8000616:	fa0c fc02 	lsl.w	ip, ip, r2
 800061a:	ea41 0e03 	orr.w	lr, r1, r3
 800061e:	4094      	lsls	r4, r2
 8000620:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000624:	0c21      	lsrs	r1, r4, #16
 8000626:	fbbe f6f8 	udiv	r6, lr, r8
 800062a:	fa1f f78c 	uxth.w	r7, ip
 800062e:	fb08 e316 	mls	r3, r8, r6, lr
 8000632:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000636:	fb06 f107 	mul.w	r1, r6, r7
 800063a:	4299      	cmp	r1, r3
 800063c:	d90a      	bls.n	8000654 <__udivmoddi4+0x64>
 800063e:	eb1c 0303 	adds.w	r3, ip, r3
 8000642:	f106 30ff 	add.w	r0, r6, #4294967295
 8000646:	f080 811f 	bcs.w	8000888 <__udivmoddi4+0x298>
 800064a:	4299      	cmp	r1, r3
 800064c:	f240 811c 	bls.w	8000888 <__udivmoddi4+0x298>
 8000650:	3e02      	subs	r6, #2
 8000652:	4463      	add	r3, ip
 8000654:	1a5b      	subs	r3, r3, r1
 8000656:	b2a4      	uxth	r4, r4
 8000658:	fbb3 f0f8 	udiv	r0, r3, r8
 800065c:	fb08 3310 	mls	r3, r8, r0, r3
 8000660:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000664:	fb00 f707 	mul.w	r7, r0, r7
 8000668:	42a7      	cmp	r7, r4
 800066a:	d90a      	bls.n	8000682 <__udivmoddi4+0x92>
 800066c:	eb1c 0404 	adds.w	r4, ip, r4
 8000670:	f100 33ff 	add.w	r3, r0, #4294967295
 8000674:	f080 810a 	bcs.w	800088c <__udivmoddi4+0x29c>
 8000678:	42a7      	cmp	r7, r4
 800067a:	f240 8107 	bls.w	800088c <__udivmoddi4+0x29c>
 800067e:	4464      	add	r4, ip
 8000680:	3802      	subs	r0, #2
 8000682:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000686:	1be4      	subs	r4, r4, r7
 8000688:	2600      	movs	r6, #0
 800068a:	b11d      	cbz	r5, 8000694 <__udivmoddi4+0xa4>
 800068c:	40d4      	lsrs	r4, r2
 800068e:	2300      	movs	r3, #0
 8000690:	e9c5 4300 	strd	r4, r3, [r5]
 8000694:	4631      	mov	r1, r6
 8000696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800069a:	428b      	cmp	r3, r1
 800069c:	d909      	bls.n	80006b2 <__udivmoddi4+0xc2>
 800069e:	2d00      	cmp	r5, #0
 80006a0:	f000 80ef 	beq.w	8000882 <__udivmoddi4+0x292>
 80006a4:	2600      	movs	r6, #0
 80006a6:	e9c5 0100 	strd	r0, r1, [r5]
 80006aa:	4630      	mov	r0, r6
 80006ac:	4631      	mov	r1, r6
 80006ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006b2:	fab3 f683 	clz	r6, r3
 80006b6:	2e00      	cmp	r6, #0
 80006b8:	d14a      	bne.n	8000750 <__udivmoddi4+0x160>
 80006ba:	428b      	cmp	r3, r1
 80006bc:	d302      	bcc.n	80006c4 <__udivmoddi4+0xd4>
 80006be:	4282      	cmp	r2, r0
 80006c0:	f200 80f9 	bhi.w	80008b6 <__udivmoddi4+0x2c6>
 80006c4:	1a84      	subs	r4, r0, r2
 80006c6:	eb61 0303 	sbc.w	r3, r1, r3
 80006ca:	2001      	movs	r0, #1
 80006cc:	469e      	mov	lr, r3
 80006ce:	2d00      	cmp	r5, #0
 80006d0:	d0e0      	beq.n	8000694 <__udivmoddi4+0xa4>
 80006d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80006d6:	e7dd      	b.n	8000694 <__udivmoddi4+0xa4>
 80006d8:	b902      	cbnz	r2, 80006dc <__udivmoddi4+0xec>
 80006da:	deff      	udf	#255	; 0xff
 80006dc:	fab2 f282 	clz	r2, r2
 80006e0:	2a00      	cmp	r2, #0
 80006e2:	f040 8092 	bne.w	800080a <__udivmoddi4+0x21a>
 80006e6:	eba1 010c 	sub.w	r1, r1, ip
 80006ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006ee:	fa1f fe8c 	uxth.w	lr, ip
 80006f2:	2601      	movs	r6, #1
 80006f4:	0c20      	lsrs	r0, r4, #16
 80006f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80006fa:	fb07 1113 	mls	r1, r7, r3, r1
 80006fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000702:	fb0e f003 	mul.w	r0, lr, r3
 8000706:	4288      	cmp	r0, r1
 8000708:	d908      	bls.n	800071c <__udivmoddi4+0x12c>
 800070a:	eb1c 0101 	adds.w	r1, ip, r1
 800070e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000712:	d202      	bcs.n	800071a <__udivmoddi4+0x12a>
 8000714:	4288      	cmp	r0, r1
 8000716:	f200 80cb 	bhi.w	80008b0 <__udivmoddi4+0x2c0>
 800071a:	4643      	mov	r3, r8
 800071c:	1a09      	subs	r1, r1, r0
 800071e:	b2a4      	uxth	r4, r4
 8000720:	fbb1 f0f7 	udiv	r0, r1, r7
 8000724:	fb07 1110 	mls	r1, r7, r0, r1
 8000728:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800072c:	fb0e fe00 	mul.w	lr, lr, r0
 8000730:	45a6      	cmp	lr, r4
 8000732:	d908      	bls.n	8000746 <__udivmoddi4+0x156>
 8000734:	eb1c 0404 	adds.w	r4, ip, r4
 8000738:	f100 31ff 	add.w	r1, r0, #4294967295
 800073c:	d202      	bcs.n	8000744 <__udivmoddi4+0x154>
 800073e:	45a6      	cmp	lr, r4
 8000740:	f200 80bb 	bhi.w	80008ba <__udivmoddi4+0x2ca>
 8000744:	4608      	mov	r0, r1
 8000746:	eba4 040e 	sub.w	r4, r4, lr
 800074a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800074e:	e79c      	b.n	800068a <__udivmoddi4+0x9a>
 8000750:	f1c6 0720 	rsb	r7, r6, #32
 8000754:	40b3      	lsls	r3, r6
 8000756:	fa22 fc07 	lsr.w	ip, r2, r7
 800075a:	ea4c 0c03 	orr.w	ip, ip, r3
 800075e:	fa20 f407 	lsr.w	r4, r0, r7
 8000762:	fa01 f306 	lsl.w	r3, r1, r6
 8000766:	431c      	orrs	r4, r3
 8000768:	40f9      	lsrs	r1, r7
 800076a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800076e:	fa00 f306 	lsl.w	r3, r0, r6
 8000772:	fbb1 f8f9 	udiv	r8, r1, r9
 8000776:	0c20      	lsrs	r0, r4, #16
 8000778:	fa1f fe8c 	uxth.w	lr, ip
 800077c:	fb09 1118 	mls	r1, r9, r8, r1
 8000780:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000784:	fb08 f00e 	mul.w	r0, r8, lr
 8000788:	4288      	cmp	r0, r1
 800078a:	fa02 f206 	lsl.w	r2, r2, r6
 800078e:	d90b      	bls.n	80007a8 <__udivmoddi4+0x1b8>
 8000790:	eb1c 0101 	adds.w	r1, ip, r1
 8000794:	f108 3aff 	add.w	sl, r8, #4294967295
 8000798:	f080 8088 	bcs.w	80008ac <__udivmoddi4+0x2bc>
 800079c:	4288      	cmp	r0, r1
 800079e:	f240 8085 	bls.w	80008ac <__udivmoddi4+0x2bc>
 80007a2:	f1a8 0802 	sub.w	r8, r8, #2
 80007a6:	4461      	add	r1, ip
 80007a8:	1a09      	subs	r1, r1, r0
 80007aa:	b2a4      	uxth	r4, r4
 80007ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80007b0:	fb09 1110 	mls	r1, r9, r0, r1
 80007b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007bc:	458e      	cmp	lr, r1
 80007be:	d908      	bls.n	80007d2 <__udivmoddi4+0x1e2>
 80007c0:	eb1c 0101 	adds.w	r1, ip, r1
 80007c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80007c8:	d26c      	bcs.n	80008a4 <__udivmoddi4+0x2b4>
 80007ca:	458e      	cmp	lr, r1
 80007cc:	d96a      	bls.n	80008a4 <__udivmoddi4+0x2b4>
 80007ce:	3802      	subs	r0, #2
 80007d0:	4461      	add	r1, ip
 80007d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007d6:	fba0 9402 	umull	r9, r4, r0, r2
 80007da:	eba1 010e 	sub.w	r1, r1, lr
 80007de:	42a1      	cmp	r1, r4
 80007e0:	46c8      	mov	r8, r9
 80007e2:	46a6      	mov	lr, r4
 80007e4:	d356      	bcc.n	8000894 <__udivmoddi4+0x2a4>
 80007e6:	d053      	beq.n	8000890 <__udivmoddi4+0x2a0>
 80007e8:	b15d      	cbz	r5, 8000802 <__udivmoddi4+0x212>
 80007ea:	ebb3 0208 	subs.w	r2, r3, r8
 80007ee:	eb61 010e 	sbc.w	r1, r1, lr
 80007f2:	fa01 f707 	lsl.w	r7, r1, r7
 80007f6:	fa22 f306 	lsr.w	r3, r2, r6
 80007fa:	40f1      	lsrs	r1, r6
 80007fc:	431f      	orrs	r7, r3
 80007fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000802:	2600      	movs	r6, #0
 8000804:	4631      	mov	r1, r6
 8000806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800080a:	f1c2 0320 	rsb	r3, r2, #32
 800080e:	40d8      	lsrs	r0, r3
 8000810:	fa0c fc02 	lsl.w	ip, ip, r2
 8000814:	fa21 f303 	lsr.w	r3, r1, r3
 8000818:	4091      	lsls	r1, r2
 800081a:	4301      	orrs	r1, r0
 800081c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000820:	fa1f fe8c 	uxth.w	lr, ip
 8000824:	fbb3 f0f7 	udiv	r0, r3, r7
 8000828:	fb07 3610 	mls	r6, r7, r0, r3
 800082c:	0c0b      	lsrs	r3, r1, #16
 800082e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000832:	fb00 f60e 	mul.w	r6, r0, lr
 8000836:	429e      	cmp	r6, r3
 8000838:	fa04 f402 	lsl.w	r4, r4, r2
 800083c:	d908      	bls.n	8000850 <__udivmoddi4+0x260>
 800083e:	eb1c 0303 	adds.w	r3, ip, r3
 8000842:	f100 38ff 	add.w	r8, r0, #4294967295
 8000846:	d22f      	bcs.n	80008a8 <__udivmoddi4+0x2b8>
 8000848:	429e      	cmp	r6, r3
 800084a:	d92d      	bls.n	80008a8 <__udivmoddi4+0x2b8>
 800084c:	3802      	subs	r0, #2
 800084e:	4463      	add	r3, ip
 8000850:	1b9b      	subs	r3, r3, r6
 8000852:	b289      	uxth	r1, r1
 8000854:	fbb3 f6f7 	udiv	r6, r3, r7
 8000858:	fb07 3316 	mls	r3, r7, r6, r3
 800085c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000860:	fb06 f30e 	mul.w	r3, r6, lr
 8000864:	428b      	cmp	r3, r1
 8000866:	d908      	bls.n	800087a <__udivmoddi4+0x28a>
 8000868:	eb1c 0101 	adds.w	r1, ip, r1
 800086c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000870:	d216      	bcs.n	80008a0 <__udivmoddi4+0x2b0>
 8000872:	428b      	cmp	r3, r1
 8000874:	d914      	bls.n	80008a0 <__udivmoddi4+0x2b0>
 8000876:	3e02      	subs	r6, #2
 8000878:	4461      	add	r1, ip
 800087a:	1ac9      	subs	r1, r1, r3
 800087c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000880:	e738      	b.n	80006f4 <__udivmoddi4+0x104>
 8000882:	462e      	mov	r6, r5
 8000884:	4628      	mov	r0, r5
 8000886:	e705      	b.n	8000694 <__udivmoddi4+0xa4>
 8000888:	4606      	mov	r6, r0
 800088a:	e6e3      	b.n	8000654 <__udivmoddi4+0x64>
 800088c:	4618      	mov	r0, r3
 800088e:	e6f8      	b.n	8000682 <__udivmoddi4+0x92>
 8000890:	454b      	cmp	r3, r9
 8000892:	d2a9      	bcs.n	80007e8 <__udivmoddi4+0x1f8>
 8000894:	ebb9 0802 	subs.w	r8, r9, r2
 8000898:	eb64 0e0c 	sbc.w	lr, r4, ip
 800089c:	3801      	subs	r0, #1
 800089e:	e7a3      	b.n	80007e8 <__udivmoddi4+0x1f8>
 80008a0:	4646      	mov	r6, r8
 80008a2:	e7ea      	b.n	800087a <__udivmoddi4+0x28a>
 80008a4:	4620      	mov	r0, r4
 80008a6:	e794      	b.n	80007d2 <__udivmoddi4+0x1e2>
 80008a8:	4640      	mov	r0, r8
 80008aa:	e7d1      	b.n	8000850 <__udivmoddi4+0x260>
 80008ac:	46d0      	mov	r8, sl
 80008ae:	e77b      	b.n	80007a8 <__udivmoddi4+0x1b8>
 80008b0:	3b02      	subs	r3, #2
 80008b2:	4461      	add	r1, ip
 80008b4:	e732      	b.n	800071c <__udivmoddi4+0x12c>
 80008b6:	4630      	mov	r0, r6
 80008b8:	e709      	b.n	80006ce <__udivmoddi4+0xde>
 80008ba:	4464      	add	r4, ip
 80008bc:	3802      	subs	r0, #2
 80008be:	e742      	b.n	8000746 <__udivmoddi4+0x156>

080008c0 <__aeabi_idiv0>:
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop

080008c4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af02      	add	r7, sp, #8
 80008ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80008d0:	2334      	movs	r3, #52	; 0x34
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008d8:	4a15      	ldr	r2, [pc, #84]	; (8000930 <tx_application_define+0x6c>)
 80008da:	4916      	ldr	r1, [pc, #88]	; (8000934 <tx_application_define+0x70>)
 80008dc:	4816      	ldr	r0, [pc, #88]	; (8000938 <tx_application_define+0x74>)
 80008de:	f00b f9e1 	bl	800bca4 <_txe_byte_pool_create>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d109      	bne.n	80008fc <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <tx_application_define+0x74>)
 80008ea:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80008ec:	68b8      	ldr	r0, [r7, #8]
 80008ee:	f000 f8c1 	bl	8000a74 <App_ThreadX_Init>
 80008f2:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d000      	beq.n	80008fc <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80008fa:	e7fe      	b.n	80008fa <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&fx_app_byte_pool, "Fx App memory pool", fx_byte_pool_buffer, FX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80008fc:	2334      	movs	r3, #52	; 0x34
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000904:	4a0d      	ldr	r2, [pc, #52]	; (800093c <tx_application_define+0x78>)
 8000906:	490e      	ldr	r1, [pc, #56]	; (8000940 <tx_application_define+0x7c>)
 8000908:	480e      	ldr	r0, [pc, #56]	; (8000944 <tx_application_define+0x80>)
 800090a:	f00b f9cb 	bl	800bca4 <_txe_byte_pool_create>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d109      	bne.n	8000928 <tx_application_define+0x64>
  {
    /* USER CODE BEGIN FX_Byte_Pool_Success */

    /* USER CODE END FX_Byte_Pool_Success */

    memory_ptr = (VOID *)&fx_app_byte_pool;
 8000914:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <tx_application_define+0x80>)
 8000916:	60bb      	str	r3, [r7, #8]
    status = MX_FileX_Init(memory_ptr);
 8000918:	68b8      	ldr	r0, [r7, #8]
 800091a:	f009 fc39 	bl	800a190 <MX_FileX_Init>
 800091e:	60f8      	str	r0, [r7, #12]
    if (status != FX_SUCCESS)
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d000      	beq.n	8000928 <tx_application_define+0x64>
    {
      /* USER CODE BEGIN  MX_FileX_Init_Error */
      while(1)
 8000926:	e7fe      	b.n	8000926 <tx_application_define+0x62>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	2400009c 	.word	0x2400009c
 8000934:	0800d2ac 	.word	0x0800d2ac
 8000938:	2400809c 	.word	0x2400809c
 800093c:	240080d0 	.word	0x240080d0
 8000940:	0800d2c0 	.word	0x0800d2c0
 8000944:	240120d0 	.word	0x240120d0

08000948 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800094c:	4b3d      	ldr	r3, [pc, #244]	; (8000a44 <SystemInit+0xfc>)
 800094e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000952:	4a3c      	ldr	r2, [pc, #240]	; (8000a44 <SystemInit+0xfc>)
 8000954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800095c:	4b39      	ldr	r3, [pc, #228]	; (8000a44 <SystemInit+0xfc>)
 800095e:	691b      	ldr	r3, [r3, #16]
 8000960:	4a38      	ldr	r2, [pc, #224]	; (8000a44 <SystemInit+0xfc>)
 8000962:	f043 0310 	orr.w	r3, r3, #16
 8000966:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000968:	4b37      	ldr	r3, [pc, #220]	; (8000a48 <SystemInit+0x100>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f003 030f 	and.w	r3, r3, #15
 8000970:	2b06      	cmp	r3, #6
 8000972:	d807      	bhi.n	8000984 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000974:	4b34      	ldr	r3, [pc, #208]	; (8000a48 <SystemInit+0x100>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f023 030f 	bic.w	r3, r3, #15
 800097c:	4a32      	ldr	r2, [pc, #200]	; (8000a48 <SystemInit+0x100>)
 800097e:	f043 0307 	orr.w	r3, r3, #7
 8000982:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000984:	4b31      	ldr	r3, [pc, #196]	; (8000a4c <SystemInit+0x104>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a30      	ldr	r2, [pc, #192]	; (8000a4c <SystemInit+0x104>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000990:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <SystemInit+0x104>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000996:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <SystemInit+0x104>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	492c      	ldr	r1, [pc, #176]	; (8000a4c <SystemInit+0x104>)
 800099c:	4b2c      	ldr	r3, [pc, #176]	; (8000a50 <SystemInit+0x108>)
 800099e:	4013      	ands	r3, r2
 80009a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009a2:	4b29      	ldr	r3, [pc, #164]	; (8000a48 <SystemInit+0x100>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d007      	beq.n	80009be <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009ae:	4b26      	ldr	r3, [pc, #152]	; (8000a48 <SystemInit+0x100>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f023 030f 	bic.w	r3, r3, #15
 80009b6:	4a24      	ldr	r2, [pc, #144]	; (8000a48 <SystemInit+0x100>)
 80009b8:	f043 0307 	orr.w	r3, r3, #7
 80009bc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009be:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <SystemInit+0x104>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009c4:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <SystemInit+0x104>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009ca:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <SystemInit+0x104>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <SystemInit+0x104>)
 80009d2:	4a20      	ldr	r2, [pc, #128]	; (8000a54 <SystemInit+0x10c>)
 80009d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <SystemInit+0x104>)
 80009d8:	4a1f      	ldr	r2, [pc, #124]	; (8000a58 <SystemInit+0x110>)
 80009da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <SystemInit+0x104>)
 80009de:	4a1f      	ldr	r2, [pc, #124]	; (8000a5c <SystemInit+0x114>)
 80009e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <SystemInit+0x104>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <SystemInit+0x104>)
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <SystemInit+0x114>)
 80009ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <SystemInit+0x104>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <SystemInit+0x104>)
 80009f6:	4a19      	ldr	r2, [pc, #100]	; (8000a5c <SystemInit+0x114>)
 80009f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <SystemInit+0x104>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <SystemInit+0x104>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a11      	ldr	r2, [pc, #68]	; (8000a4c <SystemInit+0x104>)
 8000a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <SystemInit+0x104>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000a12:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <SystemInit+0x118>)
 8000a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <SystemInit+0x118>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1c:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <SystemInit+0x11c>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <SystemInit+0x120>)
 8000a24:	4013      	ands	r3, r2
 8000a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a2a:	d202      	bcs.n	8000a32 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <SystemInit+0x124>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <SystemInit+0x128>)
 8000a34:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a38:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00
 8000a48:	52002000 	.word	0x52002000
 8000a4c:	58024400 	.word	0x58024400
 8000a50:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a54:	02020200 	.word	0x02020200
 8000a58:	01ff0000 	.word	0x01ff0000
 8000a5c:	01010280 	.word	0x01010280
 8000a60:	580000c0 	.word	0x580000c0
 8000a64:	5c001000 	.word	0x5c001000
 8000a68:	ffff0000 	.word	0xffff0000
 8000a6c:	51008108 	.word	0x51008108
 8000a70:	52004000 	.word	0x52004000

08000a74 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN App_ThreadX_Init */

  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000a80:	68fb      	ldr	r3, [r7, #12]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000a92:	f00a f8c7 	bl	800ac24 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <write_data_to_app_flash>:
  * @param data_len data length in words
  * @is_first_block true - if this is first block, false - not first block
  * @retval True if write to IFLASH success. False otherwise.
  */
static _Bool write_data_to_app_flash(uint32_t *data, uint16_t data_len_word, _Bool is_first_block)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08c      	sub	sp, #48	; 0x30
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	807b      	strh	r3, [r7, #2]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef ret;

	do {
//		ret = HAL_FLASH_Unlock();
		ret = HAL_FLASHEx_Unlock_Bank1();	// Should use this one instead? [Miller]
 8000aac:	f001 fac6 	bl	800203c <HAL_FLASHEx_Unlock_Bank1>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (ret != HAL_OK)	break;
 8000ab6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d157      	bne.n	8000b6e <write_data_to_app_flash+0xd2>

		//Check if the FLASH_FLAG_BSY
		FLASH_WaitForLastOperation(HAL_MAX_DELAY, FLASH_BANK_1);
 8000abe:	2101      	movs	r1, #1
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f001 f954 	bl	8001d70 <FLASH_WaitForLastOperation>

		// Should use Bank 1 only flags? (i.e. FLASH_FLAG_EOP_BANK1, and others) [Miller]
//		__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR |
//								FLASH_FLAG_WRPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_PGPERR);

		__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS_BANK1);
 8000ac8:	4b31      	ldr	r3, [pc, #196]	; (8000b90 <write_data_to_app_flash+0xf4>)
 8000aca:	4a32      	ldr	r2, [pc, #200]	; (8000b94 <write_data_to_app_flash+0xf8>)
 8000acc:	615a      	str	r2, [r3, #20]

		// Only erase app IFLASH when writing first block of new FW
		if (is_first_block) {
 8000ace:	787b      	ldrb	r3, [r7, #1]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d019      	beq.n	8000b08 <write_data_to_app_flash+0x6c>
			printf("Erasing app in IFLASH...\r\n");
 8000ad4:	4830      	ldr	r0, [pc, #192]	; (8000b98 <write_data_to_app_flash+0xfc>)
 8000ad6:	f00b ff01 	bl	800c8dc <puts>
			 * Sector 0: Bootloader	(starting at 0x08000000)
			 * Sector 1: Configurations
			 * Sector 2 & Sector 3: Application (starting at 0x08040000)
			 */

			EraseInitStruct.TypeErase		= FLASH_TYPEERASE_SECTORS;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
			EraseInitStruct.Banks			= FLASH_BANK_1;				// H7 has 2 internal FLASH Banks
 8000ade:	2301      	movs	r3, #1
 8000ae0:	613b      	str	r3, [r7, #16]
			EraseInitStruct.Sector			= FLASH_SECTOR_2;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	617b      	str	r3, [r7, #20]
			EraseInitStruct.NbSectors		= 2;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	61bb      	str	r3, [r7, #24]
//			EraseInitStruct.VoltageRange	= FLASH_VOLTAGE_RANGE_3;	// needed? [Miller]

			ret = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000aea:	f107 0208 	add.w	r2, r7, #8
 8000aee:	f107 030c 	add.w	r3, r7, #12
 8000af2:	4611      	mov	r1, r2
 8000af4:	4618      	mov	r0, r3
 8000af6:	f001 f9d7 	bl	8001ea8 <HAL_FLASHEx_Erase>
 8000afa:	4603      	mov	r3, r0
 8000afc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (ret != HAL_OK)	break;
 8000b00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d134      	bne.n	8000b72 <write_data_to_app_flash+0xd6>
		}

		// Write new app in IFLASH
		uint32_t data_add = (uint32_t) data;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t app_add = (uint32_t) APP_FLASH_ADDR;
 8000b0c:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <write_data_to_app_flash+0x100>)
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24

		// Writing 32-bit (4-byte) word at a time
		for (int i = 0; i < data_len_word;) {
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
 8000b14:	e018      	b.n	8000b48 <write_data_to_app_flash+0xac>
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD,
 8000b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f001 f896 	bl	8001c4c <HAL_FLASH_Program>
 8000b20:	4603      	mov	r3, r0
 8000b22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
									(uint32_t)app_add,
									(uint32_t)data_add);
			if (ret != HAL_OK) {
 8000b26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d003      	beq.n	8000b36 <write_data_to_app_flash+0x9a>
				printf("ERROR\tCould not write new app to FLASH\r\n");
 8000b2e:	481c      	ldr	r0, [pc, #112]	; (8000ba0 <write_data_to_app_flash+0x104>)
 8000b30:	f00b fed4 	bl	800c8dc <puts>
				break;
 8000b34:	e00c      	b.n	8000b50 <write_data_to_app_flash+0xb4>
			}

			// Increase addresses by 4 bytes??
			// to align with flash word write by 8 words
			app_add += (8 *4);
 8000b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b38:	3320      	adds	r3, #32
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
			data_add += (8 *4);
 8000b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b3e:	3320      	adds	r3, #32
 8000b40:	62bb      	str	r3, [r7, #40]	; 0x28
			// TODO: Should be increased by 1 or 4? [Miller]

			i += 8;
 8000b42:	6a3b      	ldr	r3, [r7, #32]
 8000b44:	3308      	adds	r3, #8
 8000b46:	623b      	str	r3, [r7, #32]
		for (int i = 0; i < data_len_word;) {
 8000b48:	887b      	ldrh	r3, [r7, #2]
 8000b4a:	6a3a      	ldr	r2, [r7, #32]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	dbe2      	blt.n	8000b16 <write_data_to_app_flash+0x7a>
		}

		//Check if the FLASH_FLAG_BSY
		FLASH_WaitForLastOperation(HAL_MAX_DELAY, FLASH_BANK_1);
 8000b50:	2101      	movs	r1, #1
 8000b52:	f04f 30ff 	mov.w	r0, #4294967295
 8000b56:	f001 f90b 	bl	8001d70 <FLASH_WaitForLastOperation>

		if (ret != HAL_OK) break;	// Last write to FLASH was not successful
 8000b5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d109      	bne.n	8000b76 <write_data_to_app_flash+0xda>

		// Lock FLASH again
//		ret = HAL_FLASH_Lock();
		ret = HAL_FLASHEx_Lock_Bank1();
 8000b62:	f001 fa8d 	bl	8002080 <HAL_FLASHEx_Lock_Bank1>
 8000b66:	4603      	mov	r3, r0
 8000b68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000b6c:	e004      	b.n	8000b78 <write_data_to_app_flash+0xdc>
		if (ret != HAL_OK)	break;
 8000b6e:	bf00      	nop
 8000b70:	e002      	b.n	8000b78 <write_data_to_app_flash+0xdc>
			if (ret != HAL_OK)	break;
 8000b72:	bf00      	nop
 8000b74:	e000      	b.n	8000b78 <write_data_to_app_flash+0xdc>
		if (ret != HAL_OK) break;	// Last write to FLASH was not successful
 8000b76:	bf00      	nop

	} while (false);

	if (ret != HAL_OK) return false;
 8000b78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <write_data_to_app_flash+0xe8>
 8000b80:	2300      	movs	r3, #0
 8000b82:	e000      	b.n	8000b86 <write_data_to_app_flash+0xea>
	else return true;
 8000b84:	2301      	movs	r3, #1
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3730      	adds	r7, #48	; 0x30
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	52002000 	.word	0x52002000
 8000b94:	17ee0000 	.word	0x17ee0000
 8000b98:	0800d2d4 	.word	0x0800d2d4
 8000b9c:	08040000 	.word	0x08040000
 8000ba0:	0800d2f0 	.word	0x0800d2f0

08000ba4 <fw_update_thread_entry>:


/* Thread entry function for firmware update thread */
void fw_update_thread_entry(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
	sd_init();
 8000baa:	f000 fb75 	bl	8001298 <sd_init>

	// Since we started the RTOS kernel, it means user wants to update if FW available in uSD

	updated_fw_size = 0;
 8000bae:	4b25      	ldr	r3, [pc, #148]	; (8000c44 <fw_update_thread_entry+0xa0>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]

	// Read file size from uSD --------------
	uSD_fw_file_size = uSD_FW_CHUNK_SIZE_WORD;	// temp for testing [Miller]
 8000bb4:	4b24      	ldr	r3, [pc, #144]	; (8000c48 <fw_update_thread_entry+0xa4>)
 8000bb6:	2230      	movs	r2, #48	; 0x30
 8000bb8:	601a      	str	r2, [r3, #0]

	// Write fw file to FLASH by chunks using buffer
	_Bool flash_write_success = true;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	73fb      	strb	r3, [r7, #15]
	while (updated_fw_size < uSD_fw_file_size) {
 8000bbe:	e02f      	b.n	8000c20 <fw_update_thread_entry+0x7c>
		// Zero out buffer
		for (int i = 0; i < uSD_FW_CHUNK_SIZE_WORD; i++)
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	e007      	b.n	8000bd6 <fw_update_thread_entry+0x32>
			fw_buff[i] = (uint32_t) 0;
 8000bc6:	4a21      	ldr	r2, [pc, #132]	; (8000c4c <fw_update_thread_entry+0xa8>)
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	2100      	movs	r1, #0
 8000bcc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int i = 0; i < uSD_FW_CHUNK_SIZE_WORD; i++)
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	2b2f      	cmp	r3, #47	; 0x2f
 8000bda:	ddf4      	ble.n	8000bc6 <fw_update_thread_entry+0x22>


		// Store chunk in buffer -----------------

		// Mock buffer data
		for (int i = 0; i < uSD_FW_CHUNK_SIZE_WORD; i++)
 8000bdc:	2300      	movs	r3, #0
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	e007      	b.n	8000bf2 <fw_update_thread_entry+0x4e>
			fw_buff[i] = (uint32_t) i;
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	4919      	ldr	r1, [pc, #100]	; (8000c4c <fw_update_thread_entry+0xa8>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (int i = 0; i < uSD_FW_CHUNK_SIZE_WORD; i++)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2b2f      	cmp	r3, #47	; 0x2f
 8000bf6:	ddf4      	ble.n	8000be2 <fw_update_thread_entry+0x3e>

		// Write buffer to internal FLASH
		if (write_data_to_app_flash(fw_buff, uSD_FW_CHUNK_SIZE_WORD, true)) {
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	2130      	movs	r1, #48	; 0x30
 8000bfc:	4813      	ldr	r0, [pc, #76]	; (8000c4c <fw_update_thread_entry+0xa8>)
 8000bfe:	f7ff ff4d 	bl	8000a9c <write_data_to_app_flash>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d005      	beq.n	8000c14 <fw_update_thread_entry+0x70>
			updated_fw_size += uSD_FW_CHUNK_SIZE_WORD;	// Increased updated fw count
 8000c08:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <fw_update_thread_entry+0xa0>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	3330      	adds	r3, #48	; 0x30
 8000c0e:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <fw_update_thread_entry+0xa0>)
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	e005      	b.n	8000c20 <fw_update_thread_entry+0x7c>
		}
		else {
			printf("ERROR\tCould not write new app chunk to FLASH\r\n");
 8000c14:	480e      	ldr	r0, [pc, #56]	; (8000c50 <fw_update_thread_entry+0xac>)
 8000c16:	f00b fe61 	bl	800c8dc <puts>
			flash_write_success = false;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	73fb      	strb	r3, [r7, #15]
			break;
 8000c1e:	e005      	b.n	8000c2c <fw_update_thread_entry+0x88>
	while (updated_fw_size < uSD_fw_file_size) {
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <fw_update_thread_entry+0xa0>)
 8000c22:	681a      	ldr	r2, [r3, #0]
 8000c24:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <fw_update_thread_entry+0xa4>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d3c9      	bcc.n	8000bc0 <fw_update_thread_entry+0x1c>
		}

	}

	// TODO: Report result [Miller]
	if (flash_write_success)
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d003      	beq.n	8000c3a <fw_update_thread_entry+0x96>
		printf("SUCCESS\tWrote test buffer to IFLASH\r\n");
 8000c32:	4808      	ldr	r0, [pc, #32]	; (8000c54 <fw_update_thread_entry+0xb0>)
 8000c34:	f00b fe52 	bl	800c8dc <puts>
 8000c38:	e002      	b.n	8000c40 <fw_update_thread_entry+0x9c>
	else
		printf("FAILURE\tErrors writing test buffer to IFLASH\r\n");
 8000c3a:	4807      	ldr	r0, [pc, #28]	; (8000c58 <fw_update_thread_entry+0xb4>)
 8000c3c:	f00b fe4e 	bl	800c8dc <puts>

	// Jump to app (old or new if updated) -----------------
	do {
 8000c40:	e7fe      	b.n	8000c40 <fw_update_thread_entry+0x9c>
 8000c42:	bf00      	nop
 8000c44:	24012108 	.word	0x24012108
 8000c48:	24012104 	.word	0x24012104
 8000c4c:	24012120 	.word	0x24012120
 8000c50:	0800d318 	.word	0x0800d318
 8000c54:	0800d348 	.word	0x0800d348
 8000c58:	0800d370 	.word	0x0800d370

08000c5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000c62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c66:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000c68:	bf00      	nop
 8000c6a:	4b3d      	ldr	r3, [pc, #244]	; (8000d60 <main+0x104>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d004      	beq.n	8000c80 <main+0x24>
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	1e5a      	subs	r2, r3, #1
 8000c7a:	60fa      	str	r2, [r7, #12]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	dcf4      	bgt.n	8000c6a <main+0xe>
  if ( timeout < 0 )
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	da01      	bge.n	8000c8a <main+0x2e>
  {
  Error_Handler();
 8000c86:	f000 faef 	bl	8001268 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8a:	f000 fe41 	bl	8001910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8e:	f000 f871 	bl	8000d74 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000c92:	4b33      	ldr	r3, [pc, #204]	; (8000d60 <main+0x104>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c98:	4a31      	ldr	r2, [pc, #196]	; (8000d60 <main+0x104>)
 8000c9a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca2:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <main+0x104>)
 8000ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000cb0:	2000      	movs	r0, #0
 8000cb2:	f001 fda3 	bl	80027fc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	2000      	movs	r0, #0
 8000cba:	f001 fdb9 	bl	8002830 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000cbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cc2:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000cc4:	bf00      	nop
 8000cc6:	4b26      	ldr	r3, [pc, #152]	; (8000d60 <main+0x104>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d104      	bne.n	8000cdc <main+0x80>
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	1e5a      	subs	r2, r3, #1
 8000cd6:	60fa      	str	r2, [r7, #12]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	dcf4      	bgt.n	8000cc6 <main+0x6a>
if ( timeout < 0 )
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	da01      	bge.n	8000ce6 <main+0x8a>
{
Error_Handler();
 8000ce2:	f000 fac1 	bl	8001268 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ce6:	f000 f937 	bl	8000f58 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000cea:	f000 f8e9 	bl	8000ec0 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 8000cee:	f000 f8c5 	bl	8000e7c <MX_SDMMC1_SD_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Bootloader v%d.%d (CM7)\r\n",bootloader_ver[0], bootloader_ver[1]);
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	481a      	ldr	r0, [pc, #104]	; (8000d64 <main+0x108>)
 8000cfa:	f00b fd69 	bl	800c7d0 <iprintf>

  /* Check for button press or timeout */
  volatile static uint8_t joystick_down_state;
  volatile static _Bool joystick_held_down = false;
  volatile uint32_t now = HAL_GetTick();
 8000cfe:	f000 fe57 	bl	80019b0 <HAL_GetTick>
 8000d02:	4603      	mov	r3, r0
 8000d04:	607b      	str	r3, [r7, #4]
  const uint32_t timeout_end = now + (TIMEOUT_TO_FLASH_APP *1000);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000d0c:	60bb      	str	r3, [r7, #8]

  do {
	  joystick_down_state = HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin);
 8000d0e:	2108      	movs	r1, #8
 8000d10:	4815      	ldr	r0, [pc, #84]	; (8000d68 <main+0x10c>)
 8000d12:	f001 fd27 	bl	8002764 <HAL_GPIO_ReadPin>
 8000d16:	4603      	mov	r3, r0
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <main+0x110>)
 8000d1c:	701a      	strb	r2, [r3, #0]
	  now = HAL_GetTick();
 8000d1e:	f000 fe47 	bl	80019b0 <HAL_GetTick>
 8000d22:	4603      	mov	r3, r0
 8000d24:	607b      	str	r3, [r7, #4]

	  /* Check for joystick down */
	  if ((joystick_down_state != GPIO_PIN_SET)) {
 8000d26:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <main+0x110>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b01      	cmp	r3, #1
 8000d2e:	d003      	beq.n	8000d38 <main+0xdc>
		  joystick_held_down = true;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <main+0x114>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	701a      	strb	r2, [r3, #0]
		  break;
 8000d36:	e003      	b.n	8000d40 <main+0xe4>
	  }
  } while(now < timeout_end);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d8e6      	bhi.n	8000d0e <main+0xb2>

  if (!joystick_held_down) {
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <main+0x114>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	f083 0301 	eor.w	r3, r3, #1
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <main+0xf8>
	  // No user indication to flash new app
	  goto_application();
 8000d50:	f000 f9ce 	bl	80010f0 <goto_application>
  }

  // Start RTOS and flash app if available
  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000d54:	f7ff fe9b 	bl	8000a8e <MX_ThreadX_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  /* Should never reach here */
	  Error_Handler();
 8000d58:	f000 fa86 	bl	8001268 <Error_Handler>
 8000d5c:	e7fc      	b.n	8000d58 <main+0xfc>
 8000d5e:	bf00      	nop
 8000d60:	58024400 	.word	0x58024400
 8000d64:	0800d3a0 	.word	0x0800d3a0
 8000d68:	58022800 	.word	0x58022800
 8000d6c:	240122f0 	.word	0x240122f0
 8000d70:	240122f1 	.word	0x240122f1

08000d74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b09c      	sub	sp, #112	; 0x70
 8000d78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7e:	224c      	movs	r2, #76	; 0x4c
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f00b fa2e 	bl	800c1e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	2220      	movs	r2, #32
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f00b fa28 	bl	800c1e4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d94:	2004      	movs	r0, #4
 8000d96:	f001 fd5f 	bl	8002858 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	603b      	str	r3, [r7, #0]
 8000d9e:	4b35      	ldr	r3, [pc, #212]	; (8000e74 <SystemClock_Config+0x100>)
 8000da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000da2:	4a34      	ldr	r2, [pc, #208]	; (8000e74 <SystemClock_Config+0x100>)
 8000da4:	f023 0301 	bic.w	r3, r3, #1
 8000da8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000daa:	4b32      	ldr	r3, [pc, #200]	; (8000e74 <SystemClock_Config+0x100>)
 8000dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	4b30      	ldr	r3, [pc, #192]	; (8000e78 <SystemClock_Config+0x104>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a2f      	ldr	r2, [pc, #188]	; (8000e78 <SystemClock_Config+0x104>)
 8000dba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	4b2d      	ldr	r3, [pc, #180]	; (8000e78 <SystemClock_Config+0x104>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dc8:	603b      	str	r3, [r7, #0]
 8000dca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dcc:	bf00      	nop
 8000dce:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <SystemClock_Config+0x104>)
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dda:	d1f8      	bne.n	8000dce <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000de0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000de6:	2301      	movs	r3, #1
 8000de8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dea:	2340      	movs	r3, #64	; 0x40
 8000dec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dee:	2302      	movs	r3, #2
 8000df0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df2:	2302      	movs	r3, #2
 8000df4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000df6:	2305      	movs	r3, #5
 8000df8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000dfa:	2330      	movs	r3, #48	; 0x30
 8000dfc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000e02:	2305      	movs	r3, #5
 8000e04:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e06:	2302      	movs	r3, #2
 8000e08:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000e0a:	2308      	movs	r3, #8
 8000e0c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f001 fea0 	bl	8002b60 <HAL_RCC_OscConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000e26:	f000 fa1f 	bl	8001268 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2a:	233f      	movs	r3, #63	; 0x3f
 8000e2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000e42:	2300      	movs	r3, #0
 8000e44:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f002 fae0 	bl	8003414 <HAL_RCC_ClockConfig>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000e5a:	f000 fa05 	bl	8001268 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000e5e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e62:	2100      	movs	r1, #0
 8000e64:	2000      	movs	r0, #0
 8000e66:	f002 fc8b 	bl	8003780 <HAL_RCC_MCOConfig>
}
 8000e6a:	bf00      	nop
 8000e6c:	3770      	adds	r7, #112	; 0x70
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	58000400 	.word	0x58000400
 8000e78:	58024800 	.word	0x58024800

08000e7c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000e80:	4b0d      	ldr	r3, [pc, #52]	; (8000eb8 <MX_SDMMC1_SD_Init+0x3c>)
 8000e82:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <MX_SDMMC1_SD_Init+0x40>)
 8000e84:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000e86:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_SDMMC1_SD_Init+0x3c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <MX_SDMMC1_SD_Init+0x3c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_SDMMC1_SD_Init+0x3c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <MX_SDMMC1_SD_Init+0x3c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_SDMMC1_SD_Init+0x3c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000ea4:	4804      	ldr	r0, [pc, #16]	; (8000eb8 <MX_SDMMC1_SD_Init+0x3c>)
 8000ea6:	f005 fc2b 	bl	8006700 <HAL_SD_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_SDMMC1_SD_Init+0x38>
  {
    Error_Handler();
 8000eb0:	f000 f9da 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	240121e0 	.word	0x240121e0
 8000ebc:	52007000 	.word	0x52007000

08000ec0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ec4:	4b22      	ldr	r3, [pc, #136]	; (8000f50 <MX_USART1_UART_Init+0x90>)
 8000ec6:	4a23      	ldr	r2, [pc, #140]	; (8000f54 <MX_USART1_UART_Init+0x94>)
 8000ec8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eca:	4b21      	ldr	r3, [pc, #132]	; (8000f50 <MX_USART1_UART_Init+0x90>)
 8000ecc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ed0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed2:	4b1f      	ldr	r3, [pc, #124]	; (8000f50 <MX_USART1_UART_Init+0x90>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ed8:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <MX_USART1_UART_Init+0x90>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ede:	4b1c      	ldr	r3, [pc, #112]	; (8000f50 <MX_USART1_UART_Init+0x90>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_USART1_UART_Init+0x90>)
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eea:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <MX_USART1_UART_Init+0x90>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <MX_USART1_UART_Init+0x90>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ef6:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <MX_USART1_UART_Init+0x90>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <MX_USART1_UART_Init+0x90>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <MX_USART1_UART_Init+0x90>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f08:	4811      	ldr	r0, [pc, #68]	; (8000f50 <MX_USART1_UART_Init+0x90>)
 8000f0a:	f007 fa4f 	bl	80083ac <HAL_UART_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f14:	f000 f9a8 	bl	8001268 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f18:	2100      	movs	r1, #0
 8000f1a:	480d      	ldr	r0, [pc, #52]	; (8000f50 <MX_USART1_UART_Init+0x90>)
 8000f1c:	f008 fb1f 	bl	800955e <HAL_UARTEx_SetTxFifoThreshold>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f26:	f000 f99f 	bl	8001268 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4808      	ldr	r0, [pc, #32]	; (8000f50 <MX_USART1_UART_Init+0x90>)
 8000f2e:	f008 fb54 	bl	80095da <HAL_UARTEx_SetRxFifoThreshold>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f38:	f000 f996 	bl	8001268 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <MX_USART1_UART_Init+0x90>)
 8000f3e:	f008 fad5 	bl	80094ec <HAL_UARTEx_DisableFifoMode>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f48:	f000 f98e 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	2401225c 	.word	0x2401225c
 8000f54:	40011000 	.word	0x40011000

08000f58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b08c      	sub	sp, #48	; 0x30
 8000f5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5e:	f107 031c 	add.w	r3, r7, #28
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6e:	4b53      	ldr	r3, [pc, #332]	; (80010bc <MX_GPIO_Init+0x164>)
 8000f70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f74:	4a51      	ldr	r2, [pc, #324]	; (80010bc <MX_GPIO_Init+0x164>)
 8000f76:	f043 0304 	orr.w	r3, r3, #4
 8000f7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f7e:	4b4f      	ldr	r3, [pc, #316]	; (80010bc <MX_GPIO_Init+0x164>)
 8000f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f84:	f003 0304 	and.w	r3, r3, #4
 8000f88:	61bb      	str	r3, [r7, #24]
 8000f8a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000f8c:	4b4b      	ldr	r3, [pc, #300]	; (80010bc <MX_GPIO_Init+0x164>)
 8000f8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f92:	4a4a      	ldr	r2, [pc, #296]	; (80010bc <MX_GPIO_Init+0x164>)
 8000f94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f9c:	4b47      	ldr	r3, [pc, #284]	; (80010bc <MX_GPIO_Init+0x164>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa6:	617b      	str	r3, [r7, #20]
 8000fa8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000faa:	4b44      	ldr	r3, [pc, #272]	; (80010bc <MX_GPIO_Init+0x164>)
 8000fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb0:	4a42      	ldr	r2, [pc, #264]	; (80010bc <MX_GPIO_Init+0x164>)
 8000fb2:	f043 0308 	orr.w	r3, r3, #8
 8000fb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fba:	4b40      	ldr	r3, [pc, #256]	; (80010bc <MX_GPIO_Init+0x164>)
 8000fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc0:	f003 0308 	and.w	r3, r3, #8
 8000fc4:	613b      	str	r3, [r7, #16]
 8000fc6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	4b3c      	ldr	r3, [pc, #240]	; (80010bc <MX_GPIO_Init+0x164>)
 8000fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fce:	4a3b      	ldr	r2, [pc, #236]	; (80010bc <MX_GPIO_Init+0x164>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fd8:	4b38      	ldr	r3, [pc, #224]	; (80010bc <MX_GPIO_Init+0x164>)
 8000fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000fe6:	4b35      	ldr	r3, [pc, #212]	; (80010bc <MX_GPIO_Init+0x164>)
 8000fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fec:	4a33      	ldr	r2, [pc, #204]	; (80010bc <MX_GPIO_Init+0x164>)
 8000fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ff6:	4b31      	ldr	r3, [pc, #196]	; (80010bc <MX_GPIO_Init+0x164>)
 8000ff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001000:	60bb      	str	r3, [r7, #8]
 8001002:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001004:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <MX_GPIO_Init+0x164>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800100a:	4a2c      	ldr	r2, [pc, #176]	; (80010bc <MX_GPIO_Init+0x164>)
 800100c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001010:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001014:	4b29      	ldr	r3, [pc, #164]	; (80010bc <MX_GPIO_Init+0x164>)
 8001016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800101a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8001022:	2200      	movs	r2, #0
 8001024:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001028:	4825      	ldr	r0, [pc, #148]	; (80010c0 <MX_GPIO_Init+0x168>)
 800102a:	f001 fbb3 	bl	8002794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin;
 800102e:	2308      	movs	r3, #8
 8001030:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001032:	2300      	movs	r3, #0
 8001034:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001036:	2301      	movs	r3, #1
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JOY_DOWN_GPIO_Port, &GPIO_InitStruct);
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4619      	mov	r1, r3
 8001040:	4820      	ldr	r0, [pc, #128]	; (80010c4 <MX_GPIO_Init+0x16c>)
 8001042:	f001 f8d5 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001046:	f44f 7380 	mov.w	r3, #256	; 0x100
 800104a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800104c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001050:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001052:	2301      	movs	r3, #1
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	4619      	mov	r1, r3
 800105c:	4818      	ldr	r0, [pc, #96]	; (80010c0 <MX_GPIO_Init+0x168>)
 800105e:	f001 f8c7 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8001062:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001066:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001074:	2300      	movs	r3, #0
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 031c 	add.w	r3, r7, #28
 800107c:	4619      	mov	r1, r3
 800107e:	4812      	ldr	r0, [pc, #72]	; (80010c8 <MX_GPIO_Init+0x170>)
 8001080:	f001 f8b6 	bl	80021f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8001084:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001088:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108a:	2301      	movs	r3, #1
 800108c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800108e:	2302      	movs	r3, #2
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4619      	mov	r1, r3
 800109c:	4808      	ldr	r0, [pc, #32]	; (80010c0 <MX_GPIO_Init+0x168>)
 800109e:	f001 f8a7 	bl	80021f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 14, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	210e      	movs	r1, #14
 80010a6:	2017      	movs	r0, #23
 80010a8:	f000 fd9a 	bl	8001be0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010ac:	2017      	movs	r0, #23
 80010ae:	f000 fdb1 	bl	8001c14 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010b2:	bf00      	nop
 80010b4:	3730      	adds	r7, #48	; 0x30
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	58024400 	.word	0x58024400
 80010c0:	58022000 	.word	0x58022000
 80010c4:	58022800 	.word	0x58022800
 80010c8:	58020000 	.word	0x58020000

080010cc <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80010d4:	1d39      	adds	r1, r7, #4
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295
 80010da:	2201      	movs	r2, #1
 80010dc:	4803      	ldr	r0, [pc, #12]	; (80010ec <__io_putchar+0x20>)
 80010de:	f007 f9f4 	bl	80084ca <HAL_UART_Transmit>

  return ch;
 80010e2:	687b      	ldr	r3, [r7, #4]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	2401225c 	.word	0x2401225c

080010f0 <goto_application>:

static void goto_application()
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
	printf("Jumping to application\r\n");
 80010f6:	484a      	ldr	r0, [pc, #296]	; (8001220 <goto_application+0x130>)
 80010f8:	f00b fbf0 	bl	800c8dc <puts>
	void (*app_reset_hanlder) (void) = (void*) (*(volatile uint32_t *) (APP_FLASH_ADDR + 4U));
 80010fc:	4b49      	ldr	r3, [pc, #292]	; (8001224 <goto_application+0x134>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	60fb      	str	r3, [r7, #12]

	/* Deinitialize peripherals before jump */
	HAL_SD_DeInit(&hsd1);
 8001102:	4849      	ldr	r0, [pc, #292]	; (8001228 <goto_application+0x138>)
 8001104:	f005 fc1c 	bl	8006940 <HAL_SD_DeInit>
	HAL_UART_DeInit(&huart1);
 8001108:	4848      	ldr	r0, [pc, #288]	; (800122c <goto_application+0x13c>)
 800110a:	f007 f99f 	bl	800844c <HAL_UART_DeInit>

	/* TODO: Can replace by HAL GPIO DeInit function? */
	__HAL_RCC_GPIOF_CLK_DISABLE();
 800110e:	4b48      	ldr	r3, [pc, #288]	; (8001230 <goto_application+0x140>)
 8001110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001114:	4a46      	ldr	r2, [pc, #280]	; (8001230 <goto_application+0x140>)
 8001116:	f023 0320 	bic.w	r3, r3, #32
 800111a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_GPIOH_CLK_DISABLE();
 800111e:	4b44      	ldr	r3, [pc, #272]	; (8001230 <goto_application+0x140>)
 8001120:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001124:	4a42      	ldr	r2, [pc, #264]	; (8001230 <goto_application+0x140>)
 8001126:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800112a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_GPIOI_CLK_DISABLE();
 800112e:	4b40      	ldr	r3, [pc, #256]	; (8001230 <goto_application+0x140>)
 8001130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001134:	4a3e      	ldr	r2, [pc, #248]	; (8001230 <goto_application+0x140>)
 8001136:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800113a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_GPIOA_CLK_DISABLE();
 800113e:	4b3c      	ldr	r3, [pc, #240]	; (8001230 <goto_application+0x140>)
 8001140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001144:	4a3a      	ldr	r2, [pc, #232]	; (8001230 <goto_application+0x140>)
 8001146:	f023 0301 	bic.w	r3, r3, #1
 800114a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_GPIOE_CLK_DISABLE();
 800114e:	4b38      	ldr	r3, [pc, #224]	; (8001230 <goto_application+0x140>)
 8001150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001154:	4a36      	ldr	r2, [pc, #216]	; (8001230 <goto_application+0x140>)
 8001156:	f023 0310 	bic.w	r3, r3, #16
 800115a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_GPIOC_CLK_DISABLE();
 800115e:	4b34      	ldr	r3, [pc, #208]	; (8001230 <goto_application+0x140>)
 8001160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001164:	4a32      	ldr	r2, [pc, #200]	; (8001230 <goto_application+0x140>)
 8001166:	f023 0304 	bic.w	r3, r3, #4
 800116a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_GPIOG_CLK_DISABLE();
 800116e:	4b30      	ldr	r3, [pc, #192]	; (8001230 <goto_application+0x140>)
 8001170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001174:	4a2e      	ldr	r2, [pc, #184]	; (8001230 <goto_application+0x140>)
 8001176:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800117a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_GPIOB_CLK_DISABLE();
 800117e:	4b2c      	ldr	r3, [pc, #176]	; (8001230 <goto_application+0x140>)
 8001180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001184:	4a2a      	ldr	r2, [pc, #168]	; (8001230 <goto_application+0x140>)
 8001186:	f023 0302 	bic.w	r3, r3, #2
 800118a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_HSEM_CLK_DISABLE();
 800118e:	4b28      	ldr	r3, [pc, #160]	; (8001230 <goto_application+0x140>)
 8001190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001194:	4a26      	ldr	r2, [pc, #152]	; (8001230 <goto_application+0x140>)
 8001196:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800119a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	HAL_RCC_DeInit();
 800119e:	f001 fbb5 	bl	800290c <HAL_RCC_DeInit>
	HAL_TIM_Base_DeInit(&htim6);
 80011a2:	4824      	ldr	r0, [pc, #144]	; (8001234 <goto_application+0x144>)
 80011a4:	f006 fe19 	bl	8007dda <HAL_TIM_Base_DeInit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	bf00      	nop
	/* Stop all interrupts */
	__disable_irq();

	/* TODO: Why 8 registers? */
	/* Disable IRQs */
	for (int i = 0; i < 8; i++) {
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]
 80011b0:	e009      	b.n	80011c6 <goto_application+0xd6>
		NVIC->ICER[i] = 0xFFFFFFFF;
 80011b2:	4a21      	ldr	r2, [pc, #132]	; (8001238 <goto_application+0x148>)
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	3320      	adds	r3, #32
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295
 80011bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 8; i++) {
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	3301      	adds	r3, #1
 80011c4:	617b      	str	r3, [r7, #20]
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	2b07      	cmp	r3, #7
 80011ca:	ddf2      	ble.n	80011b2 <goto_application+0xc2>
	}

	/* Clear pending IRQs */
	for (int i = 0; i < 8; i++) {
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]
 80011d0:	e009      	b.n	80011e6 <goto_application+0xf6>
		NVIC->ICPR[i] = 0xFFFFFFFF;
 80011d2:	4a19      	ldr	r2, [pc, #100]	; (8001238 <goto_application+0x148>)
 80011d4:	693b      	ldr	r3, [r7, #16]
 80011d6:	3360      	adds	r3, #96	; 0x60
 80011d8:	f04f 31ff 	mov.w	r1, #4294967295
 80011dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 8; i++) {
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	3301      	adds	r3, #1
 80011e4:	613b      	str	r3, [r7, #16]
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	2b07      	cmp	r3, #7
 80011ea:	ddf2      	ble.n	80011d2 <goto_application+0xe2>
  __ASM volatile ("cpsie i" : : : "memory");
 80011ec:	b662      	cpsie	i
}
 80011ee:	bf00      	nop

	/* Reenable all interrupts */
	__enable_irq();

	/* Disable Systick timer interrupt*/
	SysTick->CTRL = 0;
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <goto_application+0x14c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f383 8814 	msr	CONTROL, r3
}
 8001200:	bf00      	nop
	/* TODO: Why is CR needed to be set to 0? */
	/* Change from PSP to MSP */
	__set_CONTROL(0);

	/* Set main stack pointer of application (also done in linkerscript by CubeMX) */
	__set_MSP((*(volatile uint32_t *) APP_FLASH_ADDR));
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <goto_application+0x150>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	f383 8808 	msr	MSP, r3
}
 800120e:	bf00      	nop

	/* Call app reset handler */
	app_reset_hanlder();
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4798      	blx	r3

	/* Should never reach here */
	Error_Handler();
 8001214:	f000 f828 	bl	8001268 <Error_Handler>
}
 8001218:	bf00      	nop
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	0800d3c4 	.word	0x0800d3c4
 8001224:	08040004 	.word	0x08040004
 8001228:	240121e0 	.word	0x240121e0
 800122c:	2401225c 	.word	0x2401225c
 8001230:	58024400 	.word	0x58024400
 8001234:	24012310 	.word	0x24012310
 8001238:	e000e100 	.word	0xe000e100
 800123c:	e000e010 	.word	0xe000e010
 8001240:	08040000 	.word	0x08040000

08001244 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a04      	ldr	r2, [pc, #16]	; (8001264 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d101      	bne.n	800125a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001256:	f000 fb97 	bl	8001988 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40001000 	.word	0x40001000

08001268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800126c:	b672      	cpsid	i
}
 800126e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001270:	e7fe      	b.n	8001270 <Error_Handler+0x8>
	...

08001274 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == SD_DETECT_Pin) {
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001284:	d102      	bne.n	800128c <HAL_GPIO_EXTI_Callback+0x18>
	  tx_semaphore_put(&sd_detect_semaphore);
 8001286:	4803      	ldr	r0, [pc, #12]	; (8001294 <HAL_GPIO_EXTI_Callback+0x20>)
 8001288:	f00a fe42 	bl	800bf10 <_txe_semaphore_put>
  }
}
 800128c:	bf00      	nop
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	240122f4 	.word	0x240122f4

08001298 <sd_init>:

void sd_init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	if (tx_semaphore_create(&sd_detect_semaphore, "sd detect semaphore", 0) != TX_SUCCESS) {
 800129c:	231c      	movs	r3, #28
 800129e:	2200      	movs	r2, #0
 80012a0:	490d      	ldr	r1, [pc, #52]	; (80012d8 <sd_init+0x40>)
 80012a2:	480e      	ldr	r0, [pc, #56]	; (80012dc <sd_init+0x44>)
 80012a4:	f00a fd9e 	bl	800bde4 <_txe_semaphore_create>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d005      	beq.n	80012ba <sd_init+0x22>
		assert(0);	// TODO: Handle error
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <sd_init+0x48>)
 80012b0:	4a0c      	ldr	r2, [pc, #48]	; (80012e4 <sd_init+0x4c>)
 80012b2:	2149      	movs	r1, #73	; 0x49
 80012b4:	480c      	ldr	r0, [pc, #48]	; (80012e8 <sd_init+0x50>)
 80012b6:	f00a ff3b 	bl	800c130 <__assert_func>
	}

	/* Check initial status of card */
	if(SD_IsDetected(FX_STM32_SD_INSTANCE) == SD_PRESENT) {
 80012ba:	2000      	movs	r0, #0
 80012bc:	f000 f818 	bl	80012f0 <SD_IsDetected>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d105      	bne.n	80012d2 <sd_init+0x3a>
		last_status = CARD_STATUS_CONNECTED;
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <sd_init+0x54>)
 80012c8:	224d      	movs	r2, #77	; 0x4d
 80012ca:	601a      	str	r2, [r3, #0]
		/* SD card is already inserted, place the info into the queue */
		tx_semaphore_put(&sd_detect_semaphore);
 80012cc:	4803      	ldr	r0, [pc, #12]	; (80012dc <sd_init+0x44>)
 80012ce:	f00a fe1f 	bl	800bf10 <_txe_semaphore_put>
	 }
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	0800d3dc 	.word	0x0800d3dc
 80012dc:	240122f4 	.word	0x240122f4
 80012e0:	0800d3f0 	.word	0x0800d3f0
 80012e4:	0800d4d8 	.word	0x0800d4d8
 80012e8:	0800d3f4 	.word	0x0800d3f4
 80012ec:	24000008 	.word	0x24000008

080012f0 <SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param Instance  SD Instance
 * @retval Returns if SD is detected or not
 */
int32_t SD_IsDetected(uint32_t Instance)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  int32_t ret;
  if(Instance >= 1) {
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d002      	beq.n	8001304 <SD_IsDetected+0x14>
    ret = HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	60fb      	str	r3, [r7, #12]
 8001302:	e00c      	b.n	800131e <SD_IsDetected+0x2e>
  }
  else {
    /* Check SD card detect pin */
    if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_Port, SD_DETECT_Pin) == GPIO_PIN_SET) {
 8001304:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001308:	4807      	ldr	r0, [pc, #28]	; (8001328 <SD_IsDetected+0x38>)
 800130a:	f001 fa2b 	bl	8002764 <HAL_GPIO_ReadPin>
 800130e:	4603      	mov	r3, r0
 8001310:	2b01      	cmp	r3, #1
 8001312:	d102      	bne.n	800131a <SD_IsDetected+0x2a>
      ret = SD_NOT_PRESENT;
 8001314:	2300      	movs	r3, #0
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	e001      	b.n	800131e <SD_IsDetected+0x2e>
    }
    else {
      ret = SD_PRESENT;
 800131a:	2301      	movs	r3, #1
 800131c:	60fb      	str	r3, [r7, #12]
    }
  }

  return(int32_t)ret;
 800131e:	68fb      	ldr	r3, [r7, #12]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	58022000 	.word	0x58022000

0800132c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_MspInit+0x30>)
 8001334:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001338:	4a08      	ldr	r2, [pc, #32]	; (800135c <HAL_MspInit+0x30>)
 800133a:	f043 0302 	orr.w	r3, r3, #2
 800133e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_MspInit+0x30>)
 8001344:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	58024400 	.word	0x58024400

08001360 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b0be      	sub	sp, #248	; 0xf8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001378:	f107 0318 	add.w	r3, r7, #24
 800137c:	22c8      	movs	r2, #200	; 0xc8
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f00a ff2f 	bl	800c1e4 <memset>
  if(hsd->Instance==SDMMC1)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a3c      	ldr	r2, [pc, #240]	; (800147c <HAL_SD_MspInit+0x11c>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d171      	bne.n	8001474 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8001390:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800139c:	2300      	movs	r3, #0
 800139e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013a0:	f107 0318 	add.w	r3, r7, #24
 80013a4:	4618      	mov	r0, r3
 80013a6:	f002 fc6d 	bl	8003c84 <HAL_RCCEx_PeriphCLKConfig>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 80013b0:	f7ff ff5a 	bl	8001268 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80013b4:	4b32      	ldr	r3, [pc, #200]	; (8001480 <HAL_SD_MspInit+0x120>)
 80013b6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80013ba:	4a31      	ldr	r2, [pc, #196]	; (8001480 <HAL_SD_MspInit+0x120>)
 80013bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013c0:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80013c4:	4b2e      	ldr	r3, [pc, #184]	; (8001480 <HAL_SD_MspInit+0x120>)
 80013c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80013ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d2:	4b2b      	ldr	r3, [pc, #172]	; (8001480 <HAL_SD_MspInit+0x120>)
 80013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013d8:	4a29      	ldr	r2, [pc, #164]	; (8001480 <HAL_SD_MspInit+0x120>)
 80013da:	f043 0304 	orr.w	r3, r3, #4
 80013de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e2:	4b27      	ldr	r3, [pc, #156]	; (8001480 <HAL_SD_MspInit+0x120>)
 80013e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f0:	4b23      	ldr	r3, [pc, #140]	; (8001480 <HAL_SD_MspInit+0x120>)
 80013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013f6:	4a22      	ldr	r2, [pc, #136]	; (8001480 <HAL_SD_MspInit+0x120>)
 80013f8:	f043 0308 	orr.w	r3, r3, #8
 80013fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001400:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <HAL_SD_MspInit+0x120>)
 8001402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin;
 800140e:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8001412:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001416:	2302      	movs	r3, #2
 8001418:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141c:	2300      	movs	r3, #0
 800141e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001422:	2303      	movs	r3, #3
 8001424:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001428:	230c      	movs	r3, #12
 800142a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001432:	4619      	mov	r1, r3
 8001434:	4813      	ldr	r0, [pc, #76]	; (8001484 <HAL_SD_MspInit+0x124>)
 8001436:	f000 fedb 	bl	80021f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 800143a:	2304      	movs	r3, #4
 800143c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144c:	2303      	movs	r3, #3
 800144e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001452:	230c      	movs	r3, #12
 8001454:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001458:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800145c:	4619      	mov	r1, r3
 800145e:	480a      	ldr	r0, [pc, #40]	; (8001488 <HAL_SD_MspInit+0x128>)
 8001460:	f000 fec6 	bl	80021f0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001464:	2200      	movs	r2, #0
 8001466:	2100      	movs	r1, #0
 8001468:	2031      	movs	r0, #49	; 0x31
 800146a:	f000 fbb9 	bl	8001be0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800146e:	2031      	movs	r0, #49	; 0x31
 8001470:	f000 fbd0 	bl	8001c14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001474:	bf00      	nop
 8001476:	37f8      	adds	r7, #248	; 0xf8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	52007000 	.word	0x52007000
 8001480:	58024400 	.word	0x58024400
 8001484:	58020800 	.word	0x58020800
 8001488:	58020c00 	.word	0x58020c00

0800148c <HAL_SD_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspDeInit(SD_HandleTypeDef* hsd)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if(hsd->Instance==SDMMC1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <HAL_SD_MspDeInit+0x44>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d113      	bne.n	80014c6 <HAL_SD_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN SDMMC1_MspDeInit 0 */

  /* USER CODE END SDMMC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <HAL_SD_MspDeInit+0x48>)
 80014a0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80014a4:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <HAL_SD_MspDeInit+0x48>)
 80014a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014aa:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    HAL_GPIO_DeInit(GPIOC, SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin);
 80014ae:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 80014b2:	4809      	ldr	r0, [pc, #36]	; (80014d8 <HAL_SD_MspDeInit+0x4c>)
 80014b4:	f001 f84c 	bl	8002550 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SDIO1_CMD_GPIO_Port, SDIO1_CMD_Pin);
 80014b8:	2104      	movs	r1, #4
 80014ba:	4808      	ldr	r0, [pc, #32]	; (80014dc <HAL_SD_MspDeInit+0x50>)
 80014bc:	f001 f848 	bl	8002550 <HAL_GPIO_DeInit>

    /* SDMMC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 80014c0:	2031      	movs	r0, #49	; 0x31
 80014c2:	f000 fbb5 	bl	8001c30 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SDMMC1_MspDeInit 1 */

  /* USER CODE END SDMMC1_MspDeInit 1 */
  }

}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	52007000 	.word	0x52007000
 80014d4:	58024400 	.word	0x58024400
 80014d8:	58020800 	.word	0x58020800
 80014dc:	58020c00 	.word	0x58020c00

080014e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b0bc      	sub	sp, #240	; 0xf0
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014f8:	f107 0310 	add.w	r3, r7, #16
 80014fc:	22c8      	movs	r2, #200	; 0xc8
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f00a fe6f 	bl	800c1e4 <memset>
  if(huart->Instance==USART1)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a27      	ldr	r2, [pc, #156]	; (80015a8 <HAL_UART_MspInit+0xc8>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d146      	bne.n	800159e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001510:	f04f 0201 	mov.w	r2, #1
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800151c:	2300      	movs	r3, #0
 800151e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001522:	f107 0310 	add.w	r3, r7, #16
 8001526:	4618      	mov	r0, r3
 8001528:	f002 fbac 	bl	8003c84 <HAL_RCCEx_PeriphCLKConfig>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001532:	f7ff fe99 	bl	8001268 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001536:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <HAL_UART_MspInit+0xcc>)
 8001538:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800153c:	4a1b      	ldr	r2, [pc, #108]	; (80015ac <HAL_UART_MspInit+0xcc>)
 800153e:	f043 0310 	orr.w	r3, r3, #16
 8001542:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <HAL_UART_MspInit+0xcc>)
 8001548:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800154c:	f003 0310 	and.w	r3, r3, #16
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001554:	4b15      	ldr	r3, [pc, #84]	; (80015ac <HAL_UART_MspInit+0xcc>)
 8001556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155a:	4a14      	ldr	r2, [pc, #80]	; (80015ac <HAL_UART_MspInit+0xcc>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <HAL_UART_MspInit+0xcc>)
 8001566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8001572:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001576:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800158c:	2307      	movs	r3, #7
 800158e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001592:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001596:	4619      	mov	r1, r3
 8001598:	4805      	ldr	r0, [pc, #20]	; (80015b0 <HAL_UART_MspInit+0xd0>)
 800159a:	f000 fe29 	bl	80021f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800159e:	bf00      	nop
 80015a0:	37f0      	adds	r7, #240	; 0xf0
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40011000 	.word	0x40011000
 80015ac:	58024400 	.word	0x58024400
 80015b0:	58020000 	.word	0x58020000

080015b4 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a09      	ldr	r2, [pc, #36]	; (80015e8 <HAL_UART_MspDeInit+0x34>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d10c      	bne.n	80015e0 <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_UART_MspDeInit+0x38>)
 80015c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015cc:	4a07      	ldr	r2, [pc, #28]	; (80015ec <HAL_UART_MspDeInit+0x38>)
 80015ce:	f023 0310 	bic.w	r3, r3, #16
 80015d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, STLINK_TX_Pin|STLINK_RX_Pin);
 80015d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <HAL_UART_MspDeInit+0x3c>)
 80015dc:	f000 ffb8 	bl	8002550 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 80015e0:	bf00      	nop
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	40011000 	.word	0x40011000
 80015ec:	58024400 	.word	0x58024400
 80015f0:	58020000 	.word	0x58020000

080015f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b090      	sub	sp, #64	; 0x40
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b0f      	cmp	r3, #15
 8001600:	d827      	bhi.n	8001652 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8001602:	2200      	movs	r2, #0
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	2036      	movs	r0, #54	; 0x36
 8001608:	f000 faea 	bl	8001be0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800160c:	2036      	movs	r0, #54	; 0x36
 800160e:	f000 fb01 	bl	8001c14 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001612:	4a29      	ldr	r2, [pc, #164]	; (80016b8 <HAL_InitTick+0xc4>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001618:	4b28      	ldr	r3, [pc, #160]	; (80016bc <HAL_InitTick+0xc8>)
 800161a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800161e:	4a27      	ldr	r2, [pc, #156]	; (80016bc <HAL_InitTick+0xc8>)
 8001620:	f043 0310 	orr.w	r3, r3, #16
 8001624:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001628:	4b24      	ldr	r3, [pc, #144]	; (80016bc <HAL_InitTick+0xc8>)
 800162a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800162e:	f003 0310 	and.w	r3, r3, #16
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001636:	f107 0210 	add.w	r2, r7, #16
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f002 fadd 	bl	8003c00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001648:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800164a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800164c:	2b00      	cmp	r3, #0
 800164e:	d106      	bne.n	800165e <HAL_InitTick+0x6a>
 8001650:	e001      	b.n	8001656 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e02b      	b.n	80016ae <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001656:	f002 faa7 	bl	8003ba8 <HAL_RCC_GetPCLK1Freq>
 800165a:	63f8      	str	r0, [r7, #60]	; 0x3c
 800165c:	e004      	b.n	8001668 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800165e:	f002 faa3 	bl	8003ba8 <HAL_RCC_GetPCLK1Freq>
 8001662:	4603      	mov	r3, r0
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800166a:	4a15      	ldr	r2, [pc, #84]	; (80016c0 <HAL_InitTick+0xcc>)
 800166c:	fba2 2303 	umull	r2, r3, r2, r3
 8001670:	0c9b      	lsrs	r3, r3, #18
 8001672:	3b01      	subs	r3, #1
 8001674:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <HAL_InitTick+0xd0>)
 8001678:	4a13      	ldr	r2, [pc, #76]	; (80016c8 <HAL_InitTick+0xd4>)
 800167a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <HAL_InitTick+0xd0>)
 800167e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001682:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001684:	4a0f      	ldr	r2, [pc, #60]	; (80016c4 <HAL_InitTick+0xd0>)
 8001686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001688:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <HAL_InitTick+0xd0>)
 800168c:	2200      	movs	r2, #0
 800168e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <HAL_InitTick+0xd0>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001696:	480b      	ldr	r0, [pc, #44]	; (80016c4 <HAL_InitTick+0xd0>)
 8001698:	f006 fb48 	bl	8007d2c <HAL_TIM_Base_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d104      	bne.n	80016ac <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80016a2:	4808      	ldr	r0, [pc, #32]	; (80016c4 <HAL_InitTick+0xd0>)
 80016a4:	f006 fc0a 	bl	8007ebc <HAL_TIM_Base_Start_IT>
 80016a8:	4603      	mov	r3, r0
 80016aa:	e000      	b.n	80016ae <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3740      	adds	r7, #64	; 0x40
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	2400000c 	.word	0x2400000c
 80016bc:	58024400 	.word	0x58024400
 80016c0:	431bde83 	.word	0x431bde83
 80016c4:	24012310 	.word	0x24012310
 80016c8:	40001000 	.word	0x40001000

080016cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <NMI_Handler+0x4>

080016d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d6:	e7fe      	b.n	80016d6 <HardFault_Handler+0x4>

080016d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <MemManage_Handler+0x4>

080016de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e2:	e7fe      	b.n	80016e2 <BusFault_Handler+0x4>

080016e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <UsageFault_Handler+0x4>

080016ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ee:	bf00      	nop
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(uSD_Detect_Pin);
 80016fc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001700:	f001 f861 	bl	80027c6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}

08001708 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <SDMMC1_IRQHandler+0x10>)
 800170e:	f005 f937 	bl	8006980 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	240121e0 	.word	0x240121e0

0800171c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <TIM6_DAC_IRQHandler+0x10>)
 8001722:	f006 fc43 	bl	8007fac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	24012310 	.word	0x24012310

08001730 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return 1;
 8001734:	2301      	movs	r3, #1
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <_kill>:

int _kill(int pid, int sig)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800174a:	f00a fd0f 	bl	800c16c <__errno>
 800174e:	4603      	mov	r3, r0
 8001750:	2216      	movs	r2, #22
 8001752:	601a      	str	r2, [r3, #0]
  return -1;
 8001754:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001758:	4618      	mov	r0, r3
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <_exit>:

void _exit (int status)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001768:	f04f 31ff 	mov.w	r1, #4294967295
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff ffe7 	bl	8001740 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001772:	e7fe      	b.n	8001772 <_exit+0x12>

08001774 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	e00a      	b.n	800179c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001786:	f3af 8000 	nop.w
 800178a:	4601      	mov	r1, r0
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	60ba      	str	r2, [r7, #8]
 8001792:	b2ca      	uxtb	r2, r1
 8001794:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	3301      	adds	r3, #1
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	dbf0      	blt.n	8001786 <_read+0x12>
  }

  return len;
 80017a4:	687b      	ldr	r3, [r7, #4]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b086      	sub	sp, #24
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	60f8      	str	r0, [r7, #12]
 80017b6:	60b9      	str	r1, [r7, #8]
 80017b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	e009      	b.n	80017d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	60ba      	str	r2, [r7, #8]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fc7f 	bl	80010cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	3301      	adds	r3, #1
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	697a      	ldr	r2, [r7, #20]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	429a      	cmp	r2, r3
 80017da:	dbf1      	blt.n	80017c0 <_write+0x12>
  }
  return len;
 80017dc:	687b      	ldr	r3, [r7, #4]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3718      	adds	r7, #24
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <_close>:

int _close(int file)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800180e:	605a      	str	r2, [r3, #4]
  return 0;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <_isatty>:

int _isatty(int file)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001826:	2301      	movs	r3, #1
}
 8001828:	4618      	mov	r0, r3
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3714      	adds	r7, #20
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
	...

08001850 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001858:	4a14      	ldr	r2, [pc, #80]	; (80018ac <_sbrk+0x5c>)
 800185a:	4b15      	ldr	r3, [pc, #84]	; (80018b0 <_sbrk+0x60>)
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001864:	4b13      	ldr	r3, [pc, #76]	; (80018b4 <_sbrk+0x64>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <_sbrk+0x64>)
 800186e:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <_sbrk+0x68>)
 8001870:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	429a      	cmp	r2, r3
 800187e:	d207      	bcs.n	8001890 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001880:	f00a fc74 	bl	800c16c <__errno>
 8001884:	4603      	mov	r3, r0
 8001886:	220c      	movs	r2, #12
 8001888:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800188a:	f04f 33ff 	mov.w	r3, #4294967295
 800188e:	e009      	b.n	80018a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <_sbrk+0x64>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	4a05      	ldr	r2, [pc, #20]	; (80018b4 <_sbrk+0x64>)
 80018a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018a2:	68fb      	ldr	r3, [r7, #12]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3718      	adds	r7, #24
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	24080000 	.word	0x24080000
 80018b0:	00000400 	.word	0x00000400
 80018b4:	2401235c 	.word	0x2401235c
 80018b8:	24012b08 	.word	0x24012b08

080018bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80018bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018f4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018c0:	f7ff f842 	bl	8000948 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018c4:	480c      	ldr	r0, [pc, #48]	; (80018f8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018c6:	490d      	ldr	r1, [pc, #52]	; (80018fc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018c8:	4a0d      	ldr	r2, [pc, #52]	; (8001900 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018cc:	e002      	b.n	80018d4 <LoopCopyDataInit>

080018ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018d2:	3304      	adds	r3, #4

080018d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018d8:	d3f9      	bcc.n	80018ce <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018da:	4a0a      	ldr	r2, [pc, #40]	; (8001904 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018dc:	4c0a      	ldr	r4, [pc, #40]	; (8001908 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018e0:	e001      	b.n	80018e6 <LoopFillZerobss>

080018e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018e4:	3204      	adds	r2, #4

080018e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018e8:	d3fb      	bcc.n	80018e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018ea:	f00a fc57 	bl	800c19c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ee:	f7ff f9b5 	bl	8000c5c <main>
  bx  lr
 80018f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018f4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80018f8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018fc:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8001900:	0800d600 	.word	0x0800d600
  ldr r2, =_sbss
 8001904:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8001908:	24012b08 	.word	0x24012b08

0800190c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800190c:	e7fe      	b.n	800190c <ADC3_IRQHandler>
	...

08001910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001916:	2003      	movs	r0, #3
 8001918:	f000 f957 	bl	8001bca <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800191c:	f001 ff9a 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 8001920:	4602      	mov	r2, r0
 8001922:	4b15      	ldr	r3, [pc, #84]	; (8001978 <HAL_Init+0x68>)
 8001924:	699b      	ldr	r3, [r3, #24]
 8001926:	0a1b      	lsrs	r3, r3, #8
 8001928:	f003 030f 	and.w	r3, r3, #15
 800192c:	4913      	ldr	r1, [pc, #76]	; (800197c <HAL_Init+0x6c>)
 800192e:	5ccb      	ldrb	r3, [r1, r3]
 8001930:	f003 031f 	and.w	r3, r3, #31
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
 8001938:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <HAL_Init+0x68>)
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	4a0e      	ldr	r2, [pc, #56]	; (800197c <HAL_Init+0x6c>)
 8001944:	5cd3      	ldrb	r3, [r2, r3]
 8001946:	f003 031f 	and.w	r3, r3, #31
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	fa22 f303 	lsr.w	r3, r2, r3
 8001950:	4a0b      	ldr	r2, [pc, #44]	; (8001980 <HAL_Init+0x70>)
 8001952:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001954:	4a0b      	ldr	r2, [pc, #44]	; (8001984 <HAL_Init+0x74>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800195a:	200f      	movs	r0, #15
 800195c:	f7ff fe4a 	bl	80015f4 <HAL_InitTick>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e002      	b.n	8001970 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800196a:	f7ff fcdf 	bl	800132c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	58024400 	.word	0x58024400
 800197c:	0800d4c8 	.word	0x0800d4c8
 8001980:	24000004 	.word	0x24000004
 8001984:	24000000 	.word	0x24000000

08001988 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <HAL_IncTick+0x20>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	461a      	mov	r2, r3
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <HAL_IncTick+0x24>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4413      	add	r3, r2
 8001998:	4a04      	ldr	r2, [pc, #16]	; (80019ac <HAL_IncTick+0x24>)
 800199a:	6013      	str	r3, [r2, #0]
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	24000010 	.word	0x24000010
 80019ac:	24012360 	.word	0x24012360

080019b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return uwTick;
 80019b4:	4b03      	ldr	r3, [pc, #12]	; (80019c4 <HAL_GetTick+0x14>)
 80019b6:	681b      	ldr	r3, [r3, #0]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	24012360 	.word	0x24012360

080019c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d0:	f7ff ffee 	bl	80019b0 <HAL_GetTick>
 80019d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e0:	d005      	beq.n	80019ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <HAL_Delay+0x44>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	461a      	mov	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4413      	add	r3, r2
 80019ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019ee:	bf00      	nop
 80019f0:	f7ff ffde 	bl	80019b0 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d8f7      	bhi.n	80019f0 <HAL_Delay+0x28>
  {
  }
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	3710      	adds	r7, #16
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	24000010 	.word	0x24000010

08001a10 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <HAL_GetREVID+0x14>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	0c1b      	lsrs	r3, r3, #16
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	5c001000 	.word	0x5c001000

08001a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <__NVIC_SetPriorityGrouping+0x40>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3e:	68ba      	ldr	r2, [r7, #8]
 8001a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a44:	4013      	ands	r3, r2
 8001a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <__NVIC_SetPriorityGrouping+0x44>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a56:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <__NVIC_SetPriorityGrouping+0x40>)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	60d3      	str	r3, [r2, #12]
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	e000ed00 	.word	0xe000ed00
 8001a6c:	05fa0000 	.word	0x05fa0000

08001a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <__NVIC_GetPriorityGrouping+0x18>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	0a1b      	lsrs	r3, r3, #8
 8001a7a:	f003 0307 	and.w	r3, r3, #7
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000ed00 	.word	0xe000ed00

08001a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4603      	mov	r3, r0
 8001a94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	db0b      	blt.n	8001ab6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a9e:	88fb      	ldrh	r3, [r7, #6]
 8001aa0:	f003 021f 	and.w	r2, r3, #31
 8001aa4:	4907      	ldr	r1, [pc, #28]	; (8001ac4 <__NVIC_EnableIRQ+0x38>)
 8001aa6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aaa:	095b      	lsrs	r3, r3, #5
 8001aac:	2001      	movs	r0, #1
 8001aae:	fa00 f202 	lsl.w	r2, r0, r2
 8001ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000e100 	.word	0xe000e100

08001ac8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ad2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	db12      	blt.n	8001b00 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	f003 021f 	and.w	r2, r3, #31
 8001ae0:	490a      	ldr	r1, [pc, #40]	; (8001b0c <__NVIC_DisableIRQ+0x44>)
 8001ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ae6:	095b      	lsrs	r3, r3, #5
 8001ae8:	2001      	movs	r0, #1
 8001aea:	fa00 f202 	lsl.w	r2, r0, r2
 8001aee:	3320      	adds	r3, #32
 8001af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001af4:	f3bf 8f4f 	dsb	sy
}
 8001af8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001afa:	f3bf 8f6f 	isb	sy
}
 8001afe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000e100 	.word	0xe000e100

08001b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	6039      	str	r1, [r7, #0]
 8001b1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	db0a      	blt.n	8001b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	490c      	ldr	r1, [pc, #48]	; (8001b5c <__NVIC_SetPriority+0x4c>)
 8001b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b2e:	0112      	lsls	r2, r2, #4
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	440b      	add	r3, r1
 8001b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b38:	e00a      	b.n	8001b50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4908      	ldr	r1, [pc, #32]	; (8001b60 <__NVIC_SetPriority+0x50>)
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	3b04      	subs	r3, #4
 8001b48:	0112      	lsls	r2, r2, #4
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	761a      	strb	r2, [r3, #24]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000e100 	.word	0xe000e100
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b089      	sub	sp, #36	; 0x24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f1c3 0307 	rsb	r3, r3, #7
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	bf28      	it	cs
 8001b82:	2304      	movcs	r3, #4
 8001b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	2b06      	cmp	r3, #6
 8001b8c:	d902      	bls.n	8001b94 <NVIC_EncodePriority+0x30>
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3b03      	subs	r3, #3
 8001b92:	e000      	b.n	8001b96 <NVIC_EncodePriority+0x32>
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b98:	f04f 32ff 	mov.w	r2, #4294967295
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43da      	mvns	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	401a      	ands	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bac:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb6:	43d9      	mvns	r1, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bbc:	4313      	orrs	r3, r2
         );
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3724      	adds	r7, #36	; 0x24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff ff28 	bl	8001a28 <__NVIC_SetPriorityGrouping>
}
 8001bd8:	bf00      	nop
 8001bda:	3708      	adds	r7, #8
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
 8001bec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bee:	f7ff ff3f 	bl	8001a70 <__NVIC_GetPriorityGrouping>
 8001bf2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	68b9      	ldr	r1, [r7, #8]
 8001bf8:	6978      	ldr	r0, [r7, #20]
 8001bfa:	f7ff ffb3 	bl	8001b64 <NVIC_EncodePriority>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c04:	4611      	mov	r1, r2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff ff82 	bl	8001b10 <__NVIC_SetPriority>
}
 8001c0c:	bf00      	nop
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ff32 	bl	8001a8c <__NVIC_EnableIRQ>
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff ff42 	bl	8001ac8 <__NVIC_DisableIRQ>
}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	; 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 8001c60:	2308      	movs	r3, #8
 8001c62:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001c64:	4b40      	ldr	r3, [pc, #256]	; (8001d68 <HAL_FLASH_Program+0x11c>)
 8001c66:	7d1b      	ldrb	r3, [r3, #20]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d101      	bne.n	8001c70 <HAL_FLASH_Program+0x24>
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	e076      	b.n	8001d5e <HAL_FLASH_Program+0x112>
 8001c70:	4b3d      	ldr	r3, [pc, #244]	; (8001d68 <HAL_FLASH_Program+0x11c>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001c7c:	d306      	bcc.n	8001c8c <HAL_FLASH_Program+0x40>
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8001c84:	d202      	bcs.n	8001c8c <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 8001c86:	2301      	movs	r3, #1
 8001c88:	61bb      	str	r3, [r7, #24]
 8001c8a:	e00c      	b.n	8001ca6 <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 8001c92:	d306      	bcc.n	8001ca2 <HAL_FLASH_Program+0x56>
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 8001c9a:	d202      	bcs.n	8001ca2 <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	61bb      	str	r3, [r7, #24]
 8001ca0:	e001      	b.n	8001ca6 <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e05b      	b.n	8001d5e <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ca6:	4b30      	ldr	r3, [pc, #192]	; (8001d68 <HAL_FLASH_Program+0x11c>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8001cac:	69b9      	ldr	r1, [r7, #24]
 8001cae:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001cb2:	f000 f85d 	bl	8001d70 <FLASH_WaitForLastOperation>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 8001cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d147      	bne.n	8001d54 <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d106      	bne.n	8001cd8 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 8001cca:	4b28      	ldr	r3, [pc, #160]	; (8001d6c <HAL_FLASH_Program+0x120>)
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	4a27      	ldr	r2, [pc, #156]	; (8001d6c <HAL_FLASH_Program+0x120>)
 8001cd0:	f043 0302 	orr.w	r3, r3, #2
 8001cd4:	60d3      	str	r3, [r2, #12]
 8001cd6:	e007      	b.n	8001ce8 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 8001cd8:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <HAL_FLASH_Program+0x120>)
 8001cda:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001cde:	4a23      	ldr	r2, [pc, #140]	; (8001d6c <HAL_FLASH_Program+0x120>)
 8001ce0:	f043 0302 	orr.w	r3, r3, #2
 8001ce4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 8001ce8:	f3bf 8f6f 	isb	sy
}
 8001cec:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8001cee:	f3bf 8f4f 	dsb	sy
}
 8001cf2:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	6a3b      	ldr	r3, [r7, #32]
 8001cfa:	601a      	str	r2, [r3, #0]
        dest_addr++;
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	3304      	adds	r3, #4
 8001d00:	623b      	str	r3, [r7, #32]
        src_addr++;
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3304      	adds	r3, #4
 8001d06:	61fb      	str	r3, [r7, #28]
        row_index--;
 8001d08:	7dfb      	ldrb	r3, [r7, #23]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 8001d0e:	7dfb      	ldrb	r3, [r7, #23]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1ef      	bne.n	8001cf4 <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 8001d14:	f3bf 8f6f 	isb	sy
}
 8001d18:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8001d1a:	f3bf 8f4f 	dsb	sy
}
 8001d1e:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 8001d20:	69b9      	ldr	r1, [r7, #24]
 8001d22:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001d26:	f000 f823 	bl	8001d70 <FLASH_WaitForLastOperation>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d106      	bne.n	8001d44 <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 8001d36:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <HAL_FLASH_Program+0x120>)
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	4a0c      	ldr	r2, [pc, #48]	; (8001d6c <HAL_FLASH_Program+0x120>)
 8001d3c:	f023 0302 	bic.w	r3, r3, #2
 8001d40:	60d3      	str	r3, [r2, #12]
 8001d42:	e007      	b.n	8001d54 <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_FLASH_Program+0x120>)
 8001d46:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001d4a:	4a08      	ldr	r2, [pc, #32]	; (8001d6c <HAL_FLASH_Program+0x120>)
 8001d4c:	f023 0302 	bic.w	r3, r3, #2
 8001d50:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001d54:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <HAL_FLASH_Program+0x11c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	751a      	strb	r2, [r3, #20]

  return status;
 8001d5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3728      	adds	r7, #40	; 0x28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	24012364 	.word	0x24012364
 8001d6c:	52002000 	.word	0x52002000

08001d70 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 8001d82:	f7ff fe15 	bl	80019b0 <HAL_GetTick>
 8001d86:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d113      	bne.n	8001db6 <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 8001d8e:	4b41      	ldr	r3, [pc, #260]	; (8001e94 <FLASH_WaitForLastOperation+0x124>)
 8001d90:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8001d92:	e010      	b.n	8001db6 <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9a:	d00c      	beq.n	8001db6 <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d9c:	f7ff fe08 	bl	80019b0 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d302      	bcc.n	8001db2 <FLASH_WaitForLastOperation+0x42>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d101      	bne.n	8001db6 <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e06a      	b.n	8001e8c <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 8001db6:	697a      	ldr	r2, [r7, #20]
 8001db8:	4b37      	ldr	r3, [pc, #220]	; (8001e98 <FLASH_WaitForLastOperation+0x128>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	697a      	ldr	r2, [r7, #20]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d10a      	bne.n	8001dd8 <FLASH_WaitForLastOperation+0x68>
 8001dc2:	4b36      	ldr	r3, [pc, #216]	; (8001e9c <FLASH_WaitForLastOperation+0x12c>)
 8001dc4:	691a      	ldr	r2, [r3, #16]
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	bf0c      	ite	eq
 8001dd0:	2301      	moveq	r3, #1
 8001dd2:	2300      	movne	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	e00c      	b.n	8001df2 <FLASH_WaitForLastOperation+0x82>
 8001dd8:	4b30      	ldr	r3, [pc, #192]	; (8001e9c <FLASH_WaitForLastOperation+0x12c>)
 8001dda:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001dde:	43da      	mvns	r2, r3
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	4013      	ands	r3, r2
 8001de4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bf0c      	ite	eq
 8001dec:	2301      	moveq	r3, #1
 8001dee:	2300      	movne	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1ce      	bne.n	8001d94 <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d105      	bne.n	8001e08 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 8001dfc:	4b27      	ldr	r3, [pc, #156]	; (8001e9c <FLASH_WaitForLastOperation+0x12c>)
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	4b27      	ldr	r3, [pc, #156]	; (8001ea0 <FLASH_WaitForLastOperation+0x130>)
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	e007      	b.n	8001e18 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 8001e08:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <FLASH_WaitForLastOperation+0x12c>)
 8001e0a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001e0e:	4b24      	ldr	r3, [pc, #144]	; (8001ea0 <FLASH_WaitForLastOperation+0x130>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001e16:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d017      	beq.n	8001e52 <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 8001e22:	4b20      	ldr	r3, [pc, #128]	; (8001ea4 <FLASH_WaitForLastOperation+0x134>)
 8001e24:	699a      	ldr	r2, [r3, #24]
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ea4 <FLASH_WaitForLastOperation+0x134>)
 8001e2c:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <FLASH_WaitForLastOperation+0x128>)
 8001e32:	4013      	ands	r3, r2
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d103      	bne.n	8001e42 <FLASH_WaitForLastOperation+0xd2>
 8001e3a:	4a18      	ldr	r2, [pc, #96]	; (8001e9c <FLASH_WaitForLastOperation+0x12c>)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	6153      	str	r3, [r2, #20]
 8001e40:	e005      	b.n	8001e4e <FLASH_WaitForLastOperation+0xde>
 8001e42:	4a16      	ldr	r2, [pc, #88]	; (8001e9c <FLASH_WaitForLastOperation+0x12c>)
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001e4a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e01c      	b.n	8001e8c <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d10b      	bne.n	8001e70 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 8001e58:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <FLASH_WaitForLastOperation+0x12c>)
 8001e5a:	691b      	ldr	r3, [r3, #16]
 8001e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e64:	d111      	bne.n	8001e8a <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 8001e66:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <FLASH_WaitForLastOperation+0x12c>)
 8001e68:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e6c:	615a      	str	r2, [r3, #20]
 8001e6e:	e00c      	b.n	8001e8a <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 8001e70:	4b0a      	ldr	r3, [pc, #40]	; (8001e9c <FLASH_WaitForLastOperation+0x12c>)
 8001e72:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e7e:	d104      	bne.n	8001e8a <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <FLASH_WaitForLastOperation+0x12c>)
 8001e82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e86:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	80000004 	.word	0x80000004
 8001e98:	1fef000f 	.word	0x1fef000f
 8001e9c:	52002000 	.word	0x52002000
 8001ea0:	17ee0000 	.word	0x17ee0000
 8001ea4:	24012364 	.word	0x24012364

08001ea8 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001eb6:	4b5e      	ldr	r3, [pc, #376]	; (8002030 <HAL_FLASHEx_Erase+0x188>)
 8001eb8:	7d1b      	ldrb	r3, [r3, #20]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d101      	bne.n	8001ec2 <HAL_FLASHEx_Erase+0x1a>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e0b2      	b.n	8002028 <HAL_FLASHEx_Erase+0x180>
 8001ec2:	4b5b      	ldr	r3, [pc, #364]	; (8002030 <HAL_FLASHEx_Erase+0x188>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ec8:	4b59      	ldr	r3, [pc, #356]	; (8002030 <HAL_FLASHEx_Erase+0x188>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d009      	beq.n	8001eee <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8001eda:	2101      	movs	r1, #1
 8001edc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ee0:	f7ff ff46 	bl	8001d70 <FLASH_WaitForLastOperation>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d009      	beq.n	8001f0e <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8001efa:	2102      	movs	r1, #2
 8001efc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f00:	f7ff ff36 	bl	8001d70 <FLASH_WaitForLastOperation>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 8001f0e:	7bfb      	ldrb	r3, [r7, #15]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f040 8085 	bne.w	8002020 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d136      	bne.n	8001f8c <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691a      	ldr	r2, [r3, #16]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	4619      	mov	r1, r3
 8001f28:	4610      	mov	r0, r2
 8001f2a:	f000 f8b9 	bl	80020a0 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00f      	beq.n	8001f5a <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f40:	f7ff ff16 	bl	8001d70 <FLASH_WaitForLastOperation>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 8001f4e:	4b39      	ldr	r3, [pc, #228]	; (8002034 <HAL_FLASHEx_Erase+0x18c>)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	4a38      	ldr	r2, [pc, #224]	; (8002034 <HAL_FLASHEx_Erase+0x18c>)
 8001f54:	f023 0308 	bic.w	r3, r3, #8
 8001f58:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d05c      	beq.n	8002020 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 8001f66:	2102      	movs	r1, #2
 8001f68:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f6c:	f7ff ff00 	bl	8001d70 <FLASH_WaitForLastOperation>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 8001f7a:	4b2e      	ldr	r3, [pc, #184]	; (8002034 <HAL_FLASHEx_Erase+0x18c>)
 8001f7c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001f80:	4a2c      	ldr	r2, [pc, #176]	; (8002034 <HAL_FLASHEx_Erase+0x18c>)
 8001f82:	f023 0308 	bic.w	r3, r3, #8
 8001f86:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 8001f8a:	e049      	b.n	8002020 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f92:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	60bb      	str	r3, [r7, #8]
 8001f9a:	e039      	b.n	8002010 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6859      	ldr	r1, [r3, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	68b8      	ldr	r0, [r7, #8]
 8001fa8:	f000 f8e4 	bl	8002174 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d00c      	beq.n	8001fd2 <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 8001fb8:	2101      	movs	r1, #1
 8001fba:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001fbe:	f7ff fed7 	bl	8001d70 <FLASH_WaitForLastOperation>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8001fc6:	4b1b      	ldr	r3, [pc, #108]	; (8002034 <HAL_FLASHEx_Erase+0x18c>)
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	491a      	ldr	r1, [pc, #104]	; (8002034 <HAL_FLASHEx_Erase+0x18c>)
 8001fcc:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <HAL_FLASHEx_Erase+0x190>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 0302 	and.w	r3, r3, #2
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00e      	beq.n	8001ffc <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 8001fde:	2102      	movs	r1, #2
 8001fe0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001fe4:	f7ff fec4 	bl	8001d70 <FLASH_WaitForLastOperation>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <HAL_FLASHEx_Erase+0x18c>)
 8001fee:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8001ff2:	4910      	ldr	r1, [pc, #64]	; (8002034 <HAL_FLASHEx_Erase+0x18c>)
 8001ff4:	4b10      	ldr	r3, [pc, #64]	; (8002038 <HAL_FLASHEx_Erase+0x190>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	68ba      	ldr	r2, [r7, #8]
 8002006:	601a      	str	r2, [r3, #0]
          break;
 8002008:	e00a      	b.n	8002020 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	3301      	adds	r3, #1
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	4413      	add	r3, r2
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	429a      	cmp	r2, r3
 800201e:	d3bd      	bcc.n	8001f9c <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <HAL_FLASHEx_Erase+0x188>)
 8002022:	2200      	movs	r2, #0
 8002024:	751a      	strb	r2, [r3, #20]

  return status;
 8002026:	7bfb      	ldrb	r3, [r7, #15]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	24012364 	.word	0x24012364
 8002034:	52002000 	.word	0x52002000
 8002038:	fffff8fb 	.word	0xfffff8fb

0800203c <HAL_FLASHEx_Unlock_Bank1>:
/**
  * @brief  Unlock the FLASH Bank1 control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Unlock_Bank1(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8002040:	4b0c      	ldr	r3, [pc, #48]	; (8002074 <HAL_FLASHEx_Unlock_Bank1+0x38>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00d      	beq.n	8002068 <HAL_FLASHEx_Unlock_Bank1+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_FLASHEx_Unlock_Bank1+0x38>)
 800204e:	4a0a      	ldr	r2, [pc, #40]	; (8002078 <HAL_FLASHEx_Unlock_Bank1+0x3c>)
 8002050:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 8002052:	4b08      	ldr	r3, [pc, #32]	; (8002074 <HAL_FLASHEx_Unlock_Bank1+0x38>)
 8002054:	4a09      	ldr	r2, [pc, #36]	; (800207c <HAL_FLASHEx_Unlock_Bank1+0x40>)
 8002056:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_FLASHEx_Unlock_Bank1+0x38>)
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <HAL_FLASHEx_Unlock_Bank1+0x2c>
    {
      return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e000      	b.n	800206a <HAL_FLASHEx_Unlock_Bank1+0x2e>
    }
  }

  return HAL_OK;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	52002000 	.word	0x52002000
 8002078:	45670123 	.word	0x45670123
 800207c:	cdef89ab 	.word	0xcdef89ab

08002080 <HAL_FLASHEx_Lock_Bank1>:
/**
  * @brief  Locks the FLASH Bank1 control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Lock_Bank1(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Bank1 Registers access */
  SET_BIT(FLASH->CR1, FLASH_CR_LOCK);
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_FLASHEx_Lock_Bank1+0x1c>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	4a04      	ldr	r2, [pc, #16]	; (800209c <HAL_FLASHEx_Lock_Bank1+0x1c>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	52002000 	.word	0x52002000

080020a0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d122      	bne.n	80020fa <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 80020b4:	4b2e      	ldr	r3, [pc, #184]	; (8002170 <FLASH_MassErase+0xd0>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4a2d      	ldr	r2, [pc, #180]	; (8002170 <FLASH_MassErase+0xd0>)
 80020ba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80020be:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 80020c0:	4b2b      	ldr	r3, [pc, #172]	; (8002170 <FLASH_MassErase+0xd0>)
 80020c2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80020c6:	4a2a      	ldr	r2, [pc, #168]	; (8002170 <FLASH_MassErase+0xd0>)
 80020c8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80020cc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 80020d0:	4b27      	ldr	r3, [pc, #156]	; (8002170 <FLASH_MassErase+0xd0>)
 80020d2:	68da      	ldr	r2, [r3, #12]
 80020d4:	4926      	ldr	r1, [pc, #152]	; (8002170 <FLASH_MassErase+0xd0>)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4313      	orrs	r3, r2
 80020da:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 80020dc:	4b24      	ldr	r3, [pc, #144]	; (8002170 <FLASH_MassErase+0xd0>)
 80020de:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80020e2:	4923      	ldr	r1, [pc, #140]	; (8002170 <FLASH_MassErase+0xd0>)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 80020ec:	4b20      	ldr	r3, [pc, #128]	; (8002170 <FLASH_MassErase+0xd0>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	4a1f      	ldr	r2, [pc, #124]	; (8002170 <FLASH_MassErase+0xd0>)
 80020f2:	f043 0310 	orr.w	r3, r3, #16
 80020f6:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 80020f8:	e033      	b.n	8002162 <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	d011      	beq.n	8002128 <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 8002104:	4b1a      	ldr	r3, [pc, #104]	; (8002170 <FLASH_MassErase+0xd0>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4a19      	ldr	r2, [pc, #100]	; (8002170 <FLASH_MassErase+0xd0>)
 800210a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800210e:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 8002110:	4b17      	ldr	r3, [pc, #92]	; (8002170 <FLASH_MassErase+0xd0>)
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	4916      	ldr	r1, [pc, #88]	; (8002170 <FLASH_MassErase+0xd0>)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4313      	orrs	r3, r2
 800211a:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800211c:	4b14      	ldr	r3, [pc, #80]	; (8002170 <FLASH_MassErase+0xd0>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	4a13      	ldr	r2, [pc, #76]	; (8002170 <FLASH_MassErase+0xd0>)
 8002122:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 8002126:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d017      	beq.n	8002162 <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <FLASH_MassErase+0xd0>)
 8002134:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002138:	4a0d      	ldr	r2, [pc, #52]	; (8002170 <FLASH_MassErase+0xd0>)
 800213a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800213e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 8002142:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <FLASH_MassErase+0xd0>)
 8002144:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8002148:	4909      	ldr	r1, [pc, #36]	; (8002170 <FLASH_MassErase+0xd0>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 8002152:	4b07      	ldr	r3, [pc, #28]	; (8002170 <FLASH_MassErase+0xd0>)
 8002154:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8002158:	4a05      	ldr	r2, [pc, #20]	; (8002170 <FLASH_MassErase+0xd0>)
 800215a:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800215e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	52002000 	.word	0x52002000

08002174 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d010      	beq.n	80021ac <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800218a:	4b18      	ldr	r3, [pc, #96]	; (80021ec <FLASH_Erase_Sector+0x78>)
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	4a17      	ldr	r2, [pc, #92]	; (80021ec <FLASH_Erase_Sector+0x78>)
 8002190:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 8002194:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <FLASH_Erase_Sector+0x78>)
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	0219      	lsls	r1, r3, #8
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	430b      	orrs	r3, r1
 80021a2:	4313      	orrs	r3, r2
 80021a4:	4a11      	ldr	r2, [pc, #68]	; (80021ec <FLASH_Erase_Sector+0x78>)
 80021a6:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 80021aa:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d014      	beq.n	80021e0 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 80021b6:	4b0d      	ldr	r3, [pc, #52]	; (80021ec <FLASH_Erase_Sector+0x78>)
 80021b8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80021bc:	4a0b      	ldr	r2, [pc, #44]	; (80021ec <FLASH_Erase_Sector+0x78>)
 80021be:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 80021c2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 80021c6:	4b09      	ldr	r3, [pc, #36]	; (80021ec <FLASH_Erase_Sector+0x78>)
 80021c8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	0219      	lsls	r1, r3, #8
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	430b      	orrs	r3, r1
 80021d4:	4313      	orrs	r3, r2
 80021d6:	4a05      	ldr	r2, [pc, #20]	; (80021ec <FLASH_Erase_Sector+0x78>)
 80021d8:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 80021dc:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	52002000 	.word	0x52002000

080021f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b089      	sub	sp, #36	; 0x24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80021fe:	4b89      	ldr	r3, [pc, #548]	; (8002424 <HAL_GPIO_Init+0x234>)
 8002200:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002202:	e194      	b.n	800252e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	2101      	movs	r1, #1
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	fa01 f303 	lsl.w	r3, r1, r3
 8002210:	4013      	ands	r3, r2
 8002212:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 8186 	beq.w	8002528 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f003 0303 	and.w	r3, r3, #3
 8002224:	2b01      	cmp	r3, #1
 8002226:	d005      	beq.n	8002234 <HAL_GPIO_Init+0x44>
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d130      	bne.n	8002296 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	2203      	movs	r2, #3
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	68da      	ldr	r2, [r3, #12]
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800226a:	2201      	movs	r2, #1
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	fa02 f303 	lsl.w	r3, r2, r3
 8002272:	43db      	mvns	r3, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4013      	ands	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	091b      	lsrs	r3, r3, #4
 8002280:	f003 0201 	and.w	r2, r3, #1
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4313      	orrs	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f003 0303 	and.w	r3, r3, #3
 800229e:	2b03      	cmp	r3, #3
 80022a0:	d017      	beq.n	80022d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	2203      	movs	r2, #3
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43db      	mvns	r3, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4013      	ands	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	689a      	ldr	r2, [r3, #8]
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d123      	bne.n	8002326 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	08da      	lsrs	r2, r3, #3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3208      	adds	r2, #8
 80022e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	220f      	movs	r2, #15
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	43db      	mvns	r3, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4013      	ands	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	691a      	ldr	r2, [r3, #16]
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	08da      	lsrs	r2, r3, #3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3208      	adds	r2, #8
 8002320:	69b9      	ldr	r1, [r7, #24]
 8002322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	2203      	movs	r2, #3
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	43db      	mvns	r3, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4013      	ands	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 0203 	and.w	r2, r3, #3
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002362:	2b00      	cmp	r3, #0
 8002364:	f000 80e0 	beq.w	8002528 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002368:	4b2f      	ldr	r3, [pc, #188]	; (8002428 <HAL_GPIO_Init+0x238>)
 800236a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800236e:	4a2e      	ldr	r2, [pc, #184]	; (8002428 <HAL_GPIO_Init+0x238>)
 8002370:	f043 0302 	orr.w	r3, r3, #2
 8002374:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002378:	4b2b      	ldr	r3, [pc, #172]	; (8002428 <HAL_GPIO_Init+0x238>)
 800237a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002386:	4a29      	ldr	r2, [pc, #164]	; (800242c <HAL_GPIO_Init+0x23c>)
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	089b      	lsrs	r3, r3, #2
 800238c:	3302      	adds	r3, #2
 800238e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	220f      	movs	r2, #15
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	4013      	ands	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a20      	ldr	r2, [pc, #128]	; (8002430 <HAL_GPIO_Init+0x240>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d052      	beq.n	8002458 <HAL_GPIO_Init+0x268>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a1f      	ldr	r2, [pc, #124]	; (8002434 <HAL_GPIO_Init+0x244>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d031      	beq.n	800241e <HAL_GPIO_Init+0x22e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a1e      	ldr	r2, [pc, #120]	; (8002438 <HAL_GPIO_Init+0x248>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d02b      	beq.n	800241a <HAL_GPIO_Init+0x22a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a1d      	ldr	r2, [pc, #116]	; (800243c <HAL_GPIO_Init+0x24c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d025      	beq.n	8002416 <HAL_GPIO_Init+0x226>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a1c      	ldr	r2, [pc, #112]	; (8002440 <HAL_GPIO_Init+0x250>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d01f      	beq.n	8002412 <HAL_GPIO_Init+0x222>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a1b      	ldr	r2, [pc, #108]	; (8002444 <HAL_GPIO_Init+0x254>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d019      	beq.n	800240e <HAL_GPIO_Init+0x21e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a1a      	ldr	r2, [pc, #104]	; (8002448 <HAL_GPIO_Init+0x258>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d013      	beq.n	800240a <HAL_GPIO_Init+0x21a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a19      	ldr	r2, [pc, #100]	; (800244c <HAL_GPIO_Init+0x25c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d00d      	beq.n	8002406 <HAL_GPIO_Init+0x216>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a18      	ldr	r2, [pc, #96]	; (8002450 <HAL_GPIO_Init+0x260>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d007      	beq.n	8002402 <HAL_GPIO_Init+0x212>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4a17      	ldr	r2, [pc, #92]	; (8002454 <HAL_GPIO_Init+0x264>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d101      	bne.n	80023fe <HAL_GPIO_Init+0x20e>
 80023fa:	2309      	movs	r3, #9
 80023fc:	e02d      	b.n	800245a <HAL_GPIO_Init+0x26a>
 80023fe:	230a      	movs	r3, #10
 8002400:	e02b      	b.n	800245a <HAL_GPIO_Init+0x26a>
 8002402:	2308      	movs	r3, #8
 8002404:	e029      	b.n	800245a <HAL_GPIO_Init+0x26a>
 8002406:	2307      	movs	r3, #7
 8002408:	e027      	b.n	800245a <HAL_GPIO_Init+0x26a>
 800240a:	2306      	movs	r3, #6
 800240c:	e025      	b.n	800245a <HAL_GPIO_Init+0x26a>
 800240e:	2305      	movs	r3, #5
 8002410:	e023      	b.n	800245a <HAL_GPIO_Init+0x26a>
 8002412:	2304      	movs	r3, #4
 8002414:	e021      	b.n	800245a <HAL_GPIO_Init+0x26a>
 8002416:	2303      	movs	r3, #3
 8002418:	e01f      	b.n	800245a <HAL_GPIO_Init+0x26a>
 800241a:	2302      	movs	r3, #2
 800241c:	e01d      	b.n	800245a <HAL_GPIO_Init+0x26a>
 800241e:	2301      	movs	r3, #1
 8002420:	e01b      	b.n	800245a <HAL_GPIO_Init+0x26a>
 8002422:	bf00      	nop
 8002424:	58000080 	.word	0x58000080
 8002428:	58024400 	.word	0x58024400
 800242c:	58000400 	.word	0x58000400
 8002430:	58020000 	.word	0x58020000
 8002434:	58020400 	.word	0x58020400
 8002438:	58020800 	.word	0x58020800
 800243c:	58020c00 	.word	0x58020c00
 8002440:	58021000 	.word	0x58021000
 8002444:	58021400 	.word	0x58021400
 8002448:	58021800 	.word	0x58021800
 800244c:	58021c00 	.word	0x58021c00
 8002450:	58022000 	.word	0x58022000
 8002454:	58022400 	.word	0x58022400
 8002458:	2300      	movs	r3, #0
 800245a:	69fa      	ldr	r2, [r7, #28]
 800245c:	f002 0203 	and.w	r2, r2, #3
 8002460:	0092      	lsls	r2, r2, #2
 8002462:	4093      	lsls	r3, r2
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800246a:	4938      	ldr	r1, [pc, #224]	; (800254c <HAL_GPIO_Init+0x35c>)
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	089b      	lsrs	r3, r3, #2
 8002470:	3302      	adds	r3, #2
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002478:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800249e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80024a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80024cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	3301      	adds	r3, #1
 800252c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	fa22 f303 	lsr.w	r3, r2, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	f47f ae63 	bne.w	8002204 <HAL_GPIO_Init+0x14>
  }
}
 800253e:	bf00      	nop
 8002540:	bf00      	nop
 8002542:	3724      	adds	r7, #36	; 0x24
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	58000400 	.word	0x58000400

08002550 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002550:	b480      	push	{r7}
 8002552:	b087      	sub	sp, #28
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800255e:	4b75      	ldr	r3, [pc, #468]	; (8002734 <HAL_GPIO_DeInit+0x1e4>)
 8002560:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8002562:	e0d9      	b.n	8002718 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8002564:	2201      	movs	r2, #1
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	4013      	ands	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 80cc 	beq.w	8002712 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800257a:	4a6f      	ldr	r2, [pc, #444]	; (8002738 <HAL_GPIO_DeInit+0x1e8>)
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	089b      	lsrs	r3, r3, #2
 8002580:	3302      	adds	r3, #2
 8002582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002586:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	220f      	movs	r2, #15
 8002592:	fa02 f303 	lsl.w	r3, r2, r3
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	4013      	ands	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a67      	ldr	r2, [pc, #412]	; (800273c <HAL_GPIO_DeInit+0x1ec>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d037      	beq.n	8002614 <HAL_GPIO_DeInit+0xc4>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	4a66      	ldr	r2, [pc, #408]	; (8002740 <HAL_GPIO_DeInit+0x1f0>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d031      	beq.n	8002610 <HAL_GPIO_DeInit+0xc0>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a65      	ldr	r2, [pc, #404]	; (8002744 <HAL_GPIO_DeInit+0x1f4>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d02b      	beq.n	800260c <HAL_GPIO_DeInit+0xbc>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4a64      	ldr	r2, [pc, #400]	; (8002748 <HAL_GPIO_DeInit+0x1f8>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d025      	beq.n	8002608 <HAL_GPIO_DeInit+0xb8>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a63      	ldr	r2, [pc, #396]	; (800274c <HAL_GPIO_DeInit+0x1fc>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d01f      	beq.n	8002604 <HAL_GPIO_DeInit+0xb4>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a62      	ldr	r2, [pc, #392]	; (8002750 <HAL_GPIO_DeInit+0x200>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d019      	beq.n	8002600 <HAL_GPIO_DeInit+0xb0>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a61      	ldr	r2, [pc, #388]	; (8002754 <HAL_GPIO_DeInit+0x204>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d013      	beq.n	80025fc <HAL_GPIO_DeInit+0xac>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a60      	ldr	r2, [pc, #384]	; (8002758 <HAL_GPIO_DeInit+0x208>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d00d      	beq.n	80025f8 <HAL_GPIO_DeInit+0xa8>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a5f      	ldr	r2, [pc, #380]	; (800275c <HAL_GPIO_DeInit+0x20c>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d007      	beq.n	80025f4 <HAL_GPIO_DeInit+0xa4>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a5e      	ldr	r2, [pc, #376]	; (8002760 <HAL_GPIO_DeInit+0x210>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d101      	bne.n	80025f0 <HAL_GPIO_DeInit+0xa0>
 80025ec:	2309      	movs	r3, #9
 80025ee:	e012      	b.n	8002616 <HAL_GPIO_DeInit+0xc6>
 80025f0:	230a      	movs	r3, #10
 80025f2:	e010      	b.n	8002616 <HAL_GPIO_DeInit+0xc6>
 80025f4:	2308      	movs	r3, #8
 80025f6:	e00e      	b.n	8002616 <HAL_GPIO_DeInit+0xc6>
 80025f8:	2307      	movs	r3, #7
 80025fa:	e00c      	b.n	8002616 <HAL_GPIO_DeInit+0xc6>
 80025fc:	2306      	movs	r3, #6
 80025fe:	e00a      	b.n	8002616 <HAL_GPIO_DeInit+0xc6>
 8002600:	2305      	movs	r3, #5
 8002602:	e008      	b.n	8002616 <HAL_GPIO_DeInit+0xc6>
 8002604:	2304      	movs	r3, #4
 8002606:	e006      	b.n	8002616 <HAL_GPIO_DeInit+0xc6>
 8002608:	2303      	movs	r3, #3
 800260a:	e004      	b.n	8002616 <HAL_GPIO_DeInit+0xc6>
 800260c:	2302      	movs	r3, #2
 800260e:	e002      	b.n	8002616 <HAL_GPIO_DeInit+0xc6>
 8002610:	2301      	movs	r3, #1
 8002612:	e000      	b.n	8002616 <HAL_GPIO_DeInit+0xc6>
 8002614:	2300      	movs	r3, #0
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	f002 0203 	and.w	r2, r2, #3
 800261c:	0092      	lsls	r2, r2, #2
 800261e:	4093      	lsls	r3, r2
 8002620:	68ba      	ldr	r2, [r7, #8]
 8002622:	429a      	cmp	r2, r3
 8002624:	d136      	bne.n	8002694 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	43db      	mvns	r3, r3
 800262e:	401a      	ands	r2, r3
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	43db      	mvns	r3, r3
 800263c:	401a      	ands	r2, r3
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	43db      	mvns	r3, r3
 800264c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002650:	4013      	ands	r3, r2
 8002652:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8002654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	43db      	mvns	r3, r3
 800265e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002662:	4013      	ands	r3, r2
 8002664:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	220f      	movs	r2, #15
 8002670:	fa02 f303 	lsl.w	r3, r2, r3
 8002674:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002676:	4a30      	ldr	r2, [pc, #192]	; (8002738 <HAL_GPIO_DeInit+0x1e8>)
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	089b      	lsrs	r3, r3, #2
 800267c:	3302      	adds	r3, #2
 800267e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	43da      	mvns	r2, r3
 8002686:	482c      	ldr	r0, [pc, #176]	; (8002738 <HAL_GPIO_DeInit+0x1e8>)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	089b      	lsrs	r3, r3, #2
 800268c:	400a      	ands	r2, r1
 800268e:	3302      	adds	r3, #2
 8002690:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	2103      	movs	r1, #3
 800269e:	fa01 f303 	lsl.w	r3, r1, r3
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	08da      	lsrs	r2, r3, #3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3208      	adds	r2, #8
 80026b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	220f      	movs	r2, #15
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	43db      	mvns	r3, r3
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	08d2      	lsrs	r2, r2, #3
 80026c8:	4019      	ands	r1, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	3208      	adds	r2, #8
 80026ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	2103      	movs	r1, #3
 80026dc:	fa01 f303 	lsl.w	r3, r1, r3
 80026e0:	43db      	mvns	r3, r3
 80026e2:	401a      	ands	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	2101      	movs	r1, #1
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	fa01 f303 	lsl.w	r3, r1, r3
 80026f4:	43db      	mvns	r3, r3
 80026f6:	401a      	ands	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	697b      	ldr	r3, [r7, #20]
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	2103      	movs	r1, #3
 8002706:	fa01 f303 	lsl.w	r3, r1, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	401a      	ands	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	3301      	adds	r3, #1
 8002716:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	fa22 f303 	lsr.w	r3, r2, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	f47f af1f 	bne.w	8002564 <HAL_GPIO_DeInit+0x14>
  }
}
 8002726:	bf00      	nop
 8002728:	bf00      	nop
 800272a:	371c      	adds	r7, #28
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	58000080 	.word	0x58000080
 8002738:	58000400 	.word	0x58000400
 800273c:	58020000 	.word	0x58020000
 8002740:	58020400 	.word	0x58020400
 8002744:	58020800 	.word	0x58020800
 8002748:	58020c00 	.word	0x58020c00
 800274c:	58021000 	.word	0x58021000
 8002750:	58021400 	.word	0x58021400
 8002754:	58021800 	.word	0x58021800
 8002758:	58021c00 	.word	0x58021c00
 800275c:	58022000 	.word	0x58022000
 8002760:	58022400 	.word	0x58022400

08002764 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	887b      	ldrh	r3, [r7, #2]
 8002776:	4013      	ands	r3, r2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
 8002780:	e001      	b.n	8002786 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002782:	2300      	movs	r3, #0
 8002784:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002786:	7bfb      	ldrb	r3, [r7, #15]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	807b      	strh	r3, [r7, #2]
 80027a0:	4613      	mov	r3, r2
 80027a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027a4:	787b      	ldrb	r3, [r7, #1]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027aa:	887a      	ldrh	r2, [r7, #2]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80027b0:	e003      	b.n	80027ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80027b2:	887b      	ldrh	r3, [r7, #2]
 80027b4:	041a      	lsls	r2, r3, #16
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	619a      	str	r2, [r3, #24]
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b082      	sub	sp, #8
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	4603      	mov	r3, r0
 80027ce:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80027d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027d4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80027d8:	88fb      	ldrh	r3, [r7, #6]
 80027da:	4013      	ands	r3, r2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fe fd41 	bl	8001274 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
	...

080027fc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002804:	4a08      	ldr	r2, [pc, #32]	; (8002828 <HAL_HSEM_FastTake+0x2c>)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	3320      	adds	r3, #32
 800280a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800280e:	4a07      	ldr	r2, [pc, #28]	; (800282c <HAL_HSEM_FastTake+0x30>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d101      	bne.n	8002818 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002814:	2300      	movs	r3, #0
 8002816:	e000      	b.n	800281a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
}
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	58026400 	.word	0x58026400
 800282c:	80000300 	.word	0x80000300

08002830 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800283a:	4906      	ldr	r1, [pc, #24]	; (8002854 <HAL_HSEM_Release+0x24>)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	58026400 	.word	0x58026400

08002858 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002860:	4b29      	ldr	r3, [pc, #164]	; (8002908 <HAL_PWREx_ConfigSupply+0xb0>)
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	2b06      	cmp	r3, #6
 800286a:	d00a      	beq.n	8002882 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800286c:	4b26      	ldr	r3, [pc, #152]	; (8002908 <HAL_PWREx_ConfigSupply+0xb0>)
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	429a      	cmp	r2, r3
 8002878:	d001      	beq.n	800287e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e040      	b.n	8002900 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800287e:	2300      	movs	r3, #0
 8002880:	e03e      	b.n	8002900 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002882:	4b21      	ldr	r3, [pc, #132]	; (8002908 <HAL_PWREx_ConfigSupply+0xb0>)
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800288a:	491f      	ldr	r1, [pc, #124]	; (8002908 <HAL_PWREx_ConfigSupply+0xb0>)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4313      	orrs	r3, r2
 8002890:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002892:	f7ff f88d 	bl	80019b0 <HAL_GetTick>
 8002896:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002898:	e009      	b.n	80028ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800289a:	f7ff f889 	bl	80019b0 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028a8:	d901      	bls.n	80028ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e028      	b.n	8002900 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80028ae:	4b16      	ldr	r3, [pc, #88]	; (8002908 <HAL_PWREx_ConfigSupply+0xb0>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ba:	d1ee      	bne.n	800289a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b1e      	cmp	r3, #30
 80028c0:	d008      	beq.n	80028d4 <HAL_PWREx_ConfigSupply+0x7c>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b2e      	cmp	r3, #46	; 0x2e
 80028c6:	d005      	beq.n	80028d4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2b1d      	cmp	r3, #29
 80028cc:	d002      	beq.n	80028d4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b2d      	cmp	r3, #45	; 0x2d
 80028d2:	d114      	bne.n	80028fe <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80028d4:	f7ff f86c 	bl	80019b0 <HAL_GetTick>
 80028d8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80028da:	e009      	b.n	80028f0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80028dc:	f7ff f868 	bl	80019b0 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028ea:	d901      	bls.n	80028f0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e007      	b.n	8002900 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80028f0:	4b05      	ldr	r3, [pc, #20]	; (8002908 <HAL_PWREx_ConfigSupply+0xb0>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028fc:	d1ee      	bne.n	80028dc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	58024800 	.word	0x58024800

0800290c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Increasing the CPU frequency */
  if (FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
 8002912:	4b89      	ldr	r3, [pc, #548]	; (8002b38 <HAL_RCC_DeInit+0x22c>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	2b06      	cmp	r3, #6
 800291c:	d80f      	bhi.n	800293e <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 800291e:	4b86      	ldr	r3, [pc, #536]	; (8002b38 <HAL_RCC_DeInit+0x22c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f023 030f 	bic.w	r3, r3, #15
 8002926:	4a84      	ldr	r2, [pc, #528]	; (8002b38 <HAL_RCC_DeInit+0x22c>)
 8002928:	f043 0307 	orr.w	r3, r3, #7
 800292c:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 800292e:	4b82      	ldr	r3, [pc, #520]	; (8002b38 <HAL_RCC_DeInit+0x22c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	2b07      	cmp	r3, #7
 8002938:	d001      	beq.n	800293e <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e0f7      	b.n	8002b2e <HAL_RCC_DeInit+0x222>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800293e:	f7ff f837 	bl	80019b0 <HAL_GetTick>
 8002942:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002944:	4b7d      	ldr	r3, [pc, #500]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a7c      	ldr	r2, [pc, #496]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002950:	e008      	b.n	8002964 <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002952:	f7ff f82d 	bl	80019b0 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e0e4      	b.n	8002b2e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002964:	4b75      	ldr	r3, [pc, #468]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0f0      	beq.n	8002952 <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
 8002970:	4b72      	ldr	r3, [pc, #456]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	4a71      	ldr	r2, [pc, #452]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002976:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800297a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800297c:	4b6f      	ldr	r3, [pc, #444]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 800297e:	2200      	movs	r2, #0
 8002980:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
 8002982:	4b6f      	ldr	r3, [pc, #444]	; (8002b40 <HAL_RCC_DeInit+0x234>)
 8002984:	4a6f      	ldr	r2, [pc, #444]	; (8002b44 <HAL_RCC_DeInit+0x238>)
 8002986:	601a      	str	r2, [r3, #0]
  SystemD2Clock = HSI_VALUE;
 8002988:	4b6f      	ldr	r3, [pc, #444]	; (8002b48 <HAL_RCC_DeInit+0x23c>)
 800298a:	4a6e      	ldr	r2, [pc, #440]	; (8002b44 <HAL_RCC_DeInit+0x238>)
 800298c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800298e:	4b6f      	ldr	r3, [pc, #444]	; (8002b4c <HAL_RCC_DeInit+0x240>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe fe2e 	bl	80015f4 <HAL_InitTick>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d001      	beq.n	80029a2 <HAL_RCC_DeInit+0x96>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e0c5      	b.n	8002b2e <HAL_RCC_DeInit+0x222>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80029a2:	f7ff f805 	bl	80019b0 <HAL_GetTick>
 80029a6:	6078      	str	r0, [r7, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 80029a8:	e00a      	b.n	80029c0 <HAL_RCC_DeInit+0xb4>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029aa:	f7ff f801 	bl	80019b0 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_DeInit+0xb4>
    {
      return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e0b6      	b.n	8002b2e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 80029c0:	4b5e      	ldr	r3, [pc, #376]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1ee      	bne.n	80029aa <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80029cc:	f7fe fff0 	bl	80019b0 <HAL_GetTick>
 80029d0:	6078      	str	r0, [r7, #4]

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON | RCC_CR_HSIDIV | RCC_CR_HSIDIVF | RCC_CR_CSION | RCC_CR_CSIKERON  \
 80029d2:	4b5a      	ldr	r3, [pc, #360]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	4959      	ldr	r1, [pc, #356]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 80029d8:	4b5d      	ldr	r3, [pc, #372]	; (8002b50 <HAL_RCC_DeInit+0x244>)
 80029da:	4013      	ands	r3, r2
 80029dc:	600b      	str	r3, [r1, #0]
            | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_DeInit+0xe6>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e0:	f7fe ffe6 	bl	80019b0 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b64      	cmp	r3, #100	; 0x64
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_DeInit+0xe6>
    {
      return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e09d      	b.n	8002b2e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029f2:	4b52      	ldr	r3, [pc, #328]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_DeInit+0xd4>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80029fe:	f7fe ffd7 	bl	80019b0 <HAL_GetTick>
 8002a02:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 8002a04:	4b4d      	ldr	r3, [pc, #308]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a4c      	ldr	r2, [pc, #304]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002a0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a0e:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_DeInit+0x118>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a12:	f7fe ffcd 	bl	80019b0 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_DeInit+0x118>
    {
      return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e084      	b.n	8002b2e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002a24:	4b45      	ldr	r3, [pc, #276]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1f0      	bne.n	8002a12 <HAL_RCC_DeInit+0x106>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002a30:	f7fe ffbe 	bl	80019b0 <HAL_GetTick>
 8002a34:	6078      	str	r0, [r7, #4]

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 8002a36:	4b41      	ldr	r3, [pc, #260]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a40      	ldr	r2, [pc, #256]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002a3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a40:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_DeInit+0x14a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a44:	f7fe ffb4 	bl	80019b0 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_DeInit+0x14a>
    {
      return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e06b      	b.n	8002b2e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 8002a56:	4b39      	ldr	r3, [pc, #228]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_DeInit+0x138>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002a62:	f7fe ffa5 	bl	80019b0 <HAL_GetTick>
 8002a66:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 8002a68:	4b34      	ldr	r3, [pc, #208]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a33      	ldr	r2, [pc, #204]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a72:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_DeInit+0x17c>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a76:	f7fe ff9b 	bl	80019b0 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_DeInit+0x17c>
    {
      return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e052      	b.n	8002b2e <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 8002a88:	4b2c      	ldr	r3, [pc, #176]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f0      	bne.n	8002a76 <HAL_RCC_DeInit+0x16a>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
 8002a94:	4b29      	ldr	r3, [pc, #164]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
 8002a9a:	4b28      	ldr	r3, [pc, #160]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
 8002aa0:	4b26      	ldr	r3, [pc, #152]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR = RCC_PLLCKSELR_DIVM1_5 | RCC_PLLCKSELR_DIVM2_5 | RCC_PLLCKSELR_DIVM3_5;
 8002aa6:	4b25      	ldr	r3, [pc, #148]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002aa8:	4a2a      	ldr	r2, [pc, #168]	; (8002b54 <HAL_RCC_DeInit+0x248>)
 8002aaa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
 8002aac:	4b23      	ldr	r3, [pc, #140]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002aae:	4a2a      	ldr	r2, [pc, #168]	; (8002b58 <HAL_RCC_DeInit+0x24c>)
 8002ab0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR, 0x01010280U);
 8002ab2:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002ab4:	4a29      	ldr	r2, [pc, #164]	; (8002b5c <HAL_RCC_DeInit+0x250>)
 8002ab6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
 8002ab8:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR, 0x01010280U);
 8002abe:	4b1f      	ldr	r3, [pc, #124]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002ac0:	4a26      	ldr	r2, [pc, #152]	; (8002b5c <HAL_RCC_DeInit+0x250>)
 8002ac2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
 8002ac4:	4b1d      	ldr	r3, [pc, #116]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR, 0x01010280U);
 8002aca:	4b1c      	ldr	r3, [pc, #112]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002acc:	4a23      	ldr	r2, [pc, #140]	; (8002b5c <HAL_RCC_DeInit+0x250>)
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
 8002ad0:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset HSEEXT  */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
#endif /* RCC_CR_HSEEXT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8002ad6:	4b19      	ldr	r3, [pc, #100]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a18      	ldr	r2, [pc, #96]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002adc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ae0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 8002ae2:	4b16      	ldr	r3, [pc, #88]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8002ae8:	4b14      	ldr	r3, [pc, #80]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002aea:	f04f 32ff 	mov.w	r2, #4294967295
 8002aee:	669a      	str	r2, [r3, #104]	; 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 8002af0:	4b12      	ldr	r3, [pc, #72]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002af2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002af6:	4a11      	ldr	r2, [pc, #68]	; (8002b3c <HAL_RCC_DeInit+0x230>)
 8002af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002afc:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
 8002b00:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <HAL_RCC_DeInit+0x22c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00f      	beq.n	8002b2c <HAL_RCC_DeInit+0x220>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <HAL_RCC_DeInit+0x22c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f023 030f 	bic.w	r3, r3, #15
 8002b14:	4a08      	ldr	r2, [pc, #32]	; (8002b38 <HAL_RCC_DeInit+0x22c>)
 8002b16:	f043 0307 	orr.w	r3, r3, #7
 8002b1a:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_RCC_DeInit+0x22c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 030f 	and.w	r3, r3, #15
 8002b24:	2b07      	cmp	r3, #7
 8002b26:	d001      	beq.n	8002b2c <HAL_RCC_DeInit+0x220>
    {
      return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <HAL_RCC_DeInit+0x222>
    }

  }

  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	52002000 	.word	0x52002000
 8002b3c:	58024400 	.word	0x58024400
 8002b40:	24000000 	.word	0x24000000
 8002b44:	03d09000 	.word	0x03d09000
 8002b48:	24000004 	.word	0x24000004
 8002b4c:	2400000c 	.word	0x2400000c
 8002b50:	fff6ed45 	.word	0xfff6ed45
 8002b54:	02020200 	.word	0x02020200
 8002b58:	01ff0000 	.word	0x01ff0000
 8002b5c:	01010280 	.word	0x01010280

08002b60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08c      	sub	sp, #48	; 0x30
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d102      	bne.n	8002b74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	f000 bc48 	b.w	8003404 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f000 8088 	beq.w	8002c92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b82:	4b99      	ldr	r3, [pc, #612]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b8c:	4b96      	ldr	r3, [pc, #600]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b90:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b94:	2b10      	cmp	r3, #16
 8002b96:	d007      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x48>
 8002b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9a:	2b18      	cmp	r3, #24
 8002b9c:	d111      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x62>
 8002b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d10c      	bne.n	8002bc2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba8:	4b8f      	ldr	r3, [pc, #572]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d06d      	beq.n	8002c90 <HAL_RCC_OscConfig+0x130>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d169      	bne.n	8002c90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	f000 bc21 	b.w	8003404 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bca:	d106      	bne.n	8002bda <HAL_RCC_OscConfig+0x7a>
 8002bcc:	4b86      	ldr	r3, [pc, #536]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a85      	ldr	r2, [pc, #532]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd6:	6013      	str	r3, [r2, #0]
 8002bd8:	e02e      	b.n	8002c38 <HAL_RCC_OscConfig+0xd8>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x9c>
 8002be2:	4b81      	ldr	r3, [pc, #516]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a80      	ldr	r2, [pc, #512]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	4b7e      	ldr	r3, [pc, #504]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a7d      	ldr	r2, [pc, #500]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002bf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bf8:	6013      	str	r3, [r2, #0]
 8002bfa:	e01d      	b.n	8002c38 <HAL_RCC_OscConfig+0xd8>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c04:	d10c      	bne.n	8002c20 <HAL_RCC_OscConfig+0xc0>
 8002c06:	4b78      	ldr	r3, [pc, #480]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a77      	ldr	r2, [pc, #476]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c10:	6013      	str	r3, [r2, #0]
 8002c12:	4b75      	ldr	r3, [pc, #468]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a74      	ldr	r2, [pc, #464]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c1c:	6013      	str	r3, [r2, #0]
 8002c1e:	e00b      	b.n	8002c38 <HAL_RCC_OscConfig+0xd8>
 8002c20:	4b71      	ldr	r3, [pc, #452]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a70      	ldr	r2, [pc, #448]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2a:	6013      	str	r3, [r2, #0]
 8002c2c:	4b6e      	ldr	r3, [pc, #440]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a6d      	ldr	r2, [pc, #436]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d013      	beq.n	8002c68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c40:	f7fe feb6 	bl	80019b0 <HAL_GetTick>
 8002c44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c48:	f7fe feb2 	bl	80019b0 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b64      	cmp	r3, #100	; 0x64
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e3d4      	b.n	8003404 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c5a:	4b63      	ldr	r3, [pc, #396]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0xe8>
 8002c66:	e014      	b.n	8002c92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c68:	f7fe fea2 	bl	80019b0 <HAL_GetTick>
 8002c6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c6e:	e008      	b.n	8002c82 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c70:	f7fe fe9e 	bl	80019b0 <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	2b64      	cmp	r3, #100	; 0x64
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e3c0      	b.n	8003404 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002c82:	4b59      	ldr	r3, [pc, #356]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f0      	bne.n	8002c70 <HAL_RCC_OscConfig+0x110>
 8002c8e:	e000      	b.n	8002c92 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 80ca 	beq.w	8002e34 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ca0:	4b51      	ldr	r3, [pc, #324]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ca8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002caa:	4b4f      	ldr	r3, [pc, #316]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d007      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x166>
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	2b18      	cmp	r3, #24
 8002cba:	d156      	bne.n	8002d6a <HAL_RCC_OscConfig+0x20a>
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d151      	bne.n	8002d6a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002cc6:	4b48      	ldr	r3, [pc, #288]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d005      	beq.n	8002cde <HAL_RCC_OscConfig+0x17e>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e392      	b.n	8003404 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002cde:	4b42      	ldr	r3, [pc, #264]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f023 0219 	bic.w	r2, r3, #25
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	493f      	ldr	r1, [pc, #252]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf0:	f7fe fe5e 	bl	80019b0 <HAL_GetTick>
 8002cf4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf8:	f7fe fe5a 	bl	80019b0 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e37c      	b.n	8003404 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d0a:	4b37      	ldr	r3, [pc, #220]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d16:	f7fe fe7b 	bl	8001a10 <HAL_GetREVID>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d817      	bhi.n	8002d54 <HAL_RCC_OscConfig+0x1f4>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	2b40      	cmp	r3, #64	; 0x40
 8002d2a:	d108      	bne.n	8002d3e <HAL_RCC_OscConfig+0x1de>
 8002d2c:	4b2e      	ldr	r3, [pc, #184]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002d34:	4a2c      	ldr	r2, [pc, #176]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d3a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d3c:	e07a      	b.n	8002e34 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d3e:	4b2a      	ldr	r3, [pc, #168]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	031b      	lsls	r3, r3, #12
 8002d4c:	4926      	ldr	r1, [pc, #152]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d52:	e06f      	b.n	8002e34 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d54:	4b24      	ldr	r3, [pc, #144]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	061b      	lsls	r3, r3, #24
 8002d62:	4921      	ldr	r1, [pc, #132]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d68:	e064      	b.n	8002e34 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d047      	beq.n	8002e02 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d72:	4b1d      	ldr	r3, [pc, #116]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 0219 	bic.w	r2, r3, #25
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	491a      	ldr	r1, [pc, #104]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d84:	f7fe fe14 	bl	80019b0 <HAL_GetTick>
 8002d88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d8c:	f7fe fe10 	bl	80019b0 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e332      	b.n	8003404 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d9e:	4b12      	ldr	r3, [pc, #72]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0304 	and.w	r3, r3, #4
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d0f0      	beq.n	8002d8c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002daa:	f7fe fe31 	bl	8001a10 <HAL_GetREVID>
 8002dae:	4603      	mov	r3, r0
 8002db0:	f241 0203 	movw	r2, #4099	; 0x1003
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d819      	bhi.n	8002dec <HAL_RCC_OscConfig+0x28c>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	691b      	ldr	r3, [r3, #16]
 8002dbc:	2b40      	cmp	r3, #64	; 0x40
 8002dbe:	d108      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x272>
 8002dc0:	4b09      	ldr	r3, [pc, #36]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002dc8:	4a07      	ldr	r2, [pc, #28]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dce:	6053      	str	r3, [r2, #4]
 8002dd0:	e030      	b.n	8002e34 <HAL_RCC_OscConfig+0x2d4>
 8002dd2:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	031b      	lsls	r3, r3, #12
 8002de0:	4901      	ldr	r1, [pc, #4]	; (8002de8 <HAL_RCC_OscConfig+0x288>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	604b      	str	r3, [r1, #4]
 8002de6:	e025      	b.n	8002e34 <HAL_RCC_OscConfig+0x2d4>
 8002de8:	58024400 	.word	0x58024400
 8002dec:	4b9a      	ldr	r3, [pc, #616]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	061b      	lsls	r3, r3, #24
 8002dfa:	4997      	ldr	r1, [pc, #604]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	604b      	str	r3, [r1, #4]
 8002e00:	e018      	b.n	8002e34 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e02:	4b95      	ldr	r3, [pc, #596]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a94      	ldr	r2, [pc, #592]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002e08:	f023 0301 	bic.w	r3, r3, #1
 8002e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0e:	f7fe fdcf 	bl	80019b0 <HAL_GetTick>
 8002e12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e16:	f7fe fdcb 	bl	80019b0 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e2ed      	b.n	8003404 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e28:	4b8b      	ldr	r3, [pc, #556]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1f0      	bne.n	8002e16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 80a9 	beq.w	8002f94 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e42:	4b85      	ldr	r3, [pc, #532]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e4a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e4c:	4b82      	ldr	r3, [pc, #520]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e50:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d007      	beq.n	8002e68 <HAL_RCC_OscConfig+0x308>
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	2b18      	cmp	r3, #24
 8002e5c:	d13a      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x374>
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f003 0303 	and.w	r3, r3, #3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d135      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e68:	4b7b      	ldr	r3, [pc, #492]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d005      	beq.n	8002e80 <HAL_RCC_OscConfig+0x320>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	2b80      	cmp	r3, #128	; 0x80
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e2c1      	b.n	8003404 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e80:	f7fe fdc6 	bl	8001a10 <HAL_GetREVID>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f241 0203 	movw	r2, #4099	; 0x1003
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d817      	bhi.n	8002ebe <HAL_RCC_OscConfig+0x35e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	2b20      	cmp	r3, #32
 8002e94:	d108      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x348>
 8002e96:	4b70      	ldr	r3, [pc, #448]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002e9e:	4a6e      	ldr	r2, [pc, #440]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002ea0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ea4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ea6:	e075      	b.n	8002f94 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ea8:	4b6b      	ldr	r3, [pc, #428]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	069b      	lsls	r3, r3, #26
 8002eb6:	4968      	ldr	r1, [pc, #416]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ebc:	e06a      	b.n	8002f94 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ebe:	4b66      	ldr	r3, [pc, #408]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1b      	ldr	r3, [r3, #32]
 8002eca:	061b      	lsls	r3, r3, #24
 8002ecc:	4962      	ldr	r1, [pc, #392]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002ed2:	e05f      	b.n	8002f94 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d042      	beq.n	8002f62 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002edc:	4b5e      	ldr	r3, [pc, #376]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a5d      	ldr	r2, [pc, #372]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002ee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee8:	f7fe fd62 	bl	80019b0 <HAL_GetTick>
 8002eec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ef0:	f7fe fd5e 	bl	80019b0 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e280      	b.n	8003404 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f02:	4b55      	ldr	r3, [pc, #340]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002f0e:	f7fe fd7f 	bl	8001a10 <HAL_GetREVID>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f241 0203 	movw	r2, #4099	; 0x1003
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d817      	bhi.n	8002f4c <HAL_RCC_OscConfig+0x3ec>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	2b20      	cmp	r3, #32
 8002f22:	d108      	bne.n	8002f36 <HAL_RCC_OscConfig+0x3d6>
 8002f24:	4b4c      	ldr	r3, [pc, #304]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002f2c:	4a4a      	ldr	r2, [pc, #296]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002f2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f32:	6053      	str	r3, [r2, #4]
 8002f34:	e02e      	b.n	8002f94 <HAL_RCC_OscConfig+0x434>
 8002f36:	4b48      	ldr	r3, [pc, #288]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	069b      	lsls	r3, r3, #26
 8002f44:	4944      	ldr	r1, [pc, #272]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	604b      	str	r3, [r1, #4]
 8002f4a:	e023      	b.n	8002f94 <HAL_RCC_OscConfig+0x434>
 8002f4c:	4b42      	ldr	r3, [pc, #264]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a1b      	ldr	r3, [r3, #32]
 8002f58:	061b      	lsls	r3, r3, #24
 8002f5a:	493f      	ldr	r1, [pc, #252]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	60cb      	str	r3, [r1, #12]
 8002f60:	e018      	b.n	8002f94 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002f62:	4b3d      	ldr	r3, [pc, #244]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a3c      	ldr	r2, [pc, #240]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002f68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6e:	f7fe fd1f 	bl	80019b0 <HAL_GetTick>
 8002f72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f76:	f7fe fd1b 	bl	80019b0 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e23d      	b.n	8003404 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f88:	4b33      	ldr	r3, [pc, #204]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1f0      	bne.n	8002f76 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0308 	and.w	r3, r3, #8
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d036      	beq.n	800300e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d019      	beq.n	8002fdc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fa8:	4b2b      	ldr	r3, [pc, #172]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fac:	4a2a      	ldr	r2, [pc, #168]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb4:	f7fe fcfc 	bl	80019b0 <HAL_GetTick>
 8002fb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fbc:	f7fe fcf8 	bl	80019b0 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e21a      	b.n	8003404 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002fce:	4b22      	ldr	r3, [pc, #136]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002fd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0x45c>
 8002fda:	e018      	b.n	800300e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fdc:	4b1e      	ldr	r3, [pc, #120]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002fde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe0:	4a1d      	ldr	r2, [pc, #116]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8002fe2:	f023 0301 	bic.w	r3, r3, #1
 8002fe6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe8:	f7fe fce2 	bl	80019b0 <HAL_GetTick>
 8002fec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff0:	f7fe fcde 	bl	80019b0 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e200      	b.n	8003404 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003002:	4b15      	ldr	r3, [pc, #84]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8003004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f0      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0320 	and.w	r3, r3, #32
 8003016:	2b00      	cmp	r3, #0
 8003018:	d039      	beq.n	800308e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d01c      	beq.n	800305c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003022:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a0c      	ldr	r2, [pc, #48]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 8003028:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800302c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800302e:	f7fe fcbf 	bl	80019b0 <HAL_GetTick>
 8003032:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003036:	f7fe fcbb 	bl	80019b0 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e1dd      	b.n	8003404 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003048:	4b03      	ldr	r3, [pc, #12]	; (8003058 <HAL_RCC_OscConfig+0x4f8>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0f0      	beq.n	8003036 <HAL_RCC_OscConfig+0x4d6>
 8003054:	e01b      	b.n	800308e <HAL_RCC_OscConfig+0x52e>
 8003056:	bf00      	nop
 8003058:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800305c:	4b9b      	ldr	r3, [pc, #620]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a9a      	ldr	r2, [pc, #616]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003062:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003066:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003068:	f7fe fca2 	bl	80019b0 <HAL_GetTick>
 800306c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003070:	f7fe fc9e 	bl	80019b0 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e1c0      	b.n	8003404 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003082:	4b92      	ldr	r3, [pc, #584]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0304 	and.w	r3, r3, #4
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 8081 	beq.w	800319e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800309c:	4b8c      	ldr	r3, [pc, #560]	; (80032d0 <HAL_RCC_OscConfig+0x770>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a8b      	ldr	r2, [pc, #556]	; (80032d0 <HAL_RCC_OscConfig+0x770>)
 80030a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030a6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030a8:	f7fe fc82 	bl	80019b0 <HAL_GetTick>
 80030ac:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b0:	f7fe fc7e 	bl	80019b0 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	; 0x64
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e1a0      	b.n	8003404 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030c2:	4b83      	ldr	r3, [pc, #524]	; (80032d0 <HAL_RCC_OscConfig+0x770>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d106      	bne.n	80030e4 <HAL_RCC_OscConfig+0x584>
 80030d6:	4b7d      	ldr	r3, [pc, #500]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80030d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030da:	4a7c      	ldr	r2, [pc, #496]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	6713      	str	r3, [r2, #112]	; 0x70
 80030e2:	e02d      	b.n	8003140 <HAL_RCC_OscConfig+0x5e0>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10c      	bne.n	8003106 <HAL_RCC_OscConfig+0x5a6>
 80030ec:	4b77      	ldr	r3, [pc, #476]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80030ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f0:	4a76      	ldr	r2, [pc, #472]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80030f2:	f023 0301 	bic.w	r3, r3, #1
 80030f6:	6713      	str	r3, [r2, #112]	; 0x70
 80030f8:	4b74      	ldr	r3, [pc, #464]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80030fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fc:	4a73      	ldr	r2, [pc, #460]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80030fe:	f023 0304 	bic.w	r3, r3, #4
 8003102:	6713      	str	r3, [r2, #112]	; 0x70
 8003104:	e01c      	b.n	8003140 <HAL_RCC_OscConfig+0x5e0>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b05      	cmp	r3, #5
 800310c:	d10c      	bne.n	8003128 <HAL_RCC_OscConfig+0x5c8>
 800310e:	4b6f      	ldr	r3, [pc, #444]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003112:	4a6e      	ldr	r2, [pc, #440]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003114:	f043 0304 	orr.w	r3, r3, #4
 8003118:	6713      	str	r3, [r2, #112]	; 0x70
 800311a:	4b6c      	ldr	r3, [pc, #432]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311e:	4a6b      	ldr	r2, [pc, #428]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003120:	f043 0301 	orr.w	r3, r3, #1
 8003124:	6713      	str	r3, [r2, #112]	; 0x70
 8003126:	e00b      	b.n	8003140 <HAL_RCC_OscConfig+0x5e0>
 8003128:	4b68      	ldr	r3, [pc, #416]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 800312a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312c:	4a67      	ldr	r2, [pc, #412]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 800312e:	f023 0301 	bic.w	r3, r3, #1
 8003132:	6713      	str	r3, [r2, #112]	; 0x70
 8003134:	4b65      	ldr	r3, [pc, #404]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003138:	4a64      	ldr	r2, [pc, #400]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 800313a:	f023 0304 	bic.w	r3, r3, #4
 800313e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d015      	beq.n	8003174 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003148:	f7fe fc32 	bl	80019b0 <HAL_GetTick>
 800314c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800314e:	e00a      	b.n	8003166 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003150:	f7fe fc2e 	bl	80019b0 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f241 3288 	movw	r2, #5000	; 0x1388
 800315e:	4293      	cmp	r3, r2
 8003160:	d901      	bls.n	8003166 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e14e      	b.n	8003404 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003166:	4b59      	ldr	r3, [pc, #356]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d0ee      	beq.n	8003150 <HAL_RCC_OscConfig+0x5f0>
 8003172:	e014      	b.n	800319e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003174:	f7fe fc1c 	bl	80019b0 <HAL_GetTick>
 8003178:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800317a:	e00a      	b.n	8003192 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317c:	f7fe fc18 	bl	80019b0 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	; 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e138      	b.n	8003404 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003192:	4b4e      	ldr	r3, [pc, #312]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1ee      	bne.n	800317c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 812d 	beq.w	8003402 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80031a8:	4b48      	ldr	r3, [pc, #288]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031b0:	2b18      	cmp	r3, #24
 80031b2:	f000 80bd 	beq.w	8003330 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	f040 809e 	bne.w	80032fc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031c0:	4b42      	ldr	r3, [pc, #264]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a41      	ldr	r2, [pc, #260]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80031c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031cc:	f7fe fbf0 	bl	80019b0 <HAL_GetTick>
 80031d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031d4:	f7fe fbec 	bl	80019b0 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e10e      	b.n	8003404 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031e6:	4b39      	ldr	r3, [pc, #228]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f0      	bne.n	80031d4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031f2:	4b36      	ldr	r3, [pc, #216]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80031f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031f6:	4b37      	ldr	r3, [pc, #220]	; (80032d4 <HAL_RCC_OscConfig+0x774>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003202:	0112      	lsls	r2, r2, #4
 8003204:	430a      	orrs	r2, r1
 8003206:	4931      	ldr	r1, [pc, #196]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003208:	4313      	orrs	r3, r2
 800320a:	628b      	str	r3, [r1, #40]	; 0x28
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003210:	3b01      	subs	r3, #1
 8003212:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321a:	3b01      	subs	r3, #1
 800321c:	025b      	lsls	r3, r3, #9
 800321e:	b29b      	uxth	r3, r3
 8003220:	431a      	orrs	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003226:	3b01      	subs	r3, #1
 8003228:	041b      	lsls	r3, r3, #16
 800322a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003234:	3b01      	subs	r3, #1
 8003236:	061b      	lsls	r3, r3, #24
 8003238:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800323c:	4923      	ldr	r1, [pc, #140]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 800323e:	4313      	orrs	r3, r2
 8003240:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003242:	4b22      	ldr	r3, [pc, #136]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	4a21      	ldr	r2, [pc, #132]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003248:	f023 0301 	bic.w	r3, r3, #1
 800324c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800324e:	4b1f      	ldr	r3, [pc, #124]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003252:	4b21      	ldr	r3, [pc, #132]	; (80032d8 <HAL_RCC_OscConfig+0x778>)
 8003254:	4013      	ands	r3, r2
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800325a:	00d2      	lsls	r2, r2, #3
 800325c:	491b      	ldr	r1, [pc, #108]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 800325e:	4313      	orrs	r3, r2
 8003260:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003262:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003266:	f023 020c 	bic.w	r2, r3, #12
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326e:	4917      	ldr	r1, [pc, #92]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003270:	4313      	orrs	r3, r2
 8003272:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003274:	4b15      	ldr	r3, [pc, #84]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	f023 0202 	bic.w	r2, r3, #2
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003280:	4912      	ldr	r1, [pc, #72]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003282:	4313      	orrs	r3, r2
 8003284:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003286:	4b11      	ldr	r3, [pc, #68]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	4a10      	ldr	r2, [pc, #64]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 800328c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003290:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003292:	4b0e      	ldr	r3, [pc, #56]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003296:	4a0d      	ldr	r2, [pc, #52]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 8003298:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800329c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800329e:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80032a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a2:	4a0a      	ldr	r2, [pc, #40]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80032a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032a8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80032aa:	4b08      	ldr	r3, [pc, #32]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80032ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ae:	4a07      	ldr	r2, [pc, #28]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032b6:	4b05      	ldr	r3, [pc, #20]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a04      	ldr	r2, [pc, #16]	; (80032cc <HAL_RCC_OscConfig+0x76c>)
 80032bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c2:	f7fe fb75 	bl	80019b0 <HAL_GetTick>
 80032c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032c8:	e011      	b.n	80032ee <HAL_RCC_OscConfig+0x78e>
 80032ca:	bf00      	nop
 80032cc:	58024400 	.word	0x58024400
 80032d0:	58024800 	.word	0x58024800
 80032d4:	fffffc0c 	.word	0xfffffc0c
 80032d8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032dc:	f7fe fb68 	bl	80019b0 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e08a      	b.n	8003404 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032ee:	4b47      	ldr	r3, [pc, #284]	; (800340c <HAL_RCC_OscConfig+0x8ac>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0f0      	beq.n	80032dc <HAL_RCC_OscConfig+0x77c>
 80032fa:	e082      	b.n	8003402 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fc:	4b43      	ldr	r3, [pc, #268]	; (800340c <HAL_RCC_OscConfig+0x8ac>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a42      	ldr	r2, [pc, #264]	; (800340c <HAL_RCC_OscConfig+0x8ac>)
 8003302:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003308:	f7fe fb52 	bl	80019b0 <HAL_GetTick>
 800330c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003310:	f7fe fb4e 	bl	80019b0 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e070      	b.n	8003404 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003322:	4b3a      	ldr	r3, [pc, #232]	; (800340c <HAL_RCC_OscConfig+0x8ac>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x7b0>
 800332e:	e068      	b.n	8003402 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003330:	4b36      	ldr	r3, [pc, #216]	; (800340c <HAL_RCC_OscConfig+0x8ac>)
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003336:	4b35      	ldr	r3, [pc, #212]	; (800340c <HAL_RCC_OscConfig+0x8ac>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	2b01      	cmp	r3, #1
 8003342:	d031      	beq.n	80033a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	f003 0203 	and.w	r2, r3, #3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800334e:	429a      	cmp	r2, r3
 8003350:	d12a      	bne.n	80033a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	091b      	lsrs	r3, r3, #4
 8003356:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335e:	429a      	cmp	r2, r3
 8003360:	d122      	bne.n	80033a8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800336e:	429a      	cmp	r2, r3
 8003370:	d11a      	bne.n	80033a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	0a5b      	lsrs	r3, r3, #9
 8003376:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800337e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003380:	429a      	cmp	r2, r3
 8003382:	d111      	bne.n	80033a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	0c1b      	lsrs	r3, r3, #16
 8003388:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003390:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003392:	429a      	cmp	r2, r3
 8003394:	d108      	bne.n	80033a8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	0e1b      	lsrs	r3, r3, #24
 800339a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d001      	beq.n	80033ac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e02b      	b.n	8003404 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80033ac:	4b17      	ldr	r3, [pc, #92]	; (800340c <HAL_RCC_OscConfig+0x8ac>)
 80033ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b0:	08db      	lsrs	r3, r3, #3
 80033b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033b6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d01f      	beq.n	8003402 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80033c2:	4b12      	ldr	r3, [pc, #72]	; (800340c <HAL_RCC_OscConfig+0x8ac>)
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	4a11      	ldr	r2, [pc, #68]	; (800340c <HAL_RCC_OscConfig+0x8ac>)
 80033c8:	f023 0301 	bic.w	r3, r3, #1
 80033cc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033ce:	f7fe faef 	bl	80019b0 <HAL_GetTick>
 80033d2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80033d4:	bf00      	nop
 80033d6:	f7fe faeb 	bl	80019b0 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033de:	4293      	cmp	r3, r2
 80033e0:	d0f9      	beq.n	80033d6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80033e2:	4b0a      	ldr	r3, [pc, #40]	; (800340c <HAL_RCC_OscConfig+0x8ac>)
 80033e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e6:	4b0a      	ldr	r3, [pc, #40]	; (8003410 <HAL_RCC_OscConfig+0x8b0>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033ee:	00d2      	lsls	r2, r2, #3
 80033f0:	4906      	ldr	r1, [pc, #24]	; (800340c <HAL_RCC_OscConfig+0x8ac>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80033f6:	4b05      	ldr	r3, [pc, #20]	; (800340c <HAL_RCC_OscConfig+0x8ac>)
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	4a04      	ldr	r2, [pc, #16]	; (800340c <HAL_RCC_OscConfig+0x8ac>)
 80033fc:	f043 0301 	orr.w	r3, r3, #1
 8003400:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003402:	2300      	movs	r3, #0
}
 8003404:	4618      	mov	r0, r3
 8003406:	3730      	adds	r7, #48	; 0x30
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	58024400 	.word	0x58024400
 8003410:	ffff0007 	.word	0xffff0007

08003414 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d101      	bne.n	8003428 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e19c      	b.n	8003762 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003428:	4b8a      	ldr	r3, [pc, #552]	; (8003654 <HAL_RCC_ClockConfig+0x240>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 030f 	and.w	r3, r3, #15
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	429a      	cmp	r2, r3
 8003434:	d910      	bls.n	8003458 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003436:	4b87      	ldr	r3, [pc, #540]	; (8003654 <HAL_RCC_ClockConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f023 020f 	bic.w	r2, r3, #15
 800343e:	4985      	ldr	r1, [pc, #532]	; (8003654 <HAL_RCC_ClockConfig+0x240>)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	4313      	orrs	r3, r2
 8003444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003446:	4b83      	ldr	r3, [pc, #524]	; (8003654 <HAL_RCC_ClockConfig+0x240>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e184      	b.n	8003762 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d010      	beq.n	8003486 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	4b7b      	ldr	r3, [pc, #492]	; (8003658 <HAL_RCC_ClockConfig+0x244>)
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003470:	429a      	cmp	r2, r3
 8003472:	d908      	bls.n	8003486 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003474:	4b78      	ldr	r3, [pc, #480]	; (8003658 <HAL_RCC_ClockConfig+0x244>)
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	4975      	ldr	r1, [pc, #468]	; (8003658 <HAL_RCC_ClockConfig+0x244>)
 8003482:	4313      	orrs	r3, r2
 8003484:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d010      	beq.n	80034b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	4b70      	ldr	r3, [pc, #448]	; (8003658 <HAL_RCC_ClockConfig+0x244>)
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800349e:	429a      	cmp	r2, r3
 80034a0:	d908      	bls.n	80034b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034a2:	4b6d      	ldr	r3, [pc, #436]	; (8003658 <HAL_RCC_ClockConfig+0x244>)
 80034a4:	69db      	ldr	r3, [r3, #28]
 80034a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	496a      	ldr	r1, [pc, #424]	; (8003658 <HAL_RCC_ClockConfig+0x244>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0310 	and.w	r3, r3, #16
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d010      	beq.n	80034e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	699a      	ldr	r2, [r3, #24]
 80034c4:	4b64      	ldr	r3, [pc, #400]	; (8003658 <HAL_RCC_ClockConfig+0x244>)
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d908      	bls.n	80034e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034d0:	4b61      	ldr	r3, [pc, #388]	; (8003658 <HAL_RCC_ClockConfig+0x244>)
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	495e      	ldr	r1, [pc, #376]	; (8003658 <HAL_RCC_ClockConfig+0x244>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0320 	and.w	r3, r3, #32
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d010      	beq.n	8003510 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69da      	ldr	r2, [r3, #28]
 80034f2:	4b59      	ldr	r3, [pc, #356]	; (8003658 <HAL_RCC_ClockConfig+0x244>)
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d908      	bls.n	8003510 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80034fe:	4b56      	ldr	r3, [pc, #344]	; (8003658 <HAL_RCC_ClockConfig+0x244>)
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69db      	ldr	r3, [r3, #28]
 800350a:	4953      	ldr	r1, [pc, #332]	; (8003658 <HAL_RCC_ClockConfig+0x244>)
 800350c:	4313      	orrs	r3, r2
 800350e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d010      	beq.n	800353e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	4b4d      	ldr	r3, [pc, #308]	; (8003658 <HAL_RCC_ClockConfig+0x244>)
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	f003 030f 	and.w	r3, r3, #15
 8003528:	429a      	cmp	r2, r3
 800352a:	d908      	bls.n	800353e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800352c:	4b4a      	ldr	r3, [pc, #296]	; (8003658 <HAL_RCC_ClockConfig+0x244>)
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	f023 020f 	bic.w	r2, r3, #15
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	4947      	ldr	r1, [pc, #284]	; (8003658 <HAL_RCC_ClockConfig+0x244>)
 800353a:	4313      	orrs	r3, r2
 800353c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d055      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800354a:	4b43      	ldr	r3, [pc, #268]	; (8003658 <HAL_RCC_ClockConfig+0x244>)
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	4940      	ldr	r1, [pc, #256]	; (8003658 <HAL_RCC_ClockConfig+0x244>)
 8003558:	4313      	orrs	r3, r2
 800355a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b02      	cmp	r3, #2
 8003562:	d107      	bne.n	8003574 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003564:	4b3c      	ldr	r3, [pc, #240]	; (8003658 <HAL_RCC_ClockConfig+0x244>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d121      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0f6      	b.n	8003762 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	2b03      	cmp	r3, #3
 800357a:	d107      	bne.n	800358c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800357c:	4b36      	ldr	r3, [pc, #216]	; (8003658 <HAL_RCC_ClockConfig+0x244>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d115      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0ea      	b.n	8003762 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d107      	bne.n	80035a4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003594:	4b30      	ldr	r3, [pc, #192]	; (8003658 <HAL_RCC_ClockConfig+0x244>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359c:	2b00      	cmp	r3, #0
 800359e:	d109      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e0de      	b.n	8003762 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035a4:	4b2c      	ldr	r3, [pc, #176]	; (8003658 <HAL_RCC_ClockConfig+0x244>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 0304 	and.w	r3, r3, #4
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0d6      	b.n	8003762 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035b4:	4b28      	ldr	r3, [pc, #160]	; (8003658 <HAL_RCC_ClockConfig+0x244>)
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	f023 0207 	bic.w	r2, r3, #7
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	4925      	ldr	r1, [pc, #148]	; (8003658 <HAL_RCC_ClockConfig+0x244>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c6:	f7fe f9f3 	bl	80019b0 <HAL_GetTick>
 80035ca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035cc:	e00a      	b.n	80035e4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035ce:	f7fe f9ef 	bl	80019b0 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035dc:	4293      	cmp	r3, r2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e0be      	b.n	8003762 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e4:	4b1c      	ldr	r3, [pc, #112]	; (8003658 <HAL_RCC_ClockConfig+0x244>)
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	00db      	lsls	r3, r3, #3
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d1eb      	bne.n	80035ce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d010      	beq.n	8003624 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68da      	ldr	r2, [r3, #12]
 8003606:	4b14      	ldr	r3, [pc, #80]	; (8003658 <HAL_RCC_ClockConfig+0x244>)
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	429a      	cmp	r2, r3
 8003610:	d208      	bcs.n	8003624 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003612:	4b11      	ldr	r3, [pc, #68]	; (8003658 <HAL_RCC_ClockConfig+0x244>)
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	f023 020f 	bic.w	r2, r3, #15
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	490e      	ldr	r1, [pc, #56]	; (8003658 <HAL_RCC_ClockConfig+0x244>)
 8003620:	4313      	orrs	r3, r2
 8003622:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003624:	4b0b      	ldr	r3, [pc, #44]	; (8003654 <HAL_RCC_ClockConfig+0x240>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 030f 	and.w	r3, r3, #15
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d214      	bcs.n	800365c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003632:	4b08      	ldr	r3, [pc, #32]	; (8003654 <HAL_RCC_ClockConfig+0x240>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 020f 	bic.w	r2, r3, #15
 800363a:	4906      	ldr	r1, [pc, #24]	; (8003654 <HAL_RCC_ClockConfig+0x240>)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003642:	4b04      	ldr	r3, [pc, #16]	; (8003654 <HAL_RCC_ClockConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d005      	beq.n	800365c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e086      	b.n	8003762 <HAL_RCC_ClockConfig+0x34e>
 8003654:	52002000 	.word	0x52002000
 8003658:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d010      	beq.n	800368a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	4b3f      	ldr	r3, [pc, #252]	; (800376c <HAL_RCC_ClockConfig+0x358>)
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003674:	429a      	cmp	r2, r3
 8003676:	d208      	bcs.n	800368a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003678:	4b3c      	ldr	r3, [pc, #240]	; (800376c <HAL_RCC_ClockConfig+0x358>)
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	691b      	ldr	r3, [r3, #16]
 8003684:	4939      	ldr	r1, [pc, #228]	; (800376c <HAL_RCC_ClockConfig+0x358>)
 8003686:	4313      	orrs	r3, r2
 8003688:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d010      	beq.n	80036b8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695a      	ldr	r2, [r3, #20]
 800369a:	4b34      	ldr	r3, [pc, #208]	; (800376c <HAL_RCC_ClockConfig+0x358>)
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d208      	bcs.n	80036b8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036a6:	4b31      	ldr	r3, [pc, #196]	; (800376c <HAL_RCC_ClockConfig+0x358>)
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	492e      	ldr	r1, [pc, #184]	; (800376c <HAL_RCC_ClockConfig+0x358>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0310 	and.w	r3, r3, #16
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d010      	beq.n	80036e6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	699a      	ldr	r2, [r3, #24]
 80036c8:	4b28      	ldr	r3, [pc, #160]	; (800376c <HAL_RCC_ClockConfig+0x358>)
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d208      	bcs.n	80036e6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036d4:	4b25      	ldr	r3, [pc, #148]	; (800376c <HAL_RCC_ClockConfig+0x358>)
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	4922      	ldr	r1, [pc, #136]	; (800376c <HAL_RCC_ClockConfig+0x358>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d010      	beq.n	8003714 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69da      	ldr	r2, [r3, #28]
 80036f6:	4b1d      	ldr	r3, [pc, #116]	; (800376c <HAL_RCC_ClockConfig+0x358>)
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036fe:	429a      	cmp	r2, r3
 8003700:	d208      	bcs.n	8003714 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003702:	4b1a      	ldr	r3, [pc, #104]	; (800376c <HAL_RCC_ClockConfig+0x358>)
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	4917      	ldr	r1, [pc, #92]	; (800376c <HAL_RCC_ClockConfig+0x358>)
 8003710:	4313      	orrs	r3, r2
 8003712:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003714:	f000 f89e 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 8003718:	4602      	mov	r2, r0
 800371a:	4b14      	ldr	r3, [pc, #80]	; (800376c <HAL_RCC_ClockConfig+0x358>)
 800371c:	699b      	ldr	r3, [r3, #24]
 800371e:	0a1b      	lsrs	r3, r3, #8
 8003720:	f003 030f 	and.w	r3, r3, #15
 8003724:	4912      	ldr	r1, [pc, #72]	; (8003770 <HAL_RCC_ClockConfig+0x35c>)
 8003726:	5ccb      	ldrb	r3, [r1, r3]
 8003728:	f003 031f 	and.w	r3, r3, #31
 800372c:	fa22 f303 	lsr.w	r3, r2, r3
 8003730:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003732:	4b0e      	ldr	r3, [pc, #56]	; (800376c <HAL_RCC_ClockConfig+0x358>)
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	4a0d      	ldr	r2, [pc, #52]	; (8003770 <HAL_RCC_ClockConfig+0x35c>)
 800373c:	5cd3      	ldrb	r3, [r2, r3]
 800373e:	f003 031f 	and.w	r3, r3, #31
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	fa22 f303 	lsr.w	r3, r2, r3
 8003748:	4a0a      	ldr	r2, [pc, #40]	; (8003774 <HAL_RCC_ClockConfig+0x360>)
 800374a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800374c:	4a0a      	ldr	r2, [pc, #40]	; (8003778 <HAL_RCC_ClockConfig+0x364>)
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003752:	4b0a      	ldr	r3, [pc, #40]	; (800377c <HAL_RCC_ClockConfig+0x368>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f7fd ff4c 	bl	80015f4 <HAL_InitTick>
 800375c:	4603      	mov	r3, r0
 800375e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003760:	7bfb      	ldrb	r3, [r7, #15]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3718      	adds	r7, #24
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	58024400 	.word	0x58024400
 8003770:	0800d4c8 	.word	0x0800d4c8
 8003774:	24000004 	.word	0x24000004
 8003778:	24000000 	.word	0x24000000
 800377c:	2400000c 	.word	0x2400000c

08003780 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08c      	sub	sp, #48	; 0x30
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d12a      	bne.n	80037e8 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8003792:	4b2d      	ldr	r3, [pc, #180]	; (8003848 <HAL_RCC_MCOConfig+0xc8>)
 8003794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003798:	4a2b      	ldr	r2, [pc, #172]	; (8003848 <HAL_RCC_MCOConfig+0xc8>)
 800379a:	f043 0301 	orr.w	r3, r3, #1
 800379e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037a2:	4b29      	ldr	r3, [pc, #164]	; (8003848 <HAL_RCC_MCOConfig+0xc8>)
 80037a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	61bb      	str	r3, [r7, #24]
 80037ae:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80037b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b6:	2302      	movs	r3, #2
 80037b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037ba:	2303      	movs	r3, #3
 80037bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037be:	2300      	movs	r3, #0
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80037c2:	2300      	movs	r3, #0
 80037c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80037c6:	f107 031c 	add.w	r3, r7, #28
 80037ca:	4619      	mov	r1, r3
 80037cc:	481f      	ldr	r0, [pc, #124]	; (800384c <HAL_RCC_MCOConfig+0xcc>)
 80037ce:	f7fe fd0f 	bl	80021f0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80037d2:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <HAL_RCC_MCOConfig+0xc8>)
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	430b      	orrs	r3, r1
 80037e0:	4919      	ldr	r1, [pc, #100]	; (8003848 <HAL_RCC_MCOConfig+0xc8>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80037e6:	e02a      	b.n	800383e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80037e8:	4b17      	ldr	r3, [pc, #92]	; (8003848 <HAL_RCC_MCOConfig+0xc8>)
 80037ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037ee:	4a16      	ldr	r2, [pc, #88]	; (8003848 <HAL_RCC_MCOConfig+0xc8>)
 80037f0:	f043 0304 	orr.w	r3, r3, #4
 80037f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80037f8:	4b13      	ldr	r3, [pc, #76]	; (8003848 <HAL_RCC_MCOConfig+0xc8>)
 80037fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80037fe:	f003 0304 	and.w	r3, r3, #4
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003806:	f44f 7300 	mov.w	r3, #512	; 0x200
 800380a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800380c:	2302      	movs	r3, #2
 800380e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003810:	2303      	movs	r3, #3
 8003812:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003814:	2300      	movs	r3, #0
 8003816:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003818:	2300      	movs	r3, #0
 800381a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800381c:	f107 031c 	add.w	r3, r7, #28
 8003820:	4619      	mov	r1, r3
 8003822:	480b      	ldr	r0, [pc, #44]	; (8003850 <HAL_RCC_MCOConfig+0xd0>)
 8003824:	f7fe fce4 	bl	80021f0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8003828:	4b07      	ldr	r3, [pc, #28]	; (8003848 <HAL_RCC_MCOConfig+0xc8>)
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	01d9      	lsls	r1, r3, #7
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	430b      	orrs	r3, r1
 8003838:	4903      	ldr	r1, [pc, #12]	; (8003848 <HAL_RCC_MCOConfig+0xc8>)
 800383a:	4313      	orrs	r3, r2
 800383c:	610b      	str	r3, [r1, #16]
}
 800383e:	bf00      	nop
 8003840:	3730      	adds	r7, #48	; 0x30
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	58024400 	.word	0x58024400
 800384c:	58020000 	.word	0x58020000
 8003850:	58020800 	.word	0x58020800

08003854 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003854:	b480      	push	{r7}
 8003856:	b089      	sub	sp, #36	; 0x24
 8003858:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800385a:	4bb3      	ldr	r3, [pc, #716]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003862:	2b18      	cmp	r3, #24
 8003864:	f200 8155 	bhi.w	8003b12 <HAL_RCC_GetSysClockFreq+0x2be>
 8003868:	a201      	add	r2, pc, #4	; (adr r2, 8003870 <HAL_RCC_GetSysClockFreq+0x1c>)
 800386a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386e:	bf00      	nop
 8003870:	080038d5 	.word	0x080038d5
 8003874:	08003b13 	.word	0x08003b13
 8003878:	08003b13 	.word	0x08003b13
 800387c:	08003b13 	.word	0x08003b13
 8003880:	08003b13 	.word	0x08003b13
 8003884:	08003b13 	.word	0x08003b13
 8003888:	08003b13 	.word	0x08003b13
 800388c:	08003b13 	.word	0x08003b13
 8003890:	080038fb 	.word	0x080038fb
 8003894:	08003b13 	.word	0x08003b13
 8003898:	08003b13 	.word	0x08003b13
 800389c:	08003b13 	.word	0x08003b13
 80038a0:	08003b13 	.word	0x08003b13
 80038a4:	08003b13 	.word	0x08003b13
 80038a8:	08003b13 	.word	0x08003b13
 80038ac:	08003b13 	.word	0x08003b13
 80038b0:	08003901 	.word	0x08003901
 80038b4:	08003b13 	.word	0x08003b13
 80038b8:	08003b13 	.word	0x08003b13
 80038bc:	08003b13 	.word	0x08003b13
 80038c0:	08003b13 	.word	0x08003b13
 80038c4:	08003b13 	.word	0x08003b13
 80038c8:	08003b13 	.word	0x08003b13
 80038cc:	08003b13 	.word	0x08003b13
 80038d0:	08003907 	.word	0x08003907
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038d4:	4b94      	ldr	r3, [pc, #592]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0320 	and.w	r3, r3, #32
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d009      	beq.n	80038f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80038e0:	4b91      	ldr	r3, [pc, #580]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	08db      	lsrs	r3, r3, #3
 80038e6:	f003 0303 	and.w	r3, r3, #3
 80038ea:	4a90      	ldr	r2, [pc, #576]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038ec:	fa22 f303 	lsr.w	r3, r2, r3
 80038f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80038f2:	e111      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80038f4:	4b8d      	ldr	r3, [pc, #564]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80038f6:	61bb      	str	r3, [r7, #24]
      break;
 80038f8:	e10e      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80038fa:	4b8d      	ldr	r3, [pc, #564]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80038fc:	61bb      	str	r3, [r7, #24]
      break;
 80038fe:	e10b      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003900:	4b8c      	ldr	r3, [pc, #560]	; (8003b34 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003902:	61bb      	str	r3, [r7, #24]
      break;
 8003904:	e108      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003906:	4b88      	ldr	r3, [pc, #544]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390a:	f003 0303 	and.w	r3, r3, #3
 800390e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003910:	4b85      	ldr	r3, [pc, #532]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003914:	091b      	lsrs	r3, r3, #4
 8003916:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800391a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800391c:	4b82      	ldr	r3, [pc, #520]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800391e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003926:	4b80      	ldr	r3, [pc, #512]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392a:	08db      	lsrs	r3, r3, #3
 800392c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	fb02 f303 	mul.w	r3, r2, r3
 8003936:	ee07 3a90 	vmov	s15, r3
 800393a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800393e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80e1 	beq.w	8003b0c <HAL_RCC_GetSysClockFreq+0x2b8>
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2b02      	cmp	r3, #2
 800394e:	f000 8083 	beq.w	8003a58 <HAL_RCC_GetSysClockFreq+0x204>
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b02      	cmp	r3, #2
 8003956:	f200 80a1 	bhi.w	8003a9c <HAL_RCC_GetSysClockFreq+0x248>
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_RCC_GetSysClockFreq+0x114>
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d056      	beq.n	8003a14 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003966:	e099      	b.n	8003a9c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003968:	4b6f      	ldr	r3, [pc, #444]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b00      	cmp	r3, #0
 8003972:	d02d      	beq.n	80039d0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003974:	4b6c      	ldr	r3, [pc, #432]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	08db      	lsrs	r3, r3, #3
 800397a:	f003 0303 	and.w	r3, r3, #3
 800397e:	4a6b      	ldr	r2, [pc, #428]	; (8003b2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003980:	fa22 f303 	lsr.w	r3, r2, r3
 8003984:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	ee07 3a90 	vmov	s15, r3
 800398c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	ee07 3a90 	vmov	s15, r3
 8003996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800399a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800399e:	4b62      	ldr	r3, [pc, #392]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039a6:	ee07 3a90 	vmov	s15, r3
 80039aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80039b2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003b38 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80039ce:	e087      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	ee07 3a90 	vmov	s15, r3
 80039d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039da:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003b3c <HAL_RCC_GetSysClockFreq+0x2e8>
 80039de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039e2:	4b51      	ldr	r3, [pc, #324]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ea:	ee07 3a90 	vmov	s15, r3
 80039ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80039f6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003b38 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a0e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a12:	e065      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	ee07 3a90 	vmov	s15, r3
 8003a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a1e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003b40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a26:	4b40      	ldr	r3, [pc, #256]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a2e:	ee07 3a90 	vmov	s15, r3
 8003a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a36:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a3a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003b38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a52:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a56:	e043      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	ee07 3a90 	vmov	s15, r3
 8003a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a62:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003b44 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a6a:	4b2f      	ldr	r3, [pc, #188]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a72:	ee07 3a90 	vmov	s15, r3
 8003a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003a7e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003b38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a96:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003a9a:	e021      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	ee07 3a90 	vmov	s15, r3
 8003aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003b40 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aae:	4b1e      	ldr	r3, [pc, #120]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab6:	ee07 3a90 	vmov	s15, r3
 8003aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003abe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ac2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003b38 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ada:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ade:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003ae0:	4b11      	ldr	r3, [pc, #68]	; (8003b28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	0a5b      	lsrs	r3, r3, #9
 8003ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003aea:	3301      	adds	r3, #1
 8003aec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	ee07 3a90 	vmov	s15, r3
 8003af4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003af8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003afc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b04:	ee17 3a90 	vmov	r3, s15
 8003b08:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003b0a:	e005      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61bb      	str	r3, [r7, #24]
      break;
 8003b10:	e002      	b.n	8003b18 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003b12:	4b07      	ldr	r3, [pc, #28]	; (8003b30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b14:	61bb      	str	r3, [r7, #24]
      break;
 8003b16:	bf00      	nop
  }

  return sysclockfreq;
 8003b18:	69bb      	ldr	r3, [r7, #24]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3724      	adds	r7, #36	; 0x24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	58024400 	.word	0x58024400
 8003b2c:	03d09000 	.word	0x03d09000
 8003b30:	003d0900 	.word	0x003d0900
 8003b34:	017d7840 	.word	0x017d7840
 8003b38:	46000000 	.word	0x46000000
 8003b3c:	4c742400 	.word	0x4c742400
 8003b40:	4a742400 	.word	0x4a742400
 8003b44:	4bbebc20 	.word	0x4bbebc20

08003b48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003b4e:	f7ff fe81 	bl	8003854 <HAL_RCC_GetSysClockFreq>
 8003b52:	4602      	mov	r2, r0
 8003b54:	4b10      	ldr	r3, [pc, #64]	; (8003b98 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	0a1b      	lsrs	r3, r3, #8
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	490f      	ldr	r1, [pc, #60]	; (8003b9c <HAL_RCC_GetHCLKFreq+0x54>)
 8003b60:	5ccb      	ldrb	r3, [r1, r3]
 8003b62:	f003 031f 	and.w	r3, r3, #31
 8003b66:	fa22 f303 	lsr.w	r3, r2, r3
 8003b6a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003b6c:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <HAL_RCC_GetHCLKFreq+0x50>)
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	4a09      	ldr	r2, [pc, #36]	; (8003b9c <HAL_RCC_GetHCLKFreq+0x54>)
 8003b76:	5cd3      	ldrb	r3, [r2, r3]
 8003b78:	f003 031f 	and.w	r3, r3, #31
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b82:	4a07      	ldr	r2, [pc, #28]	; (8003ba0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b84:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b86:	4a07      	ldr	r2, [pc, #28]	; (8003ba4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003b8c:	4b04      	ldr	r3, [pc, #16]	; (8003ba0 <HAL_RCC_GetHCLKFreq+0x58>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	58024400 	.word	0x58024400
 8003b9c:	0800d4c8 	.word	0x0800d4c8
 8003ba0:	24000004 	.word	0x24000004
 8003ba4:	24000000 	.word	0x24000000

08003ba8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003bac:	f7ff ffcc 	bl	8003b48 <HAL_RCC_GetHCLKFreq>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	091b      	lsrs	r3, r3, #4
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	4904      	ldr	r1, [pc, #16]	; (8003bd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003bbe:	5ccb      	ldrb	r3, [r1, r3]
 8003bc0:	f003 031f 	and.w	r3, r3, #31
 8003bc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	58024400 	.word	0x58024400
 8003bd0:	0800d4c8 	.word	0x0800d4c8

08003bd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003bd8:	f7ff ffb6 	bl	8003b48 <HAL_RCC_GetHCLKFreq>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	4b06      	ldr	r3, [pc, #24]	; (8003bf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	0a1b      	lsrs	r3, r3, #8
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	4904      	ldr	r1, [pc, #16]	; (8003bfc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003bea:	5ccb      	ldrb	r3, [r1, r3]
 8003bec:	f003 031f 	and.w	r3, r3, #31
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	58024400 	.word	0x58024400
 8003bfc:	0800d4c8 	.word	0x0800d4c8

08003c00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	223f      	movs	r2, #63	; 0x3f
 8003c0e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c10:	4b1a      	ldr	r3, [pc, #104]	; (8003c7c <HAL_RCC_GetClockConfig+0x7c>)
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	f003 0207 	and.w	r2, r3, #7
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003c1c:	4b17      	ldr	r3, [pc, #92]	; (8003c7c <HAL_RCC_GetClockConfig+0x7c>)
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003c28:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <HAL_RCC_GetClockConfig+0x7c>)
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	f003 020f 	and.w	r2, r3, #15
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8003c34:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <HAL_RCC_GetClockConfig+0x7c>)
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003c40:	4b0e      	ldr	r3, [pc, #56]	; (8003c7c <HAL_RCC_GetClockConfig+0x7c>)
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <HAL_RCC_GetClockConfig+0x7c>)
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8003c58:	4b08      	ldr	r3, [pc, #32]	; (8003c7c <HAL_RCC_GetClockConfig+0x7c>)
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c64:	4b06      	ldr	r3, [pc, #24]	; (8003c80 <HAL_RCC_GetClockConfig+0x80>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 020f 	and.w	r2, r3, #15
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	601a      	str	r2, [r3, #0]
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr
 8003c7c:	58024400 	.word	0x58024400
 8003c80:	52002000 	.word	0x52002000

08003c84 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c88:	b0cc      	sub	sp, #304	; 0x130
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c90:	2300      	movs	r3, #0
 8003c92:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c96:	2300      	movs	r3, #0
 8003c98:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003ca8:	2500      	movs	r5, #0
 8003caa:	ea54 0305 	orrs.w	r3, r4, r5
 8003cae:	d049      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003cb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cb6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cba:	d02f      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003cbc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003cc0:	d828      	bhi.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003cc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003cc6:	d01a      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003cc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ccc:	d822      	bhi.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003cd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cd6:	d007      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003cd8:	e01c      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cda:	4bb8      	ldr	r3, [pc, #736]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cde:	4ab7      	ldr	r2, [pc, #732]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ce4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003ce6:	e01a      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ce8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003cec:	3308      	adds	r3, #8
 8003cee:	2102      	movs	r1, #2
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f002 fba1 	bl	8006438 <RCCEx_PLL2_Config>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003cfc:	e00f      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cfe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d02:	3328      	adds	r3, #40	; 0x28
 8003d04:	2102      	movs	r1, #2
 8003d06:	4618      	mov	r0, r3
 8003d08:	f002 fc48 	bl	800659c <RCCEx_PLL3_Config>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003d12:	e004      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003d1a:	e000      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d1e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10a      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003d26:	4ba5      	ldr	r3, [pc, #660]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d2a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003d2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d34:	4aa1      	ldr	r2, [pc, #644]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d36:	430b      	orrs	r3, r1
 8003d38:	6513      	str	r3, [r2, #80]	; 0x50
 8003d3a:	e003      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d40:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003d50:	f04f 0900 	mov.w	r9, #0
 8003d54:	ea58 0309 	orrs.w	r3, r8, r9
 8003d58:	d047      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003d5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d82a      	bhi.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003d64:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6a:	bf00      	nop
 8003d6c:	08003d81 	.word	0x08003d81
 8003d70:	08003d8f 	.word	0x08003d8f
 8003d74:	08003da5 	.word	0x08003da5
 8003d78:	08003dc3 	.word	0x08003dc3
 8003d7c:	08003dc3 	.word	0x08003dc3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d80:	4b8e      	ldr	r3, [pc, #568]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	4a8d      	ldr	r2, [pc, #564]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d8c:	e01a      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d92:	3308      	adds	r3, #8
 8003d94:	2100      	movs	r1, #0
 8003d96:	4618      	mov	r0, r3
 8003d98:	f002 fb4e 	bl	8006438 <RCCEx_PLL2_Config>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003da2:	e00f      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003da4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003da8:	3328      	adds	r3, #40	; 0x28
 8003daa:	2100      	movs	r1, #0
 8003dac:	4618      	mov	r0, r3
 8003dae:	f002 fbf5 	bl	800659c <RCCEx_PLL3_Config>
 8003db2:	4603      	mov	r3, r0
 8003db4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003db8:	e004      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003dc0:	e000      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003dc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dc4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10a      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dcc:	4b7b      	ldr	r3, [pc, #492]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd0:	f023 0107 	bic.w	r1, r3, #7
 8003dd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dda:	4a78      	ldr	r2, [pc, #480]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ddc:	430b      	orrs	r3, r1
 8003dde:	6513      	str	r3, [r2, #80]	; 0x50
 8003de0:	e003      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003de6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003dea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003df6:	f04f 0b00 	mov.w	fp, #0
 8003dfa:	ea5a 030b 	orrs.w	r3, sl, fp
 8003dfe:	d04c      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003e00:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e0a:	d030      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e10:	d829      	bhi.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003e12:	2bc0      	cmp	r3, #192	; 0xc0
 8003e14:	d02d      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003e16:	2bc0      	cmp	r3, #192	; 0xc0
 8003e18:	d825      	bhi.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003e1a:	2b80      	cmp	r3, #128	; 0x80
 8003e1c:	d018      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003e1e:	2b80      	cmp	r3, #128	; 0x80
 8003e20:	d821      	bhi.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003e26:	2b40      	cmp	r3, #64	; 0x40
 8003e28:	d007      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003e2a:	e01c      	b.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e2c:	4b63      	ldr	r3, [pc, #396]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	4a62      	ldr	r2, [pc, #392]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003e38:	e01c      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e3e:	3308      	adds	r3, #8
 8003e40:	2100      	movs	r1, #0
 8003e42:	4618      	mov	r0, r3
 8003e44:	f002 faf8 	bl	8006438 <RCCEx_PLL2_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003e4e:	e011      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e54:	3328      	adds	r3, #40	; 0x28
 8003e56:	2100      	movs	r1, #0
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f002 fb9f 	bl	800659c <RCCEx_PLL3_Config>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003e64:	e006      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003e6c:	e002      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003e6e:	bf00      	nop
 8003e70:	e000      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003e72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e74:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10a      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003e7c:	4b4f      	ldr	r3, [pc, #316]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e80:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003e84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e8a:	4a4c      	ldr	r2, [pc, #304]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	6513      	str	r3, [r2, #80]	; 0x50
 8003e90:	e003      	b.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e92:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003e96:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003e9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003ea6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8003eaa:	2300      	movs	r3, #0
 8003eac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003eb0:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	d053      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003eba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ebe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ec2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ec6:	d035      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003ec8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ecc:	d82e      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003ece:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003ed2:	d031      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003ed4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003ed8:	d828      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ede:	d01a      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003ee0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ee4:	d822      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003eea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003eee:	d007      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003ef0:	e01c      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ef2:	4b32      	ldr	r3, [pc, #200]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef6:	4a31      	ldr	r2, [pc, #196]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003efc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003efe:	e01c      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f00:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f04:	3308      	adds	r3, #8
 8003f06:	2100      	movs	r1, #0
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f002 fa95 	bl	8006438 <RCCEx_PLL2_Config>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003f14:	e011      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f1a:	3328      	adds	r3, #40	; 0x28
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f002 fb3c 	bl	800659c <RCCEx_PLL3_Config>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f2a:	e006      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003f32:	e002      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003f34:	bf00      	nop
 8003f36:	e000      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f3a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10b      	bne.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003f42:	4b1e      	ldr	r3, [pc, #120]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f46:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003f4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003f52:	4a1a      	ldr	r2, [pc, #104]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f54:	430b      	orrs	r3, r1
 8003f56:	6593      	str	r3, [r2, #88]	; 0x58
 8003f58:	e003      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003f5e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003f62:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003f6e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003f72:	2300      	movs	r3, #0
 8003f74:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003f78:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	d056      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003f82:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f8e:	d038      	beq.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003f90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f94:	d831      	bhi.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003f96:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f9a:	d034      	beq.n	8004006 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003f9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003fa0:	d82b      	bhi.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003fa2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fa6:	d01d      	beq.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003fa8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fac:	d825      	bhi.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d006      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003fb2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fb6:	d00a      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003fb8:	e01f      	b.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003fba:	bf00      	nop
 8003fbc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fc0:	4ba2      	ldr	r3, [pc, #648]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc4:	4aa1      	ldr	r2, [pc, #644]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fcc:	e01c      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fd2:	3308      	adds	r3, #8
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f002 fa2e 	bl	8006438 <RCCEx_PLL2_Config>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003fe2:	e011      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fe4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003fe8:	3328      	adds	r3, #40	; 0x28
 8003fea:	2100      	movs	r1, #0
 8003fec:	4618      	mov	r0, r3
 8003fee:	f002 fad5 	bl	800659c <RCCEx_PLL3_Config>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ff8:	e006      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004000:	e002      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004002:	bf00      	nop
 8004004:	e000      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004006:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004008:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10b      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004010:	4b8e      	ldr	r3, [pc, #568]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004014:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8004018:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800401c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004020:	4a8a      	ldr	r2, [pc, #552]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004022:	430b      	orrs	r3, r1
 8004024:	6593      	str	r3, [r2, #88]	; 0x58
 8004026:	e003      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004028:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800402c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004030:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004038:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800403c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004040:	2300      	movs	r3, #0
 8004042:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004046:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800404a:	460b      	mov	r3, r1
 800404c:	4313      	orrs	r3, r2
 800404e:	d03a      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004050:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004056:	2b30      	cmp	r3, #48	; 0x30
 8004058:	d01f      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800405a:	2b30      	cmp	r3, #48	; 0x30
 800405c:	d819      	bhi.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800405e:	2b20      	cmp	r3, #32
 8004060:	d00c      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004062:	2b20      	cmp	r3, #32
 8004064:	d815      	bhi.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004066:	2b00      	cmp	r3, #0
 8004068:	d019      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800406a:	2b10      	cmp	r3, #16
 800406c:	d111      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800406e:	4b77      	ldr	r3, [pc, #476]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004072:	4a76      	ldr	r2, [pc, #472]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004078:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800407a:	e011      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800407c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004080:	3308      	adds	r3, #8
 8004082:	2102      	movs	r1, #2
 8004084:	4618      	mov	r0, r3
 8004086:	f002 f9d7 	bl	8006438 <RCCEx_PLL2_Config>
 800408a:	4603      	mov	r3, r0
 800408c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004090:	e006      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004098:	e002      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800409a:	bf00      	nop
 800409c:	e000      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800409e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040a0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d10a      	bne.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80040a8:	4b68      	ldr	r3, [pc, #416]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ac:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80040b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b6:	4a65      	ldr	r2, [pc, #404]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040b8:	430b      	orrs	r3, r1
 80040ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80040bc:	e003      	b.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040be:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80040c2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80040c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ce:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80040d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80040d6:	2300      	movs	r3, #0
 80040d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80040dc:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80040e0:	460b      	mov	r3, r1
 80040e2:	4313      	orrs	r3, r2
 80040e4:	d051      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80040e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040f0:	d035      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80040f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040f6:	d82e      	bhi.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80040f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040fc:	d031      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80040fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004102:	d828      	bhi.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004104:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004108:	d01a      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800410a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800410e:	d822      	bhi.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004118:	d007      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800411a:	e01c      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800411c:	4b4b      	ldr	r3, [pc, #300]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004120:	4a4a      	ldr	r2, [pc, #296]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004126:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004128:	e01c      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800412a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800412e:	3308      	adds	r3, #8
 8004130:	2100      	movs	r1, #0
 8004132:	4618      	mov	r0, r3
 8004134:	f002 f980 	bl	8006438 <RCCEx_PLL2_Config>
 8004138:	4603      	mov	r3, r0
 800413a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800413e:	e011      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004140:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004144:	3328      	adds	r3, #40	; 0x28
 8004146:	2100      	movs	r1, #0
 8004148:	4618      	mov	r0, r3
 800414a:	f002 fa27 	bl	800659c <RCCEx_PLL3_Config>
 800414e:	4603      	mov	r3, r0
 8004150:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004154:	e006      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800415c:	e002      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800415e:	bf00      	nop
 8004160:	e000      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004164:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10a      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800416c:	4b37      	ldr	r3, [pc, #220]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800416e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004170:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004174:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004178:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800417a:	4a34      	ldr	r2, [pc, #208]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800417c:	430b      	orrs	r3, r1
 800417e:	6513      	str	r3, [r2, #80]	; 0x50
 8004180:	e003      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004182:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004186:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800418a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800418e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004192:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004196:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800419a:	2300      	movs	r3, #0
 800419c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80041a0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80041a4:	460b      	mov	r3, r1
 80041a6:	4313      	orrs	r3, r2
 80041a8:	d056      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80041aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80041ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041b4:	d033      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80041b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041ba:	d82c      	bhi.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80041bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041c0:	d02f      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80041c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041c6:	d826      	bhi.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80041c8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041cc:	d02b      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80041ce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80041d2:	d820      	bhi.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80041d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041d8:	d012      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80041da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80041de:	d81a      	bhi.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d022      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80041e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e8:	d115      	bne.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80041ee:	3308      	adds	r3, #8
 80041f0:	2101      	movs	r1, #1
 80041f2:	4618      	mov	r0, r3
 80041f4:	f002 f920 	bl	8006438 <RCCEx_PLL2_Config>
 80041f8:	4603      	mov	r3, r0
 80041fa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80041fe:	e015      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004200:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004204:	3328      	adds	r3, #40	; 0x28
 8004206:	2101      	movs	r1, #1
 8004208:	4618      	mov	r0, r3
 800420a:	f002 f9c7 	bl	800659c <RCCEx_PLL3_Config>
 800420e:	4603      	mov	r3, r0
 8004210:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004214:	e00a      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800421c:	e006      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800421e:	bf00      	nop
 8004220:	e004      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004222:	bf00      	nop
 8004224:	e002      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004226:	bf00      	nop
 8004228:	e000      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800422a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800422c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10d      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004234:	4b05      	ldr	r3, [pc, #20]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004238:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800423c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004240:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004242:	4a02      	ldr	r2, [pc, #8]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004244:	430b      	orrs	r3, r1
 8004246:	6513      	str	r3, [r2, #80]	; 0x50
 8004248:	e006      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800424a:	bf00      	nop
 800424c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004250:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004254:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004258:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800425c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004260:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004264:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004268:	2300      	movs	r3, #0
 800426a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800426e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8004272:	460b      	mov	r3, r1
 8004274:	4313      	orrs	r3, r2
 8004276:	d055      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004278:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800427c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004280:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004284:	d033      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004286:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800428a:	d82c      	bhi.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800428c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004290:	d02f      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004296:	d826      	bhi.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004298:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800429c:	d02b      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800429e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80042a2:	d820      	bhi.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80042a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042a8:	d012      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80042aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042ae:	d81a      	bhi.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d022      	beq.n	80042fa <HAL_RCCEx_PeriphCLKConfig+0x676>
 80042b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042b8:	d115      	bne.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042be:	3308      	adds	r3, #8
 80042c0:	2101      	movs	r1, #1
 80042c2:	4618      	mov	r0, r3
 80042c4:	f002 f8b8 	bl	8006438 <RCCEx_PLL2_Config>
 80042c8:	4603      	mov	r3, r0
 80042ca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80042ce:	e015      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042d4:	3328      	adds	r3, #40	; 0x28
 80042d6:	2101      	movs	r1, #1
 80042d8:	4618      	mov	r0, r3
 80042da:	f002 f95f 	bl	800659c <RCCEx_PLL3_Config>
 80042de:	4603      	mov	r3, r0
 80042e0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80042e4:	e00a      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80042ec:	e006      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80042ee:	bf00      	nop
 80042f0:	e004      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80042f2:	bf00      	nop
 80042f4:	e002      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80042f6:	bf00      	nop
 80042f8:	e000      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80042fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042fc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10b      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004304:	4bb6      	ldr	r3, [pc, #728]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004308:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800430c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004310:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004314:	4ab2      	ldr	r2, [pc, #712]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004316:	430b      	orrs	r3, r1
 8004318:	6593      	str	r3, [r2, #88]	; 0x58
 800431a:	e003      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800431c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004320:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004324:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8004330:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004334:	2300      	movs	r3, #0
 8004336:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800433a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800433e:	460b      	mov	r3, r1
 8004340:	4313      	orrs	r3, r2
 8004342:	d02a      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8004344:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004348:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800434a:	2b00      	cmp	r3, #0
 800434c:	d011      	beq.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800434e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004352:	d10a      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004354:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004358:	3308      	adds	r3, #8
 800435a:	2101      	movs	r1, #1
 800435c:	4618      	mov	r0, r3
 800435e:	f002 f86b 	bl	8006438 <RCCEx_PLL2_Config>
 8004362:	4603      	mov	r3, r0
 8004364:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8004368:	e004      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004370:	e000      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8004372:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004374:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10a      	bne.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800437c:	4b98      	ldr	r3, [pc, #608]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800437e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004380:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8004384:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800438a:	4a95      	ldr	r2, [pc, #596]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800438c:	430b      	orrs	r3, r1
 800438e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004390:	e003      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004392:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004396:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800439a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800439e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a2:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80043a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043aa:	2300      	movs	r3, #0
 80043ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80043b0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80043b4:	460b      	mov	r3, r1
 80043b6:	4313      	orrs	r3, r2
 80043b8:	d037      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80043ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80043be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043c4:	d00e      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80043c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043ca:	d816      	bhi.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x776>
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d018      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80043d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043d4:	d111      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043d6:	4b82      	ldr	r3, [pc, #520]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80043d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043da:	4a81      	ldr	r2, [pc, #516]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80043dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80043e2:	e00f      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80043e8:	3308      	adds	r3, #8
 80043ea:	2101      	movs	r1, #1
 80043ec:	4618      	mov	r0, r3
 80043ee:	f002 f823 	bl	8006438 <RCCEx_PLL2_Config>
 80043f2:	4603      	mov	r3, r0
 80043f4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80043f8:	e004      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004400:	e000      	b.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8004402:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004404:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10a      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800440c:	4b74      	ldr	r3, [pc, #464]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800440e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004410:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004414:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800441a:	4a71      	ldr	r2, [pc, #452]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800441c:	430b      	orrs	r3, r1
 800441e:	6513      	str	r3, [r2, #80]	; 0x50
 8004420:	e003      	b.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004422:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004426:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800442a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800442e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004432:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004436:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800443a:	2300      	movs	r3, #0
 800443c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004440:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004444:	460b      	mov	r3, r1
 8004446:	4313      	orrs	r3, r2
 8004448:	d03a      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800444a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800444e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004450:	2b03      	cmp	r3, #3
 8004452:	d81d      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8004454:	a201      	add	r2, pc, #4	; (adr r2, 800445c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800445a:	bf00      	nop
 800445c:	08004499 	.word	0x08004499
 8004460:	0800446d 	.word	0x0800446d
 8004464:	0800447b 	.word	0x0800447b
 8004468:	08004499 	.word	0x08004499
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800446c:	4b5c      	ldr	r3, [pc, #368]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800446e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004470:	4a5b      	ldr	r2, [pc, #364]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004472:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004476:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004478:	e00f      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800447a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800447e:	3308      	adds	r3, #8
 8004480:	2102      	movs	r1, #2
 8004482:	4618      	mov	r0, r3
 8004484:	f001 ffd8 	bl	8006438 <RCCEx_PLL2_Config>
 8004488:	4603      	mov	r3, r0
 800448a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800448e:	e004      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004496:	e000      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8004498:	bf00      	nop
    }

    if (ret == HAL_OK)
 800449a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10a      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80044a2:	4b4f      	ldr	r3, [pc, #316]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80044a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a6:	f023 0103 	bic.w	r1, r3, #3
 80044aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80044ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b0:	4a4b      	ldr	r2, [pc, #300]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80044b2:	430b      	orrs	r3, r1
 80044b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044b6:	e003      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80044bc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80044c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80044cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044d0:	2300      	movs	r3, #0
 80044d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80044d6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80044da:	460b      	mov	r3, r1
 80044dc:	4313      	orrs	r3, r2
 80044de:	f000 80a0 	beq.w	8004622 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044e2:	4b40      	ldr	r3, [pc, #256]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a3f      	ldr	r2, [pc, #252]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80044e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044ee:	f7fd fa5f 	bl	80019b0 <HAL_GetTick>
 80044f2:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80044f6:	e00b      	b.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f8:	f7fd fa5a 	bl	80019b0 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b64      	cmp	r3, #100	; 0x64
 8004506:	d903      	bls.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800450e:	e005      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004510:	4b34      	ldr	r3, [pc, #208]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004518:	2b00      	cmp	r3, #0
 800451a:	d0ed      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 800451c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004520:	2b00      	cmp	r3, #0
 8004522:	d17a      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004524:	4b2e      	ldr	r3, [pc, #184]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004526:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004528:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800452c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004530:	4053      	eors	r3, r2
 8004532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004536:	2b00      	cmp	r3, #0
 8004538:	d015      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800453a:	4b29      	ldr	r3, [pc, #164]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800453c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004542:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004546:	4b26      	ldr	r3, [pc, #152]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454a:	4a25      	ldr	r2, [pc, #148]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800454c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004550:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004552:	4b23      	ldr	r3, [pc, #140]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004556:	4a22      	ldr	r2, [pc, #136]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800455c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800455e:	4a20      	ldr	r2, [pc, #128]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004560:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004564:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004566:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800456a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800456e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004572:	d118      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004574:	f7fd fa1c 	bl	80019b0 <HAL_GetTick>
 8004578:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800457c:	e00d      	b.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800457e:	f7fd fa17 	bl	80019b0 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004588:	1ad2      	subs	r2, r2, r3
 800458a:	f241 3388 	movw	r3, #5000	; 0x1388
 800458e:	429a      	cmp	r2, r3
 8004590:	d903      	bls.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8004598:	e005      	b.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800459a:	4b11      	ldr	r3, [pc, #68]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800459c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459e:	f003 0302 	and.w	r3, r3, #2
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d0eb      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 80045a6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d130      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045b2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80045b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045be:	d115      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x968>
 80045c0:	4b07      	ldr	r3, [pc, #28]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80045c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80045d0:	091a      	lsrs	r2, r3, #4
 80045d2:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	4a02      	ldr	r2, [pc, #8]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80045d8:	430b      	orrs	r3, r1
 80045da:	6113      	str	r3, [r2, #16]
 80045dc:	e00c      	b.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x974>
 80045de:	bf00      	nop
 80045e0:	58024400 	.word	0x58024400
 80045e4:	58024800 	.word	0x58024800
 80045e8:	00ffffcf 	.word	0x00ffffcf
 80045ec:	4bd4      	ldr	r3, [pc, #848]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80045ee:	691b      	ldr	r3, [r3, #16]
 80045f0:	4ad3      	ldr	r2, [pc, #844]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80045f2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80045f6:	6113      	str	r3, [r2, #16]
 80045f8:	4bd1      	ldr	r3, [pc, #836]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80045fa:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80045fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004600:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004608:	4acd      	ldr	r2, [pc, #820]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800460a:	430b      	orrs	r3, r1
 800460c:	6713      	str	r3, [r2, #112]	; 0x70
 800460e:	e008      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004610:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004614:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8004618:	e003      	b.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800461a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800461e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004622:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462a:	f002 0301 	and.w	r3, r2, #1
 800462e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004632:	2300      	movs	r3, #0
 8004634:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004638:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800463c:	460b      	mov	r3, r1
 800463e:	4313      	orrs	r3, r2
 8004640:	f000 808b 	beq.w	800475a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004644:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004648:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800464c:	2b28      	cmp	r3, #40	; 0x28
 800464e:	d86b      	bhi.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004650:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8004652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004656:	bf00      	nop
 8004658:	08004731 	.word	0x08004731
 800465c:	08004729 	.word	0x08004729
 8004660:	08004729 	.word	0x08004729
 8004664:	08004729 	.word	0x08004729
 8004668:	08004729 	.word	0x08004729
 800466c:	08004729 	.word	0x08004729
 8004670:	08004729 	.word	0x08004729
 8004674:	08004729 	.word	0x08004729
 8004678:	080046fd 	.word	0x080046fd
 800467c:	08004729 	.word	0x08004729
 8004680:	08004729 	.word	0x08004729
 8004684:	08004729 	.word	0x08004729
 8004688:	08004729 	.word	0x08004729
 800468c:	08004729 	.word	0x08004729
 8004690:	08004729 	.word	0x08004729
 8004694:	08004729 	.word	0x08004729
 8004698:	08004713 	.word	0x08004713
 800469c:	08004729 	.word	0x08004729
 80046a0:	08004729 	.word	0x08004729
 80046a4:	08004729 	.word	0x08004729
 80046a8:	08004729 	.word	0x08004729
 80046ac:	08004729 	.word	0x08004729
 80046b0:	08004729 	.word	0x08004729
 80046b4:	08004729 	.word	0x08004729
 80046b8:	08004731 	.word	0x08004731
 80046bc:	08004729 	.word	0x08004729
 80046c0:	08004729 	.word	0x08004729
 80046c4:	08004729 	.word	0x08004729
 80046c8:	08004729 	.word	0x08004729
 80046cc:	08004729 	.word	0x08004729
 80046d0:	08004729 	.word	0x08004729
 80046d4:	08004729 	.word	0x08004729
 80046d8:	08004731 	.word	0x08004731
 80046dc:	08004729 	.word	0x08004729
 80046e0:	08004729 	.word	0x08004729
 80046e4:	08004729 	.word	0x08004729
 80046e8:	08004729 	.word	0x08004729
 80046ec:	08004729 	.word	0x08004729
 80046f0:	08004729 	.word	0x08004729
 80046f4:	08004729 	.word	0x08004729
 80046f8:	08004731 	.word	0x08004731
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004700:	3308      	adds	r3, #8
 8004702:	2101      	movs	r1, #1
 8004704:	4618      	mov	r0, r3
 8004706:	f001 fe97 	bl	8006438 <RCCEx_PLL2_Config>
 800470a:	4603      	mov	r3, r0
 800470c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004710:	e00f      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004712:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004716:	3328      	adds	r3, #40	; 0x28
 8004718:	2101      	movs	r1, #1
 800471a:	4618      	mov	r0, r3
 800471c:	f001 ff3e 	bl	800659c <RCCEx_PLL3_Config>
 8004720:	4603      	mov	r3, r0
 8004722:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004726:	e004      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800472e:	e000      	b.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8004730:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004732:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10b      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800473a:	4b81      	ldr	r3, [pc, #516]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800473c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004742:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800474a:	4a7d      	ldr	r2, [pc, #500]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800474c:	430b      	orrs	r3, r1
 800474e:	6553      	str	r3, [r2, #84]	; 0x54
 8004750:	e003      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004752:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004756:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800475a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800475e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004762:	f002 0302 	and.w	r3, r2, #2
 8004766:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800476a:	2300      	movs	r3, #0
 800476c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004770:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004774:	460b      	mov	r3, r1
 8004776:	4313      	orrs	r3, r2
 8004778:	d042      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800477a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800477e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004780:	2b05      	cmp	r3, #5
 8004782:	d825      	bhi.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8004784:	a201      	add	r2, pc, #4	; (adr r2, 800478c <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8004786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478a:	bf00      	nop
 800478c:	080047d9 	.word	0x080047d9
 8004790:	080047a5 	.word	0x080047a5
 8004794:	080047bb 	.word	0x080047bb
 8004798:	080047d9 	.word	0x080047d9
 800479c:	080047d9 	.word	0x080047d9
 80047a0:	080047d9 	.word	0x080047d9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80047a8:	3308      	adds	r3, #8
 80047aa:	2101      	movs	r1, #1
 80047ac:	4618      	mov	r0, r3
 80047ae:	f001 fe43 	bl	8006438 <RCCEx_PLL2_Config>
 80047b2:	4603      	mov	r3, r0
 80047b4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80047b8:	e00f      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80047be:	3328      	adds	r3, #40	; 0x28
 80047c0:	2101      	movs	r1, #1
 80047c2:	4618      	mov	r0, r3
 80047c4:	f001 feea 	bl	800659c <RCCEx_PLL3_Config>
 80047c8:	4603      	mov	r3, r0
 80047ca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80047ce:	e004      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80047d6:	e000      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 80047d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047da:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d10a      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80047e2:	4b57      	ldr	r3, [pc, #348]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80047e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e6:	f023 0107 	bic.w	r1, r3, #7
 80047ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80047ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047f0:	4a53      	ldr	r2, [pc, #332]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80047f2:	430b      	orrs	r3, r1
 80047f4:	6553      	str	r3, [r2, #84]	; 0x54
 80047f6:	e003      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80047fc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004800:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004808:	f002 0304 	and.w	r3, r2, #4
 800480c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004810:	2300      	movs	r3, #0
 8004812:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004816:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800481a:	460b      	mov	r3, r1
 800481c:	4313      	orrs	r3, r2
 800481e:	d044      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004820:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004824:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004828:	2b05      	cmp	r3, #5
 800482a:	d825      	bhi.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 800482c:	a201      	add	r2, pc, #4	; (adr r2, 8004834 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 800482e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004832:	bf00      	nop
 8004834:	08004881 	.word	0x08004881
 8004838:	0800484d 	.word	0x0800484d
 800483c:	08004863 	.word	0x08004863
 8004840:	08004881 	.word	0x08004881
 8004844:	08004881 	.word	0x08004881
 8004848:	08004881 	.word	0x08004881
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800484c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004850:	3308      	adds	r3, #8
 8004852:	2101      	movs	r1, #1
 8004854:	4618      	mov	r0, r3
 8004856:	f001 fdef 	bl	8006438 <RCCEx_PLL2_Config>
 800485a:	4603      	mov	r3, r0
 800485c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004860:	e00f      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004862:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004866:	3328      	adds	r3, #40	; 0x28
 8004868:	2101      	movs	r1, #1
 800486a:	4618      	mov	r0, r3
 800486c:	f001 fe96 	bl	800659c <RCCEx_PLL3_Config>
 8004870:	4603      	mov	r3, r0
 8004872:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004876:	e004      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800487e:	e000      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8004880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004882:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10b      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800488a:	4b2d      	ldr	r3, [pc, #180]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800488c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488e:	f023 0107 	bic.w	r1, r3, #7
 8004892:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004896:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800489a:	4a29      	ldr	r2, [pc, #164]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800489c:	430b      	orrs	r3, r1
 800489e:	6593      	str	r3, [r2, #88]	; 0x58
 80048a0:	e003      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80048a6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80048ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b2:	f002 0320 	and.w	r3, r2, #32
 80048b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048ba:	2300      	movs	r3, #0
 80048bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80048c4:	460b      	mov	r3, r1
 80048c6:	4313      	orrs	r3, r2
 80048c8:	d057      	beq.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80048ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80048ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048d6:	d035      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 80048d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048dc:	d82c      	bhi.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80048de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e2:	d031      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 80048e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048e8:	d826      	bhi.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80048ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80048ee:	d02d      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 80048f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80048f4:	d820      	bhi.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80048f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048fa:	d012      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 80048fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004900:	d81a      	bhi.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004902:	2b00      	cmp	r3, #0
 8004904:	d024      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8004906:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800490a:	d115      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800490c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004910:	3308      	adds	r3, #8
 8004912:	2100      	movs	r1, #0
 8004914:	4618      	mov	r0, r3
 8004916:	f001 fd8f 	bl	8006438 <RCCEx_PLL2_Config>
 800491a:	4603      	mov	r3, r0
 800491c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004920:	e017      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004922:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004926:	3328      	adds	r3, #40	; 0x28
 8004928:	2102      	movs	r1, #2
 800492a:	4618      	mov	r0, r3
 800492c:	f001 fe36 	bl	800659c <RCCEx_PLL3_Config>
 8004930:	4603      	mov	r3, r0
 8004932:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004936:	e00c      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800493e:	e008      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8004940:	58024400 	.word	0x58024400
        break;
 8004944:	bf00      	nop
 8004946:	e004      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004948:	bf00      	nop
 800494a:	e002      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800494c:	bf00      	nop
 800494e:	e000      	b.n	8004952 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004950:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004952:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10b      	bne.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800495a:	4bc2      	ldr	r3, [pc, #776]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800495c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004962:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800496a:	4abe      	ldr	r2, [pc, #760]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800496c:	430b      	orrs	r3, r1
 800496e:	6553      	str	r3, [r2, #84]	; 0x54
 8004970:	e003      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004972:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004976:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800497a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800497e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004982:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004986:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800498a:	2300      	movs	r3, #0
 800498c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004990:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004994:	460b      	mov	r3, r1
 8004996:	4313      	orrs	r3, r2
 8004998:	d055      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800499a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800499e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80049a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80049a6:	d033      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 80049a8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80049ac:	d82c      	bhi.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80049ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b2:	d02f      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 80049b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b8:	d826      	bhi.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80049ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049be:	d02b      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 80049c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049c4:	d820      	bhi.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80049c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ca:	d012      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 80049cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049d0:	d81a      	bhi.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d022      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0xd98>
 80049d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049da:	d115      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049e0:	3308      	adds	r3, #8
 80049e2:	2100      	movs	r1, #0
 80049e4:	4618      	mov	r0, r3
 80049e6:	f001 fd27 	bl	8006438 <RCCEx_PLL2_Config>
 80049ea:	4603      	mov	r3, r0
 80049ec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80049f0:	e015      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049f6:	3328      	adds	r3, #40	; 0x28
 80049f8:	2102      	movs	r1, #2
 80049fa:	4618      	mov	r0, r3
 80049fc:	f001 fdce 	bl	800659c <RCCEx_PLL3_Config>
 8004a00:	4603      	mov	r3, r0
 8004a02:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a06:	e00a      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004a0e:	e006      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004a10:	bf00      	nop
 8004a12:	e004      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004a14:	bf00      	nop
 8004a16:	e002      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004a18:	bf00      	nop
 8004a1a:	e000      	b.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004a1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a1e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10b      	bne.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a26:	4b8f      	ldr	r3, [pc, #572]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004a2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004a36:	4a8b      	ldr	r2, [pc, #556]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	6593      	str	r3, [r2, #88]	; 0x58
 8004a3c:	e003      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a3e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004a42:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004a46:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4e:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004a52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004a56:	2300      	movs	r3, #0
 8004a58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a5c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004a60:	460b      	mov	r3, r1
 8004a62:	4313      	orrs	r3, r2
 8004a64:	d055      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004a66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004a6e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004a72:	d033      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004a74:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004a78:	d82c      	bhi.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004a7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a7e:	d02f      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004a80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a84:	d826      	bhi.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004a86:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004a8a:	d02b      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8004a8c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004a90:	d820      	bhi.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004a92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a96:	d012      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8004a98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a9c:	d81a      	bhi.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d022      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8004aa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aa6:	d115      	bne.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004aa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004aac:	3308      	adds	r3, #8
 8004aae:	2100      	movs	r1, #0
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	f001 fcc1 	bl	8006438 <RCCEx_PLL2_Config>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004abc:	e015      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004abe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ac2:	3328      	adds	r3, #40	; 0x28
 8004ac4:	2102      	movs	r1, #2
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f001 fd68 	bl	800659c <RCCEx_PLL3_Config>
 8004acc:	4603      	mov	r3, r0
 8004ace:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004ad2:	e00a      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004ada:	e006      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004adc:	bf00      	nop
 8004ade:	e004      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004ae0:	bf00      	nop
 8004ae2:	e002      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004ae4:	bf00      	nop
 8004ae6:	e000      	b.n	8004aea <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004ae8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004aea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10b      	bne.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004af2:	4b5c      	ldr	r3, [pc, #368]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004af6:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004afa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004afe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004b02:	4a58      	ldr	r2, [pc, #352]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b04:	430b      	orrs	r3, r1
 8004b06:	6593      	str	r3, [r2, #88]	; 0x58
 8004b08:	e003      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004b0e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004b12:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1a:	f002 0308 	and.w	r3, r2, #8
 8004b1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b22:	2300      	movs	r3, #0
 8004b24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b28:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	d01e      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004b32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b3e:	d10c      	bne.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b44:	3328      	adds	r3, #40	; 0x28
 8004b46:	2102      	movs	r1, #2
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f001 fd27 	bl	800659c <RCCEx_PLL3_Config>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004b5a:	4b42      	ldr	r3, [pc, #264]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b62:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6a:	4a3e      	ldr	r2, [pc, #248]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004b6c:	430b      	orrs	r3, r1
 8004b6e:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004b70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b78:	f002 0310 	and.w	r3, r2, #16
 8004b7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b80:	2300      	movs	r3, #0
 8004b82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004b86:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004b8a:	460b      	mov	r3, r1
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	d01e      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004b90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b9c:	d10c      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ba2:	3328      	adds	r3, #40	; 0x28
 8004ba4:	2102      	movs	r1, #2
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f001 fcf8 	bl	800659c <RCCEx_PLL3_Config>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bb8:	4b2a      	ldr	r3, [pc, #168]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bbc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004bc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004bc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bc8:	4a26      	ldr	r2, [pc, #152]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004bca:	430b      	orrs	r3, r1
 8004bcc:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd6:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004bda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bde:	2300      	movs	r3, #0
 8004be0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004be4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004be8:	460b      	mov	r3, r1
 8004bea:	4313      	orrs	r3, r2
 8004bec:	d040      	beq.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004bee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004bf2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004bf6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004bfa:	d022      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8004bfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c00:	d81b      	bhi.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8004c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c0a:	d00b      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8004c0c:	e015      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c12:	3308      	adds	r3, #8
 8004c14:	2100      	movs	r1, #0
 8004c16:	4618      	mov	r0, r3
 8004c18:	f001 fc0e 	bl	8006438 <RCCEx_PLL2_Config>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c22:	e00f      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c24:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c28:	3328      	adds	r3, #40	; 0x28
 8004c2a:	2102      	movs	r1, #2
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f001 fcb5 	bl	800659c <RCCEx_PLL3_Config>
 8004c32:	4603      	mov	r3, r0
 8004c34:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c38:	e004      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004c40:	e000      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8004c42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c44:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10d      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c4c:	4b05      	ldr	r3, [pc, #20]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c50:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004c54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c58:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004c5c:	4a01      	ldr	r2, [pc, #4]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004c5e:	430b      	orrs	r3, r1
 8004c60:	6593      	str	r3, [r2, #88]	; 0x58
 8004c62:	e005      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004c64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c68:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004c6c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c78:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004c7c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c7e:	2300      	movs	r3, #0
 8004c80:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c82:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004c86:	460b      	mov	r3, r1
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	d03b      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004c8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c98:	d01f      	beq.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8004c9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c9e:	d818      	bhi.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8004ca0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ca4:	d003      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8004ca6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004caa:	d007      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8004cac:	e011      	b.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cae:	4b64      	ldr	r3, [pc, #400]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb2:	4a63      	ldr	r2, [pc, #396]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004cba:	e00f      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004cc0:	3328      	adds	r3, #40	; 0x28
 8004cc2:	2101      	movs	r1, #1
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f001 fc69 	bl	800659c <RCCEx_PLL3_Config>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004cd0:	e004      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004cd8:	e000      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8004cda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cdc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10b      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ce4:	4b56      	ldr	r3, [pc, #344]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004cec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cf4:	4a52      	ldr	r2, [pc, #328]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004cf6:	430b      	orrs	r3, r1
 8004cf8:	6553      	str	r3, [r2, #84]	; 0x54
 8004cfa:	e003      	b.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cfc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004d00:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004d04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004d10:	673b      	str	r3, [r7, #112]	; 0x70
 8004d12:	2300      	movs	r3, #0
 8004d14:	677b      	str	r3, [r7, #116]	; 0x74
 8004d16:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	d031      	beq.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004d20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8004d2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d2e:	d007      	beq.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8004d30:	e011      	b.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d32:	4b43      	ldr	r3, [pc, #268]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d36:	4a42      	ldr	r2, [pc, #264]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004d38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d3e:	e00e      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d44:	3308      	adds	r3, #8
 8004d46:	2102      	movs	r1, #2
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f001 fb75 	bl	8006438 <RCCEx_PLL2_Config>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d54:	e003      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d5e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10a      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004d66:	4b36      	ldr	r3, [pc, #216]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d6a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d74:	4a32      	ldr	r2, [pc, #200]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004d76:	430b      	orrs	r3, r1
 8004d78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d7a:	e003      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004d80:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004d90:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d92:	2300      	movs	r3, #0
 8004d94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d96:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	d00c      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004da0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004da4:	3328      	adds	r3, #40	; 0x28
 8004da6:	2102      	movs	r1, #2
 8004da8:	4618      	mov	r0, r3
 8004daa:	f001 fbf7 	bl	800659c <RCCEx_PLL3_Config>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004dba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004dc6:	663b      	str	r3, [r7, #96]	; 0x60
 8004dc8:	2300      	movs	r3, #0
 8004dca:	667b      	str	r3, [r7, #100]	; 0x64
 8004dcc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	d03a      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004dd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004dda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004dde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004de2:	d018      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8004de4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004de8:	d811      	bhi.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8004dea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dee:	d014      	beq.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8004df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004df4:	d80b      	bhi.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d011      	beq.n	8004e1e <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8004dfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dfe:	d106      	bne.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e00:	4b0f      	ldr	r3, [pc, #60]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e04:	4a0e      	ldr	r2, [pc, #56]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004e0c:	e008      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004e14:	e004      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004e16:	bf00      	nop
 8004e18:	e002      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004e1a:	bf00      	nop
 8004e1c:	e000      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004e1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e20:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10d      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e28:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e30:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e38:	4a01      	ldr	r2, [pc, #4]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004e3a:	430b      	orrs	r3, r1
 8004e3c:	6553      	str	r3, [r2, #84]	; 0x54
 8004e3e:	e005      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8004e40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e44:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004e48:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004e58:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e5e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004e62:	460b      	mov	r3, r1
 8004e64:	4313      	orrs	r3, r2
 8004e66:	d009      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004e68:	4baa      	ldr	r3, [pc, #680]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e6c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004e70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e76:	4aa7      	ldr	r2, [pc, #668]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004e78:	430b      	orrs	r3, r1
 8004e7a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004e7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e84:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004e88:	653b      	str	r3, [r7, #80]	; 0x50
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	657b      	str	r3, [r7, #84]	; 0x54
 8004e8e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004e92:	460b      	mov	r3, r1
 8004e94:	4313      	orrs	r3, r2
 8004e96:	d00a      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004e98:	4b9e      	ldr	r3, [pc, #632]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004ea0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ea4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004ea8:	4a9a      	ldr	r2, [pc, #616]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004eaa:	430b      	orrs	r3, r1
 8004eac:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004eae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004eba:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ec0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	d009      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004eca:	4b92      	ldr	r3, [pc, #584]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ece:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004ed2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed8:	4a8e      	ldr	r2, [pc, #568]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004eda:	430b      	orrs	r3, r1
 8004edc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004ede:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004eea:	643b      	str	r3, [r7, #64]	; 0x40
 8004eec:	2300      	movs	r3, #0
 8004eee:	647b      	str	r3, [r7, #68]	; 0x44
 8004ef0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	d00e      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004efa:	4b86      	ldr	r3, [pc, #536]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	4a85      	ldr	r2, [pc, #532]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004f00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f04:	6113      	str	r3, [r2, #16]
 8004f06:	4b83      	ldr	r3, [pc, #524]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004f08:	6919      	ldr	r1, [r3, #16]
 8004f0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f0e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004f12:	4a80      	ldr	r2, [pc, #512]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004f14:	430b      	orrs	r3, r1
 8004f16:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004f18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f20:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004f24:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f26:	2300      	movs	r3, #0
 8004f28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f2a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004f2e:	460b      	mov	r3, r1
 8004f30:	4313      	orrs	r3, r2
 8004f32:	d009      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004f34:	4b77      	ldr	r3, [pc, #476]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004f36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f38:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004f3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f42:	4a74      	ldr	r2, [pc, #464]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004f44:	430b      	orrs	r3, r1
 8004f46:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f50:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004f54:	633b      	str	r3, [r7, #48]	; 0x30
 8004f56:	2300      	movs	r3, #0
 8004f58:	637b      	str	r3, [r7, #52]	; 0x34
 8004f5a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4313      	orrs	r3, r2
 8004f62:	d00a      	beq.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004f64:	4b6b      	ldr	r3, [pc, #428]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f68:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004f6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f74:	4a67      	ldr	r2, [pc, #412]	; (8005114 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004f76:	430b      	orrs	r3, r1
 8004f78:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004f7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f82:	2100      	movs	r1, #0
 8004f84:	62b9      	str	r1, [r7, #40]	; 0x28
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f8c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004f90:	460b      	mov	r3, r1
 8004f92:	4313      	orrs	r3, r2
 8004f94:	d011      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f9a:	3308      	adds	r3, #8
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f001 fa4a 	bl	8006438 <RCCEx_PLL2_Config>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8004faa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d003      	beq.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004fb6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004fba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	6239      	str	r1, [r7, #32]
 8004fc6:	f003 0302 	and.w	r3, r3, #2
 8004fca:	627b      	str	r3, [r7, #36]	; 0x24
 8004fcc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	d011      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004fd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fda:	3308      	adds	r3, #8
 8004fdc:	2101      	movs	r1, #1
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f001 fa2a 	bl	8006438 <RCCEx_PLL2_Config>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8004fea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004ff6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004ffa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005002:	2100      	movs	r1, #0
 8005004:	61b9      	str	r1, [r7, #24]
 8005006:	f003 0304 	and.w	r3, r3, #4
 800500a:	61fb      	str	r3, [r7, #28]
 800500c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005010:	460b      	mov	r3, r1
 8005012:	4313      	orrs	r3, r2
 8005014:	d011      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005016:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800501a:	3308      	adds	r3, #8
 800501c:	2102      	movs	r1, #2
 800501e:	4618      	mov	r0, r3
 8005020:	f001 fa0a 	bl	8006438 <RCCEx_PLL2_Config>
 8005024:	4603      	mov	r3, r0
 8005026:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800502a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005032:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005036:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800503a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800503e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005042:	2100      	movs	r1, #0
 8005044:	6139      	str	r1, [r7, #16]
 8005046:	f003 0308 	and.w	r3, r3, #8
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005050:	460b      	mov	r3, r1
 8005052:	4313      	orrs	r3, r2
 8005054:	d011      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005056:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800505a:	3328      	adds	r3, #40	; 0x28
 800505c:	2100      	movs	r1, #0
 800505e:	4618      	mov	r0, r3
 8005060:	f001 fa9c 	bl	800659c <RCCEx_PLL3_Config>
 8005064:	4603      	mov	r3, r0
 8005066:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 800506a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005072:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005076:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800507a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800507e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005082:	2100      	movs	r1, #0
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	f003 0310 	and.w	r3, r3, #16
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005090:	460b      	mov	r3, r1
 8005092:	4313      	orrs	r3, r2
 8005094:	d011      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005096:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800509a:	3328      	adds	r3, #40	; 0x28
 800509c:	2101      	movs	r1, #1
 800509e:	4618      	mov	r0, r3
 80050a0:	f001 fa7c 	bl	800659c <RCCEx_PLL3_Config>
 80050a4:	4603      	mov	r3, r0
 80050a6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80050aa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80050b6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80050ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c2:	2100      	movs	r1, #0
 80050c4:	6039      	str	r1, [r7, #0]
 80050c6:	f003 0320 	and.w	r3, r3, #32
 80050ca:	607b      	str	r3, [r7, #4]
 80050cc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80050d0:	460b      	mov	r3, r1
 80050d2:	4313      	orrs	r3, r2
 80050d4:	d011      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80050d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050da:	3328      	adds	r3, #40	; 0x28
 80050dc:	2102      	movs	r1, #2
 80050de:	4618      	mov	r0, r3
 80050e0:	f001 fa5c 	bl	800659c <RCCEx_PLL3_Config>
 80050e4:	4603      	mov	r3, r0
 80050e6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80050ea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80050f6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 80050fa:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8005102:	2300      	movs	r3, #0
 8005104:	e000      	b.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
}
 8005108:	4618      	mov	r0, r3
 800510a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800510e:	46bd      	mov	sp, r7
 8005110:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005114:	58024400 	.word	0x58024400

08005118 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b090      	sub	sp, #64	; 0x40
 800511c:	af00      	add	r7, sp, #0
 800511e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005122:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005126:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800512a:	430b      	orrs	r3, r1
 800512c:	f040 8094 	bne.w	8005258 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005130:	4b9e      	ldr	r3, [pc, #632]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800513a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513c:	2b04      	cmp	r3, #4
 800513e:	f200 8087 	bhi.w	8005250 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005142:	a201      	add	r2, pc, #4	; (adr r2, 8005148 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005148:	0800515d 	.word	0x0800515d
 800514c:	08005185 	.word	0x08005185
 8005150:	080051ad 	.word	0x080051ad
 8005154:	08005249 	.word	0x08005249
 8005158:	080051d5 	.word	0x080051d5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800515c:	4b93      	ldr	r3, [pc, #588]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005164:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005168:	d108      	bne.n	800517c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800516a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800516e:	4618      	mov	r0, r3
 8005170:	f001 f810 	bl	8006194 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005176:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005178:	f000 bd45 	b.w	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800517c:	2300      	movs	r3, #0
 800517e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005180:	f000 bd41 	b.w	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005184:	4b89      	ldr	r3, [pc, #548]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800518c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005190:	d108      	bne.n	80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005192:	f107 0318 	add.w	r3, r7, #24
 8005196:	4618      	mov	r0, r3
 8005198:	f000 fd54 	bl	8005c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80051a0:	f000 bd31 	b.w	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80051a4:	2300      	movs	r3, #0
 80051a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051a8:	f000 bd2d 	b.w	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80051ac:	4b7f      	ldr	r3, [pc, #508]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051b8:	d108      	bne.n	80051cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051ba:	f107 030c 	add.w	r3, r7, #12
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fe94 	bl	8005eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80051c8:	f000 bd1d 	b.w	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80051cc:	2300      	movs	r3, #0
 80051ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051d0:	f000 bd19 	b.w	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80051d4:	4b75      	ldr	r3, [pc, #468]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80051d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051dc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80051de:	4b73      	ldr	r3, [pc, #460]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0304 	and.w	r3, r3, #4
 80051e6:	2b04      	cmp	r3, #4
 80051e8:	d10c      	bne.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80051ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d109      	bne.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051f0:	4b6e      	ldr	r3, [pc, #440]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	08db      	lsrs	r3, r3, #3
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	4a6d      	ldr	r2, [pc, #436]	; (80053b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80051fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005200:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005202:	e01f      	b.n	8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005204:	4b69      	ldr	r3, [pc, #420]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005210:	d106      	bne.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005214:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005218:	d102      	bne.n	8005220 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800521a:	4b66      	ldr	r3, [pc, #408]	; (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800521c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800521e:	e011      	b.n	8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005220:	4b62      	ldr	r3, [pc, #392]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005228:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800522c:	d106      	bne.n	800523c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800522e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005234:	d102      	bne.n	800523c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005236:	4b60      	ldr	r3, [pc, #384]	; (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005238:	63fb      	str	r3, [r7, #60]	; 0x3c
 800523a:	e003      	b.n	8005244 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800523c:	2300      	movs	r3, #0
 800523e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005240:	f000 bce1 	b.w	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005244:	f000 bcdf 	b.w	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005248:	4b5c      	ldr	r3, [pc, #368]	; (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800524a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800524c:	f000 bcdb 	b.w	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005250:	2300      	movs	r3, #0
 8005252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005254:	f000 bcd7 	b.w	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005258:	e9d7 2300 	ldrd	r2, r3, [r7]
 800525c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005260:	430b      	orrs	r3, r1
 8005262:	f040 80ad 	bne.w	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8005266:	4b51      	ldr	r3, [pc, #324]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800526a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800526e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005276:	d056      	beq.n	8005326 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8005278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800527a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800527e:	f200 8090 	bhi.w	80053a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	2bc0      	cmp	r3, #192	; 0xc0
 8005286:	f000 8088 	beq.w	800539a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800528c:	2bc0      	cmp	r3, #192	; 0xc0
 800528e:	f200 8088 	bhi.w	80053a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005294:	2b80      	cmp	r3, #128	; 0x80
 8005296:	d032      	beq.n	80052fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529a:	2b80      	cmp	r3, #128	; 0x80
 800529c:	f200 8081 	bhi.w	80053a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80052a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	2b40      	cmp	r3, #64	; 0x40
 80052aa:	d014      	beq.n	80052d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80052ac:	e079      	b.n	80053a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80052ae:	4b3f      	ldr	r3, [pc, #252]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052ba:	d108      	bne.n	80052ce <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052c0:	4618      	mov	r0, r3
 80052c2:	f000 ff67 	bl	8006194 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80052c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052ca:	f000 bc9c 	b.w	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80052ce:	2300      	movs	r3, #0
 80052d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052d2:	f000 bc98 	b.w	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80052d6:	4b35      	ldr	r3, [pc, #212]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052e2:	d108      	bne.n	80052f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052e4:	f107 0318 	add.w	r3, r7, #24
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 fcab 	bl	8005c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052f2:	f000 bc88 	b.w	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80052f6:	2300      	movs	r3, #0
 80052f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052fa:	f000 bc84 	b.w	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052fe:	4b2b      	ldr	r3, [pc, #172]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005306:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800530a:	d108      	bne.n	800531e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800530c:	f107 030c 	add.w	r3, r7, #12
 8005310:	4618      	mov	r0, r3
 8005312:	f000 fdeb 	bl	8005eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800531a:	f000 bc74 	b.w	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800531e:	2300      	movs	r3, #0
 8005320:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005322:	f000 bc70 	b.w	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005326:	4b21      	ldr	r3, [pc, #132]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800532a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800532e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005330:	4b1e      	ldr	r3, [pc, #120]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	2b04      	cmp	r3, #4
 800533a:	d10c      	bne.n	8005356 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800533c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800533e:	2b00      	cmp	r3, #0
 8005340:	d109      	bne.n	8005356 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005342:	4b1a      	ldr	r3, [pc, #104]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	08db      	lsrs	r3, r3, #3
 8005348:	f003 0303 	and.w	r3, r3, #3
 800534c:	4a18      	ldr	r2, [pc, #96]	; (80053b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800534e:	fa22 f303 	lsr.w	r3, r2, r3
 8005352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005354:	e01f      	b.n	8005396 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005356:	4b15      	ldr	r3, [pc, #84]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005362:	d106      	bne.n	8005372 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005366:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800536a:	d102      	bne.n	8005372 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800536c:	4b11      	ldr	r3, [pc, #68]	; (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800536e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005370:	e011      	b.n	8005396 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005372:	4b0e      	ldr	r3, [pc, #56]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800537e:	d106      	bne.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005382:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005386:	d102      	bne.n	800538e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005388:	4b0b      	ldr	r3, [pc, #44]	; (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800538a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800538c:	e003      	b.n	8005396 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800538e:	2300      	movs	r3, #0
 8005390:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005392:	f000 bc38 	b.w	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005396:	f000 bc36 	b.w	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800539a:	4b08      	ldr	r3, [pc, #32]	; (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800539c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800539e:	f000 bc32 	b.w	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80053a2:	2300      	movs	r3, #0
 80053a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053a6:	f000 bc2e 	b.w	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80053aa:	bf00      	nop
 80053ac:	58024400 	.word	0x58024400
 80053b0:	03d09000 	.word	0x03d09000
 80053b4:	003d0900 	.word	0x003d0900
 80053b8:	017d7840 	.word	0x017d7840
 80053bc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80053c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053c4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80053c8:	430b      	orrs	r3, r1
 80053ca:	f040 809c 	bne.w	8005506 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80053ce:	4b9e      	ldr	r3, [pc, #632]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80053d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053d2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80053d6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80053d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053de:	d054      	beq.n	800548a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80053e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80053e6:	f200 808b 	bhi.w	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80053ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80053f0:	f000 8083 	beq.w	80054fa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80053f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80053fa:	f200 8081 	bhi.w	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80053fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005400:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005404:	d02f      	beq.n	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8005406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005408:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800540c:	d878      	bhi.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800540e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005410:	2b00      	cmp	r3, #0
 8005412:	d004      	beq.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005416:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800541a:	d012      	beq.n	8005442 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800541c:	e070      	b.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800541e:	4b8a      	ldr	r3, [pc, #552]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005426:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800542a:	d107      	bne.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800542c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005430:	4618      	mov	r0, r3
 8005432:	f000 feaf 	bl	8006194 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005438:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800543a:	e3e4      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800543c:	2300      	movs	r3, #0
 800543e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005440:	e3e1      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005442:	4b81      	ldr	r3, [pc, #516]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800544a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800544e:	d107      	bne.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005450:	f107 0318 	add.w	r3, r7, #24
 8005454:	4618      	mov	r0, r3
 8005456:	f000 fbf5 	bl	8005c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800545e:	e3d2      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005460:	2300      	movs	r3, #0
 8005462:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005464:	e3cf      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005466:	4b78      	ldr	r3, [pc, #480]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800546e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005472:	d107      	bne.n	8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005474:	f107 030c 	add.w	r3, r7, #12
 8005478:	4618      	mov	r0, r3
 800547a:	f000 fd37 	bl	8005eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005482:	e3c0      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005484:	2300      	movs	r3, #0
 8005486:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005488:	e3bd      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800548a:	4b6f      	ldr	r3, [pc, #444]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800548c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800548e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005492:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005494:	4b6c      	ldr	r3, [pc, #432]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0304 	and.w	r3, r3, #4
 800549c:	2b04      	cmp	r3, #4
 800549e:	d10c      	bne.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80054a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d109      	bne.n	80054ba <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054a6:	4b68      	ldr	r3, [pc, #416]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	08db      	lsrs	r3, r3, #3
 80054ac:	f003 0303 	and.w	r3, r3, #3
 80054b0:	4a66      	ldr	r2, [pc, #408]	; (800564c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80054b2:	fa22 f303 	lsr.w	r3, r2, r3
 80054b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054b8:	e01e      	b.n	80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80054ba:	4b63      	ldr	r3, [pc, #396]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054c6:	d106      	bne.n	80054d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80054c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054ce:	d102      	bne.n	80054d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80054d0:	4b5f      	ldr	r3, [pc, #380]	; (8005650 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80054d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054d4:	e010      	b.n	80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80054d6:	4b5c      	ldr	r3, [pc, #368]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054e2:	d106      	bne.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80054e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054ea:	d102      	bne.n	80054f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80054ec:	4b59      	ldr	r3, [pc, #356]	; (8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80054ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054f0:	e002      	b.n	80054f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80054f2:	2300      	movs	r3, #0
 80054f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80054f6:	e386      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80054f8:	e385      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80054fa:	4b57      	ldr	r3, [pc, #348]	; (8005658 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80054fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054fe:	e382      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005500:	2300      	movs	r3, #0
 8005502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005504:	e37f      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005506:	e9d7 2300 	ldrd	r2, r3, [r7]
 800550a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800550e:	430b      	orrs	r3, r1
 8005510:	f040 80a7 	bne.w	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005514:	4b4c      	ldr	r3, [pc, #304]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005518:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800551c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005524:	d055      	beq.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8005526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005528:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800552c:	f200 8096 	bhi.w	800565c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005532:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005536:	f000 8084 	beq.w	8005642 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005540:	f200 808c 	bhi.w	800565c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005546:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800554a:	d030      	beq.n	80055ae <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800554c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005552:	f200 8083 	bhi.w	800565c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005558:	2b00      	cmp	r3, #0
 800555a:	d004      	beq.n	8005566 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800555c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005562:	d012      	beq.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005564:	e07a      	b.n	800565c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005566:	4b38      	ldr	r3, [pc, #224]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800556e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005572:	d107      	bne.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005578:	4618      	mov	r0, r3
 800557a:	f000 fe0b 	bl	8006194 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005580:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005582:	e340      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005588:	e33d      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800558a:	4b2f      	ldr	r3, [pc, #188]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005592:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005596:	d107      	bne.n	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005598:	f107 0318 	add.w	r3, r7, #24
 800559c:	4618      	mov	r0, r3
 800559e:	f000 fb51 	bl	8005c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055a6:	e32e      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80055a8:	2300      	movs	r3, #0
 80055aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055ac:	e32b      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80055ae:	4b26      	ldr	r3, [pc, #152]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ba:	d107      	bne.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055bc:	f107 030c 	add.w	r3, r7, #12
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 fc93 	bl	8005eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055ca:	e31c      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80055cc:	2300      	movs	r3, #0
 80055ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055d0:	e319      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80055d2:	4b1d      	ldr	r3, [pc, #116]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80055d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80055da:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80055dc:	4b1a      	ldr	r3, [pc, #104]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b04      	cmp	r3, #4
 80055e6:	d10c      	bne.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80055e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d109      	bne.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055ee:	4b16      	ldr	r3, [pc, #88]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	08db      	lsrs	r3, r3, #3
 80055f4:	f003 0303 	and.w	r3, r3, #3
 80055f8:	4a14      	ldr	r2, [pc, #80]	; (800564c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80055fa:	fa22 f303 	lsr.w	r3, r2, r3
 80055fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005600:	e01e      	b.n	8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005602:	4b11      	ldr	r3, [pc, #68]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800560a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800560e:	d106      	bne.n	800561e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005612:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005616:	d102      	bne.n	800561e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005618:	4b0d      	ldr	r3, [pc, #52]	; (8005650 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800561a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800561c:	e010      	b.n	8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800561e:	4b0a      	ldr	r3, [pc, #40]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005626:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800562a:	d106      	bne.n	800563a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800562c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800562e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005632:	d102      	bne.n	800563a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005634:	4b07      	ldr	r3, [pc, #28]	; (8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005638:	e002      	b.n	8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800563a:	2300      	movs	r3, #0
 800563c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800563e:	e2e2      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005640:	e2e1      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005642:	4b05      	ldr	r3, [pc, #20]	; (8005658 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005644:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005646:	e2de      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005648:	58024400 	.word	0x58024400
 800564c:	03d09000 	.word	0x03d09000
 8005650:	003d0900 	.word	0x003d0900
 8005654:	017d7840 	.word	0x017d7840
 8005658:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800565c:	2300      	movs	r3, #0
 800565e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005660:	e2d1      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005662:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005666:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800566a:	430b      	orrs	r3, r1
 800566c:	f040 809c 	bne.w	80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005670:	4b93      	ldr	r3, [pc, #588]	; (80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005674:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005678:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005680:	d054      	beq.n	800572c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005684:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005688:	f200 808b 	bhi.w	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800568c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005692:	f000 8083 	beq.w	800579c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005698:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800569c:	f200 8081 	bhi.w	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80056a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056a6:	d02f      	beq.n	8005708 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80056a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ae:	d878      	bhi.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80056b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d004      	beq.n	80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80056b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056bc:	d012      	beq.n	80056e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80056be:	e070      	b.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80056c0:	4b7f      	ldr	r3, [pc, #508]	; (80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80056cc:	d107      	bne.n	80056de <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80056ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 fd5e 	bl	8006194 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80056d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056dc:	e293      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80056de:	2300      	movs	r3, #0
 80056e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056e2:	e290      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80056e4:	4b76      	ldr	r3, [pc, #472]	; (80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056f0:	d107      	bne.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056f2:	f107 0318 	add.w	r3, r7, #24
 80056f6:	4618      	mov	r0, r3
 80056f8:	f000 faa4 	bl	8005c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005700:	e281      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005702:	2300      	movs	r3, #0
 8005704:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005706:	e27e      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005708:	4b6d      	ldr	r3, [pc, #436]	; (80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005714:	d107      	bne.n	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005716:	f107 030c 	add.w	r3, r7, #12
 800571a:	4618      	mov	r0, r3
 800571c:	f000 fbe6 	bl	8005eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005724:	e26f      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005726:	2300      	movs	r3, #0
 8005728:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800572a:	e26c      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800572c:	4b64      	ldr	r3, [pc, #400]	; (80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800572e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005730:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005734:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005736:	4b62      	ldr	r3, [pc, #392]	; (80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0304 	and.w	r3, r3, #4
 800573e:	2b04      	cmp	r3, #4
 8005740:	d10c      	bne.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8005742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005744:	2b00      	cmp	r3, #0
 8005746:	d109      	bne.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005748:	4b5d      	ldr	r3, [pc, #372]	; (80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	08db      	lsrs	r3, r3, #3
 800574e:	f003 0303 	and.w	r3, r3, #3
 8005752:	4a5c      	ldr	r2, [pc, #368]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005754:	fa22 f303 	lsr.w	r3, r2, r3
 8005758:	63fb      	str	r3, [r7, #60]	; 0x3c
 800575a:	e01e      	b.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800575c:	4b58      	ldr	r3, [pc, #352]	; (80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005764:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005768:	d106      	bne.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800576a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005770:	d102      	bne.n	8005778 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005772:	4b55      	ldr	r3, [pc, #340]	; (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005774:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005776:	e010      	b.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005778:	4b51      	ldr	r3, [pc, #324]	; (80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005780:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005784:	d106      	bne.n	8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800578c:	d102      	bne.n	8005794 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800578e:	4b4f      	ldr	r3, [pc, #316]	; (80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005790:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005792:	e002      	b.n	800579a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005794:	2300      	movs	r3, #0
 8005796:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005798:	e235      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800579a:	e234      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800579c:	4b4c      	ldr	r3, [pc, #304]	; (80058d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800579e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057a0:	e231      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80057a2:	2300      	movs	r3, #0
 80057a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057a6:	e22e      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80057a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057ac:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80057b0:	430b      	orrs	r3, r1
 80057b2:	f040 808f 	bne.w	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80057b6:	4b42      	ldr	r3, [pc, #264]	; (80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80057b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ba:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80057be:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80057c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057c6:	d06b      	beq.n	80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80057c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057ce:	d874      	bhi.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80057d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057d6:	d056      	beq.n	8005886 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80057d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057de:	d86c      	bhi.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80057e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80057e6:	d03b      	beq.n	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80057e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ea:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80057ee:	d864      	bhi.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80057f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057f6:	d021      	beq.n	800583c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80057f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057fe:	d85c      	bhi.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005802:	2b00      	cmp	r3, #0
 8005804:	d004      	beq.n	8005810 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8005806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800580c:	d004      	beq.n	8005818 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800580e:	e054      	b.n	80058ba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005810:	f7fe f9ca 	bl	8003ba8 <HAL_RCC_GetPCLK1Freq>
 8005814:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005816:	e1f6      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005818:	4b29      	ldr	r3, [pc, #164]	; (80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005820:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005824:	d107      	bne.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005826:	f107 0318 	add.w	r3, r7, #24
 800582a:	4618      	mov	r0, r3
 800582c:	f000 fa0a 	bl	8005c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005834:	e1e7      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005836:	2300      	movs	r3, #0
 8005838:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800583a:	e1e4      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800583c:	4b20      	ldr	r3, [pc, #128]	; (80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005848:	d107      	bne.n	800585a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800584a:	f107 030c 	add.w	r3, r7, #12
 800584e:	4618      	mov	r0, r3
 8005850:	f000 fb4c 	bl	8005eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005858:	e1d5      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800585a:	2300      	movs	r3, #0
 800585c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800585e:	e1d2      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005860:	4b17      	ldr	r3, [pc, #92]	; (80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0304 	and.w	r3, r3, #4
 8005868:	2b04      	cmp	r3, #4
 800586a:	d109      	bne.n	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800586c:	4b14      	ldr	r3, [pc, #80]	; (80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	08db      	lsrs	r3, r3, #3
 8005872:	f003 0303 	and.w	r3, r3, #3
 8005876:	4a13      	ldr	r2, [pc, #76]	; (80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005878:	fa22 f303 	lsr.w	r3, r2, r3
 800587c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800587e:	e1c2      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005880:	2300      	movs	r3, #0
 8005882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005884:	e1bf      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005886:	4b0e      	ldr	r3, [pc, #56]	; (80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800588e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005892:	d102      	bne.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8005894:	4b0c      	ldr	r3, [pc, #48]	; (80058c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005896:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005898:	e1b5      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800589a:	2300      	movs	r3, #0
 800589c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800589e:	e1b2      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80058a0:	4b07      	ldr	r3, [pc, #28]	; (80058c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058ac:	d102      	bne.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80058ae:	4b07      	ldr	r3, [pc, #28]	; (80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80058b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058b2:	e1a8      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058b4:	2300      	movs	r3, #0
 80058b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058b8:	e1a5      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058be:	e1a2      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80058c0:	58024400 	.word	0x58024400
 80058c4:	03d09000 	.word	0x03d09000
 80058c8:	003d0900 	.word	0x003d0900
 80058cc:	017d7840 	.word	0x017d7840
 80058d0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80058d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058d8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80058dc:	430b      	orrs	r3, r1
 80058de:	d173      	bne.n	80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80058e0:	4b9c      	ldr	r3, [pc, #624]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80058e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80058e8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80058ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058f0:	d02f      	beq.n	8005952 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80058f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058f8:	d863      	bhi.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80058fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d004      	beq.n	800590a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005906:	d012      	beq.n	800592e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005908:	e05b      	b.n	80059c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800590a:	4b92      	ldr	r3, [pc, #584]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005912:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005916:	d107      	bne.n	8005928 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005918:	f107 0318 	add.w	r3, r7, #24
 800591c:	4618      	mov	r0, r3
 800591e:	f000 f991 	bl	8005c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005922:	69bb      	ldr	r3, [r7, #24]
 8005924:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005926:	e16e      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005928:	2300      	movs	r3, #0
 800592a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800592c:	e16b      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800592e:	4b89      	ldr	r3, [pc, #548]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005936:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800593a:	d107      	bne.n	800594c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800593c:	f107 030c 	add.w	r3, r7, #12
 8005940:	4618      	mov	r0, r3
 8005942:	f000 fad3 	bl	8005eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800594a:	e15c      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800594c:	2300      	movs	r3, #0
 800594e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005950:	e159      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005952:	4b80      	ldr	r3, [pc, #512]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005956:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800595a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800595c:	4b7d      	ldr	r3, [pc, #500]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b04      	cmp	r3, #4
 8005966:	d10c      	bne.n	8005982 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596a:	2b00      	cmp	r3, #0
 800596c:	d109      	bne.n	8005982 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800596e:	4b79      	ldr	r3, [pc, #484]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	08db      	lsrs	r3, r3, #3
 8005974:	f003 0303 	and.w	r3, r3, #3
 8005978:	4a77      	ldr	r2, [pc, #476]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800597a:	fa22 f303 	lsr.w	r3, r2, r3
 800597e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005980:	e01e      	b.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005982:	4b74      	ldr	r3, [pc, #464]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800598a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800598e:	d106      	bne.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005992:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005996:	d102      	bne.n	800599e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005998:	4b70      	ldr	r3, [pc, #448]	; (8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800599a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800599c:	e010      	b.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800599e:	4b6d      	ldr	r3, [pc, #436]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059aa:	d106      	bne.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80059ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059b2:	d102      	bne.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80059b4:	4b6a      	ldr	r3, [pc, #424]	; (8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80059b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059b8:	e002      	b.n	80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80059ba:	2300      	movs	r3, #0
 80059bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80059be:	e122      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80059c0:	e121      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80059c2:	2300      	movs	r3, #0
 80059c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059c6:	e11e      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80059c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059cc:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80059d0:	430b      	orrs	r3, r1
 80059d2:	d133      	bne.n	8005a3c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80059d4:	4b5f      	ldr	r3, [pc, #380]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80059d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059dc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80059de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d004      	beq.n	80059ee <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80059e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ea:	d012      	beq.n	8005a12 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80059ec:	e023      	b.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80059ee:	4b59      	ldr	r3, [pc, #356]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059fa:	d107      	bne.n	8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80059fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a00:	4618      	mov	r0, r3
 8005a02:	f000 fbc7 	bl	8006194 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a0a:	e0fc      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a10:	e0f9      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a12:	4b50      	ldr	r3, [pc, #320]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a1e:	d107      	bne.n	8005a30 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a20:	f107 0318 	add.w	r3, r7, #24
 8005a24:	4618      	mov	r0, r3
 8005a26:	f000 f90d 	bl	8005c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a2e:	e0ea      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a30:	2300      	movs	r3, #0
 8005a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a34:	e0e7      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005a36:	2300      	movs	r3, #0
 8005a38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a3a:	e0e4      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005a3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a40:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005a44:	430b      	orrs	r3, r1
 8005a46:	f040 808d 	bne.w	8005b64 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005a4a:	4b42      	ldr	r3, [pc, #264]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a4e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005a52:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a5a:	d06b      	beq.n	8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005a62:	d874      	bhi.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a6a:	d056      	beq.n	8005b1a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8005a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a72:	d86c      	bhi.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a76:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a7a:	d03b      	beq.n	8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8005a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005a82:	d864      	bhi.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a8a:	d021      	beq.n	8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a92:	d85c      	bhi.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d004      	beq.n	8005aa4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8005a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005aa0:	d004      	beq.n	8005aac <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8005aa2:	e054      	b.n	8005b4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005aa4:	f000 f8b8 	bl	8005c18 <HAL_RCCEx_GetD3PCLK1Freq>
 8005aa8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005aaa:	e0ac      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005aac:	4b29      	ldr	r3, [pc, #164]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ab4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ab8:	d107      	bne.n	8005aca <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005aba:	f107 0318 	add.w	r3, r7, #24
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 f8c0 	bl	8005c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ac8:	e09d      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005aca:	2300      	movs	r3, #0
 8005acc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ace:	e09a      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005ad0:	4b20      	ldr	r3, [pc, #128]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005adc:	d107      	bne.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ade:	f107 030c 	add.w	r3, r7, #12
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 fa02 	bl	8005eec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005aec:	e08b      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005aee:	2300      	movs	r3, #0
 8005af0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005af2:	e088      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005af4:	4b17      	ldr	r3, [pc, #92]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0304 	and.w	r3, r3, #4
 8005afc:	2b04      	cmp	r3, #4
 8005afe:	d109      	bne.n	8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b00:	4b14      	ldr	r3, [pc, #80]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	08db      	lsrs	r3, r3, #3
 8005b06:	f003 0303 	and.w	r3, r3, #3
 8005b0a:	4a13      	ldr	r2, [pc, #76]	; (8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005b10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b12:	e078      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b14:	2300      	movs	r3, #0
 8005b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b18:	e075      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005b1a:	4b0e      	ldr	r3, [pc, #56]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b26:	d102      	bne.n	8005b2e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8005b28:	4b0c      	ldr	r3, [pc, #48]	; (8005b5c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b2c:	e06b      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b32:	e068      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005b34:	4b07      	ldr	r3, [pc, #28]	; (8005b54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b40:	d102      	bne.n	8005b48 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8005b42:	4b07      	ldr	r3, [pc, #28]	; (8005b60 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005b44:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b46:	e05e      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b4c:	e05b      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b52:	e058      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005b54:	58024400 	.word	0x58024400
 8005b58:	03d09000 	.word	0x03d09000
 8005b5c:	003d0900 	.word	0x003d0900
 8005b60:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005b64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b68:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005b6c:	430b      	orrs	r3, r1
 8005b6e:	d148      	bne.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005b70:	4b27      	ldr	r3, [pc, #156]	; (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b78:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b80:	d02a      	beq.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8005b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b88:	d838      	bhi.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8005b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d004      	beq.n	8005b9a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8005b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b96:	d00d      	beq.n	8005bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8005b98:	e030      	b.n	8005bfc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005b9a:	4b1d      	ldr	r3, [pc, #116]	; (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ba2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ba6:	d102      	bne.n	8005bae <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8005ba8:	4b1a      	ldr	r3, [pc, #104]	; (8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005baa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bac:	e02b      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bb2:	e028      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005bb4:	4b16      	ldr	r3, [pc, #88]	; (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005bc0:	d107      	bne.n	8005bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 fae4 	bl	8006194 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bd0:	e019      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bd6:	e016      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005bd8:	4b0d      	ldr	r3, [pc, #52]	; (8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005be0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005be4:	d107      	bne.n	8005bf6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005be6:	f107 0318 	add.w	r3, r7, #24
 8005bea:	4618      	mov	r0, r3
 8005bec:	f000 f82a 	bl	8005c44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bf4:	e007      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bfa:	e004      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c00:	e001      	b.n	8005c06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8005c02:	2300      	movs	r3, #0
 8005c04:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8005c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3740      	adds	r7, #64	; 0x40
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	58024400 	.word	0x58024400
 8005c14:	017d7840 	.word	0x017d7840

08005c18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005c1c:	f7fd ff94 	bl	8003b48 <HAL_RCC_GetHCLKFreq>
 8005c20:	4602      	mov	r2, r0
 8005c22:	4b06      	ldr	r3, [pc, #24]	; (8005c3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	091b      	lsrs	r3, r3, #4
 8005c28:	f003 0307 	and.w	r3, r3, #7
 8005c2c:	4904      	ldr	r1, [pc, #16]	; (8005c40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005c2e:	5ccb      	ldrb	r3, [r1, r3]
 8005c30:	f003 031f 	and.w	r3, r3, #31
 8005c34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	58024400 	.word	0x58024400
 8005c40:	0800d4c8 	.word	0x0800d4c8

08005c44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b089      	sub	sp, #36	; 0x24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c4c:	4ba1      	ldr	r3, [pc, #644]	; (8005ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c50:	f003 0303 	and.w	r3, r3, #3
 8005c54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005c56:	4b9f      	ldr	r3, [pc, #636]	; (8005ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5a:	0b1b      	lsrs	r3, r3, #12
 8005c5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005c62:	4b9c      	ldr	r3, [pc, #624]	; (8005ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c66:	091b      	lsrs	r3, r3, #4
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005c6e:	4b99      	ldr	r3, [pc, #612]	; (8005ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c72:	08db      	lsrs	r3, r3, #3
 8005c74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	fb02 f303 	mul.w	r3, r2, r3
 8005c7e:	ee07 3a90 	vmov	s15, r3
 8005c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f000 8111 	beq.w	8005eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	2b02      	cmp	r3, #2
 8005c96:	f000 8083 	beq.w	8005da0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	f200 80a1 	bhi.w	8005de4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005ca2:	69bb      	ldr	r3, [r7, #24]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d003      	beq.n	8005cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d056      	beq.n	8005d5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005cae:	e099      	b.n	8005de4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cb0:	4b88      	ldr	r3, [pc, #544]	; (8005ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0320 	and.w	r3, r3, #32
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d02d      	beq.n	8005d18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005cbc:	4b85      	ldr	r3, [pc, #532]	; (8005ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	08db      	lsrs	r3, r3, #3
 8005cc2:	f003 0303 	and.w	r3, r3, #3
 8005cc6:	4a84      	ldr	r2, [pc, #528]	; (8005ed8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ccc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	ee07 3a90 	vmov	s15, r3
 8005cd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	ee07 3a90 	vmov	s15, r3
 8005cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ce6:	4b7b      	ldr	r3, [pc, #492]	; (8005ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cee:	ee07 3a90 	vmov	s15, r3
 8005cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cfa:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005edc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005d16:	e087      	b.n	8005e28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	ee07 3a90 	vmov	s15, r3
 8005d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d22:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005ee0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d2a:	4b6a      	ldr	r3, [pc, #424]	; (8005ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d32:	ee07 3a90 	vmov	s15, r3
 8005d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d3e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005edc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d5a:	e065      	b.n	8005e28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	ee07 3a90 	vmov	s15, r3
 8005d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d66:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d6e:	4b59      	ldr	r3, [pc, #356]	; (8005ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d76:	ee07 3a90 	vmov	s15, r3
 8005d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d82:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005edc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d9e:	e043      	b.n	8005e28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	ee07 3a90 	vmov	s15, r3
 8005da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005daa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005ee8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005db2:	4b48      	ldr	r3, [pc, #288]	; (8005ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dba:	ee07 3a90 	vmov	s15, r3
 8005dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dc6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005edc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005de2:	e021      	b.n	8005e28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	ee07 3a90 	vmov	s15, r3
 8005dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005df6:	4b37      	ldr	r3, [pc, #220]	; (8005ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dfe:	ee07 3a90 	vmov	s15, r3
 8005e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e06:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e0a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005edc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e26:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005e28:	4b2a      	ldr	r3, [pc, #168]	; (8005ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e2c:	0a5b      	lsrs	r3, r3, #9
 8005e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e32:	ee07 3a90 	vmov	s15, r3
 8005e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e42:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e4e:	ee17 2a90 	vmov	r2, s15
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005e56:	4b1f      	ldr	r3, [pc, #124]	; (8005ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5a:	0c1b      	lsrs	r3, r3, #16
 8005e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e60:	ee07 3a90 	vmov	s15, r3
 8005e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e70:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e7c:	ee17 2a90 	vmov	r2, s15
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005e84:	4b13      	ldr	r3, [pc, #76]	; (8005ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e88:	0e1b      	lsrs	r3, r3, #24
 8005e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e8e:	ee07 3a90 	vmov	s15, r3
 8005e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eaa:	ee17 2a90 	vmov	r2, s15
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005eb2:	e008      	b.n	8005ec6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	609a      	str	r2, [r3, #8]
}
 8005ec6:	bf00      	nop
 8005ec8:	3724      	adds	r7, #36	; 0x24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	58024400 	.word	0x58024400
 8005ed8:	03d09000 	.word	0x03d09000
 8005edc:	46000000 	.word	0x46000000
 8005ee0:	4c742400 	.word	0x4c742400
 8005ee4:	4a742400 	.word	0x4a742400
 8005ee8:	4bbebc20 	.word	0x4bbebc20

08005eec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b089      	sub	sp, #36	; 0x24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ef4:	4ba1      	ldr	r3, [pc, #644]	; (800617c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef8:	f003 0303 	and.w	r3, r3, #3
 8005efc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005efe:	4b9f      	ldr	r3, [pc, #636]	; (800617c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f02:	0d1b      	lsrs	r3, r3, #20
 8005f04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f08:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005f0a:	4b9c      	ldr	r3, [pc, #624]	; (800617c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0e:	0a1b      	lsrs	r3, r3, #8
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005f16:	4b99      	ldr	r3, [pc, #612]	; (800617c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f1a:	08db      	lsrs	r3, r3, #3
 8005f1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	fb02 f303 	mul.w	r3, r2, r3
 8005f26:	ee07 3a90 	vmov	s15, r3
 8005f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 8111 	beq.w	800615c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	f000 8083 	beq.w	8006048 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	f200 80a1 	bhi.w	800608c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d056      	beq.n	8006004 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005f56:	e099      	b.n	800608c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f58:	4b88      	ldr	r3, [pc, #544]	; (800617c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0320 	and.w	r3, r3, #32
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d02d      	beq.n	8005fc0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005f64:	4b85      	ldr	r3, [pc, #532]	; (800617c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	08db      	lsrs	r3, r3, #3
 8005f6a:	f003 0303 	and.w	r3, r3, #3
 8005f6e:	4a84      	ldr	r2, [pc, #528]	; (8006180 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005f70:	fa22 f303 	lsr.w	r3, r2, r3
 8005f74:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	ee07 3a90 	vmov	s15, r3
 8005f7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f8e:	4b7b      	ldr	r3, [pc, #492]	; (800617c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f96:	ee07 3a90 	vmov	s15, r3
 8005f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fa2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006184 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005fbe:	e087      	b.n	80060d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	ee07 3a90 	vmov	s15, r3
 8005fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fca:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006188 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fd2:	4b6a      	ldr	r3, [pc, #424]	; (800617c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fda:	ee07 3a90 	vmov	s15, r3
 8005fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fe6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006184 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ffe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006002:	e065      	b.n	80060d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	ee07 3a90 	vmov	s15, r3
 800600a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800600e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800618c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006016:	4b59      	ldr	r3, [pc, #356]	; (800617c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800601e:	ee07 3a90 	vmov	s15, r3
 8006022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006026:	ed97 6a03 	vldr	s12, [r7, #12]
 800602a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006184 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800602e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006036:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800603a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800603e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006042:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006046:	e043      	b.n	80060d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	ee07 3a90 	vmov	s15, r3
 800604e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006052:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800605a:	4b48      	ldr	r3, [pc, #288]	; (800617c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800605c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006062:	ee07 3a90 	vmov	s15, r3
 8006066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606a:	ed97 6a03 	vldr	s12, [r7, #12]
 800606e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006184 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800607a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800607e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006086:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800608a:	e021      	b.n	80060d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	ee07 3a90 	vmov	s15, r3
 8006092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006096:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800618c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800609a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800609e:	4b37      	ldr	r3, [pc, #220]	; (800617c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a6:	ee07 3a90 	vmov	s15, r3
 80060aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80060b2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006184 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80060d0:	4b2a      	ldr	r3, [pc, #168]	; (800617c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d4:	0a5b      	lsrs	r3, r3, #9
 80060d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060da:	ee07 3a90 	vmov	s15, r3
 80060de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80060ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060f6:	ee17 2a90 	vmov	r2, s15
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80060fe:	4b1f      	ldr	r3, [pc, #124]	; (800617c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006102:	0c1b      	lsrs	r3, r3, #16
 8006104:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006108:	ee07 3a90 	vmov	s15, r3
 800610c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006110:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006114:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006118:	edd7 6a07 	vldr	s13, [r7, #28]
 800611c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006124:	ee17 2a90 	vmov	r2, s15
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800612c:	4b13      	ldr	r3, [pc, #76]	; (800617c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800612e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006130:	0e1b      	lsrs	r3, r3, #24
 8006132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006136:	ee07 3a90 	vmov	s15, r3
 800613a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800613e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006142:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006146:	edd7 6a07 	vldr	s13, [r7, #28]
 800614a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800614e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006152:	ee17 2a90 	vmov	r2, s15
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800615a:	e008      	b.n	800616e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	609a      	str	r2, [r3, #8]
}
 800616e:	bf00      	nop
 8006170:	3724      	adds	r7, #36	; 0x24
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	58024400 	.word	0x58024400
 8006180:	03d09000 	.word	0x03d09000
 8006184:	46000000 	.word	0x46000000
 8006188:	4c742400 	.word	0x4c742400
 800618c:	4a742400 	.word	0x4a742400
 8006190:	4bbebc20 	.word	0x4bbebc20

08006194 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006194:	b480      	push	{r7}
 8006196:	b089      	sub	sp, #36	; 0x24
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800619c:	4ba0      	ldr	r3, [pc, #640]	; (8006420 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800619e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a0:	f003 0303 	and.w	r3, r3, #3
 80061a4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80061a6:	4b9e      	ldr	r3, [pc, #632]	; (8006420 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061aa:	091b      	lsrs	r3, r3, #4
 80061ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061b0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80061b2:	4b9b      	ldr	r3, [pc, #620]	; (8006420 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80061bc:	4b98      	ldr	r3, [pc, #608]	; (8006420 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c0:	08db      	lsrs	r3, r3, #3
 80061c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	fb02 f303 	mul.w	r3, r2, r3
 80061cc:	ee07 3a90 	vmov	s15, r3
 80061d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	f000 8111 	beq.w	8006402 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	f000 8083 	beq.w	80062ee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	f200 80a1 	bhi.w	8006332 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d003      	beq.n	80061fe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d056      	beq.n	80062aa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80061fc:	e099      	b.n	8006332 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061fe:	4b88      	ldr	r3, [pc, #544]	; (8006420 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0320 	and.w	r3, r3, #32
 8006206:	2b00      	cmp	r3, #0
 8006208:	d02d      	beq.n	8006266 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800620a:	4b85      	ldr	r3, [pc, #532]	; (8006420 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	08db      	lsrs	r3, r3, #3
 8006210:	f003 0303 	and.w	r3, r3, #3
 8006214:	4a83      	ldr	r2, [pc, #524]	; (8006424 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006216:	fa22 f303 	lsr.w	r3, r2, r3
 800621a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	ee07 3a90 	vmov	s15, r3
 8006222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	ee07 3a90 	vmov	s15, r3
 800622c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006230:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006234:	4b7a      	ldr	r3, [pc, #488]	; (8006420 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006238:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800623c:	ee07 3a90 	vmov	s15, r3
 8006240:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006244:	ed97 6a03 	vldr	s12, [r7, #12]
 8006248:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006428 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800624c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006250:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006254:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006258:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800625c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006260:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006264:	e087      	b.n	8006376 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	ee07 3a90 	vmov	s15, r3
 800626c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006270:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800642c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006274:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006278:	4b69      	ldr	r3, [pc, #420]	; (8006420 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800627a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006280:	ee07 3a90 	vmov	s15, r3
 8006284:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006288:	ed97 6a03 	vldr	s12, [r7, #12]
 800628c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006428 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006290:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006294:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006298:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800629c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062a8:	e065      	b.n	8006376 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	ee07 3a90 	vmov	s15, r3
 80062b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006430 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80062b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062bc:	4b58      	ldr	r3, [pc, #352]	; (8006420 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062c4:	ee07 3a90 	vmov	s15, r3
 80062c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80062d0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006428 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80062d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062ec:	e043      	b.n	8006376 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	ee07 3a90 	vmov	s15, r3
 80062f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006434 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80062fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006300:	4b47      	ldr	r3, [pc, #284]	; (8006420 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006308:	ee07 3a90 	vmov	s15, r3
 800630c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006310:	ed97 6a03 	vldr	s12, [r7, #12]
 8006314:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006428 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006318:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800631c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006320:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006324:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800632c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006330:	e021      	b.n	8006376 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	ee07 3a90 	vmov	s15, r3
 8006338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800633c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800642c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006340:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006344:	4b36      	ldr	r3, [pc, #216]	; (8006420 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800634c:	ee07 3a90 	vmov	s15, r3
 8006350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006354:	ed97 6a03 	vldr	s12, [r7, #12]
 8006358:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006428 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800635c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006360:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006364:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006368:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800636c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006370:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006374:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006376:	4b2a      	ldr	r3, [pc, #168]	; (8006420 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637a:	0a5b      	lsrs	r3, r3, #9
 800637c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006380:	ee07 3a90 	vmov	s15, r3
 8006384:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006388:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800638c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006390:	edd7 6a07 	vldr	s13, [r7, #28]
 8006394:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006398:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800639c:	ee17 2a90 	vmov	r2, s15
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80063a4:	4b1e      	ldr	r3, [pc, #120]	; (8006420 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a8:	0c1b      	lsrs	r3, r3, #16
 80063aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063ae:	ee07 3a90 	vmov	s15, r3
 80063b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063be:	edd7 6a07 	vldr	s13, [r7, #28]
 80063c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063ca:	ee17 2a90 	vmov	r2, s15
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80063d2:	4b13      	ldr	r3, [pc, #76]	; (8006420 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d6:	0e1b      	lsrs	r3, r3, #24
 80063d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063dc:	ee07 3a90 	vmov	s15, r3
 80063e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80063f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063f8:	ee17 2a90 	vmov	r2, s15
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006400:	e008      	b.n	8006414 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	609a      	str	r2, [r3, #8]
}
 8006414:	bf00      	nop
 8006416:	3724      	adds	r7, #36	; 0x24
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr
 8006420:	58024400 	.word	0x58024400
 8006424:	03d09000 	.word	0x03d09000
 8006428:	46000000 	.word	0x46000000
 800642c:	4c742400 	.word	0x4c742400
 8006430:	4a742400 	.word	0x4a742400
 8006434:	4bbebc20 	.word	0x4bbebc20

08006438 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006442:	2300      	movs	r3, #0
 8006444:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006446:	4b53      	ldr	r3, [pc, #332]	; (8006594 <RCCEx_PLL2_Config+0x15c>)
 8006448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644a:	f003 0303 	and.w	r3, r3, #3
 800644e:	2b03      	cmp	r3, #3
 8006450:	d101      	bne.n	8006456 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	e099      	b.n	800658a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006456:	4b4f      	ldr	r3, [pc, #316]	; (8006594 <RCCEx_PLL2_Config+0x15c>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a4e      	ldr	r2, [pc, #312]	; (8006594 <RCCEx_PLL2_Config+0x15c>)
 800645c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006460:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006462:	f7fb faa5 	bl	80019b0 <HAL_GetTick>
 8006466:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006468:	e008      	b.n	800647c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800646a:	f7fb faa1 	bl	80019b0 <HAL_GetTick>
 800646e:	4602      	mov	r2, r0
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	1ad3      	subs	r3, r2, r3
 8006474:	2b02      	cmp	r3, #2
 8006476:	d901      	bls.n	800647c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e086      	b.n	800658a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800647c:	4b45      	ldr	r3, [pc, #276]	; (8006594 <RCCEx_PLL2_Config+0x15c>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1f0      	bne.n	800646a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006488:	4b42      	ldr	r3, [pc, #264]	; (8006594 <RCCEx_PLL2_Config+0x15c>)
 800648a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	031b      	lsls	r3, r3, #12
 8006496:	493f      	ldr	r1, [pc, #252]	; (8006594 <RCCEx_PLL2_Config+0x15c>)
 8006498:	4313      	orrs	r3, r2
 800649a:	628b      	str	r3, [r1, #40]	; 0x28
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	3b01      	subs	r3, #1
 80064a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	3b01      	subs	r3, #1
 80064ac:	025b      	lsls	r3, r3, #9
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	431a      	orrs	r2, r3
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	3b01      	subs	r3, #1
 80064b8:	041b      	lsls	r3, r3, #16
 80064ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80064be:	431a      	orrs	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	3b01      	subs	r3, #1
 80064c6:	061b      	lsls	r3, r3, #24
 80064c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80064cc:	4931      	ldr	r1, [pc, #196]	; (8006594 <RCCEx_PLL2_Config+0x15c>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80064d2:	4b30      	ldr	r3, [pc, #192]	; (8006594 <RCCEx_PLL2_Config+0x15c>)
 80064d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	695b      	ldr	r3, [r3, #20]
 80064de:	492d      	ldr	r1, [pc, #180]	; (8006594 <RCCEx_PLL2_Config+0x15c>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80064e4:	4b2b      	ldr	r3, [pc, #172]	; (8006594 <RCCEx_PLL2_Config+0x15c>)
 80064e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e8:	f023 0220 	bic.w	r2, r3, #32
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	4928      	ldr	r1, [pc, #160]	; (8006594 <RCCEx_PLL2_Config+0x15c>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80064f6:	4b27      	ldr	r3, [pc, #156]	; (8006594 <RCCEx_PLL2_Config+0x15c>)
 80064f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fa:	4a26      	ldr	r2, [pc, #152]	; (8006594 <RCCEx_PLL2_Config+0x15c>)
 80064fc:	f023 0310 	bic.w	r3, r3, #16
 8006500:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006502:	4b24      	ldr	r3, [pc, #144]	; (8006594 <RCCEx_PLL2_Config+0x15c>)
 8006504:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006506:	4b24      	ldr	r3, [pc, #144]	; (8006598 <RCCEx_PLL2_Config+0x160>)
 8006508:	4013      	ands	r3, r2
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	69d2      	ldr	r2, [r2, #28]
 800650e:	00d2      	lsls	r2, r2, #3
 8006510:	4920      	ldr	r1, [pc, #128]	; (8006594 <RCCEx_PLL2_Config+0x15c>)
 8006512:	4313      	orrs	r3, r2
 8006514:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006516:	4b1f      	ldr	r3, [pc, #124]	; (8006594 <RCCEx_PLL2_Config+0x15c>)
 8006518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651a:	4a1e      	ldr	r2, [pc, #120]	; (8006594 <RCCEx_PLL2_Config+0x15c>)
 800651c:	f043 0310 	orr.w	r3, r3, #16
 8006520:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d106      	bne.n	8006536 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006528:	4b1a      	ldr	r3, [pc, #104]	; (8006594 <RCCEx_PLL2_Config+0x15c>)
 800652a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652c:	4a19      	ldr	r2, [pc, #100]	; (8006594 <RCCEx_PLL2_Config+0x15c>)
 800652e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006532:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006534:	e00f      	b.n	8006556 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d106      	bne.n	800654a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800653c:	4b15      	ldr	r3, [pc, #84]	; (8006594 <RCCEx_PLL2_Config+0x15c>)
 800653e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006540:	4a14      	ldr	r2, [pc, #80]	; (8006594 <RCCEx_PLL2_Config+0x15c>)
 8006542:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006546:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006548:	e005      	b.n	8006556 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800654a:	4b12      	ldr	r3, [pc, #72]	; (8006594 <RCCEx_PLL2_Config+0x15c>)
 800654c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654e:	4a11      	ldr	r2, [pc, #68]	; (8006594 <RCCEx_PLL2_Config+0x15c>)
 8006550:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006554:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006556:	4b0f      	ldr	r3, [pc, #60]	; (8006594 <RCCEx_PLL2_Config+0x15c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a0e      	ldr	r2, [pc, #56]	; (8006594 <RCCEx_PLL2_Config+0x15c>)
 800655c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006560:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006562:	f7fb fa25 	bl	80019b0 <HAL_GetTick>
 8006566:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006568:	e008      	b.n	800657c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800656a:	f7fb fa21 	bl	80019b0 <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	2b02      	cmp	r3, #2
 8006576:	d901      	bls.n	800657c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e006      	b.n	800658a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800657c:	4b05      	ldr	r3, [pc, #20]	; (8006594 <RCCEx_PLL2_Config+0x15c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d0f0      	beq.n	800656a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006588:	7bfb      	ldrb	r3, [r7, #15]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	58024400 	.word	0x58024400
 8006598:	ffff0007 	.word	0xffff0007

0800659c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065a6:	2300      	movs	r3, #0
 80065a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80065aa:	4b53      	ldr	r3, [pc, #332]	; (80066f8 <RCCEx_PLL3_Config+0x15c>)
 80065ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ae:	f003 0303 	and.w	r3, r3, #3
 80065b2:	2b03      	cmp	r3, #3
 80065b4:	d101      	bne.n	80065ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e099      	b.n	80066ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80065ba:	4b4f      	ldr	r3, [pc, #316]	; (80066f8 <RCCEx_PLL3_Config+0x15c>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a4e      	ldr	r2, [pc, #312]	; (80066f8 <RCCEx_PLL3_Config+0x15c>)
 80065c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065c6:	f7fb f9f3 	bl	80019b0 <HAL_GetTick>
 80065ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80065cc:	e008      	b.n	80065e0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80065ce:	f7fb f9ef 	bl	80019b0 <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d901      	bls.n	80065e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e086      	b.n	80066ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80065e0:	4b45      	ldr	r3, [pc, #276]	; (80066f8 <RCCEx_PLL3_Config+0x15c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1f0      	bne.n	80065ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80065ec:	4b42      	ldr	r3, [pc, #264]	; (80066f8 <RCCEx_PLL3_Config+0x15c>)
 80065ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	051b      	lsls	r3, r3, #20
 80065fa:	493f      	ldr	r1, [pc, #252]	; (80066f8 <RCCEx_PLL3_Config+0x15c>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	628b      	str	r3, [r1, #40]	; 0x28
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	3b01      	subs	r3, #1
 8006606:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	3b01      	subs	r3, #1
 8006610:	025b      	lsls	r3, r3, #9
 8006612:	b29b      	uxth	r3, r3
 8006614:	431a      	orrs	r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	3b01      	subs	r3, #1
 800661c:	041b      	lsls	r3, r3, #16
 800661e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006622:	431a      	orrs	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	691b      	ldr	r3, [r3, #16]
 8006628:	3b01      	subs	r3, #1
 800662a:	061b      	lsls	r3, r3, #24
 800662c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006630:	4931      	ldr	r1, [pc, #196]	; (80066f8 <RCCEx_PLL3_Config+0x15c>)
 8006632:	4313      	orrs	r3, r2
 8006634:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006636:	4b30      	ldr	r3, [pc, #192]	; (80066f8 <RCCEx_PLL3_Config+0x15c>)
 8006638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	492d      	ldr	r1, [pc, #180]	; (80066f8 <RCCEx_PLL3_Config+0x15c>)
 8006644:	4313      	orrs	r3, r2
 8006646:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006648:	4b2b      	ldr	r3, [pc, #172]	; (80066f8 <RCCEx_PLL3_Config+0x15c>)
 800664a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800664c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	4928      	ldr	r1, [pc, #160]	; (80066f8 <RCCEx_PLL3_Config+0x15c>)
 8006656:	4313      	orrs	r3, r2
 8006658:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800665a:	4b27      	ldr	r3, [pc, #156]	; (80066f8 <RCCEx_PLL3_Config+0x15c>)
 800665c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665e:	4a26      	ldr	r2, [pc, #152]	; (80066f8 <RCCEx_PLL3_Config+0x15c>)
 8006660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006664:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006666:	4b24      	ldr	r3, [pc, #144]	; (80066f8 <RCCEx_PLL3_Config+0x15c>)
 8006668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800666a:	4b24      	ldr	r3, [pc, #144]	; (80066fc <RCCEx_PLL3_Config+0x160>)
 800666c:	4013      	ands	r3, r2
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	69d2      	ldr	r2, [r2, #28]
 8006672:	00d2      	lsls	r2, r2, #3
 8006674:	4920      	ldr	r1, [pc, #128]	; (80066f8 <RCCEx_PLL3_Config+0x15c>)
 8006676:	4313      	orrs	r3, r2
 8006678:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800667a:	4b1f      	ldr	r3, [pc, #124]	; (80066f8 <RCCEx_PLL3_Config+0x15c>)
 800667c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800667e:	4a1e      	ldr	r2, [pc, #120]	; (80066f8 <RCCEx_PLL3_Config+0x15c>)
 8006680:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006684:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d106      	bne.n	800669a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800668c:	4b1a      	ldr	r3, [pc, #104]	; (80066f8 <RCCEx_PLL3_Config+0x15c>)
 800668e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006690:	4a19      	ldr	r2, [pc, #100]	; (80066f8 <RCCEx_PLL3_Config+0x15c>)
 8006692:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006696:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006698:	e00f      	b.n	80066ba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d106      	bne.n	80066ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80066a0:	4b15      	ldr	r3, [pc, #84]	; (80066f8 <RCCEx_PLL3_Config+0x15c>)
 80066a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a4:	4a14      	ldr	r2, [pc, #80]	; (80066f8 <RCCEx_PLL3_Config+0x15c>)
 80066a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80066aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80066ac:	e005      	b.n	80066ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80066ae:	4b12      	ldr	r3, [pc, #72]	; (80066f8 <RCCEx_PLL3_Config+0x15c>)
 80066b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b2:	4a11      	ldr	r2, [pc, #68]	; (80066f8 <RCCEx_PLL3_Config+0x15c>)
 80066b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80066b8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80066ba:	4b0f      	ldr	r3, [pc, #60]	; (80066f8 <RCCEx_PLL3_Config+0x15c>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a0e      	ldr	r2, [pc, #56]	; (80066f8 <RCCEx_PLL3_Config+0x15c>)
 80066c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066c6:	f7fb f973 	bl	80019b0 <HAL_GetTick>
 80066ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80066cc:	e008      	b.n	80066e0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80066ce:	f7fb f96f 	bl	80019b0 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d901      	bls.n	80066e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e006      	b.n	80066ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80066e0:	4b05      	ldr	r3, [pc, #20]	; (80066f8 <RCCEx_PLL3_Config+0x15c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d0f0      	beq.n	80066ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80066ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	58024400 	.word	0x58024400
 80066fc:	ffff0007 	.word	0xffff0007

08006700 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b08a      	sub	sp, #40	; 0x28
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d101      	bne.n	8006712 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800670e:	2301      	movs	r3, #1
 8006710:	e075      	b.n	80067fe <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d105      	bne.n	800672a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f7fa fe1b 	bl	8001360 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2204      	movs	r2, #4
 800672e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f000 f868 	bl	8006808 <HAL_SD_InitCard>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e05d      	b.n	80067fe <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006742:	f107 0308 	add.w	r3, r7, #8
 8006746:	4619      	mov	r1, r3
 8006748:	6878      	ldr	r0, [r7, #4]
 800674a:	f000 fc7f 	bl	800704c <HAL_SD_GetCardStatus>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d001      	beq.n	8006758 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e052      	b.n	80067fe <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006758:	7e3b      	ldrb	r3, [r7, #24]
 800675a:	b2db      	uxtb	r3, r3
 800675c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800675e:	7e7b      	ldrb	r3, [r7, #25]
 8006760:	b2db      	uxtb	r3, r3
 8006762:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006768:	2b01      	cmp	r3, #1
 800676a:	d10a      	bne.n	8006782 <HAL_SD_Init+0x82>
 800676c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676e:	2b00      	cmp	r3, #0
 8006770:	d102      	bne.n	8006778 <HAL_SD_Init+0x78>
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d004      	beq.n	8006782 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800677e:	659a      	str	r2, [r3, #88]	; 0x58
 8006780:	e00b      	b.n	800679a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006786:	2b01      	cmp	r3, #1
 8006788:	d104      	bne.n	8006794 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006790:	659a      	str	r2, [r3, #88]	; 0x58
 8006792:	e002      	b.n	800679a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	4619      	mov	r1, r3
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fd11 	bl	80071c8 <HAL_SD_ConfigWideBusOperation>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d001      	beq.n	80067b0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80067ac:	2301      	movs	r3, #1
 80067ae:	e026      	b.n	80067fe <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80067b0:	f7fb f8fe 	bl	80019b0 <HAL_GetTick>
 80067b4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80067b6:	e011      	b.n	80067dc <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80067b8:	f7fb f8fa 	bl	80019b0 <HAL_GetTick>
 80067bc:	4602      	mov	r2, r0
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	1ad3      	subs	r3, r2, r3
 80067c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c6:	d109      	bne.n	80067dc <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80067ce:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e010      	b.n	80067fe <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 fe05 	bl	80073ec <HAL_SD_GetCardState>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b04      	cmp	r3, #4
 80067e6:	d1e7      	bne.n	80067b8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3728      	adds	r7, #40	; 0x28
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
	...

08006808 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006808:	b590      	push	{r4, r7, lr}
 800680a:	b08d      	sub	sp, #52	; 0x34
 800680c:	af02      	add	r7, sp, #8
 800680e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006810:	2300      	movs	r3, #0
 8006812:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006814:	2300      	movs	r3, #0
 8006816:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006818:	2300      	movs	r3, #0
 800681a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800681c:	2300      	movs	r3, #0
 800681e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006820:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006824:	f04f 0100 	mov.w	r1, #0
 8006828:	f7fe fc76 	bl	8005118 <HAL_RCCEx_GetPeriphCLKFreq>
 800682c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	2b00      	cmp	r3, #0
 8006832:	d109      	bne.n	8006848 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006842:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006844:	2301      	movs	r3, #1
 8006846:	e070      	b.n	800692a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684a:	0a1b      	lsrs	r3, r3, #8
 800684c:	4a39      	ldr	r2, [pc, #228]	; (8006934 <HAL_SD_InitCard+0x12c>)
 800684e:	fba2 2303 	umull	r2, r3, r2, r3
 8006852:	091b      	lsrs	r3, r3, #4
 8006854:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681c      	ldr	r4, [r3, #0]
 800685a:	466a      	mov	r2, sp
 800685c:	f107 0318 	add.w	r3, r7, #24
 8006860:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006864:	e882 0003 	stmia.w	r2, {r0, r1}
 8006868:	f107 030c 	add.w	r3, r7, #12
 800686c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800686e:	4620      	mov	r0, r4
 8006870:	f002 ff40 	bl	80096f4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4618      	mov	r0, r3
 800687a:	f002 ff83 	bl	8009784 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d005      	beq.n	8006890 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800688a:	fbb2 f3f3 	udiv	r3, r2, r3
 800688e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	2b00      	cmp	r3, #0
 8006894:	d007      	beq.n	80068a6 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8006896:	4a28      	ldr	r2, [pc, #160]	; (8006938 <HAL_SD_InitCard+0x130>)
 8006898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689a:	fbb2 f3f3 	udiv	r3, r2, r3
 800689e:	3301      	adds	r3, #1
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7fb f891 	bl	80019c8 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 fe8e 	bl	80075c8 <SD_PowerON>
 80068ac:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00b      	beq.n	80068cc <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	431a      	orrs	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e02e      	b.n	800692a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fdad 	bl	800742c <SD_InitCard>
 80068d2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80068d4:	6a3b      	ldr	r3, [r7, #32]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00b      	beq.n	80068f2 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	431a      	orrs	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e01b      	b.n	800692a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80068fa:	4618      	mov	r0, r3
 80068fc:	f002 ffe8 	bl	80098d0 <SDMMC_CmdBlockLength>
 8006900:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006902:	6a3b      	ldr	r3, [r7, #32]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00f      	beq.n	8006928 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a0b      	ldr	r2, [pc, #44]	; (800693c <HAL_SD_InitCard+0x134>)
 800690e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	431a      	orrs	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e000      	b.n	800692a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	372c      	adds	r7, #44	; 0x2c
 800692e:	46bd      	mov	sp, r7
 8006930:	bd90      	pop	{r4, r7, pc}
 8006932:	bf00      	nop
 8006934:	014f8b59 	.word	0x014f8b59
 8006938:	00012110 	.word	0x00012110
 800693c:	1fe00fff 	.word	0x1fe00fff

08006940 <HAL_SD_DeInit>:
  * @brief  De-Initializes the SD card.
  * @param  hsd: Pointer to SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_DeInit(SD_HandleTypeDef *hsd)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if (hsd == NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d101      	bne.n	8006952 <HAL_SD_DeInit+0x12>
  {
    return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e011      	b.n	8006976 <HAL_SD_DeInit+0x36>
  }

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));

  hsd->State = HAL_SD_STATE_BUSY;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2203      	movs	r2, #3
 8006956:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }
#endif /* USE_SD_TRANSCEIVER   */

  /* Set SD power state to off */
  SD_PowerOFF(hsd);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fec2 	bl	80076e4 <SD_PowerOFF>

  /* DeInit the low level hardware */
  hsd->MspDeInitCallback(hsd);
#else
  /* De-Initialize the MSP layer */
  HAL_SD_MspDeInit(hsd);
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7fa fd93 	bl	800148c <HAL_SD_MspDeInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2200      	movs	r2, #0
 800696a:	635a      	str	r2, [r3, #52]	; 0x34
  hsd->State = HAL_SD_STATE_RESET;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3708      	adds	r7, #8
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
	...

08006980 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b084      	sub	sp, #16
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800698c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006994:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d008      	beq.n	80069ae <HAL_SD_IRQHandler+0x2e>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f003 0308 	and.w	r3, r3, #8
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d003      	beq.n	80069ae <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f001 f908 	bl	8007bbc <SD_Read_IT>
 80069ac:	e19a      	b.n	8006ce4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 80ac 	beq.w	8006b16 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069c6:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	4b59      	ldr	r3, [pc, #356]	; (8006b38 <HAL_SD_IRQHandler+0x1b8>)
 80069d4:	400b      	ands	r3, r1
 80069d6:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80069e6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68da      	ldr	r2, [r3, #12]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069f6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f003 0308 	and.w	r3, r3, #8
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d038      	beq.n	8006a74 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	f003 0302 	and.w	r3, r3, #2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d104      	bne.n	8006a16 <HAL_SD_IRQHandler+0x96>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f003 0320 	and.w	r3, r3, #32
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d011      	beq.n	8006a3a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f002 ff7c 	bl	8009918 <SDMMC_CmdStopTransfer>
 8006a20:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d008      	beq.n	8006a3a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f95b 	bl	8006cf0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a3f      	ldr	r2, [pc, #252]	; (8006b3c <HAL_SD_IRQHandler+0x1bc>)
 8006a40:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d104      	bne.n	8006a64 <HAL_SD_IRQHandler+0xe4>
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f003 0302 	and.w	r3, r3, #2
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d003      	beq.n	8006a6c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f003 fbf1 	bl	800a24c <HAL_SD_RxCpltCallback>
 8006a6a:	e13b      	b.n	8006ce4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f003 fbdf 	bl	800a230 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006a72:	e137      	b.n	8006ce4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 8132 	beq.w	8006ce4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	2200      	movs	r2, #0
 8006a86:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2200      	movs	r2, #0
 8006a96:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f003 0302 	and.w	r3, r3, #2
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d104      	bne.n	8006aac <HAL_SD_IRQHandler+0x12c>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f003 0320 	and.w	r3, r3, #32
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d011      	beq.n	8006ad0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f002 ff31 	bl	8009918 <SDMMC_CmdStopTransfer>
 8006ab6:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d008      	beq.n	8006ad0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 f910 	bl	8006cf0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f003 0310 	and.w	r3, r3, #16
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d104      	bne.n	8006af2 <HAL_SD_IRQHandler+0x172>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f003 0320 	and.w	r3, r3, #32
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d002      	beq.n	8006af8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f003 fb9c 	bl	800a230 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f003 0301 	and.w	r3, r3, #1
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d105      	bne.n	8006b0e <HAL_SD_IRQHandler+0x18e>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f003 0302 	and.w	r3, r3, #2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f000 80eb 	beq.w	8006ce4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f003 fb9c 	bl	800a24c <HAL_SD_RxCpltCallback>
}
 8006b14:	e0e6      	b.n	8006ce4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00d      	beq.n	8006b40 <HAL_SD_IRQHandler+0x1c0>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f003 0308 	and.w	r3, r3, #8
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d008      	beq.n	8006b40 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f001 f88a 	bl	8007c48 <SD_Write_IT>
 8006b34:	e0d6      	b.n	8006ce4 <HAL_SD_IRQHandler+0x364>
 8006b36:	bf00      	nop
 8006b38:	ffff3ec5 	.word	0xffff3ec5
 8006b3c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b46:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f000 809d 	beq.w	8006c8a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b56:	f003 0302 	and.w	r3, r3, #2
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d005      	beq.n	8006b6a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b62:	f043 0202 	orr.w	r2, r3, #2
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b70:	f003 0308 	and.w	r3, r3, #8
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d005      	beq.n	8006b84 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b7c:	f043 0208 	orr.w	r2, r3, #8
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b8a:	f003 0320 	and.w	r3, r3, #32
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d005      	beq.n	8006b9e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b96:	f043 0220 	orr.w	r2, r3, #32
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ba4:	f003 0310 	and.w	r3, r3, #16
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d005      	beq.n	8006bb8 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb0:	f043 0210 	orr.w	r2, r3, #16
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a4b      	ldr	r2, [pc, #300]	; (8006cec <HAL_SD_IRQHandler+0x36c>)
 8006bbe:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8006bce:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68da      	ldr	r2, [r3, #12]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bde:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bee:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68da      	ldr	r2, [r3, #12]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006bfe:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4618      	mov	r0, r3
 8006c06:	f002 fe87 	bl	8009918 <SDMMC_CmdStopTransfer>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c10:	431a      	orrs	r2, r3
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68da      	ldr	r2, [r3, #12]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c24:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c2e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	f003 0308 	and.w	r3, r3, #8
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00a      	beq.n	8006c50 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f851 	bl	8006cf0 <HAL_SD_ErrorCallback>
}
 8006c4e:	e049      	b.n	8006ce4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d044      	beq.n	8006ce4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d040      	beq.n	8006ce4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006c70:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2200      	movs	r2, #0
 8006c78:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f834 	bl	8006cf0 <HAL_SD_ErrorCallback>
}
 8006c88:	e02c      	b.n	8006ce4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d025      	beq.n	8006ce4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ca0:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ca8:	f003 0304 	and.w	r3, r3, #4
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10c      	bne.n	8006cca <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f003 0320 	and.w	r3, r3, #32
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d003      	beq.n	8006cc2 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f001 f82c 	bl	8007d18 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8006cc0:	e010      	b.n	8006ce4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f001 f814 	bl	8007cf0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8006cc8:	e00c      	b.n	8006ce4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f003 0320 	and.w	r3, r3, #32
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f001 f815 	bl	8007d04 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8006cda:	e003      	b.n	8006ce4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f000 fffd 	bl	8007cdc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8006ce2:	e7ff      	b.n	8006ce4 <HAL_SD_IRQHandler+0x364>
 8006ce4:	bf00      	nop
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	18000f3a 	.word	0x18000f3a

08006cf0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	b083      	sub	sp, #12
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d12:	0f9b      	lsrs	r3, r3, #30
 8006d14:	b2da      	uxtb	r2, r3
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d1e:	0e9b      	lsrs	r3, r3, #26
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	f003 030f 	and.w	r3, r3, #15
 8006d26:	b2da      	uxtb	r2, r3
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d30:	0e1b      	lsrs	r3, r3, #24
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	f003 0303 	and.w	r3, r3, #3
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d42:	0c1b      	lsrs	r3, r3, #16
 8006d44:	b2da      	uxtb	r2, r3
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d4e:	0a1b      	lsrs	r3, r3, #8
 8006d50:	b2da      	uxtb	r2, r3
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d5a:	b2da      	uxtb	r2, r3
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d64:	0d1b      	lsrs	r3, r3, #20
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d70:	0c1b      	lsrs	r3, r3, #16
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	f003 030f 	and.w	r3, r3, #15
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d82:	0bdb      	lsrs	r3, r3, #15
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	f003 0301 	and.w	r3, r3, #1
 8006d8a:	b2da      	uxtb	r2, r3
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d94:	0b9b      	lsrs	r3, r3, #14
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	f003 0301 	and.w	r3, r3, #1
 8006d9c:	b2da      	uxtb	r2, r3
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006da6:	0b5b      	lsrs	r3, r3, #13
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	f003 0301 	and.w	r3, r3, #1
 8006dae:	b2da      	uxtb	r2, r3
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006db8:	0b1b      	lsrs	r3, r3, #12
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	f003 0301 	and.w	r3, r3, #1
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d163      	bne.n	8006e9c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dd8:	009a      	lsls	r2, r3, #2
 8006dda:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006dde:	4013      	ands	r3, r2
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8006de4:	0f92      	lsrs	r2, r2, #30
 8006de6:	431a      	orrs	r2, r3
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006df0:	0edb      	lsrs	r3, r3, #27
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	f003 0307 	and.w	r3, r3, #7
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e02:	0e1b      	lsrs	r3, r3, #24
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	f003 0307 	and.w	r3, r3, #7
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e14:	0d5b      	lsrs	r3, r3, #21
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	f003 0307 	and.w	r3, r3, #7
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e26:	0c9b      	lsrs	r3, r3, #18
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	f003 0307 	and.w	r3, r3, #7
 8006e2e:	b2da      	uxtb	r2, r3
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e38:	0bdb      	lsrs	r3, r3, #15
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	f003 0307 	and.w	r3, r3, #7
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	1c5a      	adds	r2, r3, #1
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	7e1b      	ldrb	r3, [r3, #24]
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	f003 0307 	and.w	r3, r3, #7
 8006e5a:	3302      	adds	r3, #2
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006e66:	fb03 f202 	mul.w	r2, r3, r2
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	7a1b      	ldrb	r3, [r3, #8]
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	f003 030f 	and.w	r3, r3, #15
 8006e78:	2201      	movs	r2, #1
 8006e7a:	409a      	lsls	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006e88:	0a52      	lsrs	r2, r2, #9
 8006e8a:	fb03 f202 	mul.w	r2, r3, r2
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e98:	655a      	str	r2, [r3, #84]	; 0x54
 8006e9a:	e031      	b.n	8006f00 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d11d      	bne.n	8006ee0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ea8:	041b      	lsls	r3, r3, #16
 8006eaa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006eb2:	0c1b      	lsrs	r3, r3, #16
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	029a      	lsls	r2, r3, #10
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ed4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	655a      	str	r2, [r3, #84]	; 0x54
 8006ede:	e00f      	b.n	8006f00 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a58      	ldr	r2, [pc, #352]	; (8007048 <HAL_SD_GetCardCSD+0x344>)
 8006ee6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	e09d      	b.n	800703c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f04:	0b9b      	lsrs	r3, r3, #14
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f16:	09db      	lsrs	r3, r3, #7
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f28:	b2db      	uxtb	r3, r3
 8006f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f2e:	b2da      	uxtb	r2, r3
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f38:	0fdb      	lsrs	r3, r3, #31
 8006f3a:	b2da      	uxtb	r2, r3
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f44:	0f5b      	lsrs	r3, r3, #29
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	f003 0303 	and.w	r3, r3, #3
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f56:	0e9b      	lsrs	r3, r3, #26
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	f003 0307 	and.w	r3, r3, #7
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f68:	0d9b      	lsrs	r3, r3, #22
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	f003 030f 	and.w	r3, r3, #15
 8006f70:	b2da      	uxtb	r2, r3
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f7a:	0d5b      	lsrs	r3, r3, #21
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	f003 0301 	and.w	r3, r3, #1
 8006f82:	b2da      	uxtb	r2, r3
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f96:	0c1b      	lsrs	r3, r3, #16
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	f003 0301 	and.w	r3, r3, #1
 8006f9e:	b2da      	uxtb	r2, r3
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006faa:	0bdb      	lsrs	r3, r3, #15
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	b2da      	uxtb	r2, r3
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fbe:	0b9b      	lsrs	r3, r3, #14
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	b2da      	uxtb	r2, r3
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fd2:	0b5b      	lsrs	r3, r3, #13
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	f003 0301 	and.w	r3, r3, #1
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fe6:	0b1b      	lsrs	r3, r3, #12
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	b2da      	uxtb	r2, r3
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ffa:	0a9b      	lsrs	r3, r3, #10
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	f003 0303 	and.w	r3, r3, #3
 8007002:	b2da      	uxtb	r2, r3
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800700e:	0a1b      	lsrs	r3, r3, #8
 8007010:	b2db      	uxtb	r3, r3
 8007012:	f003 0303 	and.w	r3, r3, #3
 8007016:	b2da      	uxtb	r2, r3
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007022:	085b      	lsrs	r3, r3, #1
 8007024:	b2db      	uxtb	r3, r3
 8007026:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800702a:	b2da      	uxtb	r2, r3
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800703a:	2300      	movs	r3, #0
}
 800703c:	4618      	mov	r0, r3
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr
 8007048:	1fe00fff 	.word	0x1fe00fff

0800704c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b094      	sub	sp, #80	; 0x50
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007056:	2300      	movs	r3, #0
 8007058:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007062:	b2db      	uxtb	r3, r3
 8007064:	2b03      	cmp	r3, #3
 8007066:	d101      	bne.n	800706c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	e0a7      	b.n	80071bc <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800706c:	f107 0308 	add.w	r3, r7, #8
 8007070:	4619      	mov	r1, r3
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 fb44 	bl	8007700 <SD_SendSDStatus>
 8007078:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800707a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800707c:	2b00      	cmp	r3, #0
 800707e:	d011      	beq.n	80070a4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a4f      	ldr	r2, [pc, #316]	; (80071c4 <HAL_SD_GetCardStatus+0x178>)
 8007086:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800708c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800708e:	431a      	orrs	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2201      	movs	r2, #1
 8007098:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80070a2:	e070      	b.n	8007186 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	099b      	lsrs	r3, r3, #6
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	f003 0303 	and.w	r3, r3, #3
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	095b      	lsrs	r3, r3, #5
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	b2da      	uxtb	r2, r3
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	0a1b      	lsrs	r3, r3, #8
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	0e1b      	lsrs	r3, r3, #24
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	4313      	orrs	r3, r2
 80070d8:	b29a      	uxth	r2, r3
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	061a      	lsls	r2, r3, #24
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	021b      	lsls	r3, r3, #8
 80070e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80070ea:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	0a1b      	lsrs	r3, r3, #8
 80070f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80070f4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	0e1b      	lsrs	r3, r3, #24
 80070fa:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	b2da      	uxtb	r2, r3
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	0a1b      	lsrs	r3, r3, #8
 800710c:	b2da      	uxtb	r2, r3
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	0d1b      	lsrs	r3, r3, #20
 8007116:	b2db      	uxtb	r3, r3
 8007118:	f003 030f 	and.w	r3, r3, #15
 800711c:	b2da      	uxtb	r2, r3
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	0c1b      	lsrs	r3, r3, #16
 8007126:	b29b      	uxth	r3, r3
 8007128:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800712c:	b29a      	uxth	r2, r3
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	b29b      	uxth	r3, r3
 8007132:	b2db      	uxtb	r3, r3
 8007134:	b29b      	uxth	r3, r3
 8007136:	4313      	orrs	r3, r2
 8007138:	b29a      	uxth	r2, r3
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	0a9b      	lsrs	r3, r3, #10
 8007142:	b2db      	uxtb	r3, r3
 8007144:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007148:	b2da      	uxtb	r2, r3
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	0a1b      	lsrs	r3, r3, #8
 8007152:	b2db      	uxtb	r3, r3
 8007154:	f003 0303 	and.w	r3, r3, #3
 8007158:	b2da      	uxtb	r2, r3
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	091b      	lsrs	r3, r3, #4
 8007162:	b2db      	uxtb	r3, r3
 8007164:	f003 030f 	and.w	r3, r3, #15
 8007168:	b2da      	uxtb	r2, r3
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	b2db      	uxtb	r3, r3
 8007172:	f003 030f 	and.w	r3, r3, #15
 8007176:	b2da      	uxtb	r2, r3
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	0e1b      	lsrs	r3, r3, #24
 8007180:	b2da      	uxtb	r2, r3
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800718e:	4618      	mov	r0, r3
 8007190:	f002 fb9e 	bl	80098d0 <SDMMC_CmdBlockLength>
 8007194:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007196:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00d      	beq.n	80071b8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a08      	ldr	r2, [pc, #32]	; (80071c4 <HAL_SD_GetCardStatus+0x178>)
 80071a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071a8:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 80071b8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3750      	adds	r7, #80	; 0x50
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	1fe00fff 	.word	0x1fe00fff

080071c8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80071c8:	b590      	push	{r4, r7, lr}
 80071ca:	b08d      	sub	sp, #52	; 0x34
 80071cc:	af02      	add	r7, sp, #8
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2203      	movs	r2, #3
 80071dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e4:	2b03      	cmp	r3, #3
 80071e6:	d02e      	beq.n	8007246 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071ee:	d106      	bne.n	80071fe <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	635a      	str	r2, [r3, #52]	; 0x34
 80071fc:	e029      	b.n	8007252 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007204:	d10a      	bne.n	800721c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fb72 	bl	80078f0 <SD_WideBus_Enable>
 800720c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007212:	6a3b      	ldr	r3, [r7, #32]
 8007214:	431a      	orrs	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	635a      	str	r2, [r3, #52]	; 0x34
 800721a:	e01a      	b.n	8007252 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10a      	bne.n	8007238 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fbaf 	bl	8007986 <SD_WideBus_Disable>
 8007228:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800722e:	6a3b      	ldr	r3, [r7, #32]
 8007230:	431a      	orrs	r2, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	635a      	str	r2, [r3, #52]	; 0x34
 8007236:	e00c      	b.n	8007252 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800723c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	635a      	str	r2, [r3, #52]	; 0x34
 8007244:	e005      	b.n	8007252 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800724a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007256:	2b00      	cmp	r3, #0
 8007258:	d007      	beq.n	800726a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a5f      	ldr	r2, [pc, #380]	; (80073dc <HAL_SD_ConfigWideBusOperation+0x214>)
 8007260:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007268:	e096      	b.n	8007398 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800726a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800726e:	f04f 0100 	mov.w	r1, #0
 8007272:	f7fd ff51 	bl	8005118 <HAL_RCCEx_GetPeriphCLKFreq>
 8007276:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	2b00      	cmp	r3, #0
 800727c:	f000 8083 	beq.w	8007386 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	695a      	ldr	r2, [r3, #20]
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	4950      	ldr	r1, [pc, #320]	; (80073e0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800729e:	fba1 1303 	umull	r1, r3, r1, r3
 80072a2:	0e1b      	lsrs	r3, r3, #24
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d303      	bcc.n	80072b0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	61bb      	str	r3, [r7, #24]
 80072ae:	e05a      	b.n	8007366 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072b8:	d103      	bne.n	80072c2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	61bb      	str	r3, [r7, #24]
 80072c0:	e051      	b.n	8007366 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072ca:	d126      	bne.n	800731a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	695b      	ldr	r3, [r3, #20]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10e      	bne.n	80072f2 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	4a43      	ldr	r2, [pc, #268]	; (80073e4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d906      	bls.n	80072ea <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	4a40      	ldr	r2, [pc, #256]	; (80073e0 <HAL_SD_ConfigWideBusOperation+0x218>)
 80072e0:	fba2 2303 	umull	r2, r3, r2, r3
 80072e4:	0e5b      	lsrs	r3, r3, #25
 80072e6:	61bb      	str	r3, [r7, #24]
 80072e8:	e03d      	b.n	8007366 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	61bb      	str	r3, [r7, #24]
 80072f0:	e039      	b.n	8007366 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	005b      	lsls	r3, r3, #1
 80072f8:	69fa      	ldr	r2, [r7, #28]
 80072fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80072fe:	4a39      	ldr	r2, [pc, #228]	; (80073e4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d906      	bls.n	8007312 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	4a36      	ldr	r2, [pc, #216]	; (80073e0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007308:	fba2 2303 	umull	r2, r3, r2, r3
 800730c:	0e5b      	lsrs	r3, r3, #25
 800730e:	61bb      	str	r3, [r7, #24]
 8007310:	e029      	b.n	8007366 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	61bb      	str	r3, [r7, #24]
 8007318:	e025      	b.n	8007366 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10e      	bne.n	8007340 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	4a30      	ldr	r2, [pc, #192]	; (80073e8 <HAL_SD_ConfigWideBusOperation+0x220>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d906      	bls.n	8007338 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	4a2c      	ldr	r2, [pc, #176]	; (80073e0 <HAL_SD_ConfigWideBusOperation+0x218>)
 800732e:	fba2 2303 	umull	r2, r3, r2, r3
 8007332:	0e1b      	lsrs	r3, r3, #24
 8007334:	61bb      	str	r3, [r7, #24]
 8007336:	e016      	b.n	8007366 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	61bb      	str	r3, [r7, #24]
 800733e:	e012      	b.n	8007366 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	005b      	lsls	r3, r3, #1
 8007346:	69fa      	ldr	r2, [r7, #28]
 8007348:	fbb2 f3f3 	udiv	r3, r2, r3
 800734c:	4a26      	ldr	r2, [pc, #152]	; (80073e8 <HAL_SD_ConfigWideBusOperation+0x220>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d906      	bls.n	8007360 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	4a22      	ldr	r2, [pc, #136]	; (80073e0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8007356:	fba2 2303 	umull	r2, r3, r2, r3
 800735a:	0e1b      	lsrs	r3, r3, #24
 800735c:	61bb      	str	r3, [r7, #24]
 800735e:	e002      	b.n	8007366 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	695b      	ldr	r3, [r3, #20]
 8007364:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681c      	ldr	r4, [r3, #0]
 800736a:	466a      	mov	r2, sp
 800736c:	f107 0314 	add.w	r3, r7, #20
 8007370:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007374:	e882 0003 	stmia.w	r2, {r0, r1}
 8007378:	f107 0308 	add.w	r3, r7, #8
 800737c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800737e:	4620      	mov	r0, r4
 8007380:	f002 f9b8 	bl	80096f4 <SDMMC_Init>
 8007384:	e008      	b.n	8007398 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800738a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80073a0:	4618      	mov	r0, r3
 80073a2:	f002 fa95 	bl	80098d0 <SDMMC_CmdBlockLength>
 80073a6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80073a8:	6a3b      	ldr	r3, [r7, #32]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00c      	beq.n	80073c8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a0a      	ldr	r2, [pc, #40]	; (80073dc <HAL_SD_ConfigWideBusOperation+0x214>)
 80073b4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	431a      	orrs	r2, r3
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 80073d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	372c      	adds	r7, #44	; 0x2c
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd90      	pop	{r4, r7, pc}
 80073dc:	1fe00fff 	.word	0x1fe00fff
 80073e0:	55e63b89 	.word	0x55e63b89
 80073e4:	02faf080 	.word	0x02faf080
 80073e8:	017d7840 	.word	0x017d7840

080073ec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80073f4:	2300      	movs	r3, #0
 80073f6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80073f8:	f107 030c 	add.w	r3, r7, #12
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fa4e 	bl	80078a0 <SD_SendStatus>
 8007404:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d005      	beq.n	8007418 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	431a      	orrs	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	0a5b      	lsrs	r3, r3, #9
 800741c:	f003 030f 	and.w	r3, r3, #15
 8007420:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007422:	693b      	ldr	r3, [r7, #16]
}
 8007424:	4618      	mov	r0, r3
 8007426:	3718      	adds	r7, #24
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b090      	sub	sp, #64	; 0x40
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8007434:	2300      	movs	r3, #0
 8007436:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8007438:	f7fa faba 	bl	80019b0 <HAL_GetTick>
 800743c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4618      	mov	r0, r3
 8007444:	f002 f9c0 	bl	80097c8 <SDMMC_GetPowerState>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d102      	bne.n	8007454 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800744e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007452:	e0b5      	b.n	80075c0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007458:	2b03      	cmp	r3, #3
 800745a:	d02e      	beq.n	80074ba <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4618      	mov	r0, r3
 8007462:	f002 fb7e 	bl	8009b62 <SDMMC_CmdSendCID>
 8007466:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800746a:	2b00      	cmp	r3, #0
 800746c:	d001      	beq.n	8007472 <SD_InitCard+0x46>
    {
      return errorstate;
 800746e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007470:	e0a6      	b.n	80075c0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2100      	movs	r1, #0
 8007478:	4618      	mov	r0, r3
 800747a:	f002 f9ea 	bl	8009852 <SDMMC_GetResponse>
 800747e:	4602      	mov	r2, r0
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2104      	movs	r1, #4
 800748a:	4618      	mov	r0, r3
 800748c:	f002 f9e1 	bl	8009852 <SDMMC_GetResponse>
 8007490:	4602      	mov	r2, r0
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2108      	movs	r1, #8
 800749c:	4618      	mov	r0, r3
 800749e:	f002 f9d8 	bl	8009852 <SDMMC_GetResponse>
 80074a2:	4602      	mov	r2, r0
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	210c      	movs	r1, #12
 80074ae:	4618      	mov	r0, r3
 80074b0:	f002 f9cf 	bl	8009852 <SDMMC_GetResponse>
 80074b4:	4602      	mov	r2, r0
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074be:	2b03      	cmp	r3, #3
 80074c0:	d01d      	beq.n	80074fe <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80074c2:	e019      	b.n	80074f8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f107 020a 	add.w	r2, r7, #10
 80074cc:	4611      	mov	r1, r2
 80074ce:	4618      	mov	r0, r3
 80074d0:	f002 fb86 	bl	8009be0 <SDMMC_CmdSetRelAdd>
 80074d4:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80074d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d001      	beq.n	80074e0 <SD_InitCard+0xb4>
      {
        return errorstate;
 80074dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074de:	e06f      	b.n	80075c0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80074e0:	f7fa fa66 	bl	80019b0 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	f241 3287 	movw	r2, #4999	; 0x1387
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d902      	bls.n	80074f8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80074f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80074f6:	e063      	b.n	80075c0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80074f8:	897b      	ldrh	r3, [r7, #10]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0e2      	beq.n	80074c4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007502:	2b03      	cmp	r3, #3
 8007504:	d036      	beq.n	8007574 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007506:	897b      	ldrh	r3, [r7, #10]
 8007508:	461a      	mov	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007516:	041b      	lsls	r3, r3, #16
 8007518:	4619      	mov	r1, r3
 800751a:	4610      	mov	r0, r2
 800751c:	f002 fb40 	bl	8009ba0 <SDMMC_CmdSendCSD>
 8007520:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007524:	2b00      	cmp	r3, #0
 8007526:	d001      	beq.n	800752c <SD_InitCard+0x100>
    {
      return errorstate;
 8007528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752a:	e049      	b.n	80075c0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2100      	movs	r1, #0
 8007532:	4618      	mov	r0, r3
 8007534:	f002 f98d 	bl	8009852 <SDMMC_GetResponse>
 8007538:	4602      	mov	r2, r0
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2104      	movs	r1, #4
 8007544:	4618      	mov	r0, r3
 8007546:	f002 f984 	bl	8009852 <SDMMC_GetResponse>
 800754a:	4602      	mov	r2, r0
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2108      	movs	r1, #8
 8007556:	4618      	mov	r0, r3
 8007558:	f002 f97b 	bl	8009852 <SDMMC_GetResponse>
 800755c:	4602      	mov	r2, r0
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	210c      	movs	r1, #12
 8007568:	4618      	mov	r0, r3
 800756a:	f002 f972 	bl	8009852 <SDMMC_GetResponse>
 800756e:	4602      	mov	r2, r0
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2104      	movs	r1, #4
 800757a:	4618      	mov	r0, r3
 800757c:	f002 f969 	bl	8009852 <SDMMC_GetResponse>
 8007580:	4603      	mov	r3, r0
 8007582:	0d1a      	lsrs	r2, r3, #20
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007588:	f107 030c 	add.w	r3, r7, #12
 800758c:	4619      	mov	r1, r3
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7ff fbb8 	bl	8006d04 <HAL_SD_GetCardCSD>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d002      	beq.n	80075a0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800759a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800759e:	e00f      	b.n	80075c0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075a8:	041b      	lsls	r3, r3, #16
 80075aa:	4619      	mov	r1, r3
 80075ac:	4610      	mov	r0, r2
 80075ae:	f002 f9ef 	bl	8009990 <SDMMC_CmdSelDesel>
 80075b2:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80075b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <SD_InitCard+0x192>
  {
    return errorstate;
 80075ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075bc:	e000      	b.n	80075c0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3740      	adds	r7, #64	; 0x40
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b086      	sub	sp, #24
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075d0:	2300      	movs	r3, #0
 80075d2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80075d8:	2300      	movs	r3, #0
 80075da:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f002 f9f8 	bl	80099d6 <SDMMC_CmdGoIdleState>
 80075e6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d001      	beq.n	80075f2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	e072      	b.n	80076d8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f002 fa0b 	bl	8009a12 <SDMMC_CmdOperCond>
 80075fc:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007604:	d10d      	bne.n	8007622 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2200      	movs	r2, #0
 800760a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4618      	mov	r0, r3
 8007612:	f002 f9e0 	bl	80099d6 <SDMMC_CmdGoIdleState>
 8007616:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d004      	beq.n	8007628 <SD_PowerON+0x60>
    {
      return errorstate;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	e05a      	b.n	80076d8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2201      	movs	r2, #1
 8007626:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762c:	2b01      	cmp	r3, #1
 800762e:	d137      	bne.n	80076a0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2100      	movs	r1, #0
 8007636:	4618      	mov	r0, r3
 8007638:	f002 fa0b 	bl	8009a52 <SDMMC_CmdAppCommand>
 800763c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d02d      	beq.n	80076a0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007644:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007648:	e046      	b.n	80076d8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	2100      	movs	r1, #0
 8007650:	4618      	mov	r0, r3
 8007652:	f002 f9fe 	bl	8009a52 <SDMMC_CmdAppCommand>
 8007656:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d001      	beq.n	8007662 <SD_PowerON+0x9a>
    {
      return errorstate;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	e03a      	b.n	80076d8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	491e      	ldr	r1, [pc, #120]	; (80076e0 <SD_PowerON+0x118>)
 8007668:	4618      	mov	r0, r3
 800766a:	f002 fa15 	bl	8009a98 <SDMMC_CmdAppOperCommand>
 800766e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d002      	beq.n	800767c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007676:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800767a:	e02d      	b.n	80076d8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2100      	movs	r1, #0
 8007682:	4618      	mov	r0, r3
 8007684:	f002 f8e5 	bl	8009852 <SDMMC_GetResponse>
 8007688:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	0fdb      	lsrs	r3, r3, #31
 800768e:	2b01      	cmp	r3, #1
 8007690:	d101      	bne.n	8007696 <SD_PowerON+0xce>
 8007692:	2301      	movs	r3, #1
 8007694:	e000      	b.n	8007698 <SD_PowerON+0xd0>
 8007696:	2300      	movs	r3, #0
 8007698:	613b      	str	r3, [r7, #16]

    count++;
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	3301      	adds	r3, #1
 800769e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d802      	bhi.n	80076b0 <SD_PowerON+0xe8>
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d0cc      	beq.n	800764a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d902      	bls.n	80076c0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80076ba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076be:	e00b      	b.n	80076d8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d002      	beq.n	80076d6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3718      	adds	r7, #24
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	c1100000 	.word	0xc1100000

080076e4 <SD_PowerOFF>:
  * @brief  Turns the SDMMC output signals off.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
static void SD_PowerOFF(SD_HandleTypeDef *hsd)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  /* Set Power State to OFF */
  (void)SDMMC_PowerState_OFF(hsd->Instance);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4618      	mov	r0, r3
 80076f2:	f002 f858 	bl	80097a6 <SDMMC_PowerState_OFF>
}
 80076f6:	bf00      	nop
 80076f8:	3708      	adds	r7, #8
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
	...

08007700 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b08c      	sub	sp, #48	; 0x30
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800770a:	f7fa f951 	bl	80019b0 <HAL_GetTick>
 800770e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2100      	movs	r1, #0
 800771a:	4618      	mov	r0, r3
 800771c:	f002 f899 	bl	8009852 <SDMMC_GetResponse>
 8007720:	4603      	mov	r3, r0
 8007722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007726:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800772a:	d102      	bne.n	8007732 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800772c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007730:	e0b0      	b.n	8007894 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2140      	movs	r1, #64	; 0x40
 8007738:	4618      	mov	r0, r3
 800773a:	f002 f8c9 	bl	80098d0 <SDMMC_CmdBlockLength>
 800773e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d005      	beq.n	8007752 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800774e:	6a3b      	ldr	r3, [r7, #32]
 8007750:	e0a0      	b.n	8007894 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800775a:	041b      	lsls	r3, r3, #16
 800775c:	4619      	mov	r1, r3
 800775e:	4610      	mov	r0, r2
 8007760:	f002 f977 	bl	8009a52 <SDMMC_CmdAppCommand>
 8007764:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007766:	6a3b      	ldr	r3, [r7, #32]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d005      	beq.n	8007778 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007774:	6a3b      	ldr	r3, [r7, #32]
 8007776:	e08d      	b.n	8007894 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007778:	f04f 33ff 	mov.w	r3, #4294967295
 800777c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800777e:	2340      	movs	r3, #64	; 0x40
 8007780:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007782:	2360      	movs	r3, #96	; 0x60
 8007784:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007786:	2302      	movs	r3, #2
 8007788:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800778a:	2300      	movs	r3, #0
 800778c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800778e:	2301      	movs	r3, #1
 8007790:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f107 0208 	add.w	r2, r7, #8
 800779a:	4611      	mov	r1, r2
 800779c:	4618      	mov	r0, r3
 800779e:	f002 f86b 	bl	8009878 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4618      	mov	r0, r3
 80077a8:	f002 fa5f 	bl	8009c6a <SDMMC_CmdStatusRegister>
 80077ac:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80077ae:	6a3b      	ldr	r3, [r7, #32]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d02b      	beq.n	800780c <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80077bc:	6a3b      	ldr	r3, [r7, #32]
 80077be:	e069      	b.n	8007894 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d013      	beq.n	80077f6 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80077ce:	2300      	movs	r3, #0
 80077d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077d2:	e00d      	b.n	80077f0 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4618      	mov	r0, r3
 80077da:	f001 ffb5 	bl	8009748 <SDMMC_ReadFIFO>
 80077de:	4602      	mov	r2, r0
 80077e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e2:	601a      	str	r2, [r3, #0]
        pData++;
 80077e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e6:	3304      	adds	r3, #4
 80077e8:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80077ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ec:	3301      	adds	r3, #1
 80077ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077f2:	2b07      	cmp	r3, #7
 80077f4:	d9ee      	bls.n	80077d4 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80077f6:	f7fa f8db 	bl	80019b0 <HAL_GetTick>
 80077fa:	4602      	mov	r2, r0
 80077fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007804:	d102      	bne.n	800780c <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007806:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800780a:	e043      	b.n	8007894 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007812:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007816:	2b00      	cmp	r3, #0
 8007818:	d0d2      	beq.n	80077c0 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007820:	f003 0308 	and.w	r3, r3, #8
 8007824:	2b00      	cmp	r3, #0
 8007826:	d001      	beq.n	800782c <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007828:	2308      	movs	r3, #8
 800782a:	e033      	b.n	8007894 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007832:	f003 0302 	and.w	r3, r3, #2
 8007836:	2b00      	cmp	r3, #0
 8007838:	d001      	beq.n	800783e <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800783a:	2302      	movs	r3, #2
 800783c:	e02a      	b.n	8007894 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007844:	f003 0320 	and.w	r3, r3, #32
 8007848:	2b00      	cmp	r3, #0
 800784a:	d017      	beq.n	800787c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800784c:	2320      	movs	r3, #32
 800784e:	e021      	b.n	8007894 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4618      	mov	r0, r3
 8007856:	f001 ff77 	bl	8009748 <SDMMC_ReadFIFO>
 800785a:	4602      	mov	r2, r0
 800785c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785e:	601a      	str	r2, [r3, #0]
    pData++;
 8007860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007862:	3304      	adds	r3, #4
 8007864:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007866:	f7fa f8a3 	bl	80019b0 <HAL_GetTick>
 800786a:	4602      	mov	r2, r0
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007874:	d102      	bne.n	800787c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007876:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800787a:	e00b      	b.n	8007894 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007882:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1e2      	bne.n	8007850 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a03      	ldr	r2, [pc, #12]	; (800789c <SD_SendSDStatus+0x19c>)
 8007890:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3730      	adds	r7, #48	; 0x30
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}
 800789c:	18000f3a 	.word	0x18000f3a

080078a0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d102      	bne.n	80078b6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80078b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80078b4:	e018      	b.n	80078e8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078be:	041b      	lsls	r3, r3, #16
 80078c0:	4619      	mov	r1, r3
 80078c2:	4610      	mov	r0, r2
 80078c4:	f002 f9ae 	bl	8009c24 <SDMMC_CmdSendStatus>
 80078c8:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	e009      	b.n	80078e8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2100      	movs	r1, #0
 80078da:	4618      	mov	r0, r3
 80078dc:	f001 ffb9 	bl	8009852 <SDMMC_GetResponse>
 80078e0:	4602      	mov	r2, r0
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80078e6:	2300      	movs	r3, #0
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80078f8:	2300      	movs	r3, #0
 80078fa:	60fb      	str	r3, [r7, #12]
 80078fc:	2300      	movs	r3, #0
 80078fe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	2100      	movs	r1, #0
 8007906:	4618      	mov	r0, r3
 8007908:	f001 ffa3 	bl	8009852 <SDMMC_GetResponse>
 800790c:	4603      	mov	r3, r0
 800790e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007912:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007916:	d102      	bne.n	800791e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007918:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800791c:	e02f      	b.n	800797e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800791e:	f107 030c 	add.w	r3, r7, #12
 8007922:	4619      	mov	r1, r3
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f879 	bl	8007a1c <SD_FindSCR>
 800792a:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d001      	beq.n	8007936 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8007932:	697b      	ldr	r3, [r7, #20]
 8007934:	e023      	b.n	800797e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800793c:	2b00      	cmp	r3, #0
 800793e:	d01c      	beq.n	800797a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007948:	041b      	lsls	r3, r3, #16
 800794a:	4619      	mov	r1, r3
 800794c:	4610      	mov	r0, r2
 800794e:	f002 f880 	bl	8009a52 <SDMMC_CmdAppCommand>
 8007952:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d001      	beq.n	800795e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	e00f      	b.n	800797e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2102      	movs	r1, #2
 8007964:	4618      	mov	r0, r3
 8007966:	f002 f8b7 	bl	8009ad8 <SDMMC_CmdBusWidth>
 800796a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d001      	beq.n	8007976 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	e003      	b.n	800797e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007976:	2300      	movs	r3, #0
 8007978:	e001      	b.n	800797e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800797a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800797e:	4618      	mov	r0, r3
 8007980:	3718      	adds	r7, #24
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b086      	sub	sp, #24
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800798e:	2300      	movs	r3, #0
 8007990:	60fb      	str	r3, [r7, #12]
 8007992:	2300      	movs	r3, #0
 8007994:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2100      	movs	r1, #0
 800799c:	4618      	mov	r0, r3
 800799e:	f001 ff58 	bl	8009852 <SDMMC_GetResponse>
 80079a2:	4603      	mov	r3, r0
 80079a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079ac:	d102      	bne.n	80079b4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80079ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80079b2:	e02f      	b.n	8007a14 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80079b4:	f107 030c 	add.w	r3, r7, #12
 80079b8:	4619      	mov	r1, r3
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 f82e 	bl	8007a1c <SD_FindSCR>
 80079c0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d001      	beq.n	80079cc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	e023      	b.n	8007a14 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d01c      	beq.n	8007a10 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681a      	ldr	r2, [r3, #0]
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079de:	041b      	lsls	r3, r3, #16
 80079e0:	4619      	mov	r1, r3
 80079e2:	4610      	mov	r0, r2
 80079e4:	f002 f835 	bl	8009a52 <SDMMC_CmdAppCommand>
 80079e8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d001      	beq.n	80079f4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	e00f      	b.n	8007a14 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2100      	movs	r1, #0
 80079fa:	4618      	mov	r0, r3
 80079fc:	f002 f86c 	bl	8009ad8 <SDMMC_CmdBusWidth>
 8007a00:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d001      	beq.n	8007a0c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	e003      	b.n	8007a14 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	e001      	b.n	8007a14 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007a10:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3718      	adds	r7, #24
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b08e      	sub	sp, #56	; 0x38
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007a26:	f7f9 ffc3 	bl	80019b0 <HAL_GetTick>
 8007a2a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007a30:	2300      	movs	r3, #0
 8007a32:	60bb      	str	r3, [r7, #8]
 8007a34:	2300      	movs	r3, #0
 8007a36:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2108      	movs	r1, #8
 8007a42:	4618      	mov	r0, r3
 8007a44:	f001 ff44 	bl	80098d0 <SDMMC_CmdBlockLength>
 8007a48:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d001      	beq.n	8007a54 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a52:	e0ad      	b.n	8007bb0 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a5c:	041b      	lsls	r3, r3, #16
 8007a5e:	4619      	mov	r1, r3
 8007a60:	4610      	mov	r0, r2
 8007a62:	f001 fff6 	bl	8009a52 <SDMMC_CmdAppCommand>
 8007a66:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d001      	beq.n	8007a72 <SD_FindSCR+0x56>
  {
    return errorstate;
 8007a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a70:	e09e      	b.n	8007bb0 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007a72:	f04f 33ff 	mov.w	r3, #4294967295
 8007a76:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007a78:	2308      	movs	r3, #8
 8007a7a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007a7c:	2330      	movs	r3, #48	; 0x30
 8007a7e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007a80:	2302      	movs	r3, #2
 8007a82:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007a84:	2300      	movs	r3, #0
 8007a86:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f107 0210 	add.w	r2, r7, #16
 8007a94:	4611      	mov	r1, r2
 8007a96:	4618      	mov	r0, r3
 8007a98:	f001 feee 	bl	8009878 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f002 f83c 	bl	8009b1e <SDMMC_CmdSendSCR>
 8007aa6:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d027      	beq.n	8007afe <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab0:	e07e      	b.n	8007bb0 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d113      	bne.n	8007ae8 <SD_FindSCR+0xcc>
 8007ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d110      	bne.n	8007ae8 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4618      	mov	r0, r3
 8007acc:	f001 fe3c 	bl	8009748 <SDMMC_ReadFIFO>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f001 fe35 	bl	8009748 <SDMMC_ReadFIFO>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	60fb      	str	r3, [r7, #12]
      index++;
 8007ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007ae8:	f7f9 ff62 	bl	80019b0 <HAL_GetTick>
 8007aec:	4602      	mov	r2, r0
 8007aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af0:	1ad3      	subs	r3, r2, r3
 8007af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af6:	d102      	bne.n	8007afe <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007af8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007afc:	e058      	b.n	8007bb0 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b04:	f240 532a 	movw	r3, #1322	; 0x52a
 8007b08:	4013      	ands	r3, r2
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d0d1      	beq.n	8007ab2 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b14:	f003 0308 	and.w	r3, r3, #8
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d005      	beq.n	8007b28 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2208      	movs	r2, #8
 8007b22:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007b24:	2308      	movs	r3, #8
 8007b26:	e043      	b.n	8007bb0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b2e:	f003 0302 	and.w	r3, r3, #2
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d005      	beq.n	8007b42 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007b3e:	2302      	movs	r3, #2
 8007b40:	e036      	b.n	8007bb0 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b48:	f003 0320 	and.w	r3, r3, #32
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d005      	beq.n	8007b5c <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2220      	movs	r2, #32
 8007b56:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007b58:	2320      	movs	r3, #32
 8007b5a:	e029      	b.n	8007bb0 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a15      	ldr	r2, [pc, #84]	; (8007bb8 <SD_FindSCR+0x19c>)
 8007b62:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	061a      	lsls	r2, r3, #24
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	021b      	lsls	r3, r3, #8
 8007b6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b70:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	0a1b      	lsrs	r3, r3, #8
 8007b76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007b7a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	0e1b      	lsrs	r3, r3, #24
 8007b80:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b84:	601a      	str	r2, [r3, #0]
    scr++;
 8007b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b88:	3304      	adds	r3, #4
 8007b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	061a      	lsls	r2, r3, #24
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	021b      	lsls	r3, r3, #8
 8007b94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b98:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	0a1b      	lsrs	r3, r3, #8
 8007b9e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007ba2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	0e1b      	lsrs	r3, r3, #24
 8007ba8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bac:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3738      	adds	r7, #56	; 0x38
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	18000f3a 	.word	0x18000f3a

08007bbc <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc8:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bce:	2b1f      	cmp	r3, #31
 8007bd0:	d936      	bls.n	8007c40 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	617b      	str	r3, [r7, #20]
 8007bd6:	e027      	b.n	8007c28 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f001 fdb3 	bl	8009748 <SDMMC_ReadFIFO>
 8007be2:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	b2da      	uxtb	r2, r3
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	3301      	adds	r3, #1
 8007bf0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	0a1b      	lsrs	r3, r3, #8
 8007bf6:	b2da      	uxtb	r2, r3
 8007bf8:	693b      	ldr	r3, [r7, #16]
 8007bfa:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	0c1b      	lsrs	r3, r3, #16
 8007c06:	b2da      	uxtb	r2, r3
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	3301      	adds	r3, #1
 8007c10:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	0e1b      	lsrs	r3, r3, #24
 8007c16:	b2da      	uxtb	r2, r3
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	3301      	adds	r3, #1
 8007c20:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	3301      	adds	r3, #1
 8007c26:	617b      	str	r3, [r7, #20]
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	2b07      	cmp	r3, #7
 8007c2c:	d9d4      	bls.n	8007bd8 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	693a      	ldr	r2, [r7, #16]
 8007c32:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c38:	f1a3 0220 	sub.w	r2, r3, #32
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8007c40:	bf00      	nop
 8007c42:	3718      	adds	r7, #24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	69db      	ldr	r3, [r3, #28]
 8007c54:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a1b      	ldr	r3, [r3, #32]
 8007c5a:	2b1f      	cmp	r3, #31
 8007c5c:	d93a      	bls.n	8007cd4 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8007c5e:	2300      	movs	r3, #0
 8007c60:	617b      	str	r3, [r7, #20]
 8007c62:	e02b      	b.n	8007cbc <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	021a      	lsls	r2, r3, #8
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	4313      	orrs	r3, r2
 8007c7a:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	3301      	adds	r3, #1
 8007c80:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	041a      	lsls	r2, r3, #16
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007c8e:	693b      	ldr	r3, [r7, #16]
 8007c90:	3301      	adds	r3, #1
 8007c92:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	061a      	lsls	r2, r3, #24
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f107 020c 	add.w	r2, r7, #12
 8007cae:	4611      	mov	r1, r2
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f001 fd56 	bl	8009762 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	3301      	adds	r3, #1
 8007cba:	617b      	str	r3, [r7, #20]
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	2b07      	cmp	r3, #7
 8007cc0:	d9d0      	bls.n	8007c64 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	693a      	ldr	r2, [r7, #16]
 8007cc6:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6a1b      	ldr	r3, [r3, #32]
 8007ccc:	f1a3 0220 	sub.w	r2, r3, #32
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	621a      	str	r2, [r3, #32]
  }
}
 8007cd4:	bf00      	nop
 8007cd6:	3718      	adds	r7, #24
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007cf8:	bf00      	nop
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007d0c:	bf00      	nop
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007d20:	bf00      	nop
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e049      	b.n	8007dd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d106      	bne.n	8007d58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f000 f89d 	bl	8007e92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2202      	movs	r2, #2
 8007d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	3304      	adds	r3, #4
 8007d68:	4619      	mov	r1, r3
 8007d6a:	4610      	mov	r0, r2
 8007d6c:	f000 fa66 	bl	800823c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2201      	movs	r2, #1
 8007db4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2201      	movs	r2, #1
 8007dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b082      	sub	sp, #8
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2202      	movs	r2, #2
 8007de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	6a1a      	ldr	r2, [r3, #32]
 8007df0:	f241 1311 	movw	r3, #4369	; 0x1111
 8007df4:	4013      	ands	r3, r2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10f      	bne.n	8007e1a <HAL_TIM_Base_DeInit+0x40>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	6a1a      	ldr	r2, [r3, #32]
 8007e00:	f240 4344 	movw	r3, #1092	; 0x444
 8007e04:	4013      	ands	r3, r2
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d107      	bne.n	8007e1a <HAL_TIM_Base_DeInit+0x40>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f022 0201 	bic.w	r2, r2, #1
 8007e18:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 f843 	bl	8007ea6 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}

08007e92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007e92:	b480      	push	{r7}
 8007e94:	b083      	sub	sp, #12
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007e9a:	bf00      	nop
 8007e9c:	370c      	adds	r7, #12
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr

08007ea6 <HAL_TIM_Base_MspDeInit>:
  * @brief  DeInitializes TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b083      	sub	sp, #12
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspDeInit could be implemented in the user file
   */
}
 8007eae:	bf00      	nop
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr
	...

08007ebc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d001      	beq.n	8007ed4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e054      	b.n	8007f7e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2202      	movs	r2, #2
 8007ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	68da      	ldr	r2, [r3, #12]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f042 0201 	orr.w	r2, r2, #1
 8007eea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a26      	ldr	r2, [pc, #152]	; (8007f8c <HAL_TIM_Base_Start_IT+0xd0>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d022      	beq.n	8007f3c <HAL_TIM_Base_Start_IT+0x80>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007efe:	d01d      	beq.n	8007f3c <HAL_TIM_Base_Start_IT+0x80>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a22      	ldr	r2, [pc, #136]	; (8007f90 <HAL_TIM_Base_Start_IT+0xd4>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d018      	beq.n	8007f3c <HAL_TIM_Base_Start_IT+0x80>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a21      	ldr	r2, [pc, #132]	; (8007f94 <HAL_TIM_Base_Start_IT+0xd8>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d013      	beq.n	8007f3c <HAL_TIM_Base_Start_IT+0x80>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a1f      	ldr	r2, [pc, #124]	; (8007f98 <HAL_TIM_Base_Start_IT+0xdc>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d00e      	beq.n	8007f3c <HAL_TIM_Base_Start_IT+0x80>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a1e      	ldr	r2, [pc, #120]	; (8007f9c <HAL_TIM_Base_Start_IT+0xe0>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d009      	beq.n	8007f3c <HAL_TIM_Base_Start_IT+0x80>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a1c      	ldr	r2, [pc, #112]	; (8007fa0 <HAL_TIM_Base_Start_IT+0xe4>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d004      	beq.n	8007f3c <HAL_TIM_Base_Start_IT+0x80>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a1b      	ldr	r2, [pc, #108]	; (8007fa4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d115      	bne.n	8007f68 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	689a      	ldr	r2, [r3, #8]
 8007f42:	4b19      	ldr	r3, [pc, #100]	; (8007fa8 <HAL_TIM_Base_Start_IT+0xec>)
 8007f44:	4013      	ands	r3, r2
 8007f46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2b06      	cmp	r3, #6
 8007f4c:	d015      	beq.n	8007f7a <HAL_TIM_Base_Start_IT+0xbe>
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f54:	d011      	beq.n	8007f7a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	681a      	ldr	r2, [r3, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f042 0201 	orr.w	r2, r2, #1
 8007f64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f66:	e008      	b.n	8007f7a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f042 0201 	orr.w	r2, r2, #1
 8007f76:	601a      	str	r2, [r3, #0]
 8007f78:	e000      	b.n	8007f7c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3714      	adds	r7, #20
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	40010000 	.word	0x40010000
 8007f90:	40000400 	.word	0x40000400
 8007f94:	40000800 	.word	0x40000800
 8007f98:	40000c00 	.word	0x40000c00
 8007f9c:	40010400 	.word	0x40010400
 8007fa0:	40001800 	.word	0x40001800
 8007fa4:	40014000 	.word	0x40014000
 8007fa8:	00010007 	.word	0x00010007

08007fac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b082      	sub	sp, #8
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	f003 0302 	and.w	r3, r3, #2
 8007fbe:	2b02      	cmp	r3, #2
 8007fc0:	d122      	bne.n	8008008 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	f003 0302 	and.w	r3, r3, #2
 8007fcc:	2b02      	cmp	r3, #2
 8007fce:	d11b      	bne.n	8008008 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f06f 0202 	mvn.w	r2, #2
 8007fd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2201      	movs	r2, #1
 8007fde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	f003 0303 	and.w	r3, r3, #3
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f905 	bl	80081fe <HAL_TIM_IC_CaptureCallback>
 8007ff4:	e005      	b.n	8008002 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f8f7 	bl	80081ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f908 	bl	8008212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	f003 0304 	and.w	r3, r3, #4
 8008012:	2b04      	cmp	r3, #4
 8008014:	d122      	bne.n	800805c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	f003 0304 	and.w	r3, r3, #4
 8008020:	2b04      	cmp	r3, #4
 8008022:	d11b      	bne.n	800805c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f06f 0204 	mvn.w	r2, #4
 800802c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2202      	movs	r2, #2
 8008032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800803e:	2b00      	cmp	r3, #0
 8008040:	d003      	beq.n	800804a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f8db 	bl	80081fe <HAL_TIM_IC_CaptureCallback>
 8008048:	e005      	b.n	8008056 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 f8cd 	bl	80081ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f8de 	bl	8008212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	f003 0308 	and.w	r3, r3, #8
 8008066:	2b08      	cmp	r3, #8
 8008068:	d122      	bne.n	80080b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	f003 0308 	and.w	r3, r3, #8
 8008074:	2b08      	cmp	r3, #8
 8008076:	d11b      	bne.n	80080b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f06f 0208 	mvn.w	r2, #8
 8008080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2204      	movs	r2, #4
 8008086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	69db      	ldr	r3, [r3, #28]
 800808e:	f003 0303 	and.w	r3, r3, #3
 8008092:	2b00      	cmp	r3, #0
 8008094:	d003      	beq.n	800809e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f8b1 	bl	80081fe <HAL_TIM_IC_CaptureCallback>
 800809c:	e005      	b.n	80080aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f8a3 	bl	80081ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 f8b4 	bl	8008212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	691b      	ldr	r3, [r3, #16]
 80080b6:	f003 0310 	and.w	r3, r3, #16
 80080ba:	2b10      	cmp	r3, #16
 80080bc:	d122      	bne.n	8008104 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	f003 0310 	and.w	r3, r3, #16
 80080c8:	2b10      	cmp	r3, #16
 80080ca:	d11b      	bne.n	8008104 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f06f 0210 	mvn.w	r2, #16
 80080d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2208      	movs	r2, #8
 80080da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	69db      	ldr	r3, [r3, #28]
 80080e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d003      	beq.n	80080f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f887 	bl	80081fe <HAL_TIM_IC_CaptureCallback>
 80080f0:	e005      	b.n	80080fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f879 	bl	80081ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f88a 	bl	8008212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	f003 0301 	and.w	r3, r3, #1
 800810e:	2b01      	cmp	r3, #1
 8008110:	d10e      	bne.n	8008130 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	f003 0301 	and.w	r3, r3, #1
 800811c:	2b01      	cmp	r3, #1
 800811e:	d107      	bne.n	8008130 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f06f 0201 	mvn.w	r2, #1
 8008128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f7f9 f88a 	bl	8001244 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800813a:	2b80      	cmp	r3, #128	; 0x80
 800813c:	d10e      	bne.n	800815c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008148:	2b80      	cmp	r3, #128	; 0x80
 800814a:	d107      	bne.n	800815c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f914 	bl	8008384 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800816a:	d10e      	bne.n	800818a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008176:	2b80      	cmp	r3, #128	; 0x80
 8008178:	d107      	bne.n	800818a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f907 	bl	8008398 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	691b      	ldr	r3, [r3, #16]
 8008190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008194:	2b40      	cmp	r3, #64	; 0x40
 8008196:	d10e      	bne.n	80081b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081a2:	2b40      	cmp	r3, #64	; 0x40
 80081a4:	d107      	bne.n	80081b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 f838 	bl	8008226 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	f003 0320 	and.w	r3, r3, #32
 80081c0:	2b20      	cmp	r3, #32
 80081c2:	d10e      	bne.n	80081e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	f003 0320 	and.w	r3, r3, #32
 80081ce:	2b20      	cmp	r3, #32
 80081d0:	d107      	bne.n	80081e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f06f 0220 	mvn.w	r2, #32
 80081da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 f8c7 	bl	8008370 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081e2:	bf00      	nop
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b083      	sub	sp, #12
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081f2:	bf00      	nop
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081fe:	b480      	push	{r7}
 8008200:	b083      	sub	sp, #12
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008206:	bf00      	nop
 8008208:	370c      	adds	r7, #12
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr

08008212 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008212:	b480      	push	{r7}
 8008214:	b083      	sub	sp, #12
 8008216:	af00      	add	r7, sp, #0
 8008218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800821a:	bf00      	nop
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008226:	b480      	push	{r7}
 8008228:	b083      	sub	sp, #12
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800822e:	bf00      	nop
 8008230:	370c      	adds	r7, #12
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr
	...

0800823c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800823c:	b480      	push	{r7}
 800823e:	b085      	sub	sp, #20
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a40      	ldr	r2, [pc, #256]	; (8008350 <TIM_Base_SetConfig+0x114>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d013      	beq.n	800827c <TIM_Base_SetConfig+0x40>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800825a:	d00f      	beq.n	800827c <TIM_Base_SetConfig+0x40>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	4a3d      	ldr	r2, [pc, #244]	; (8008354 <TIM_Base_SetConfig+0x118>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d00b      	beq.n	800827c <TIM_Base_SetConfig+0x40>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a3c      	ldr	r2, [pc, #240]	; (8008358 <TIM_Base_SetConfig+0x11c>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d007      	beq.n	800827c <TIM_Base_SetConfig+0x40>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a3b      	ldr	r2, [pc, #236]	; (800835c <TIM_Base_SetConfig+0x120>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d003      	beq.n	800827c <TIM_Base_SetConfig+0x40>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4a3a      	ldr	r2, [pc, #232]	; (8008360 <TIM_Base_SetConfig+0x124>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d108      	bne.n	800828e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008282:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	4313      	orrs	r3, r2
 800828c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a2f      	ldr	r2, [pc, #188]	; (8008350 <TIM_Base_SetConfig+0x114>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d01f      	beq.n	80082d6 <TIM_Base_SetConfig+0x9a>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800829c:	d01b      	beq.n	80082d6 <TIM_Base_SetConfig+0x9a>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a2c      	ldr	r2, [pc, #176]	; (8008354 <TIM_Base_SetConfig+0x118>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d017      	beq.n	80082d6 <TIM_Base_SetConfig+0x9a>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a2b      	ldr	r2, [pc, #172]	; (8008358 <TIM_Base_SetConfig+0x11c>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d013      	beq.n	80082d6 <TIM_Base_SetConfig+0x9a>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a2a      	ldr	r2, [pc, #168]	; (800835c <TIM_Base_SetConfig+0x120>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d00f      	beq.n	80082d6 <TIM_Base_SetConfig+0x9a>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a29      	ldr	r2, [pc, #164]	; (8008360 <TIM_Base_SetConfig+0x124>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d00b      	beq.n	80082d6 <TIM_Base_SetConfig+0x9a>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a28      	ldr	r2, [pc, #160]	; (8008364 <TIM_Base_SetConfig+0x128>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d007      	beq.n	80082d6 <TIM_Base_SetConfig+0x9a>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a27      	ldr	r2, [pc, #156]	; (8008368 <TIM_Base_SetConfig+0x12c>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d003      	beq.n	80082d6 <TIM_Base_SetConfig+0x9a>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a26      	ldr	r2, [pc, #152]	; (800836c <TIM_Base_SetConfig+0x130>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d108      	bne.n	80082e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	68db      	ldr	r3, [r3, #12]
 80082e2:	68fa      	ldr	r2, [r7, #12]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	4313      	orrs	r3, r2
 80082f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	68fa      	ldr	r2, [r7, #12]
 80082fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	689a      	ldr	r2, [r3, #8]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a10      	ldr	r2, [pc, #64]	; (8008350 <TIM_Base_SetConfig+0x114>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d00f      	beq.n	8008334 <TIM_Base_SetConfig+0xf8>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4a12      	ldr	r2, [pc, #72]	; (8008360 <TIM_Base_SetConfig+0x124>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d00b      	beq.n	8008334 <TIM_Base_SetConfig+0xf8>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	4a11      	ldr	r2, [pc, #68]	; (8008364 <TIM_Base_SetConfig+0x128>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d007      	beq.n	8008334 <TIM_Base_SetConfig+0xf8>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	4a10      	ldr	r2, [pc, #64]	; (8008368 <TIM_Base_SetConfig+0x12c>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d003      	beq.n	8008334 <TIM_Base_SetConfig+0xf8>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	4a0f      	ldr	r2, [pc, #60]	; (800836c <TIM_Base_SetConfig+0x130>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d103      	bne.n	800833c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	691a      	ldr	r2, [r3, #16]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2201      	movs	r2, #1
 8008340:	615a      	str	r2, [r3, #20]
}
 8008342:	bf00      	nop
 8008344:	3714      	adds	r7, #20
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	40010000 	.word	0x40010000
 8008354:	40000400 	.word	0x40000400
 8008358:	40000800 	.word	0x40000800
 800835c:	40000c00 	.word	0x40000c00
 8008360:	40010400 	.word	0x40010400
 8008364:	40014000 	.word	0x40014000
 8008368:	40014400 	.word	0x40014400
 800836c:	40014800 	.word	0x40014800

08008370 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008384:	b480      	push	{r7}
 8008386:	b083      	sub	sp, #12
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800838c:	bf00      	nop
 800838e:	370c      	adds	r7, #12
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80083a0:	bf00      	nop
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d101      	bne.n	80083be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e042      	b.n	8008444 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d106      	bne.n	80083d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f7f9 f885 	bl	80014e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2224      	movs	r2, #36	; 0x24
 80083da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f022 0201 	bic.w	r2, r2, #1
 80083ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f8fa 	bl	80085e8 <UART_SetConfig>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	d101      	bne.n	80083fe <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80083fa:	2301      	movs	r3, #1
 80083fc:	e022      	b.n	8008444 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008402:	2b00      	cmp	r3, #0
 8008404:	d002      	beq.n	800840c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 fe56 	bl	80090b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	685a      	ldr	r2, [r3, #4]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800841a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	689a      	ldr	r2, [r3, #8]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800842a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681a      	ldr	r2, [r3, #0]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f042 0201 	orr.w	r2, r2, #1
 800843a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 fedd 	bl	80091fc <UART_CheckIdleState>
 8008442:	4603      	mov	r3, r0
}
 8008444:	4618      	mov	r0, r3
 8008446:	3708      	adds	r7, #8
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d101      	bne.n	800845e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	e031      	b.n	80084c2 <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2224      	movs	r2, #36	; 0x24
 8008462:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f022 0201 	bic.w	r2, r2, #1
 8008474:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	2200      	movs	r2, #0
 800847c:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2200      	movs	r2, #0
 8008484:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2200      	movs	r2, #0
 800848c:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f7f9 f890 	bl	80015b4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2200      	movs	r2, #0
 8008498:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80084c0:	2300      	movs	r3, #0
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3708      	adds	r7, #8
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}

080084ca <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084ca:	b580      	push	{r7, lr}
 80084cc:	b08a      	sub	sp, #40	; 0x28
 80084ce:	af02      	add	r7, sp, #8
 80084d0:	60f8      	str	r0, [r7, #12]
 80084d2:	60b9      	str	r1, [r7, #8]
 80084d4:	603b      	str	r3, [r7, #0]
 80084d6:	4613      	mov	r3, r2
 80084d8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084e0:	2b20      	cmp	r3, #32
 80084e2:	d17b      	bne.n	80085dc <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d002      	beq.n	80084f0 <HAL_UART_Transmit+0x26>
 80084ea:	88fb      	ldrh	r3, [r7, #6]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e074      	b.n	80085de <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	2221      	movs	r2, #33	; 0x21
 8008500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008504:	f7f9 fa54 	bl	80019b0 <HAL_GetTick>
 8008508:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	88fa      	ldrh	r2, [r7, #6]
 800850e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	88fa      	ldrh	r2, [r7, #6]
 8008516:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008522:	d108      	bne.n	8008536 <HAL_UART_Transmit+0x6c>
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d104      	bne.n	8008536 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800852c:	2300      	movs	r3, #0
 800852e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	61bb      	str	r3, [r7, #24]
 8008534:	e003      	b.n	800853e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800853a:	2300      	movs	r3, #0
 800853c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800853e:	e030      	b.n	80085a2 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	9300      	str	r3, [sp, #0]
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	2200      	movs	r2, #0
 8008548:	2180      	movs	r1, #128	; 0x80
 800854a:	68f8      	ldr	r0, [r7, #12]
 800854c:	f000 ff00 	bl	8009350 <UART_WaitOnFlagUntilTimeout>
 8008550:	4603      	mov	r3, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	d005      	beq.n	8008562 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2220      	movs	r2, #32
 800855a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800855e:	2303      	movs	r3, #3
 8008560:	e03d      	b.n	80085de <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d10b      	bne.n	8008580 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	881b      	ldrh	r3, [r3, #0]
 800856c:	461a      	mov	r2, r3
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008576:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	3302      	adds	r3, #2
 800857c:	61bb      	str	r3, [r7, #24]
 800857e:	e007      	b.n	8008590 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008580:	69fb      	ldr	r3, [r7, #28]
 8008582:	781a      	ldrb	r2, [r3, #0]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	3301      	adds	r3, #1
 800858e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008596:	b29b      	uxth	r3, r3
 8008598:	3b01      	subs	r3, #1
 800859a:	b29a      	uxth	r2, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d1c8      	bne.n	8008540 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	2200      	movs	r2, #0
 80085b6:	2140      	movs	r1, #64	; 0x40
 80085b8:	68f8      	ldr	r0, [r7, #12]
 80085ba:	f000 fec9 	bl	8009350 <UART_WaitOnFlagUntilTimeout>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d005      	beq.n	80085d0 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2220      	movs	r2, #32
 80085c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80085cc:	2303      	movs	r3, #3
 80085ce:	e006      	b.n	80085de <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2220      	movs	r2, #32
 80085d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80085d8:	2300      	movs	r3, #0
 80085da:	e000      	b.n	80085de <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80085dc:	2302      	movs	r3, #2
  }
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3720      	adds	r7, #32
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
	...

080085e8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085ec:	b092      	sub	sp, #72	; 0x48
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085f2:	2300      	movs	r3, #0
 80085f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	689a      	ldr	r2, [r3, #8]
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	431a      	orrs	r2, r3
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	431a      	orrs	r2, r3
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	69db      	ldr	r3, [r3, #28]
 800860c:	4313      	orrs	r3, r2
 800860e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681a      	ldr	r2, [r3, #0]
 8008616:	4bbe      	ldr	r3, [pc, #760]	; (8008910 <UART_SetConfig+0x328>)
 8008618:	4013      	ands	r3, r2
 800861a:	697a      	ldr	r2, [r7, #20]
 800861c:	6812      	ldr	r2, [r2, #0]
 800861e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008620:	430b      	orrs	r3, r1
 8008622:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	685b      	ldr	r3, [r3, #4]
 800862a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	68da      	ldr	r2, [r3, #12]
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	430a      	orrs	r2, r1
 8008638:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	699b      	ldr	r3, [r3, #24]
 800863e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4ab3      	ldr	r2, [pc, #716]	; (8008914 <UART_SetConfig+0x32c>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d004      	beq.n	8008654 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	6a1b      	ldr	r3, [r3, #32]
 800864e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008650:	4313      	orrs	r3, r2
 8008652:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	689a      	ldr	r2, [r3, #8]
 800865a:	4baf      	ldr	r3, [pc, #700]	; (8008918 <UART_SetConfig+0x330>)
 800865c:	4013      	ands	r3, r2
 800865e:	697a      	ldr	r2, [r7, #20]
 8008660:	6812      	ldr	r2, [r2, #0]
 8008662:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008664:	430b      	orrs	r3, r1
 8008666:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866e:	f023 010f 	bic.w	r1, r3, #15
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	430a      	orrs	r2, r1
 800867c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4aa6      	ldr	r2, [pc, #664]	; (800891c <UART_SetConfig+0x334>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d177      	bne.n	8008778 <UART_SetConfig+0x190>
 8008688:	4ba5      	ldr	r3, [pc, #660]	; (8008920 <UART_SetConfig+0x338>)
 800868a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800868c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008690:	2b28      	cmp	r3, #40	; 0x28
 8008692:	d86d      	bhi.n	8008770 <UART_SetConfig+0x188>
 8008694:	a201      	add	r2, pc, #4	; (adr r2, 800869c <UART_SetConfig+0xb4>)
 8008696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869a:	bf00      	nop
 800869c:	08008741 	.word	0x08008741
 80086a0:	08008771 	.word	0x08008771
 80086a4:	08008771 	.word	0x08008771
 80086a8:	08008771 	.word	0x08008771
 80086ac:	08008771 	.word	0x08008771
 80086b0:	08008771 	.word	0x08008771
 80086b4:	08008771 	.word	0x08008771
 80086b8:	08008771 	.word	0x08008771
 80086bc:	08008749 	.word	0x08008749
 80086c0:	08008771 	.word	0x08008771
 80086c4:	08008771 	.word	0x08008771
 80086c8:	08008771 	.word	0x08008771
 80086cc:	08008771 	.word	0x08008771
 80086d0:	08008771 	.word	0x08008771
 80086d4:	08008771 	.word	0x08008771
 80086d8:	08008771 	.word	0x08008771
 80086dc:	08008751 	.word	0x08008751
 80086e0:	08008771 	.word	0x08008771
 80086e4:	08008771 	.word	0x08008771
 80086e8:	08008771 	.word	0x08008771
 80086ec:	08008771 	.word	0x08008771
 80086f0:	08008771 	.word	0x08008771
 80086f4:	08008771 	.word	0x08008771
 80086f8:	08008771 	.word	0x08008771
 80086fc:	08008759 	.word	0x08008759
 8008700:	08008771 	.word	0x08008771
 8008704:	08008771 	.word	0x08008771
 8008708:	08008771 	.word	0x08008771
 800870c:	08008771 	.word	0x08008771
 8008710:	08008771 	.word	0x08008771
 8008714:	08008771 	.word	0x08008771
 8008718:	08008771 	.word	0x08008771
 800871c:	08008761 	.word	0x08008761
 8008720:	08008771 	.word	0x08008771
 8008724:	08008771 	.word	0x08008771
 8008728:	08008771 	.word	0x08008771
 800872c:	08008771 	.word	0x08008771
 8008730:	08008771 	.word	0x08008771
 8008734:	08008771 	.word	0x08008771
 8008738:	08008771 	.word	0x08008771
 800873c:	08008769 	.word	0x08008769
 8008740:	2301      	movs	r3, #1
 8008742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008746:	e222      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008748:	2304      	movs	r3, #4
 800874a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800874e:	e21e      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008750:	2308      	movs	r3, #8
 8008752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008756:	e21a      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008758:	2310      	movs	r3, #16
 800875a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800875e:	e216      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008760:	2320      	movs	r3, #32
 8008762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008766:	e212      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008768:	2340      	movs	r3, #64	; 0x40
 800876a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800876e:	e20e      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008770:	2380      	movs	r3, #128	; 0x80
 8008772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008776:	e20a      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a69      	ldr	r2, [pc, #420]	; (8008924 <UART_SetConfig+0x33c>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d130      	bne.n	80087e4 <UART_SetConfig+0x1fc>
 8008782:	4b67      	ldr	r3, [pc, #412]	; (8008920 <UART_SetConfig+0x338>)
 8008784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008786:	f003 0307 	and.w	r3, r3, #7
 800878a:	2b05      	cmp	r3, #5
 800878c:	d826      	bhi.n	80087dc <UART_SetConfig+0x1f4>
 800878e:	a201      	add	r2, pc, #4	; (adr r2, 8008794 <UART_SetConfig+0x1ac>)
 8008790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008794:	080087ad 	.word	0x080087ad
 8008798:	080087b5 	.word	0x080087b5
 800879c:	080087bd 	.word	0x080087bd
 80087a0:	080087c5 	.word	0x080087c5
 80087a4:	080087cd 	.word	0x080087cd
 80087a8:	080087d5 	.word	0x080087d5
 80087ac:	2300      	movs	r3, #0
 80087ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087b2:	e1ec      	b.n	8008b8e <UART_SetConfig+0x5a6>
 80087b4:	2304      	movs	r3, #4
 80087b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ba:	e1e8      	b.n	8008b8e <UART_SetConfig+0x5a6>
 80087bc:	2308      	movs	r3, #8
 80087be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087c2:	e1e4      	b.n	8008b8e <UART_SetConfig+0x5a6>
 80087c4:	2310      	movs	r3, #16
 80087c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087ca:	e1e0      	b.n	8008b8e <UART_SetConfig+0x5a6>
 80087cc:	2320      	movs	r3, #32
 80087ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087d2:	e1dc      	b.n	8008b8e <UART_SetConfig+0x5a6>
 80087d4:	2340      	movs	r3, #64	; 0x40
 80087d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087da:	e1d8      	b.n	8008b8e <UART_SetConfig+0x5a6>
 80087dc:	2380      	movs	r3, #128	; 0x80
 80087de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80087e2:	e1d4      	b.n	8008b8e <UART_SetConfig+0x5a6>
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a4f      	ldr	r2, [pc, #316]	; (8008928 <UART_SetConfig+0x340>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d130      	bne.n	8008850 <UART_SetConfig+0x268>
 80087ee:	4b4c      	ldr	r3, [pc, #304]	; (8008920 <UART_SetConfig+0x338>)
 80087f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087f2:	f003 0307 	and.w	r3, r3, #7
 80087f6:	2b05      	cmp	r3, #5
 80087f8:	d826      	bhi.n	8008848 <UART_SetConfig+0x260>
 80087fa:	a201      	add	r2, pc, #4	; (adr r2, 8008800 <UART_SetConfig+0x218>)
 80087fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008800:	08008819 	.word	0x08008819
 8008804:	08008821 	.word	0x08008821
 8008808:	08008829 	.word	0x08008829
 800880c:	08008831 	.word	0x08008831
 8008810:	08008839 	.word	0x08008839
 8008814:	08008841 	.word	0x08008841
 8008818:	2300      	movs	r3, #0
 800881a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800881e:	e1b6      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008820:	2304      	movs	r3, #4
 8008822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008826:	e1b2      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008828:	2308      	movs	r3, #8
 800882a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800882e:	e1ae      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008830:	2310      	movs	r3, #16
 8008832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008836:	e1aa      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008838:	2320      	movs	r3, #32
 800883a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800883e:	e1a6      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008840:	2340      	movs	r3, #64	; 0x40
 8008842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008846:	e1a2      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008848:	2380      	movs	r3, #128	; 0x80
 800884a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800884e:	e19e      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a35      	ldr	r2, [pc, #212]	; (800892c <UART_SetConfig+0x344>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d130      	bne.n	80088bc <UART_SetConfig+0x2d4>
 800885a:	4b31      	ldr	r3, [pc, #196]	; (8008920 <UART_SetConfig+0x338>)
 800885c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800885e:	f003 0307 	and.w	r3, r3, #7
 8008862:	2b05      	cmp	r3, #5
 8008864:	d826      	bhi.n	80088b4 <UART_SetConfig+0x2cc>
 8008866:	a201      	add	r2, pc, #4	; (adr r2, 800886c <UART_SetConfig+0x284>)
 8008868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886c:	08008885 	.word	0x08008885
 8008870:	0800888d 	.word	0x0800888d
 8008874:	08008895 	.word	0x08008895
 8008878:	0800889d 	.word	0x0800889d
 800887c:	080088a5 	.word	0x080088a5
 8008880:	080088ad 	.word	0x080088ad
 8008884:	2300      	movs	r3, #0
 8008886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800888a:	e180      	b.n	8008b8e <UART_SetConfig+0x5a6>
 800888c:	2304      	movs	r3, #4
 800888e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008892:	e17c      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008894:	2308      	movs	r3, #8
 8008896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800889a:	e178      	b.n	8008b8e <UART_SetConfig+0x5a6>
 800889c:	2310      	movs	r3, #16
 800889e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088a2:	e174      	b.n	8008b8e <UART_SetConfig+0x5a6>
 80088a4:	2320      	movs	r3, #32
 80088a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088aa:	e170      	b.n	8008b8e <UART_SetConfig+0x5a6>
 80088ac:	2340      	movs	r3, #64	; 0x40
 80088ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088b2:	e16c      	b.n	8008b8e <UART_SetConfig+0x5a6>
 80088b4:	2380      	movs	r3, #128	; 0x80
 80088b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088ba:	e168      	b.n	8008b8e <UART_SetConfig+0x5a6>
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a1b      	ldr	r2, [pc, #108]	; (8008930 <UART_SetConfig+0x348>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d142      	bne.n	800894c <UART_SetConfig+0x364>
 80088c6:	4b16      	ldr	r3, [pc, #88]	; (8008920 <UART_SetConfig+0x338>)
 80088c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088ca:	f003 0307 	and.w	r3, r3, #7
 80088ce:	2b05      	cmp	r3, #5
 80088d0:	d838      	bhi.n	8008944 <UART_SetConfig+0x35c>
 80088d2:	a201      	add	r2, pc, #4	; (adr r2, 80088d8 <UART_SetConfig+0x2f0>)
 80088d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d8:	080088f1 	.word	0x080088f1
 80088dc:	080088f9 	.word	0x080088f9
 80088e0:	08008901 	.word	0x08008901
 80088e4:	08008909 	.word	0x08008909
 80088e8:	08008935 	.word	0x08008935
 80088ec:	0800893d 	.word	0x0800893d
 80088f0:	2300      	movs	r3, #0
 80088f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088f6:	e14a      	b.n	8008b8e <UART_SetConfig+0x5a6>
 80088f8:	2304      	movs	r3, #4
 80088fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80088fe:	e146      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008900:	2308      	movs	r3, #8
 8008902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008906:	e142      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008908:	2310      	movs	r3, #16
 800890a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800890e:	e13e      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008910:	cfff69f3 	.word	0xcfff69f3
 8008914:	58000c00 	.word	0x58000c00
 8008918:	11fff4ff 	.word	0x11fff4ff
 800891c:	40011000 	.word	0x40011000
 8008920:	58024400 	.word	0x58024400
 8008924:	40004400 	.word	0x40004400
 8008928:	40004800 	.word	0x40004800
 800892c:	40004c00 	.word	0x40004c00
 8008930:	40005000 	.word	0x40005000
 8008934:	2320      	movs	r3, #32
 8008936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800893a:	e128      	b.n	8008b8e <UART_SetConfig+0x5a6>
 800893c:	2340      	movs	r3, #64	; 0x40
 800893e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008942:	e124      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008944:	2380      	movs	r3, #128	; 0x80
 8008946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800894a:	e120      	b.n	8008b8e <UART_SetConfig+0x5a6>
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4acb      	ldr	r2, [pc, #812]	; (8008c80 <UART_SetConfig+0x698>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d176      	bne.n	8008a44 <UART_SetConfig+0x45c>
 8008956:	4bcb      	ldr	r3, [pc, #812]	; (8008c84 <UART_SetConfig+0x69c>)
 8008958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800895a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800895e:	2b28      	cmp	r3, #40	; 0x28
 8008960:	d86c      	bhi.n	8008a3c <UART_SetConfig+0x454>
 8008962:	a201      	add	r2, pc, #4	; (adr r2, 8008968 <UART_SetConfig+0x380>)
 8008964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008968:	08008a0d 	.word	0x08008a0d
 800896c:	08008a3d 	.word	0x08008a3d
 8008970:	08008a3d 	.word	0x08008a3d
 8008974:	08008a3d 	.word	0x08008a3d
 8008978:	08008a3d 	.word	0x08008a3d
 800897c:	08008a3d 	.word	0x08008a3d
 8008980:	08008a3d 	.word	0x08008a3d
 8008984:	08008a3d 	.word	0x08008a3d
 8008988:	08008a15 	.word	0x08008a15
 800898c:	08008a3d 	.word	0x08008a3d
 8008990:	08008a3d 	.word	0x08008a3d
 8008994:	08008a3d 	.word	0x08008a3d
 8008998:	08008a3d 	.word	0x08008a3d
 800899c:	08008a3d 	.word	0x08008a3d
 80089a0:	08008a3d 	.word	0x08008a3d
 80089a4:	08008a3d 	.word	0x08008a3d
 80089a8:	08008a1d 	.word	0x08008a1d
 80089ac:	08008a3d 	.word	0x08008a3d
 80089b0:	08008a3d 	.word	0x08008a3d
 80089b4:	08008a3d 	.word	0x08008a3d
 80089b8:	08008a3d 	.word	0x08008a3d
 80089bc:	08008a3d 	.word	0x08008a3d
 80089c0:	08008a3d 	.word	0x08008a3d
 80089c4:	08008a3d 	.word	0x08008a3d
 80089c8:	08008a25 	.word	0x08008a25
 80089cc:	08008a3d 	.word	0x08008a3d
 80089d0:	08008a3d 	.word	0x08008a3d
 80089d4:	08008a3d 	.word	0x08008a3d
 80089d8:	08008a3d 	.word	0x08008a3d
 80089dc:	08008a3d 	.word	0x08008a3d
 80089e0:	08008a3d 	.word	0x08008a3d
 80089e4:	08008a3d 	.word	0x08008a3d
 80089e8:	08008a2d 	.word	0x08008a2d
 80089ec:	08008a3d 	.word	0x08008a3d
 80089f0:	08008a3d 	.word	0x08008a3d
 80089f4:	08008a3d 	.word	0x08008a3d
 80089f8:	08008a3d 	.word	0x08008a3d
 80089fc:	08008a3d 	.word	0x08008a3d
 8008a00:	08008a3d 	.word	0x08008a3d
 8008a04:	08008a3d 	.word	0x08008a3d
 8008a08:	08008a35 	.word	0x08008a35
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a12:	e0bc      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008a14:	2304      	movs	r3, #4
 8008a16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a1a:	e0b8      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008a1c:	2308      	movs	r3, #8
 8008a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a22:	e0b4      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008a24:	2310      	movs	r3, #16
 8008a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a2a:	e0b0      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008a2c:	2320      	movs	r3, #32
 8008a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a32:	e0ac      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008a34:	2340      	movs	r3, #64	; 0x40
 8008a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a3a:	e0a8      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008a3c:	2380      	movs	r3, #128	; 0x80
 8008a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a42:	e0a4      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a8f      	ldr	r2, [pc, #572]	; (8008c88 <UART_SetConfig+0x6a0>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d130      	bne.n	8008ab0 <UART_SetConfig+0x4c8>
 8008a4e:	4b8d      	ldr	r3, [pc, #564]	; (8008c84 <UART_SetConfig+0x69c>)
 8008a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a52:	f003 0307 	and.w	r3, r3, #7
 8008a56:	2b05      	cmp	r3, #5
 8008a58:	d826      	bhi.n	8008aa8 <UART_SetConfig+0x4c0>
 8008a5a:	a201      	add	r2, pc, #4	; (adr r2, 8008a60 <UART_SetConfig+0x478>)
 8008a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a60:	08008a79 	.word	0x08008a79
 8008a64:	08008a81 	.word	0x08008a81
 8008a68:	08008a89 	.word	0x08008a89
 8008a6c:	08008a91 	.word	0x08008a91
 8008a70:	08008a99 	.word	0x08008a99
 8008a74:	08008aa1 	.word	0x08008aa1
 8008a78:	2300      	movs	r3, #0
 8008a7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a7e:	e086      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008a80:	2304      	movs	r3, #4
 8008a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a86:	e082      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008a88:	2308      	movs	r3, #8
 8008a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a8e:	e07e      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008a90:	2310      	movs	r3, #16
 8008a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a96:	e07a      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008a98:	2320      	movs	r3, #32
 8008a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a9e:	e076      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008aa0:	2340      	movs	r3, #64	; 0x40
 8008aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aa6:	e072      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008aa8:	2380      	movs	r3, #128	; 0x80
 8008aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aae:	e06e      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a75      	ldr	r2, [pc, #468]	; (8008c8c <UART_SetConfig+0x6a4>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d130      	bne.n	8008b1c <UART_SetConfig+0x534>
 8008aba:	4b72      	ldr	r3, [pc, #456]	; (8008c84 <UART_SetConfig+0x69c>)
 8008abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008abe:	f003 0307 	and.w	r3, r3, #7
 8008ac2:	2b05      	cmp	r3, #5
 8008ac4:	d826      	bhi.n	8008b14 <UART_SetConfig+0x52c>
 8008ac6:	a201      	add	r2, pc, #4	; (adr r2, 8008acc <UART_SetConfig+0x4e4>)
 8008ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008acc:	08008ae5 	.word	0x08008ae5
 8008ad0:	08008aed 	.word	0x08008aed
 8008ad4:	08008af5 	.word	0x08008af5
 8008ad8:	08008afd 	.word	0x08008afd
 8008adc:	08008b05 	.word	0x08008b05
 8008ae0:	08008b0d 	.word	0x08008b0d
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aea:	e050      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008aec:	2304      	movs	r3, #4
 8008aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008af2:	e04c      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008af4:	2308      	movs	r3, #8
 8008af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008afa:	e048      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008afc:	2310      	movs	r3, #16
 8008afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b02:	e044      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008b04:	2320      	movs	r3, #32
 8008b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b0a:	e040      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008b0c:	2340      	movs	r3, #64	; 0x40
 8008b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b12:	e03c      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008b14:	2380      	movs	r3, #128	; 0x80
 8008b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b1a:	e038      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a5b      	ldr	r2, [pc, #364]	; (8008c90 <UART_SetConfig+0x6a8>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d130      	bne.n	8008b88 <UART_SetConfig+0x5a0>
 8008b26:	4b57      	ldr	r3, [pc, #348]	; (8008c84 <UART_SetConfig+0x69c>)
 8008b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b2a:	f003 0307 	and.w	r3, r3, #7
 8008b2e:	2b05      	cmp	r3, #5
 8008b30:	d826      	bhi.n	8008b80 <UART_SetConfig+0x598>
 8008b32:	a201      	add	r2, pc, #4	; (adr r2, 8008b38 <UART_SetConfig+0x550>)
 8008b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b38:	08008b51 	.word	0x08008b51
 8008b3c:	08008b59 	.word	0x08008b59
 8008b40:	08008b61 	.word	0x08008b61
 8008b44:	08008b69 	.word	0x08008b69
 8008b48:	08008b71 	.word	0x08008b71
 8008b4c:	08008b79 	.word	0x08008b79
 8008b50:	2302      	movs	r3, #2
 8008b52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b56:	e01a      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008b58:	2304      	movs	r3, #4
 8008b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b5e:	e016      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008b60:	2308      	movs	r3, #8
 8008b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b66:	e012      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008b68:	2310      	movs	r3, #16
 8008b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b6e:	e00e      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008b70:	2320      	movs	r3, #32
 8008b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b76:	e00a      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008b78:	2340      	movs	r3, #64	; 0x40
 8008b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b7e:	e006      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008b80:	2380      	movs	r3, #128	; 0x80
 8008b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b86:	e002      	b.n	8008b8e <UART_SetConfig+0x5a6>
 8008b88:	2380      	movs	r3, #128	; 0x80
 8008b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a3f      	ldr	r2, [pc, #252]	; (8008c90 <UART_SetConfig+0x6a8>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	f040 80f8 	bne.w	8008d8a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008b9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008b9e:	2b20      	cmp	r3, #32
 8008ba0:	dc46      	bgt.n	8008c30 <UART_SetConfig+0x648>
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	f2c0 8082 	blt.w	8008cac <UART_SetConfig+0x6c4>
 8008ba8:	3b02      	subs	r3, #2
 8008baa:	2b1e      	cmp	r3, #30
 8008bac:	d87e      	bhi.n	8008cac <UART_SetConfig+0x6c4>
 8008bae:	a201      	add	r2, pc, #4	; (adr r2, 8008bb4 <UART_SetConfig+0x5cc>)
 8008bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb4:	08008c37 	.word	0x08008c37
 8008bb8:	08008cad 	.word	0x08008cad
 8008bbc:	08008c3f 	.word	0x08008c3f
 8008bc0:	08008cad 	.word	0x08008cad
 8008bc4:	08008cad 	.word	0x08008cad
 8008bc8:	08008cad 	.word	0x08008cad
 8008bcc:	08008c4f 	.word	0x08008c4f
 8008bd0:	08008cad 	.word	0x08008cad
 8008bd4:	08008cad 	.word	0x08008cad
 8008bd8:	08008cad 	.word	0x08008cad
 8008bdc:	08008cad 	.word	0x08008cad
 8008be0:	08008cad 	.word	0x08008cad
 8008be4:	08008cad 	.word	0x08008cad
 8008be8:	08008cad 	.word	0x08008cad
 8008bec:	08008c5f 	.word	0x08008c5f
 8008bf0:	08008cad 	.word	0x08008cad
 8008bf4:	08008cad 	.word	0x08008cad
 8008bf8:	08008cad 	.word	0x08008cad
 8008bfc:	08008cad 	.word	0x08008cad
 8008c00:	08008cad 	.word	0x08008cad
 8008c04:	08008cad 	.word	0x08008cad
 8008c08:	08008cad 	.word	0x08008cad
 8008c0c:	08008cad 	.word	0x08008cad
 8008c10:	08008cad 	.word	0x08008cad
 8008c14:	08008cad 	.word	0x08008cad
 8008c18:	08008cad 	.word	0x08008cad
 8008c1c:	08008cad 	.word	0x08008cad
 8008c20:	08008cad 	.word	0x08008cad
 8008c24:	08008cad 	.word	0x08008cad
 8008c28:	08008cad 	.word	0x08008cad
 8008c2c:	08008c9f 	.word	0x08008c9f
 8008c30:	2b40      	cmp	r3, #64	; 0x40
 8008c32:	d037      	beq.n	8008ca4 <UART_SetConfig+0x6bc>
 8008c34:	e03a      	b.n	8008cac <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008c36:	f7fc ffef 	bl	8005c18 <HAL_RCCEx_GetD3PCLK1Freq>
 8008c3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008c3c:	e03c      	b.n	8008cb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008c3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fc fffe 	bl	8005c44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c4c:	e034      	b.n	8008cb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008c4e:	f107 0318 	add.w	r3, r7, #24
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7fd f94a 	bl	8005eec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c5c:	e02c      	b.n	8008cb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c5e:	4b09      	ldr	r3, [pc, #36]	; (8008c84 <UART_SetConfig+0x69c>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0320 	and.w	r3, r3, #32
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d016      	beq.n	8008c98 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008c6a:	4b06      	ldr	r3, [pc, #24]	; (8008c84 <UART_SetConfig+0x69c>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	08db      	lsrs	r3, r3, #3
 8008c70:	f003 0303 	and.w	r3, r3, #3
 8008c74:	4a07      	ldr	r2, [pc, #28]	; (8008c94 <UART_SetConfig+0x6ac>)
 8008c76:	fa22 f303 	lsr.w	r3, r2, r3
 8008c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008c7c:	e01c      	b.n	8008cb8 <UART_SetConfig+0x6d0>
 8008c7e:	bf00      	nop
 8008c80:	40011400 	.word	0x40011400
 8008c84:	58024400 	.word	0x58024400
 8008c88:	40007800 	.word	0x40007800
 8008c8c:	40007c00 	.word	0x40007c00
 8008c90:	58000c00 	.word	0x58000c00
 8008c94:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008c98:	4b9d      	ldr	r3, [pc, #628]	; (8008f10 <UART_SetConfig+0x928>)
 8008c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c9c:	e00c      	b.n	8008cb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c9e:	4b9d      	ldr	r3, [pc, #628]	; (8008f14 <UART_SetConfig+0x92c>)
 8008ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ca2:	e009      	b.n	8008cb8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ca4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ca8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008caa:	e005      	b.n	8008cb8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008cac:	2300      	movs	r3, #0
 8008cae:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008cb6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	f000 81de 	beq.w	800907c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008cc0:	697b      	ldr	r3, [r7, #20]
 8008cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc4:	4a94      	ldr	r2, [pc, #592]	; (8008f18 <UART_SetConfig+0x930>)
 8008cc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cca:	461a      	mov	r2, r3
 8008ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cce:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cd2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	685a      	ldr	r2, [r3, #4]
 8008cd8:	4613      	mov	r3, r2
 8008cda:	005b      	lsls	r3, r3, #1
 8008cdc:	4413      	add	r3, r2
 8008cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d305      	bcc.n	8008cf0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d903      	bls.n	8008cf8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008cf6:	e1c1      	b.n	800907c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	60bb      	str	r3, [r7, #8]
 8008cfe:	60fa      	str	r2, [r7, #12]
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d04:	4a84      	ldr	r2, [pc, #528]	; (8008f18 <UART_SetConfig+0x930>)
 8008d06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	603b      	str	r3, [r7, #0]
 8008d10:	607a      	str	r2, [r7, #4]
 8008d12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d1a:	f7f7 fc51 	bl	80005c0 <__aeabi_uldivmod>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	460b      	mov	r3, r1
 8008d22:	4610      	mov	r0, r2
 8008d24:	4619      	mov	r1, r3
 8008d26:	f04f 0200 	mov.w	r2, #0
 8008d2a:	f04f 0300 	mov.w	r3, #0
 8008d2e:	020b      	lsls	r3, r1, #8
 8008d30:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008d34:	0202      	lsls	r2, r0, #8
 8008d36:	6979      	ldr	r1, [r7, #20]
 8008d38:	6849      	ldr	r1, [r1, #4]
 8008d3a:	0849      	lsrs	r1, r1, #1
 8008d3c:	2000      	movs	r0, #0
 8008d3e:	460c      	mov	r4, r1
 8008d40:	4605      	mov	r5, r0
 8008d42:	eb12 0804 	adds.w	r8, r2, r4
 8008d46:	eb43 0905 	adc.w	r9, r3, r5
 8008d4a:	697b      	ldr	r3, [r7, #20]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	469a      	mov	sl, r3
 8008d52:	4693      	mov	fp, r2
 8008d54:	4652      	mov	r2, sl
 8008d56:	465b      	mov	r3, fp
 8008d58:	4640      	mov	r0, r8
 8008d5a:	4649      	mov	r1, r9
 8008d5c:	f7f7 fc30 	bl	80005c0 <__aeabi_uldivmod>
 8008d60:	4602      	mov	r2, r0
 8008d62:	460b      	mov	r3, r1
 8008d64:	4613      	mov	r3, r2
 8008d66:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d6e:	d308      	bcc.n	8008d82 <UART_SetConfig+0x79a>
 8008d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d76:	d204      	bcs.n	8008d82 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d7e:	60da      	str	r2, [r3, #12]
 8008d80:	e17c      	b.n	800907c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008d88:	e178      	b.n	800907c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	69db      	ldr	r3, [r3, #28]
 8008d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d92:	f040 80c5 	bne.w	8008f20 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008d96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008d9a:	2b20      	cmp	r3, #32
 8008d9c:	dc48      	bgt.n	8008e30 <UART_SetConfig+0x848>
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	db7b      	blt.n	8008e9a <UART_SetConfig+0x8b2>
 8008da2:	2b20      	cmp	r3, #32
 8008da4:	d879      	bhi.n	8008e9a <UART_SetConfig+0x8b2>
 8008da6:	a201      	add	r2, pc, #4	; (adr r2, 8008dac <UART_SetConfig+0x7c4>)
 8008da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dac:	08008e37 	.word	0x08008e37
 8008db0:	08008e3f 	.word	0x08008e3f
 8008db4:	08008e9b 	.word	0x08008e9b
 8008db8:	08008e9b 	.word	0x08008e9b
 8008dbc:	08008e47 	.word	0x08008e47
 8008dc0:	08008e9b 	.word	0x08008e9b
 8008dc4:	08008e9b 	.word	0x08008e9b
 8008dc8:	08008e9b 	.word	0x08008e9b
 8008dcc:	08008e57 	.word	0x08008e57
 8008dd0:	08008e9b 	.word	0x08008e9b
 8008dd4:	08008e9b 	.word	0x08008e9b
 8008dd8:	08008e9b 	.word	0x08008e9b
 8008ddc:	08008e9b 	.word	0x08008e9b
 8008de0:	08008e9b 	.word	0x08008e9b
 8008de4:	08008e9b 	.word	0x08008e9b
 8008de8:	08008e9b 	.word	0x08008e9b
 8008dec:	08008e67 	.word	0x08008e67
 8008df0:	08008e9b 	.word	0x08008e9b
 8008df4:	08008e9b 	.word	0x08008e9b
 8008df8:	08008e9b 	.word	0x08008e9b
 8008dfc:	08008e9b 	.word	0x08008e9b
 8008e00:	08008e9b 	.word	0x08008e9b
 8008e04:	08008e9b 	.word	0x08008e9b
 8008e08:	08008e9b 	.word	0x08008e9b
 8008e0c:	08008e9b 	.word	0x08008e9b
 8008e10:	08008e9b 	.word	0x08008e9b
 8008e14:	08008e9b 	.word	0x08008e9b
 8008e18:	08008e9b 	.word	0x08008e9b
 8008e1c:	08008e9b 	.word	0x08008e9b
 8008e20:	08008e9b 	.word	0x08008e9b
 8008e24:	08008e9b 	.word	0x08008e9b
 8008e28:	08008e9b 	.word	0x08008e9b
 8008e2c:	08008e8d 	.word	0x08008e8d
 8008e30:	2b40      	cmp	r3, #64	; 0x40
 8008e32:	d02e      	beq.n	8008e92 <UART_SetConfig+0x8aa>
 8008e34:	e031      	b.n	8008e9a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e36:	f7fa feb7 	bl	8003ba8 <HAL_RCC_GetPCLK1Freq>
 8008e3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e3c:	e033      	b.n	8008ea6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e3e:	f7fa fec9 	bl	8003bd4 <HAL_RCC_GetPCLK2Freq>
 8008e42:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008e44:	e02f      	b.n	8008ea6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7fc fefa 	bl	8005c44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e54:	e027      	b.n	8008ea6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e56:	f107 0318 	add.w	r3, r7, #24
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f7fd f846 	bl	8005eec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e64:	e01f      	b.n	8008ea6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008e66:	4b2d      	ldr	r3, [pc, #180]	; (8008f1c <UART_SetConfig+0x934>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 0320 	and.w	r3, r3, #32
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d009      	beq.n	8008e86 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008e72:	4b2a      	ldr	r3, [pc, #168]	; (8008f1c <UART_SetConfig+0x934>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	08db      	lsrs	r3, r3, #3
 8008e78:	f003 0303 	and.w	r3, r3, #3
 8008e7c:	4a24      	ldr	r2, [pc, #144]	; (8008f10 <UART_SetConfig+0x928>)
 8008e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8008e82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008e84:	e00f      	b.n	8008ea6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008e86:	4b22      	ldr	r3, [pc, #136]	; (8008f10 <UART_SetConfig+0x928>)
 8008e88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e8a:	e00c      	b.n	8008ea6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008e8c:	4b21      	ldr	r3, [pc, #132]	; (8008f14 <UART_SetConfig+0x92c>)
 8008e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e90:	e009      	b.n	8008ea6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e98:	e005      	b.n	8008ea6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008ea4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	f000 80e7 	beq.w	800907c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb2:	4a19      	ldr	r2, [pc, #100]	; (8008f18 <UART_SetConfig+0x930>)
 8008eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008eb8:	461a      	mov	r2, r3
 8008eba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ebc:	fbb3 f3f2 	udiv	r3, r3, r2
 8008ec0:	005a      	lsls	r2, r3, #1
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	085b      	lsrs	r3, r3, #1
 8008ec8:	441a      	add	r2, r3
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ed2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed6:	2b0f      	cmp	r3, #15
 8008ed8:	d916      	bls.n	8008f08 <UART_SetConfig+0x920>
 8008eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ee0:	d212      	bcs.n	8008f08 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	f023 030f 	bic.w	r3, r3, #15
 8008eea:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eee:	085b      	lsrs	r3, r3, #1
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	f003 0307 	and.w	r3, r3, #7
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008efa:	4313      	orrs	r3, r2
 8008efc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008f04:	60da      	str	r2, [r3, #12]
 8008f06:	e0b9      	b.n	800907c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008f0e:	e0b5      	b.n	800907c <UART_SetConfig+0xa94>
 8008f10:	03d09000 	.word	0x03d09000
 8008f14:	003d0900 	.word	0x003d0900
 8008f18:	0800d4e0 	.word	0x0800d4e0
 8008f1c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008f20:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008f24:	2b20      	cmp	r3, #32
 8008f26:	dc49      	bgt.n	8008fbc <UART_SetConfig+0x9d4>
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	db7c      	blt.n	8009026 <UART_SetConfig+0xa3e>
 8008f2c:	2b20      	cmp	r3, #32
 8008f2e:	d87a      	bhi.n	8009026 <UART_SetConfig+0xa3e>
 8008f30:	a201      	add	r2, pc, #4	; (adr r2, 8008f38 <UART_SetConfig+0x950>)
 8008f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f36:	bf00      	nop
 8008f38:	08008fc3 	.word	0x08008fc3
 8008f3c:	08008fcb 	.word	0x08008fcb
 8008f40:	08009027 	.word	0x08009027
 8008f44:	08009027 	.word	0x08009027
 8008f48:	08008fd3 	.word	0x08008fd3
 8008f4c:	08009027 	.word	0x08009027
 8008f50:	08009027 	.word	0x08009027
 8008f54:	08009027 	.word	0x08009027
 8008f58:	08008fe3 	.word	0x08008fe3
 8008f5c:	08009027 	.word	0x08009027
 8008f60:	08009027 	.word	0x08009027
 8008f64:	08009027 	.word	0x08009027
 8008f68:	08009027 	.word	0x08009027
 8008f6c:	08009027 	.word	0x08009027
 8008f70:	08009027 	.word	0x08009027
 8008f74:	08009027 	.word	0x08009027
 8008f78:	08008ff3 	.word	0x08008ff3
 8008f7c:	08009027 	.word	0x08009027
 8008f80:	08009027 	.word	0x08009027
 8008f84:	08009027 	.word	0x08009027
 8008f88:	08009027 	.word	0x08009027
 8008f8c:	08009027 	.word	0x08009027
 8008f90:	08009027 	.word	0x08009027
 8008f94:	08009027 	.word	0x08009027
 8008f98:	08009027 	.word	0x08009027
 8008f9c:	08009027 	.word	0x08009027
 8008fa0:	08009027 	.word	0x08009027
 8008fa4:	08009027 	.word	0x08009027
 8008fa8:	08009027 	.word	0x08009027
 8008fac:	08009027 	.word	0x08009027
 8008fb0:	08009027 	.word	0x08009027
 8008fb4:	08009027 	.word	0x08009027
 8008fb8:	08009019 	.word	0x08009019
 8008fbc:	2b40      	cmp	r3, #64	; 0x40
 8008fbe:	d02e      	beq.n	800901e <UART_SetConfig+0xa36>
 8008fc0:	e031      	b.n	8009026 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008fc2:	f7fa fdf1 	bl	8003ba8 <HAL_RCC_GetPCLK1Freq>
 8008fc6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008fc8:	e033      	b.n	8009032 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008fca:	f7fa fe03 	bl	8003bd4 <HAL_RCC_GetPCLK2Freq>
 8008fce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008fd0:	e02f      	b.n	8009032 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fc fe34 	bl	8005c44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fe0:	e027      	b.n	8009032 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fe2:	f107 0318 	add.w	r3, r7, #24
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f7fc ff80 	bl	8005eec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008fec:	69fb      	ldr	r3, [r7, #28]
 8008fee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ff0:	e01f      	b.n	8009032 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ff2:	4b2d      	ldr	r3, [pc, #180]	; (80090a8 <UART_SetConfig+0xac0>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 0320 	and.w	r3, r3, #32
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d009      	beq.n	8009012 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ffe:	4b2a      	ldr	r3, [pc, #168]	; (80090a8 <UART_SetConfig+0xac0>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	08db      	lsrs	r3, r3, #3
 8009004:	f003 0303 	and.w	r3, r3, #3
 8009008:	4a28      	ldr	r2, [pc, #160]	; (80090ac <UART_SetConfig+0xac4>)
 800900a:	fa22 f303 	lsr.w	r3, r2, r3
 800900e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009010:	e00f      	b.n	8009032 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009012:	4b26      	ldr	r3, [pc, #152]	; (80090ac <UART_SetConfig+0xac4>)
 8009014:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009016:	e00c      	b.n	8009032 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009018:	4b25      	ldr	r3, [pc, #148]	; (80090b0 <UART_SetConfig+0xac8>)
 800901a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800901c:	e009      	b.n	8009032 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800901e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009022:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009024:	e005      	b.n	8009032 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009026:	2300      	movs	r3, #0
 8009028:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800902a:	2301      	movs	r3, #1
 800902c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009030:	bf00      	nop
    }

    if (pclk != 0U)
 8009032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009034:	2b00      	cmp	r3, #0
 8009036:	d021      	beq.n	800907c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800903c:	4a1d      	ldr	r2, [pc, #116]	; (80090b4 <UART_SetConfig+0xacc>)
 800903e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009042:	461a      	mov	r2, r3
 8009044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009046:	fbb3 f2f2 	udiv	r2, r3, r2
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	685b      	ldr	r3, [r3, #4]
 800904e:	085b      	lsrs	r3, r3, #1
 8009050:	441a      	add	r2, r3
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	fbb2 f3f3 	udiv	r3, r2, r3
 800905a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800905c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905e:	2b0f      	cmp	r3, #15
 8009060:	d909      	bls.n	8009076 <UART_SetConfig+0xa8e>
 8009062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009068:	d205      	bcs.n	8009076 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800906a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906c:	b29a      	uxth	r2, r3
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	60da      	str	r2, [r3, #12]
 8009074:	e002      	b.n	800907c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009076:	2301      	movs	r3, #1
 8009078:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	2201      	movs	r2, #1
 8009080:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	2201      	movs	r2, #1
 8009088:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	2200      	movs	r2, #0
 8009090:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	2200      	movs	r2, #0
 8009096:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009098:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800909c:	4618      	mov	r0, r3
 800909e:	3748      	adds	r7, #72	; 0x48
 80090a0:	46bd      	mov	sp, r7
 80090a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80090a6:	bf00      	nop
 80090a8:	58024400 	.word	0x58024400
 80090ac:	03d09000 	.word	0x03d09000
 80090b0:	003d0900 	.word	0x003d0900
 80090b4:	0800d4e0 	.word	0x0800d4e0

080090b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b083      	sub	sp, #12
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c4:	f003 0301 	and.w	r3, r3, #1
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d00a      	beq.n	80090e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	430a      	orrs	r2, r1
 80090e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e6:	f003 0302 	and.w	r3, r3, #2
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00a      	beq.n	8009104 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	430a      	orrs	r2, r1
 8009102:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009108:	f003 0304 	and.w	r3, r3, #4
 800910c:	2b00      	cmp	r3, #0
 800910e:	d00a      	beq.n	8009126 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	430a      	orrs	r2, r1
 8009124:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800912a:	f003 0308 	and.w	r3, r3, #8
 800912e:	2b00      	cmp	r3, #0
 8009130:	d00a      	beq.n	8009148 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	430a      	orrs	r2, r1
 8009146:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800914c:	f003 0310 	and.w	r3, r3, #16
 8009150:	2b00      	cmp	r3, #0
 8009152:	d00a      	beq.n	800916a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	430a      	orrs	r2, r1
 8009168:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800916e:	f003 0320 	and.w	r3, r3, #32
 8009172:	2b00      	cmp	r3, #0
 8009174:	d00a      	beq.n	800918c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	430a      	orrs	r2, r1
 800918a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009194:	2b00      	cmp	r3, #0
 8009196:	d01a      	beq.n	80091ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	430a      	orrs	r2, r1
 80091ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091b6:	d10a      	bne.n	80091ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	430a      	orrs	r2, r1
 80091cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d00a      	beq.n	80091f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	430a      	orrs	r2, r1
 80091ee:	605a      	str	r2, [r3, #4]
  }
}
 80091f0:	bf00      	nop
 80091f2:	370c      	adds	r7, #12
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b098      	sub	sp, #96	; 0x60
 8009200:	af02      	add	r7, sp, #8
 8009202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800920c:	f7f8 fbd0 	bl	80019b0 <HAL_GetTick>
 8009210:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f003 0308 	and.w	r3, r3, #8
 800921c:	2b08      	cmp	r3, #8
 800921e:	d12f      	bne.n	8009280 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009220:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009224:	9300      	str	r3, [sp, #0]
 8009226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009228:	2200      	movs	r2, #0
 800922a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f88e 	bl	8009350 <UART_WaitOnFlagUntilTimeout>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d022      	beq.n	8009280 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009242:	e853 3f00 	ldrex	r3, [r3]
 8009246:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800924a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800924e:	653b      	str	r3, [r7, #80]	; 0x50
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	461a      	mov	r2, r3
 8009256:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009258:	647b      	str	r3, [r7, #68]	; 0x44
 800925a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800925e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009260:	e841 2300 	strex	r3, r2, [r1]
 8009264:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1e6      	bne.n	800923a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2220      	movs	r2, #32
 8009270:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800927c:	2303      	movs	r3, #3
 800927e:	e063      	b.n	8009348 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f003 0304 	and.w	r3, r3, #4
 800928a:	2b04      	cmp	r3, #4
 800928c:	d149      	bne.n	8009322 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800928e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009292:	9300      	str	r3, [sp, #0]
 8009294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009296:	2200      	movs	r2, #0
 8009298:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 f857 	bl	8009350 <UART_WaitOnFlagUntilTimeout>
 80092a2:	4603      	mov	r3, r0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d03c      	beq.n	8009322 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b0:	e853 3f00 	ldrex	r3, [r3]
 80092b4:	623b      	str	r3, [r7, #32]
   return(result);
 80092b6:	6a3b      	ldr	r3, [r7, #32]
 80092b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	461a      	mov	r2, r3
 80092c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092c6:	633b      	str	r3, [r7, #48]	; 0x30
 80092c8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ce:	e841 2300 	strex	r3, r2, [r1]
 80092d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80092d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d1e6      	bne.n	80092a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	3308      	adds	r3, #8
 80092e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	e853 3f00 	ldrex	r3, [r3]
 80092e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f023 0301 	bic.w	r3, r3, #1
 80092f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	3308      	adds	r3, #8
 80092f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092fa:	61fa      	str	r2, [r7, #28]
 80092fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fe:	69b9      	ldr	r1, [r7, #24]
 8009300:	69fa      	ldr	r2, [r7, #28]
 8009302:	e841 2300 	strex	r3, r2, [r1]
 8009306:	617b      	str	r3, [r7, #20]
   return(result);
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1e5      	bne.n	80092da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2220      	movs	r2, #32
 8009312:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800931e:	2303      	movs	r3, #3
 8009320:	e012      	b.n	8009348 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2220      	movs	r2, #32
 8009326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2220      	movs	r2, #32
 800932e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2200      	movs	r2, #0
 8009342:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009346:	2300      	movs	r3, #0
}
 8009348:	4618      	mov	r0, r3
 800934a:	3758      	adds	r7, #88	; 0x58
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b084      	sub	sp, #16
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	603b      	str	r3, [r7, #0]
 800935c:	4613      	mov	r3, r2
 800935e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009360:	e049      	b.n	80093f6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009362:	69bb      	ldr	r3, [r7, #24]
 8009364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009368:	d045      	beq.n	80093f6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800936a:	f7f8 fb21 	bl	80019b0 <HAL_GetTick>
 800936e:	4602      	mov	r2, r0
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	1ad3      	subs	r3, r2, r3
 8009374:	69ba      	ldr	r2, [r7, #24]
 8009376:	429a      	cmp	r2, r3
 8009378:	d302      	bcc.n	8009380 <UART_WaitOnFlagUntilTimeout+0x30>
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d101      	bne.n	8009384 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009380:	2303      	movs	r3, #3
 8009382:	e048      	b.n	8009416 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f003 0304 	and.w	r3, r3, #4
 800938e:	2b00      	cmp	r3, #0
 8009390:	d031      	beq.n	80093f6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	69db      	ldr	r3, [r3, #28]
 8009398:	f003 0308 	and.w	r3, r3, #8
 800939c:	2b08      	cmp	r3, #8
 800939e:	d110      	bne.n	80093c2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2208      	movs	r2, #8
 80093a6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f000 f839 	bl	8009420 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2208      	movs	r2, #8
 80093b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2200      	movs	r2, #0
 80093ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	e029      	b.n	8009416 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	69db      	ldr	r3, [r3, #28]
 80093c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093d0:	d111      	bne.n	80093f6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80093da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	f000 f81f 	bl	8009420 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2220      	movs	r2, #32
 80093e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80093f2:	2303      	movs	r3, #3
 80093f4:	e00f      	b.n	8009416 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	69da      	ldr	r2, [r3, #28]
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	4013      	ands	r3, r2
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	429a      	cmp	r2, r3
 8009404:	bf0c      	ite	eq
 8009406:	2301      	moveq	r3, #1
 8009408:	2300      	movne	r3, #0
 800940a:	b2db      	uxtb	r3, r3
 800940c:	461a      	mov	r2, r3
 800940e:	79fb      	ldrb	r3, [r7, #7]
 8009410:	429a      	cmp	r2, r3
 8009412:	d0a6      	beq.n	8009362 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3710      	adds	r7, #16
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
	...

08009420 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009420:	b480      	push	{r7}
 8009422:	b095      	sub	sp, #84	; 0x54
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800942e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009430:	e853 3f00 	ldrex	r3, [r3]
 8009434:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009438:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800943c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	461a      	mov	r2, r3
 8009444:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009446:	643b      	str	r3, [r7, #64]	; 0x40
 8009448:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800944c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800944e:	e841 2300 	strex	r3, r2, [r1]
 8009452:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009456:	2b00      	cmp	r3, #0
 8009458:	d1e6      	bne.n	8009428 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	3308      	adds	r3, #8
 8009460:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009462:	6a3b      	ldr	r3, [r7, #32]
 8009464:	e853 3f00 	ldrex	r3, [r3]
 8009468:	61fb      	str	r3, [r7, #28]
   return(result);
 800946a:	69fa      	ldr	r2, [r7, #28]
 800946c:	4b1e      	ldr	r3, [pc, #120]	; (80094e8 <UART_EndRxTransfer+0xc8>)
 800946e:	4013      	ands	r3, r2
 8009470:	64bb      	str	r3, [r7, #72]	; 0x48
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	3308      	adds	r3, #8
 8009478:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800947a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800947c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009482:	e841 2300 	strex	r3, r2, [r1]
 8009486:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948a:	2b00      	cmp	r3, #0
 800948c:	d1e5      	bne.n	800945a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009492:	2b01      	cmp	r3, #1
 8009494:	d118      	bne.n	80094c8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	e853 3f00 	ldrex	r3, [r3]
 80094a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	f023 0310 	bic.w	r3, r3, #16
 80094aa:	647b      	str	r3, [r7, #68]	; 0x44
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	461a      	mov	r2, r3
 80094b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094b4:	61bb      	str	r3, [r7, #24]
 80094b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b8:	6979      	ldr	r1, [r7, #20]
 80094ba:	69ba      	ldr	r2, [r7, #24]
 80094bc:	e841 2300 	strex	r3, r2, [r1]
 80094c0:	613b      	str	r3, [r7, #16]
   return(result);
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d1e6      	bne.n	8009496 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2220      	movs	r2, #32
 80094cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	675a      	str	r2, [r3, #116]	; 0x74
}
 80094dc:	bf00      	nop
 80094de:	3754      	adds	r7, #84	; 0x54
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr
 80094e8:	effffffe 	.word	0xeffffffe

080094ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b085      	sub	sp, #20
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80094fa:	2b01      	cmp	r3, #1
 80094fc:	d101      	bne.n	8009502 <HAL_UARTEx_DisableFifoMode+0x16>
 80094fe:	2302      	movs	r3, #2
 8009500:	e027      	b.n	8009552 <HAL_UARTEx_DisableFifoMode+0x66>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2201      	movs	r2, #1
 8009506:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2224      	movs	r2, #36	; 0x24
 800950e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f022 0201 	bic.w	r2, r2, #1
 8009528:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009530:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2220      	movs	r2, #32
 8009544:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009550:	2300      	movs	r3, #0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3714      	adds	r7, #20
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr

0800955e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b084      	sub	sp, #16
 8009562:	af00      	add	r7, sp, #0
 8009564:	6078      	str	r0, [r7, #4]
 8009566:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800956e:	2b01      	cmp	r3, #1
 8009570:	d101      	bne.n	8009576 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009572:	2302      	movs	r3, #2
 8009574:	e02d      	b.n	80095d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2201      	movs	r2, #1
 800957a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2224      	movs	r2, #36	; 0x24
 8009582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f022 0201 	bic.w	r2, r2, #1
 800959c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	683a      	ldr	r2, [r7, #0]
 80095ae:	430a      	orrs	r2, r1
 80095b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 f850 	bl	8009658 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2220      	movs	r2, #32
 80095c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3710      	adds	r7, #16
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}

080095da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b084      	sub	sp, #16
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
 80095e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80095ea:	2b01      	cmp	r3, #1
 80095ec:	d101      	bne.n	80095f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80095ee:	2302      	movs	r3, #2
 80095f0:	e02d      	b.n	800964e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2201      	movs	r2, #1
 80095f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2224      	movs	r2, #36	; 0x24
 80095fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f022 0201 	bic.w	r2, r2, #1
 8009618:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	683a      	ldr	r2, [r7, #0]
 800962a:	430a      	orrs	r2, r1
 800962c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 f812 	bl	8009658 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2220      	movs	r2, #32
 8009640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	3710      	adds	r7, #16
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
	...

08009658 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009658:	b480      	push	{r7}
 800965a:	b085      	sub	sp, #20
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009664:	2b00      	cmp	r3, #0
 8009666:	d108      	bne.n	800967a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009678:	e031      	b.n	80096de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800967a:	2310      	movs	r3, #16
 800967c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800967e:	2310      	movs	r3, #16
 8009680:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	0e5b      	lsrs	r3, r3, #25
 800968a:	b2db      	uxtb	r3, r3
 800968c:	f003 0307 	and.w	r3, r3, #7
 8009690:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	0f5b      	lsrs	r3, r3, #29
 800969a:	b2db      	uxtb	r3, r3
 800969c:	f003 0307 	and.w	r3, r3, #7
 80096a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096a2:	7bbb      	ldrb	r3, [r7, #14]
 80096a4:	7b3a      	ldrb	r2, [r7, #12]
 80096a6:	4911      	ldr	r1, [pc, #68]	; (80096ec <UARTEx_SetNbDataToProcess+0x94>)
 80096a8:	5c8a      	ldrb	r2, [r1, r2]
 80096aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80096ae:	7b3a      	ldrb	r2, [r7, #12]
 80096b0:	490f      	ldr	r1, [pc, #60]	; (80096f0 <UARTEx_SetNbDataToProcess+0x98>)
 80096b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096b4:	fb93 f3f2 	sdiv	r3, r3, r2
 80096b8:	b29a      	uxth	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096c0:	7bfb      	ldrb	r3, [r7, #15]
 80096c2:	7b7a      	ldrb	r2, [r7, #13]
 80096c4:	4909      	ldr	r1, [pc, #36]	; (80096ec <UARTEx_SetNbDataToProcess+0x94>)
 80096c6:	5c8a      	ldrb	r2, [r1, r2]
 80096c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80096cc:	7b7a      	ldrb	r2, [r7, #13]
 80096ce:	4908      	ldr	r1, [pc, #32]	; (80096f0 <UARTEx_SetNbDataToProcess+0x98>)
 80096d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096d2:	fb93 f3f2 	sdiv	r3, r3, r2
 80096d6:	b29a      	uxth	r2, r3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80096de:	bf00      	nop
 80096e0:	3714      	adds	r7, #20
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	0800d4f8 	.word	0x0800d4f8
 80096f0:	0800d500 	.word	0x0800d500

080096f4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80096f4:	b084      	sub	sp, #16
 80096f6:	b480      	push	{r7}
 80096f8:	b085      	sub	sp, #20
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
 80096fe:	f107 001c 	add.w	r0, r7, #28
 8009702:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009706:	2300      	movs	r3, #0
 8009708:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800970a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800970c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800970e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8009710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8009712:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8009714:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8009716:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800971a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	4313      	orrs	r3, r2
 8009720:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	685a      	ldr	r2, [r3, #4]
 8009726:	4b07      	ldr	r3, [pc, #28]	; (8009744 <SDMMC_Init+0x50>)
 8009728:	4013      	ands	r3, r2
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	431a      	orrs	r2, r3
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009732:	2300      	movs	r3, #0
}
 8009734:	4618      	mov	r0, r3
 8009736:	3714      	adds	r7, #20
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	b004      	add	sp, #16
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	ffc02c00 	.word	0xffc02c00

08009748 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009756:	4618      	mov	r0, r3
 8009758:	370c      	adds	r7, #12
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8009762:	b480      	push	{r7}
 8009764:	b083      	sub	sp, #12
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
 800976a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr

08009784 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f043 0203 	orr.w	r2, r3, #3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	370c      	adds	r7, #12
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr

080097a6 <SDMMC_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_OFF(SDMMC_TypeDef *SDMMCx)
{
 80097a6:	b480      	push	{r7}
 80097a8:	b083      	sub	sp, #12
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
  /* Set power state to OFF */
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f023 0203 	bic.w	r2, r3, #3
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80097ba:	2300      	movs	r3, #0
}
 80097bc:	4618      	mov	r0, r3
 80097be:	370c      	adds	r7, #12
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr

080097c8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f003 0303 	and.w	r3, r3, #3
}
 80097d8:	4618      	mov	r0, r3
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b085      	sub	sp, #20
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80097ee:	2300      	movs	r3, #0
 80097f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009802:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8009808:	431a      	orrs	r2, r3
                       Command->CPSM);
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800980e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	4313      	orrs	r3, r2
 8009814:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	68da      	ldr	r2, [r3, #12]
 800981a:	4b06      	ldr	r3, [pc, #24]	; (8009834 <SDMMC_SendCommand+0x50>)
 800981c:	4013      	ands	r3, r2
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	431a      	orrs	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009826:	2300      	movs	r3, #0
}
 8009828:	4618      	mov	r0, r3
 800982a:	3714      	adds	r7, #20
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr
 8009834:	fffee0c0 	.word	0xfffee0c0

08009838 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	b2db      	uxtb	r3, r3
}
 8009846:	4618      	mov	r0, r3
 8009848:	370c      	adds	r7, #12
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr

08009852 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009852:	b480      	push	{r7}
 8009854:	b085      	sub	sp, #20
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
 800985a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	3314      	adds	r3, #20
 8009860:	461a      	mov	r2, r3
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	4413      	add	r3, r2
 8009866:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3714      	adds	r7, #20
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8009878:	b480      	push	{r7}
 800987a:	b085      	sub	sp, #20
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009882:	2300      	movs	r3, #0
 8009884:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	685a      	ldr	r2, [r3, #4]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800989e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80098a4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80098aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80098ac:	68fa      	ldr	r2, [r7, #12]
 80098ae:	4313      	orrs	r3, r2
 80098b0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	431a      	orrs	r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80098c2:	2300      	movs	r3, #0

}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3714      	adds	r7, #20
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr

080098d0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b088      	sub	sp, #32
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80098de:	2310      	movs	r3, #16
 80098e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098e8:	2300      	movs	r3, #0
 80098ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098f2:	f107 0308 	add.w	r3, r7, #8
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f7ff ff73 	bl	80097e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80098fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009902:	2110      	movs	r1, #16
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f000 f9d3 	bl	8009cb0 <SDMMC_GetCmdResp1>
 800990a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800990c:	69fb      	ldr	r3, [r7, #28]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3720      	adds	r7, #32
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
	...

08009918 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b088      	sub	sp, #32
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009920:	2300      	movs	r3, #0
 8009922:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009924:	230c      	movs	r3, #12
 8009926:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009928:	f44f 7380 	mov.w	r3, #256	; 0x100
 800992c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800992e:	2300      	movs	r3, #0
 8009930:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009936:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	68db      	ldr	r3, [r3, #12]
 800993c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009950:	f107 0308 	add.w	r3, r7, #8
 8009954:	4619      	mov	r1, r3
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f7ff ff44 	bl	80097e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800995c:	4a0b      	ldr	r2, [pc, #44]	; (800998c <SDMMC_CmdStopTransfer+0x74>)
 800995e:	210c      	movs	r1, #12
 8009960:	6878      	ldr	r0, [r7, #4]
 8009962:	f000 f9a5 	bl	8009cb0 <SDMMC_GetCmdResp1>
 8009966:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800997a:	d101      	bne.n	8009980 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800997c:	2300      	movs	r3, #0
 800997e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8009980:	69fb      	ldr	r3, [r7, #28]
}
 8009982:	4618      	mov	r0, r3
 8009984:	3720      	adds	r7, #32
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	05f5e100 	.word	0x05f5e100

08009990 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b088      	sub	sp, #32
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800999e:	2307      	movs	r3, #7
 80099a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80099a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099a8:	2300      	movs	r3, #0
 80099aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099b2:	f107 0308 	add.w	r3, r7, #8
 80099b6:	4619      	mov	r1, r3
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f7ff ff13 	bl	80097e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80099be:	f241 3288 	movw	r2, #5000	; 0x1388
 80099c2:	2107      	movs	r1, #7
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f973 	bl	8009cb0 <SDMMC_GetCmdResp1>
 80099ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099cc:	69fb      	ldr	r3, [r7, #28]
}
 80099ce:	4618      	mov	r0, r3
 80099d0:	3720      	adds	r7, #32
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}

080099d6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b088      	sub	sp, #32
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80099de:	2300      	movs	r3, #0
 80099e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80099e2:	2300      	movs	r3, #0
 80099e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80099e6:	2300      	movs	r3, #0
 80099e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80099ea:	2300      	movs	r3, #0
 80099ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80099ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80099f4:	f107 0308 	add.w	r3, r7, #8
 80099f8:	4619      	mov	r1, r3
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f7ff fef2 	bl	80097e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 fb97 	bl	800a134 <SDMMC_GetCmdError>
 8009a06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a08:	69fb      	ldr	r3, [r7, #28]
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	3720      	adds	r7, #32
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	bd80      	pop	{r7, pc}

08009a12 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009a12:	b580      	push	{r7, lr}
 8009a14:	b088      	sub	sp, #32
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009a1a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009a1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009a20:	2308      	movs	r3, #8
 8009a22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a34:	f107 0308 	add.w	r3, r7, #8
 8009a38:	4619      	mov	r1, r3
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f7ff fed2 	bl	80097e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 fb29 	bl	800a098 <SDMMC_GetCmdResp7>
 8009a46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a48:	69fb      	ldr	r3, [r7, #28]
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	3720      	adds	r7, #32
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b088      	sub	sp, #32
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
 8009a5a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009a60:	2337      	movs	r3, #55	; 0x37
 8009a62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009a64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009a74:	f107 0308 	add.w	r3, r7, #8
 8009a78:	4619      	mov	r1, r3
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f7ff feb2 	bl	80097e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a84:	2137      	movs	r1, #55	; 0x37
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f912 	bl	8009cb0 <SDMMC_GetCmdResp1>
 8009a8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a8e:	69fb      	ldr	r3, [r7, #28]
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3720      	adds	r7, #32
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009a98:	b580      	push	{r7, lr}
 8009a9a:	b088      	sub	sp, #32
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009aa6:	2329      	movs	r3, #41	; 0x29
 8009aa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009aaa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009aae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ab8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009aba:	f107 0308 	add.w	r3, r7, #8
 8009abe:	4619      	mov	r1, r3
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f7ff fe8f 	bl	80097e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fa2e 	bl	8009f28 <SDMMC_GetCmdResp3>
 8009acc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ace:	69fb      	ldr	r3, [r7, #28]
}
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	3720      	adds	r7, #32
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}

08009ad8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b088      	sub	sp, #32
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009ae6:	2306      	movs	r3, #6
 8009ae8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009aea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009aee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009af0:	2300      	movs	r3, #0
 8009af2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009af4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009af8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009afa:	f107 0308 	add.w	r3, r7, #8
 8009afe:	4619      	mov	r1, r3
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f7ff fe6f 	bl	80097e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b0a:	2106      	movs	r1, #6
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 f8cf 	bl	8009cb0 <SDMMC_GetCmdResp1>
 8009b12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b14:	69fb      	ldr	r3, [r7, #28]
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3720      	adds	r7, #32
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}

08009b1e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009b1e:	b580      	push	{r7, lr}
 8009b20:	b088      	sub	sp, #32
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009b26:	2300      	movs	r3, #0
 8009b28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009b2a:	2333      	movs	r3, #51	; 0x33
 8009b2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b34:	2300      	movs	r3, #0
 8009b36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b3c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b3e:	f107 0308 	add.w	r3, r7, #8
 8009b42:	4619      	mov	r1, r3
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f7ff fe4d 	bl	80097e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b4e:	2133      	movs	r1, #51	; 0x33
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 f8ad 	bl	8009cb0 <SDMMC_GetCmdResp1>
 8009b56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b58:	69fb      	ldr	r3, [r7, #28]
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3720      	adds	r7, #32
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	bd80      	pop	{r7, pc}

08009b62 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009b62:	b580      	push	{r7, lr}
 8009b64:	b088      	sub	sp, #32
 8009b66:	af00      	add	r7, sp, #0
 8009b68:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009b6e:	2302      	movs	r3, #2
 8009b70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009b72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009b76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b82:	f107 0308 	add.w	r3, r7, #8
 8009b86:	4619      	mov	r1, r3
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f7ff fe2b 	bl	80097e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f980 	bl	8009e94 <SDMMC_GetCmdResp2>
 8009b94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b96:	69fb      	ldr	r3, [r7, #28]
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3720      	adds	r7, #32
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b088      	sub	sp, #32
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009bae:	2309      	movs	r3, #9
 8009bb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009bb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009bb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bc2:	f107 0308 	add.w	r3, r7, #8
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f7ff fe0b 	bl	80097e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 f960 	bl	8009e94 <SDMMC_GetCmdResp2>
 8009bd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bd6:	69fb      	ldr	r3, [r7, #28]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3720      	adds	r7, #32
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b088      	sub	sp, #32
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009bea:	2300      	movs	r3, #0
 8009bec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009bee:	2303      	movs	r3, #3
 8009bf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009bf6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009bfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c02:	f107 0308 	add.w	r3, r7, #8
 8009c06:	4619      	mov	r1, r3
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f7ff fdeb 	bl	80097e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009c0e:	683a      	ldr	r2, [r7, #0]
 8009c10:	2103      	movs	r1, #3
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f000 f9c8 	bl	8009fa8 <SDMMC_GetCmdResp6>
 8009c18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c1a:	69fb      	ldr	r3, [r7, #28]
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3720      	adds	r7, #32
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b088      	sub	sp, #32
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
 8009c2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009c32:	230d      	movs	r3, #13
 8009c34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c46:	f107 0308 	add.w	r3, r7, #8
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f7ff fdc9 	bl	80097e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c56:	210d      	movs	r1, #13
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 f829 	bl	8009cb0 <SDMMC_GetCmdResp1>
 8009c5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c60:	69fb      	ldr	r3, [r7, #28]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3720      	adds	r7, #32
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}

08009c6a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b088      	sub	sp, #32
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009c72:	2300      	movs	r3, #0
 8009c74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009c76:	230d      	movs	r3, #13
 8009c78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c80:	2300      	movs	r3, #0
 8009c82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c8a:	f107 0308 	add.w	r3, r7, #8
 8009c8e:	4619      	mov	r1, r3
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f7ff fda7 	bl	80097e4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c9a:	210d      	movs	r1, #13
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f000 f807 	bl	8009cb0 <SDMMC_GetCmdResp1>
 8009ca2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ca4:	69fb      	ldr	r3, [r7, #28]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3720      	adds	r7, #32
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
	...

08009cb0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b088      	sub	sp, #32
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	460b      	mov	r3, r1
 8009cba:	607a      	str	r2, [r7, #4]
 8009cbc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009cbe:	4b70      	ldr	r3, [pc, #448]	; (8009e80 <SDMMC_GetCmdResp1+0x1d0>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a70      	ldr	r2, [pc, #448]	; (8009e84 <SDMMC_GetCmdResp1+0x1d4>)
 8009cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8009cc8:	0a5a      	lsrs	r2, r3, #9
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	fb02 f303 	mul.w	r3, r2, r3
 8009cd0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	1e5a      	subs	r2, r3, #1
 8009cd6:	61fa      	str	r2, [r7, #28]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d102      	bne.n	8009ce2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009cdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ce0:	e0c9      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ce6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8009ce8:	69ba      	ldr	r2, [r7, #24]
 8009cea:	4b67      	ldr	r3, [pc, #412]	; (8009e88 <SDMMC_GetCmdResp1+0x1d8>)
 8009cec:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d0ef      	beq.n	8009cd2 <SDMMC_GetCmdResp1+0x22>
 8009cf2:	69bb      	ldr	r3, [r7, #24]
 8009cf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d1ea      	bne.n	8009cd2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d00:	f003 0304 	and.w	r3, r3, #4
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d004      	beq.n	8009d12 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	2204      	movs	r2, #4
 8009d0c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d0e:	2304      	movs	r3, #4
 8009d10:	e0b1      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d16:	f003 0301 	and.w	r3, r3, #1
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d004      	beq.n	8009d28 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	2201      	movs	r2, #1
 8009d22:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d24:	2301      	movs	r3, #1
 8009d26:	e0a6      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	4a58      	ldr	r2, [pc, #352]	; (8009e8c <SDMMC_GetCmdResp1+0x1dc>)
 8009d2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009d2e:	68f8      	ldr	r0, [r7, #12]
 8009d30:	f7ff fd82 	bl	8009838 <SDMMC_GetCommandResponse>
 8009d34:	4603      	mov	r3, r0
 8009d36:	461a      	mov	r2, r3
 8009d38:	7afb      	ldrb	r3, [r7, #11]
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d001      	beq.n	8009d42 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e099      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009d42:	2100      	movs	r1, #0
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f7ff fd84 	bl	8009852 <SDMMC_GetResponse>
 8009d4a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009d4c:	697a      	ldr	r2, [r7, #20]
 8009d4e:	4b50      	ldr	r3, [pc, #320]	; (8009e90 <SDMMC_GetCmdResp1+0x1e0>)
 8009d50:	4013      	ands	r3, r2
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d101      	bne.n	8009d5a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009d56:	2300      	movs	r3, #0
 8009d58:	e08d      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	da02      	bge.n	8009d66 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009d60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d64:	e087      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d001      	beq.n	8009d74 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009d70:	2340      	movs	r3, #64	; 0x40
 8009d72:	e080      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d001      	beq.n	8009d82 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009d7e:	2380      	movs	r3, #128	; 0x80
 8009d80:	e079      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d002      	beq.n	8009d92 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d90:	e071      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d002      	beq.n	8009da2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009d9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009da0:	e069      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d002      	beq.n	8009db2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009db0:	e061      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d002      	beq.n	8009dc2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009dbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009dc0:	e059      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d002      	beq.n	8009dd2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009dcc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009dd0:	e051      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d002      	beq.n	8009de2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009ddc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009de0:	e049      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009de2:	697b      	ldr	r3, [r7, #20]
 8009de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d002      	beq.n	8009df2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009dec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009df0:	e041      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d002      	beq.n	8009e02 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009dfc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e00:	e039      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d002      	beq.n	8009e12 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009e0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009e10:	e031      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009e12:	697b      	ldr	r3, [r7, #20]
 8009e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d002      	beq.n	8009e22 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009e1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009e20:	e029      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d002      	beq.n	8009e32 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009e2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009e30:	e021      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d002      	beq.n	8009e42 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009e3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009e40:	e019      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d002      	beq.n	8009e52 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009e4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009e50:	e011      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d002      	beq.n	8009e62 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009e5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009e60:	e009      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009e62:	697b      	ldr	r3, [r7, #20]
 8009e64:	f003 0308 	and.w	r3, r3, #8
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d002      	beq.n	8009e72 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009e6c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009e70:	e001      	b.n	8009e76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009e72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3720      	adds	r7, #32
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	24000000 	.word	0x24000000
 8009e84:	10624dd3 	.word	0x10624dd3
 8009e88:	00200045 	.word	0x00200045
 8009e8c:	002000c5 	.word	0x002000c5
 8009e90:	fdffe008 	.word	0xfdffe008

08009e94 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b085      	sub	sp, #20
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009e9c:	4b1f      	ldr	r3, [pc, #124]	; (8009f1c <SDMMC_GetCmdResp2+0x88>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a1f      	ldr	r2, [pc, #124]	; (8009f20 <SDMMC_GetCmdResp2+0x8c>)
 8009ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ea6:	0a5b      	lsrs	r3, r3, #9
 8009ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009eac:	fb02 f303 	mul.w	r3, r2, r3
 8009eb0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	1e5a      	subs	r2, r3, #1
 8009eb6:	60fa      	str	r2, [r7, #12]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d102      	bne.n	8009ec2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ebc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ec0:	e026      	b.n	8009f10 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ec6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d0ef      	beq.n	8009eb2 <SDMMC_GetCmdResp2+0x1e>
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d1ea      	bne.n	8009eb2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ee0:	f003 0304 	and.w	r3, r3, #4
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d004      	beq.n	8009ef2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2204      	movs	r2, #4
 8009eec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009eee:	2304      	movs	r3, #4
 8009ef0:	e00e      	b.n	8009f10 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ef6:	f003 0301 	and.w	r3, r3, #1
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d004      	beq.n	8009f08 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2201      	movs	r2, #1
 8009f02:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f04:	2301      	movs	r3, #1
 8009f06:	e003      	b.n	8009f10 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	4a06      	ldr	r2, [pc, #24]	; (8009f24 <SDMMC_GetCmdResp2+0x90>)
 8009f0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009f0e:	2300      	movs	r3, #0
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3714      	adds	r7, #20
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr
 8009f1c:	24000000 	.word	0x24000000
 8009f20:	10624dd3 	.word	0x10624dd3
 8009f24:	002000c5 	.word	0x002000c5

08009f28 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b085      	sub	sp, #20
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009f30:	4b1a      	ldr	r3, [pc, #104]	; (8009f9c <SDMMC_GetCmdResp3+0x74>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a1a      	ldr	r2, [pc, #104]	; (8009fa0 <SDMMC_GetCmdResp3+0x78>)
 8009f36:	fba2 2303 	umull	r2, r3, r2, r3
 8009f3a:	0a5b      	lsrs	r3, r3, #9
 8009f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f40:	fb02 f303 	mul.w	r3, r2, r3
 8009f44:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	1e5a      	subs	r2, r3, #1
 8009f4a:	60fa      	str	r2, [r7, #12]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d102      	bne.n	8009f56 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f54:	e01b      	b.n	8009f8e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f5a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d0ef      	beq.n	8009f46 <SDMMC_GetCmdResp3+0x1e>
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d1ea      	bne.n	8009f46 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f74:	f003 0304 	and.w	r3, r3, #4
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d004      	beq.n	8009f86 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2204      	movs	r2, #4
 8009f80:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f82:	2304      	movs	r3, #4
 8009f84:	e003      	b.n	8009f8e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	4a06      	ldr	r2, [pc, #24]	; (8009fa4 <SDMMC_GetCmdResp3+0x7c>)
 8009f8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009f8c:	2300      	movs	r3, #0
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3714      	adds	r7, #20
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr
 8009f9a:	bf00      	nop
 8009f9c:	24000000 	.word	0x24000000
 8009fa0:	10624dd3 	.word	0x10624dd3
 8009fa4:	002000c5 	.word	0x002000c5

08009fa8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b088      	sub	sp, #32
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	607a      	str	r2, [r7, #4]
 8009fb4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009fb6:	4b35      	ldr	r3, [pc, #212]	; (800a08c <SDMMC_GetCmdResp6+0xe4>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a35      	ldr	r2, [pc, #212]	; (800a090 <SDMMC_GetCmdResp6+0xe8>)
 8009fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8009fc0:	0a5b      	lsrs	r3, r3, #9
 8009fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fc6:	fb02 f303 	mul.w	r3, r2, r3
 8009fca:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	1e5a      	subs	r2, r3, #1
 8009fd0:	61fa      	str	r2, [r7, #28]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d102      	bne.n	8009fdc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fd6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009fda:	e052      	b.n	800a082 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009fe2:	69bb      	ldr	r3, [r7, #24]
 8009fe4:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d0ef      	beq.n	8009fcc <SDMMC_GetCmdResp6+0x24>
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d1ea      	bne.n	8009fcc <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ffa:	f003 0304 	and.w	r3, r3, #4
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d004      	beq.n	800a00c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2204      	movs	r2, #4
 800a006:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a008:	2304      	movs	r3, #4
 800a00a:	e03a      	b.n	800a082 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a010:	f003 0301 	and.w	r3, r3, #1
 800a014:	2b00      	cmp	r3, #0
 800a016:	d004      	beq.n	800a022 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2201      	movs	r2, #1
 800a01c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a01e:	2301      	movs	r3, #1
 800a020:	e02f      	b.n	800a082 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a022:	68f8      	ldr	r0, [r7, #12]
 800a024:	f7ff fc08 	bl	8009838 <SDMMC_GetCommandResponse>
 800a028:	4603      	mov	r3, r0
 800a02a:	461a      	mov	r2, r3
 800a02c:	7afb      	ldrb	r3, [r7, #11]
 800a02e:	4293      	cmp	r3, r2
 800a030:	d001      	beq.n	800a036 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a032:	2301      	movs	r3, #1
 800a034:	e025      	b.n	800a082 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	4a16      	ldr	r2, [pc, #88]	; (800a094 <SDMMC_GetCmdResp6+0xec>)
 800a03a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a03c:	2100      	movs	r1, #0
 800a03e:	68f8      	ldr	r0, [r7, #12]
 800a040:	f7ff fc07 	bl	8009852 <SDMMC_GetResponse>
 800a044:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d106      	bne.n	800a05e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	0c1b      	lsrs	r3, r3, #16
 800a054:	b29a      	uxth	r2, r3
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a05a:	2300      	movs	r3, #0
 800a05c:	e011      	b.n	800a082 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a064:	2b00      	cmp	r3, #0
 800a066:	d002      	beq.n	800a06e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a068:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a06c:	e009      	b.n	800a082 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a074:	2b00      	cmp	r3, #0
 800a076:	d002      	beq.n	800a07e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a07c:	e001      	b.n	800a082 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a07e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a082:	4618      	mov	r0, r3
 800a084:	3720      	adds	r7, #32
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	24000000 	.word	0x24000000
 800a090:	10624dd3 	.word	0x10624dd3
 800a094:	002000c5 	.word	0x002000c5

0800a098 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a098:	b480      	push	{r7}
 800a09a:	b085      	sub	sp, #20
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a0a0:	4b22      	ldr	r3, [pc, #136]	; (800a12c <SDMMC_GetCmdResp7+0x94>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a22      	ldr	r2, [pc, #136]	; (800a130 <SDMMC_GetCmdResp7+0x98>)
 800a0a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a0aa:	0a5b      	lsrs	r3, r3, #9
 800a0ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0b0:	fb02 f303 	mul.w	r3, r2, r3
 800a0b4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	1e5a      	subs	r2, r3, #1
 800a0ba:	60fa      	str	r2, [r7, #12]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d102      	bne.n	800a0c6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a0c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0c4:	e02c      	b.n	800a120 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ca:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d0ef      	beq.n	800a0b6 <SDMMC_GetCmdResp7+0x1e>
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d1ea      	bne.n	800a0b6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0e4:	f003 0304 	and.w	r3, r3, #4
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d004      	beq.n	800a0f6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2204      	movs	r2, #4
 800a0f0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a0f2:	2304      	movs	r3, #4
 800a0f4:	e014      	b.n	800a120 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0fa:	f003 0301 	and.w	r3, r3, #1
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d004      	beq.n	800a10c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2201      	movs	r2, #1
 800a106:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a108:	2301      	movs	r3, #1
 800a10a:	e009      	b.n	800a120 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a114:	2b00      	cmp	r3, #0
 800a116:	d002      	beq.n	800a11e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2240      	movs	r2, #64	; 0x40
 800a11c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a11e:	2300      	movs	r3, #0

}
 800a120:	4618      	mov	r0, r3
 800a122:	3714      	adds	r7, #20
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr
 800a12c:	24000000 	.word	0x24000000
 800a130:	10624dd3 	.word	0x10624dd3

0800a134 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a134:	b480      	push	{r7}
 800a136:	b085      	sub	sp, #20
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a13c:	4b11      	ldr	r3, [pc, #68]	; (800a184 <SDMMC_GetCmdError+0x50>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a11      	ldr	r2, [pc, #68]	; (800a188 <SDMMC_GetCmdError+0x54>)
 800a142:	fba2 2303 	umull	r2, r3, r2, r3
 800a146:	0a5b      	lsrs	r3, r3, #9
 800a148:	f241 3288 	movw	r2, #5000	; 0x1388
 800a14c:	fb02 f303 	mul.w	r3, r2, r3
 800a150:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	1e5a      	subs	r2, r3, #1
 800a156:	60fa      	str	r2, [r7, #12]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d102      	bne.n	800a162 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a15c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a160:	e009      	b.n	800a176 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d0f1      	beq.n	800a152 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	4a06      	ldr	r2, [pc, #24]	; (800a18c <SDMMC_GetCmdError+0x58>)
 800a172:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	3714      	adds	r7, #20
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr
 800a182:	bf00      	nop
 800a184:	24000000 	.word	0x24000000
 800a188:	10624dd3 	.word	0x10624dd3
 800a18c:	002000c5 	.word	0x002000c5

0800a190 <MX_FileX_Init>:
  * @brief  Application FileX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_FileX_Init(VOID *memory_ptr)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b08e      	sub	sp, #56	; 0x38
 800a194:	af08      	add	r7, sp, #32
 800a196:	6078      	str	r0, [r7, #4]
  UINT ret = FX_SUCCESS;
 800a198:	2300      	movs	r3, #0
 800a19a:	617b      	str	r3, [r7, #20]

  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	613b      	str	r3, [r7, #16]
  /* USER CODE BEGIN 0 */

  /* USER CODE END 0 */

  /*Allocate memory for the main thread's stack*/
  ret = tx_byte_allocate(byte_pool, &pointer, FX_APP_THREAD_STACK_SIZE, TX_NO_WAIT);
 800a1a0:	f107 010c 	add.w	r1, r7, #12
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a1aa:	6938      	ldr	r0, [r7, #16]
 800a1ac:	f001 fd06 	bl	800bbbc <_txe_byte_allocate>
 800a1b0:	6178      	str	r0, [r7, #20]

  /* Check FX_APP_THREAD_STACK_SIZE allocation*/
  if (ret != FX_SUCCESS)
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d001      	beq.n	800a1bc <MX_FileX_Init+0x2c>
  {
    return TX_POOL_ERROR;
 800a1b8:	2302      	movs	r3, #2
 800a1ba:	e01d      	b.n	800a1f8 <MX_FileX_Init+0x68>
  }

  /* Create the main thread.  */
  ret = tx_thread_create(&fx_app_thread, FX_APP_THREAD_NAME, fx_app_thread_entry, 0, pointer, FX_APP_THREAD_STACK_SIZE,
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	22b0      	movs	r2, #176	; 0xb0
 800a1c0:	9206      	str	r2, [sp, #24]
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	9205      	str	r2, [sp, #20]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	9204      	str	r2, [sp, #16]
 800a1ca:	220a      	movs	r2, #10
 800a1cc:	9203      	str	r2, [sp, #12]
 800a1ce:	220a      	movs	r2, #10
 800a1d0:	9202      	str	r2, [sp, #8]
 800a1d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a1d6:	9201      	str	r2, [sp, #4]
 800a1d8:	9300      	str	r3, [sp, #0]
 800a1da:	2300      	movs	r3, #0
 800a1dc:	4a08      	ldr	r2, [pc, #32]	; (800a200 <MX_FileX_Init+0x70>)
 800a1de:	4909      	ldr	r1, [pc, #36]	; (800a204 <MX_FileX_Init+0x74>)
 800a1e0:	4809      	ldr	r0, [pc, #36]	; (800a208 <MX_FileX_Init+0x78>)
 800a1e2:	f001 feb3 	bl	800bf4c <_txe_thread_create>
 800a1e6:	6178      	str	r0, [r7, #20]
                         FX_APP_THREAD_PRIO, FX_APP_PREEMPTION_THRESHOLD, FX_APP_THREAD_TIME_SLICE, FX_APP_THREAD_AUTO_START);

  /* Check main thread creation */
  if (ret != FX_SUCCESS)
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d001      	beq.n	800a1f2 <MX_FileX_Init+0x62>
  {
    return TX_THREAD_ERROR;
 800a1ee:	230e      	movs	r3, #14
 800a1f0:	e002      	b.n	800a1f8 <MX_FileX_Init+0x68>
  /* USER CODE BEGIN MX_FileX_Init */

  /* USER CODE END MX_FileX_Init */

  /* Initialize FileX.  */
  fx_system_initialize();
 800a1f2:	f000 f839 	bl	800a268 <_fx_system_initialize>

  /* USER CODE BEGIN MX_FileX_Init 1*/

  /* USER CODE END MX_FileX_Init 1*/

  return ret;
 800a1f6:	697b      	ldr	r3, [r7, #20]
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3718      	adds	r7, #24
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	0800a20d 	.word	0x0800a20d
 800a204:	0800d46c 	.word	0x0800d46c
 800a208:	24012380 	.word	0x24012380

0800a20c <fx_app_thread_entry>:
 * @brief  Main thread entry.
 * @param thread_input: ULONG user argument used by the thread entry
 * @retval none
 */
void fx_app_thread_entry(ULONG thread_input)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fx_app_thread_entry 0 */
	fw_update_thread_entry();
 800a214:	f7f6 fcc6 	bl	8000ba4 <fw_update_thread_entry>

	/* Should never reach here */
	assert(0);
 800a218:	4b02      	ldr	r3, [pc, #8]	; (800a224 <fx_app_thread_entry+0x18>)
 800a21a:	4a03      	ldr	r2, [pc, #12]	; (800a228 <fx_app_thread_entry+0x1c>)
 800a21c:	217c      	movs	r1, #124	; 0x7c
 800a21e:	4803      	ldr	r0, [pc, #12]	; (800a22c <fx_app_thread_entry+0x20>)
 800a220:	f001 ff86 	bl	800c130 <__assert_func>
 800a224:	0800d480 	.word	0x0800d480
 800a228:	0800d508 	.word	0x0800d508
 800a22c:	0800d484 	.word	0x0800d484

0800a230 <HAL_SD_TxCpltCallback>:
* @brief SD DMA Tx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b082      	sub	sp, #8
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_TX_CMPLT */

  /* USER CODE END PRE_TX_CMPLT */

  tx_semaphore_put(&sd_tx_semaphore);
 800a238:	4803      	ldr	r0, [pc, #12]	; (800a248 <HAL_SD_TxCpltCallback+0x18>)
 800a23a:	f001 fe69 	bl	800bf10 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_TX_CMPLT */

  /* USER CODE END POST_TX_CMPLT */
}
 800a23e:	bf00      	nop
 800a240:	3708      	adds	r7, #8
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	24012430 	.word	0x24012430

0800a24c <HAL_SD_RxCpltCallback>:
* @brief SD DMA Rx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_RX_CMPLT */

  /* USER CODE END PRE_RX_CMPLT */

  tx_semaphore_put(&sd_rx_semaphore);
 800a254:	4803      	ldr	r0, [pc, #12]	; (800a264 <HAL_SD_RxCpltCallback+0x18>)
 800a256:	f001 fe5b 	bl	800bf10 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_RX_CMPLT */

  /* USER CODE END POST_RX_CMPLT */
}
 800a25a:	bf00      	nop
 800a25c:	3708      	adds	r7, #8
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	2401244c 	.word	0x2401244c

0800a268 <_fx_system_initialize>:
/*                                            disable build options,      */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_system_initialize(VOID)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af04      	add	r7, sp, #16
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Initialize the head pointer of the opened media list and the
       number of opened media.  */
    _fx_system_media_opened_ptr =       FX_NULL;
 800a26e:	4b27      	ldr	r3, [pc, #156]	; (800a30c <_fx_system_initialize+0xa4>)
 800a270:	2200      	movs	r2, #0
 800a272:	601a      	str	r2, [r3, #0]
    _fx_system_media_opened_count =     0;
 800a274:	4b26      	ldr	r3, [pc, #152]	; (800a310 <_fx_system_initialize+0xa8>)
 800a276:	2200      	movs	r2, #0
 800a278:	601a      	str	r2, [r3, #0]

    /* Initialize the time and date fields with their default values.  */
    _fx_system_date =   FX_INITIAL_DATE;
 800a27a:	4b26      	ldr	r3, [pc, #152]	; (800a314 <_fx_system_initialize+0xac>)
 800a27c:	f644 2221 	movw	r2, #18977	; 0x4a21
 800a280:	601a      	str	r2, [r3, #0]
    _fx_system_time =   FX_INITIAL_TIME;
 800a282:	4b25      	ldr	r3, [pc, #148]	; (800a318 <_fx_system_initialize+0xb0>)
 800a284:	2200      	movs	r2, #0
 800a286:	601a      	str	r2, [r3, #0]

    /* Initialize the sector and FAT cache sizes.  */
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 800a288:	4b24      	ldr	r3, [pc, #144]	; (800a31c <_fx_system_initialize+0xb4>)
 800a28a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a28e:	601a      	str	r2, [r3, #0]
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 800a290:	4b23      	ldr	r3, [pc, #140]	; (800a320 <_fx_system_initialize+0xb8>)
 800a292:	2210      	movs	r2, #16
 800a294:	601a      	str	r2, [r3, #0]
       FX_UPDATE_RATE_IN_TICKS.  Note that the timer is not necessary for
       regular FileX operation - it is only needed for accurate system
       date and time stamps on files.  */

#ifndef FX_NO_TIMER
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 800a296:	2301      	movs	r3, #1
 800a298:	9302      	str	r3, [sp, #8]
 800a29a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a29e:	9301      	str	r3, [sp, #4]
 800a2a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a2a4:	9300      	str	r3, [sp, #0]
 800a2a6:	4b1f      	ldr	r3, [pc, #124]	; (800a324 <_fx_system_initialize+0xbc>)
 800a2a8:	4a1f      	ldr	r2, [pc, #124]	; (800a328 <_fx_system_initialize+0xc0>)
 800a2aa:	4920      	ldr	r1, [pc, #128]	; (800a32c <_fx_system_initialize+0xc4>)
 800a2ac:	4820      	ldr	r0, [pc, #128]	; (800a330 <_fx_system_initialize+0xc8>)
 800a2ae:	f001 f9eb 	bl	800b688 <_tx_timer_create>
    /* Setup the build options variables.  */

    /* Setup the first build options variable.  */
    if (FX_MAX_LONG_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 24);
 800a2b2:	4b20      	ldr	r3, [pc, #128]	; (800a334 <_fx_system_initialize+0xcc>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2ba:	4a1e      	ldr	r2, [pc, #120]	; (800a334 <_fx_system_initialize+0xcc>)
 800a2bc:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)(FX_MAX_LONG_NAME_LEN & 0xFF)) << 24);
    }
    if (FX_MAX_LAST_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 800a2be:	4b1d      	ldr	r3, [pc, #116]	; (800a334 <_fx_system_initialize+0xcc>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2c6:	4a1b      	ldr	r2, [pc, #108]	; (800a334 <_fx_system_initialize+0xcc>)
 800a2c8:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFFFF) << 16);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_MAX_SECTOR_CACHE) << 16);
 800a2ca:	4b1b      	ldr	r3, [pc, #108]	; (800a338 <_fx_system_initialize+0xd0>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a2d2:	4a19      	ldr	r2, [pc, #100]	; (800a338 <_fx_system_initialize+0xd0>)
 800a2d4:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFF) << 8);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_FAT_MAP_SIZE) << 8);
 800a2d6:	4b18      	ldr	r3, [pc, #96]	; (800a338 <_fx_system_initialize+0xd0>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2de:	4a16      	ldr	r2, [pc, #88]	; (800a338 <_fx_system_initialize+0xd0>)
 800a2e0:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)0xFF);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 800a2e2:	4b15      	ldr	r3, [pc, #84]	; (800a338 <_fx_system_initialize+0xd0>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f043 0310 	orr.w	r3, r3, #16
 800a2ea:	4a13      	ldr	r2, [pc, #76]	; (800a338 <_fx_system_initialize+0xd0>)
 800a2ec:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)0xFF) << 16);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)FX_UPDATE_RATE_IN_SECONDS) << 16);
 800a2ee:	4b13      	ldr	r3, [pc, #76]	; (800a33c <_fx_system_initialize+0xd4>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800a2f6:	4a11      	ldr	r2, [pc, #68]	; (800a33c <_fx_system_initialize+0xd4>)
 800a2f8:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)0xFFFF);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 800a2fa:	4b10      	ldr	r3, [pc, #64]	; (800a33c <_fx_system_initialize+0xd4>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	f443 737a 	orr.w	r3, r3, #1000	; 0x3e8
 800a302:	4a0e      	ldr	r2, [pc, #56]	; (800a33c <_fx_system_initialize+0xd4>)
 800a304:	6013      	str	r3, [r2, #0]
    }
#endif /* FX_DISABLE_BUILD_OPTIONS */
}
 800a306:	bf00      	nop
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	24012468 	.word	0x24012468
 800a310:	2401246c 	.word	0x2401246c
 800a314:	24012470 	.word	0x24012470
 800a318:	24012474 	.word	0x24012474
 800a31c:	24012478 	.word	0x24012478
 800a320:	2401247c 	.word	0x2401247c
 800a324:	46585359 	.word	0x46585359
 800a328:	0800a341 	.word	0x0800a341
 800a32c:	0800d4a0 	.word	0x0800d4a0
 800a330:	2401248c 	.word	0x2401248c
 800a334:	24012480 	.word	0x24012480
 800a338:	24012484 	.word	0x24012484
 800a33c:	24012488 	.word	0x24012488

0800a340 <_fx_system_timer_entry>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _fx_system_timer_entry(ULONG id)
{
 800a340:	b480      	push	{r7}
 800a342:	b089      	sub	sp, #36	; 0x24
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
UINT month;
UINT year;


    /* Determine if the ID is valid.  */
    if (id == FX_TIMER_ID)
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	4a9d      	ldr	r2, [pc, #628]	; (800a5c0 <_fx_system_timer_entry+0x280>)
 800a34c:	4293      	cmp	r3, r2
 800a34e:	f040 8132 	bne.w	800a5b6 <_fx_system_timer_entry+0x276>
    {

        /* Break the current date time into separate fields for easier work!  */
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 800a352:	4b9c      	ldr	r3, [pc, #624]	; (800a5c4 <_fx_system_timer_entry+0x284>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f003 031f 	and.w	r3, r3, #31
 800a35a:	005b      	lsls	r3, r3, #1
 800a35c:	61fb      	str	r3, [r7, #28]
        minute =  (_fx_system_time >> FX_MINUTE_SHIFT) & FX_MINUTE_MASK;
 800a35e:	4b99      	ldr	r3, [pc, #612]	; (800a5c4 <_fx_system_timer_entry+0x284>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	095b      	lsrs	r3, r3, #5
 800a364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a368:	61bb      	str	r3, [r7, #24]
        hour =    (_fx_system_time >> FX_HOUR_SHIFT) & FX_HOUR_MASK;
 800a36a:	4b96      	ldr	r3, [pc, #600]	; (800a5c4 <_fx_system_timer_entry+0x284>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	0adb      	lsrs	r3, r3, #11
 800a370:	f003 031f 	and.w	r3, r3, #31
 800a374:	617b      	str	r3, [r7, #20]
        day =     _fx_system_date & FX_DAY_MASK;
 800a376:	4b94      	ldr	r3, [pc, #592]	; (800a5c8 <_fx_system_timer_entry+0x288>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f003 031f 	and.w	r3, r3, #31
 800a37e:	613b      	str	r3, [r7, #16]
        month =   (_fx_system_date >> FX_MONTH_SHIFT) & FX_MONTH_MASK;
 800a380:	4b91      	ldr	r3, [pc, #580]	; (800a5c8 <_fx_system_timer_entry+0x288>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	095b      	lsrs	r3, r3, #5
 800a386:	f003 030f 	and.w	r3, r3, #15
 800a38a:	60fb      	str	r3, [r7, #12]
        year =    ((_fx_system_date >> FX_YEAR_SHIFT) & FX_YEAR_MASK) + FX_BASE_YEAR;
 800a38c:	4b8e      	ldr	r3, [pc, #568]	; (800a5c8 <_fx_system_timer_entry+0x288>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	0a5b      	lsrs	r3, r3, #9
 800a392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a396:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 800a39a:	60bb      	str	r3, [r7, #8]

        /* Now apply the "second" update.  */
        second =  second + FX_UPDATE_RATE_IN_SECONDS;
 800a39c:	69fb      	ldr	r3, [r7, #28]
 800a39e:	330a      	adds	r3, #10
 800a3a0:	61fb      	str	r3, [r7, #28]

        /* Determine if we need to adjust the minute field.  */
        if (second > FX_MAXIMUM_SECOND)
 800a3a2:	69fb      	ldr	r3, [r7, #28]
 800a3a4:	2b3b      	cmp	r3, #59	; 0x3b
 800a3a6:	f240 80d4 	bls.w	800a552 <_fx_system_timer_entry+0x212>
        {

            /* Yes, we need to adjust the minute field.  */
            minute =  minute + second / 60;
 800a3aa:	69fb      	ldr	r3, [r7, #28]
 800a3ac:	4a87      	ldr	r2, [pc, #540]	; (800a5cc <_fx_system_timer_entry+0x28c>)
 800a3ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a3b2:	095b      	lsrs	r3, r3, #5
 800a3b4:	69ba      	ldr	r2, [r7, #24]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	61bb      	str	r3, [r7, #24]
            second =  second % 60;
 800a3ba:	69fa      	ldr	r2, [r7, #28]
 800a3bc:	4b83      	ldr	r3, [pc, #524]	; (800a5cc <_fx_system_timer_entry+0x28c>)
 800a3be:	fba3 1302 	umull	r1, r3, r3, r2
 800a3c2:	0959      	lsrs	r1, r3, #5
 800a3c4:	460b      	mov	r3, r1
 800a3c6:	011b      	lsls	r3, r3, #4
 800a3c8:	1a5b      	subs	r3, r3, r1
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	1ad3      	subs	r3, r2, r3
 800a3ce:	61fb      	str	r3, [r7, #28]

            /* Determine if we need to adjust the hour field.  */
            if (minute > FX_MAXIMUM_MINUTE)
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	2b3b      	cmp	r3, #59	; 0x3b
 800a3d4:	f240 80bd 	bls.w	800a552 <_fx_system_timer_entry+0x212>
            {

                /* Yes, we need to adjust the hour field.  */
                hour =    hour + minute / 60;
 800a3d8:	69bb      	ldr	r3, [r7, #24]
 800a3da:	4a7c      	ldr	r2, [pc, #496]	; (800a5cc <_fx_system_timer_entry+0x28c>)
 800a3dc:	fba2 2303 	umull	r2, r3, r2, r3
 800a3e0:	095b      	lsrs	r3, r3, #5
 800a3e2:	697a      	ldr	r2, [r7, #20]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	617b      	str	r3, [r7, #20]
                minute =  minute % 60;
 800a3e8:	69ba      	ldr	r2, [r7, #24]
 800a3ea:	4b78      	ldr	r3, [pc, #480]	; (800a5cc <_fx_system_timer_entry+0x28c>)
 800a3ec:	fba3 1302 	umull	r1, r3, r3, r2
 800a3f0:	0959      	lsrs	r1, r3, #5
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	011b      	lsls	r3, r3, #4
 800a3f6:	1a5b      	subs	r3, r3, r1
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	1ad3      	subs	r3, r2, r3
 800a3fc:	61bb      	str	r3, [r7, #24]

                /* Determine if we need to adjust the day field.  */
                if (hour > FX_MAXIMUM_HOUR)
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	2b17      	cmp	r3, #23
 800a402:	f240 80a6 	bls.w	800a552 <_fx_system_timer_entry+0x212>
                {

                    /* Yes, we need to adjust the day field.  */
                    hour =  0;
 800a406:	2300      	movs	r3, #0
 800a408:	617b      	str	r3, [r7, #20]
                    day++;
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	3301      	adds	r3, #1
 800a40e:	613b      	str	r3, [r7, #16]

                    /* Determine if we need to adjust the month field.  */
                    switch (month)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	3b01      	subs	r3, #1
 800a414:	2b0b      	cmp	r3, #11
 800a416:	f200 80cb 	bhi.w	800a5b0 <_fx_system_timer_entry+0x270>
 800a41a:	a201      	add	r2, pc, #4	; (adr r2, 800a420 <_fx_system_timer_entry+0xe0>)
 800a41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a420:	0800a451 	.word	0x0800a451
 800a424:	0800a463 	.word	0x0800a463
 800a428:	0800a491 	.word	0x0800a491
 800a42c:	0800a4a3 	.word	0x0800a4a3
 800a430:	0800a4b5 	.word	0x0800a4b5
 800a434:	0800a4c7 	.word	0x0800a4c7
 800a438:	0800a4d9 	.word	0x0800a4d9
 800a43c:	0800a4eb 	.word	0x0800a4eb
 800a440:	0800a4fd 	.word	0x0800a4fd
 800a444:	0800a50f 	.word	0x0800a50f
 800a448:	0800a521 	.word	0x0800a521
 800a44c:	0800a533 	.word	0x0800a533

                    case 1:                 /* January  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	2b1f      	cmp	r3, #31
 800a454:	d97f      	bls.n	800a556 <_fx_system_timer_entry+0x216>
                        {

                            /* Move to next month.  */
                            day = 1;
 800a456:	2301      	movs	r3, #1
 800a458:	613b      	str	r3, [r7, #16]
                            month++;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	3301      	adds	r3, #1
 800a45e:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800a460:	e079      	b.n	800a556 <_fx_system_timer_entry+0x216>
                    {

                        /* Check for leap year.  We don't need to check for leap
                           century her (century years divisible by 400) since 2000
                           is and this FAT format only supports years to 2107. */
                        if ((year % 4) == 0)
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	f003 0303 	and.w	r3, r3, #3
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d108      	bne.n	800a47e <_fx_system_timer_entry+0x13e>
                        {

                            /* Leap year in February... check for 29 days
                               instead of 28.  */
                            if (day > 29)
 800a46c:	693b      	ldr	r3, [r7, #16]
 800a46e:	2b1d      	cmp	r3, #29
 800a470:	d973      	bls.n	800a55a <_fx_system_timer_entry+0x21a>
                            {

                                /* Adjust the month.  */
                                day =  1;
 800a472:	2301      	movs	r3, #1
 800a474:	613b      	str	r3, [r7, #16]
                                month++;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	3301      	adds	r3, #1
 800a47a:	60fb      	str	r3, [r7, #12]
                                /* Adjust the month.  */
                                day = 1;
                                month++;
                            }
                        }
                        break;
 800a47c:	e06d      	b.n	800a55a <_fx_system_timer_entry+0x21a>
                            if (day > 28)
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	2b1c      	cmp	r3, #28
 800a482:	d96a      	bls.n	800a55a <_fx_system_timer_entry+0x21a>
                                day = 1;
 800a484:	2301      	movs	r3, #1
 800a486:	613b      	str	r3, [r7, #16]
                                month++;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	3301      	adds	r3, #1
 800a48c:	60fb      	str	r3, [r7, #12]
                        break;
 800a48e:	e064      	b.n	800a55a <_fx_system_timer_entry+0x21a>

                    case 3:                 /* March  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	2b1f      	cmp	r3, #31
 800a494:	d963      	bls.n	800a55e <_fx_system_timer_entry+0x21e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800a496:	2301      	movs	r3, #1
 800a498:	613b      	str	r3, [r7, #16]
                            month++;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	3301      	adds	r3, #1
 800a49e:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800a4a0:	e05d      	b.n	800a55e <_fx_system_timer_entry+0x21e>

                    case 4:                 /* April  */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	2b1e      	cmp	r3, #30
 800a4a6:	d95c      	bls.n	800a562 <_fx_system_timer_entry+0x222>
                        {

                            /* Move to next month.  */
                            day = 1;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	613b      	str	r3, [r7, #16]
                            month++;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800a4b2:	e056      	b.n	800a562 <_fx_system_timer_entry+0x222>

                    case 5:                 /* May  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	2b1f      	cmp	r3, #31
 800a4b8:	d955      	bls.n	800a566 <_fx_system_timer_entry+0x226>
                        {

                            /* Move to next month.  */
                            day = 1;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	613b      	str	r3, [r7, #16]
                            month++;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800a4c4:	e04f      	b.n	800a566 <_fx_system_timer_entry+0x226>

                    case 6:                 /* June */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	2b1e      	cmp	r3, #30
 800a4ca:	d94e      	bls.n	800a56a <_fx_system_timer_entry+0x22a>
                        {

                            /* Move to next month.  */
                            day = 1;
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	613b      	str	r3, [r7, #16]
                            month++;
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800a4d6:	e048      	b.n	800a56a <_fx_system_timer_entry+0x22a>

                    case 7:                 /* July */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800a4d8:	693b      	ldr	r3, [r7, #16]
 800a4da:	2b1f      	cmp	r3, #31
 800a4dc:	d947      	bls.n	800a56e <_fx_system_timer_entry+0x22e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	613b      	str	r3, [r7, #16]
                            month++;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800a4e8:	e041      	b.n	800a56e <_fx_system_timer_entry+0x22e>

                    case 8:                 /* August */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	2b1f      	cmp	r3, #31
 800a4ee:	d940      	bls.n	800a572 <_fx_system_timer_entry+0x232>
                        {

                            /* Move to next month.  */
                            day = 1;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	613b      	str	r3, [r7, #16]
                            month++;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800a4fa:	e03a      	b.n	800a572 <_fx_system_timer_entry+0x232>

                    case 9:                 /* September */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	2b1e      	cmp	r3, #30
 800a500:	d939      	bls.n	800a576 <_fx_system_timer_entry+0x236>
                        {

                            /* Move to next month.  */
                            day = 1;
 800a502:	2301      	movs	r3, #1
 800a504:	613b      	str	r3, [r7, #16]
                            month++;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	3301      	adds	r3, #1
 800a50a:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800a50c:	e033      	b.n	800a576 <_fx_system_timer_entry+0x236>

                    case 10:                /* October */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	2b1f      	cmp	r3, #31
 800a512:	d932      	bls.n	800a57a <_fx_system_timer_entry+0x23a>
                        {

                            /* Move to next month.  */
                            day = 1;
 800a514:	2301      	movs	r3, #1
 800a516:	613b      	str	r3, [r7, #16]
                            month++;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	3301      	adds	r3, #1
 800a51c:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800a51e:	e02c      	b.n	800a57a <_fx_system_timer_entry+0x23a>

                    case 11:                /* November */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	2b1e      	cmp	r3, #30
 800a524:	d92b      	bls.n	800a57e <_fx_system_timer_entry+0x23e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800a526:	2301      	movs	r3, #1
 800a528:	613b      	str	r3, [r7, #16]
                            month++;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	3301      	adds	r3, #1
 800a52e:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800a530:	e025      	b.n	800a57e <_fx_system_timer_entry+0x23e>

                    case 12:                /* December */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	2b1f      	cmp	r3, #31
 800a536:	d924      	bls.n	800a582 <_fx_system_timer_entry+0x242>
                        {

                            /* Move to next month.  */
                            day = 1;
 800a538:	2301      	movs	r3, #1
 800a53a:	613b      	str	r3, [r7, #16]
                            month = 1;
 800a53c:	2301      	movs	r3, #1
 800a53e:	60fb      	str	r3, [r7, #12]

                            /* Also move to next year.  */
                            year++;
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	3301      	adds	r3, #1
 800a544:	60bb      	str	r3, [r7, #8]

                            /* Check for a year that exceeds the representation
                               in this format.  */
                            if (year > FX_MAXIMUM_YEAR)
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	f640 023b 	movw	r2, #2107	; 0x83b
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d831      	bhi.n	800a5b4 <_fx_system_timer_entry+0x274>
                            {
                                return;
                            }
                        }
                        break;
 800a550:	e017      	b.n	800a582 <_fx_system_timer_entry+0x242>

                    default:                /* Invalid month!  */

                        return;             /* Skip updating date/time!  */
                    }
                }
 800a552:	bf00      	nop
 800a554:	e016      	b.n	800a584 <_fx_system_timer_entry+0x244>
                        break;
 800a556:	bf00      	nop
 800a558:	e014      	b.n	800a584 <_fx_system_timer_entry+0x244>
                        break;
 800a55a:	bf00      	nop
 800a55c:	e012      	b.n	800a584 <_fx_system_timer_entry+0x244>
                        break;
 800a55e:	bf00      	nop
 800a560:	e010      	b.n	800a584 <_fx_system_timer_entry+0x244>
                        break;
 800a562:	bf00      	nop
 800a564:	e00e      	b.n	800a584 <_fx_system_timer_entry+0x244>
                        break;
 800a566:	bf00      	nop
 800a568:	e00c      	b.n	800a584 <_fx_system_timer_entry+0x244>
                        break;
 800a56a:	bf00      	nop
 800a56c:	e00a      	b.n	800a584 <_fx_system_timer_entry+0x244>
                        break;
 800a56e:	bf00      	nop
 800a570:	e008      	b.n	800a584 <_fx_system_timer_entry+0x244>
                        break;
 800a572:	bf00      	nop
 800a574:	e006      	b.n	800a584 <_fx_system_timer_entry+0x244>
                        break;
 800a576:	bf00      	nop
 800a578:	e004      	b.n	800a584 <_fx_system_timer_entry+0x244>
                        break;
 800a57a:	bf00      	nop
 800a57c:	e002      	b.n	800a584 <_fx_system_timer_entry+0x244>
                        break;
 800a57e:	bf00      	nop
 800a580:	e000      	b.n	800a584 <_fx_system_timer_entry+0x244>
                        break;
 800a582:	bf00      	nop
        }

        /* Now apply the new setting to the internal representation.  */

        /* Set the system date.  */
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 800a58a:	025a      	lsls	r2, r3, #9
                            (month << FX_MONTH_SHIFT) | day;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	015b      	lsls	r3, r3, #5
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800a590:	431a      	orrs	r2, r3
                            (month << FX_MONTH_SHIFT) | day;
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	4313      	orrs	r3, r2
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800a596:	4a0c      	ldr	r2, [pc, #48]	; (800a5c8 <_fx_system_timer_entry+0x288>)
 800a598:	6013      	str	r3, [r2, #0]

        /* Set the new system time.  */
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	02da      	lsls	r2, r3, #11
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 800a59e:	69bb      	ldr	r3, [r7, #24]
 800a5a0:	015b      	lsls	r3, r3, #5
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 800a5a2:	431a      	orrs	r2, r3
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	085b      	lsrs	r3, r3, #1
 800a5a8:	4313      	orrs	r3, r2
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 800a5aa:	4a06      	ldr	r2, [pc, #24]	; (800a5c4 <_fx_system_timer_entry+0x284>)
 800a5ac:	6013      	str	r3, [r2, #0]
 800a5ae:	e002      	b.n	800a5b6 <_fx_system_timer_entry+0x276>
                        return;             /* Skip updating date/time!  */
 800a5b0:	bf00      	nop
 800a5b2:	e000      	b.n	800a5b6 <_fx_system_timer_entry+0x276>
                                return;
 800a5b4:	bf00      	nop
    }
}
 800a5b6:	3724      	adds	r7, #36	; 0x24
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr
 800a5c0:	46585359 	.word	0x46585359
 800a5c4:	24012474 	.word	0x24012474
 800a5c8:	24012470 	.word	0x24012470
 800a5cc:	88888889 	.word	0x88888889

0800a5d0 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800a5d0:	b580      	push	{r7, lr}
 800a5d2:	b096      	sub	sp, #88	; 0x58
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	607a      	str	r2, [r7, #4]
 800a5dc:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	3303      	adds	r3, #3
 800a5e2:	f023 0303 	bic.w	r3, r3, #3
 800a5e6:	607b      	str	r3, [r7, #4]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a5e8:	f3ef 8310 	mrs	r3, PRIMASK
 800a5ec:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 800a5ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 800a5f0:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800a5f2:	b672      	cpsid	i
#endif
    return(int_posture);
 800a5f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800a5f6:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800a5f8:	4b55      	ldr	r3, [pc, #340]	; (800a750 <_tx_byte_allocate+0x180>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800a5fe:	2300      	movs	r3, #0
 800a600:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a606:	621a      	str	r2, [r3, #32]
 800a608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a60a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a60e:	f383 8810 	msr	PRIMASK, r3
}
 800a612:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800a614:	6879      	ldr	r1, [r7, #4]
 800a616:	68f8      	ldr	r0, [r7, #12]
 800a618:	f000 f9b2 	bl	800a980 <_tx_byte_pool_search>
 800a61c:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a61e:	f3ef 8310 	mrs	r3, PRIMASK
 800a622:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800a624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800a626:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800a628:	b672      	cpsid	i
    return(int_posture);
 800a62a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800a62c:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800a62e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a630:	2b00      	cmp	r3, #0
 800a632:	d002      	beq.n	800a63a <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800a634:	2301      	movs	r3, #1
 800a636:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a638:	e006      	b.n	800a648 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6a1b      	ldr	r3, [r3, #32]
 800a63e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a640:	429a      	cmp	r2, r3
 800a642:	d101      	bne.n	800a648 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800a644:	2301      	movs	r3, #1
 800a646:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800a648:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d0d9      	beq.n	800a602 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a652:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800a654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a656:	2b00      	cmp	r3, #0
 800a658:	d008      	beq.n	800a66c <_tx_byte_allocate+0x9c>
 800a65a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a65c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a65e:	6a3b      	ldr	r3, [r7, #32]
 800a660:	f383 8810 	msr	PRIMASK, r3
}
 800a664:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800a666:	2300      	movs	r3, #0
 800a668:	653b      	str	r3, [r7, #80]	; 0x50
 800a66a:	e06c      	b.n	800a746 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d061      	beq.n	800a736 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800a672:	4b38      	ldr	r3, [pc, #224]	; (800a754 <_tx_byte_allocate+0x184>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d007      	beq.n	800a68a <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800a67a:	2310      	movs	r3, #16
 800a67c:	653b      	str	r3, [r7, #80]	; 0x50
 800a67e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a680:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	f383 8810 	msr	PRIMASK, r3
}
 800a688:	e05d      	b.n	800a746 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800a68a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a68c:	4a32      	ldr	r2, [pc, #200]	; (800a758 <_tx_byte_allocate+0x188>)
 800a68e:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800a690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a692:	68fa      	ldr	r2, [r7, #12]
 800a694:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800a696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a698:	68ba      	ldr	r2, [r7, #8]
 800a69a:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800a69c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800a6a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a6a8:	1c5a      	adds	r2, r3, #1
 800a6aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6ac:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6b4:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ba:	1c5a      	adds	r2, r3, #1
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800a6c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d109      	bne.n	800a6da <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6ca:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800a6cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6d0:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800a6d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6d6:	675a      	str	r2, [r3, #116]	; 0x74
 800a6d8:	e011      	b.n	800a6fe <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6de:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800a6e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a6e4:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800a6e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6ea:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800a6ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6f0:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800a6f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6f6:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800a6f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6fc:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800a6fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a700:	2209      	movs	r2, #9
 800a702:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800a704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a706:	2201      	movs	r2, #1
 800a708:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800a70a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a70c:	683a      	ldr	r2, [r7, #0]
 800a70e:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800a710:	4b10      	ldr	r3, [pc, #64]	; (800a754 <_tx_byte_allocate+0x184>)
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	3301      	adds	r3, #1
 800a716:	4a0f      	ldr	r2, [pc, #60]	; (800a754 <_tx_byte_allocate+0x184>)
 800a718:	6013      	str	r3, [r2, #0]
 800a71a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a71c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a71e:	69bb      	ldr	r3, [r7, #24]
 800a720:	f383 8810 	msr	PRIMASK, r3
}
 800a724:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800a726:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800a728:	f000 fe08 	bl	800b33c <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800a72c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a72e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a732:	653b      	str	r3, [r7, #80]	; 0x50
 800a734:	e007      	b.n	800a746 <_tx_byte_allocate+0x176>
 800a736:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a738:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	f383 8810 	msr	PRIMASK, r3
}
 800a740:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800a742:	2310      	movs	r3, #16
 800a744:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800a746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800a748:	4618      	mov	r0, r3
 800a74a:	3758      	adds	r7, #88	; 0x58
 800a74c:	46bd      	mov	sp, r7
 800a74e:	bd80      	pop	{r7, pc}
 800a750:	240124f0 	.word	0x240124f0
 800a754:	24012588 	.word	0x24012588
 800a758:	0800a75d 	.word	0x0800a75d

0800a75c <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b08e      	sub	sp, #56	; 0x38
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a766:	f3ef 8310 	mrs	r3, PRIMASK
 800a76a:	623b      	str	r3, [r7, #32]
    return(posture);
 800a76c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800a76e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a770:	b672      	cpsid	i
    return(int_posture);
 800a772:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800a774:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a77a:	4a33      	ldr	r2, [pc, #204]	; (800a848 <_tx_byte_pool_cleanup+0xec>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d158      	bne.n	800a832 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a786:	683a      	ldr	r2, [r7, #0]
 800a788:	429a      	cmp	r2, r3
 800a78a:	d152      	bne.n	800a832 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a790:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800a792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a794:	2b00      	cmp	r3, #0
 800a796:	d04c      	beq.n	800a832 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800a798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4a2b      	ldr	r2, [pc, #172]	; (800a84c <_tx_byte_pool_cleanup+0xf0>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d147      	bne.n	800a832 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800a7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d043      	beq.n	800a832 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800a7b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7b4:	1e5a      	subs	r2, r3, #1
 800a7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b8:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800a7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7be:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800a7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d103      	bne.n	800a7ce <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800a7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	625a      	str	r2, [r3, #36]	; 0x24
 800a7cc:	e013      	b.n	800a7f6 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7d2:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7d8:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800a7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7de:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7e4:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800a7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d102      	bne.n	800a7f6 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800a7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7f4:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7fa:	2b09      	cmp	r3, #9
 800a7fc:	d119      	bne.n	800a832 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2210      	movs	r2, #16
 800a802:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800a806:	4b12      	ldr	r3, [pc, #72]	; (800a850 <_tx_byte_pool_cleanup+0xf4>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	3301      	adds	r3, #1
 800a80c:	4a10      	ldr	r2, [pc, #64]	; (800a850 <_tx_byte_pool_cleanup+0xf4>)
 800a80e:	6013      	str	r3, [r2, #0]
 800a810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a812:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	f383 8810 	msr	PRIMASK, r3
}
 800a81a:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 fc8d 	bl	800b13c <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a822:	f3ef 8310 	mrs	r3, PRIMASK
 800a826:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a828:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a82a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a82c:	b672      	cpsid	i
    return(int_posture);
 800a82e:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800a830:	637b      	str	r3, [r7, #52]	; 0x34
 800a832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a834:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f383 8810 	msr	PRIMASK, r3
}
 800a83c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800a83e:	bf00      	nop
 800a840:	3738      	adds	r7, #56	; 0x38
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	0800a75d 	.word	0x0800a75d
 800a84c:	42595445 	.word	0x42595445
 800a850:	24012588 	.word	0x24012588

0800a854 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b08e      	sub	sp, #56	; 0x38
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	607a      	str	r2, [r7, #4]
 800a860:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800a862:	2234      	movs	r2, #52	; 0x34
 800a864:	2100      	movs	r1, #0
 800a866:	68f8      	ldr	r0, [r7, #12]
 800a868:	f001 fcbc 	bl	800c1e4 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	f023 0303 	bic.w	r3, r3, #3
 800a872:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	68ba      	ldr	r2, [r7, #8]
 800a878:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	687a      	ldr	r2, [r7, #4]
 800a87e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	683a      	ldr	r2, [r7, #0]
 800a884:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	f1a3 0208 	sub.w	r2, r3, #8
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2202      	movs	r2, #2
 800a8a0:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800a8a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	4413      	add	r3, r2
 800a8ac:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800a8ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8b0:	3b04      	subs	r3, #4
 800a8b2:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800a8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800a8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8c0:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800a8c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8c4:	3b04      	subs	r3, #4
 800a8c6:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800a8c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800a8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800a8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8de:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800a8e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8e6:	3304      	adds	r3, #4
 800a8e8:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800a8ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ec:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800a8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f0:	4a1f      	ldr	r2, [pc, #124]	; (800a970 <_tx_byte_pool_create+0x11c>)
 800a8f2:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a8fa:	f3ef 8310 	mrs	r3, PRIMASK
 800a8fe:	61bb      	str	r3, [r7, #24]
    return(posture);
 800a900:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800a902:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a904:	b672      	cpsid	i
    return(int_posture);
 800a906:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800a908:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	4a19      	ldr	r2, [pc, #100]	; (800a974 <_tx_byte_pool_create+0x120>)
 800a90e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800a910:	4b19      	ldr	r3, [pc, #100]	; (800a978 <_tx_byte_pool_create+0x124>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d109      	bne.n	800a92c <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800a918:	4a18      	ldr	r2, [pc, #96]	; (800a97c <_tx_byte_pool_create+0x128>)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	68fa      	ldr	r2, [r7, #12]
 800a922:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	68fa      	ldr	r2, [r7, #12]
 800a928:	631a      	str	r2, [r3, #48]	; 0x30
 800a92a:	e011      	b.n	800a950 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800a92c:	4b13      	ldr	r3, [pc, #76]	; (800a97c <_tx_byte_pool_create+0x128>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800a932:	6a3b      	ldr	r3, [r7, #32]
 800a934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a936:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800a938:	6a3b      	ldr	r3, [r7, #32]
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800a93e:	69fb      	ldr	r3, [r7, #28]
 800a940:	68fa      	ldr	r2, [r7, #12]
 800a942:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	69fa      	ldr	r2, [r7, #28]
 800a948:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	6a3a      	ldr	r2, [r7, #32]
 800a94e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800a950:	4b09      	ldr	r3, [pc, #36]	; (800a978 <_tx_byte_pool_create+0x124>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	3301      	adds	r3, #1
 800a956:	4a08      	ldr	r2, [pc, #32]	; (800a978 <_tx_byte_pool_create+0x124>)
 800a958:	6013      	str	r3, [r2, #0]
 800a95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	f383 8810 	msr	PRIMASK, r3
}
 800a964:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800a966:	2300      	movs	r3, #0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3738      	adds	r7, #56	; 0x38
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}
 800a970:	ffffeeee 	.word	0xffffeeee
 800a974:	42595445 	.word	0x42595445
 800a978:	240124e4 	.word	0x240124e4
 800a97c:	240124e0 	.word	0x240124e0

0800a980 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800a980:	b480      	push	{r7}
 800a982:	b097      	sub	sp, #92	; 0x5c
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800a98a:	2300      	movs	r3, #0
 800a98c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800a98e:	f3ef 8310 	mrs	r3, PRIMASK
 800a992:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800a994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800a996:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800a998:	b672      	cpsid	i
    return(int_posture);
 800a99a:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800a99c:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	689a      	ldr	r2, [r3, #8]
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	3b02      	subs	r3, #2
 800a9a8:	00db      	lsls	r3, r3, #3
 800a9aa:	4413      	add	r3, r2
 800a9ac:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 800a9ae:	683a      	ldr	r2, [r7, #0]
 800a9b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9b2:	429a      	cmp	r2, r3
 800a9b4:	d308      	bcc.n	800a9c8 <_tx_byte_pool_search+0x48>
 800a9b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9b8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800a9ba:	69fb      	ldr	r3, [r7, #28]
 800a9bc:	f383 8810 	msr	PRIMASK, r3
}
 800a9c0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	653b      	str	r3, [r7, #80]	; 0x50
 800a9c6:	e0dd      	b.n	800ab84 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800a9c8:	4b72      	ldr	r3, [pc, #456]	; (800ab94 <_tx_byte_pool_search+0x214>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a9d2:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	695b      	ldr	r3, [r3, #20]
 800a9d8:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	68db      	ldr	r3, [r3, #12]
 800a9de:	3301      	adds	r3, #1
 800a9e0:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800a9e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9e8:	3304      	adds	r3, #4
 800a9ea:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800a9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9ee:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800a9f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	4a68      	ldr	r2, [pc, #416]	; (800ab98 <_tx_byte_pool_search+0x218>)
 800a9f6:	4293      	cmp	r3, r2
 800a9f8:	d143      	bne.n	800aa82 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800a9fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d104      	bne.n	800aa0a <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aa04:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800aa06:	2301      	movs	r3, #1
 800aa08:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800aa0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa0c:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 800aa0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800aa14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa18:	1ad3      	subs	r3, r2, r3
 800aa1a:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800aa1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa1e:	3b08      	subs	r3, #8
 800aa20:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800aa22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aa24:	683b      	ldr	r3, [r7, #0]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d257      	bcs.n	800aada <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800aa2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa30:	3304      	adds	r3, #4
 800aa32:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800aa34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa36:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800aa38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	4a56      	ldr	r2, [pc, #344]	; (800ab98 <_tx_byte_pool_search+0x218>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d113      	bne.n	800aa6a <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800aa42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa44:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800aa46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa4c:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	1e5a      	subs	r2, r3, #1
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	695b      	ldr	r3, [r3, #20]
 800aa5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	d114      	bne.n	800aa8c <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aa66:	615a      	str	r2, [r3, #20]
 800aa68:	e010      	b.n	800aa8c <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800aa6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa6c:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 800aa6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800aa74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d008      	beq.n	800aa8c <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800aa7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa7c:	3b01      	subs	r3, #1
 800aa7e:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa80:	e004      	b.n	800aa8c <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800aa82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa84:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 800aa86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800aa8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d002      	beq.n	800aa98 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800aa92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa94:	3b01      	subs	r3, #1
 800aa96:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa9a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	f383 8810 	msr	PRIMASK, r3
}
 800aaa2:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800aaa4:	f3ef 8310 	mrs	r3, PRIMASK
 800aaa8:	61bb      	str	r3, [r7, #24]
    return(posture);
 800aaaa:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800aaac:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aaae:	b672      	cpsid	i
    return(int_posture);
 800aab0:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800aab2:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6a1b      	ldr	r3, [r3, #32]
 800aab8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aaba:	429a      	cmp	r2, r3
 800aabc:	d009      	beq.n	800aad2 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	695b      	ldr	r3, [r3, #20]
 800aac2:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	3301      	adds	r3, #1
 800aaca:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aad0:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800aad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d186      	bne.n	800a9e6 <_tx_byte_pool_search+0x66>
 800aad8:	e000      	b.n	800aadc <_tx_byte_pool_search+0x15c>
                    break;
 800aada:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800aadc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d048      	beq.n	800ab74 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800aae2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	1ad3      	subs	r3, r2, r3
 800aae8:	2b13      	cmp	r3, #19
 800aaea:	d91e      	bls.n	800ab2a <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	3308      	adds	r3, #8
 800aaf0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aaf2:	4413      	add	r3, r2
 800aaf4:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800aaf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf8:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800aafa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aafc:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800aafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab04:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800ab06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab08:	3304      	adds	r3, #4
 800ab0a:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800ab0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab0e:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800ab10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab12:	4a21      	ldr	r2, [pc, #132]	; (800ab98 <_tx_byte_pool_search+0x218>)
 800ab14:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	68db      	ldr	r3, [r3, #12]
 800ab1a:	1c5a      	adds	r2, r3, #1
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800ab20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab24:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800ab2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab2c:	3304      	adds	r3, #4
 800ab2e:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800ab30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab32:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800ab34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	689a      	ldr	r2, [r3, #8]
 800ab3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab40:	1ad3      	subs	r3, r2, r3
 800ab42:	f1a3 0208 	sub.w	r2, r3, #8
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	695b      	ldr	r3, [r3, #20]
 800ab4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d105      	bne.n	800ab60 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800ab54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab56:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800ab58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab5a:	681a      	ldr	r2, [r3, #0]
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	615a      	str	r2, [r3, #20]
 800ab60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab62:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f383 8810 	msr	PRIMASK, r3
}
 800ab6a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800ab6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab6e:	3308      	adds	r3, #8
 800ab70:	653b      	str	r3, [r7, #80]	; 0x50
 800ab72:	e007      	b.n	800ab84 <_tx_byte_pool_search+0x204>
 800ab74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab76:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	f383 8810 	msr	PRIMASK, r3
}
 800ab7e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800ab80:	2300      	movs	r3, #0
 800ab82:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800ab84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800ab86:	4618      	mov	r0, r3
 800ab88:	375c      	adds	r7, #92	; 0x5c
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr
 800ab92:	bf00      	nop
 800ab94:	240124f0 	.word	0x240124f0
 800ab98:	ffffeeee 	.word	0xffffeeee

0800ab9c <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800aba0:	f000 fa0a 	bl	800afb8 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800aba4:	f000 fdf6 	bl	800b794 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800aba8:	4b12      	ldr	r3, [pc, #72]	; (800abf4 <_tx_initialize_high_level+0x58>)
 800abaa:	2200      	movs	r2, #0
 800abac:	601a      	str	r2, [r3, #0]
 800abae:	4b12      	ldr	r3, [pc, #72]	; (800abf8 <_tx_initialize_high_level+0x5c>)
 800abb0:	2200      	movs	r2, #0
 800abb2:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800abb4:	4b11      	ldr	r3, [pc, #68]	; (800abfc <_tx_initialize_high_level+0x60>)
 800abb6:	2200      	movs	r2, #0
 800abb8:	601a      	str	r2, [r3, #0]
 800abba:	4b11      	ldr	r3, [pc, #68]	; (800ac00 <_tx_initialize_high_level+0x64>)
 800abbc:	2200      	movs	r2, #0
 800abbe:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800abc0:	4b10      	ldr	r3, [pc, #64]	; (800ac04 <_tx_initialize_high_level+0x68>)
 800abc2:	2200      	movs	r2, #0
 800abc4:	601a      	str	r2, [r3, #0]
 800abc6:	4b10      	ldr	r3, [pc, #64]	; (800ac08 <_tx_initialize_high_level+0x6c>)
 800abc8:	2200      	movs	r2, #0
 800abca:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800abcc:	4b0f      	ldr	r3, [pc, #60]	; (800ac0c <_tx_initialize_high_level+0x70>)
 800abce:	2200      	movs	r2, #0
 800abd0:	601a      	str	r2, [r3, #0]
 800abd2:	4b0f      	ldr	r3, [pc, #60]	; (800ac10 <_tx_initialize_high_level+0x74>)
 800abd4:	2200      	movs	r2, #0
 800abd6:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800abd8:	4b0e      	ldr	r3, [pc, #56]	; (800ac14 <_tx_initialize_high_level+0x78>)
 800abda:	2200      	movs	r2, #0
 800abdc:	601a      	str	r2, [r3, #0]
 800abde:	4b0e      	ldr	r3, [pc, #56]	; (800ac18 <_tx_initialize_high_level+0x7c>)
 800abe0:	2200      	movs	r2, #0
 800abe2:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800abe4:	4b0d      	ldr	r3, [pc, #52]	; (800ac1c <_tx_initialize_high_level+0x80>)
 800abe6:	2200      	movs	r2, #0
 800abe8:	601a      	str	r2, [r3, #0]
 800abea:	4b0d      	ldr	r3, [pc, #52]	; (800ac20 <_tx_initialize_high_level+0x84>)
 800abec:	2200      	movs	r2, #0
 800abee:	601a      	str	r2, [r3, #0]
#endif
}
 800abf0:	bf00      	nop
 800abf2:	bd80      	pop	{r7, pc}
 800abf4:	240124b8 	.word	0x240124b8
 800abf8:	240124bc 	.word	0x240124bc
 800abfc:	240124c0 	.word	0x240124c0
 800ac00:	240124c4 	.word	0x240124c4
 800ac04:	240124c8 	.word	0x240124c8
 800ac08:	240124cc 	.word	0x240124cc
 800ac0c:	240124d8 	.word	0x240124d8
 800ac10:	240124dc 	.word	0x240124dc
 800ac14:	240124e0 	.word	0x240124e0
 800ac18:	240124e4 	.word	0x240124e4
 800ac1c:	240124d0 	.word	0x240124d0
 800ac20:	240124d4 	.word	0x240124d4

0800ac24 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800ac28:	4b10      	ldr	r3, [pc, #64]	; (800ac6c <_tx_initialize_kernel_enter+0x48>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800ac30:	d00c      	beq.n	800ac4c <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800ac32:	4b0e      	ldr	r3, [pc, #56]	; (800ac6c <_tx_initialize_kernel_enter+0x48>)
 800ac34:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800ac38:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800ac3a:	f7f5 fb51 	bl	80002e0 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800ac3e:	f7ff ffad 	bl	800ab9c <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800ac42:	4b0b      	ldr	r3, [pc, #44]	; (800ac70 <_tx_initialize_kernel_enter+0x4c>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	3301      	adds	r3, #1
 800ac48:	4a09      	ldr	r2, [pc, #36]	; (800ac70 <_tx_initialize_kernel_enter+0x4c>)
 800ac4a:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800ac4c:	4b07      	ldr	r3, [pc, #28]	; (800ac6c <_tx_initialize_kernel_enter+0x48>)
 800ac4e:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800ac52:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800ac54:	4b07      	ldr	r3, [pc, #28]	; (800ac74 <_tx_initialize_kernel_enter+0x50>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7f5 fe33 	bl	80008c4 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800ac5e:	4b03      	ldr	r3, [pc, #12]	; (800ac6c <_tx_initialize_kernel_enter+0x48>)
 800ac60:	2200      	movs	r2, #0
 800ac62:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800ac64:	f7f5 fb7c 	bl	8000360 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800ac68:	bf00      	nop
 800ac6a:	bd80      	pop	{r7, pc}
 800ac6c:	24000014 	.word	0x24000014
 800ac70:	24012588 	.word	0x24012588
 800ac74:	240124e8 	.word	0x240124e8

0800ac78 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b08a      	sub	sp, #40	; 0x28
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800ac84:	221c      	movs	r2, #28
 800ac86:	2100      	movs	r1, #0
 800ac88:	68f8      	ldr	r0, [r7, #12]
 800ac8a:	f001 faab 	bl	800c1e4 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	68ba      	ldr	r2, [r7, #8]
 800ac92:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ac9a:	f3ef 8310 	mrs	r3, PRIMASK
 800ac9e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800aca0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800aca2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800aca4:	b672      	cpsid	i
    return(int_posture);
 800aca6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800aca8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	4a18      	ldr	r2, [pc, #96]	; (800ad10 <_tx_semaphore_create+0x98>)
 800acae:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800acb0:	4b18      	ldr	r3, [pc, #96]	; (800ad14 <_tx_semaphore_create+0x9c>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d109      	bne.n	800accc <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800acb8:	4a17      	ldr	r2, [pc, #92]	; (800ad18 <_tx_semaphore_create+0xa0>)
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	619a      	str	r2, [r3, #24]
 800acca:	e011      	b.n	800acf0 <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800accc:	4b12      	ldr	r3, [pc, #72]	; (800ad18 <_tx_semaphore_create+0xa0>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800acd2:	6a3b      	ldr	r3, [r7, #32]
 800acd4:	699b      	ldr	r3, [r3, #24]
 800acd6:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800acd8:	6a3b      	ldr	r3, [r7, #32]
 800acda:	68fa      	ldr	r2, [r7, #12]
 800acdc:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800acde:	69fb      	ldr	r3, [r7, #28]
 800ace0:	68fa      	ldr	r2, [r7, #12]
 800ace2:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	69fa      	ldr	r2, [r7, #28]
 800ace8:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	6a3a      	ldr	r2, [r7, #32]
 800acee:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800acf0:	4b08      	ldr	r3, [pc, #32]	; (800ad14 <_tx_semaphore_create+0x9c>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	3301      	adds	r3, #1
 800acf6:	4a07      	ldr	r2, [pc, #28]	; (800ad14 <_tx_semaphore_create+0x9c>)
 800acf8:	6013      	str	r3, [r2, #0]
 800acfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfc:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	f383 8810 	msr	PRIMASK, r3
}
 800ad04:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800ad06:	2300      	movs	r3, #0
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3728      	adds	r7, #40	; 0x28
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	53454d41 	.word	0x53454d41
 800ad14:	240124bc 	.word	0x240124bc
 800ad18:	240124b8 	.word	0x240124b8

0800ad1c <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b08c      	sub	sp, #48	; 0x30
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ad24:	f3ef 8310 	mrs	r3, PRIMASK
 800ad28:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ad2a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ad2c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ad2e:	b672      	cpsid	i
    return(int_posture);
 800ad30:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 800ad32:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	691b      	ldr	r3, [r3, #16]
 800ad38:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 800ad3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d10a      	bne.n	800ad56 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	1c5a      	adds	r2, r3, #1
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	609a      	str	r2, [r3, #8]
 800ad4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	f383 8810 	msr	PRIMASK, r3
}
 800ad54:	e033      	b.n	800adbe <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	68db      	ldr	r3, [r3, #12]
 800ad5a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 800ad5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad5e:	3b01      	subs	r3, #1
 800ad60:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 800ad62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d103      	bne.n	800ad70 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	60da      	str	r2, [r3, #12]
 800ad6e:	e00e      	b.n	800ad8e <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 800ad70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad74:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6a3a      	ldr	r2, [r7, #32]
 800ad7a:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800ad7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad80:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800ad82:	6a3b      	ldr	r3, [r7, #32]
 800ad84:	69fa      	ldr	r2, [r7, #28]
 800ad86:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	6a3a      	ldr	r2, [r7, #32]
 800ad8c:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad92:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800ad94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad96:	2200      	movs	r2, #0
 800ad98:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800ad9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 800ada2:	4b09      	ldr	r3, [pc, #36]	; (800adc8 <_tx_semaphore_put+0xac>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	3301      	adds	r3, #1
 800ada8:	4a07      	ldr	r2, [pc, #28]	; (800adc8 <_tx_semaphore_put+0xac>)
 800adaa:	6013      	str	r3, [r2, #0]
 800adac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adae:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	f383 8810 	msr	PRIMASK, r3
}
 800adb6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 800adb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800adba:	f000 f9bf 	bl	800b13c <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800adbe:	2300      	movs	r3, #0
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3730      	adds	r7, #48	; 0x30
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	24012588 	.word	0x24012588

0800adcc <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b092      	sub	sp, #72	; 0x48
 800add0:	af00      	add	r7, sp, #0
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	60b9      	str	r1, [r7, #8]
 800add6:	607a      	str	r2, [r7, #4]
 800add8:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800adda:	2300      	movs	r3, #0
 800addc:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800adde:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ade0:	21ef      	movs	r1, #239	; 0xef
 800ade2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ade4:	f001 f9fe 	bl	800c1e4 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800ade8:	22b0      	movs	r2, #176	; 0xb0
 800adea:	2100      	movs	r1, #0
 800adec:	68f8      	ldr	r0, [r7, #12]
 800adee:	f001 f9f9 	bl	800c1e4 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	68ba      	ldr	r2, [r7, #8]
 800adf6:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	683a      	ldr	r2, [r7, #0]
 800ae02:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae08:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae0e:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae14:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae1a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae22:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae28:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2220      	movs	r2, #32
 800ae2e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800ae32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae34:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800ae36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae38:	3b01      	subs	r3, #1
 800ae3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae3c:	4413      	add	r3, r2
 800ae3e:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae44:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800ae46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	d007      	beq.n	800ae5e <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2200      	movs	r2, #0
 800ae52:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	2200      	movs	r2, #0
 800ae58:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800ae5c:	e006      	b.n	800ae6c <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae62:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae68:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2203      	movs	r2, #3
 800ae70:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	4a48      	ldr	r2, [pc, #288]	; (800af98 <_tx_thread_create+0x1cc>)
 800ae76:	655a      	str	r2, [r3, #84]	; 0x54
 800ae78:	68fa      	ldr	r2, [r7, #12]
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800ae7e:	4947      	ldr	r1, [pc, #284]	; (800af9c <_tx_thread_create+0x1d0>)
 800ae80:	68f8      	ldr	r0, [r7, #12]
 800ae82:	f7f5 facd 	bl	8000420 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ae86:	f3ef 8310 	mrs	r3, PRIMASK
 800ae8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800ae8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800ae8e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800ae90:	b672      	cpsid	i
    return(int_posture);
 800ae92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800ae94:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	4a41      	ldr	r2, [pc, #260]	; (800afa0 <_tx_thread_create+0x1d4>)
 800ae9a:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800ae9c:	4b41      	ldr	r3, [pc, #260]	; (800afa4 <_tx_thread_create+0x1d8>)
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d10b      	bne.n	800aebc <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800aea4:	4a40      	ldr	r2, [pc, #256]	; (800afa8 <_tx_thread_create+0x1dc>)
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	68fa      	ldr	r2, [r7, #12]
 800aeae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	68fa      	ldr	r2, [r7, #12]
 800aeb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800aeba:	e016      	b.n	800aeea <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800aebc:	4b3a      	ldr	r3, [pc, #232]	; (800afa8 <_tx_thread_create+0x1dc>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800aec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aec8:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800aeca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800aed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed4:	68fa      	ldr	r2, [r7, #12]
 800aed6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aede:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aee6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800aeea:	4b2e      	ldr	r3, [pc, #184]	; (800afa4 <_tx_thread_create+0x1d8>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	3301      	adds	r3, #1
 800aef0:	4a2c      	ldr	r2, [pc, #176]	; (800afa4 <_tx_thread_create+0x1d8>)
 800aef2:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800aef4:	4b2d      	ldr	r3, [pc, #180]	; (800afac <_tx_thread_create+0x1e0>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	3301      	adds	r3, #1
 800aefa:	4a2c      	ldr	r2, [pc, #176]	; (800afac <_tx_thread_create+0x1e0>)
 800aefc:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800aefe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af00:	2b01      	cmp	r3, #1
 800af02:	d129      	bne.n	800af58 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800af04:	f3ef 8305 	mrs	r3, IPSR
 800af08:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 800af0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800af0c:	4b28      	ldr	r3, [pc, #160]	; (800afb0 <_tx_thread_create+0x1e4>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4313      	orrs	r3, r2
 800af12:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800af16:	d30d      	bcc.n	800af34 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800af18:	4b26      	ldr	r3, [pc, #152]	; (800afb4 <_tx_thread_create+0x1e8>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800af1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af20:	2b00      	cmp	r3, #0
 800af22:	d009      	beq.n	800af38 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800af24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af28:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800af2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af30:	63da      	str	r2, [r3, #60]	; 0x3c
 800af32:	e001      	b.n	800af38 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800af34:	2300      	movs	r3, #0
 800af36:	647b      	str	r3, [r7, #68]	; 0x44
 800af38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af3a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af3c:	6a3b      	ldr	r3, [r7, #32]
 800af3e:	f383 8810 	msr	PRIMASK, r3
}
 800af42:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800af44:	68f8      	ldr	r0, [r7, #12]
 800af46:	f000 f8f9 	bl	800b13c <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800af4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d01e      	beq.n	800af8e <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800af50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800af54:	63da      	str	r2, [r3, #60]	; 0x3c
 800af56:	e01a      	b.n	800af8e <_tx_thread_create+0x1c2>
 800af58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af5a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	f383 8810 	msr	PRIMASK, r3
}
 800af62:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800af64:	f3ef 8310 	mrs	r3, PRIMASK
 800af68:	61bb      	str	r3, [r7, #24]
    return(posture);
 800af6a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800af6c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800af6e:	b672      	cpsid	i
    return(int_posture);
 800af70:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800af72:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800af74:	4b0d      	ldr	r3, [pc, #52]	; (800afac <_tx_thread_create+0x1e0>)
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	3b01      	subs	r3, #1
 800af7a:	4a0c      	ldr	r2, [pc, #48]	; (800afac <_tx_thread_create+0x1e0>)
 800af7c:	6013      	str	r3, [r2, #0]
 800af7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af80:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	f383 8810 	msr	PRIMASK, r3
}
 800af88:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800af8a:	f000 f89d 	bl	800b0c8 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800af8e:	2300      	movs	r3, #0
}
 800af90:	4618      	mov	r0, r3
 800af92:	3748      	adds	r7, #72	; 0x48
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}
 800af98:	0800b611 	.word	0x0800b611
 800af9c:	0800b031 	.word	0x0800b031
 800afa0:	54485244 	.word	0x54485244
 800afa4:	240124fc 	.word	0x240124fc
 800afa8:	240124f8 	.word	0x240124f8
 800afac:	24012588 	.word	0x24012588
 800afb0:	24000014 	.word	0x24000014
 800afb4:	240124f4 	.word	0x240124f4

0800afb8 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800afbc:	4b12      	ldr	r3, [pc, #72]	; (800b008 <_tx_thread_initialize+0x50>)
 800afbe:	2200      	movs	r2, #0
 800afc0:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800afc2:	4b12      	ldr	r3, [pc, #72]	; (800b00c <_tx_thread_initialize+0x54>)
 800afc4:	2200      	movs	r2, #0
 800afc6:	601a      	str	r2, [r3, #0]
 800afc8:	4b11      	ldr	r3, [pc, #68]	; (800b010 <_tx_thread_initialize+0x58>)
 800afca:	2200      	movs	r2, #0
 800afcc:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800afce:	4b11      	ldr	r3, [pc, #68]	; (800b014 <_tx_thread_initialize+0x5c>)
 800afd0:	2220      	movs	r2, #32
 800afd2:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800afd4:	2280      	movs	r2, #128	; 0x80
 800afd6:	2100      	movs	r1, #0
 800afd8:	480f      	ldr	r0, [pc, #60]	; (800b018 <_tx_thread_initialize+0x60>)
 800afda:	f001 f903 	bl	800c1e4 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800afde:	4b0f      	ldr	r3, [pc, #60]	; (800b01c <_tx_thread_initialize+0x64>)
 800afe0:	2200      	movs	r2, #0
 800afe2:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800afe4:	4b0e      	ldr	r3, [pc, #56]	; (800b020 <_tx_thread_initialize+0x68>)
 800afe6:	2200      	movs	r2, #0
 800afe8:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800afea:	4b0e      	ldr	r3, [pc, #56]	; (800b024 <_tx_thread_initialize+0x6c>)
 800afec:	2200      	movs	r2, #0
 800afee:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800aff0:	4b0d      	ldr	r3, [pc, #52]	; (800b028 <_tx_thread_initialize+0x70>)
 800aff2:	2200      	movs	r2, #0
 800aff4:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800aff6:	4b0d      	ldr	r3, [pc, #52]	; (800b02c <_tx_thread_initialize+0x74>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 800affe:	4a0b      	ldr	r2, [pc, #44]	; (800b02c <_tx_thread_initialize+0x74>)
 800b000:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800b002:	bf00      	nop
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	240124f0 	.word	0x240124f0
 800b00c:	240124f4 	.word	0x240124f4
 800b010:	24012500 	.word	0x24012500
 800b014:	24012504 	.word	0x24012504
 800b018:	24012508 	.word	0x24012508
 800b01c:	240124f8 	.word	0x240124f8
 800b020:	240124fc 	.word	0x240124fc
 800b024:	24012588 	.word	0x24012588
 800b028:	2401258c 	.word	0x2401258c
 800b02c:	24012590 	.word	0x24012590

0800b030 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b088      	sub	sp, #32
 800b034:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b036:	4b21      	ldr	r3, [pc, #132]	; (800b0bc <_tx_thread_shell_entry+0x8c>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800b03c:	69fb      	ldr	r3, [r7, #28]
 800b03e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b040:	69fa      	ldr	r2, [r7, #28]
 800b042:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b044:	4610      	mov	r0, r2
 800b046:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800b048:	4b1d      	ldr	r3, [pc, #116]	; (800b0c0 <_tx_thread_shell_entry+0x90>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d003      	beq.n	800b058 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800b050:	4b1b      	ldr	r3, [pc, #108]	; (800b0c0 <_tx_thread_shell_entry+0x90>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	69f8      	ldr	r0, [r7, #28]
 800b056:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b058:	f3ef 8310 	mrs	r3, PRIMASK
 800b05c:	607b      	str	r3, [r7, #4]
    return(posture);
 800b05e:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800b060:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b062:	b672      	cpsid	i
    return(int_posture);
 800b064:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800b066:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	2201      	movs	r2, #1
 800b06c:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b06e:	69fb      	ldr	r3, [r7, #28]
 800b070:	2201      	movs	r2, #1
 800b072:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800b074:	69fb      	ldr	r3, [r7, #28]
 800b076:	2200      	movs	r2, #0
 800b078:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800b07a:	4b12      	ldr	r3, [pc, #72]	; (800b0c4 <_tx_thread_shell_entry+0x94>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	3301      	adds	r3, #1
 800b080:	4a10      	ldr	r2, [pc, #64]	; (800b0c4 <_tx_thread_shell_entry+0x94>)
 800b082:	6013      	str	r3, [r2, #0]
 800b084:	69bb      	ldr	r3, [r7, #24]
 800b086:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	f383 8810 	msr	PRIMASK, r3
}
 800b08e:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800b090:	f3ef 8314 	mrs	r3, CONTROL
 800b094:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800b096:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800b098:	617b      	str	r3, [r7, #20]
 800b09a:	697b      	ldr	r3, [r7, #20]
 800b09c:	f023 0304 	bic.w	r3, r3, #4
 800b0a0:	617b      	str	r3, [r7, #20]
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	f383 8814 	msr	CONTROL, r3
}
 800b0ac:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800b0ae:	69f8      	ldr	r0, [r7, #28]
 800b0b0:	f000 f944 	bl	800b33c <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800b0b4:	bf00      	nop
 800b0b6:	3720      	adds	r7, #32
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}
 800b0bc:	240124f0 	.word	0x240124f0
 800b0c0:	2401258c 	.word	0x2401258c
 800b0c4:	24012588 	.word	0x24012588

0800b0c8 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800b0c8:	b480      	push	{r7}
 800b0ca:	b089      	sub	sp, #36	; 0x24
 800b0cc:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b0ce:	4b17      	ldr	r3, [pc, #92]	; (800b12c <_tx_thread_system_preempt_check+0x64>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800b0d4:	69fb      	ldr	r3, [r7, #28]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d121      	bne.n	800b11e <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800b0da:	4b15      	ldr	r3, [pc, #84]	; (800b130 <_tx_thread_system_preempt_check+0x68>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800b0e0:	4b14      	ldr	r3, [pc, #80]	; (800b134 <_tx_thread_system_preempt_check+0x6c>)
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800b0e6:	69ba      	ldr	r2, [r7, #24]
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	d017      	beq.n	800b11e <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b0ee:	4b12      	ldr	r3, [pc, #72]	; (800b138 <_tx_thread_system_preempt_check+0x70>)
 800b0f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0f4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b0f6:	f3ef 8305 	mrs	r3, IPSR
 800b0fa:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800b0fc:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d10c      	bne.n	800b11c <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b102:	f3ef 8310 	mrs	r3, PRIMASK
 800b106:	60fb      	str	r3, [r7, #12]
    return(posture);
 800b108:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800b10a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b10c:	b662      	cpsie	i
}
 800b10e:	bf00      	nop
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f383 8810 	msr	PRIMASK, r3
}
 800b11a:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800b11c:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800b11e:	bf00      	nop
 800b120:	3724      	adds	r7, #36	; 0x24
 800b122:	46bd      	mov	sp, r7
 800b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b128:	4770      	bx	lr
 800b12a:	bf00      	nop
 800b12c:	24012588 	.word	0x24012588
 800b130:	240124f0 	.word	0x240124f0
 800b134:	240124f4 	.word	0x240124f4
 800b138:	e000ed04 	.word	0xe000ed04

0800b13c <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b096      	sub	sp, #88	; 0x58
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b144:	f3ef 8310 	mrs	r3, PRIMASK
 800b148:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800b14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800b14c:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800b14e:	b672      	cpsid	i
    return(int_posture);
 800b150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800b152:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d005      	beq.n	800b168 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	334c      	adds	r3, #76	; 0x4c
 800b160:	4618      	mov	r0, r3
 800b162:	f000 fbf5 	bl	800b950 <_tx_timer_system_deactivate>
 800b166:	e002      	b.n	800b16e <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800b16e:	4b6c      	ldr	r3, [pc, #432]	; (800b320 <_tx_thread_system_resume+0x1e4>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	3b01      	subs	r3, #1
 800b174:	4a6a      	ldr	r2, [pc, #424]	; (800b320 <_tx_thread_system_resume+0x1e4>)
 800b176:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	f040 8083 	bne.w	800b288 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b186:	2b00      	cmp	r3, #0
 800b188:	f000 8097 	beq.w	800b2ba <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b190:	2b00      	cmp	r3, #0
 800b192:	d172      	bne.n	800b27a <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2200      	movs	r2, #0
 800b198:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b19e:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800b1a0:	4a60      	ldr	r2, [pc, #384]	; (800b324 <_tx_thread_system_resume+0x1e8>)
 800b1a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1a8:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800b1aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d154      	bne.n	800b25a <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800b1b0:	495c      	ldr	r1, [pc, #368]	; (800b324 <_tx_thread_system_resume+0x1e8>)
 800b1b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1b4:	687a      	ldr	r2, [r7, #4]
 800b1b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b1ce:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800b1d0:	4b55      	ldr	r3, [pc, #340]	; (800b328 <_tx_thread_system_resume+0x1ec>)
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	4a53      	ldr	r2, [pc, #332]	; (800b328 <_tx_thread_system_resume+0x1ec>)
 800b1da:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800b1dc:	4b53      	ldr	r3, [pc, #332]	; (800b32c <_tx_thread_system_resume+0x1f0>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d269      	bcs.n	800b2ba <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800b1e6:	4a51      	ldr	r2, [pc, #324]	; (800b32c <_tx_thread_system_resume+0x1f0>)
 800b1e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1ea:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800b1ec:	4b50      	ldr	r3, [pc, #320]	; (800b330 <_tx_thread_system_resume+0x1f4>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800b1f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d103      	bne.n	800b200 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800b1f8:	4a4d      	ldr	r2, [pc, #308]	; (800b330 <_tx_thread_system_resume+0x1f4>)
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	6013      	str	r3, [r2, #0]
 800b1fe:	e05c      	b.n	800b2ba <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800b200:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b204:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b206:	429a      	cmp	r2, r3
 800b208:	d257      	bcs.n	800b2ba <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800b20a:	4a49      	ldr	r2, [pc, #292]	; (800b330 <_tx_thread_system_resume+0x1f4>)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6013      	str	r3, [r2, #0]
 800b210:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b212:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b216:	f383 8810 	msr	PRIMASK, r3
}
 800b21a:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b21c:	4b40      	ldr	r3, [pc, #256]	; (800b320 <_tx_thread_system_resume+0x1e4>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 800b222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b224:	2b00      	cmp	r3, #0
 800b226:	d174      	bne.n	800b312 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b228:	4b42      	ldr	r3, [pc, #264]	; (800b334 <_tx_thread_system_resume+0x1f8>)
 800b22a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b22e:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b230:	f3ef 8305 	mrs	r3, IPSR
 800b234:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800b236:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d10c      	bne.n	800b256 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b23c:	f3ef 8310 	mrs	r3, PRIMASK
 800b240:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800b242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 800b244:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b246:	b662      	cpsie	i
}
 800b248:	bf00      	nop
 800b24a:	6a3b      	ldr	r3, [r7, #32]
 800b24c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b24e:	69fb      	ldr	r3, [r7, #28]
 800b250:	f383 8810 	msr	PRIMASK, r3
}
 800b254:	bf00      	nop
}
 800b256:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800b258:	e05b      	b.n	800b312 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800b25a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b25e:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800b260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800b266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b270:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b276:	621a      	str	r2, [r3, #32]
 800b278:	e01f      	b.n	800b2ba <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2200      	movs	r2, #0
 800b27e:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2203      	movs	r2, #3
 800b284:	631a      	str	r2, [r3, #48]	; 0x30
 800b286:	e018      	b.n	800b2ba <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b28c:	2b01      	cmp	r3, #1
 800b28e:	d014      	beq.n	800b2ba <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b294:	2b02      	cmp	r3, #2
 800b296:	d010      	beq.n	800b2ba <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d106      	bne.n	800b2ae <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	631a      	str	r2, [r3, #48]	; 0x30
 800b2ac:	e005      	b.n	800b2ba <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2203      	movs	r2, #3
 800b2b8:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800b2ba:	4b1f      	ldr	r3, [pc, #124]	; (800b338 <_tx_thread_system_resume+0x1fc>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	63bb      	str	r3, [r7, #56]	; 0x38
 800b2c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2c2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b2c4:	69bb      	ldr	r3, [r7, #24]
 800b2c6:	f383 8810 	msr	PRIMASK, r3
}
 800b2ca:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800b2cc:	4b18      	ldr	r3, [pc, #96]	; (800b330 <_tx_thread_system_resume+0x1f4>)
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d020      	beq.n	800b318 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b2d6:	4b12      	ldr	r3, [pc, #72]	; (800b320 <_tx_thread_system_resume+0x1e4>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 800b2dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d11a      	bne.n	800b318 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b2e2:	4b14      	ldr	r3, [pc, #80]	; (800b334 <_tx_thread_system_resume+0x1f8>)
 800b2e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2e8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b2ea:	f3ef 8305 	mrs	r3, IPSR
 800b2ee:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800b2f0:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d10f      	bne.n	800b316 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b2f6:	f3ef 8310 	mrs	r3, PRIMASK
 800b2fa:	613b      	str	r3, [r7, #16]
    return(posture);
 800b2fc:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800b2fe:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b300:	b662      	cpsie	i
}
 800b302:	bf00      	nop
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	f383 8810 	msr	PRIMASK, r3
}
 800b30e:	bf00      	nop
}
 800b310:	e001      	b.n	800b316 <_tx_thread_system_resume+0x1da>
                                return;
 800b312:	bf00      	nop
 800b314:	e000      	b.n	800b318 <_tx_thread_system_resume+0x1dc>
 800b316:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800b318:	3758      	adds	r7, #88	; 0x58
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	24012588 	.word	0x24012588
 800b324:	24012508 	.word	0x24012508
 800b328:	24012500 	.word	0x24012500
 800b32c:	24012504 	.word	0x24012504
 800b330:	240124f4 	.word	0x240124f4
 800b334:	e000ed04 	.word	0xe000ed04
 800b338:	240124f0 	.word	0x240124f0

0800b33c <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b09e      	sub	sp, #120	; 0x78
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800b344:	4b81      	ldr	r3, [pc, #516]	; (800b54c <_tx_thread_system_suspend+0x210>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b34a:	f3ef 8310 	mrs	r3, PRIMASK
 800b34e:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800b350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800b352:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800b354:	b672      	cpsid	i
    return(int_posture);
 800b356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800b358:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800b35a:	687a      	ldr	r2, [r7, #4]
 800b35c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b35e:	429a      	cmp	r2, r3
 800b360:	d112      	bne.n	800b388 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b366:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800b368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d008      	beq.n	800b380 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800b36e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b370:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b374:	d004      	beq.n	800b380 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	334c      	adds	r3, #76	; 0x4c
 800b37a:	4618      	mov	r0, r3
 800b37c:	f000 fa86 	bl	800b88c <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	69db      	ldr	r3, [r3, #28]
 800b384:	4a72      	ldr	r2, [pc, #456]	; (800b550 <_tx_thread_system_suspend+0x214>)
 800b386:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800b388:	4b72      	ldr	r3, [pc, #456]	; (800b554 <_tx_thread_system_suspend+0x218>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	3b01      	subs	r3, #1
 800b38e:	4a71      	ldr	r2, [pc, #452]	; (800b554 <_tx_thread_system_suspend+0x218>)
 800b390:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b396:	2b01      	cmp	r3, #1
 800b398:	f040 80a6 	bne.w	800b4e8 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a6:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6a1b      	ldr	r3, [r3, #32]
 800b3ac:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800b3ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d015      	beq.n	800b3e2 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ba:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800b3bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b3be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b3c0:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800b3c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3c4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b3c6:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800b3c8:	4a63      	ldr	r2, [pc, #396]	; (800b558 <_tx_thread_system_suspend+0x21c>)
 800b3ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b3cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d157      	bne.n	800b486 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800b3d6:	4960      	ldr	r1, [pc, #384]	; (800b558 <_tx_thread_system_suspend+0x21c>)
 800b3d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b3da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b3dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b3e0:	e051      	b.n	800b486 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800b3e2:	4a5d      	ldr	r2, [pc, #372]	; (800b558 <_tx_thread_system_suspend+0x21c>)
 800b3e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b3e6:	2100      	movs	r1, #0
 800b3e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b3f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b3f4:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800b3f6:	4b59      	ldr	r3, [pc, #356]	; (800b55c <_tx_thread_system_suspend+0x220>)
 800b3f8:	681a      	ldr	r2, [r3, #0]
 800b3fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b3fc:	43db      	mvns	r3, r3
 800b3fe:	4013      	ands	r3, r2
 800b400:	4a56      	ldr	r2, [pc, #344]	; (800b55c <_tx_thread_system_suspend+0x220>)
 800b402:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800b404:	2300      	movs	r3, #0
 800b406:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800b408:	4b54      	ldr	r3, [pc, #336]	; (800b55c <_tx_thread_system_suspend+0x220>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800b40e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b410:	2b00      	cmp	r3, #0
 800b412:	d12b      	bne.n	800b46c <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800b414:	4b52      	ldr	r3, [pc, #328]	; (800b560 <_tx_thread_system_suspend+0x224>)
 800b416:	2220      	movs	r2, #32
 800b418:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800b41a:	4b52      	ldr	r3, [pc, #328]	; (800b564 <_tx_thread_system_suspend+0x228>)
 800b41c:	2200      	movs	r2, #0
 800b41e:	601a      	str	r2, [r3, #0]
 800b420:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b422:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b426:	f383 8810 	msr	PRIMASK, r3
}
 800b42a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b42c:	4b49      	ldr	r3, [pc, #292]	; (800b554 <_tx_thread_system_suspend+0x218>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 800b432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b434:	2b00      	cmp	r3, #0
 800b436:	f040 8081 	bne.w	800b53c <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b43a:	4b4b      	ldr	r3, [pc, #300]	; (800b568 <_tx_thread_system_suspend+0x22c>)
 800b43c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b440:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b442:	f3ef 8305 	mrs	r3, IPSR
 800b446:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800b448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d10c      	bne.n	800b468 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b44e:	f3ef 8310 	mrs	r3, PRIMASK
 800b452:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800b454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800b456:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b458:	b662      	cpsie	i
}
 800b45a:	bf00      	nop
 800b45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b45e:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b462:	f383 8810 	msr	PRIMASK, r3
}
 800b466:	bf00      	nop
}
 800b468:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800b46a:	e067      	b.n	800b53c <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800b46c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b46e:	fa93 f3a3 	rbit	r3, r3
 800b472:	65bb      	str	r3, [r7, #88]	; 0x58
 800b474:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b476:	fab3 f383 	clz	r3, r3
 800b47a:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800b47c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b47e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b480:	4413      	add	r3, r2
 800b482:	4a37      	ldr	r2, [pc, #220]	; (800b560 <_tx_thread_system_suspend+0x224>)
 800b484:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800b486:	4b37      	ldr	r3, [pc, #220]	; (800b564 <_tx_thread_system_suspend+0x228>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d12b      	bne.n	800b4e8 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800b490:	4b33      	ldr	r3, [pc, #204]	; (800b560 <_tx_thread_system_suspend+0x224>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	4a30      	ldr	r2, [pc, #192]	; (800b558 <_tx_thread_system_suspend+0x21c>)
 800b496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b49a:	4a32      	ldr	r2, [pc, #200]	; (800b564 <_tx_thread_system_suspend+0x228>)
 800b49c:	6013      	str	r3, [r2, #0]
 800b49e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b4a0:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a4:	f383 8810 	msr	PRIMASK, r3
}
 800b4a8:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b4aa:	4b2a      	ldr	r3, [pc, #168]	; (800b554 <_tx_thread_system_suspend+0x218>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 800b4b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d144      	bne.n	800b540 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b4b6:	4b2c      	ldr	r3, [pc, #176]	; (800b568 <_tx_thread_system_suspend+0x22c>)
 800b4b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4bc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b4be:	f3ef 8305 	mrs	r3, IPSR
 800b4c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800b4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d10c      	bne.n	800b4e4 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b4ca:	f3ef 8310 	mrs	r3, PRIMASK
 800b4ce:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800b4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800b4d2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b4d4:	b662      	cpsie	i
}
 800b4d6:	bf00      	nop
 800b4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4da:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4dc:	6a3b      	ldr	r3, [r7, #32]
 800b4de:	f383 8810 	msr	PRIMASK, r3
}
 800b4e2:	bf00      	nop
}
 800b4e4:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800b4e6:	e02b      	b.n	800b540 <_tx_thread_system_suspend+0x204>
 800b4e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b4ea:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	f383 8810 	msr	PRIMASK, r3
}
 800b4f2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800b4f4:	4b1b      	ldr	r3, [pc, #108]	; (800b564 <_tx_thread_system_suspend+0x228>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	d022      	beq.n	800b544 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800b4fe:	4b15      	ldr	r3, [pc, #84]	; (800b554 <_tx_thread_system_suspend+0x218>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 800b504:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b506:	2b00      	cmp	r3, #0
 800b508:	d11c      	bne.n	800b544 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800b50a:	4b17      	ldr	r3, [pc, #92]	; (800b568 <_tx_thread_system_suspend+0x22c>)
 800b50c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b510:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800b512:	f3ef 8305 	mrs	r3, IPSR
 800b516:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800b518:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d10c      	bne.n	800b538 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b51e:	f3ef 8310 	mrs	r3, PRIMASK
 800b522:	617b      	str	r3, [r7, #20]
    return(posture);
 800b524:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800b526:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800b528:	b662      	cpsie	i
}
 800b52a:	bf00      	nop
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f383 8810 	msr	PRIMASK, r3
}
 800b536:	bf00      	nop
}
 800b538:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800b53a:	e003      	b.n	800b544 <_tx_thread_system_suspend+0x208>
                return;
 800b53c:	bf00      	nop
 800b53e:	e002      	b.n	800b546 <_tx_thread_system_suspend+0x20a>
            return;
 800b540:	bf00      	nop
 800b542:	e000      	b.n	800b546 <_tx_thread_system_suspend+0x20a>
    return;
 800b544:	bf00      	nop
}
 800b546:	3778      	adds	r7, #120	; 0x78
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}
 800b54c:	240124f0 	.word	0x240124f0
 800b550:	24012af4 	.word	0x24012af4
 800b554:	24012588 	.word	0x24012588
 800b558:	24012508 	.word	0x24012508
 800b55c:	24012500 	.word	0x24012500
 800b560:	24012504 	.word	0x24012504
 800b564:	240124f4 	.word	0x240124f4
 800b568:	e000ed04 	.word	0xe000ed04

0800b56c <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b087      	sub	sp, #28
 800b570:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b572:	4b21      	ldr	r3, [pc, #132]	; (800b5f8 <_tx_thread_time_slice+0x8c>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b578:	f3ef 8310 	mrs	r3, PRIMASK
 800b57c:	60fb      	str	r3, [r7, #12]
    return(posture);
 800b57e:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800b580:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b582:	b672      	cpsid	i
    return(int_posture);
 800b584:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800b586:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800b588:	4b1c      	ldr	r3, [pc, #112]	; (800b5fc <_tx_thread_time_slice+0x90>)
 800b58a:	2200      	movs	r2, #0
 800b58c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d024      	beq.n	800b5de <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800b594:	697b      	ldr	r3, [r7, #20]
 800b596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d120      	bne.n	800b5de <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	69da      	ldr	r2, [r3, #28]
 800b5a0:	697b      	ldr	r3, [r7, #20]
 800b5a2:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	699b      	ldr	r3, [r3, #24]
 800b5a8:	4a15      	ldr	r2, [pc, #84]	; (800b600 <_tx_thread_time_slice+0x94>)
 800b5aa:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	6a1b      	ldr	r3, [r3, #32]
 800b5b0:	697a      	ldr	r2, [r7, #20]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d013      	beq.n	800b5de <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d10d      	bne.n	800b5de <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c6:	697a      	ldr	r2, [r7, #20]
 800b5c8:	6a12      	ldr	r2, [r2, #32]
 800b5ca:	490e      	ldr	r1, [pc, #56]	; (800b604 <_tx_thread_time_slice+0x98>)
 800b5cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800b5d0:	4b0d      	ldr	r3, [pc, #52]	; (800b608 <_tx_thread_time_slice+0x9c>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4a0b      	ldr	r2, [pc, #44]	; (800b604 <_tx_thread_time_slice+0x98>)
 800b5d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b5da:	4a0c      	ldr	r2, [pc, #48]	; (800b60c <_tx_thread_time_slice+0xa0>)
 800b5dc:	6013      	str	r3, [r2, #0]
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f383 8810 	msr	PRIMASK, r3
}
 800b5e8:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800b5ea:	bf00      	nop
 800b5ec:	371c      	adds	r7, #28
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr
 800b5f6:	bf00      	nop
 800b5f8:	240124f0 	.word	0x240124f0
 800b5fc:	24012598 	.word	0x24012598
 800b600:	24012af4 	.word	0x24012af4
 800b604:	24012508 	.word	0x24012508
 800b608:	24012504 	.word	0x24012504
 800b60c:	240124f4 	.word	0x240124f4

0800b610 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b08a      	sub	sp, #40	; 0x28
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b61c:	f3ef 8310 	mrs	r3, PRIMASK
 800b620:	617b      	str	r3, [r7, #20]
    return(posture);
 800b622:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800b624:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b626:	b672      	cpsid	i
    return(int_posture);
 800b628:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800b62a:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800b62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b630:	2b04      	cmp	r3, #4
 800b632:	d10e      	bne.n	800b652 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800b634:	4b13      	ldr	r3, [pc, #76]	; (800b684 <_tx_thread_timeout+0x74>)
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	3301      	adds	r3, #1
 800b63a:	4a12      	ldr	r2, [pc, #72]	; (800b684 <_tx_thread_timeout+0x74>)
 800b63c:	6013      	str	r3, [r2, #0]
 800b63e:	6a3b      	ldr	r3, [r7, #32]
 800b640:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f383 8810 	msr	PRIMASK, r3
}
 800b648:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800b64a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b64c:	f7ff fd76 	bl	800b13c <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800b650:	e013      	b.n	800b67a <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800b652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b656:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800b658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b65e:	61bb      	str	r3, [r7, #24]
 800b660:	6a3b      	ldr	r3, [r7, #32]
 800b662:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	f383 8810 	msr	PRIMASK, r3
}
 800b66a:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800b66c:	69fb      	ldr	r3, [r7, #28]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d003      	beq.n	800b67a <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800b672:	69fb      	ldr	r3, [r7, #28]
 800b674:	69b9      	ldr	r1, [r7, #24]
 800b676:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b678:	4798      	blx	r3
}
 800b67a:	bf00      	nop
 800b67c:	3728      	adds	r7, #40	; 0x28
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}
 800b682:	bf00      	nop
 800b684:	24012588 	.word	0x24012588

0800b688 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b08a      	sub	sp, #40	; 0x28
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	60f8      	str	r0, [r7, #12]
 800b690:	60b9      	str	r1, [r7, #8]
 800b692:	607a      	str	r2, [r7, #4]
 800b694:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 800b696:	222c      	movs	r2, #44	; 0x2c
 800b698:	2100      	movs	r1, #0
 800b69a:	68f8      	ldr	r0, [r7, #12]
 800b69c:	f000 fda2 	bl	800c1e4 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	68ba      	ldr	r2, [r7, #8]
 800b6a4:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6aa:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b6b0:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	683a      	ldr	r2, [r7, #0]
 800b6bc:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b6be:	f3ef 8310 	mrs	r3, PRIMASK
 800b6c2:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b6c4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b6c6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b6c8:	b672      	cpsid	i
    return(int_posture);
 800b6ca:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800b6cc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	4a1c      	ldr	r2, [pc, #112]	; (800b744 <_tx_timer_create+0xbc>)
 800b6d2:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800b6d4:	4b1c      	ldr	r3, [pc, #112]	; (800b748 <_tx_timer_create+0xc0>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d109      	bne.n	800b6f0 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 800b6dc:	4a1b      	ldr	r2, [pc, #108]	; (800b74c <_tx_timer_create+0xc4>)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	68fa      	ldr	r2, [r7, #12]
 800b6ec:	629a      	str	r2, [r3, #40]	; 0x28
 800b6ee:	e011      	b.n	800b714 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 800b6f0:	4b16      	ldr	r3, [pc, #88]	; (800b74c <_tx_timer_create+0xc4>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 800b6f6:	6a3b      	ldr	r3, [r7, #32]
 800b6f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6fa:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 800b6fc:	6a3b      	ldr	r3, [r7, #32]
 800b6fe:	68fa      	ldr	r2, [r7, #12]
 800b700:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 800b702:	69fb      	ldr	r3, [r7, #28]
 800b704:	68fa      	ldr	r2, [r7, #12]
 800b706:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	69fa      	ldr	r2, [r7, #28]
 800b70c:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	6a3a      	ldr	r2, [r7, #32]
 800b712:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 800b714:	4b0c      	ldr	r3, [pc, #48]	; (800b748 <_tx_timer_create+0xc0>)
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	3301      	adds	r3, #1
 800b71a:	4a0b      	ldr	r2, [pc, #44]	; (800b748 <_tx_timer_create+0xc0>)
 800b71c:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 800b71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b720:	2b01      	cmp	r3, #1
 800b722:	d104      	bne.n	800b72e <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	3308      	adds	r3, #8
 800b728:	4618      	mov	r0, r3
 800b72a:	f000 f8af 	bl	800b88c <_tx_timer_system_activate>
 800b72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b730:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	f383 8810 	msr	PRIMASK, r3
}
 800b738:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b73a:	2300      	movs	r3, #0
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3728      	adds	r7, #40	; 0x28
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}
 800b744:	4154494d 	.word	0x4154494d
 800b748:	24012630 	.word	0x24012630
 800b74c:	2401262c 	.word	0x2401262c

0800b750 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b084      	sub	sp, #16
 800b754:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b756:	f3ef 8310 	mrs	r3, PRIMASK
 800b75a:	607b      	str	r3, [r7, #4]
    return(posture);
 800b75c:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800b75e:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b760:	b672      	cpsid	i
    return(int_posture);
 800b762:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800b764:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800b766:	4b09      	ldr	r3, [pc, #36]	; (800b78c <_tx_timer_expiration_process+0x3c>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	3301      	adds	r3, #1
 800b76c:	4a07      	ldr	r2, [pc, #28]	; (800b78c <_tx_timer_expiration_process+0x3c>)
 800b76e:	6013      	str	r3, [r2, #0]
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	f383 8810 	msr	PRIMASK, r3
}
 800b77a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800b77c:	4804      	ldr	r0, [pc, #16]	; (800b790 <_tx_timer_expiration_process+0x40>)
 800b77e:	f7ff fcdd 	bl	800b13c <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b782:	bf00      	nop
 800b784:	3710      	adds	r7, #16
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	24012588 	.word	0x24012588
 800b790:	24012638 	.word	0x24012638

0800b794 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800b794:	b590      	push	{r4, r7, lr}
 800b796:	b089      	sub	sp, #36	; 0x24
 800b798:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800b79a:	4b28      	ldr	r3, [pc, #160]	; (800b83c <_tx_timer_initialize+0xa8>)
 800b79c:	2200      	movs	r2, #0
 800b79e:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800b7a0:	4b27      	ldr	r3, [pc, #156]	; (800b840 <_tx_timer_initialize+0xac>)
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800b7a6:	4b27      	ldr	r3, [pc, #156]	; (800b844 <_tx_timer_initialize+0xb0>)
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800b7ac:	4b26      	ldr	r3, [pc, #152]	; (800b848 <_tx_timer_initialize+0xb4>)
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800b7b2:	4b26      	ldr	r3, [pc, #152]	; (800b84c <_tx_timer_initialize+0xb8>)
 800b7b4:	2200      	movs	r2, #0
 800b7b6:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800b7b8:	2280      	movs	r2, #128	; 0x80
 800b7ba:	2100      	movs	r1, #0
 800b7bc:	4824      	ldr	r0, [pc, #144]	; (800b850 <_tx_timer_initialize+0xbc>)
 800b7be:	f000 fd11 	bl	800c1e4 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800b7c2:	4b24      	ldr	r3, [pc, #144]	; (800b854 <_tx_timer_initialize+0xc0>)
 800b7c4:	4a22      	ldr	r2, [pc, #136]	; (800b850 <_tx_timer_initialize+0xbc>)
 800b7c6:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800b7c8:	4b23      	ldr	r3, [pc, #140]	; (800b858 <_tx_timer_initialize+0xc4>)
 800b7ca:	4a21      	ldr	r2, [pc, #132]	; (800b850 <_tx_timer_initialize+0xbc>)
 800b7cc:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800b7ce:	4b23      	ldr	r3, [pc, #140]	; (800b85c <_tx_timer_initialize+0xc8>)
 800b7d0:	4a23      	ldr	r2, [pc, #140]	; (800b860 <_tx_timer_initialize+0xcc>)
 800b7d2:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800b7d4:	4b21      	ldr	r3, [pc, #132]	; (800b85c <_tx_timer_initialize+0xc8>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	3304      	adds	r3, #4
 800b7da:	4a20      	ldr	r2, [pc, #128]	; (800b85c <_tx_timer_initialize+0xc8>)
 800b7dc:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800b7de:	4b21      	ldr	r3, [pc, #132]	; (800b864 <_tx_timer_initialize+0xd0>)
 800b7e0:	4a21      	ldr	r2, [pc, #132]	; (800b868 <_tx_timer_initialize+0xd4>)
 800b7e2:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800b7e4:	4b21      	ldr	r3, [pc, #132]	; (800b86c <_tx_timer_initialize+0xd8>)
 800b7e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b7ea:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800b7ec:	4b20      	ldr	r3, [pc, #128]	; (800b870 <_tx_timer_initialize+0xdc>)
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800b7f2:	4b1c      	ldr	r3, [pc, #112]	; (800b864 <_tx_timer_initialize+0xd0>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4a1d      	ldr	r2, [pc, #116]	; (800b86c <_tx_timer_initialize+0xd8>)
 800b7f8:	6812      	ldr	r2, [r2, #0]
 800b7fa:	491d      	ldr	r1, [pc, #116]	; (800b870 <_tx_timer_initialize+0xdc>)
 800b7fc:	6809      	ldr	r1, [r1, #0]
 800b7fe:	481c      	ldr	r0, [pc, #112]	; (800b870 <_tx_timer_initialize+0xdc>)
 800b800:	6800      	ldr	r0, [r0, #0]
 800b802:	2400      	movs	r4, #0
 800b804:	9405      	str	r4, [sp, #20]
 800b806:	2400      	movs	r4, #0
 800b808:	9404      	str	r4, [sp, #16]
 800b80a:	9003      	str	r0, [sp, #12]
 800b80c:	9102      	str	r1, [sp, #8]
 800b80e:	9201      	str	r2, [sp, #4]
 800b810:	9300      	str	r3, [sp, #0]
 800b812:	4b18      	ldr	r3, [pc, #96]	; (800b874 <_tx_timer_initialize+0xe0>)
 800b814:	4a18      	ldr	r2, [pc, #96]	; (800b878 <_tx_timer_initialize+0xe4>)
 800b816:	4919      	ldr	r1, [pc, #100]	; (800b87c <_tx_timer_initialize+0xe8>)
 800b818:	4819      	ldr	r0, [pc, #100]	; (800b880 <_tx_timer_initialize+0xec>)
 800b81a:	f7ff fad7 	bl	800adcc <_tx_thread_create>
 800b81e:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d1e5      	bne.n	800b7f2 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800b826:	4b17      	ldr	r3, [pc, #92]	; (800b884 <_tx_timer_initialize+0xf0>)
 800b828:	2200      	movs	r2, #0
 800b82a:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800b82c:	4b16      	ldr	r3, [pc, #88]	; (800b888 <_tx_timer_initialize+0xf4>)
 800b82e:	2200      	movs	r2, #0
 800b830:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800b832:	bf00      	nop
 800b834:	370c      	adds	r7, #12
 800b836:	46bd      	mov	sp, r7
 800b838:	bd90      	pop	{r4, r7, pc}
 800b83a:	bf00      	nop
 800b83c:	24012594 	.word	0x24012594
 800b840:	24012af4 	.word	0x24012af4
 800b844:	24012598 	.word	0x24012598
 800b848:	24012628 	.word	0x24012628
 800b84c:	24012634 	.word	0x24012634
 800b850:	2401259c 	.word	0x2401259c
 800b854:	2401261c 	.word	0x2401261c
 800b858:	24012624 	.word	0x24012624
 800b85c:	24012620 	.word	0x24012620
 800b860:	24012618 	.word	0x24012618
 800b864:	240126e8 	.word	0x240126e8
 800b868:	240126f4 	.word	0x240126f4
 800b86c:	240126ec 	.word	0x240126ec
 800b870:	240126f0 	.word	0x240126f0
 800b874:	4154494d 	.word	0x4154494d
 800b878:	0800b9c1 	.word	0x0800b9c1
 800b87c:	0800d4b4 	.word	0x0800d4b4
 800b880:	24012638 	.word	0x24012638
 800b884:	2401262c 	.word	0x2401262c
 800b888:	24012630 	.word	0x24012630

0800b88c <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b089      	sub	sp, #36	; 0x24
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d04a      	beq.n	800b936 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8a6:	d046      	beq.n	800b936 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	699b      	ldr	r3, [r3, #24]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d142      	bne.n	800b936 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	2b20      	cmp	r3, #32
 800b8b4:	d902      	bls.n	800b8bc <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800b8b6:	231f      	movs	r3, #31
 800b8b8:	61bb      	str	r3, [r7, #24]
 800b8ba:	e002      	b.n	800b8c2 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800b8bc:	697b      	ldr	r3, [r7, #20]
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800b8c2:	4b20      	ldr	r3, [pc, #128]	; (800b944 <_tx_timer_system_activate+0xb8>)
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	69bb      	ldr	r3, [r7, #24]
 800b8c8:	009b      	lsls	r3, r3, #2
 800b8ca:	4413      	add	r3, r2
 800b8cc:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800b8ce:	4b1e      	ldr	r3, [pc, #120]	; (800b948 <_tx_timer_system_activate+0xbc>)
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	69fa      	ldr	r2, [r7, #28]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d30b      	bcc.n	800b8f0 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800b8d8:	4b1b      	ldr	r3, [pc, #108]	; (800b948 <_tx_timer_system_activate+0xbc>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	69fa      	ldr	r2, [r7, #28]
 800b8de:	1ad3      	subs	r3, r2, r3
 800b8e0:	109b      	asrs	r3, r3, #2
 800b8e2:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800b8e4:	4b19      	ldr	r3, [pc, #100]	; (800b94c <_tx_timer_system_activate+0xc0>)
 800b8e6:	681a      	ldr	r2, [r3, #0]
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	4413      	add	r3, r2
 800b8ee:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800b8f0:	69fb      	ldr	r3, [r7, #28]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d109      	bne.n	800b90c <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	687a      	ldr	r2, [r7, #4]
 800b8fc:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800b904:	69fb      	ldr	r3, [r7, #28]
 800b906:	687a      	ldr	r2, [r7, #4]
 800b908:	601a      	str	r2, [r3, #0]
 800b90a:	e011      	b.n	800b930 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800b90c:	69fb      	ldr	r3, [r7, #28]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	695b      	ldr	r3, [r3, #20]
 800b916:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	687a      	ldr	r2, [r7, #4]
 800b91c:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	68fa      	ldr	r2, [r7, #12]
 800b928:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	68ba      	ldr	r2, [r7, #8]
 800b92e:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	69fa      	ldr	r2, [r7, #28]
 800b934:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800b936:	bf00      	nop
 800b938:	3724      	adds	r7, #36	; 0x24
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr
 800b942:	bf00      	nop
 800b944:	24012624 	.word	0x24012624
 800b948:	24012620 	.word	0x24012620
 800b94c:	2401261c 	.word	0x2401261c

0800b950 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800b950:	b480      	push	{r7}
 800b952:	b087      	sub	sp, #28
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	699b      	ldr	r3, [r3, #24]
 800b95c:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d026      	beq.n	800b9b2 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	691b      	ldr	r3, [r3, #16]
 800b968:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800b96a:	687a      	ldr	r2, [r7, #4]
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	429a      	cmp	r2, r3
 800b970:	d108      	bne.n	800b984 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d117      	bne.n	800b9ac <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	2200      	movs	r2, #0
 800b980:	601a      	str	r2, [r3, #0]
 800b982:	e013      	b.n	800b9ac <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	695b      	ldr	r3, [r3, #20]
 800b988:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	68fa      	ldr	r2, [r7, #12]
 800b98e:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	693a      	ldr	r2, [r7, #16]
 800b994:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800b996:	697b      	ldr	r3, [r7, #20]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	687a      	ldr	r2, [r7, #4]
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d105      	bne.n	800b9ac <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	697a      	ldr	r2, [r7, #20]
 800b9a4:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	693a      	ldr	r2, [r7, #16]
 800b9aa:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	619a      	str	r2, [r3, #24]
    }
}
 800b9b2:	bf00      	nop
 800b9b4:	371c      	adds	r7, #28
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr
	...

0800b9c0 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b098      	sub	sp, #96	; 0x60
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	4a73      	ldr	r2, [pc, #460]	; (800bb9c <_tx_timer_thread_entry+0x1dc>)
 800b9d0:	4293      	cmp	r3, r2
 800b9d2:	f040 80de 	bne.w	800bb92 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b9d6:	f3ef 8310 	mrs	r3, PRIMASK
 800b9da:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800b9dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800b9de:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800b9e0:	b672      	cpsid	i
    return(int_posture);
 800b9e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800b9e4:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800b9e6:	4b6e      	ldr	r3, [pc, #440]	; (800bba0 <_tx_timer_thread_entry+0x1e0>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d003      	beq.n	800b9fc <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f107 020c 	add.w	r2, r7, #12
 800b9fa:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800b9fc:	4b68      	ldr	r3, [pc, #416]	; (800bba0 <_tx_timer_thread_entry+0x1e0>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2200      	movs	r2, #0
 800ba02:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800ba04:	4b66      	ldr	r3, [pc, #408]	; (800bba0 <_tx_timer_thread_entry+0x1e0>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	3304      	adds	r3, #4
 800ba0a:	4a65      	ldr	r2, [pc, #404]	; (800bba0 <_tx_timer_thread_entry+0x1e0>)
 800ba0c:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800ba0e:	4b64      	ldr	r3, [pc, #400]	; (800bba0 <_tx_timer_thread_entry+0x1e0>)
 800ba10:	681a      	ldr	r2, [r3, #0]
 800ba12:	4b64      	ldr	r3, [pc, #400]	; (800bba4 <_tx_timer_thread_entry+0x1e4>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d103      	bne.n	800ba22 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800ba1a:	4b63      	ldr	r3, [pc, #396]	; (800bba8 <_tx_timer_thread_entry+0x1e8>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	4a60      	ldr	r2, [pc, #384]	; (800bba0 <_tx_timer_thread_entry+0x1e0>)
 800ba20:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800ba22:	4b62      	ldr	r3, [pc, #392]	; (800bbac <_tx_timer_thread_entry+0x1ec>)
 800ba24:	2200      	movs	r2, #0
 800ba26:	601a      	str	r2, [r3, #0]
 800ba28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba2a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ba2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba2e:	f383 8810 	msr	PRIMASK, r3
}
 800ba32:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ba34:	f3ef 8310 	mrs	r3, PRIMASK
 800ba38:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800ba3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800ba3c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800ba3e:	b672      	cpsid	i
    return(int_posture);
 800ba40:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800ba42:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800ba44:	e07f      	b.n	800bb46 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	691b      	ldr	r3, [r3, #16]
 800ba4e:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800ba50:	2300      	movs	r3, #0
 800ba52:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800ba54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ba56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba58:	429a      	cmp	r2, r3
 800ba5a:	d102      	bne.n	800ba62 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	60fb      	str	r3, [r7, #12]
 800ba60:	e00e      	b.n	800ba80 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800ba62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba64:	695b      	ldr	r3, [r3, #20]
 800ba66:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800ba68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ba6c:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800ba6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba72:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800ba74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba76:	f107 020c 	add.w	r2, r7, #12
 800ba7a:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800ba7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba7e:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800ba80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	2b20      	cmp	r3, #32
 800ba86:	d911      	bls.n	800baac <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800ba88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800ba90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba92:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800ba94:	2300      	movs	r3, #0
 800ba96:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800ba98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba9a:	f107 0208 	add.w	r2, r7, #8
 800ba9e:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800baa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baa2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800baa4:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800baa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baa8:	60bb      	str	r3, [r7, #8]
 800baaa:	e01a      	b.n	800bae2 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800baac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baae:	689b      	ldr	r3, [r3, #8]
 800bab0:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800bab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bab4:	68db      	ldr	r3, [r3, #12]
 800bab6:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800bab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baba:	685a      	ldr	r2, [r3, #4]
 800babc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800babe:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800bac0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d009      	beq.n	800badc <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800bac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800baca:	f107 0208 	add.w	r2, r7, #8
 800bace:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800bad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bad2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bad4:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800bad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bad8:	60bb      	str	r3, [r7, #8]
 800bada:	e002      	b.n	800bae2 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800badc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bade:	2200      	movs	r2, #0
 800bae0:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800bae2:	4a33      	ldr	r2, [pc, #204]	; (800bbb0 <_tx_timer_thread_entry+0x1f0>)
 800bae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bae6:	6013      	str	r3, [r2, #0]
 800bae8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800baea:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800baec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baee:	f383 8810 	msr	PRIMASK, r3
}
 800baf2:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800baf4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d002      	beq.n	800bb00 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800bafa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bafc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800bafe:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bb00:	f3ef 8310 	mrs	r3, PRIMASK
 800bb04:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800bb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800bb08:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800bb0a:	b672      	cpsid	i
    return(int_posture);
 800bb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800bb0e:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800bb10:	4b27      	ldr	r3, [pc, #156]	; (800bbb0 <_tx_timer_thread_entry+0x1f0>)
 800bb12:	2200      	movs	r2, #0
 800bb14:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800bb16:	68bb      	ldr	r3, [r7, #8]
 800bb18:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d105      	bne.n	800bb2a <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800bb1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb20:	2200      	movs	r2, #0
 800bb22:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800bb24:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800bb26:	f7ff feb1 	bl	800b88c <_tx_timer_system_activate>
 800bb2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb2c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb2e:	69bb      	ldr	r3, [r7, #24]
 800bb30:	f383 8810 	msr	PRIMASK, r3
}
 800bb34:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bb36:	f3ef 8310 	mrs	r3, PRIMASK
 800bb3a:	623b      	str	r3, [r7, #32]
    return(posture);
 800bb3c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800bb3e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bb40:	b672      	cpsid	i
    return(int_posture);
 800bb42:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800bb44:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	f47f af7c 	bne.w	800ba46 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800bb4e:	4b17      	ldr	r3, [pc, #92]	; (800bbac <_tx_timer_thread_entry+0x1ec>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d116      	bne.n	800bb84 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800bb56:	4b17      	ldr	r3, [pc, #92]	; (800bbb4 <_tx_timer_thread_entry+0x1f4>)
 800bb58:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800bb5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb5c:	2203      	movs	r2, #3
 800bb5e:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bb60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb62:	2201      	movs	r2, #1
 800bb64:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800bb66:	4b14      	ldr	r3, [pc, #80]	; (800bbb8 <_tx_timer_thread_entry+0x1f8>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	4a12      	ldr	r2, [pc, #72]	; (800bbb8 <_tx_timer_thread_entry+0x1f8>)
 800bb6e:	6013      	str	r3, [r2, #0]
 800bb70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb72:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	f383 8810 	msr	PRIMASK, r3
}
 800bb7a:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800bb7c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bb7e:	f7ff fbdd 	bl	800b33c <_tx_thread_system_suspend>
 800bb82:	e728      	b.n	800b9d6 <_tx_timer_thread_entry+0x16>
 800bb84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb86:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	f383 8810 	msr	PRIMASK, r3
}
 800bb8e:	bf00      	nop
            TX_DISABLE
 800bb90:	e721      	b.n	800b9d6 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800bb92:	bf00      	nop
 800bb94:	3760      	adds	r7, #96	; 0x60
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	4154494d 	.word	0x4154494d
 800bba0:	24012624 	.word	0x24012624
 800bba4:	24012620 	.word	0x24012620
 800bba8:	2401261c 	.word	0x2401261c
 800bbac:	24012628 	.word	0x24012628
 800bbb0:	24012634 	.word	0x24012634
 800bbb4:	24012638 	.word	0x24012638
 800bbb8:	24012588 	.word	0x24012588

0800bbbc <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b08a      	sub	sp, #40	; 0x28
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	60b9      	str	r1, [r7, #8]
 800bbc6:	607a      	str	r2, [r7, #4]
 800bbc8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d102      	bne.n	800bbda <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bbd4:	2302      	movs	r3, #2
 800bbd6:	627b      	str	r3, [r7, #36]	; 0x24
 800bbd8:	e029      	b.n	800bc2e <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	4a2d      	ldr	r2, [pc, #180]	; (800bc94 <_txe_byte_allocate+0xd8>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d002      	beq.n	800bbea <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bbe4:	2302      	movs	r3, #2
 800bbe6:	627b      	str	r3, [r7, #36]	; 0x24
 800bbe8:	e021      	b.n	800bc2e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800bbea:	68bb      	ldr	r3, [r7, #8]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d102      	bne.n	800bbf6 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800bbf0:	2303      	movs	r3, #3
 800bbf2:	627b      	str	r3, [r7, #36]	; 0x24
 800bbf4:	e01b      	b.n	800bc2e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d102      	bne.n	800bc02 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800bbfc:	2305      	movs	r3, #5
 800bbfe:	627b      	str	r3, [r7, #36]	; 0x24
 800bc00:	e015      	b.n	800bc2e <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	69db      	ldr	r3, [r3, #28]
 800bc06:	687a      	ldr	r2, [r7, #4]
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d902      	bls.n	800bc12 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800bc0c:	2305      	movs	r3, #5
 800bc0e:	627b      	str	r3, [r7, #36]	; 0x24
 800bc10:	e00d      	b.n	800bc2e <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d00a      	beq.n	800bc2e <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bc18:	f3ef 8305 	mrs	r3, IPSR
 800bc1c:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800bc1e:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bc20:	4b1d      	ldr	r3, [pc, #116]	; (800bc98 <_txe_byte_allocate+0xdc>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4313      	orrs	r3, r2
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d001      	beq.n	800bc2e <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800bc2a:	2304      	movs	r3, #4
 800bc2c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800bc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d108      	bne.n	800bc46 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800bc34:	4b19      	ldr	r3, [pc, #100]	; (800bc9c <_txe_byte_allocate+0xe0>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800bc3a:	6a3b      	ldr	r3, [r7, #32]
 800bc3c:	4a18      	ldr	r2, [pc, #96]	; (800bca0 <_txe_byte_allocate+0xe4>)
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	d101      	bne.n	800bc46 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800bc42:	2313      	movs	r3, #19
 800bc44:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800bc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d114      	bne.n	800bc76 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bc4c:	f3ef 8305 	mrs	r3, IPSR
 800bc50:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800bc52:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bc54:	4b10      	ldr	r3, [pc, #64]	; (800bc98 <_txe_byte_allocate+0xdc>)
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d00b      	beq.n	800bc76 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bc5e:	f3ef 8305 	mrs	r3, IPSR
 800bc62:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800bc64:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800bc66:	4b0c      	ldr	r3, [pc, #48]	; (800bc98 <_txe_byte_allocate+0xdc>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800bc70:	d201      	bcs.n	800bc76 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800bc72:	2313      	movs	r3, #19
 800bc74:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bc76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d106      	bne.n	800bc8a <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	687a      	ldr	r2, [r7, #4]
 800bc80:	68b9      	ldr	r1, [r7, #8]
 800bc82:	68f8      	ldr	r0, [r7, #12]
 800bc84:	f7fe fca4 	bl	800a5d0 <_tx_byte_allocate>
 800bc88:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 800bc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3728      	adds	r7, #40	; 0x28
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	42595445 	.word	0x42595445
 800bc98:	24000014 	.word	0x24000014
 800bc9c:	240124f0 	.word	0x240124f0
 800bca0:	24012638 	.word	0x24012638

0800bca4 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b092      	sub	sp, #72	; 0x48
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	60b9      	str	r1, [r7, #8]
 800bcae:	607a      	str	r2, [r7, #4]
 800bcb0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d102      	bne.n	800bcc2 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bcbc:	2302      	movs	r3, #2
 800bcbe:	647b      	str	r3, [r7, #68]	; 0x44
 800bcc0:	e075      	b.n	800bdae <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800bcc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bcc4:	2b34      	cmp	r3, #52	; 0x34
 800bcc6:	d002      	beq.n	800bcce <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800bcc8:	2302      	movs	r3, #2
 800bcca:	647b      	str	r3, [r7, #68]	; 0x44
 800bccc:	e06f      	b.n	800bdae <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bcce:	f3ef 8310 	mrs	r3, PRIMASK
 800bcd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800bcd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800bcd6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800bcd8:	b672      	cpsid	i
    return(int_posture);
 800bcda:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800bcdc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800bcde:	4b3b      	ldr	r3, [pc, #236]	; (800bdcc <_txe_byte_pool_create+0x128>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	3301      	adds	r3, #1
 800bce4:	4a39      	ldr	r2, [pc, #228]	; (800bdcc <_txe_byte_pool_create+0x128>)
 800bce6:	6013      	str	r3, [r2, #0]
 800bce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcea:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bcec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcee:	f383 8810 	msr	PRIMASK, r3
}
 800bcf2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800bcf4:	4b36      	ldr	r3, [pc, #216]	; (800bdd0 <_txe_byte_pool_create+0x12c>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	643b      	str	r3, [r7, #64]	; 0x40
 800bcfe:	e009      	b.n	800bd14 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800bd00:	68fa      	ldr	r2, [r7, #12]
 800bd02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd04:	429a      	cmp	r2, r3
 800bd06:	d00b      	beq.n	800bd20 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800bd08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800bd0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd10:	3301      	adds	r3, #1
 800bd12:	643b      	str	r3, [r7, #64]	; 0x40
 800bd14:	4b2f      	ldr	r3, [pc, #188]	; (800bdd4 <_txe_byte_pool_create+0x130>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d3f0      	bcc.n	800bd00 <_txe_byte_pool_create+0x5c>
 800bd1e:	e000      	b.n	800bd22 <_txe_byte_pool_create+0x7e>
                break;
 800bd20:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bd22:	f3ef 8310 	mrs	r3, PRIMASK
 800bd26:	623b      	str	r3, [r7, #32]
    return(posture);
 800bd28:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800bd2a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bd2c:	b672      	cpsid	i
    return(int_posture);
 800bd2e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800bd30:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800bd32:	4b26      	ldr	r3, [pc, #152]	; (800bdcc <_txe_byte_pool_create+0x128>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	3b01      	subs	r3, #1
 800bd38:	4a24      	ldr	r2, [pc, #144]	; (800bdcc <_txe_byte_pool_create+0x128>)
 800bd3a:	6013      	str	r3, [r2, #0]
 800bd3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd3e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd42:	f383 8810 	msr	PRIMASK, r3
}
 800bd46:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800bd48:	f7ff f9be 	bl	800b0c8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800bd4c:	68fa      	ldr	r2, [r7, #12]
 800bd4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d102      	bne.n	800bd5a <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800bd54:	2302      	movs	r3, #2
 800bd56:	647b      	str	r3, [r7, #68]	; 0x44
 800bd58:	e029      	b.n	800bdae <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d102      	bne.n	800bd66 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800bd60:	2303      	movs	r3, #3
 800bd62:	647b      	str	r3, [r7, #68]	; 0x44
 800bd64:	e023      	b.n	800bdae <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	2b63      	cmp	r3, #99	; 0x63
 800bd6a:	d802      	bhi.n	800bd72 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800bd6c:	2305      	movs	r3, #5
 800bd6e:	647b      	str	r3, [r7, #68]	; 0x44
 800bd70:	e01d      	b.n	800bdae <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800bd72:	4b19      	ldr	r3, [pc, #100]	; (800bdd8 <_txe_byte_pool_create+0x134>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800bd78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd7a:	4a18      	ldr	r2, [pc, #96]	; (800bddc <_txe_byte_pool_create+0x138>)
 800bd7c:	4293      	cmp	r3, r2
 800bd7e:	d101      	bne.n	800bd84 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800bd80:	2313      	movs	r3, #19
 800bd82:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bd84:	f3ef 8305 	mrs	r3, IPSR
 800bd88:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800bd8a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800bd8c:	4b14      	ldr	r3, [pc, #80]	; (800bde0 <_txe_byte_pool_create+0x13c>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	4313      	orrs	r3, r2
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d00b      	beq.n	800bdae <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bd96:	f3ef 8305 	mrs	r3, IPSR
 800bd9a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800bd9c:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800bd9e:	4b10      	ldr	r3, [pc, #64]	; (800bde0 <_txe_byte_pool_create+0x13c>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	4313      	orrs	r3, r2
 800bda4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800bda8:	d201      	bcs.n	800bdae <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800bdaa:	2313      	movs	r3, #19
 800bdac:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bdae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d106      	bne.n	800bdc2 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	687a      	ldr	r2, [r7, #4]
 800bdb8:	68b9      	ldr	r1, [r7, #8]
 800bdba:	68f8      	ldr	r0, [r7, #12]
 800bdbc:	f7fe fd4a 	bl	800a854 <_tx_byte_pool_create>
 800bdc0:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800bdc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3748      	adds	r7, #72	; 0x48
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	24012588 	.word	0x24012588
 800bdd0:	240124e0 	.word	0x240124e0
 800bdd4:	240124e4 	.word	0x240124e4
 800bdd8:	240124f0 	.word	0x240124f0
 800bddc:	24012638 	.word	0x24012638
 800bde0:	24000014 	.word	0x24000014

0800bde4 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b092      	sub	sp, #72	; 0x48
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	607a      	str	r2, [r7, #4]
 800bdf0:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d102      	bne.n	800be02 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800bdfc:	230c      	movs	r3, #12
 800bdfe:	647b      	str	r3, [r7, #68]	; 0x44
 800be00:	e054      	b.n	800beac <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	2b1c      	cmp	r3, #28
 800be06:	d002      	beq.n	800be0e <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800be08:	230c      	movs	r3, #12
 800be0a:	647b      	str	r3, [r7, #68]	; 0x44
 800be0c:	e04e      	b.n	800beac <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be0e:	f3ef 8310 	mrs	r3, PRIMASK
 800be12:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800be14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800be16:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800be18:	b672      	cpsid	i
    return(int_posture);
 800be1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800be1c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800be1e:	4b36      	ldr	r3, [pc, #216]	; (800bef8 <_txe_semaphore_create+0x114>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	3301      	adds	r3, #1
 800be24:	4a34      	ldr	r2, [pc, #208]	; (800bef8 <_txe_semaphore_create+0x114>)
 800be26:	6013      	str	r3, [r2, #0]
 800be28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be2e:	f383 8810 	msr	PRIMASK, r3
}
 800be32:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 800be34:	4b31      	ldr	r3, [pc, #196]	; (800befc <_txe_semaphore_create+0x118>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800be3a:	2300      	movs	r3, #0
 800be3c:	643b      	str	r3, [r7, #64]	; 0x40
 800be3e:	e009      	b.n	800be54 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 800be40:	68fa      	ldr	r2, [r7, #12]
 800be42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be44:	429a      	cmp	r2, r3
 800be46:	d00b      	beq.n	800be60 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 800be48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be4a:	695b      	ldr	r3, [r3, #20]
 800be4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 800be4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be50:	3301      	adds	r3, #1
 800be52:	643b      	str	r3, [r7, #64]	; 0x40
 800be54:	4b2a      	ldr	r3, [pc, #168]	; (800bf00 <_txe_semaphore_create+0x11c>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d3f0      	bcc.n	800be40 <_txe_semaphore_create+0x5c>
 800be5e:	e000      	b.n	800be62 <_txe_semaphore_create+0x7e>
                break;
 800be60:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800be62:	f3ef 8310 	mrs	r3, PRIMASK
 800be66:	623b      	str	r3, [r7, #32]
    return(posture);
 800be68:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800be6a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800be6c:	b672      	cpsid	i
    return(int_posture);
 800be6e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800be70:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800be72:	4b21      	ldr	r3, [pc, #132]	; (800bef8 <_txe_semaphore_create+0x114>)
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	3b01      	subs	r3, #1
 800be78:	4a1f      	ldr	r2, [pc, #124]	; (800bef8 <_txe_semaphore_create+0x114>)
 800be7a:	6013      	str	r3, [r2, #0]
 800be7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be7e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be82:	f383 8810 	msr	PRIMASK, r3
}
 800be86:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800be88:	f7ff f91e 	bl	800b0c8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 800be8c:	68fa      	ldr	r2, [r7, #12]
 800be8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be90:	429a      	cmp	r2, r3
 800be92:	d102      	bne.n	800be9a <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 800be94:	230c      	movs	r3, #12
 800be96:	647b      	str	r3, [r7, #68]	; 0x44
 800be98:	e008      	b.n	800beac <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800be9a:	4b1a      	ldr	r3, [pc, #104]	; (800bf04 <_txe_semaphore_create+0x120>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800bea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bea2:	4a19      	ldr	r2, [pc, #100]	; (800bf08 <_txe_semaphore_create+0x124>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d101      	bne.n	800beac <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800bea8:	2313      	movs	r3, #19
 800beaa:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800beac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d114      	bne.n	800bedc <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800beb2:	f3ef 8305 	mrs	r3, IPSR
 800beb6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800beb8:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800beba:	4b14      	ldr	r3, [pc, #80]	; (800bf0c <_txe_semaphore_create+0x128>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	4313      	orrs	r3, r2
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d00b      	beq.n	800bedc <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bec4:	f3ef 8305 	mrs	r3, IPSR
 800bec8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800beca:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800becc:	4b0f      	ldr	r3, [pc, #60]	; (800bf0c <_txe_semaphore_create+0x128>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	4313      	orrs	r3, r2
 800bed2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800bed6:	d201      	bcs.n	800bedc <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800bed8:	2313      	movs	r3, #19
 800beda:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800bedc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d105      	bne.n	800beee <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	68b9      	ldr	r1, [r7, #8]
 800bee6:	68f8      	ldr	r0, [r7, #12]
 800bee8:	f7fe fec6 	bl	800ac78 <_tx_semaphore_create>
 800beec:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800beee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	3748      	adds	r7, #72	; 0x48
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}
 800bef8:	24012588 	.word	0x24012588
 800befc:	240124b8 	.word	0x240124b8
 800bf00:	240124bc 	.word	0x240124bc
 800bf04:	240124f0 	.word	0x240124f0
 800bf08:	24012638 	.word	0x24012638
 800bf0c:	24000014 	.word	0x24000014

0800bf10 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 800bf10:	b580      	push	{r7, lr}
 800bf12:	b084      	sub	sp, #16
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d102      	bne.n	800bf24 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800bf1e:	230c      	movs	r3, #12
 800bf20:	60fb      	str	r3, [r7, #12]
 800bf22:	e00b      	b.n	800bf3c <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4a07      	ldr	r2, [pc, #28]	; (800bf48 <_txe_semaphore_put+0x38>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d002      	beq.n	800bf34 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 800bf2e:	230c      	movs	r3, #12
 800bf30:	60fb      	str	r3, [r7, #12]
 800bf32:	e003      	b.n	800bf3c <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	f7fe fef1 	bl	800ad1c <_tx_semaphore_put>
 800bf3a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	53454d41 	.word	0x53454d41

0800bf4c <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b09a      	sub	sp, #104	; 0x68
 800bf50:	af06      	add	r7, sp, #24
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	607a      	str	r2, [r7, #4]
 800bf58:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d102      	bne.n	800bf6a <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800bf64:	230e      	movs	r3, #14
 800bf66:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf68:	e0bb      	b.n	800c0e2 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800bf6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf6c:	2bb0      	cmp	r3, #176	; 0xb0
 800bf6e:	d002      	beq.n	800bf76 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800bf70:	230e      	movs	r3, #14
 800bf72:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bf74:	e0b5      	b.n	800c0e2 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bf76:	f3ef 8310 	mrs	r3, PRIMASK
 800bf7a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800bf7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800bf7e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800bf80:	b672      	cpsid	i
    return(int_posture);
 800bf82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800bf84:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800bf86:	4b64      	ldr	r3, [pc, #400]	; (800c118 <_txe_thread_create+0x1cc>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	4a62      	ldr	r2, [pc, #392]	; (800c118 <_txe_thread_create+0x1cc>)
 800bf8e:	6013      	str	r3, [r2, #0]
 800bf90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf92:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bf94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf96:	f383 8810 	msr	PRIMASK, r3
}
 800bf9a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800bfa0:	4b5e      	ldr	r3, [pc, #376]	; (800c11c <_txe_thread_create+0x1d0>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800bfa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfa8:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800bfaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bfac:	3b01      	subs	r3, #1
 800bfae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfb0:	4413      	add	r3, r2
 800bfb2:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800bfb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb6:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800bfb8:	2300      	movs	r3, #0
 800bfba:	647b      	str	r3, [r7, #68]	; 0x44
 800bfbc:	e02b      	b.n	800c016 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800bfbe:	68fa      	ldr	r2, [r7, #12]
 800bfc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d101      	bne.n	800bfca <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800bfca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d028      	beq.n	800c022 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800bfd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfd2:	68db      	ldr	r3, [r3, #12]
 800bfd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	d308      	bcc.n	800bfec <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800bfda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfdc:	691b      	ldr	r3, [r3, #16]
 800bfde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	d203      	bcs.n	800bfec <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800bfe8:	2301      	movs	r3, #1
 800bfea:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800bfec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bfee:	68db      	ldr	r3, [r3, #12]
 800bff0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d308      	bcc.n	800c008 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800bff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bff8:	691b      	ldr	r3, [r3, #16]
 800bffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bffc:	429a      	cmp	r2, r3
 800bffe:	d203      	bcs.n	800c008 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800c000:	2300      	movs	r3, #0
 800c002:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800c004:	2301      	movs	r3, #1
 800c006:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800c008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c00a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c00e:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800c010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c012:	3301      	adds	r3, #1
 800c014:	647b      	str	r3, [r7, #68]	; 0x44
 800c016:	4b42      	ldr	r3, [pc, #264]	; (800c120 <_txe_thread_create+0x1d4>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d3ce      	bcc.n	800bfbe <_txe_thread_create+0x72>
 800c020:	e000      	b.n	800c024 <_txe_thread_create+0xd8>
                break;
 800c022:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c024:	f3ef 8310 	mrs	r3, PRIMASK
 800c028:	61fb      	str	r3, [r7, #28]
    return(posture);
 800c02a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800c02c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c02e:	b672      	cpsid	i
    return(int_posture);
 800c030:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800c032:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800c034:	4b38      	ldr	r3, [pc, #224]	; (800c118 <_txe_thread_create+0x1cc>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	3b01      	subs	r3, #1
 800c03a:	4a37      	ldr	r2, [pc, #220]	; (800c118 <_txe_thread_create+0x1cc>)
 800c03c:	6013      	str	r3, [r2, #0]
 800c03e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c040:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c042:	6a3b      	ldr	r3, [r7, #32]
 800c044:	f383 8810 	msr	PRIMASK, r3
}
 800c048:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800c04a:	f7ff f83d 	bl	800b0c8 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800c04e:	68fa      	ldr	r2, [r7, #12]
 800c050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c052:	429a      	cmp	r2, r3
 800c054:	d102      	bne.n	800c05c <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800c056:	230e      	movs	r3, #14
 800c058:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c05a:	e042      	b.n	800c0e2 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800c05c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d102      	bne.n	800c068 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800c062:	2303      	movs	r3, #3
 800c064:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c066:	e03c      	b.n	800c0e2 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d102      	bne.n	800c074 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800c06e:	2303      	movs	r3, #3
 800c070:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c072:	e036      	b.n	800c0e2 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800c074:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c076:	2bc7      	cmp	r3, #199	; 0xc7
 800c078:	d802      	bhi.n	800c080 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800c07a:	2305      	movs	r3, #5
 800c07c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c07e:	e030      	b.n	800c0e2 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800c080:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c082:	2b1f      	cmp	r3, #31
 800c084:	d902      	bls.n	800c08c <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800c086:	230f      	movs	r3, #15
 800c088:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c08a:	e02a      	b.n	800c0e2 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800c08c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c08e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c090:	429a      	cmp	r2, r3
 800c092:	d902      	bls.n	800c09a <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800c094:	2318      	movs	r3, #24
 800c096:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c098:	e023      	b.n	800c0e2 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800c09a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	d902      	bls.n	800c0a6 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800c0a0:	2310      	movs	r3, #16
 800c0a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c0a4:	e01d      	b.n	800c0e2 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800c0a6:	4b1f      	ldr	r3, [pc, #124]	; (800c124 <_txe_thread_create+0x1d8>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800c0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ae:	4a1e      	ldr	r2, [pc, #120]	; (800c128 <_txe_thread_create+0x1dc>)
 800c0b0:	4293      	cmp	r3, r2
 800c0b2:	d101      	bne.n	800c0b8 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800c0b4:	2313      	movs	r3, #19
 800c0b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c0b8:	f3ef 8305 	mrs	r3, IPSR
 800c0bc:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c0be:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800c0c0:	4b1a      	ldr	r3, [pc, #104]	; (800c12c <_txe_thread_create+0x1e0>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	4313      	orrs	r3, r2
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d00b      	beq.n	800c0e2 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c0ca:	f3ef 8305 	mrs	r3, IPSR
 800c0ce:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800c0d0:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800c0d2:	4b16      	ldr	r3, [pc, #88]	; (800c12c <_txe_thread_create+0x1e0>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4313      	orrs	r3, r2
 800c0d8:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800c0dc:	d201      	bcs.n	800c0e2 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800c0de:	2313      	movs	r3, #19
 800c0e0:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800c0e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d112      	bne.n	800c10e <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800c0e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c0ea:	9305      	str	r3, [sp, #20]
 800c0ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c0ee:	9304      	str	r3, [sp, #16]
 800c0f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0f2:	9303      	str	r3, [sp, #12]
 800c0f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0f6:	9302      	str	r3, [sp, #8]
 800c0f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c0fa:	9301      	str	r3, [sp, #4]
 800c0fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c0fe:	9300      	str	r3, [sp, #0]
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	68b9      	ldr	r1, [r7, #8]
 800c106:	68f8      	ldr	r0, [r7, #12]
 800c108:	f7fe fe60 	bl	800adcc <_tx_thread_create>
 800c10c:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800c10e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800c110:	4618      	mov	r0, r3
 800c112:	3750      	adds	r7, #80	; 0x50
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}
 800c118:	24012588 	.word	0x24012588
 800c11c:	240124f8 	.word	0x240124f8
 800c120:	240124fc 	.word	0x240124fc
 800c124:	240124f0 	.word	0x240124f0
 800c128:	24012638 	.word	0x24012638
 800c12c:	24000014 	.word	0x24000014

0800c130 <__assert_func>:
 800c130:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c132:	4614      	mov	r4, r2
 800c134:	461a      	mov	r2, r3
 800c136:	4b09      	ldr	r3, [pc, #36]	; (800c15c <__assert_func+0x2c>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	4605      	mov	r5, r0
 800c13c:	68d8      	ldr	r0, [r3, #12]
 800c13e:	b14c      	cbz	r4, 800c154 <__assert_func+0x24>
 800c140:	4b07      	ldr	r3, [pc, #28]	; (800c160 <__assert_func+0x30>)
 800c142:	9100      	str	r1, [sp, #0]
 800c144:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c148:	4906      	ldr	r1, [pc, #24]	; (800c164 <__assert_func+0x34>)
 800c14a:	462b      	mov	r3, r5
 800c14c:	f000 f814 	bl	800c178 <fiprintf>
 800c150:	f000 fc8c 	bl	800ca6c <abort>
 800c154:	4b04      	ldr	r3, [pc, #16]	; (800c168 <__assert_func+0x38>)
 800c156:	461c      	mov	r4, r3
 800c158:	e7f3      	b.n	800c142 <__assert_func+0x12>
 800c15a:	bf00      	nop
 800c15c:	24000018 	.word	0x24000018
 800c160:	0800d51c 	.word	0x0800d51c
 800c164:	0800d529 	.word	0x0800d529
 800c168:	0800d557 	.word	0x0800d557

0800c16c <__errno>:
 800c16c:	4b01      	ldr	r3, [pc, #4]	; (800c174 <__errno+0x8>)
 800c16e:	6818      	ldr	r0, [r3, #0]
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop
 800c174:	24000018 	.word	0x24000018

0800c178 <fiprintf>:
 800c178:	b40e      	push	{r1, r2, r3}
 800c17a:	b503      	push	{r0, r1, lr}
 800c17c:	4601      	mov	r1, r0
 800c17e:	ab03      	add	r3, sp, #12
 800c180:	4805      	ldr	r0, [pc, #20]	; (800c198 <fiprintf+0x20>)
 800c182:	f853 2b04 	ldr.w	r2, [r3], #4
 800c186:	6800      	ldr	r0, [r0, #0]
 800c188:	9301      	str	r3, [sp, #4]
 800c18a:	f000 f85d 	bl	800c248 <_vfiprintf_r>
 800c18e:	b002      	add	sp, #8
 800c190:	f85d eb04 	ldr.w	lr, [sp], #4
 800c194:	b003      	add	sp, #12
 800c196:	4770      	bx	lr
 800c198:	24000018 	.word	0x24000018

0800c19c <__libc_init_array>:
 800c19c:	b570      	push	{r4, r5, r6, lr}
 800c19e:	4d0d      	ldr	r5, [pc, #52]	; (800c1d4 <__libc_init_array+0x38>)
 800c1a0:	4c0d      	ldr	r4, [pc, #52]	; (800c1d8 <__libc_init_array+0x3c>)
 800c1a2:	1b64      	subs	r4, r4, r5
 800c1a4:	10a4      	asrs	r4, r4, #2
 800c1a6:	2600      	movs	r6, #0
 800c1a8:	42a6      	cmp	r6, r4
 800c1aa:	d109      	bne.n	800c1c0 <__libc_init_array+0x24>
 800c1ac:	4d0b      	ldr	r5, [pc, #44]	; (800c1dc <__libc_init_array+0x40>)
 800c1ae:	4c0c      	ldr	r4, [pc, #48]	; (800c1e0 <__libc_init_array+0x44>)
 800c1b0:	f001 f870 	bl	800d294 <_init>
 800c1b4:	1b64      	subs	r4, r4, r5
 800c1b6:	10a4      	asrs	r4, r4, #2
 800c1b8:	2600      	movs	r6, #0
 800c1ba:	42a6      	cmp	r6, r4
 800c1bc:	d105      	bne.n	800c1ca <__libc_init_array+0x2e>
 800c1be:	bd70      	pop	{r4, r5, r6, pc}
 800c1c0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1c4:	4798      	blx	r3
 800c1c6:	3601      	adds	r6, #1
 800c1c8:	e7ee      	b.n	800c1a8 <__libc_init_array+0xc>
 800c1ca:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1ce:	4798      	blx	r3
 800c1d0:	3601      	adds	r6, #1
 800c1d2:	e7f2      	b.n	800c1ba <__libc_init_array+0x1e>
 800c1d4:	0800d5f8 	.word	0x0800d5f8
 800c1d8:	0800d5f8 	.word	0x0800d5f8
 800c1dc:	0800d5f8 	.word	0x0800d5f8
 800c1e0:	0800d5fc 	.word	0x0800d5fc

0800c1e4 <memset>:
 800c1e4:	4402      	add	r2, r0
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	4293      	cmp	r3, r2
 800c1ea:	d100      	bne.n	800c1ee <memset+0xa>
 800c1ec:	4770      	bx	lr
 800c1ee:	f803 1b01 	strb.w	r1, [r3], #1
 800c1f2:	e7f9      	b.n	800c1e8 <memset+0x4>

0800c1f4 <__sfputc_r>:
 800c1f4:	6893      	ldr	r3, [r2, #8]
 800c1f6:	3b01      	subs	r3, #1
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	b410      	push	{r4}
 800c1fc:	6093      	str	r3, [r2, #8]
 800c1fe:	da08      	bge.n	800c212 <__sfputc_r+0x1e>
 800c200:	6994      	ldr	r4, [r2, #24]
 800c202:	42a3      	cmp	r3, r4
 800c204:	db01      	blt.n	800c20a <__sfputc_r+0x16>
 800c206:	290a      	cmp	r1, #10
 800c208:	d103      	bne.n	800c212 <__sfputc_r+0x1e>
 800c20a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c20e:	f000 bb6d 	b.w	800c8ec <__swbuf_r>
 800c212:	6813      	ldr	r3, [r2, #0]
 800c214:	1c58      	adds	r0, r3, #1
 800c216:	6010      	str	r0, [r2, #0]
 800c218:	7019      	strb	r1, [r3, #0]
 800c21a:	4608      	mov	r0, r1
 800c21c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c220:	4770      	bx	lr

0800c222 <__sfputs_r>:
 800c222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c224:	4606      	mov	r6, r0
 800c226:	460f      	mov	r7, r1
 800c228:	4614      	mov	r4, r2
 800c22a:	18d5      	adds	r5, r2, r3
 800c22c:	42ac      	cmp	r4, r5
 800c22e:	d101      	bne.n	800c234 <__sfputs_r+0x12>
 800c230:	2000      	movs	r0, #0
 800c232:	e007      	b.n	800c244 <__sfputs_r+0x22>
 800c234:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c238:	463a      	mov	r2, r7
 800c23a:	4630      	mov	r0, r6
 800c23c:	f7ff ffda 	bl	800c1f4 <__sfputc_r>
 800c240:	1c43      	adds	r3, r0, #1
 800c242:	d1f3      	bne.n	800c22c <__sfputs_r+0xa>
 800c244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c248 <_vfiprintf_r>:
 800c248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c24c:	460d      	mov	r5, r1
 800c24e:	b09d      	sub	sp, #116	; 0x74
 800c250:	4614      	mov	r4, r2
 800c252:	4698      	mov	r8, r3
 800c254:	4606      	mov	r6, r0
 800c256:	b118      	cbz	r0, 800c260 <_vfiprintf_r+0x18>
 800c258:	6983      	ldr	r3, [r0, #24]
 800c25a:	b90b      	cbnz	r3, 800c260 <_vfiprintf_r+0x18>
 800c25c:	f000 fd28 	bl	800ccb0 <__sinit>
 800c260:	4b89      	ldr	r3, [pc, #548]	; (800c488 <_vfiprintf_r+0x240>)
 800c262:	429d      	cmp	r5, r3
 800c264:	d11b      	bne.n	800c29e <_vfiprintf_r+0x56>
 800c266:	6875      	ldr	r5, [r6, #4]
 800c268:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c26a:	07d9      	lsls	r1, r3, #31
 800c26c:	d405      	bmi.n	800c27a <_vfiprintf_r+0x32>
 800c26e:	89ab      	ldrh	r3, [r5, #12]
 800c270:	059a      	lsls	r2, r3, #22
 800c272:	d402      	bmi.n	800c27a <_vfiprintf_r+0x32>
 800c274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c276:	f000 fdb9 	bl	800cdec <__retarget_lock_acquire_recursive>
 800c27a:	89ab      	ldrh	r3, [r5, #12]
 800c27c:	071b      	lsls	r3, r3, #28
 800c27e:	d501      	bpl.n	800c284 <_vfiprintf_r+0x3c>
 800c280:	692b      	ldr	r3, [r5, #16]
 800c282:	b9eb      	cbnz	r3, 800c2c0 <_vfiprintf_r+0x78>
 800c284:	4629      	mov	r1, r5
 800c286:	4630      	mov	r0, r6
 800c288:	f000 fb82 	bl	800c990 <__swsetup_r>
 800c28c:	b1c0      	cbz	r0, 800c2c0 <_vfiprintf_r+0x78>
 800c28e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c290:	07dc      	lsls	r4, r3, #31
 800c292:	d50e      	bpl.n	800c2b2 <_vfiprintf_r+0x6a>
 800c294:	f04f 30ff 	mov.w	r0, #4294967295
 800c298:	b01d      	add	sp, #116	; 0x74
 800c29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c29e:	4b7b      	ldr	r3, [pc, #492]	; (800c48c <_vfiprintf_r+0x244>)
 800c2a0:	429d      	cmp	r5, r3
 800c2a2:	d101      	bne.n	800c2a8 <_vfiprintf_r+0x60>
 800c2a4:	68b5      	ldr	r5, [r6, #8]
 800c2a6:	e7df      	b.n	800c268 <_vfiprintf_r+0x20>
 800c2a8:	4b79      	ldr	r3, [pc, #484]	; (800c490 <_vfiprintf_r+0x248>)
 800c2aa:	429d      	cmp	r5, r3
 800c2ac:	bf08      	it	eq
 800c2ae:	68f5      	ldreq	r5, [r6, #12]
 800c2b0:	e7da      	b.n	800c268 <_vfiprintf_r+0x20>
 800c2b2:	89ab      	ldrh	r3, [r5, #12]
 800c2b4:	0598      	lsls	r0, r3, #22
 800c2b6:	d4ed      	bmi.n	800c294 <_vfiprintf_r+0x4c>
 800c2b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c2ba:	f000 fd98 	bl	800cdee <__retarget_lock_release_recursive>
 800c2be:	e7e9      	b.n	800c294 <_vfiprintf_r+0x4c>
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c2c4:	2320      	movs	r3, #32
 800c2c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c2ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800c2ce:	2330      	movs	r3, #48	; 0x30
 800c2d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c494 <_vfiprintf_r+0x24c>
 800c2d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c2d8:	f04f 0901 	mov.w	r9, #1
 800c2dc:	4623      	mov	r3, r4
 800c2de:	469a      	mov	sl, r3
 800c2e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2e4:	b10a      	cbz	r2, 800c2ea <_vfiprintf_r+0xa2>
 800c2e6:	2a25      	cmp	r2, #37	; 0x25
 800c2e8:	d1f9      	bne.n	800c2de <_vfiprintf_r+0x96>
 800c2ea:	ebba 0b04 	subs.w	fp, sl, r4
 800c2ee:	d00b      	beq.n	800c308 <_vfiprintf_r+0xc0>
 800c2f0:	465b      	mov	r3, fp
 800c2f2:	4622      	mov	r2, r4
 800c2f4:	4629      	mov	r1, r5
 800c2f6:	4630      	mov	r0, r6
 800c2f8:	f7ff ff93 	bl	800c222 <__sfputs_r>
 800c2fc:	3001      	adds	r0, #1
 800c2fe:	f000 80aa 	beq.w	800c456 <_vfiprintf_r+0x20e>
 800c302:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c304:	445a      	add	r2, fp
 800c306:	9209      	str	r2, [sp, #36]	; 0x24
 800c308:	f89a 3000 	ldrb.w	r3, [sl]
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	f000 80a2 	beq.w	800c456 <_vfiprintf_r+0x20e>
 800c312:	2300      	movs	r3, #0
 800c314:	f04f 32ff 	mov.w	r2, #4294967295
 800c318:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c31c:	f10a 0a01 	add.w	sl, sl, #1
 800c320:	9304      	str	r3, [sp, #16]
 800c322:	9307      	str	r3, [sp, #28]
 800c324:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c328:	931a      	str	r3, [sp, #104]	; 0x68
 800c32a:	4654      	mov	r4, sl
 800c32c:	2205      	movs	r2, #5
 800c32e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c332:	4858      	ldr	r0, [pc, #352]	; (800c494 <_vfiprintf_r+0x24c>)
 800c334:	f7f4 f8f4 	bl	8000520 <memchr>
 800c338:	9a04      	ldr	r2, [sp, #16]
 800c33a:	b9d8      	cbnz	r0, 800c374 <_vfiprintf_r+0x12c>
 800c33c:	06d1      	lsls	r1, r2, #27
 800c33e:	bf44      	itt	mi
 800c340:	2320      	movmi	r3, #32
 800c342:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c346:	0713      	lsls	r3, r2, #28
 800c348:	bf44      	itt	mi
 800c34a:	232b      	movmi	r3, #43	; 0x2b
 800c34c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c350:	f89a 3000 	ldrb.w	r3, [sl]
 800c354:	2b2a      	cmp	r3, #42	; 0x2a
 800c356:	d015      	beq.n	800c384 <_vfiprintf_r+0x13c>
 800c358:	9a07      	ldr	r2, [sp, #28]
 800c35a:	4654      	mov	r4, sl
 800c35c:	2000      	movs	r0, #0
 800c35e:	f04f 0c0a 	mov.w	ip, #10
 800c362:	4621      	mov	r1, r4
 800c364:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c368:	3b30      	subs	r3, #48	; 0x30
 800c36a:	2b09      	cmp	r3, #9
 800c36c:	d94e      	bls.n	800c40c <_vfiprintf_r+0x1c4>
 800c36e:	b1b0      	cbz	r0, 800c39e <_vfiprintf_r+0x156>
 800c370:	9207      	str	r2, [sp, #28]
 800c372:	e014      	b.n	800c39e <_vfiprintf_r+0x156>
 800c374:	eba0 0308 	sub.w	r3, r0, r8
 800c378:	fa09 f303 	lsl.w	r3, r9, r3
 800c37c:	4313      	orrs	r3, r2
 800c37e:	9304      	str	r3, [sp, #16]
 800c380:	46a2      	mov	sl, r4
 800c382:	e7d2      	b.n	800c32a <_vfiprintf_r+0xe2>
 800c384:	9b03      	ldr	r3, [sp, #12]
 800c386:	1d19      	adds	r1, r3, #4
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	9103      	str	r1, [sp, #12]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	bfbb      	ittet	lt
 800c390:	425b      	neglt	r3, r3
 800c392:	f042 0202 	orrlt.w	r2, r2, #2
 800c396:	9307      	strge	r3, [sp, #28]
 800c398:	9307      	strlt	r3, [sp, #28]
 800c39a:	bfb8      	it	lt
 800c39c:	9204      	strlt	r2, [sp, #16]
 800c39e:	7823      	ldrb	r3, [r4, #0]
 800c3a0:	2b2e      	cmp	r3, #46	; 0x2e
 800c3a2:	d10c      	bne.n	800c3be <_vfiprintf_r+0x176>
 800c3a4:	7863      	ldrb	r3, [r4, #1]
 800c3a6:	2b2a      	cmp	r3, #42	; 0x2a
 800c3a8:	d135      	bne.n	800c416 <_vfiprintf_r+0x1ce>
 800c3aa:	9b03      	ldr	r3, [sp, #12]
 800c3ac:	1d1a      	adds	r2, r3, #4
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	9203      	str	r2, [sp, #12]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	bfb8      	it	lt
 800c3b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c3ba:	3402      	adds	r4, #2
 800c3bc:	9305      	str	r3, [sp, #20]
 800c3be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c4a4 <_vfiprintf_r+0x25c>
 800c3c2:	7821      	ldrb	r1, [r4, #0]
 800c3c4:	2203      	movs	r2, #3
 800c3c6:	4650      	mov	r0, sl
 800c3c8:	f7f4 f8aa 	bl	8000520 <memchr>
 800c3cc:	b140      	cbz	r0, 800c3e0 <_vfiprintf_r+0x198>
 800c3ce:	2340      	movs	r3, #64	; 0x40
 800c3d0:	eba0 000a 	sub.w	r0, r0, sl
 800c3d4:	fa03 f000 	lsl.w	r0, r3, r0
 800c3d8:	9b04      	ldr	r3, [sp, #16]
 800c3da:	4303      	orrs	r3, r0
 800c3dc:	3401      	adds	r4, #1
 800c3de:	9304      	str	r3, [sp, #16]
 800c3e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3e4:	482c      	ldr	r0, [pc, #176]	; (800c498 <_vfiprintf_r+0x250>)
 800c3e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3ea:	2206      	movs	r2, #6
 800c3ec:	f7f4 f898 	bl	8000520 <memchr>
 800c3f0:	2800      	cmp	r0, #0
 800c3f2:	d03f      	beq.n	800c474 <_vfiprintf_r+0x22c>
 800c3f4:	4b29      	ldr	r3, [pc, #164]	; (800c49c <_vfiprintf_r+0x254>)
 800c3f6:	bb1b      	cbnz	r3, 800c440 <_vfiprintf_r+0x1f8>
 800c3f8:	9b03      	ldr	r3, [sp, #12]
 800c3fa:	3307      	adds	r3, #7
 800c3fc:	f023 0307 	bic.w	r3, r3, #7
 800c400:	3308      	adds	r3, #8
 800c402:	9303      	str	r3, [sp, #12]
 800c404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c406:	443b      	add	r3, r7
 800c408:	9309      	str	r3, [sp, #36]	; 0x24
 800c40a:	e767      	b.n	800c2dc <_vfiprintf_r+0x94>
 800c40c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c410:	460c      	mov	r4, r1
 800c412:	2001      	movs	r0, #1
 800c414:	e7a5      	b.n	800c362 <_vfiprintf_r+0x11a>
 800c416:	2300      	movs	r3, #0
 800c418:	3401      	adds	r4, #1
 800c41a:	9305      	str	r3, [sp, #20]
 800c41c:	4619      	mov	r1, r3
 800c41e:	f04f 0c0a 	mov.w	ip, #10
 800c422:	4620      	mov	r0, r4
 800c424:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c428:	3a30      	subs	r2, #48	; 0x30
 800c42a:	2a09      	cmp	r2, #9
 800c42c:	d903      	bls.n	800c436 <_vfiprintf_r+0x1ee>
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d0c5      	beq.n	800c3be <_vfiprintf_r+0x176>
 800c432:	9105      	str	r1, [sp, #20]
 800c434:	e7c3      	b.n	800c3be <_vfiprintf_r+0x176>
 800c436:	fb0c 2101 	mla	r1, ip, r1, r2
 800c43a:	4604      	mov	r4, r0
 800c43c:	2301      	movs	r3, #1
 800c43e:	e7f0      	b.n	800c422 <_vfiprintf_r+0x1da>
 800c440:	ab03      	add	r3, sp, #12
 800c442:	9300      	str	r3, [sp, #0]
 800c444:	462a      	mov	r2, r5
 800c446:	4b16      	ldr	r3, [pc, #88]	; (800c4a0 <_vfiprintf_r+0x258>)
 800c448:	a904      	add	r1, sp, #16
 800c44a:	4630      	mov	r0, r6
 800c44c:	f3af 8000 	nop.w
 800c450:	4607      	mov	r7, r0
 800c452:	1c78      	adds	r0, r7, #1
 800c454:	d1d6      	bne.n	800c404 <_vfiprintf_r+0x1bc>
 800c456:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c458:	07d9      	lsls	r1, r3, #31
 800c45a:	d405      	bmi.n	800c468 <_vfiprintf_r+0x220>
 800c45c:	89ab      	ldrh	r3, [r5, #12]
 800c45e:	059a      	lsls	r2, r3, #22
 800c460:	d402      	bmi.n	800c468 <_vfiprintf_r+0x220>
 800c462:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c464:	f000 fcc3 	bl	800cdee <__retarget_lock_release_recursive>
 800c468:	89ab      	ldrh	r3, [r5, #12]
 800c46a:	065b      	lsls	r3, r3, #25
 800c46c:	f53f af12 	bmi.w	800c294 <_vfiprintf_r+0x4c>
 800c470:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c472:	e711      	b.n	800c298 <_vfiprintf_r+0x50>
 800c474:	ab03      	add	r3, sp, #12
 800c476:	9300      	str	r3, [sp, #0]
 800c478:	462a      	mov	r2, r5
 800c47a:	4b09      	ldr	r3, [pc, #36]	; (800c4a0 <_vfiprintf_r+0x258>)
 800c47c:	a904      	add	r1, sp, #16
 800c47e:	4630      	mov	r0, r6
 800c480:	f000 f880 	bl	800c584 <_printf_i>
 800c484:	e7e4      	b.n	800c450 <_vfiprintf_r+0x208>
 800c486:	bf00      	nop
 800c488:	0800d5b0 	.word	0x0800d5b0
 800c48c:	0800d5d0 	.word	0x0800d5d0
 800c490:	0800d590 	.word	0x0800d590
 800c494:	0800d55c 	.word	0x0800d55c
 800c498:	0800d566 	.word	0x0800d566
 800c49c:	00000000 	.word	0x00000000
 800c4a0:	0800c223 	.word	0x0800c223
 800c4a4:	0800d562 	.word	0x0800d562

0800c4a8 <_printf_common>:
 800c4a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4ac:	4616      	mov	r6, r2
 800c4ae:	4699      	mov	r9, r3
 800c4b0:	688a      	ldr	r2, [r1, #8]
 800c4b2:	690b      	ldr	r3, [r1, #16]
 800c4b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c4b8:	4293      	cmp	r3, r2
 800c4ba:	bfb8      	it	lt
 800c4bc:	4613      	movlt	r3, r2
 800c4be:	6033      	str	r3, [r6, #0]
 800c4c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c4c4:	4607      	mov	r7, r0
 800c4c6:	460c      	mov	r4, r1
 800c4c8:	b10a      	cbz	r2, 800c4ce <_printf_common+0x26>
 800c4ca:	3301      	adds	r3, #1
 800c4cc:	6033      	str	r3, [r6, #0]
 800c4ce:	6823      	ldr	r3, [r4, #0]
 800c4d0:	0699      	lsls	r1, r3, #26
 800c4d2:	bf42      	ittt	mi
 800c4d4:	6833      	ldrmi	r3, [r6, #0]
 800c4d6:	3302      	addmi	r3, #2
 800c4d8:	6033      	strmi	r3, [r6, #0]
 800c4da:	6825      	ldr	r5, [r4, #0]
 800c4dc:	f015 0506 	ands.w	r5, r5, #6
 800c4e0:	d106      	bne.n	800c4f0 <_printf_common+0x48>
 800c4e2:	f104 0a19 	add.w	sl, r4, #25
 800c4e6:	68e3      	ldr	r3, [r4, #12]
 800c4e8:	6832      	ldr	r2, [r6, #0]
 800c4ea:	1a9b      	subs	r3, r3, r2
 800c4ec:	42ab      	cmp	r3, r5
 800c4ee:	dc26      	bgt.n	800c53e <_printf_common+0x96>
 800c4f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c4f4:	1e13      	subs	r3, r2, #0
 800c4f6:	6822      	ldr	r2, [r4, #0]
 800c4f8:	bf18      	it	ne
 800c4fa:	2301      	movne	r3, #1
 800c4fc:	0692      	lsls	r2, r2, #26
 800c4fe:	d42b      	bmi.n	800c558 <_printf_common+0xb0>
 800c500:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c504:	4649      	mov	r1, r9
 800c506:	4638      	mov	r0, r7
 800c508:	47c0      	blx	r8
 800c50a:	3001      	adds	r0, #1
 800c50c:	d01e      	beq.n	800c54c <_printf_common+0xa4>
 800c50e:	6823      	ldr	r3, [r4, #0]
 800c510:	68e5      	ldr	r5, [r4, #12]
 800c512:	6832      	ldr	r2, [r6, #0]
 800c514:	f003 0306 	and.w	r3, r3, #6
 800c518:	2b04      	cmp	r3, #4
 800c51a:	bf08      	it	eq
 800c51c:	1aad      	subeq	r5, r5, r2
 800c51e:	68a3      	ldr	r3, [r4, #8]
 800c520:	6922      	ldr	r2, [r4, #16]
 800c522:	bf0c      	ite	eq
 800c524:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c528:	2500      	movne	r5, #0
 800c52a:	4293      	cmp	r3, r2
 800c52c:	bfc4      	itt	gt
 800c52e:	1a9b      	subgt	r3, r3, r2
 800c530:	18ed      	addgt	r5, r5, r3
 800c532:	2600      	movs	r6, #0
 800c534:	341a      	adds	r4, #26
 800c536:	42b5      	cmp	r5, r6
 800c538:	d11a      	bne.n	800c570 <_printf_common+0xc8>
 800c53a:	2000      	movs	r0, #0
 800c53c:	e008      	b.n	800c550 <_printf_common+0xa8>
 800c53e:	2301      	movs	r3, #1
 800c540:	4652      	mov	r2, sl
 800c542:	4649      	mov	r1, r9
 800c544:	4638      	mov	r0, r7
 800c546:	47c0      	blx	r8
 800c548:	3001      	adds	r0, #1
 800c54a:	d103      	bne.n	800c554 <_printf_common+0xac>
 800c54c:	f04f 30ff 	mov.w	r0, #4294967295
 800c550:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c554:	3501      	adds	r5, #1
 800c556:	e7c6      	b.n	800c4e6 <_printf_common+0x3e>
 800c558:	18e1      	adds	r1, r4, r3
 800c55a:	1c5a      	adds	r2, r3, #1
 800c55c:	2030      	movs	r0, #48	; 0x30
 800c55e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c562:	4422      	add	r2, r4
 800c564:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c568:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c56c:	3302      	adds	r3, #2
 800c56e:	e7c7      	b.n	800c500 <_printf_common+0x58>
 800c570:	2301      	movs	r3, #1
 800c572:	4622      	mov	r2, r4
 800c574:	4649      	mov	r1, r9
 800c576:	4638      	mov	r0, r7
 800c578:	47c0      	blx	r8
 800c57a:	3001      	adds	r0, #1
 800c57c:	d0e6      	beq.n	800c54c <_printf_common+0xa4>
 800c57e:	3601      	adds	r6, #1
 800c580:	e7d9      	b.n	800c536 <_printf_common+0x8e>
	...

0800c584 <_printf_i>:
 800c584:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c588:	7e0f      	ldrb	r7, [r1, #24]
 800c58a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c58c:	2f78      	cmp	r7, #120	; 0x78
 800c58e:	4691      	mov	r9, r2
 800c590:	4680      	mov	r8, r0
 800c592:	460c      	mov	r4, r1
 800c594:	469a      	mov	sl, r3
 800c596:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c59a:	d807      	bhi.n	800c5ac <_printf_i+0x28>
 800c59c:	2f62      	cmp	r7, #98	; 0x62
 800c59e:	d80a      	bhi.n	800c5b6 <_printf_i+0x32>
 800c5a0:	2f00      	cmp	r7, #0
 800c5a2:	f000 80d8 	beq.w	800c756 <_printf_i+0x1d2>
 800c5a6:	2f58      	cmp	r7, #88	; 0x58
 800c5a8:	f000 80a3 	beq.w	800c6f2 <_printf_i+0x16e>
 800c5ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c5b4:	e03a      	b.n	800c62c <_printf_i+0xa8>
 800c5b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c5ba:	2b15      	cmp	r3, #21
 800c5bc:	d8f6      	bhi.n	800c5ac <_printf_i+0x28>
 800c5be:	a101      	add	r1, pc, #4	; (adr r1, 800c5c4 <_printf_i+0x40>)
 800c5c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c5c4:	0800c61d 	.word	0x0800c61d
 800c5c8:	0800c631 	.word	0x0800c631
 800c5cc:	0800c5ad 	.word	0x0800c5ad
 800c5d0:	0800c5ad 	.word	0x0800c5ad
 800c5d4:	0800c5ad 	.word	0x0800c5ad
 800c5d8:	0800c5ad 	.word	0x0800c5ad
 800c5dc:	0800c631 	.word	0x0800c631
 800c5e0:	0800c5ad 	.word	0x0800c5ad
 800c5e4:	0800c5ad 	.word	0x0800c5ad
 800c5e8:	0800c5ad 	.word	0x0800c5ad
 800c5ec:	0800c5ad 	.word	0x0800c5ad
 800c5f0:	0800c73d 	.word	0x0800c73d
 800c5f4:	0800c661 	.word	0x0800c661
 800c5f8:	0800c71f 	.word	0x0800c71f
 800c5fc:	0800c5ad 	.word	0x0800c5ad
 800c600:	0800c5ad 	.word	0x0800c5ad
 800c604:	0800c75f 	.word	0x0800c75f
 800c608:	0800c5ad 	.word	0x0800c5ad
 800c60c:	0800c661 	.word	0x0800c661
 800c610:	0800c5ad 	.word	0x0800c5ad
 800c614:	0800c5ad 	.word	0x0800c5ad
 800c618:	0800c727 	.word	0x0800c727
 800c61c:	682b      	ldr	r3, [r5, #0]
 800c61e:	1d1a      	adds	r2, r3, #4
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	602a      	str	r2, [r5, #0]
 800c624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c628:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c62c:	2301      	movs	r3, #1
 800c62e:	e0a3      	b.n	800c778 <_printf_i+0x1f4>
 800c630:	6820      	ldr	r0, [r4, #0]
 800c632:	6829      	ldr	r1, [r5, #0]
 800c634:	0606      	lsls	r6, r0, #24
 800c636:	f101 0304 	add.w	r3, r1, #4
 800c63a:	d50a      	bpl.n	800c652 <_printf_i+0xce>
 800c63c:	680e      	ldr	r6, [r1, #0]
 800c63e:	602b      	str	r3, [r5, #0]
 800c640:	2e00      	cmp	r6, #0
 800c642:	da03      	bge.n	800c64c <_printf_i+0xc8>
 800c644:	232d      	movs	r3, #45	; 0x2d
 800c646:	4276      	negs	r6, r6
 800c648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c64c:	485e      	ldr	r0, [pc, #376]	; (800c7c8 <_printf_i+0x244>)
 800c64e:	230a      	movs	r3, #10
 800c650:	e019      	b.n	800c686 <_printf_i+0x102>
 800c652:	680e      	ldr	r6, [r1, #0]
 800c654:	602b      	str	r3, [r5, #0]
 800c656:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c65a:	bf18      	it	ne
 800c65c:	b236      	sxthne	r6, r6
 800c65e:	e7ef      	b.n	800c640 <_printf_i+0xbc>
 800c660:	682b      	ldr	r3, [r5, #0]
 800c662:	6820      	ldr	r0, [r4, #0]
 800c664:	1d19      	adds	r1, r3, #4
 800c666:	6029      	str	r1, [r5, #0]
 800c668:	0601      	lsls	r1, r0, #24
 800c66a:	d501      	bpl.n	800c670 <_printf_i+0xec>
 800c66c:	681e      	ldr	r6, [r3, #0]
 800c66e:	e002      	b.n	800c676 <_printf_i+0xf2>
 800c670:	0646      	lsls	r6, r0, #25
 800c672:	d5fb      	bpl.n	800c66c <_printf_i+0xe8>
 800c674:	881e      	ldrh	r6, [r3, #0]
 800c676:	4854      	ldr	r0, [pc, #336]	; (800c7c8 <_printf_i+0x244>)
 800c678:	2f6f      	cmp	r7, #111	; 0x6f
 800c67a:	bf0c      	ite	eq
 800c67c:	2308      	moveq	r3, #8
 800c67e:	230a      	movne	r3, #10
 800c680:	2100      	movs	r1, #0
 800c682:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c686:	6865      	ldr	r5, [r4, #4]
 800c688:	60a5      	str	r5, [r4, #8]
 800c68a:	2d00      	cmp	r5, #0
 800c68c:	bfa2      	ittt	ge
 800c68e:	6821      	ldrge	r1, [r4, #0]
 800c690:	f021 0104 	bicge.w	r1, r1, #4
 800c694:	6021      	strge	r1, [r4, #0]
 800c696:	b90e      	cbnz	r6, 800c69c <_printf_i+0x118>
 800c698:	2d00      	cmp	r5, #0
 800c69a:	d04d      	beq.n	800c738 <_printf_i+0x1b4>
 800c69c:	4615      	mov	r5, r2
 800c69e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c6a2:	fb03 6711 	mls	r7, r3, r1, r6
 800c6a6:	5dc7      	ldrb	r7, [r0, r7]
 800c6a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c6ac:	4637      	mov	r7, r6
 800c6ae:	42bb      	cmp	r3, r7
 800c6b0:	460e      	mov	r6, r1
 800c6b2:	d9f4      	bls.n	800c69e <_printf_i+0x11a>
 800c6b4:	2b08      	cmp	r3, #8
 800c6b6:	d10b      	bne.n	800c6d0 <_printf_i+0x14c>
 800c6b8:	6823      	ldr	r3, [r4, #0]
 800c6ba:	07de      	lsls	r6, r3, #31
 800c6bc:	d508      	bpl.n	800c6d0 <_printf_i+0x14c>
 800c6be:	6923      	ldr	r3, [r4, #16]
 800c6c0:	6861      	ldr	r1, [r4, #4]
 800c6c2:	4299      	cmp	r1, r3
 800c6c4:	bfde      	ittt	le
 800c6c6:	2330      	movle	r3, #48	; 0x30
 800c6c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c6cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c6d0:	1b52      	subs	r2, r2, r5
 800c6d2:	6122      	str	r2, [r4, #16]
 800c6d4:	f8cd a000 	str.w	sl, [sp]
 800c6d8:	464b      	mov	r3, r9
 800c6da:	aa03      	add	r2, sp, #12
 800c6dc:	4621      	mov	r1, r4
 800c6de:	4640      	mov	r0, r8
 800c6e0:	f7ff fee2 	bl	800c4a8 <_printf_common>
 800c6e4:	3001      	adds	r0, #1
 800c6e6:	d14c      	bne.n	800c782 <_printf_i+0x1fe>
 800c6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ec:	b004      	add	sp, #16
 800c6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6f2:	4835      	ldr	r0, [pc, #212]	; (800c7c8 <_printf_i+0x244>)
 800c6f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c6f8:	6829      	ldr	r1, [r5, #0]
 800c6fa:	6823      	ldr	r3, [r4, #0]
 800c6fc:	f851 6b04 	ldr.w	r6, [r1], #4
 800c700:	6029      	str	r1, [r5, #0]
 800c702:	061d      	lsls	r5, r3, #24
 800c704:	d514      	bpl.n	800c730 <_printf_i+0x1ac>
 800c706:	07df      	lsls	r7, r3, #31
 800c708:	bf44      	itt	mi
 800c70a:	f043 0320 	orrmi.w	r3, r3, #32
 800c70e:	6023      	strmi	r3, [r4, #0]
 800c710:	b91e      	cbnz	r6, 800c71a <_printf_i+0x196>
 800c712:	6823      	ldr	r3, [r4, #0]
 800c714:	f023 0320 	bic.w	r3, r3, #32
 800c718:	6023      	str	r3, [r4, #0]
 800c71a:	2310      	movs	r3, #16
 800c71c:	e7b0      	b.n	800c680 <_printf_i+0xfc>
 800c71e:	6823      	ldr	r3, [r4, #0]
 800c720:	f043 0320 	orr.w	r3, r3, #32
 800c724:	6023      	str	r3, [r4, #0]
 800c726:	2378      	movs	r3, #120	; 0x78
 800c728:	4828      	ldr	r0, [pc, #160]	; (800c7cc <_printf_i+0x248>)
 800c72a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c72e:	e7e3      	b.n	800c6f8 <_printf_i+0x174>
 800c730:	0659      	lsls	r1, r3, #25
 800c732:	bf48      	it	mi
 800c734:	b2b6      	uxthmi	r6, r6
 800c736:	e7e6      	b.n	800c706 <_printf_i+0x182>
 800c738:	4615      	mov	r5, r2
 800c73a:	e7bb      	b.n	800c6b4 <_printf_i+0x130>
 800c73c:	682b      	ldr	r3, [r5, #0]
 800c73e:	6826      	ldr	r6, [r4, #0]
 800c740:	6961      	ldr	r1, [r4, #20]
 800c742:	1d18      	adds	r0, r3, #4
 800c744:	6028      	str	r0, [r5, #0]
 800c746:	0635      	lsls	r5, r6, #24
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	d501      	bpl.n	800c750 <_printf_i+0x1cc>
 800c74c:	6019      	str	r1, [r3, #0]
 800c74e:	e002      	b.n	800c756 <_printf_i+0x1d2>
 800c750:	0670      	lsls	r0, r6, #25
 800c752:	d5fb      	bpl.n	800c74c <_printf_i+0x1c8>
 800c754:	8019      	strh	r1, [r3, #0]
 800c756:	2300      	movs	r3, #0
 800c758:	6123      	str	r3, [r4, #16]
 800c75a:	4615      	mov	r5, r2
 800c75c:	e7ba      	b.n	800c6d4 <_printf_i+0x150>
 800c75e:	682b      	ldr	r3, [r5, #0]
 800c760:	1d1a      	adds	r2, r3, #4
 800c762:	602a      	str	r2, [r5, #0]
 800c764:	681d      	ldr	r5, [r3, #0]
 800c766:	6862      	ldr	r2, [r4, #4]
 800c768:	2100      	movs	r1, #0
 800c76a:	4628      	mov	r0, r5
 800c76c:	f7f3 fed8 	bl	8000520 <memchr>
 800c770:	b108      	cbz	r0, 800c776 <_printf_i+0x1f2>
 800c772:	1b40      	subs	r0, r0, r5
 800c774:	6060      	str	r0, [r4, #4]
 800c776:	6863      	ldr	r3, [r4, #4]
 800c778:	6123      	str	r3, [r4, #16]
 800c77a:	2300      	movs	r3, #0
 800c77c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c780:	e7a8      	b.n	800c6d4 <_printf_i+0x150>
 800c782:	6923      	ldr	r3, [r4, #16]
 800c784:	462a      	mov	r2, r5
 800c786:	4649      	mov	r1, r9
 800c788:	4640      	mov	r0, r8
 800c78a:	47d0      	blx	sl
 800c78c:	3001      	adds	r0, #1
 800c78e:	d0ab      	beq.n	800c6e8 <_printf_i+0x164>
 800c790:	6823      	ldr	r3, [r4, #0]
 800c792:	079b      	lsls	r3, r3, #30
 800c794:	d413      	bmi.n	800c7be <_printf_i+0x23a>
 800c796:	68e0      	ldr	r0, [r4, #12]
 800c798:	9b03      	ldr	r3, [sp, #12]
 800c79a:	4298      	cmp	r0, r3
 800c79c:	bfb8      	it	lt
 800c79e:	4618      	movlt	r0, r3
 800c7a0:	e7a4      	b.n	800c6ec <_printf_i+0x168>
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	4632      	mov	r2, r6
 800c7a6:	4649      	mov	r1, r9
 800c7a8:	4640      	mov	r0, r8
 800c7aa:	47d0      	blx	sl
 800c7ac:	3001      	adds	r0, #1
 800c7ae:	d09b      	beq.n	800c6e8 <_printf_i+0x164>
 800c7b0:	3501      	adds	r5, #1
 800c7b2:	68e3      	ldr	r3, [r4, #12]
 800c7b4:	9903      	ldr	r1, [sp, #12]
 800c7b6:	1a5b      	subs	r3, r3, r1
 800c7b8:	42ab      	cmp	r3, r5
 800c7ba:	dcf2      	bgt.n	800c7a2 <_printf_i+0x21e>
 800c7bc:	e7eb      	b.n	800c796 <_printf_i+0x212>
 800c7be:	2500      	movs	r5, #0
 800c7c0:	f104 0619 	add.w	r6, r4, #25
 800c7c4:	e7f5      	b.n	800c7b2 <_printf_i+0x22e>
 800c7c6:	bf00      	nop
 800c7c8:	0800d56d 	.word	0x0800d56d
 800c7cc:	0800d57e 	.word	0x0800d57e

0800c7d0 <iprintf>:
 800c7d0:	b40f      	push	{r0, r1, r2, r3}
 800c7d2:	4b0a      	ldr	r3, [pc, #40]	; (800c7fc <iprintf+0x2c>)
 800c7d4:	b513      	push	{r0, r1, r4, lr}
 800c7d6:	681c      	ldr	r4, [r3, #0]
 800c7d8:	b124      	cbz	r4, 800c7e4 <iprintf+0x14>
 800c7da:	69a3      	ldr	r3, [r4, #24]
 800c7dc:	b913      	cbnz	r3, 800c7e4 <iprintf+0x14>
 800c7de:	4620      	mov	r0, r4
 800c7e0:	f000 fa66 	bl	800ccb0 <__sinit>
 800c7e4:	ab05      	add	r3, sp, #20
 800c7e6:	9a04      	ldr	r2, [sp, #16]
 800c7e8:	68a1      	ldr	r1, [r4, #8]
 800c7ea:	9301      	str	r3, [sp, #4]
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	f7ff fd2b 	bl	800c248 <_vfiprintf_r>
 800c7f2:	b002      	add	sp, #8
 800c7f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7f8:	b004      	add	sp, #16
 800c7fa:	4770      	bx	lr
 800c7fc:	24000018 	.word	0x24000018

0800c800 <_puts_r>:
 800c800:	b570      	push	{r4, r5, r6, lr}
 800c802:	460e      	mov	r6, r1
 800c804:	4605      	mov	r5, r0
 800c806:	b118      	cbz	r0, 800c810 <_puts_r+0x10>
 800c808:	6983      	ldr	r3, [r0, #24]
 800c80a:	b90b      	cbnz	r3, 800c810 <_puts_r+0x10>
 800c80c:	f000 fa50 	bl	800ccb0 <__sinit>
 800c810:	69ab      	ldr	r3, [r5, #24]
 800c812:	68ac      	ldr	r4, [r5, #8]
 800c814:	b913      	cbnz	r3, 800c81c <_puts_r+0x1c>
 800c816:	4628      	mov	r0, r5
 800c818:	f000 fa4a 	bl	800ccb0 <__sinit>
 800c81c:	4b2c      	ldr	r3, [pc, #176]	; (800c8d0 <_puts_r+0xd0>)
 800c81e:	429c      	cmp	r4, r3
 800c820:	d120      	bne.n	800c864 <_puts_r+0x64>
 800c822:	686c      	ldr	r4, [r5, #4]
 800c824:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c826:	07db      	lsls	r3, r3, #31
 800c828:	d405      	bmi.n	800c836 <_puts_r+0x36>
 800c82a:	89a3      	ldrh	r3, [r4, #12]
 800c82c:	0598      	lsls	r0, r3, #22
 800c82e:	d402      	bmi.n	800c836 <_puts_r+0x36>
 800c830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c832:	f000 fadb 	bl	800cdec <__retarget_lock_acquire_recursive>
 800c836:	89a3      	ldrh	r3, [r4, #12]
 800c838:	0719      	lsls	r1, r3, #28
 800c83a:	d51d      	bpl.n	800c878 <_puts_r+0x78>
 800c83c:	6923      	ldr	r3, [r4, #16]
 800c83e:	b1db      	cbz	r3, 800c878 <_puts_r+0x78>
 800c840:	3e01      	subs	r6, #1
 800c842:	68a3      	ldr	r3, [r4, #8]
 800c844:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c848:	3b01      	subs	r3, #1
 800c84a:	60a3      	str	r3, [r4, #8]
 800c84c:	bb39      	cbnz	r1, 800c89e <_puts_r+0x9e>
 800c84e:	2b00      	cmp	r3, #0
 800c850:	da38      	bge.n	800c8c4 <_puts_r+0xc4>
 800c852:	4622      	mov	r2, r4
 800c854:	210a      	movs	r1, #10
 800c856:	4628      	mov	r0, r5
 800c858:	f000 f848 	bl	800c8ec <__swbuf_r>
 800c85c:	3001      	adds	r0, #1
 800c85e:	d011      	beq.n	800c884 <_puts_r+0x84>
 800c860:	250a      	movs	r5, #10
 800c862:	e011      	b.n	800c888 <_puts_r+0x88>
 800c864:	4b1b      	ldr	r3, [pc, #108]	; (800c8d4 <_puts_r+0xd4>)
 800c866:	429c      	cmp	r4, r3
 800c868:	d101      	bne.n	800c86e <_puts_r+0x6e>
 800c86a:	68ac      	ldr	r4, [r5, #8]
 800c86c:	e7da      	b.n	800c824 <_puts_r+0x24>
 800c86e:	4b1a      	ldr	r3, [pc, #104]	; (800c8d8 <_puts_r+0xd8>)
 800c870:	429c      	cmp	r4, r3
 800c872:	bf08      	it	eq
 800c874:	68ec      	ldreq	r4, [r5, #12]
 800c876:	e7d5      	b.n	800c824 <_puts_r+0x24>
 800c878:	4621      	mov	r1, r4
 800c87a:	4628      	mov	r0, r5
 800c87c:	f000 f888 	bl	800c990 <__swsetup_r>
 800c880:	2800      	cmp	r0, #0
 800c882:	d0dd      	beq.n	800c840 <_puts_r+0x40>
 800c884:	f04f 35ff 	mov.w	r5, #4294967295
 800c888:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c88a:	07da      	lsls	r2, r3, #31
 800c88c:	d405      	bmi.n	800c89a <_puts_r+0x9a>
 800c88e:	89a3      	ldrh	r3, [r4, #12]
 800c890:	059b      	lsls	r3, r3, #22
 800c892:	d402      	bmi.n	800c89a <_puts_r+0x9a>
 800c894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c896:	f000 faaa 	bl	800cdee <__retarget_lock_release_recursive>
 800c89a:	4628      	mov	r0, r5
 800c89c:	bd70      	pop	{r4, r5, r6, pc}
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	da04      	bge.n	800c8ac <_puts_r+0xac>
 800c8a2:	69a2      	ldr	r2, [r4, #24]
 800c8a4:	429a      	cmp	r2, r3
 800c8a6:	dc06      	bgt.n	800c8b6 <_puts_r+0xb6>
 800c8a8:	290a      	cmp	r1, #10
 800c8aa:	d004      	beq.n	800c8b6 <_puts_r+0xb6>
 800c8ac:	6823      	ldr	r3, [r4, #0]
 800c8ae:	1c5a      	adds	r2, r3, #1
 800c8b0:	6022      	str	r2, [r4, #0]
 800c8b2:	7019      	strb	r1, [r3, #0]
 800c8b4:	e7c5      	b.n	800c842 <_puts_r+0x42>
 800c8b6:	4622      	mov	r2, r4
 800c8b8:	4628      	mov	r0, r5
 800c8ba:	f000 f817 	bl	800c8ec <__swbuf_r>
 800c8be:	3001      	adds	r0, #1
 800c8c0:	d1bf      	bne.n	800c842 <_puts_r+0x42>
 800c8c2:	e7df      	b.n	800c884 <_puts_r+0x84>
 800c8c4:	6823      	ldr	r3, [r4, #0]
 800c8c6:	250a      	movs	r5, #10
 800c8c8:	1c5a      	adds	r2, r3, #1
 800c8ca:	6022      	str	r2, [r4, #0]
 800c8cc:	701d      	strb	r5, [r3, #0]
 800c8ce:	e7db      	b.n	800c888 <_puts_r+0x88>
 800c8d0:	0800d5b0 	.word	0x0800d5b0
 800c8d4:	0800d5d0 	.word	0x0800d5d0
 800c8d8:	0800d590 	.word	0x0800d590

0800c8dc <puts>:
 800c8dc:	4b02      	ldr	r3, [pc, #8]	; (800c8e8 <puts+0xc>)
 800c8de:	4601      	mov	r1, r0
 800c8e0:	6818      	ldr	r0, [r3, #0]
 800c8e2:	f7ff bf8d 	b.w	800c800 <_puts_r>
 800c8e6:	bf00      	nop
 800c8e8:	24000018 	.word	0x24000018

0800c8ec <__swbuf_r>:
 800c8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ee:	460e      	mov	r6, r1
 800c8f0:	4614      	mov	r4, r2
 800c8f2:	4605      	mov	r5, r0
 800c8f4:	b118      	cbz	r0, 800c8fe <__swbuf_r+0x12>
 800c8f6:	6983      	ldr	r3, [r0, #24]
 800c8f8:	b90b      	cbnz	r3, 800c8fe <__swbuf_r+0x12>
 800c8fa:	f000 f9d9 	bl	800ccb0 <__sinit>
 800c8fe:	4b21      	ldr	r3, [pc, #132]	; (800c984 <__swbuf_r+0x98>)
 800c900:	429c      	cmp	r4, r3
 800c902:	d12b      	bne.n	800c95c <__swbuf_r+0x70>
 800c904:	686c      	ldr	r4, [r5, #4]
 800c906:	69a3      	ldr	r3, [r4, #24]
 800c908:	60a3      	str	r3, [r4, #8]
 800c90a:	89a3      	ldrh	r3, [r4, #12]
 800c90c:	071a      	lsls	r2, r3, #28
 800c90e:	d52f      	bpl.n	800c970 <__swbuf_r+0x84>
 800c910:	6923      	ldr	r3, [r4, #16]
 800c912:	b36b      	cbz	r3, 800c970 <__swbuf_r+0x84>
 800c914:	6923      	ldr	r3, [r4, #16]
 800c916:	6820      	ldr	r0, [r4, #0]
 800c918:	1ac0      	subs	r0, r0, r3
 800c91a:	6963      	ldr	r3, [r4, #20]
 800c91c:	b2f6      	uxtb	r6, r6
 800c91e:	4283      	cmp	r3, r0
 800c920:	4637      	mov	r7, r6
 800c922:	dc04      	bgt.n	800c92e <__swbuf_r+0x42>
 800c924:	4621      	mov	r1, r4
 800c926:	4628      	mov	r0, r5
 800c928:	f000 f92e 	bl	800cb88 <_fflush_r>
 800c92c:	bb30      	cbnz	r0, 800c97c <__swbuf_r+0x90>
 800c92e:	68a3      	ldr	r3, [r4, #8]
 800c930:	3b01      	subs	r3, #1
 800c932:	60a3      	str	r3, [r4, #8]
 800c934:	6823      	ldr	r3, [r4, #0]
 800c936:	1c5a      	adds	r2, r3, #1
 800c938:	6022      	str	r2, [r4, #0]
 800c93a:	701e      	strb	r6, [r3, #0]
 800c93c:	6963      	ldr	r3, [r4, #20]
 800c93e:	3001      	adds	r0, #1
 800c940:	4283      	cmp	r3, r0
 800c942:	d004      	beq.n	800c94e <__swbuf_r+0x62>
 800c944:	89a3      	ldrh	r3, [r4, #12]
 800c946:	07db      	lsls	r3, r3, #31
 800c948:	d506      	bpl.n	800c958 <__swbuf_r+0x6c>
 800c94a:	2e0a      	cmp	r6, #10
 800c94c:	d104      	bne.n	800c958 <__swbuf_r+0x6c>
 800c94e:	4621      	mov	r1, r4
 800c950:	4628      	mov	r0, r5
 800c952:	f000 f919 	bl	800cb88 <_fflush_r>
 800c956:	b988      	cbnz	r0, 800c97c <__swbuf_r+0x90>
 800c958:	4638      	mov	r0, r7
 800c95a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c95c:	4b0a      	ldr	r3, [pc, #40]	; (800c988 <__swbuf_r+0x9c>)
 800c95e:	429c      	cmp	r4, r3
 800c960:	d101      	bne.n	800c966 <__swbuf_r+0x7a>
 800c962:	68ac      	ldr	r4, [r5, #8]
 800c964:	e7cf      	b.n	800c906 <__swbuf_r+0x1a>
 800c966:	4b09      	ldr	r3, [pc, #36]	; (800c98c <__swbuf_r+0xa0>)
 800c968:	429c      	cmp	r4, r3
 800c96a:	bf08      	it	eq
 800c96c:	68ec      	ldreq	r4, [r5, #12]
 800c96e:	e7ca      	b.n	800c906 <__swbuf_r+0x1a>
 800c970:	4621      	mov	r1, r4
 800c972:	4628      	mov	r0, r5
 800c974:	f000 f80c 	bl	800c990 <__swsetup_r>
 800c978:	2800      	cmp	r0, #0
 800c97a:	d0cb      	beq.n	800c914 <__swbuf_r+0x28>
 800c97c:	f04f 37ff 	mov.w	r7, #4294967295
 800c980:	e7ea      	b.n	800c958 <__swbuf_r+0x6c>
 800c982:	bf00      	nop
 800c984:	0800d5b0 	.word	0x0800d5b0
 800c988:	0800d5d0 	.word	0x0800d5d0
 800c98c:	0800d590 	.word	0x0800d590

0800c990 <__swsetup_r>:
 800c990:	4b32      	ldr	r3, [pc, #200]	; (800ca5c <__swsetup_r+0xcc>)
 800c992:	b570      	push	{r4, r5, r6, lr}
 800c994:	681d      	ldr	r5, [r3, #0]
 800c996:	4606      	mov	r6, r0
 800c998:	460c      	mov	r4, r1
 800c99a:	b125      	cbz	r5, 800c9a6 <__swsetup_r+0x16>
 800c99c:	69ab      	ldr	r3, [r5, #24]
 800c99e:	b913      	cbnz	r3, 800c9a6 <__swsetup_r+0x16>
 800c9a0:	4628      	mov	r0, r5
 800c9a2:	f000 f985 	bl	800ccb0 <__sinit>
 800c9a6:	4b2e      	ldr	r3, [pc, #184]	; (800ca60 <__swsetup_r+0xd0>)
 800c9a8:	429c      	cmp	r4, r3
 800c9aa:	d10f      	bne.n	800c9cc <__swsetup_r+0x3c>
 800c9ac:	686c      	ldr	r4, [r5, #4]
 800c9ae:	89a3      	ldrh	r3, [r4, #12]
 800c9b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c9b4:	0719      	lsls	r1, r3, #28
 800c9b6:	d42c      	bmi.n	800ca12 <__swsetup_r+0x82>
 800c9b8:	06dd      	lsls	r5, r3, #27
 800c9ba:	d411      	bmi.n	800c9e0 <__swsetup_r+0x50>
 800c9bc:	2309      	movs	r3, #9
 800c9be:	6033      	str	r3, [r6, #0]
 800c9c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c9c4:	81a3      	strh	r3, [r4, #12]
 800c9c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ca:	e03e      	b.n	800ca4a <__swsetup_r+0xba>
 800c9cc:	4b25      	ldr	r3, [pc, #148]	; (800ca64 <__swsetup_r+0xd4>)
 800c9ce:	429c      	cmp	r4, r3
 800c9d0:	d101      	bne.n	800c9d6 <__swsetup_r+0x46>
 800c9d2:	68ac      	ldr	r4, [r5, #8]
 800c9d4:	e7eb      	b.n	800c9ae <__swsetup_r+0x1e>
 800c9d6:	4b24      	ldr	r3, [pc, #144]	; (800ca68 <__swsetup_r+0xd8>)
 800c9d8:	429c      	cmp	r4, r3
 800c9da:	bf08      	it	eq
 800c9dc:	68ec      	ldreq	r4, [r5, #12]
 800c9de:	e7e6      	b.n	800c9ae <__swsetup_r+0x1e>
 800c9e0:	0758      	lsls	r0, r3, #29
 800c9e2:	d512      	bpl.n	800ca0a <__swsetup_r+0x7a>
 800c9e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9e6:	b141      	cbz	r1, 800c9fa <__swsetup_r+0x6a>
 800c9e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9ec:	4299      	cmp	r1, r3
 800c9ee:	d002      	beq.n	800c9f6 <__swsetup_r+0x66>
 800c9f0:	4630      	mov	r0, r6
 800c9f2:	f000 fa63 	bl	800cebc <_free_r>
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	6363      	str	r3, [r4, #52]	; 0x34
 800c9fa:	89a3      	ldrh	r3, [r4, #12]
 800c9fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca00:	81a3      	strh	r3, [r4, #12]
 800ca02:	2300      	movs	r3, #0
 800ca04:	6063      	str	r3, [r4, #4]
 800ca06:	6923      	ldr	r3, [r4, #16]
 800ca08:	6023      	str	r3, [r4, #0]
 800ca0a:	89a3      	ldrh	r3, [r4, #12]
 800ca0c:	f043 0308 	orr.w	r3, r3, #8
 800ca10:	81a3      	strh	r3, [r4, #12]
 800ca12:	6923      	ldr	r3, [r4, #16]
 800ca14:	b94b      	cbnz	r3, 800ca2a <__swsetup_r+0x9a>
 800ca16:	89a3      	ldrh	r3, [r4, #12]
 800ca18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca20:	d003      	beq.n	800ca2a <__swsetup_r+0x9a>
 800ca22:	4621      	mov	r1, r4
 800ca24:	4630      	mov	r0, r6
 800ca26:	f000 fa09 	bl	800ce3c <__smakebuf_r>
 800ca2a:	89a0      	ldrh	r0, [r4, #12]
 800ca2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca30:	f010 0301 	ands.w	r3, r0, #1
 800ca34:	d00a      	beq.n	800ca4c <__swsetup_r+0xbc>
 800ca36:	2300      	movs	r3, #0
 800ca38:	60a3      	str	r3, [r4, #8]
 800ca3a:	6963      	ldr	r3, [r4, #20]
 800ca3c:	425b      	negs	r3, r3
 800ca3e:	61a3      	str	r3, [r4, #24]
 800ca40:	6923      	ldr	r3, [r4, #16]
 800ca42:	b943      	cbnz	r3, 800ca56 <__swsetup_r+0xc6>
 800ca44:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ca48:	d1ba      	bne.n	800c9c0 <__swsetup_r+0x30>
 800ca4a:	bd70      	pop	{r4, r5, r6, pc}
 800ca4c:	0781      	lsls	r1, r0, #30
 800ca4e:	bf58      	it	pl
 800ca50:	6963      	ldrpl	r3, [r4, #20]
 800ca52:	60a3      	str	r3, [r4, #8]
 800ca54:	e7f4      	b.n	800ca40 <__swsetup_r+0xb0>
 800ca56:	2000      	movs	r0, #0
 800ca58:	e7f7      	b.n	800ca4a <__swsetup_r+0xba>
 800ca5a:	bf00      	nop
 800ca5c:	24000018 	.word	0x24000018
 800ca60:	0800d5b0 	.word	0x0800d5b0
 800ca64:	0800d5d0 	.word	0x0800d5d0
 800ca68:	0800d590 	.word	0x0800d590

0800ca6c <abort>:
 800ca6c:	b508      	push	{r3, lr}
 800ca6e:	2006      	movs	r0, #6
 800ca70:	f000 fb3c 	bl	800d0ec <raise>
 800ca74:	2001      	movs	r0, #1
 800ca76:	f7f4 fe73 	bl	8001760 <_exit>
	...

0800ca7c <__sflush_r>:
 800ca7c:	898a      	ldrh	r2, [r1, #12]
 800ca7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca82:	4605      	mov	r5, r0
 800ca84:	0710      	lsls	r0, r2, #28
 800ca86:	460c      	mov	r4, r1
 800ca88:	d458      	bmi.n	800cb3c <__sflush_r+0xc0>
 800ca8a:	684b      	ldr	r3, [r1, #4]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	dc05      	bgt.n	800ca9c <__sflush_r+0x20>
 800ca90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	dc02      	bgt.n	800ca9c <__sflush_r+0x20>
 800ca96:	2000      	movs	r0, #0
 800ca98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ca9e:	2e00      	cmp	r6, #0
 800caa0:	d0f9      	beq.n	800ca96 <__sflush_r+0x1a>
 800caa2:	2300      	movs	r3, #0
 800caa4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800caa8:	682f      	ldr	r7, [r5, #0]
 800caaa:	602b      	str	r3, [r5, #0]
 800caac:	d032      	beq.n	800cb14 <__sflush_r+0x98>
 800caae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cab0:	89a3      	ldrh	r3, [r4, #12]
 800cab2:	075a      	lsls	r2, r3, #29
 800cab4:	d505      	bpl.n	800cac2 <__sflush_r+0x46>
 800cab6:	6863      	ldr	r3, [r4, #4]
 800cab8:	1ac0      	subs	r0, r0, r3
 800caba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cabc:	b10b      	cbz	r3, 800cac2 <__sflush_r+0x46>
 800cabe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cac0:	1ac0      	subs	r0, r0, r3
 800cac2:	2300      	movs	r3, #0
 800cac4:	4602      	mov	r2, r0
 800cac6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cac8:	6a21      	ldr	r1, [r4, #32]
 800caca:	4628      	mov	r0, r5
 800cacc:	47b0      	blx	r6
 800cace:	1c43      	adds	r3, r0, #1
 800cad0:	89a3      	ldrh	r3, [r4, #12]
 800cad2:	d106      	bne.n	800cae2 <__sflush_r+0x66>
 800cad4:	6829      	ldr	r1, [r5, #0]
 800cad6:	291d      	cmp	r1, #29
 800cad8:	d82c      	bhi.n	800cb34 <__sflush_r+0xb8>
 800cada:	4a2a      	ldr	r2, [pc, #168]	; (800cb84 <__sflush_r+0x108>)
 800cadc:	40ca      	lsrs	r2, r1
 800cade:	07d6      	lsls	r6, r2, #31
 800cae0:	d528      	bpl.n	800cb34 <__sflush_r+0xb8>
 800cae2:	2200      	movs	r2, #0
 800cae4:	6062      	str	r2, [r4, #4]
 800cae6:	04d9      	lsls	r1, r3, #19
 800cae8:	6922      	ldr	r2, [r4, #16]
 800caea:	6022      	str	r2, [r4, #0]
 800caec:	d504      	bpl.n	800caf8 <__sflush_r+0x7c>
 800caee:	1c42      	adds	r2, r0, #1
 800caf0:	d101      	bne.n	800caf6 <__sflush_r+0x7a>
 800caf2:	682b      	ldr	r3, [r5, #0]
 800caf4:	b903      	cbnz	r3, 800caf8 <__sflush_r+0x7c>
 800caf6:	6560      	str	r0, [r4, #84]	; 0x54
 800caf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cafa:	602f      	str	r7, [r5, #0]
 800cafc:	2900      	cmp	r1, #0
 800cafe:	d0ca      	beq.n	800ca96 <__sflush_r+0x1a>
 800cb00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb04:	4299      	cmp	r1, r3
 800cb06:	d002      	beq.n	800cb0e <__sflush_r+0x92>
 800cb08:	4628      	mov	r0, r5
 800cb0a:	f000 f9d7 	bl	800cebc <_free_r>
 800cb0e:	2000      	movs	r0, #0
 800cb10:	6360      	str	r0, [r4, #52]	; 0x34
 800cb12:	e7c1      	b.n	800ca98 <__sflush_r+0x1c>
 800cb14:	6a21      	ldr	r1, [r4, #32]
 800cb16:	2301      	movs	r3, #1
 800cb18:	4628      	mov	r0, r5
 800cb1a:	47b0      	blx	r6
 800cb1c:	1c41      	adds	r1, r0, #1
 800cb1e:	d1c7      	bne.n	800cab0 <__sflush_r+0x34>
 800cb20:	682b      	ldr	r3, [r5, #0]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d0c4      	beq.n	800cab0 <__sflush_r+0x34>
 800cb26:	2b1d      	cmp	r3, #29
 800cb28:	d001      	beq.n	800cb2e <__sflush_r+0xb2>
 800cb2a:	2b16      	cmp	r3, #22
 800cb2c:	d101      	bne.n	800cb32 <__sflush_r+0xb6>
 800cb2e:	602f      	str	r7, [r5, #0]
 800cb30:	e7b1      	b.n	800ca96 <__sflush_r+0x1a>
 800cb32:	89a3      	ldrh	r3, [r4, #12]
 800cb34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb38:	81a3      	strh	r3, [r4, #12]
 800cb3a:	e7ad      	b.n	800ca98 <__sflush_r+0x1c>
 800cb3c:	690f      	ldr	r7, [r1, #16]
 800cb3e:	2f00      	cmp	r7, #0
 800cb40:	d0a9      	beq.n	800ca96 <__sflush_r+0x1a>
 800cb42:	0793      	lsls	r3, r2, #30
 800cb44:	680e      	ldr	r6, [r1, #0]
 800cb46:	bf08      	it	eq
 800cb48:	694b      	ldreq	r3, [r1, #20]
 800cb4a:	600f      	str	r7, [r1, #0]
 800cb4c:	bf18      	it	ne
 800cb4e:	2300      	movne	r3, #0
 800cb50:	eba6 0807 	sub.w	r8, r6, r7
 800cb54:	608b      	str	r3, [r1, #8]
 800cb56:	f1b8 0f00 	cmp.w	r8, #0
 800cb5a:	dd9c      	ble.n	800ca96 <__sflush_r+0x1a>
 800cb5c:	6a21      	ldr	r1, [r4, #32]
 800cb5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cb60:	4643      	mov	r3, r8
 800cb62:	463a      	mov	r2, r7
 800cb64:	4628      	mov	r0, r5
 800cb66:	47b0      	blx	r6
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	dc06      	bgt.n	800cb7a <__sflush_r+0xfe>
 800cb6c:	89a3      	ldrh	r3, [r4, #12]
 800cb6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb72:	81a3      	strh	r3, [r4, #12]
 800cb74:	f04f 30ff 	mov.w	r0, #4294967295
 800cb78:	e78e      	b.n	800ca98 <__sflush_r+0x1c>
 800cb7a:	4407      	add	r7, r0
 800cb7c:	eba8 0800 	sub.w	r8, r8, r0
 800cb80:	e7e9      	b.n	800cb56 <__sflush_r+0xda>
 800cb82:	bf00      	nop
 800cb84:	20400001 	.word	0x20400001

0800cb88 <_fflush_r>:
 800cb88:	b538      	push	{r3, r4, r5, lr}
 800cb8a:	690b      	ldr	r3, [r1, #16]
 800cb8c:	4605      	mov	r5, r0
 800cb8e:	460c      	mov	r4, r1
 800cb90:	b913      	cbnz	r3, 800cb98 <_fflush_r+0x10>
 800cb92:	2500      	movs	r5, #0
 800cb94:	4628      	mov	r0, r5
 800cb96:	bd38      	pop	{r3, r4, r5, pc}
 800cb98:	b118      	cbz	r0, 800cba2 <_fflush_r+0x1a>
 800cb9a:	6983      	ldr	r3, [r0, #24]
 800cb9c:	b90b      	cbnz	r3, 800cba2 <_fflush_r+0x1a>
 800cb9e:	f000 f887 	bl	800ccb0 <__sinit>
 800cba2:	4b14      	ldr	r3, [pc, #80]	; (800cbf4 <_fflush_r+0x6c>)
 800cba4:	429c      	cmp	r4, r3
 800cba6:	d11b      	bne.n	800cbe0 <_fflush_r+0x58>
 800cba8:	686c      	ldr	r4, [r5, #4]
 800cbaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d0ef      	beq.n	800cb92 <_fflush_r+0xa>
 800cbb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cbb4:	07d0      	lsls	r0, r2, #31
 800cbb6:	d404      	bmi.n	800cbc2 <_fflush_r+0x3a>
 800cbb8:	0599      	lsls	r1, r3, #22
 800cbba:	d402      	bmi.n	800cbc2 <_fflush_r+0x3a>
 800cbbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbbe:	f000 f915 	bl	800cdec <__retarget_lock_acquire_recursive>
 800cbc2:	4628      	mov	r0, r5
 800cbc4:	4621      	mov	r1, r4
 800cbc6:	f7ff ff59 	bl	800ca7c <__sflush_r>
 800cbca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cbcc:	07da      	lsls	r2, r3, #31
 800cbce:	4605      	mov	r5, r0
 800cbd0:	d4e0      	bmi.n	800cb94 <_fflush_r+0xc>
 800cbd2:	89a3      	ldrh	r3, [r4, #12]
 800cbd4:	059b      	lsls	r3, r3, #22
 800cbd6:	d4dd      	bmi.n	800cb94 <_fflush_r+0xc>
 800cbd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cbda:	f000 f908 	bl	800cdee <__retarget_lock_release_recursive>
 800cbde:	e7d9      	b.n	800cb94 <_fflush_r+0xc>
 800cbe0:	4b05      	ldr	r3, [pc, #20]	; (800cbf8 <_fflush_r+0x70>)
 800cbe2:	429c      	cmp	r4, r3
 800cbe4:	d101      	bne.n	800cbea <_fflush_r+0x62>
 800cbe6:	68ac      	ldr	r4, [r5, #8]
 800cbe8:	e7df      	b.n	800cbaa <_fflush_r+0x22>
 800cbea:	4b04      	ldr	r3, [pc, #16]	; (800cbfc <_fflush_r+0x74>)
 800cbec:	429c      	cmp	r4, r3
 800cbee:	bf08      	it	eq
 800cbf0:	68ec      	ldreq	r4, [r5, #12]
 800cbf2:	e7da      	b.n	800cbaa <_fflush_r+0x22>
 800cbf4:	0800d5b0 	.word	0x0800d5b0
 800cbf8:	0800d5d0 	.word	0x0800d5d0
 800cbfc:	0800d590 	.word	0x0800d590

0800cc00 <std>:
 800cc00:	2300      	movs	r3, #0
 800cc02:	b510      	push	{r4, lr}
 800cc04:	4604      	mov	r4, r0
 800cc06:	e9c0 3300 	strd	r3, r3, [r0]
 800cc0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc0e:	6083      	str	r3, [r0, #8]
 800cc10:	8181      	strh	r1, [r0, #12]
 800cc12:	6643      	str	r3, [r0, #100]	; 0x64
 800cc14:	81c2      	strh	r2, [r0, #14]
 800cc16:	6183      	str	r3, [r0, #24]
 800cc18:	4619      	mov	r1, r3
 800cc1a:	2208      	movs	r2, #8
 800cc1c:	305c      	adds	r0, #92	; 0x5c
 800cc1e:	f7ff fae1 	bl	800c1e4 <memset>
 800cc22:	4b05      	ldr	r3, [pc, #20]	; (800cc38 <std+0x38>)
 800cc24:	6263      	str	r3, [r4, #36]	; 0x24
 800cc26:	4b05      	ldr	r3, [pc, #20]	; (800cc3c <std+0x3c>)
 800cc28:	62a3      	str	r3, [r4, #40]	; 0x28
 800cc2a:	4b05      	ldr	r3, [pc, #20]	; (800cc40 <std+0x40>)
 800cc2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cc2e:	4b05      	ldr	r3, [pc, #20]	; (800cc44 <std+0x44>)
 800cc30:	6224      	str	r4, [r4, #32]
 800cc32:	6323      	str	r3, [r4, #48]	; 0x30
 800cc34:	bd10      	pop	{r4, pc}
 800cc36:	bf00      	nop
 800cc38:	0800d125 	.word	0x0800d125
 800cc3c:	0800d147 	.word	0x0800d147
 800cc40:	0800d17f 	.word	0x0800d17f
 800cc44:	0800d1a3 	.word	0x0800d1a3

0800cc48 <_cleanup_r>:
 800cc48:	4901      	ldr	r1, [pc, #4]	; (800cc50 <_cleanup_r+0x8>)
 800cc4a:	f000 b8af 	b.w	800cdac <_fwalk_reent>
 800cc4e:	bf00      	nop
 800cc50:	0800cb89 	.word	0x0800cb89

0800cc54 <__sfmoreglue>:
 800cc54:	b570      	push	{r4, r5, r6, lr}
 800cc56:	2268      	movs	r2, #104	; 0x68
 800cc58:	1e4d      	subs	r5, r1, #1
 800cc5a:	4355      	muls	r5, r2
 800cc5c:	460e      	mov	r6, r1
 800cc5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cc62:	f000 f997 	bl	800cf94 <_malloc_r>
 800cc66:	4604      	mov	r4, r0
 800cc68:	b140      	cbz	r0, 800cc7c <__sfmoreglue+0x28>
 800cc6a:	2100      	movs	r1, #0
 800cc6c:	e9c0 1600 	strd	r1, r6, [r0]
 800cc70:	300c      	adds	r0, #12
 800cc72:	60a0      	str	r0, [r4, #8]
 800cc74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cc78:	f7ff fab4 	bl	800c1e4 <memset>
 800cc7c:	4620      	mov	r0, r4
 800cc7e:	bd70      	pop	{r4, r5, r6, pc}

0800cc80 <__sfp_lock_acquire>:
 800cc80:	4801      	ldr	r0, [pc, #4]	; (800cc88 <__sfp_lock_acquire+0x8>)
 800cc82:	f000 b8b3 	b.w	800cdec <__retarget_lock_acquire_recursive>
 800cc86:	bf00      	nop
 800cc88:	24012af9 	.word	0x24012af9

0800cc8c <__sfp_lock_release>:
 800cc8c:	4801      	ldr	r0, [pc, #4]	; (800cc94 <__sfp_lock_release+0x8>)
 800cc8e:	f000 b8ae 	b.w	800cdee <__retarget_lock_release_recursive>
 800cc92:	bf00      	nop
 800cc94:	24012af9 	.word	0x24012af9

0800cc98 <__sinit_lock_acquire>:
 800cc98:	4801      	ldr	r0, [pc, #4]	; (800cca0 <__sinit_lock_acquire+0x8>)
 800cc9a:	f000 b8a7 	b.w	800cdec <__retarget_lock_acquire_recursive>
 800cc9e:	bf00      	nop
 800cca0:	24012afa 	.word	0x24012afa

0800cca4 <__sinit_lock_release>:
 800cca4:	4801      	ldr	r0, [pc, #4]	; (800ccac <__sinit_lock_release+0x8>)
 800cca6:	f000 b8a2 	b.w	800cdee <__retarget_lock_release_recursive>
 800ccaa:	bf00      	nop
 800ccac:	24012afa 	.word	0x24012afa

0800ccb0 <__sinit>:
 800ccb0:	b510      	push	{r4, lr}
 800ccb2:	4604      	mov	r4, r0
 800ccb4:	f7ff fff0 	bl	800cc98 <__sinit_lock_acquire>
 800ccb8:	69a3      	ldr	r3, [r4, #24]
 800ccba:	b11b      	cbz	r3, 800ccc4 <__sinit+0x14>
 800ccbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccc0:	f7ff bff0 	b.w	800cca4 <__sinit_lock_release>
 800ccc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ccc8:	6523      	str	r3, [r4, #80]	; 0x50
 800ccca:	4b13      	ldr	r3, [pc, #76]	; (800cd18 <__sinit+0x68>)
 800cccc:	4a13      	ldr	r2, [pc, #76]	; (800cd1c <__sinit+0x6c>)
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	62a2      	str	r2, [r4, #40]	; 0x28
 800ccd2:	42a3      	cmp	r3, r4
 800ccd4:	bf04      	itt	eq
 800ccd6:	2301      	moveq	r3, #1
 800ccd8:	61a3      	streq	r3, [r4, #24]
 800ccda:	4620      	mov	r0, r4
 800ccdc:	f000 f820 	bl	800cd20 <__sfp>
 800cce0:	6060      	str	r0, [r4, #4]
 800cce2:	4620      	mov	r0, r4
 800cce4:	f000 f81c 	bl	800cd20 <__sfp>
 800cce8:	60a0      	str	r0, [r4, #8]
 800ccea:	4620      	mov	r0, r4
 800ccec:	f000 f818 	bl	800cd20 <__sfp>
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	60e0      	str	r0, [r4, #12]
 800ccf4:	2104      	movs	r1, #4
 800ccf6:	6860      	ldr	r0, [r4, #4]
 800ccf8:	f7ff ff82 	bl	800cc00 <std>
 800ccfc:	68a0      	ldr	r0, [r4, #8]
 800ccfe:	2201      	movs	r2, #1
 800cd00:	2109      	movs	r1, #9
 800cd02:	f7ff ff7d 	bl	800cc00 <std>
 800cd06:	68e0      	ldr	r0, [r4, #12]
 800cd08:	2202      	movs	r2, #2
 800cd0a:	2112      	movs	r1, #18
 800cd0c:	f7ff ff78 	bl	800cc00 <std>
 800cd10:	2301      	movs	r3, #1
 800cd12:	61a3      	str	r3, [r4, #24]
 800cd14:	e7d2      	b.n	800ccbc <__sinit+0xc>
 800cd16:	bf00      	nop
 800cd18:	0800d558 	.word	0x0800d558
 800cd1c:	0800cc49 	.word	0x0800cc49

0800cd20 <__sfp>:
 800cd20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd22:	4607      	mov	r7, r0
 800cd24:	f7ff ffac 	bl	800cc80 <__sfp_lock_acquire>
 800cd28:	4b1e      	ldr	r3, [pc, #120]	; (800cda4 <__sfp+0x84>)
 800cd2a:	681e      	ldr	r6, [r3, #0]
 800cd2c:	69b3      	ldr	r3, [r6, #24]
 800cd2e:	b913      	cbnz	r3, 800cd36 <__sfp+0x16>
 800cd30:	4630      	mov	r0, r6
 800cd32:	f7ff ffbd 	bl	800ccb0 <__sinit>
 800cd36:	3648      	adds	r6, #72	; 0x48
 800cd38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cd3c:	3b01      	subs	r3, #1
 800cd3e:	d503      	bpl.n	800cd48 <__sfp+0x28>
 800cd40:	6833      	ldr	r3, [r6, #0]
 800cd42:	b30b      	cbz	r3, 800cd88 <__sfp+0x68>
 800cd44:	6836      	ldr	r6, [r6, #0]
 800cd46:	e7f7      	b.n	800cd38 <__sfp+0x18>
 800cd48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cd4c:	b9d5      	cbnz	r5, 800cd84 <__sfp+0x64>
 800cd4e:	4b16      	ldr	r3, [pc, #88]	; (800cda8 <__sfp+0x88>)
 800cd50:	60e3      	str	r3, [r4, #12]
 800cd52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cd56:	6665      	str	r5, [r4, #100]	; 0x64
 800cd58:	f000 f847 	bl	800cdea <__retarget_lock_init_recursive>
 800cd5c:	f7ff ff96 	bl	800cc8c <__sfp_lock_release>
 800cd60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cd64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cd68:	6025      	str	r5, [r4, #0]
 800cd6a:	61a5      	str	r5, [r4, #24]
 800cd6c:	2208      	movs	r2, #8
 800cd6e:	4629      	mov	r1, r5
 800cd70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cd74:	f7ff fa36 	bl	800c1e4 <memset>
 800cd78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cd7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cd80:	4620      	mov	r0, r4
 800cd82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd84:	3468      	adds	r4, #104	; 0x68
 800cd86:	e7d9      	b.n	800cd3c <__sfp+0x1c>
 800cd88:	2104      	movs	r1, #4
 800cd8a:	4638      	mov	r0, r7
 800cd8c:	f7ff ff62 	bl	800cc54 <__sfmoreglue>
 800cd90:	4604      	mov	r4, r0
 800cd92:	6030      	str	r0, [r6, #0]
 800cd94:	2800      	cmp	r0, #0
 800cd96:	d1d5      	bne.n	800cd44 <__sfp+0x24>
 800cd98:	f7ff ff78 	bl	800cc8c <__sfp_lock_release>
 800cd9c:	230c      	movs	r3, #12
 800cd9e:	603b      	str	r3, [r7, #0]
 800cda0:	e7ee      	b.n	800cd80 <__sfp+0x60>
 800cda2:	bf00      	nop
 800cda4:	0800d558 	.word	0x0800d558
 800cda8:	ffff0001 	.word	0xffff0001

0800cdac <_fwalk_reent>:
 800cdac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cdb0:	4606      	mov	r6, r0
 800cdb2:	4688      	mov	r8, r1
 800cdb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cdb8:	2700      	movs	r7, #0
 800cdba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cdbe:	f1b9 0901 	subs.w	r9, r9, #1
 800cdc2:	d505      	bpl.n	800cdd0 <_fwalk_reent+0x24>
 800cdc4:	6824      	ldr	r4, [r4, #0]
 800cdc6:	2c00      	cmp	r4, #0
 800cdc8:	d1f7      	bne.n	800cdba <_fwalk_reent+0xe>
 800cdca:	4638      	mov	r0, r7
 800cdcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cdd0:	89ab      	ldrh	r3, [r5, #12]
 800cdd2:	2b01      	cmp	r3, #1
 800cdd4:	d907      	bls.n	800cde6 <_fwalk_reent+0x3a>
 800cdd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cdda:	3301      	adds	r3, #1
 800cddc:	d003      	beq.n	800cde6 <_fwalk_reent+0x3a>
 800cdde:	4629      	mov	r1, r5
 800cde0:	4630      	mov	r0, r6
 800cde2:	47c0      	blx	r8
 800cde4:	4307      	orrs	r7, r0
 800cde6:	3568      	adds	r5, #104	; 0x68
 800cde8:	e7e9      	b.n	800cdbe <_fwalk_reent+0x12>

0800cdea <__retarget_lock_init_recursive>:
 800cdea:	4770      	bx	lr

0800cdec <__retarget_lock_acquire_recursive>:
 800cdec:	4770      	bx	lr

0800cdee <__retarget_lock_release_recursive>:
 800cdee:	4770      	bx	lr

0800cdf0 <__swhatbuf_r>:
 800cdf0:	b570      	push	{r4, r5, r6, lr}
 800cdf2:	460e      	mov	r6, r1
 800cdf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdf8:	2900      	cmp	r1, #0
 800cdfa:	b096      	sub	sp, #88	; 0x58
 800cdfc:	4614      	mov	r4, r2
 800cdfe:	461d      	mov	r5, r3
 800ce00:	da08      	bge.n	800ce14 <__swhatbuf_r+0x24>
 800ce02:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ce06:	2200      	movs	r2, #0
 800ce08:	602a      	str	r2, [r5, #0]
 800ce0a:	061a      	lsls	r2, r3, #24
 800ce0c:	d410      	bmi.n	800ce30 <__swhatbuf_r+0x40>
 800ce0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce12:	e00e      	b.n	800ce32 <__swhatbuf_r+0x42>
 800ce14:	466a      	mov	r2, sp
 800ce16:	f000 f9eb 	bl	800d1f0 <_fstat_r>
 800ce1a:	2800      	cmp	r0, #0
 800ce1c:	dbf1      	blt.n	800ce02 <__swhatbuf_r+0x12>
 800ce1e:	9a01      	ldr	r2, [sp, #4]
 800ce20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ce24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ce28:	425a      	negs	r2, r3
 800ce2a:	415a      	adcs	r2, r3
 800ce2c:	602a      	str	r2, [r5, #0]
 800ce2e:	e7ee      	b.n	800ce0e <__swhatbuf_r+0x1e>
 800ce30:	2340      	movs	r3, #64	; 0x40
 800ce32:	2000      	movs	r0, #0
 800ce34:	6023      	str	r3, [r4, #0]
 800ce36:	b016      	add	sp, #88	; 0x58
 800ce38:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ce3c <__smakebuf_r>:
 800ce3c:	898b      	ldrh	r3, [r1, #12]
 800ce3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce40:	079d      	lsls	r5, r3, #30
 800ce42:	4606      	mov	r6, r0
 800ce44:	460c      	mov	r4, r1
 800ce46:	d507      	bpl.n	800ce58 <__smakebuf_r+0x1c>
 800ce48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce4c:	6023      	str	r3, [r4, #0]
 800ce4e:	6123      	str	r3, [r4, #16]
 800ce50:	2301      	movs	r3, #1
 800ce52:	6163      	str	r3, [r4, #20]
 800ce54:	b002      	add	sp, #8
 800ce56:	bd70      	pop	{r4, r5, r6, pc}
 800ce58:	ab01      	add	r3, sp, #4
 800ce5a:	466a      	mov	r2, sp
 800ce5c:	f7ff ffc8 	bl	800cdf0 <__swhatbuf_r>
 800ce60:	9900      	ldr	r1, [sp, #0]
 800ce62:	4605      	mov	r5, r0
 800ce64:	4630      	mov	r0, r6
 800ce66:	f000 f895 	bl	800cf94 <_malloc_r>
 800ce6a:	b948      	cbnz	r0, 800ce80 <__smakebuf_r+0x44>
 800ce6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce70:	059a      	lsls	r2, r3, #22
 800ce72:	d4ef      	bmi.n	800ce54 <__smakebuf_r+0x18>
 800ce74:	f023 0303 	bic.w	r3, r3, #3
 800ce78:	f043 0302 	orr.w	r3, r3, #2
 800ce7c:	81a3      	strh	r3, [r4, #12]
 800ce7e:	e7e3      	b.n	800ce48 <__smakebuf_r+0xc>
 800ce80:	4b0d      	ldr	r3, [pc, #52]	; (800ceb8 <__smakebuf_r+0x7c>)
 800ce82:	62b3      	str	r3, [r6, #40]	; 0x28
 800ce84:	89a3      	ldrh	r3, [r4, #12]
 800ce86:	6020      	str	r0, [r4, #0]
 800ce88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce8c:	81a3      	strh	r3, [r4, #12]
 800ce8e:	9b00      	ldr	r3, [sp, #0]
 800ce90:	6163      	str	r3, [r4, #20]
 800ce92:	9b01      	ldr	r3, [sp, #4]
 800ce94:	6120      	str	r0, [r4, #16]
 800ce96:	b15b      	cbz	r3, 800ceb0 <__smakebuf_r+0x74>
 800ce98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce9c:	4630      	mov	r0, r6
 800ce9e:	f000 f9b9 	bl	800d214 <_isatty_r>
 800cea2:	b128      	cbz	r0, 800ceb0 <__smakebuf_r+0x74>
 800cea4:	89a3      	ldrh	r3, [r4, #12]
 800cea6:	f023 0303 	bic.w	r3, r3, #3
 800ceaa:	f043 0301 	orr.w	r3, r3, #1
 800ceae:	81a3      	strh	r3, [r4, #12]
 800ceb0:	89a0      	ldrh	r0, [r4, #12]
 800ceb2:	4305      	orrs	r5, r0
 800ceb4:	81a5      	strh	r5, [r4, #12]
 800ceb6:	e7cd      	b.n	800ce54 <__smakebuf_r+0x18>
 800ceb8:	0800cc49 	.word	0x0800cc49

0800cebc <_free_r>:
 800cebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cebe:	2900      	cmp	r1, #0
 800cec0:	d044      	beq.n	800cf4c <_free_r+0x90>
 800cec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cec6:	9001      	str	r0, [sp, #4]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	f1a1 0404 	sub.w	r4, r1, #4
 800cece:	bfb8      	it	lt
 800ced0:	18e4      	addlt	r4, r4, r3
 800ced2:	f000 f9c1 	bl	800d258 <__malloc_lock>
 800ced6:	4a1e      	ldr	r2, [pc, #120]	; (800cf50 <_free_r+0x94>)
 800ced8:	9801      	ldr	r0, [sp, #4]
 800ceda:	6813      	ldr	r3, [r2, #0]
 800cedc:	b933      	cbnz	r3, 800ceec <_free_r+0x30>
 800cede:	6063      	str	r3, [r4, #4]
 800cee0:	6014      	str	r4, [r2, #0]
 800cee2:	b003      	add	sp, #12
 800cee4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cee8:	f000 b9bc 	b.w	800d264 <__malloc_unlock>
 800ceec:	42a3      	cmp	r3, r4
 800ceee:	d908      	bls.n	800cf02 <_free_r+0x46>
 800cef0:	6825      	ldr	r5, [r4, #0]
 800cef2:	1961      	adds	r1, r4, r5
 800cef4:	428b      	cmp	r3, r1
 800cef6:	bf01      	itttt	eq
 800cef8:	6819      	ldreq	r1, [r3, #0]
 800cefa:	685b      	ldreq	r3, [r3, #4]
 800cefc:	1949      	addeq	r1, r1, r5
 800cefe:	6021      	streq	r1, [r4, #0]
 800cf00:	e7ed      	b.n	800cede <_free_r+0x22>
 800cf02:	461a      	mov	r2, r3
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	b10b      	cbz	r3, 800cf0c <_free_r+0x50>
 800cf08:	42a3      	cmp	r3, r4
 800cf0a:	d9fa      	bls.n	800cf02 <_free_r+0x46>
 800cf0c:	6811      	ldr	r1, [r2, #0]
 800cf0e:	1855      	adds	r5, r2, r1
 800cf10:	42a5      	cmp	r5, r4
 800cf12:	d10b      	bne.n	800cf2c <_free_r+0x70>
 800cf14:	6824      	ldr	r4, [r4, #0]
 800cf16:	4421      	add	r1, r4
 800cf18:	1854      	adds	r4, r2, r1
 800cf1a:	42a3      	cmp	r3, r4
 800cf1c:	6011      	str	r1, [r2, #0]
 800cf1e:	d1e0      	bne.n	800cee2 <_free_r+0x26>
 800cf20:	681c      	ldr	r4, [r3, #0]
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	6053      	str	r3, [r2, #4]
 800cf26:	4421      	add	r1, r4
 800cf28:	6011      	str	r1, [r2, #0]
 800cf2a:	e7da      	b.n	800cee2 <_free_r+0x26>
 800cf2c:	d902      	bls.n	800cf34 <_free_r+0x78>
 800cf2e:	230c      	movs	r3, #12
 800cf30:	6003      	str	r3, [r0, #0]
 800cf32:	e7d6      	b.n	800cee2 <_free_r+0x26>
 800cf34:	6825      	ldr	r5, [r4, #0]
 800cf36:	1961      	adds	r1, r4, r5
 800cf38:	428b      	cmp	r3, r1
 800cf3a:	bf04      	itt	eq
 800cf3c:	6819      	ldreq	r1, [r3, #0]
 800cf3e:	685b      	ldreq	r3, [r3, #4]
 800cf40:	6063      	str	r3, [r4, #4]
 800cf42:	bf04      	itt	eq
 800cf44:	1949      	addeq	r1, r1, r5
 800cf46:	6021      	streq	r1, [r4, #0]
 800cf48:	6054      	str	r4, [r2, #4]
 800cf4a:	e7ca      	b.n	800cee2 <_free_r+0x26>
 800cf4c:	b003      	add	sp, #12
 800cf4e:	bd30      	pop	{r4, r5, pc}
 800cf50:	24012afc 	.word	0x24012afc

0800cf54 <sbrk_aligned>:
 800cf54:	b570      	push	{r4, r5, r6, lr}
 800cf56:	4e0e      	ldr	r6, [pc, #56]	; (800cf90 <sbrk_aligned+0x3c>)
 800cf58:	460c      	mov	r4, r1
 800cf5a:	6831      	ldr	r1, [r6, #0]
 800cf5c:	4605      	mov	r5, r0
 800cf5e:	b911      	cbnz	r1, 800cf66 <sbrk_aligned+0x12>
 800cf60:	f000 f88c 	bl	800d07c <_sbrk_r>
 800cf64:	6030      	str	r0, [r6, #0]
 800cf66:	4621      	mov	r1, r4
 800cf68:	4628      	mov	r0, r5
 800cf6a:	f000 f887 	bl	800d07c <_sbrk_r>
 800cf6e:	1c43      	adds	r3, r0, #1
 800cf70:	d00a      	beq.n	800cf88 <sbrk_aligned+0x34>
 800cf72:	1cc4      	adds	r4, r0, #3
 800cf74:	f024 0403 	bic.w	r4, r4, #3
 800cf78:	42a0      	cmp	r0, r4
 800cf7a:	d007      	beq.n	800cf8c <sbrk_aligned+0x38>
 800cf7c:	1a21      	subs	r1, r4, r0
 800cf7e:	4628      	mov	r0, r5
 800cf80:	f000 f87c 	bl	800d07c <_sbrk_r>
 800cf84:	3001      	adds	r0, #1
 800cf86:	d101      	bne.n	800cf8c <sbrk_aligned+0x38>
 800cf88:	f04f 34ff 	mov.w	r4, #4294967295
 800cf8c:	4620      	mov	r0, r4
 800cf8e:	bd70      	pop	{r4, r5, r6, pc}
 800cf90:	24012b00 	.word	0x24012b00

0800cf94 <_malloc_r>:
 800cf94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf98:	1ccd      	adds	r5, r1, #3
 800cf9a:	f025 0503 	bic.w	r5, r5, #3
 800cf9e:	3508      	adds	r5, #8
 800cfa0:	2d0c      	cmp	r5, #12
 800cfa2:	bf38      	it	cc
 800cfa4:	250c      	movcc	r5, #12
 800cfa6:	2d00      	cmp	r5, #0
 800cfa8:	4607      	mov	r7, r0
 800cfaa:	db01      	blt.n	800cfb0 <_malloc_r+0x1c>
 800cfac:	42a9      	cmp	r1, r5
 800cfae:	d905      	bls.n	800cfbc <_malloc_r+0x28>
 800cfb0:	230c      	movs	r3, #12
 800cfb2:	603b      	str	r3, [r7, #0]
 800cfb4:	2600      	movs	r6, #0
 800cfb6:	4630      	mov	r0, r6
 800cfb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfbc:	4e2e      	ldr	r6, [pc, #184]	; (800d078 <_malloc_r+0xe4>)
 800cfbe:	f000 f94b 	bl	800d258 <__malloc_lock>
 800cfc2:	6833      	ldr	r3, [r6, #0]
 800cfc4:	461c      	mov	r4, r3
 800cfc6:	bb34      	cbnz	r4, 800d016 <_malloc_r+0x82>
 800cfc8:	4629      	mov	r1, r5
 800cfca:	4638      	mov	r0, r7
 800cfcc:	f7ff ffc2 	bl	800cf54 <sbrk_aligned>
 800cfd0:	1c43      	adds	r3, r0, #1
 800cfd2:	4604      	mov	r4, r0
 800cfd4:	d14d      	bne.n	800d072 <_malloc_r+0xde>
 800cfd6:	6834      	ldr	r4, [r6, #0]
 800cfd8:	4626      	mov	r6, r4
 800cfda:	2e00      	cmp	r6, #0
 800cfdc:	d140      	bne.n	800d060 <_malloc_r+0xcc>
 800cfde:	6823      	ldr	r3, [r4, #0]
 800cfe0:	4631      	mov	r1, r6
 800cfe2:	4638      	mov	r0, r7
 800cfe4:	eb04 0803 	add.w	r8, r4, r3
 800cfe8:	f000 f848 	bl	800d07c <_sbrk_r>
 800cfec:	4580      	cmp	r8, r0
 800cfee:	d13a      	bne.n	800d066 <_malloc_r+0xd2>
 800cff0:	6821      	ldr	r1, [r4, #0]
 800cff2:	3503      	adds	r5, #3
 800cff4:	1a6d      	subs	r5, r5, r1
 800cff6:	f025 0503 	bic.w	r5, r5, #3
 800cffa:	3508      	adds	r5, #8
 800cffc:	2d0c      	cmp	r5, #12
 800cffe:	bf38      	it	cc
 800d000:	250c      	movcc	r5, #12
 800d002:	4629      	mov	r1, r5
 800d004:	4638      	mov	r0, r7
 800d006:	f7ff ffa5 	bl	800cf54 <sbrk_aligned>
 800d00a:	3001      	adds	r0, #1
 800d00c:	d02b      	beq.n	800d066 <_malloc_r+0xd2>
 800d00e:	6823      	ldr	r3, [r4, #0]
 800d010:	442b      	add	r3, r5
 800d012:	6023      	str	r3, [r4, #0]
 800d014:	e00e      	b.n	800d034 <_malloc_r+0xa0>
 800d016:	6822      	ldr	r2, [r4, #0]
 800d018:	1b52      	subs	r2, r2, r5
 800d01a:	d41e      	bmi.n	800d05a <_malloc_r+0xc6>
 800d01c:	2a0b      	cmp	r2, #11
 800d01e:	d916      	bls.n	800d04e <_malloc_r+0xba>
 800d020:	1961      	adds	r1, r4, r5
 800d022:	42a3      	cmp	r3, r4
 800d024:	6025      	str	r5, [r4, #0]
 800d026:	bf18      	it	ne
 800d028:	6059      	strne	r1, [r3, #4]
 800d02a:	6863      	ldr	r3, [r4, #4]
 800d02c:	bf08      	it	eq
 800d02e:	6031      	streq	r1, [r6, #0]
 800d030:	5162      	str	r2, [r4, r5]
 800d032:	604b      	str	r3, [r1, #4]
 800d034:	4638      	mov	r0, r7
 800d036:	f104 060b 	add.w	r6, r4, #11
 800d03a:	f000 f913 	bl	800d264 <__malloc_unlock>
 800d03e:	f026 0607 	bic.w	r6, r6, #7
 800d042:	1d23      	adds	r3, r4, #4
 800d044:	1af2      	subs	r2, r6, r3
 800d046:	d0b6      	beq.n	800cfb6 <_malloc_r+0x22>
 800d048:	1b9b      	subs	r3, r3, r6
 800d04a:	50a3      	str	r3, [r4, r2]
 800d04c:	e7b3      	b.n	800cfb6 <_malloc_r+0x22>
 800d04e:	6862      	ldr	r2, [r4, #4]
 800d050:	42a3      	cmp	r3, r4
 800d052:	bf0c      	ite	eq
 800d054:	6032      	streq	r2, [r6, #0]
 800d056:	605a      	strne	r2, [r3, #4]
 800d058:	e7ec      	b.n	800d034 <_malloc_r+0xa0>
 800d05a:	4623      	mov	r3, r4
 800d05c:	6864      	ldr	r4, [r4, #4]
 800d05e:	e7b2      	b.n	800cfc6 <_malloc_r+0x32>
 800d060:	4634      	mov	r4, r6
 800d062:	6876      	ldr	r6, [r6, #4]
 800d064:	e7b9      	b.n	800cfda <_malloc_r+0x46>
 800d066:	230c      	movs	r3, #12
 800d068:	603b      	str	r3, [r7, #0]
 800d06a:	4638      	mov	r0, r7
 800d06c:	f000 f8fa 	bl	800d264 <__malloc_unlock>
 800d070:	e7a1      	b.n	800cfb6 <_malloc_r+0x22>
 800d072:	6025      	str	r5, [r4, #0]
 800d074:	e7de      	b.n	800d034 <_malloc_r+0xa0>
 800d076:	bf00      	nop
 800d078:	24012afc 	.word	0x24012afc

0800d07c <_sbrk_r>:
 800d07c:	b538      	push	{r3, r4, r5, lr}
 800d07e:	4d06      	ldr	r5, [pc, #24]	; (800d098 <_sbrk_r+0x1c>)
 800d080:	2300      	movs	r3, #0
 800d082:	4604      	mov	r4, r0
 800d084:	4608      	mov	r0, r1
 800d086:	602b      	str	r3, [r5, #0]
 800d088:	f7f4 fbe2 	bl	8001850 <_sbrk>
 800d08c:	1c43      	adds	r3, r0, #1
 800d08e:	d102      	bne.n	800d096 <_sbrk_r+0x1a>
 800d090:	682b      	ldr	r3, [r5, #0]
 800d092:	b103      	cbz	r3, 800d096 <_sbrk_r+0x1a>
 800d094:	6023      	str	r3, [r4, #0]
 800d096:	bd38      	pop	{r3, r4, r5, pc}
 800d098:	24012b04 	.word	0x24012b04

0800d09c <_raise_r>:
 800d09c:	291f      	cmp	r1, #31
 800d09e:	b538      	push	{r3, r4, r5, lr}
 800d0a0:	4604      	mov	r4, r0
 800d0a2:	460d      	mov	r5, r1
 800d0a4:	d904      	bls.n	800d0b0 <_raise_r+0x14>
 800d0a6:	2316      	movs	r3, #22
 800d0a8:	6003      	str	r3, [r0, #0]
 800d0aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d0ae:	bd38      	pop	{r3, r4, r5, pc}
 800d0b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d0b2:	b112      	cbz	r2, 800d0ba <_raise_r+0x1e>
 800d0b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d0b8:	b94b      	cbnz	r3, 800d0ce <_raise_r+0x32>
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	f000 f830 	bl	800d120 <_getpid_r>
 800d0c0:	462a      	mov	r2, r5
 800d0c2:	4601      	mov	r1, r0
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0ca:	f000 b817 	b.w	800d0fc <_kill_r>
 800d0ce:	2b01      	cmp	r3, #1
 800d0d0:	d00a      	beq.n	800d0e8 <_raise_r+0x4c>
 800d0d2:	1c59      	adds	r1, r3, #1
 800d0d4:	d103      	bne.n	800d0de <_raise_r+0x42>
 800d0d6:	2316      	movs	r3, #22
 800d0d8:	6003      	str	r3, [r0, #0]
 800d0da:	2001      	movs	r0, #1
 800d0dc:	e7e7      	b.n	800d0ae <_raise_r+0x12>
 800d0de:	2400      	movs	r4, #0
 800d0e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d0e4:	4628      	mov	r0, r5
 800d0e6:	4798      	blx	r3
 800d0e8:	2000      	movs	r0, #0
 800d0ea:	e7e0      	b.n	800d0ae <_raise_r+0x12>

0800d0ec <raise>:
 800d0ec:	4b02      	ldr	r3, [pc, #8]	; (800d0f8 <raise+0xc>)
 800d0ee:	4601      	mov	r1, r0
 800d0f0:	6818      	ldr	r0, [r3, #0]
 800d0f2:	f7ff bfd3 	b.w	800d09c <_raise_r>
 800d0f6:	bf00      	nop
 800d0f8:	24000018 	.word	0x24000018

0800d0fc <_kill_r>:
 800d0fc:	b538      	push	{r3, r4, r5, lr}
 800d0fe:	4d07      	ldr	r5, [pc, #28]	; (800d11c <_kill_r+0x20>)
 800d100:	2300      	movs	r3, #0
 800d102:	4604      	mov	r4, r0
 800d104:	4608      	mov	r0, r1
 800d106:	4611      	mov	r1, r2
 800d108:	602b      	str	r3, [r5, #0]
 800d10a:	f7f4 fb19 	bl	8001740 <_kill>
 800d10e:	1c43      	adds	r3, r0, #1
 800d110:	d102      	bne.n	800d118 <_kill_r+0x1c>
 800d112:	682b      	ldr	r3, [r5, #0]
 800d114:	b103      	cbz	r3, 800d118 <_kill_r+0x1c>
 800d116:	6023      	str	r3, [r4, #0]
 800d118:	bd38      	pop	{r3, r4, r5, pc}
 800d11a:	bf00      	nop
 800d11c:	24012b04 	.word	0x24012b04

0800d120 <_getpid_r>:
 800d120:	f7f4 bb06 	b.w	8001730 <_getpid>

0800d124 <__sread>:
 800d124:	b510      	push	{r4, lr}
 800d126:	460c      	mov	r4, r1
 800d128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d12c:	f000 f8a0 	bl	800d270 <_read_r>
 800d130:	2800      	cmp	r0, #0
 800d132:	bfab      	itete	ge
 800d134:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d136:	89a3      	ldrhlt	r3, [r4, #12]
 800d138:	181b      	addge	r3, r3, r0
 800d13a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d13e:	bfac      	ite	ge
 800d140:	6563      	strge	r3, [r4, #84]	; 0x54
 800d142:	81a3      	strhlt	r3, [r4, #12]
 800d144:	bd10      	pop	{r4, pc}

0800d146 <__swrite>:
 800d146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d14a:	461f      	mov	r7, r3
 800d14c:	898b      	ldrh	r3, [r1, #12]
 800d14e:	05db      	lsls	r3, r3, #23
 800d150:	4605      	mov	r5, r0
 800d152:	460c      	mov	r4, r1
 800d154:	4616      	mov	r6, r2
 800d156:	d505      	bpl.n	800d164 <__swrite+0x1e>
 800d158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d15c:	2302      	movs	r3, #2
 800d15e:	2200      	movs	r2, #0
 800d160:	f000 f868 	bl	800d234 <_lseek_r>
 800d164:	89a3      	ldrh	r3, [r4, #12]
 800d166:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d16a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d16e:	81a3      	strh	r3, [r4, #12]
 800d170:	4632      	mov	r2, r6
 800d172:	463b      	mov	r3, r7
 800d174:	4628      	mov	r0, r5
 800d176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d17a:	f000 b817 	b.w	800d1ac <_write_r>

0800d17e <__sseek>:
 800d17e:	b510      	push	{r4, lr}
 800d180:	460c      	mov	r4, r1
 800d182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d186:	f000 f855 	bl	800d234 <_lseek_r>
 800d18a:	1c43      	adds	r3, r0, #1
 800d18c:	89a3      	ldrh	r3, [r4, #12]
 800d18e:	bf15      	itete	ne
 800d190:	6560      	strne	r0, [r4, #84]	; 0x54
 800d192:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d196:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d19a:	81a3      	strheq	r3, [r4, #12]
 800d19c:	bf18      	it	ne
 800d19e:	81a3      	strhne	r3, [r4, #12]
 800d1a0:	bd10      	pop	{r4, pc}

0800d1a2 <__sclose>:
 800d1a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1a6:	f000 b813 	b.w	800d1d0 <_close_r>
	...

0800d1ac <_write_r>:
 800d1ac:	b538      	push	{r3, r4, r5, lr}
 800d1ae:	4d07      	ldr	r5, [pc, #28]	; (800d1cc <_write_r+0x20>)
 800d1b0:	4604      	mov	r4, r0
 800d1b2:	4608      	mov	r0, r1
 800d1b4:	4611      	mov	r1, r2
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	602a      	str	r2, [r5, #0]
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	f7f4 faf7 	bl	80017ae <_write>
 800d1c0:	1c43      	adds	r3, r0, #1
 800d1c2:	d102      	bne.n	800d1ca <_write_r+0x1e>
 800d1c4:	682b      	ldr	r3, [r5, #0]
 800d1c6:	b103      	cbz	r3, 800d1ca <_write_r+0x1e>
 800d1c8:	6023      	str	r3, [r4, #0]
 800d1ca:	bd38      	pop	{r3, r4, r5, pc}
 800d1cc:	24012b04 	.word	0x24012b04

0800d1d0 <_close_r>:
 800d1d0:	b538      	push	{r3, r4, r5, lr}
 800d1d2:	4d06      	ldr	r5, [pc, #24]	; (800d1ec <_close_r+0x1c>)
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	4604      	mov	r4, r0
 800d1d8:	4608      	mov	r0, r1
 800d1da:	602b      	str	r3, [r5, #0]
 800d1dc:	f7f4 fb03 	bl	80017e6 <_close>
 800d1e0:	1c43      	adds	r3, r0, #1
 800d1e2:	d102      	bne.n	800d1ea <_close_r+0x1a>
 800d1e4:	682b      	ldr	r3, [r5, #0]
 800d1e6:	b103      	cbz	r3, 800d1ea <_close_r+0x1a>
 800d1e8:	6023      	str	r3, [r4, #0]
 800d1ea:	bd38      	pop	{r3, r4, r5, pc}
 800d1ec:	24012b04 	.word	0x24012b04

0800d1f0 <_fstat_r>:
 800d1f0:	b538      	push	{r3, r4, r5, lr}
 800d1f2:	4d07      	ldr	r5, [pc, #28]	; (800d210 <_fstat_r+0x20>)
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	4604      	mov	r4, r0
 800d1f8:	4608      	mov	r0, r1
 800d1fa:	4611      	mov	r1, r2
 800d1fc:	602b      	str	r3, [r5, #0]
 800d1fe:	f7f4 fafe 	bl	80017fe <_fstat>
 800d202:	1c43      	adds	r3, r0, #1
 800d204:	d102      	bne.n	800d20c <_fstat_r+0x1c>
 800d206:	682b      	ldr	r3, [r5, #0]
 800d208:	b103      	cbz	r3, 800d20c <_fstat_r+0x1c>
 800d20a:	6023      	str	r3, [r4, #0]
 800d20c:	bd38      	pop	{r3, r4, r5, pc}
 800d20e:	bf00      	nop
 800d210:	24012b04 	.word	0x24012b04

0800d214 <_isatty_r>:
 800d214:	b538      	push	{r3, r4, r5, lr}
 800d216:	4d06      	ldr	r5, [pc, #24]	; (800d230 <_isatty_r+0x1c>)
 800d218:	2300      	movs	r3, #0
 800d21a:	4604      	mov	r4, r0
 800d21c:	4608      	mov	r0, r1
 800d21e:	602b      	str	r3, [r5, #0]
 800d220:	f7f4 fafd 	bl	800181e <_isatty>
 800d224:	1c43      	adds	r3, r0, #1
 800d226:	d102      	bne.n	800d22e <_isatty_r+0x1a>
 800d228:	682b      	ldr	r3, [r5, #0]
 800d22a:	b103      	cbz	r3, 800d22e <_isatty_r+0x1a>
 800d22c:	6023      	str	r3, [r4, #0]
 800d22e:	bd38      	pop	{r3, r4, r5, pc}
 800d230:	24012b04 	.word	0x24012b04

0800d234 <_lseek_r>:
 800d234:	b538      	push	{r3, r4, r5, lr}
 800d236:	4d07      	ldr	r5, [pc, #28]	; (800d254 <_lseek_r+0x20>)
 800d238:	4604      	mov	r4, r0
 800d23a:	4608      	mov	r0, r1
 800d23c:	4611      	mov	r1, r2
 800d23e:	2200      	movs	r2, #0
 800d240:	602a      	str	r2, [r5, #0]
 800d242:	461a      	mov	r2, r3
 800d244:	f7f4 faf6 	bl	8001834 <_lseek>
 800d248:	1c43      	adds	r3, r0, #1
 800d24a:	d102      	bne.n	800d252 <_lseek_r+0x1e>
 800d24c:	682b      	ldr	r3, [r5, #0]
 800d24e:	b103      	cbz	r3, 800d252 <_lseek_r+0x1e>
 800d250:	6023      	str	r3, [r4, #0]
 800d252:	bd38      	pop	{r3, r4, r5, pc}
 800d254:	24012b04 	.word	0x24012b04

0800d258 <__malloc_lock>:
 800d258:	4801      	ldr	r0, [pc, #4]	; (800d260 <__malloc_lock+0x8>)
 800d25a:	f7ff bdc7 	b.w	800cdec <__retarget_lock_acquire_recursive>
 800d25e:	bf00      	nop
 800d260:	24012af8 	.word	0x24012af8

0800d264 <__malloc_unlock>:
 800d264:	4801      	ldr	r0, [pc, #4]	; (800d26c <__malloc_unlock+0x8>)
 800d266:	f7ff bdc2 	b.w	800cdee <__retarget_lock_release_recursive>
 800d26a:	bf00      	nop
 800d26c:	24012af8 	.word	0x24012af8

0800d270 <_read_r>:
 800d270:	b538      	push	{r3, r4, r5, lr}
 800d272:	4d07      	ldr	r5, [pc, #28]	; (800d290 <_read_r+0x20>)
 800d274:	4604      	mov	r4, r0
 800d276:	4608      	mov	r0, r1
 800d278:	4611      	mov	r1, r2
 800d27a:	2200      	movs	r2, #0
 800d27c:	602a      	str	r2, [r5, #0]
 800d27e:	461a      	mov	r2, r3
 800d280:	f7f4 fa78 	bl	8001774 <_read>
 800d284:	1c43      	adds	r3, r0, #1
 800d286:	d102      	bne.n	800d28e <_read_r+0x1e>
 800d288:	682b      	ldr	r3, [r5, #0]
 800d28a:	b103      	cbz	r3, 800d28e <_read_r+0x1e>
 800d28c:	6023      	str	r3, [r4, #0]
 800d28e:	bd38      	pop	{r3, r4, r5, pc}
 800d290:	24012b04 	.word	0x24012b04

0800d294 <_init>:
 800d294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d296:	bf00      	nop
 800d298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d29a:	bc08      	pop	{r3}
 800d29c:	469e      	mov	lr, r3
 800d29e:	4770      	bx	lr

0800d2a0 <_fini>:
 800d2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2a2:	bf00      	nop
 800d2a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2a6:	bc08      	pop	{r3}
 800d2a8:	469e      	mov	lr, r3
 800d2aa:	4770      	bx	lr
