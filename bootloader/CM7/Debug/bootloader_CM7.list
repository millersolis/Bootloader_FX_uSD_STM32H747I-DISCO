
bootloader_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012758  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c4  080129f8  080129f8  000229f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012cbc  08012cbc  000300d8  2**0
                  CONTENTS
  4 .ARM          00000008  08012cbc  08012cbc  00022cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012cc4  08012cc4  000300d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012cc4  08012cc4  00022cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012cc8  08012cc8  00022cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  24000000  08012ccc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00015274  240000e0  08012da4  000300e0  2**5
                  ALLOC
 10 ._user_heap_stack 00000604  24015354  08012da4  00035354  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00043149  00000000  00000000  00030106  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009520  00000000  00000000  0007324f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ed0  00000000  00000000  0007c770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000018d0  00000000  00000000  0007e640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004ad4f  00000000  00000000  0007ff10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003bd77  00000000  00000000  000cac5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001b67df  00000000  00000000  001069d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002bd1b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007444  00000000  00000000  002bd208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000e0 	.word	0x240000e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080129e0 	.word	0x080129e0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000e4 	.word	0x240000e4
 80002dc:	080129e0 	.word	0x080129e0

080002e0 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 80002e0:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002e2:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002e6:	4919      	ldr	r1, [pc, #100]	; (800034c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 80002e8:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 80002ec:	4818      	ldr	r0, [pc, #96]	; (8000350 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 80002ee:	4917      	ldr	r1, [pc, #92]	; (800034c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 80002f0:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 80002f2:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 80002f4:	4817      	ldr	r0, [pc, #92]	; (8000354 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 80002f6:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 80002f8:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 80002fc:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 80002fe:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000302:	4915      	ldr	r1, [pc, #84]	; (8000358 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000304:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000306:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800030a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800030c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000310:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000314:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000318:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800031c:	490f      	ldr	r1, [pc, #60]	; (800035c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800031e:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000322:	4770      	bx	lr

08000324 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000324:	f7ff bffe 	b.w	8000324 <__tx_BadHandler>

08000328 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000328:	f7ff bffe 	b.w	8000328 <__tx_HardfaultHandler>

0800032c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800032c:	f7ff bffe 	b.w	800032c <__tx_SVCallHandler>

08000330 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000330:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000332:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000336:	4770      	bx	lr

08000338 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000338:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800033a:	f000 f891 	bl	8000460 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800033e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000342:	4770      	bx	lr

08000344 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000344:	f7ff bffe 	b.w	8000344 <__tx_NMIHandler>

08000348 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000348:	f7ff bffe 	b.w	8000348 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800034c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000350:	24014d38 	.word	0x24014d38
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000354:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000358:	0009c3ff 	.word	0x0009c3ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800035c:	40ff0000 	.word	0x40ff0000

08000360 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 8000360:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000364:	4a2a      	ldr	r2, [pc, #168]	; (8000410 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 8000366:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 8000368:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 800036c:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000370:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000374:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000376:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800037a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800037e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000382:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000386:	f3bf 8f6f 	isb	sy

0800038a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800038a:	e7fe      	b.n	800038a <__tx_wait_here>

0800038c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800038c:	4821      	ldr	r0, [pc, #132]	; (8000414 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800038e:	4a22      	ldr	r2, [pc, #136]	; (8000418 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 8000390:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000394:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000396:	b191      	cbz	r1, 80003be <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000398:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800039a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800039e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003a2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80003a6:	d101      	bne.n	80003ac <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80003a8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080003ac <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ac:	4c1b      	ldr	r4, [pc, #108]	; (800041c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80003ae:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80003b2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80003b4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80003b8:	b10d      	cbz	r5, 80003be <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80003ba:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80003bc:	6023      	str	r3, [r4, #0]

080003be <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003be:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 80003c0:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 80003c2:	b1b1      	cbz	r1, 80003f2 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 80003c4:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003c6:	b662      	cpsie	i

080003c8 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 80003c8:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003ca:	4c14      	ldr	r4, [pc, #80]	; (800041c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 80003cc:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 80003ce:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 80003d2:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 80003d4:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 80003d6:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 80003da:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80003de:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 80003e2:	d101      	bne.n	80003e8 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 80003e4:	ecbc 8a10 	vldmia	ip!, {s16-s31}

080003e8 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 80003e8:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 80003ec:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 80003f0:	4770      	bx	lr

080003f2 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80003f2:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 80003f4:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 80003f6:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 80003f8:	b909      	cbnz	r1, 80003fe <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003fa:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003fc:	e7f9      	b.n	80003f2 <__tx_ts_wait>

080003fe <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003fe:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000402:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000406:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800040a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800040c:	e7dc      	b.n	80003c8 <__tx_ts_restore>

0800040e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800040e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000410:	24014dd4 	.word	0x24014dd4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000414:	24014d3c 	.word	0x24014d3c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000418:	24014d40 	.word	0x24014d40
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800041c:	24015340 	.word	0x24015340

08000420 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000420:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000422:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000426:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800042a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800042e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000430:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000434:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000436:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000438:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800043a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800043c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800043e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000440:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000442:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000444:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000446:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000448:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800044a:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800044c:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800044e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000452:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000454:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000456:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800045a:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800045c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800045e:	4770      	bx	lr

08000460 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000460:	4922      	ldr	r1, [pc, #136]	; (80004ec <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 8000462:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000464:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000468:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800046a:	4b21      	ldr	r3, [pc, #132]	; (80004f0 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 800046c:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800046e:	b13a      	cbz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 8000470:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000474:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000476:	b91a      	cbnz	r2, 8000480 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000478:	4b1e      	ldr	r3, [pc, #120]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 800047a:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800047e:	6018      	str	r0, [r3, #0]

08000480 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000480:	491d      	ldr	r1, [pc, #116]	; (80004f8 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 8000482:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000484:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000486:	b122      	cbz	r2, 8000492 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000488:	4b1c      	ldr	r3, [pc, #112]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 800048a:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800048e:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 8000490:	e008      	b.n	80004a4 <__tx_timer_done>

08000492 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 8000492:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000496:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000498:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 800049a:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 800049c:	d101      	bne.n	80004a2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800049e:	4b19      	ldr	r3, [pc, #100]	; (8000504 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80004a0:	6818      	ldr	r0, [r3, #0]

080004a2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80004a2:	6008      	str	r0, [r1, #0]

080004a4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80004a4:	4b13      	ldr	r3, [pc, #76]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80004a6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80004a8:	b912      	cbnz	r2, 80004b0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80004aa:	4914      	ldr	r1, [pc, #80]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004ac:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80004ae:	b1d0      	cbz	r0, 80004e6 <__tx_timer_nothing_expired>

080004b0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80004b0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80004b4:	4911      	ldr	r1, [pc, #68]	; (80004fc <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80004b6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80004b8:	b108      	cbz	r0, 80004be <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80004ba:	f010 fc61 	bl	8010d80 <_tx_timer_expiration_process>

080004be <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80004be:	4b0d      	ldr	r3, [pc, #52]	; (80004f4 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 80004c0:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 80004c2:	b172      	cbz	r2, 80004e2 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 80004c4:	f010 fb4c 	bl	8010b60 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004c8:	480f      	ldr	r0, [pc, #60]	; (8000508 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 80004ca:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 80004cc:	b949      	cbnz	r1, 80004e2 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004ce:	480f      	ldr	r0, [pc, #60]	; (800050c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 80004d0:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004d2:	4a0f      	ldr	r2, [pc, #60]	; (8000510 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 80004d4:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004d6:	480f      	ldr	r0, [pc, #60]	; (8000514 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 80004d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 80004dc:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 80004de:	d000      	beq.n	80004e2 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 80004e0:	6002      	str	r2, [r0, #0]

080004e2 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 80004e2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

080004e6 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 80004e6:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 80004ea:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80004ec:	24014de0 	.word	0x24014de0
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80004f0:	24015340 	.word	0x24015340
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004f4:	24014de4 	.word	0x24014de4
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004f8:	24014e70 	.word	0x24014e70
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004fc:	24014e74 	.word	0x24014e74
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000500:	24014e6c 	.word	0x24014e6c
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000504:	24014e68 	.word	0x24014e68
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000508:	24014dd4 	.word	0x24014dd4
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800050c:	24014d3c 	.word	0x24014d3c
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000510:	24014d40 	.word	0x24014d40
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000514:	e000ed04 	.word	0xe000ed04
	...

08000520 <memchr>:
 8000520:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000524:	2a10      	cmp	r2, #16
 8000526:	db2b      	blt.n	8000580 <memchr+0x60>
 8000528:	f010 0f07 	tst.w	r0, #7
 800052c:	d008      	beq.n	8000540 <memchr+0x20>
 800052e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000532:	3a01      	subs	r2, #1
 8000534:	428b      	cmp	r3, r1
 8000536:	d02d      	beq.n	8000594 <memchr+0x74>
 8000538:	f010 0f07 	tst.w	r0, #7
 800053c:	b342      	cbz	r2, 8000590 <memchr+0x70>
 800053e:	d1f6      	bne.n	800052e <memchr+0xe>
 8000540:	b4f0      	push	{r4, r5, r6, r7}
 8000542:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000546:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800054a:	f022 0407 	bic.w	r4, r2, #7
 800054e:	f07f 0700 	mvns.w	r7, #0
 8000552:	2300      	movs	r3, #0
 8000554:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000558:	3c08      	subs	r4, #8
 800055a:	ea85 0501 	eor.w	r5, r5, r1
 800055e:	ea86 0601 	eor.w	r6, r6, r1
 8000562:	fa85 f547 	uadd8	r5, r5, r7
 8000566:	faa3 f587 	sel	r5, r3, r7
 800056a:	fa86 f647 	uadd8	r6, r6, r7
 800056e:	faa5 f687 	sel	r6, r5, r7
 8000572:	b98e      	cbnz	r6, 8000598 <memchr+0x78>
 8000574:	d1ee      	bne.n	8000554 <memchr+0x34>
 8000576:	bcf0      	pop	{r4, r5, r6, r7}
 8000578:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800057c:	f002 0207 	and.w	r2, r2, #7
 8000580:	b132      	cbz	r2, 8000590 <memchr+0x70>
 8000582:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000586:	3a01      	subs	r2, #1
 8000588:	ea83 0301 	eor.w	r3, r3, r1
 800058c:	b113      	cbz	r3, 8000594 <memchr+0x74>
 800058e:	d1f8      	bne.n	8000582 <memchr+0x62>
 8000590:	2000      	movs	r0, #0
 8000592:	4770      	bx	lr
 8000594:	3801      	subs	r0, #1
 8000596:	4770      	bx	lr
 8000598:	2d00      	cmp	r5, #0
 800059a:	bf06      	itte	eq
 800059c:	4635      	moveq	r5, r6
 800059e:	3803      	subeq	r0, #3
 80005a0:	3807      	subne	r0, #7
 80005a2:	f015 0f01 	tst.w	r5, #1
 80005a6:	d107      	bne.n	80005b8 <memchr+0x98>
 80005a8:	3001      	adds	r0, #1
 80005aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80005ae:	bf02      	ittt	eq
 80005b0:	3001      	addeq	r0, #1
 80005b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80005b6:	3001      	addeq	r0, #1
 80005b8:	bcf0      	pop	{r4, r5, r6, r7}
 80005ba:	3801      	subs	r0, #1
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <__aeabi_uldivmod>:
 80005c0:	b953      	cbnz	r3, 80005d8 <__aeabi_uldivmod+0x18>
 80005c2:	b94a      	cbnz	r2, 80005d8 <__aeabi_uldivmod+0x18>
 80005c4:	2900      	cmp	r1, #0
 80005c6:	bf08      	it	eq
 80005c8:	2800      	cmpeq	r0, #0
 80005ca:	bf1c      	itt	ne
 80005cc:	f04f 31ff 	movne.w	r1, #4294967295
 80005d0:	f04f 30ff 	movne.w	r0, #4294967295
 80005d4:	f000 b974 	b.w	80008c0 <__aeabi_idiv0>
 80005d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80005dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005e0:	f000 f806 	bl	80005f0 <__udivmoddi4>
 80005e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005ec:	b004      	add	sp, #16
 80005ee:	4770      	bx	lr

080005f0 <__udivmoddi4>:
 80005f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005f4:	9d08      	ldr	r5, [sp, #32]
 80005f6:	4604      	mov	r4, r0
 80005f8:	468e      	mov	lr, r1
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d14d      	bne.n	800069a <__udivmoddi4+0xaa>
 80005fe:	428a      	cmp	r2, r1
 8000600:	4694      	mov	ip, r2
 8000602:	d969      	bls.n	80006d8 <__udivmoddi4+0xe8>
 8000604:	fab2 f282 	clz	r2, r2
 8000608:	b152      	cbz	r2, 8000620 <__udivmoddi4+0x30>
 800060a:	fa01 f302 	lsl.w	r3, r1, r2
 800060e:	f1c2 0120 	rsb	r1, r2, #32
 8000612:	fa20 f101 	lsr.w	r1, r0, r1
 8000616:	fa0c fc02 	lsl.w	ip, ip, r2
 800061a:	ea41 0e03 	orr.w	lr, r1, r3
 800061e:	4094      	lsls	r4, r2
 8000620:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000624:	0c21      	lsrs	r1, r4, #16
 8000626:	fbbe f6f8 	udiv	r6, lr, r8
 800062a:	fa1f f78c 	uxth.w	r7, ip
 800062e:	fb08 e316 	mls	r3, r8, r6, lr
 8000632:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000636:	fb06 f107 	mul.w	r1, r6, r7
 800063a:	4299      	cmp	r1, r3
 800063c:	d90a      	bls.n	8000654 <__udivmoddi4+0x64>
 800063e:	eb1c 0303 	adds.w	r3, ip, r3
 8000642:	f106 30ff 	add.w	r0, r6, #4294967295
 8000646:	f080 811f 	bcs.w	8000888 <__udivmoddi4+0x298>
 800064a:	4299      	cmp	r1, r3
 800064c:	f240 811c 	bls.w	8000888 <__udivmoddi4+0x298>
 8000650:	3e02      	subs	r6, #2
 8000652:	4463      	add	r3, ip
 8000654:	1a5b      	subs	r3, r3, r1
 8000656:	b2a4      	uxth	r4, r4
 8000658:	fbb3 f0f8 	udiv	r0, r3, r8
 800065c:	fb08 3310 	mls	r3, r8, r0, r3
 8000660:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000664:	fb00 f707 	mul.w	r7, r0, r7
 8000668:	42a7      	cmp	r7, r4
 800066a:	d90a      	bls.n	8000682 <__udivmoddi4+0x92>
 800066c:	eb1c 0404 	adds.w	r4, ip, r4
 8000670:	f100 33ff 	add.w	r3, r0, #4294967295
 8000674:	f080 810a 	bcs.w	800088c <__udivmoddi4+0x29c>
 8000678:	42a7      	cmp	r7, r4
 800067a:	f240 8107 	bls.w	800088c <__udivmoddi4+0x29c>
 800067e:	4464      	add	r4, ip
 8000680:	3802      	subs	r0, #2
 8000682:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000686:	1be4      	subs	r4, r4, r7
 8000688:	2600      	movs	r6, #0
 800068a:	b11d      	cbz	r5, 8000694 <__udivmoddi4+0xa4>
 800068c:	40d4      	lsrs	r4, r2
 800068e:	2300      	movs	r3, #0
 8000690:	e9c5 4300 	strd	r4, r3, [r5]
 8000694:	4631      	mov	r1, r6
 8000696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800069a:	428b      	cmp	r3, r1
 800069c:	d909      	bls.n	80006b2 <__udivmoddi4+0xc2>
 800069e:	2d00      	cmp	r5, #0
 80006a0:	f000 80ef 	beq.w	8000882 <__udivmoddi4+0x292>
 80006a4:	2600      	movs	r6, #0
 80006a6:	e9c5 0100 	strd	r0, r1, [r5]
 80006aa:	4630      	mov	r0, r6
 80006ac:	4631      	mov	r1, r6
 80006ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006b2:	fab3 f683 	clz	r6, r3
 80006b6:	2e00      	cmp	r6, #0
 80006b8:	d14a      	bne.n	8000750 <__udivmoddi4+0x160>
 80006ba:	428b      	cmp	r3, r1
 80006bc:	d302      	bcc.n	80006c4 <__udivmoddi4+0xd4>
 80006be:	4282      	cmp	r2, r0
 80006c0:	f200 80f9 	bhi.w	80008b6 <__udivmoddi4+0x2c6>
 80006c4:	1a84      	subs	r4, r0, r2
 80006c6:	eb61 0303 	sbc.w	r3, r1, r3
 80006ca:	2001      	movs	r0, #1
 80006cc:	469e      	mov	lr, r3
 80006ce:	2d00      	cmp	r5, #0
 80006d0:	d0e0      	beq.n	8000694 <__udivmoddi4+0xa4>
 80006d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80006d6:	e7dd      	b.n	8000694 <__udivmoddi4+0xa4>
 80006d8:	b902      	cbnz	r2, 80006dc <__udivmoddi4+0xec>
 80006da:	deff      	udf	#255	; 0xff
 80006dc:	fab2 f282 	clz	r2, r2
 80006e0:	2a00      	cmp	r2, #0
 80006e2:	f040 8092 	bne.w	800080a <__udivmoddi4+0x21a>
 80006e6:	eba1 010c 	sub.w	r1, r1, ip
 80006ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80006ee:	fa1f fe8c 	uxth.w	lr, ip
 80006f2:	2601      	movs	r6, #1
 80006f4:	0c20      	lsrs	r0, r4, #16
 80006f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80006fa:	fb07 1113 	mls	r1, r7, r3, r1
 80006fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000702:	fb0e f003 	mul.w	r0, lr, r3
 8000706:	4288      	cmp	r0, r1
 8000708:	d908      	bls.n	800071c <__udivmoddi4+0x12c>
 800070a:	eb1c 0101 	adds.w	r1, ip, r1
 800070e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000712:	d202      	bcs.n	800071a <__udivmoddi4+0x12a>
 8000714:	4288      	cmp	r0, r1
 8000716:	f200 80cb 	bhi.w	80008b0 <__udivmoddi4+0x2c0>
 800071a:	4643      	mov	r3, r8
 800071c:	1a09      	subs	r1, r1, r0
 800071e:	b2a4      	uxth	r4, r4
 8000720:	fbb1 f0f7 	udiv	r0, r1, r7
 8000724:	fb07 1110 	mls	r1, r7, r0, r1
 8000728:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800072c:	fb0e fe00 	mul.w	lr, lr, r0
 8000730:	45a6      	cmp	lr, r4
 8000732:	d908      	bls.n	8000746 <__udivmoddi4+0x156>
 8000734:	eb1c 0404 	adds.w	r4, ip, r4
 8000738:	f100 31ff 	add.w	r1, r0, #4294967295
 800073c:	d202      	bcs.n	8000744 <__udivmoddi4+0x154>
 800073e:	45a6      	cmp	lr, r4
 8000740:	f200 80bb 	bhi.w	80008ba <__udivmoddi4+0x2ca>
 8000744:	4608      	mov	r0, r1
 8000746:	eba4 040e 	sub.w	r4, r4, lr
 800074a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800074e:	e79c      	b.n	800068a <__udivmoddi4+0x9a>
 8000750:	f1c6 0720 	rsb	r7, r6, #32
 8000754:	40b3      	lsls	r3, r6
 8000756:	fa22 fc07 	lsr.w	ip, r2, r7
 800075a:	ea4c 0c03 	orr.w	ip, ip, r3
 800075e:	fa20 f407 	lsr.w	r4, r0, r7
 8000762:	fa01 f306 	lsl.w	r3, r1, r6
 8000766:	431c      	orrs	r4, r3
 8000768:	40f9      	lsrs	r1, r7
 800076a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800076e:	fa00 f306 	lsl.w	r3, r0, r6
 8000772:	fbb1 f8f9 	udiv	r8, r1, r9
 8000776:	0c20      	lsrs	r0, r4, #16
 8000778:	fa1f fe8c 	uxth.w	lr, ip
 800077c:	fb09 1118 	mls	r1, r9, r8, r1
 8000780:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000784:	fb08 f00e 	mul.w	r0, r8, lr
 8000788:	4288      	cmp	r0, r1
 800078a:	fa02 f206 	lsl.w	r2, r2, r6
 800078e:	d90b      	bls.n	80007a8 <__udivmoddi4+0x1b8>
 8000790:	eb1c 0101 	adds.w	r1, ip, r1
 8000794:	f108 3aff 	add.w	sl, r8, #4294967295
 8000798:	f080 8088 	bcs.w	80008ac <__udivmoddi4+0x2bc>
 800079c:	4288      	cmp	r0, r1
 800079e:	f240 8085 	bls.w	80008ac <__udivmoddi4+0x2bc>
 80007a2:	f1a8 0802 	sub.w	r8, r8, #2
 80007a6:	4461      	add	r1, ip
 80007a8:	1a09      	subs	r1, r1, r0
 80007aa:	b2a4      	uxth	r4, r4
 80007ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80007b0:	fb09 1110 	mls	r1, r9, r0, r1
 80007b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80007b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80007bc:	458e      	cmp	lr, r1
 80007be:	d908      	bls.n	80007d2 <__udivmoddi4+0x1e2>
 80007c0:	eb1c 0101 	adds.w	r1, ip, r1
 80007c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80007c8:	d26c      	bcs.n	80008a4 <__udivmoddi4+0x2b4>
 80007ca:	458e      	cmp	lr, r1
 80007cc:	d96a      	bls.n	80008a4 <__udivmoddi4+0x2b4>
 80007ce:	3802      	subs	r0, #2
 80007d0:	4461      	add	r1, ip
 80007d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80007d6:	fba0 9402 	umull	r9, r4, r0, r2
 80007da:	eba1 010e 	sub.w	r1, r1, lr
 80007de:	42a1      	cmp	r1, r4
 80007e0:	46c8      	mov	r8, r9
 80007e2:	46a6      	mov	lr, r4
 80007e4:	d356      	bcc.n	8000894 <__udivmoddi4+0x2a4>
 80007e6:	d053      	beq.n	8000890 <__udivmoddi4+0x2a0>
 80007e8:	b15d      	cbz	r5, 8000802 <__udivmoddi4+0x212>
 80007ea:	ebb3 0208 	subs.w	r2, r3, r8
 80007ee:	eb61 010e 	sbc.w	r1, r1, lr
 80007f2:	fa01 f707 	lsl.w	r7, r1, r7
 80007f6:	fa22 f306 	lsr.w	r3, r2, r6
 80007fa:	40f1      	lsrs	r1, r6
 80007fc:	431f      	orrs	r7, r3
 80007fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000802:	2600      	movs	r6, #0
 8000804:	4631      	mov	r1, r6
 8000806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800080a:	f1c2 0320 	rsb	r3, r2, #32
 800080e:	40d8      	lsrs	r0, r3
 8000810:	fa0c fc02 	lsl.w	ip, ip, r2
 8000814:	fa21 f303 	lsr.w	r3, r1, r3
 8000818:	4091      	lsls	r1, r2
 800081a:	4301      	orrs	r1, r0
 800081c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000820:	fa1f fe8c 	uxth.w	lr, ip
 8000824:	fbb3 f0f7 	udiv	r0, r3, r7
 8000828:	fb07 3610 	mls	r6, r7, r0, r3
 800082c:	0c0b      	lsrs	r3, r1, #16
 800082e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000832:	fb00 f60e 	mul.w	r6, r0, lr
 8000836:	429e      	cmp	r6, r3
 8000838:	fa04 f402 	lsl.w	r4, r4, r2
 800083c:	d908      	bls.n	8000850 <__udivmoddi4+0x260>
 800083e:	eb1c 0303 	adds.w	r3, ip, r3
 8000842:	f100 38ff 	add.w	r8, r0, #4294967295
 8000846:	d22f      	bcs.n	80008a8 <__udivmoddi4+0x2b8>
 8000848:	429e      	cmp	r6, r3
 800084a:	d92d      	bls.n	80008a8 <__udivmoddi4+0x2b8>
 800084c:	3802      	subs	r0, #2
 800084e:	4463      	add	r3, ip
 8000850:	1b9b      	subs	r3, r3, r6
 8000852:	b289      	uxth	r1, r1
 8000854:	fbb3 f6f7 	udiv	r6, r3, r7
 8000858:	fb07 3316 	mls	r3, r7, r6, r3
 800085c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000860:	fb06 f30e 	mul.w	r3, r6, lr
 8000864:	428b      	cmp	r3, r1
 8000866:	d908      	bls.n	800087a <__udivmoddi4+0x28a>
 8000868:	eb1c 0101 	adds.w	r1, ip, r1
 800086c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000870:	d216      	bcs.n	80008a0 <__udivmoddi4+0x2b0>
 8000872:	428b      	cmp	r3, r1
 8000874:	d914      	bls.n	80008a0 <__udivmoddi4+0x2b0>
 8000876:	3e02      	subs	r6, #2
 8000878:	4461      	add	r1, ip
 800087a:	1ac9      	subs	r1, r1, r3
 800087c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000880:	e738      	b.n	80006f4 <__udivmoddi4+0x104>
 8000882:	462e      	mov	r6, r5
 8000884:	4628      	mov	r0, r5
 8000886:	e705      	b.n	8000694 <__udivmoddi4+0xa4>
 8000888:	4606      	mov	r6, r0
 800088a:	e6e3      	b.n	8000654 <__udivmoddi4+0x64>
 800088c:	4618      	mov	r0, r3
 800088e:	e6f8      	b.n	8000682 <__udivmoddi4+0x92>
 8000890:	454b      	cmp	r3, r9
 8000892:	d2a9      	bcs.n	80007e8 <__udivmoddi4+0x1f8>
 8000894:	ebb9 0802 	subs.w	r8, r9, r2
 8000898:	eb64 0e0c 	sbc.w	lr, r4, ip
 800089c:	3801      	subs	r0, #1
 800089e:	e7a3      	b.n	80007e8 <__udivmoddi4+0x1f8>
 80008a0:	4646      	mov	r6, r8
 80008a2:	e7ea      	b.n	800087a <__udivmoddi4+0x28a>
 80008a4:	4620      	mov	r0, r4
 80008a6:	e794      	b.n	80007d2 <__udivmoddi4+0x1e2>
 80008a8:	4640      	mov	r0, r8
 80008aa:	e7d1      	b.n	8000850 <__udivmoddi4+0x260>
 80008ac:	46d0      	mov	r8, sl
 80008ae:	e77b      	b.n	80007a8 <__udivmoddi4+0x1b8>
 80008b0:	3b02      	subs	r3, #2
 80008b2:	4461      	add	r1, ip
 80008b4:	e732      	b.n	800071c <__udivmoddi4+0x12c>
 80008b6:	4630      	mov	r0, r6
 80008b8:	e709      	b.n	80006ce <__udivmoddi4+0xde>
 80008ba:	4464      	add	r4, ip
 80008bc:	3802      	subs	r0, #2
 80008be:	e742      	b.n	8000746 <__udivmoddi4+0x156>

080008c0 <__aeabi_idiv0>:
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop

080008c4 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b086      	sub	sp, #24
 80008c8:	af02      	add	r7, sp, #8
 80008ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80008d0:	2334      	movs	r3, #52	; 0x34
 80008d2:	9300      	str	r3, [sp, #0]
 80008d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008d8:	4a15      	ldr	r2, [pc, #84]	; (8000930 <tx_application_define+0x6c>)
 80008da:	4916      	ldr	r1, [pc, #88]	; (8000934 <tx_application_define+0x70>)
 80008dc:	4816      	ldr	r0, [pc, #88]	; (8000938 <tx_application_define+0x74>)
 80008de:	f010 fcf9 	bl	80112d4 <_txe_byte_pool_create>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d109      	bne.n	80008fc <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <tx_application_define+0x74>)
 80008ea:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 80008ec:	68b8      	ldr	r0, [r7, #8]
 80008ee:	f000 f8c1 	bl	8000a74 <App_ThreadX_Init>
 80008f2:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d000      	beq.n	80008fc <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80008fa:	e7fe      	b.n	80008fa <tx_application_define+0x36>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&fx_app_byte_pool, "Fx App memory pool", fx_byte_pool_buffer, FX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 80008fc:	2334      	movs	r3, #52	; 0x34
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000904:	4a0d      	ldr	r2, [pc, #52]	; (800093c <tx_application_define+0x78>)
 8000906:	490e      	ldr	r1, [pc, #56]	; (8000940 <tx_application_define+0x7c>)
 8000908:	480e      	ldr	r0, [pc, #56]	; (8000944 <tx_application_define+0x80>)
 800090a:	f010 fce3 	bl	80112d4 <_txe_byte_pool_create>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d109      	bne.n	8000928 <tx_application_define+0x64>
  {
    /* USER CODE BEGIN FX_Byte_Pool_Success */

    /* USER CODE END FX_Byte_Pool_Success */

    memory_ptr = (VOID *)&fx_app_byte_pool;
 8000914:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <tx_application_define+0x80>)
 8000916:	60bb      	str	r3, [r7, #8]
    status = MX_FileX_Init(memory_ptr);
 8000918:	68b8      	ldr	r0, [r7, #8]
 800091a:	f009 fab9 	bl	8009e90 <MX_FileX_Init>
 800091e:	60f8      	str	r0, [r7, #12]
    if (status != FX_SUCCESS)
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d000      	beq.n	8000928 <tx_application_define+0x64>
    {
      /* USER CODE BEGIN  MX_FileX_Init_Error */
      while(1)
 8000926:	e7fe      	b.n	8000926 <tx_application_define+0x62>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	240000fc 	.word	0x240000fc
 8000934:	080129f8 	.word	0x080129f8
 8000938:	240080fc 	.word	0x240080fc
 800093c:	24008130 	.word	0x24008130
 8000940:	08012a0c 	.word	0x08012a0c
 8000944:	24012130 	.word	0x24012130

08000948 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800094c:	4b3d      	ldr	r3, [pc, #244]	; (8000a44 <SystemInit+0xfc>)
 800094e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000952:	4a3c      	ldr	r2, [pc, #240]	; (8000a44 <SystemInit+0xfc>)
 8000954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000958:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800095c:	4b39      	ldr	r3, [pc, #228]	; (8000a44 <SystemInit+0xfc>)
 800095e:	691b      	ldr	r3, [r3, #16]
 8000960:	4a38      	ldr	r2, [pc, #224]	; (8000a44 <SystemInit+0xfc>)
 8000962:	f043 0310 	orr.w	r3, r3, #16
 8000966:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000968:	4b37      	ldr	r3, [pc, #220]	; (8000a48 <SystemInit+0x100>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f003 030f 	and.w	r3, r3, #15
 8000970:	2b06      	cmp	r3, #6
 8000972:	d807      	bhi.n	8000984 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000974:	4b34      	ldr	r3, [pc, #208]	; (8000a48 <SystemInit+0x100>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f023 030f 	bic.w	r3, r3, #15
 800097c:	4a32      	ldr	r2, [pc, #200]	; (8000a48 <SystemInit+0x100>)
 800097e:	f043 0307 	orr.w	r3, r3, #7
 8000982:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000984:	4b31      	ldr	r3, [pc, #196]	; (8000a4c <SystemInit+0x104>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a30      	ldr	r2, [pc, #192]	; (8000a4c <SystemInit+0x104>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000990:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <SystemInit+0x104>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000996:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <SystemInit+0x104>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	492c      	ldr	r1, [pc, #176]	; (8000a4c <SystemInit+0x104>)
 800099c:	4b2c      	ldr	r3, [pc, #176]	; (8000a50 <SystemInit+0x108>)
 800099e:	4013      	ands	r3, r2
 80009a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009a2:	4b29      	ldr	r3, [pc, #164]	; (8000a48 <SystemInit+0x100>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d007      	beq.n	80009be <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009ae:	4b26      	ldr	r3, [pc, #152]	; (8000a48 <SystemInit+0x100>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f023 030f 	bic.w	r3, r3, #15
 80009b6:	4a24      	ldr	r2, [pc, #144]	; (8000a48 <SystemInit+0x100>)
 80009b8:	f043 0307 	orr.w	r3, r3, #7
 80009bc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009be:	4b23      	ldr	r3, [pc, #140]	; (8000a4c <SystemInit+0x104>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009c4:	4b21      	ldr	r3, [pc, #132]	; (8000a4c <SystemInit+0x104>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009ca:	4b20      	ldr	r3, [pc, #128]	; (8000a4c <SystemInit+0x104>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <SystemInit+0x104>)
 80009d2:	4a20      	ldr	r2, [pc, #128]	; (8000a54 <SystemInit+0x10c>)
 80009d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <SystemInit+0x104>)
 80009d8:	4a1f      	ldr	r2, [pc, #124]	; (8000a58 <SystemInit+0x110>)
 80009da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	; (8000a4c <SystemInit+0x104>)
 80009de:	4a1f      	ldr	r2, [pc, #124]	; (8000a5c <SystemInit+0x114>)
 80009e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	; (8000a4c <SystemInit+0x104>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009e8:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <SystemInit+0x104>)
 80009ea:	4a1c      	ldr	r2, [pc, #112]	; (8000a5c <SystemInit+0x114>)
 80009ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <SystemInit+0x104>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009f4:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <SystemInit+0x104>)
 80009f6:	4a19      	ldr	r2, [pc, #100]	; (8000a5c <SystemInit+0x114>)
 80009f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <SystemInit+0x104>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <SystemInit+0x104>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a11      	ldr	r2, [pc, #68]	; (8000a4c <SystemInit+0x104>)
 8000a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <SystemInit+0x104>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000a12:	4b13      	ldr	r3, [pc, #76]	; (8000a60 <SystemInit+0x118>)
 8000a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a16:	4a12      	ldr	r2, [pc, #72]	; (8000a60 <SystemInit+0x118>)
 8000a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a1c:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <SystemInit+0x11c>)
 8000a20:	681a      	ldr	r2, [r3, #0]
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <SystemInit+0x120>)
 8000a24:	4013      	ands	r3, r2
 8000a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a2a:	d202      	bcs.n	8000a32 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <SystemInit+0x124>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a32:	4b0f      	ldr	r3, [pc, #60]	; (8000a70 <SystemInit+0x128>)
 8000a34:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a38:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	e000ed00 	.word	0xe000ed00
 8000a48:	52002000 	.word	0x52002000
 8000a4c:	58024400 	.word	0x58024400
 8000a50:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a54:	02020200 	.word	0x02020200
 8000a58:	01ff0000 	.word	0x01ff0000
 8000a5c:	01010280 	.word	0x01010280
 8000a60:	580000c0 	.word	0x580000c0
 8000a64:	5c001000 	.word	0x5c001000
 8000a68:	ffff0000 	.word	0xffff0000
 8000a6c:	51008108 	.word	0x51008108
 8000a70:	52004000 	.word	0x52004000

08000a74 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN App_ThreadX_Init */

  /* USER CODE END App_ThreadX_Init */

  return ret;
 8000a80:	68fb      	ldr	r3, [r7, #12]
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3714      	adds	r7, #20
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8000a92:	f00e faaf 	bl	800eff4 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <fw_update_thread_entry>:

#include "sd_card.h"


void fw_update_thread_entry(void)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	af00      	add	r7, sp, #0
	sd_init();
 8000a9e:	f000 fb1d 	bl	80010dc <sd_init>

	while(1) {
		sd_update_card_state();
 8000aa2:	f000 fb77 	bl	8001194 <sd_update_card_state>
	while(1) {
 8000aa6:	e7fc      	b.n	8000aa2 <fw_update_thread_entry+0x8>

08000aa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b084      	sub	sp, #16
 8000aac:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000aae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ab2:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000ab4:	bf00      	nop
 8000ab6:	4b3b      	ldr	r3, [pc, #236]	; (8000ba4 <main+0xfc>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d004      	beq.n	8000acc <main+0x24>
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	1e5a      	subs	r2, r3, #1
 8000ac6:	60fa      	str	r2, [r7, #12]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	dcf4      	bgt.n	8000ab6 <main+0xe>
  if ( timeout < 0 )
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	da01      	bge.n	8000ad6 <main+0x2e>
  {
  Error_Handler();
 8000ad2:	f000 faeb 	bl	80010ac <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad6:	f000 fe91 	bl	80017fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ada:	f000 f86d 	bl	8000bb8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000ade:	4b31      	ldr	r3, [pc, #196]	; (8000ba4 <main+0xfc>)
 8000ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae4:	4a2f      	ldr	r2, [pc, #188]	; (8000ba4 <main+0xfc>)
 8000ae6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aee:	4b2d      	ldr	r3, [pc, #180]	; (8000ba4 <main+0xfc>)
 8000af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000af8:	603b      	str	r3, [r7, #0]
 8000afa:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000afc:	2000      	movs	r0, #0
 8000afe:	f001 fb21 	bl	8002144 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000b02:	2100      	movs	r1, #0
 8000b04:	2000      	movs	r0, #0
 8000b06:	f001 fb37 	bl	8002178 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000b0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b0e:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000b10:	bf00      	nop
 8000b12:	4b24      	ldr	r3, [pc, #144]	; (8000ba4 <main+0xfc>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d104      	bne.n	8000b28 <main+0x80>
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	1e5a      	subs	r2, r3, #1
 8000b22:	60fa      	str	r2, [r7, #12]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	dcf4      	bgt.n	8000b12 <main+0x6a>
if ( timeout < 0 )
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	da01      	bge.n	8000b32 <main+0x8a>
{
Error_Handler();
 8000b2e:	f000 fabd 	bl	80010ac <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b32:	f000 f933 	bl	8000d9c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000b36:	f000 f8e5 	bl	8000d04 <MX_USART1_UART_Init>
  MX_SDMMC1_SD_Init();
 8000b3a:	f000 f8c1 	bl	8000cc0 <MX_SDMMC1_SD_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Bootloader v%d.%d (CM7)\r\n",bootloader_ver[0], bootloader_ver[1]);
 8000b3e:	2300      	movs	r3, #0
 8000b40:	2201      	movs	r2, #1
 8000b42:	4619      	mov	r1, r3
 8000b44:	4818      	ldr	r0, [pc, #96]	; (8000ba8 <main+0x100>)
 8000b46:	f011 f9e9 	bl	8011f1c <iprintf>

  /* Check for button press or timeout */
  volatile static uint8_t joystick_down_state;
  volatile static _Bool joystick_held_down = false;
  volatile uint32_t now = HAL_GetTick();
 8000b4a:	f000 fea7 	bl	800189c <HAL_GetTick>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	607b      	str	r3, [r7, #4]
  const uint32_t timeout_end = now + (TIMEOUT_TO_FLASH_APP *1000);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000b58:	60bb      	str	r3, [r7, #8]

  do {
	  joystick_down_state = HAL_GPIO_ReadPin(JOY_DOWN_GPIO_Port, JOY_DOWN_Pin);
 8000b5a:	2108      	movs	r1, #8
 8000b5c:	4813      	ldr	r0, [pc, #76]	; (8000bac <main+0x104>)
 8000b5e:	f001 faa5 	bl	80020ac <HAL_GPIO_ReadPin>
 8000b62:	4603      	mov	r3, r0
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <main+0x108>)
 8000b68:	701a      	strb	r2, [r3, #0]
	  now = HAL_GetTick();
 8000b6a:	f000 fe97 	bl	800189c <HAL_GetTick>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	607b      	str	r3, [r7, #4]

	  /* Check for joystick down */
	  if ((joystick_down_state != GPIO_PIN_SET)) {
 8000b72:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <main+0x108>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d003      	beq.n	8000b84 <main+0xdc>
		  joystick_held_down = true;
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <main+0x10c>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	701a      	strb	r2, [r3, #0]
		  break;
 8000b82:	e003      	b.n	8000b8c <main+0xe4>
	  }
  } while(now < timeout_end);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d8e6      	bhi.n	8000b5a <main+0xb2>

  if (joystick_held_down) {
 8000b8c:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <main+0x10c>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d101      	bne.n	8000b9a <main+0xf2>
	  // flash
  }
  else {
	  /* Jump to applicationdirectly for now */
	  goto_application();
 8000b96:	f000 f9cd 	bl	8000f34 <goto_application>


  /* Should never reach here.
   * Intentionally spinlock forever before RTOS starts.
   */
  Error_Handler();
 8000b9a:	f000 fa87 	bl	80010ac <Error_Handler>

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8000b9e:	f7ff ff76 	bl	8000a8e <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ba2:	e7fe      	b.n	8000ba2 <main+0xfa>
 8000ba4:	58024400 	.word	0x58024400
 8000ba8:	08012a20 	.word	0x08012a20
 8000bac:	58022800 	.word	0x58022800
 8000bb0:	24012274 	.word	0x24012274
 8000bb4:	24012275 	.word	0x24012275

08000bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b09c      	sub	sp, #112	; 0x70
 8000bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc2:	224c      	movs	r2, #76	; 0x4c
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f010 feb2 	bl	8011930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bcc:	1d3b      	adds	r3, r7, #4
 8000bce:	2220      	movs	r2, #32
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f010 feac 	bl	8011930 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000bd8:	2004      	movs	r0, #4
 8000bda:	f001 fae1 	bl	80021a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bde:	2300      	movs	r3, #0
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	4b35      	ldr	r3, [pc, #212]	; (8000cb8 <SystemClock_Config+0x100>)
 8000be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be6:	4a34      	ldr	r2, [pc, #208]	; (8000cb8 <SystemClock_Config+0x100>)
 8000be8:	f023 0301 	bic.w	r3, r3, #1
 8000bec:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000bee:	4b32      	ldr	r3, [pc, #200]	; (8000cb8 <SystemClock_Config+0x100>)
 8000bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	4b30      	ldr	r3, [pc, #192]	; (8000cbc <SystemClock_Config+0x104>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	4a2f      	ldr	r2, [pc, #188]	; (8000cbc <SystemClock_Config+0x104>)
 8000bfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c02:	6193      	str	r3, [r2, #24]
 8000c04:	4b2d      	ldr	r3, [pc, #180]	; (8000cbc <SystemClock_Config+0x104>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c10:	bf00      	nop
 8000c12:	4b2a      	ldr	r3, [pc, #168]	; (8000cbc <SystemClock_Config+0x104>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c1e:	d1f8      	bne.n	8000c12 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000c20:	2303      	movs	r3, #3
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c2e:	2340      	movs	r3, #64	; 0x40
 8000c30:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c32:	2302      	movs	r3, #2
 8000c34:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c36:	2302      	movs	r3, #2
 8000c38:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000c3a:	2305      	movs	r3, #5
 8000c3c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000c3e:	2330      	movs	r3, #48	; 0x30
 8000c40:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c42:	2302      	movs	r3, #2
 8000c44:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000c46:	2305      	movs	r3, #5
 8000c48:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000c4e:	2308      	movs	r3, #8
 8000c50:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f001 fc22 	bl	80024a8 <HAL_RCC_OscConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000c6a:	f000 fa1f 	bl	80010ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6e:	233f      	movs	r3, #63	; 0x3f
 8000c70:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c72:	2300      	movs	r3, #0
 8000c74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c8e:	1d3b      	adds	r3, r7, #4
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 f862 	bl	8002d5c <HAL_RCC_ClockConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000c9e:	f000 fa05 	bl	80010ac <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000ca2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	2000      	movs	r0, #0
 8000caa:	f002 fa0d 	bl	80030c8 <HAL_RCC_MCOConfig>
}
 8000cae:	bf00      	nop
 8000cb0:	3770      	adds	r7, #112	; 0x70
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	58000400 	.word	0x58000400
 8000cbc:	58024800 	.word	0x58024800

08000cc0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <MX_SDMMC1_SD_Init+0x3c>)
 8000cc6:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <MX_SDMMC1_SD_Init+0x40>)
 8000cc8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_SDMMC1_SD_Init+0x3c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <MX_SDMMC1_SD_Init+0x3c>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <MX_SDMMC1_SD_Init+0x3c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000cdc:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <MX_SDMMC1_SD_Init+0x3c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <MX_SDMMC1_SD_Init+0x3c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000ce8:	4804      	ldr	r0, [pc, #16]	; (8000cfc <MX_SDMMC1_SD_Init+0x3c>)
 8000cea:	f005 f9ad 	bl	8006048 <HAL_SD_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_SDMMC1_SD_Init+0x38>
  {
    Error_Handler();
 8000cf4:	f000 f9da 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000cf8:	bf00      	nop
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	24012164 	.word	0x24012164
 8000d00:	52007000 	.word	0x52007000

08000d04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d08:	4b22      	ldr	r3, [pc, #136]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d0a:	4a23      	ldr	r2, [pc, #140]	; (8000d98 <MX_USART1_UART_Init+0x94>)
 8000d0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d0e:	4b21      	ldr	r3, [pc, #132]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d16:	4b1f      	ldr	r3, [pc, #124]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d1c:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d22:	4b1c      	ldr	r3, [pc, #112]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d28:	4b1a      	ldr	r3, [pc, #104]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d2a:	220c      	movs	r2, #12
 8000d2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2e:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d34:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d3a:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d40:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d46:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d4c:	4811      	ldr	r0, [pc, #68]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d4e:	f007 f921 	bl	8007f94 <HAL_UART_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d58:	f000 f9a8 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	480d      	ldr	r0, [pc, #52]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d60:	f008 f9f1 	bl	8009146 <HAL_UARTEx_SetTxFifoThreshold>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d6a:	f000 f99f 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4808      	ldr	r0, [pc, #32]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d72:	f008 fa26 	bl	80091c2 <HAL_UARTEx_SetRxFifoThreshold>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d7c:	f000 f996 	bl	80010ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d80:	4804      	ldr	r0, [pc, #16]	; (8000d94 <MX_USART1_UART_Init+0x90>)
 8000d82:	f008 f9a7 	bl	80090d4 <HAL_UARTEx_DisableFifoMode>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d8c:	f000 f98e 	bl	80010ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	240121e0 	.word	0x240121e0
 8000d98:	40011000 	.word	0x40011000

08000d9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	; 0x30
 8000da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db2:	4b53      	ldr	r3, [pc, #332]	; (8000f00 <MX_GPIO_Init+0x164>)
 8000db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db8:	4a51      	ldr	r2, [pc, #324]	; (8000f00 <MX_GPIO_Init+0x164>)
 8000dba:	f043 0304 	orr.w	r3, r3, #4
 8000dbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dc2:	4b4f      	ldr	r3, [pc, #316]	; (8000f00 <MX_GPIO_Init+0x164>)
 8000dc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc8:	f003 0304 	and.w	r3, r3, #4
 8000dcc:	61bb      	str	r3, [r7, #24]
 8000dce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000dd0:	4b4b      	ldr	r3, [pc, #300]	; (8000f00 <MX_GPIO_Init+0x164>)
 8000dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd6:	4a4a      	ldr	r2, [pc, #296]	; (8000f00 <MX_GPIO_Init+0x164>)
 8000dd8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ddc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000de0:	4b47      	ldr	r3, [pc, #284]	; (8000f00 <MX_GPIO_Init+0x164>)
 8000de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dee:	4b44      	ldr	r3, [pc, #272]	; (8000f00 <MX_GPIO_Init+0x164>)
 8000df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df4:	4a42      	ldr	r2, [pc, #264]	; (8000f00 <MX_GPIO_Init+0x164>)
 8000df6:	f043 0308 	orr.w	r3, r3, #8
 8000dfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dfe:	4b40      	ldr	r3, [pc, #256]	; (8000f00 <MX_GPIO_Init+0x164>)
 8000e00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e04:	f003 0308 	and.w	r3, r3, #8
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b3c      	ldr	r3, [pc, #240]	; (8000f00 <MX_GPIO_Init+0x164>)
 8000e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e12:	4a3b      	ldr	r2, [pc, #236]	; (8000f00 <MX_GPIO_Init+0x164>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1c:	4b38      	ldr	r3, [pc, #224]	; (8000f00 <MX_GPIO_Init+0x164>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000e2a:	4b35      	ldr	r3, [pc, #212]	; (8000f00 <MX_GPIO_Init+0x164>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e30:	4a33      	ldr	r2, [pc, #204]	; (8000f00 <MX_GPIO_Init+0x164>)
 8000e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e3a:	4b31      	ldr	r3, [pc, #196]	; (8000f00 <MX_GPIO_Init+0x164>)
 8000e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e48:	4b2d      	ldr	r3, [pc, #180]	; (8000f00 <MX_GPIO_Init+0x164>)
 8000e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e4e:	4a2c      	ldr	r2, [pc, #176]	; (8000f00 <MX_GPIO_Init+0x164>)
 8000e50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e58:	4b29      	ldr	r3, [pc, #164]	; (8000f00 <MX_GPIO_Init+0x164>)
 8000e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000e6c:	4825      	ldr	r0, [pc, #148]	; (8000f04 <MX_GPIO_Init+0x168>)
 8000e6e:	f001 f935 	bl	80020dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : JOY_DOWN_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin;
 8000e72:	2308      	movs	r3, #8
 8000e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e76:	2300      	movs	r3, #0
 8000e78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(JOY_DOWN_GPIO_Port, &GPIO_InitStruct);
 8000e7e:	f107 031c 	add.w	r3, r7, #28
 8000e82:	4619      	mov	r1, r3
 8000e84:	4820      	ldr	r0, [pc, #128]	; (8000f08 <MX_GPIO_Init+0x16c>)
 8000e86:	f000 fe57 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8000e8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e90:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000e94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e96:	2301      	movs	r3, #1
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000e9a:	f107 031c 	add.w	r3, r7, #28
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4818      	ldr	r0, [pc, #96]	; (8000f04 <MX_GPIO_Init+0x168>)
 8000ea2:	f000 fe49 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000ea6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4812      	ldr	r0, [pc, #72]	; (8000f0c <MX_GPIO_Init+0x170>)
 8000ec4:	f000 fe38 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8000ec8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000ecc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000eda:	f107 031c 	add.w	r3, r7, #28
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4808      	ldr	r0, [pc, #32]	; (8000f04 <MX_GPIO_Init+0x168>)
 8000ee2:	f000 fe29 	bl	8001b38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 14, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	210e      	movs	r1, #14
 8000eea:	2017      	movs	r0, #23
 8000eec:	f000 fdee 	bl	8001acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ef0:	2017      	movs	r0, #23
 8000ef2:	f000 fe05 	bl	8001b00 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ef6:	bf00      	nop
 8000ef8:	3730      	adds	r7, #48	; 0x30
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	58024400 	.word	0x58024400
 8000f04:	58022000 	.word	0x58022000
 8000f08:	58022800 	.word	0x58022800
 8000f0c:	58020000 	.word	0x58020000

08000f10 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f18:	1d39      	adds	r1, r7, #4
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	2201      	movs	r2, #1
 8000f20:	4803      	ldr	r0, [pc, #12]	; (8000f30 <__io_putchar+0x20>)
 8000f22:	f007 f8c6 	bl	80080b2 <HAL_UART_Transmit>

  return ch;
 8000f26:	687b      	ldr	r3, [r7, #4]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	240121e0 	.word	0x240121e0

08000f34 <goto_application>:

static void goto_application()
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
	printf("Jumping to application\r\n");
 8000f3a:	484a      	ldr	r0, [pc, #296]	; (8001064 <goto_application+0x130>)
 8000f3c:	f011 f874 	bl	8012028 <puts>
	void (*app_reset_hanlder) (void) = (void*) (*(volatile uint32_t *) (APP_FLASH_ADDR + 4U));
 8000f40:	4b49      	ldr	r3, [pc, #292]	; (8001068 <goto_application+0x134>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	60fb      	str	r3, [r7, #12]

	/* Deinitialize peripherals before jump */
	HAL_SD_DeInit(&hsd1);
 8000f46:	4849      	ldr	r0, [pc, #292]	; (800106c <goto_application+0x138>)
 8000f48:	f005 f99e 	bl	8006288 <HAL_SD_DeInit>
	HAL_UART_DeInit(&huart1);
 8000f4c:	4848      	ldr	r0, [pc, #288]	; (8001070 <goto_application+0x13c>)
 8000f4e:	f007 f871 	bl	8008034 <HAL_UART_DeInit>

	/* TODO: Can replace by HAL GPIO DeInit function? */
	__HAL_RCC_GPIOF_CLK_DISABLE();
 8000f52:	4b48      	ldr	r3, [pc, #288]	; (8001074 <goto_application+0x140>)
 8000f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f58:	4a46      	ldr	r2, [pc, #280]	; (8001074 <goto_application+0x140>)
 8000f5a:	f023 0320 	bic.w	r3, r3, #32
 8000f5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_GPIOH_CLK_DISABLE();
 8000f62:	4b44      	ldr	r3, [pc, #272]	; (8001074 <goto_application+0x140>)
 8000f64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f68:	4a42      	ldr	r2, [pc, #264]	; (8001074 <goto_application+0x140>)
 8000f6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_GPIOI_CLK_DISABLE();
 8000f72:	4b40      	ldr	r3, [pc, #256]	; (8001074 <goto_application+0x140>)
 8000f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f78:	4a3e      	ldr	r2, [pc, #248]	; (8001074 <goto_application+0x140>)
 8000f7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_GPIOA_CLK_DISABLE();
 8000f82:	4b3c      	ldr	r3, [pc, #240]	; (8001074 <goto_application+0x140>)
 8000f84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f88:	4a3a      	ldr	r2, [pc, #232]	; (8001074 <goto_application+0x140>)
 8000f8a:	f023 0301 	bic.w	r3, r3, #1
 8000f8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_GPIOE_CLK_DISABLE();
 8000f92:	4b38      	ldr	r3, [pc, #224]	; (8001074 <goto_application+0x140>)
 8000f94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f98:	4a36      	ldr	r2, [pc, #216]	; (8001074 <goto_application+0x140>)
 8000f9a:	f023 0310 	bic.w	r3, r3, #16
 8000f9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_GPIOC_CLK_DISABLE();
 8000fa2:	4b34      	ldr	r3, [pc, #208]	; (8001074 <goto_application+0x140>)
 8000fa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa8:	4a32      	ldr	r2, [pc, #200]	; (8001074 <goto_application+0x140>)
 8000faa:	f023 0304 	bic.w	r3, r3, #4
 8000fae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_GPIOG_CLK_DISABLE();
 8000fb2:	4b30      	ldr	r3, [pc, #192]	; (8001074 <goto_application+0x140>)
 8000fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb8:	4a2e      	ldr	r2, [pc, #184]	; (8001074 <goto_application+0x140>)
 8000fba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_GPIOB_CLK_DISABLE();
 8000fc2:	4b2c      	ldr	r3, [pc, #176]	; (8001074 <goto_application+0x140>)
 8000fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fc8:	4a2a      	ldr	r2, [pc, #168]	; (8001074 <goto_application+0x140>)
 8000fca:	f023 0302 	bic.w	r3, r3, #2
 8000fce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	__HAL_RCC_HSEM_CLK_DISABLE();
 8000fd2:	4b28      	ldr	r3, [pc, #160]	; (8001074 <goto_application+0x140>)
 8000fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd8:	4a26      	ldr	r2, [pc, #152]	; (8001074 <goto_application+0x140>)
 8000fda:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000fde:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	HAL_RCC_DeInit();
 8000fe2:	f001 f937 	bl	8002254 <HAL_RCC_DeInit>
	HAL_TIM_Base_DeInit(&htim6);
 8000fe6:	4824      	ldr	r0, [pc, #144]	; (8001078 <goto_application+0x144>)
 8000fe8:	f006 fceb 	bl	80079c2 <HAL_TIM_Base_DeInit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fec:	b672      	cpsid	i
}
 8000fee:	bf00      	nop
	/* Stop all interrupts */
	__disable_irq();

	/* TODO: Why 8 registers? */
	/* Disable IRQs */
	for (int i = 0; i < 8; i++) {
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	e009      	b.n	800100a <goto_application+0xd6>
		NVIC->ICER[i] = 0xFFFFFFFF;
 8000ff6:	4a21      	ldr	r2, [pc, #132]	; (800107c <goto_application+0x148>)
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	3320      	adds	r3, #32
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8001000:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 8; i++) {
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	3301      	adds	r3, #1
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	2b07      	cmp	r3, #7
 800100e:	ddf2      	ble.n	8000ff6 <goto_application+0xc2>
	}

	/* Clear pending IRQs */
	for (int i = 0; i < 8; i++) {
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	e009      	b.n	800102a <goto_application+0xf6>
		NVIC->ICPR[i] = 0xFFFFFFFF;
 8001016:	4a19      	ldr	r2, [pc, #100]	; (800107c <goto_application+0x148>)
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	3360      	adds	r3, #96	; 0x60
 800101c:	f04f 31ff 	mov.w	r1, #4294967295
 8001020:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < 8; i++) {
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	3301      	adds	r3, #1
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	2b07      	cmp	r3, #7
 800102e:	ddf2      	ble.n	8001016 <goto_application+0xe2>
  __ASM volatile ("cpsie i" : : : "memory");
 8001030:	b662      	cpsie	i
}
 8001032:	bf00      	nop

	/* Reenable all interrupts */
	__enable_irq();

	/* Disable Systick timer interrupt*/
	SysTick->CTRL = 0;
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <goto_application+0x14c>)
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
  \details Writes the given value to the Control Register.
  \param [in]    control  Control Register value to set
 */
__STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
{
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f383 8814 	msr	CONTROL, r3
}
 8001044:	bf00      	nop
	/* TODO: Why is CR needed to be set to 0? */
	/* Change from PSP to MSP */
	__set_CONTROL(0);

	/* Set main stack pointer of application (also done in linkerscript by CubeMX) */
	__set_MSP((*(volatile uint32_t *) APP_FLASH_ADDR));
 8001046:	4b0f      	ldr	r3, [pc, #60]	; (8001084 <goto_application+0x150>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	f383 8808 	msr	MSP, r3
}
 8001052:	bf00      	nop

	/* Call app reset handler */
	app_reset_hanlder();
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4798      	blx	r3

	/* Should never reach here */
	Error_Handler();
 8001058:	f000 f828 	bl	80010ac <Error_Handler>
}
 800105c:	bf00      	nop
 800105e:	3718      	adds	r7, #24
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	08012a44 	.word	0x08012a44
 8001068:	08040004 	.word	0x08040004
 800106c:	24012164 	.word	0x24012164
 8001070:	240121e0 	.word	0x240121e0
 8001074:	58024400 	.word	0x58024400
 8001078:	24014964 	.word	0x24014964
 800107c:	e000e100 	.word	0xe000e100
 8001080:	e000e010 	.word	0xe000e010
 8001084:	08040000 	.word	0x08040000

08001088 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d101      	bne.n	800109e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800109a:	f000 fbeb 	bl	8001874 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40001000 	.word	0x40001000

080010ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010b0:	b672      	cpsid	i
}
 80010b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <Error_Handler+0x8>
	...

080010b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == SD_DETECT_Pin) {
 80010c2:	88fb      	ldrh	r3, [r7, #6]
 80010c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010c8:	d102      	bne.n	80010d0 <HAL_GPIO_EXTI_Callback+0x18>
	  tx_semaphore_put(&sd_detect_semaphore);
 80010ca:	4803      	ldr	r0, [pc, #12]	; (80010d8 <HAL_GPIO_EXTI_Callback+0x20>)
 80010cc:	f010 fab8 	bl	8011640 <_txe_semaphore_put>
  }
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	24012278 	.word	0x24012278

080010dc <sd_init>:

void sd_init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
	if (tx_semaphore_create(&sd_detect_semaphore, "sd detect semaphore", 0) != TX_SUCCESS) {
 80010e0:	231c      	movs	r3, #28
 80010e2:	2200      	movs	r2, #0
 80010e4:	490d      	ldr	r1, [pc, #52]	; (800111c <sd_init+0x40>)
 80010e6:	480e      	ldr	r0, [pc, #56]	; (8001120 <sd_init+0x44>)
 80010e8:	f010 f994 	bl	8011414 <_txe_semaphore_create>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d005      	beq.n	80010fe <sd_init+0x22>
		assert(0);	// TODO: Handle error
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <sd_init+0x48>)
 80010f4:	4a0c      	ldr	r2, [pc, #48]	; (8001128 <sd_init+0x4c>)
 80010f6:	2149      	movs	r1, #73	; 0x49
 80010f8:	480c      	ldr	r0, [pc, #48]	; (800112c <sd_init+0x50>)
 80010fa:	f010 fbb1 	bl	8011860 <__assert_func>
	}

	/* Check initial status of card */
	if(SD_IsDetected(FX_STM32_SD_INSTANCE) == SD_PRESENT) {
 80010fe:	2000      	movs	r0, #0
 8001100:	f000 f86c 	bl	80011dc <SD_IsDetected>
 8001104:	4603      	mov	r3, r0
 8001106:	2b01      	cmp	r3, #1
 8001108:	d105      	bne.n	8001116 <sd_init+0x3a>
		last_status = CARD_STATUS_CONNECTED;
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <sd_init+0x54>)
 800110c:	224d      	movs	r2, #77	; 0x4d
 800110e:	601a      	str	r2, [r3, #0]
		/* SD card is already inserted, place the info into the queue */
		tx_semaphore_put(&sd_detect_semaphore);
 8001110:	4803      	ldr	r0, [pc, #12]	; (8001120 <sd_init+0x44>)
 8001112:	f010 fa95 	bl	8011640 <_txe_semaphore_put>
	 }
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	08012a5c 	.word	0x08012a5c
 8001120:	24012278 	.word	0x24012278
 8001124:	08012a70 	.word	0x08012a70
 8001128:	08012ba4 	.word	0x08012ba4
 800112c:	08012a74 	.word	0x08012a74
 8001130:	24000008 	.word	0x24000008

08001134 <sd_fx_start>:

void sd_fx_start(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af04      	add	r7, sp, #16
	/* Open the SD disk driver */
	sd_status =  fx_media_open(&sdio_disk,
 800113a:	f242 43b8 	movw	r3, #9400	; 0x24b8
 800113e:	9302      	str	r3, [sp, #8]
 8001140:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001144:	9301      	str	r3, [sp, #4]
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <sd_fx_start+0x30>)
 8001148:	9300      	str	r3, [sp, #0]
 800114a:	2300      	movs	r3, #0
 800114c:	4a06      	ldr	r2, [pc, #24]	; (8001168 <sd_fx_start+0x34>)
 800114e:	4907      	ldr	r1, [pc, #28]	; (800116c <sd_fx_start+0x38>)
 8001150:	4807      	ldr	r0, [pc, #28]	; (8001170 <sd_fx_start+0x3c>)
 8001152:	f00d f8e3 	bl	800e31c <_fxe_media_open>
 8001156:	4603      	mov	r3, r0
 8001158:	4a06      	ldr	r2, [pc, #24]	; (8001174 <sd_fx_start+0x40>)
 800115a:	6013      	str	r3, [r2, #0]
								FX_SD_VOLUME_NAME,
								fx_stm32_sd_driver,
								(VOID *)FX_NULL,
								(VOID *) fx_sd_media_memory,
								sizeof(fx_sd_media_memory));
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	24014760 	.word	0x24014760
 8001168:	0800e491 	.word	0x0800e491
 800116c:	08012a8c 	.word	0x08012a8c
 8001170:	24012298 	.word	0x24012298
 8001174:	24014960 	.word	0x24014960

08001178 <sd_fx_stop>:

void sd_fx_stop(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	/* Close the media.  */
	sd_status =  fx_media_close(&sdio_disk);
 800117c:	4803      	ldr	r0, [pc, #12]	; (800118c <sd_fx_stop+0x14>)
 800117e:	f00d f8a1 	bl	800e2c4 <_fxe_media_close>
 8001182:	4603      	mov	r3, r0
 8001184:	4a02      	ldr	r2, [pc, #8]	; (8001190 <sd_fx_stop+0x18>)
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	24012298 	.word	0x24012298
 8001190:	24014960 	.word	0x24014960

08001194 <sd_update_card_state>:

void sd_update_card_state(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	/* Check semaphore to update card status if needed */
	if (tx_semaphore_get(&sd_detect_semaphore, TX_NO_WAIT) == TX_SUCCESS) {
 8001198:	2100      	movs	r1, #0
 800119a:	480e      	ldr	r0, [pc, #56]	; (80011d4 <sd_update_card_state+0x40>)
 800119c:	f010 fa0e 	bl	80115bc <_txe_semaphore_get>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d113      	bne.n	80011ce <sd_update_card_state+0x3a>
		/* for debouncing purpose we wait a bit till it settles down */
		tx_thread_sleep(TX_TIMER_TICKS_PER_SECOND / 2);
 80011a6:	2032      	movs	r0, #50	; 0x32
 80011a8:	f00f fa08 	bl	80105bc <_tx_thread_sleep>

		if (SD_IsDetected(FX_STM32_SD_INSTANCE) == SD_PRESENT) {
 80011ac:	2000      	movs	r0, #0
 80011ae:	f000 f815 	bl	80011dc <SD_IsDetected>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d105      	bne.n	80011c4 <sd_update_card_state+0x30>
			last_status = CARD_STATUS_CONNECTED;
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <sd_update_card_state+0x44>)
 80011ba:	224d      	movs	r2, #77	; 0x4d
 80011bc:	601a      	str	r2, [r3, #0]
			sd_fx_start();
 80011be:	f7ff ffb9 	bl	8001134 <sd_fx_start>
		else {
			last_status = CARD_STATUS_DISCONNECTED;
			sd_fx_stop();
		}
	}
}
 80011c2:	e004      	b.n	80011ce <sd_update_card_state+0x3a>
			last_status = CARD_STATUS_DISCONNECTED;
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <sd_update_card_state+0x44>)
 80011c6:	2258      	movs	r2, #88	; 0x58
 80011c8:	601a      	str	r2, [r3, #0]
			sd_fx_stop();
 80011ca:	f7ff ffd5 	bl	8001178 <sd_fx_stop>
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	24012278 	.word	0x24012278
 80011d8:	24000008 	.word	0x24000008

080011dc <SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param Instance  SD Instance
 * @retval Returns if SD is detected or not
 */
int32_t SD_IsDetected(uint32_t Instance)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  int32_t ret;
  if(Instance >= 1) {
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <SD_IsDetected+0x14>
    ret = HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	e00c      	b.n	800120a <SD_IsDetected+0x2e>
  }
  else {
    /* Check SD card detect pin */
    if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_Port, SD_DETECT_Pin) == GPIO_PIN_SET) {
 80011f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f4:	4807      	ldr	r0, [pc, #28]	; (8001214 <SD_IsDetected+0x38>)
 80011f6:	f000 ff59 	bl	80020ac <HAL_GPIO_ReadPin>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d102      	bne.n	8001206 <SD_IsDetected+0x2a>
      ret = SD_NOT_PRESENT;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	e001      	b.n	800120a <SD_IsDetected+0x2e>
    }
    else {
      ret = SD_PRESENT;
 8001206:	2301      	movs	r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
    }
  }

  return(int32_t)ret;
 800120a:	68fb      	ldr	r3, [r7, #12]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	58022000 	.word	0x58022000

08001218 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <HAL_MspInit+0x30>)
 8001220:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001224:	4a08      	ldr	r2, [pc, #32]	; (8001248 <HAL_MspInit+0x30>)
 8001226:	f043 0302 	orr.w	r3, r3, #2
 800122a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_MspInit+0x30>)
 8001230:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	607b      	str	r3, [r7, #4]
 800123a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	58024400 	.word	0x58024400

0800124c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b0be      	sub	sp, #248	; 0xf8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001264:	f107 0318 	add.w	r3, r7, #24
 8001268:	22c8      	movs	r2, #200	; 0xc8
 800126a:	2100      	movs	r1, #0
 800126c:	4618      	mov	r0, r3
 800126e:	f010 fb5f 	bl	8011930 <memset>
  if(hsd->Instance==SDMMC1)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a3c      	ldr	r2, [pc, #240]	; (8001368 <HAL_SD_MspInit+0x11c>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d171      	bne.n	8001360 <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800127c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001280:	f04f 0300 	mov.w	r3, #0
 8001284:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8001288:	2300      	movs	r3, #0
 800128a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800128c:	f107 0318 	add.w	r3, r7, #24
 8001290:	4618      	mov	r0, r3
 8001292:	f002 f99b 	bl	80035cc <HAL_RCCEx_PeriphCLKConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 800129c:	f7ff ff06 	bl	80010ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80012a0:	4b32      	ldr	r3, [pc, #200]	; (800136c <HAL_SD_MspInit+0x120>)
 80012a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80012a6:	4a31      	ldr	r2, [pc, #196]	; (800136c <HAL_SD_MspInit+0x120>)
 80012a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012ac:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80012b0:	4b2e      	ldr	r3, [pc, #184]	; (800136c <HAL_SD_MspInit+0x120>)
 80012b2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80012b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012be:	4b2b      	ldr	r3, [pc, #172]	; (800136c <HAL_SD_MspInit+0x120>)
 80012c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c4:	4a29      	ldr	r2, [pc, #164]	; (800136c <HAL_SD_MspInit+0x120>)
 80012c6:	f043 0304 	orr.w	r3, r3, #4
 80012ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ce:	4b27      	ldr	r3, [pc, #156]	; (800136c <HAL_SD_MspInit+0x120>)
 80012d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012dc:	4b23      	ldr	r3, [pc, #140]	; (800136c <HAL_SD_MspInit+0x120>)
 80012de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e2:	4a22      	ldr	r2, [pc, #136]	; (800136c <HAL_SD_MspInit+0x120>)
 80012e4:	f043 0308 	orr.w	r3, r3, #8
 80012e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ec:	4b1f      	ldr	r3, [pc, #124]	; (800136c <HAL_SD_MspInit+0x120>)
 80012ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f2:	f003 0308 	and.w	r3, r3, #8
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin;
 80012fa:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 80012fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800130e:	2303      	movs	r3, #3
 8001310:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001314:	230c      	movs	r3, #12
 8001316:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800131e:	4619      	mov	r1, r3
 8001320:	4813      	ldr	r0, [pc, #76]	; (8001370 <HAL_SD_MspInit+0x124>)
 8001322:	f000 fc09 	bl	8001b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8001326:	2304      	movs	r3, #4
 8001328:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800133e:	230c      	movs	r3, #12
 8001340:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8001344:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001348:	4619      	mov	r1, r3
 800134a:	480a      	ldr	r0, [pc, #40]	; (8001374 <HAL_SD_MspInit+0x128>)
 800134c:	f000 fbf4 	bl	8001b38 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001350:	2200      	movs	r2, #0
 8001352:	2100      	movs	r1, #0
 8001354:	2031      	movs	r0, #49	; 0x31
 8001356:	f000 fbb9 	bl	8001acc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800135a:	2031      	movs	r0, #49	; 0x31
 800135c:	f000 fbd0 	bl	8001b00 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001360:	bf00      	nop
 8001362:	37f8      	adds	r7, #248	; 0xf8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	52007000 	.word	0x52007000
 800136c:	58024400 	.word	0x58024400
 8001370:	58020800 	.word	0x58020800
 8001374:	58020c00 	.word	0x58020c00

08001378 <HAL_SD_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspDeInit(SD_HandleTypeDef* hsd)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  if(hsd->Instance==SDMMC1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a0d      	ldr	r2, [pc, #52]	; (80013bc <HAL_SD_MspDeInit+0x44>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d113      	bne.n	80013b2 <HAL_SD_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN SDMMC1_MspDeInit 0 */

  /* USER CODE END SDMMC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 800138a:	4b0d      	ldr	r3, [pc, #52]	; (80013c0 <HAL_SD_MspDeInit+0x48>)
 800138c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001390:	4a0b      	ldr	r2, [pc, #44]	; (80013c0 <HAL_SD_MspDeInit+0x48>)
 8001392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001396:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
    PC10     ------> SDMMC1_D2
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    HAL_GPIO_DeInit(GPIOC, SDIO1_D2_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin);
 800139a:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 800139e:	4809      	ldr	r0, [pc, #36]	; (80013c4 <HAL_SD_MspDeInit+0x4c>)
 80013a0:	f000 fd7a 	bl	8001e98 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(SDIO1_CMD_GPIO_Port, SDIO1_CMD_Pin);
 80013a4:	2104      	movs	r1, #4
 80013a6:	4808      	ldr	r0, [pc, #32]	; (80013c8 <HAL_SD_MspDeInit+0x50>)
 80013a8:	f000 fd76 	bl	8001e98 <HAL_GPIO_DeInit>

    /* SDMMC1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 80013ac:	2031      	movs	r0, #49	; 0x31
 80013ae:	f000 fbb5 	bl	8001b1c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SDMMC1_MspDeInit 1 */

  /* USER CODE END SDMMC1_MspDeInit 1 */
  }

}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	52007000 	.word	0x52007000
 80013c0:	58024400 	.word	0x58024400
 80013c4:	58020800 	.word	0x58020800
 80013c8:	58020c00 	.word	0x58020c00

080013cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b0bc      	sub	sp, #240	; 0xf0
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013e4:	f107 0310 	add.w	r3, r7, #16
 80013e8:	22c8      	movs	r2, #200	; 0xc8
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f010 fa9f 	bl	8011930 <memset>
  if(huart->Instance==USART1)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a27      	ldr	r2, [pc, #156]	; (8001494 <HAL_UART_MspInit+0xc8>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d146      	bne.n	800148a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013fc:	f04f 0201 	mov.w	r2, #1
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001408:	2300      	movs	r3, #0
 800140a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800140e:	f107 0310 	add.w	r3, r7, #16
 8001412:	4618      	mov	r0, r3
 8001414:	f002 f8da 	bl	80035cc <HAL_RCCEx_PeriphCLKConfig>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800141e:	f7ff fe45 	bl	80010ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001422:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <HAL_UART_MspInit+0xcc>)
 8001424:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001428:	4a1b      	ldr	r2, [pc, #108]	; (8001498 <HAL_UART_MspInit+0xcc>)
 800142a:	f043 0310 	orr.w	r3, r3, #16
 800142e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001432:	4b19      	ldr	r3, [pc, #100]	; (8001498 <HAL_UART_MspInit+0xcc>)
 8001434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001438:	f003 0310 	and.w	r3, r3, #16
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001440:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_UART_MspInit+0xcc>)
 8001442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001446:	4a14      	ldr	r2, [pc, #80]	; (8001498 <HAL_UART_MspInit+0xcc>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <HAL_UART_MspInit+0xcc>)
 8001452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 800145e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001462:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001478:	2307      	movs	r3, #7
 800147a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	; (800149c <HAL_UART_MspInit+0xd0>)
 8001486:	f000 fb57 	bl	8001b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800148a:	bf00      	nop
 800148c:	37f0      	adds	r7, #240	; 0xf0
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40011000 	.word	0x40011000
 8001498:	58024400 	.word	0x58024400
 800149c:	58020000 	.word	0x58020000

080014a0 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a09      	ldr	r2, [pc, #36]	; (80014d4 <HAL_UART_MspDeInit+0x34>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d10c      	bne.n	80014cc <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_UART_MspDeInit+0x38>)
 80014b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80014b8:	4a07      	ldr	r2, [pc, #28]	; (80014d8 <HAL_UART_MspDeInit+0x38>)
 80014ba:	f023 0310 	bic.w	r3, r3, #16
 80014be:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOA, STLINK_TX_Pin|STLINK_RX_Pin);
 80014c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80014c6:	4805      	ldr	r0, [pc, #20]	; (80014dc <HAL_UART_MspDeInit+0x3c>)
 80014c8:	f000 fce6 	bl	8001e98 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }

}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40011000 	.word	0x40011000
 80014d8:	58024400 	.word	0x58024400
 80014dc:	58020000 	.word	0x58020000

080014e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b090      	sub	sp, #64	; 0x40
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b0f      	cmp	r3, #15
 80014ec:	d827      	bhi.n	800153e <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80014ee:	2200      	movs	r2, #0
 80014f0:	6879      	ldr	r1, [r7, #4]
 80014f2:	2036      	movs	r0, #54	; 0x36
 80014f4:	f000 faea 	bl	8001acc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014f8:	2036      	movs	r0, #54	; 0x36
 80014fa:	f000 fb01 	bl	8001b00 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80014fe:	4a29      	ldr	r2, [pc, #164]	; (80015a4 <HAL_InitTick+0xc4>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001504:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <HAL_InitTick+0xc8>)
 8001506:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800150a:	4a27      	ldr	r2, [pc, #156]	; (80015a8 <HAL_InitTick+0xc8>)
 800150c:	f043 0310 	orr.w	r3, r3, #16
 8001510:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001514:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <HAL_InitTick+0xc8>)
 8001516:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800151a:	f003 0310 	and.w	r3, r3, #16
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001522:	f107 0210 	add.w	r2, r7, #16
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f002 f80b 	bl	8003548 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001534:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001538:	2b00      	cmp	r3, #0
 800153a:	d106      	bne.n	800154a <HAL_InitTick+0x6a>
 800153c:	e001      	b.n	8001542 <HAL_InitTick+0x62>
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e02b      	b.n	800159a <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001542:	f001 ffd5 	bl	80034f0 <HAL_RCC_GetPCLK1Freq>
 8001546:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001548:	e004      	b.n	8001554 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800154a:	f001 ffd1 	bl	80034f0 <HAL_RCC_GetPCLK1Freq>
 800154e:	4603      	mov	r3, r0
 8001550:	005b      	lsls	r3, r3, #1
 8001552:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001556:	4a15      	ldr	r2, [pc, #84]	; (80015ac <HAL_InitTick+0xcc>)
 8001558:	fba2 2303 	umull	r2, r3, r2, r3
 800155c:	0c9b      	lsrs	r3, r3, #18
 800155e:	3b01      	subs	r3, #1
 8001560:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001562:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <HAL_InitTick+0xd0>)
 8001564:	4a13      	ldr	r2, [pc, #76]	; (80015b4 <HAL_InitTick+0xd4>)
 8001566:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_InitTick+0xd0>)
 800156a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800156e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001570:	4a0f      	ldr	r2, [pc, #60]	; (80015b0 <HAL_InitTick+0xd0>)
 8001572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001574:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <HAL_InitTick+0xd0>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800157c:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <HAL_InitTick+0xd0>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001582:	480b      	ldr	r0, [pc, #44]	; (80015b0 <HAL_InitTick+0xd0>)
 8001584:	f006 f9c6 	bl	8007914 <HAL_TIM_Base_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d104      	bne.n	8001598 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800158e:	4808      	ldr	r0, [pc, #32]	; (80015b0 <HAL_InitTick+0xd0>)
 8001590:	f006 fa88 	bl	8007aa4 <HAL_TIM_Base_Start_IT>
 8001594:	4603      	mov	r3, r0
 8001596:	e000      	b.n	800159a <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
}
 800159a:	4618      	mov	r0, r3
 800159c:	3740      	adds	r7, #64	; 0x40
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	2400000c 	.word	0x2400000c
 80015a8:	58024400 	.word	0x58024400
 80015ac:	431bde83 	.word	0x431bde83
 80015b0:	24014964 	.word	0x24014964
 80015b4:	40001000 	.word	0x40001000

080015b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015bc:	e7fe      	b.n	80015bc <NMI_Handler+0x4>

080015be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015c2:	e7fe      	b.n	80015c2 <HardFault_Handler+0x4>

080015c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c8:	e7fe      	b.n	80015c8 <MemManage_Handler+0x4>

080015ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ca:	b480      	push	{r7}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ce:	e7fe      	b.n	80015ce <BusFault_Handler+0x4>

080015d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d4:	e7fe      	b.n	80015d4 <UsageFault_Handler+0x4>

080015d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d6:	b480      	push	{r7}
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr

080015e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(uSD_Detect_Pin);
 80015e8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80015ec:	f000 fd8f 	bl	800210e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80015f8:	4802      	ldr	r0, [pc, #8]	; (8001604 <SDMMC1_IRQHandler+0x10>)
 80015fa:	f004 ffb5 	bl	8006568 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	24012164 	.word	0x24012164

08001608 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800160c:	4802      	ldr	r0, [pc, #8]	; (8001618 <TIM6_DAC_IRQHandler+0x10>)
 800160e:	f006 fac1 	bl	8007b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	24014964 	.word	0x24014964

0800161c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  return 1;
 8001620:	2301      	movs	r3, #1
}
 8001622:	4618      	mov	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <_kill>:

int _kill(int pid, int sig)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001636:	f010 f931 	bl	801189c <__errno>
 800163a:	4603      	mov	r3, r0
 800163c:	2216      	movs	r2, #22
 800163e:	601a      	str	r2, [r3, #0]
  return -1;
 8001640:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <_exit>:

void _exit (int status)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001654:	f04f 31ff 	mov.w	r1, #4294967295
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff ffe7 	bl	800162c <_kill>
  while (1) {}    /* Make sure we hang here */
 800165e:	e7fe      	b.n	800165e <_exit+0x12>

08001660 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166c:	2300      	movs	r3, #0
 800166e:	617b      	str	r3, [r7, #20]
 8001670:	e00a      	b.n	8001688 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001672:	f3af 8000 	nop.w
 8001676:	4601      	mov	r1, r0
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	60ba      	str	r2, [r7, #8]
 800167e:	b2ca      	uxtb	r2, r1
 8001680:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	3301      	adds	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	697a      	ldr	r2, [r7, #20]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	429a      	cmp	r2, r3
 800168e:	dbf0      	blt.n	8001672 <_read+0x12>
  }

  return len;
 8001690:	687b      	ldr	r3, [r7, #4]
}
 8001692:	4618      	mov	r0, r3
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	60f8      	str	r0, [r7, #12]
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	e009      	b.n	80016c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	60ba      	str	r2, [r7, #8]
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fc2b 	bl	8000f10 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3301      	adds	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	dbf1      	blt.n	80016ac <_write+0x12>
  }
  return len;
 80016c8:	687b      	ldr	r3, [r7, #4]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <_close>:

int _close(int file)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016fa:	605a      	str	r2, [r3, #4]
  return 0;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <_isatty>:

int _isatty(int file)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001712:	2301      	movs	r3, #1
}
 8001714:	4618      	mov	r0, r3
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
	...

0800173c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001744:	4a14      	ldr	r2, [pc, #80]	; (8001798 <_sbrk+0x5c>)
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <_sbrk+0x60>)
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001750:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <_sbrk+0x64>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d102      	bne.n	800175e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001758:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <_sbrk+0x64>)
 800175a:	4a12      	ldr	r2, [pc, #72]	; (80017a4 <_sbrk+0x68>)
 800175c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175e:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	429a      	cmp	r2, r3
 800176a:	d207      	bcs.n	800177c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800176c:	f010 f896 	bl	801189c <__errno>
 8001770:	4603      	mov	r3, r0
 8001772:	220c      	movs	r2, #12
 8001774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001776:	f04f 33ff 	mov.w	r3, #4294967295
 800177a:	e009      	b.n	8001790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <_sbrk+0x64>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001782:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <_sbrk+0x64>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <_sbrk+0x64>)
 800178c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800178e:	68fb      	ldr	r3, [r7, #12]
}
 8001790:	4618      	mov	r0, r3
 8001792:	3718      	adds	r7, #24
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	24080000 	.word	0x24080000
 800179c:	00000400 	.word	0x00000400
 80017a0:	240149b0 	.word	0x240149b0
 80017a4:	24015358 	.word	0x24015358

080017a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80017a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80017ac:	f7ff f8cc 	bl	8000948 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017b0:	480c      	ldr	r0, [pc, #48]	; (80017e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017b2:	490d      	ldr	r1, [pc, #52]	; (80017e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017b4:	4a0d      	ldr	r2, [pc, #52]	; (80017ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b8:	e002      	b.n	80017c0 <LoopCopyDataInit>

080017ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017be:	3304      	adds	r3, #4

080017c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c4:	d3f9      	bcc.n	80017ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c6:	4a0a      	ldr	r2, [pc, #40]	; (80017f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017c8:	4c0a      	ldr	r4, [pc, #40]	; (80017f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017cc:	e001      	b.n	80017d2 <LoopFillZerobss>

080017ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d0:	3204      	adds	r2, #4

080017d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d4:	d3fb      	bcc.n	80017ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017d6:	f010 f879 	bl	80118cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017da:	f7ff f965 	bl	8000aa8 <main>
  bx  lr
 80017de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017e0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017e8:	240000d8 	.word	0x240000d8
  ldr r2, =_sidata
 80017ec:	08012ccc 	.word	0x08012ccc
  ldr r2, =_sbss
 80017f0:	240000e0 	.word	0x240000e0
  ldr r4, =_ebss
 80017f4:	24015354 	.word	0x24015354

080017f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017f8:	e7fe      	b.n	80017f8 <ADC3_IRQHandler>
	...

080017fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001802:	2003      	movs	r0, #3
 8001804:	f000 f957 	bl	8001ab6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001808:	f001 fcc8 	bl	800319c <HAL_RCC_GetSysClockFreq>
 800180c:	4602      	mov	r2, r0
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <HAL_Init+0x68>)
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	0a1b      	lsrs	r3, r3, #8
 8001814:	f003 030f 	and.w	r3, r3, #15
 8001818:	4913      	ldr	r1, [pc, #76]	; (8001868 <HAL_Init+0x6c>)
 800181a:	5ccb      	ldrb	r3, [r1, r3]
 800181c:	f003 031f 	and.w	r3, r3, #31
 8001820:	fa22 f303 	lsr.w	r3, r2, r3
 8001824:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001826:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <HAL_Init+0x68>)
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	4a0e      	ldr	r2, [pc, #56]	; (8001868 <HAL_Init+0x6c>)
 8001830:	5cd3      	ldrb	r3, [r2, r3]
 8001832:	f003 031f 	and.w	r3, r3, #31
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	fa22 f303 	lsr.w	r3, r2, r3
 800183c:	4a0b      	ldr	r2, [pc, #44]	; (800186c <HAL_Init+0x70>)
 800183e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001840:	4a0b      	ldr	r2, [pc, #44]	; (8001870 <HAL_Init+0x74>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001846:	200f      	movs	r0, #15
 8001848:	f7ff fe4a 	bl	80014e0 <HAL_InitTick>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e002      	b.n	800185c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001856:	f7ff fcdf 	bl	8001218 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	58024400 	.word	0x58024400
 8001868:	08012b94 	.word	0x08012b94
 800186c:	24000004 	.word	0x24000004
 8001870:	24000000 	.word	0x24000000

08001874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_IncTick+0x20>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_IncTick+0x24>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4413      	add	r3, r2
 8001884:	4a04      	ldr	r2, [pc, #16]	; (8001898 <HAL_IncTick+0x24>)
 8001886:	6013      	str	r3, [r2, #0]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	24000010 	.word	0x24000010
 8001898:	240149b4 	.word	0x240149b4

0800189c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return uwTick;
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <HAL_GetTick+0x14>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	240149b4 	.word	0x240149b4

080018b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018bc:	f7ff ffee 	bl	800189c <HAL_GetTick>
 80018c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018cc:	d005      	beq.n	80018da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_Delay+0x44>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018da:	bf00      	nop
 80018dc:	f7ff ffde 	bl	800189c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d8f7      	bhi.n	80018dc <HAL_Delay+0x28>
  {
  }
}
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	24000010 	.word	0x24000010

080018fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001900:	4b03      	ldr	r3, [pc, #12]	; (8001910 <HAL_GetREVID+0x14>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	0c1b      	lsrs	r3, r3, #16
}
 8001906:	4618      	mov	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	5c001000 	.word	0x5c001000

08001914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001924:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <__NVIC_SetPriorityGrouping+0x40>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001930:	4013      	ands	r3, r2
 8001932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 800193e:	4313      	orrs	r3, r2
 8001940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001942:	4a04      	ldr	r2, [pc, #16]	; (8001954 <__NVIC_SetPriorityGrouping+0x40>)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	60d3      	str	r3, [r2, #12]
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00
 8001958:	05fa0000 	.word	0x05fa0000

0800195c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <__NVIC_GetPriorityGrouping+0x18>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	f003 0307 	and.w	r3, r3, #7
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001982:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001986:	2b00      	cmp	r3, #0
 8001988:	db0b      	blt.n	80019a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	f003 021f 	and.w	r2, r3, #31
 8001990:	4907      	ldr	r1, [pc, #28]	; (80019b0 <__NVIC_EnableIRQ+0x38>)
 8001992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001996:	095b      	lsrs	r3, r3, #5
 8001998:	2001      	movs	r0, #1
 800199a:	fa00 f202 	lsl.w	r2, r0, r2
 800199e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000e100 	.word	0xe000e100

080019b4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80019be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	db12      	blt.n	80019ec <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019c6:	88fb      	ldrh	r3, [r7, #6]
 80019c8:	f003 021f 	and.w	r2, r3, #31
 80019cc:	490a      	ldr	r1, [pc, #40]	; (80019f8 <__NVIC_DisableIRQ+0x44>)
 80019ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019d2:	095b      	lsrs	r3, r3, #5
 80019d4:	2001      	movs	r0, #1
 80019d6:	fa00 f202 	lsl.w	r2, r0, r2
 80019da:	3320      	adds	r3, #32
 80019dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019e0:	f3bf 8f4f 	dsb	sy
}
 80019e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019e6:	f3bf 8f6f 	isb	sy
}
 80019ea:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80019ec:	bf00      	nop
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000e100 	.word	0xe000e100

080019fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	6039      	str	r1, [r7, #0]
 8001a06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	db0a      	blt.n	8001a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	490c      	ldr	r1, [pc, #48]	; (8001a48 <__NVIC_SetPriority+0x4c>)
 8001a16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a1a:	0112      	lsls	r2, r2, #4
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	440b      	add	r3, r1
 8001a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a24:	e00a      	b.n	8001a3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4908      	ldr	r1, [pc, #32]	; (8001a4c <__NVIC_SetPriority+0x50>)
 8001a2c:	88fb      	ldrh	r3, [r7, #6]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	3b04      	subs	r3, #4
 8001a34:	0112      	lsls	r2, r2, #4
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	440b      	add	r3, r1
 8001a3a:	761a      	strb	r2, [r3, #24]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000e100 	.word	0xe000e100
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b089      	sub	sp, #36	; 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f1c3 0307 	rsb	r3, r3, #7
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	bf28      	it	cs
 8001a6e:	2304      	movcs	r3, #4
 8001a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3304      	adds	r3, #4
 8001a76:	2b06      	cmp	r3, #6
 8001a78:	d902      	bls.n	8001a80 <NVIC_EncodePriority+0x30>
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3b03      	subs	r3, #3
 8001a7e:	e000      	b.n	8001a82 <NVIC_EncodePriority+0x32>
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	f04f 32ff 	mov.w	r2, #4294967295
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	401a      	ands	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a98:	f04f 31ff 	mov.w	r1, #4294967295
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa2:	43d9      	mvns	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	4313      	orrs	r3, r2
         );
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3724      	adds	r7, #36	; 0x24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ff28 	bl	8001914 <__NVIC_SetPriorityGrouping>
}
 8001ac4:	bf00      	nop
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
 8001ad8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ada:	f7ff ff3f 	bl	800195c <__NVIC_GetPriorityGrouping>
 8001ade:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	68b9      	ldr	r1, [r7, #8]
 8001ae4:	6978      	ldr	r0, [r7, #20]
 8001ae6:	f7ff ffb3 	bl	8001a50 <NVIC_EncodePriority>
 8001aea:	4602      	mov	r2, r0
 8001aec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001af0:	4611      	mov	r1, r2
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff ff82 	bl	80019fc <__NVIC_SetPriority>
}
 8001af8:	bf00      	nop
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff ff32 	bl	8001978 <__NVIC_EnableIRQ>
}
 8001b14:	bf00      	nop
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001b26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff ff42 	bl	80019b4 <__NVIC_DisableIRQ>
}
 8001b30:	bf00      	nop
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b089      	sub	sp, #36	; 0x24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b46:	4b89      	ldr	r3, [pc, #548]	; (8001d6c <HAL_GPIO_Init+0x234>)
 8001b48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b4a:	e194      	b.n	8001e76 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	2101      	movs	r1, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa01 f303 	lsl.w	r3, r1, r3
 8001b58:	4013      	ands	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 8186 	beq.w	8001e70 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d005      	beq.n	8001b7c <HAL_GPIO_Init+0x44>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d130      	bne.n	8001bde <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	2203      	movs	r2, #3
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	091b      	lsrs	r3, r3, #4
 8001bc8:	f003 0201 	and.w	r2, r3, #1
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d017      	beq.n	8001c1a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d123      	bne.n	8001c6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	08da      	lsrs	r2, r3, #3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3208      	adds	r2, #8
 8001c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	08da      	lsrs	r2, r3, #3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3208      	adds	r2, #8
 8001c68:	69b9      	ldr	r1, [r7, #24]
 8001c6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2203      	movs	r2, #3
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 0203 	and.w	r2, r3, #3
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 80e0 	beq.w	8001e70 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb0:	4b2f      	ldr	r3, [pc, #188]	; (8001d70 <HAL_GPIO_Init+0x238>)
 8001cb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cb6:	4a2e      	ldr	r2, [pc, #184]	; (8001d70 <HAL_GPIO_Init+0x238>)
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cc0:	4b2b      	ldr	r3, [pc, #172]	; (8001d70 <HAL_GPIO_Init+0x238>)
 8001cc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cce:	4a29      	ldr	r2, [pc, #164]	; (8001d74 <HAL_GPIO_Init+0x23c>)
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	089b      	lsrs	r3, r3, #2
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	220f      	movs	r2, #15
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a20      	ldr	r2, [pc, #128]	; (8001d78 <HAL_GPIO_Init+0x240>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d052      	beq.n	8001da0 <HAL_GPIO_Init+0x268>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a1f      	ldr	r2, [pc, #124]	; (8001d7c <HAL_GPIO_Init+0x244>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d031      	beq.n	8001d66 <HAL_GPIO_Init+0x22e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a1e      	ldr	r2, [pc, #120]	; (8001d80 <HAL_GPIO_Init+0x248>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d02b      	beq.n	8001d62 <HAL_GPIO_Init+0x22a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a1d      	ldr	r2, [pc, #116]	; (8001d84 <HAL_GPIO_Init+0x24c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d025      	beq.n	8001d5e <HAL_GPIO_Init+0x226>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <HAL_GPIO_Init+0x250>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d01f      	beq.n	8001d5a <HAL_GPIO_Init+0x222>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a1b      	ldr	r2, [pc, #108]	; (8001d8c <HAL_GPIO_Init+0x254>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d019      	beq.n	8001d56 <HAL_GPIO_Init+0x21e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a1a      	ldr	r2, [pc, #104]	; (8001d90 <HAL_GPIO_Init+0x258>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d013      	beq.n	8001d52 <HAL_GPIO_Init+0x21a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a19      	ldr	r2, [pc, #100]	; (8001d94 <HAL_GPIO_Init+0x25c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00d      	beq.n	8001d4e <HAL_GPIO_Init+0x216>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a18      	ldr	r2, [pc, #96]	; (8001d98 <HAL_GPIO_Init+0x260>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d007      	beq.n	8001d4a <HAL_GPIO_Init+0x212>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a17      	ldr	r2, [pc, #92]	; (8001d9c <HAL_GPIO_Init+0x264>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d101      	bne.n	8001d46 <HAL_GPIO_Init+0x20e>
 8001d42:	2309      	movs	r3, #9
 8001d44:	e02d      	b.n	8001da2 <HAL_GPIO_Init+0x26a>
 8001d46:	230a      	movs	r3, #10
 8001d48:	e02b      	b.n	8001da2 <HAL_GPIO_Init+0x26a>
 8001d4a:	2308      	movs	r3, #8
 8001d4c:	e029      	b.n	8001da2 <HAL_GPIO_Init+0x26a>
 8001d4e:	2307      	movs	r3, #7
 8001d50:	e027      	b.n	8001da2 <HAL_GPIO_Init+0x26a>
 8001d52:	2306      	movs	r3, #6
 8001d54:	e025      	b.n	8001da2 <HAL_GPIO_Init+0x26a>
 8001d56:	2305      	movs	r3, #5
 8001d58:	e023      	b.n	8001da2 <HAL_GPIO_Init+0x26a>
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	e021      	b.n	8001da2 <HAL_GPIO_Init+0x26a>
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e01f      	b.n	8001da2 <HAL_GPIO_Init+0x26a>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e01d      	b.n	8001da2 <HAL_GPIO_Init+0x26a>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e01b      	b.n	8001da2 <HAL_GPIO_Init+0x26a>
 8001d6a:	bf00      	nop
 8001d6c:	58000080 	.word	0x58000080
 8001d70:	58024400 	.word	0x58024400
 8001d74:	58000400 	.word	0x58000400
 8001d78:	58020000 	.word	0x58020000
 8001d7c:	58020400 	.word	0x58020400
 8001d80:	58020800 	.word	0x58020800
 8001d84:	58020c00 	.word	0x58020c00
 8001d88:	58021000 	.word	0x58021000
 8001d8c:	58021400 	.word	0x58021400
 8001d90:	58021800 	.word	0x58021800
 8001d94:	58021c00 	.word	0x58021c00
 8001d98:	58022000 	.word	0x58022000
 8001d9c:	58022400 	.word	0x58022400
 8001da0:	2300      	movs	r3, #0
 8001da2:	69fa      	ldr	r2, [r7, #28]
 8001da4:	f002 0203 	and.w	r2, r2, #3
 8001da8:	0092      	lsls	r2, r2, #2
 8001daa:	4093      	lsls	r3, r2
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001db2:	4938      	ldr	r1, [pc, #224]	; (8001e94 <HAL_GPIO_Init+0x35c>)
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	089b      	lsrs	r3, r3, #2
 8001db8:	3302      	adds	r3, #2
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	43db      	mvns	r3, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d003      	beq.n	8001de6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001de6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001dee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4013      	ands	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	3301      	adds	r3, #1
 8001e74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f47f ae63 	bne.w	8001b4c <HAL_GPIO_Init+0x14>
  }
}
 8001e86:	bf00      	nop
 8001e88:	bf00      	nop
 8001e8a:	3724      	adds	r7, #36	; 0x24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	58000400 	.word	0x58000400

08001e98 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b087      	sub	sp, #28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ea6:	4b75      	ldr	r3, [pc, #468]	; (800207c <HAL_GPIO_DeInit+0x1e4>)
 8001ea8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8001eaa:	e0d9      	b.n	8002060 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8001eac:	2201      	movs	r2, #1
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 80cc 	beq.w	800205a <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001ec2:	4a6f      	ldr	r2, [pc, #444]	; (8002080 <HAL_GPIO_DeInit+0x1e8>)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	089b      	lsrs	r3, r3, #2
 8001ec8:	3302      	adds	r3, #2
 8001eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ece:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	220f      	movs	r2, #15
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4a67      	ldr	r2, [pc, #412]	; (8002084 <HAL_GPIO_DeInit+0x1ec>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d037      	beq.n	8001f5c <HAL_GPIO_DeInit+0xc4>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a66      	ldr	r2, [pc, #408]	; (8002088 <HAL_GPIO_DeInit+0x1f0>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d031      	beq.n	8001f58 <HAL_GPIO_DeInit+0xc0>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a65      	ldr	r2, [pc, #404]	; (800208c <HAL_GPIO_DeInit+0x1f4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d02b      	beq.n	8001f54 <HAL_GPIO_DeInit+0xbc>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a64      	ldr	r2, [pc, #400]	; (8002090 <HAL_GPIO_DeInit+0x1f8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d025      	beq.n	8001f50 <HAL_GPIO_DeInit+0xb8>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a63      	ldr	r2, [pc, #396]	; (8002094 <HAL_GPIO_DeInit+0x1fc>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d01f      	beq.n	8001f4c <HAL_GPIO_DeInit+0xb4>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a62      	ldr	r2, [pc, #392]	; (8002098 <HAL_GPIO_DeInit+0x200>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d019      	beq.n	8001f48 <HAL_GPIO_DeInit+0xb0>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a61      	ldr	r2, [pc, #388]	; (800209c <HAL_GPIO_DeInit+0x204>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d013      	beq.n	8001f44 <HAL_GPIO_DeInit+0xac>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a60      	ldr	r2, [pc, #384]	; (80020a0 <HAL_GPIO_DeInit+0x208>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d00d      	beq.n	8001f40 <HAL_GPIO_DeInit+0xa8>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a5f      	ldr	r2, [pc, #380]	; (80020a4 <HAL_GPIO_DeInit+0x20c>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d007      	beq.n	8001f3c <HAL_GPIO_DeInit+0xa4>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a5e      	ldr	r2, [pc, #376]	; (80020a8 <HAL_GPIO_DeInit+0x210>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d101      	bne.n	8001f38 <HAL_GPIO_DeInit+0xa0>
 8001f34:	2309      	movs	r3, #9
 8001f36:	e012      	b.n	8001f5e <HAL_GPIO_DeInit+0xc6>
 8001f38:	230a      	movs	r3, #10
 8001f3a:	e010      	b.n	8001f5e <HAL_GPIO_DeInit+0xc6>
 8001f3c:	2308      	movs	r3, #8
 8001f3e:	e00e      	b.n	8001f5e <HAL_GPIO_DeInit+0xc6>
 8001f40:	2307      	movs	r3, #7
 8001f42:	e00c      	b.n	8001f5e <HAL_GPIO_DeInit+0xc6>
 8001f44:	2306      	movs	r3, #6
 8001f46:	e00a      	b.n	8001f5e <HAL_GPIO_DeInit+0xc6>
 8001f48:	2305      	movs	r3, #5
 8001f4a:	e008      	b.n	8001f5e <HAL_GPIO_DeInit+0xc6>
 8001f4c:	2304      	movs	r3, #4
 8001f4e:	e006      	b.n	8001f5e <HAL_GPIO_DeInit+0xc6>
 8001f50:	2303      	movs	r3, #3
 8001f52:	e004      	b.n	8001f5e <HAL_GPIO_DeInit+0xc6>
 8001f54:	2302      	movs	r3, #2
 8001f56:	e002      	b.n	8001f5e <HAL_GPIO_DeInit+0xc6>
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e000      	b.n	8001f5e <HAL_GPIO_DeInit+0xc6>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	f002 0203 	and.w	r2, r2, #3
 8001f64:	0092      	lsls	r2, r2, #2
 8001f66:	4093      	lsls	r3, r2
 8001f68:	68ba      	ldr	r2, [r7, #8]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d136      	bne.n	8001fdc <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	401a      	ands	r2, r3
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	43db      	mvns	r3, r3
 8001f84:	401a      	ands	r2, r3
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	43db      	mvns	r3, r3
 8001f94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f98:	4013      	ands	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8001f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	43db      	mvns	r3, r3
 8001fa6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001faa:	4013      	ands	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001fbe:	4a30      	ldr	r2, [pc, #192]	; (8002080 <HAL_GPIO_DeInit+0x1e8>)
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	089b      	lsrs	r3, r3, #2
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	43da      	mvns	r2, r3
 8001fce:	482c      	ldr	r0, [pc, #176]	; (8002080 <HAL_GPIO_DeInit+0x1e8>)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	400a      	ands	r2, r1
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	2103      	movs	r1, #3
 8001fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	08da      	lsrs	r2, r3, #3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3208      	adds	r2, #8
 8001ff8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	220f      	movs	r2, #15
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43db      	mvns	r3, r3
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	08d2      	lsrs	r2, r2, #3
 8002010:	4019      	ands	r1, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	3208      	adds	r2, #8
 8002016:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	68da      	ldr	r2, [r3, #12]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	2103      	movs	r1, #3
 8002024:	fa01 f303 	lsl.w	r3, r1, r3
 8002028:	43db      	mvns	r3, r3
 800202a:	401a      	ands	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	2101      	movs	r1, #1
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	fa01 f303 	lsl.w	r3, r1, r3
 800203c:	43db      	mvns	r3, r3
 800203e:	401a      	ands	r2, r3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	2103      	movs	r1, #3
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	401a      	ands	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	609a      	str	r2, [r3, #8]
    }

    position++;
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	3301      	adds	r3, #1
 800205e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	fa22 f303 	lsr.w	r3, r2, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	f47f af1f 	bne.w	8001eac <HAL_GPIO_DeInit+0x14>
  }
}
 800206e:	bf00      	nop
 8002070:	bf00      	nop
 8002072:	371c      	adds	r7, #28
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	58000080 	.word	0x58000080
 8002080:	58000400 	.word	0x58000400
 8002084:	58020000 	.word	0x58020000
 8002088:	58020400 	.word	0x58020400
 800208c:	58020800 	.word	0x58020800
 8002090:	58020c00 	.word	0x58020c00
 8002094:	58021000 	.word	0x58021000
 8002098:	58021400 	.word	0x58021400
 800209c:	58021800 	.word	0x58021800
 80020a0:	58021c00 	.word	0x58021c00
 80020a4:	58022000 	.word	0x58022000
 80020a8:	58022400 	.word	0x58022400

080020ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	887b      	ldrh	r3, [r7, #2]
 80020be:	4013      	ands	r3, r2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d002      	beq.n	80020ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020c4:	2301      	movs	r3, #1
 80020c6:	73fb      	strb	r3, [r7, #15]
 80020c8:	e001      	b.n	80020ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020ca:	2300      	movs	r3, #0
 80020cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	807b      	strh	r3, [r7, #2]
 80020e8:	4613      	mov	r3, r2
 80020ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020ec:	787b      	ldrb	r3, [r7, #1]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020f2:	887a      	ldrh	r2, [r7, #2]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80020f8:	e003      	b.n	8002102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80020fa:	887b      	ldrh	r3, [r7, #2]
 80020fc:	041a      	lsls	r2, r3, #16
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	619a      	str	r2, [r3, #24]
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	4603      	mov	r3, r0
 8002116:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800211c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002120:	88fb      	ldrh	r3, [r7, #6]
 8002122:	4013      	ands	r3, r2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d008      	beq.n	800213a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002128:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800212c:	88fb      	ldrh	r3, [r7, #6]
 800212e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002132:	88fb      	ldrh	r3, [r7, #6]
 8002134:	4618      	mov	r0, r3
 8002136:	f7fe ffbf 	bl	80010b8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800214c:	4a08      	ldr	r2, [pc, #32]	; (8002170 <HAL_HSEM_FastTake+0x2c>)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3320      	adds	r3, #32
 8002152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002156:	4a07      	ldr	r2, [pc, #28]	; (8002174 <HAL_HSEM_FastTake+0x30>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d101      	bne.n	8002160 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800215c:	2300      	movs	r3, #0
 800215e:	e000      	b.n	8002162 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	58026400 	.word	0x58026400
 8002174:	80000300 	.word	0x80000300

08002178 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002182:	4906      	ldr	r1, [pc, #24]	; (800219c <HAL_HSEM_Release+0x24>)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	58026400 	.word	0x58026400

080021a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80021a8:	4b29      	ldr	r3, [pc, #164]	; (8002250 <HAL_PWREx_ConfigSupply+0xb0>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	2b06      	cmp	r3, #6
 80021b2:	d00a      	beq.n	80021ca <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80021b4:	4b26      	ldr	r3, [pc, #152]	; (8002250 <HAL_PWREx_ConfigSupply+0xb0>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d001      	beq.n	80021c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e040      	b.n	8002248 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	e03e      	b.n	8002248 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80021ca:	4b21      	ldr	r3, [pc, #132]	; (8002250 <HAL_PWREx_ConfigSupply+0xb0>)
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80021d2:	491f      	ldr	r1, [pc, #124]	; (8002250 <HAL_PWREx_ConfigSupply+0xb0>)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80021da:	f7ff fb5f 	bl	800189c <HAL_GetTick>
 80021de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021e0:	e009      	b.n	80021f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80021e2:	f7ff fb5b 	bl	800189c <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021f0:	d901      	bls.n	80021f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e028      	b.n	8002248 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021f6:	4b16      	ldr	r3, [pc, #88]	; (8002250 <HAL_PWREx_ConfigSupply+0xb0>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002202:	d1ee      	bne.n	80021e2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b1e      	cmp	r3, #30
 8002208:	d008      	beq.n	800221c <HAL_PWREx_ConfigSupply+0x7c>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b2e      	cmp	r3, #46	; 0x2e
 800220e:	d005      	beq.n	800221c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2b1d      	cmp	r3, #29
 8002214:	d002      	beq.n	800221c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b2d      	cmp	r3, #45	; 0x2d
 800221a:	d114      	bne.n	8002246 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800221c:	f7ff fb3e 	bl	800189c <HAL_GetTick>
 8002220:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002222:	e009      	b.n	8002238 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002224:	f7ff fb3a 	bl	800189c <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002232:	d901      	bls.n	8002238 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e007      	b.n	8002248 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <HAL_PWREx_ConfigSupply+0xb0>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002244:	d1ee      	bne.n	8002224 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	58024800 	.word	0x58024800

08002254 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Increasing the CPU frequency */
  if (FLASH_LATENCY_DEFAULT  > __HAL_FLASH_GET_LATENCY())
 800225a:	4b89      	ldr	r3, [pc, #548]	; (8002480 <HAL_RCC_DeInit+0x22c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	2b06      	cmp	r3, #6
 8002264:	d80f      	bhi.n	8002286 <HAL_RCC_DeInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8002266:	4b86      	ldr	r3, [pc, #536]	; (8002480 <HAL_RCC_DeInit+0x22c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f023 030f 	bic.w	r3, r3, #15
 800226e:	4a84      	ldr	r2, [pc, #528]	; (8002480 <HAL_RCC_DeInit+0x22c>)
 8002270:	f043 0307 	orr.w	r3, r3, #7
 8002274:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8002276:	4b82      	ldr	r3, [pc, #520]	; (8002480 <HAL_RCC_DeInit+0x22c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 030f 	and.w	r3, r3, #15
 800227e:	2b07      	cmp	r3, #7
 8002280:	d001      	beq.n	8002286 <HAL_RCC_DeInit+0x32>
    {
      return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e0f7      	b.n	8002476 <HAL_RCC_DeInit+0x222>

  }


  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002286:	f7ff fb09 	bl	800189c <HAL_GetTick>
 800228a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800228c:	4b7d      	ldr	r3, [pc, #500]	; (8002484 <HAL_RCC_DeInit+0x230>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a7c      	ldr	r2, [pc, #496]	; (8002484 <HAL_RCC_DeInit+0x230>)
 8002292:	f043 0301 	orr.w	r3, r3, #1
 8002296:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002298:	e008      	b.n	80022ac <HAL_RCC_DeInit+0x58>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800229a:	f7ff faff 	bl	800189c <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_DeInit+0x58>
    {
      return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e0e4      	b.n	8002476 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022ac:	4b75      	ldr	r3, [pc, #468]	; (8002484 <HAL_RCC_DeInit+0x230>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0f0      	beq.n	800229a <HAL_RCC_DeInit+0x46>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  SET_BIT(RCC->HSICFGR, RCC_HSICFGR_HSITRIM_6);
 80022b8:	4b72      	ldr	r3, [pc, #456]	; (8002484 <HAL_RCC_DeInit+0x230>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	4a71      	ldr	r2, [pc, #452]	; (8002484 <HAL_RCC_DeInit+0x230>)
 80022be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80022c2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 80022c4:	4b6f      	ldr	r3, [pc, #444]	; (8002484 <HAL_RCC_DeInit+0x230>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]

  /* Update the SystemCoreClock and SystemD2Clock global variables */
  SystemCoreClock = HSI_VALUE;
 80022ca:	4b6f      	ldr	r3, [pc, #444]	; (8002488 <HAL_RCC_DeInit+0x234>)
 80022cc:	4a6f      	ldr	r2, [pc, #444]	; (800248c <HAL_RCC_DeInit+0x238>)
 80022ce:	601a      	str	r2, [r3, #0]
  SystemD2Clock = HSI_VALUE;
 80022d0:	4b6f      	ldr	r3, [pc, #444]	; (8002490 <HAL_RCC_DeInit+0x23c>)
 80022d2:	4a6e      	ldr	r2, [pc, #440]	; (800248c <HAL_RCC_DeInit+0x238>)
 80022d4:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80022d6:	4b6f      	ldr	r3, [pc, #444]	; (8002494 <HAL_RCC_DeInit+0x240>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff f900 	bl	80014e0 <HAL_InitTick>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_RCC_DeInit+0x96>
  {
    return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e0c5      	b.n	8002476 <HAL_RCC_DeInit+0x222>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80022ea:	f7ff fad7 	bl	800189c <HAL_GetTick>
 80022ee:	6078      	str	r0, [r7, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 80022f0:	e00a      	b.n	8002308 <HAL_RCC_DeInit+0xb4>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f2:	f7ff fad3 	bl	800189c <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002300:	4293      	cmp	r3, r2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_DeInit+0xb4>
    {
      return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e0b6      	b.n	8002476 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8002308:	4b5e      	ldr	r3, [pc, #376]	; (8002484 <HAL_RCC_DeInit+0x230>)
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1ee      	bne.n	80022f2 <HAL_RCC_DeInit+0x9e>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002314:	f7ff fac2 	bl	800189c <HAL_GetTick>
 8002318:	6078      	str	r0, [r7, #4]

  /* Reset CSION, CSIKERON, HSEON, HSI48ON, HSECSSON, HSIDIV bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSIKERON | RCC_CR_HSIDIV | RCC_CR_HSIDIVF | RCC_CR_CSION | RCC_CR_CSIKERON  \
 800231a:	4b5a      	ldr	r3, [pc, #360]	; (8002484 <HAL_RCC_DeInit+0x230>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	4959      	ldr	r1, [pc, #356]	; (8002484 <HAL_RCC_DeInit+0x230>)
 8002320:	4b5d      	ldr	r3, [pc, #372]	; (8002498 <HAL_RCC_DeInit+0x244>)
 8002322:	4013      	ands	r3, r2
 8002324:	600b      	str	r3, [r1, #0]
            | RCC_CR_HSI48ON | RCC_CR_CSSHSEON);

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_DeInit+0xe6>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002328:	f7ff fab8 	bl	800189c <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	; 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCC_DeInit+0xe6>
    {
      return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e09d      	b.n	8002476 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800233a:	4b52      	ldr	r3, [pc, #328]	; (8002484 <HAL_RCC_DeInit+0x230>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_DeInit+0xd4>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002346:	f7ff faa9 	bl	800189c <HAL_GetTick>
 800234a:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL1ON);
 800234c:	4b4d      	ldr	r3, [pc, #308]	; (8002484 <HAL_RCC_DeInit+0x230>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a4c      	ldr	r2, [pc, #304]	; (8002484 <HAL_RCC_DeInit+0x230>)
 8002352:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002356:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8002358:	e008      	b.n	800236c <HAL_RCC_DeInit+0x118>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235a:	f7ff fa9f 	bl	800189c <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_DeInit+0x118>
    {
      return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e084      	b.n	8002476 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800236c:	4b45      	ldr	r3, [pc, #276]	; (8002484 <HAL_RCC_DeInit+0x230>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f0      	bne.n	800235a <HAL_RCC_DeInit+0x106>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002378:	f7ff fa90 	bl	800189c <HAL_GetTick>
 800237c:	6078      	str	r0, [r7, #4]

  /* Reset PLL2ON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL2ON);
 800237e:	4b41      	ldr	r3, [pc, #260]	; (8002484 <HAL_RCC_DeInit+0x230>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a40      	ldr	r2, [pc, #256]	; (8002484 <HAL_RCC_DeInit+0x230>)
 8002384:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002388:	6013      	str	r3, [r2, #0]

  /* Wait till PLL2 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_DeInit+0x14a>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238c:	f7ff fa86 	bl	800189c <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_DeInit+0x14a>
    {
      return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e06b      	b.n	8002476 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL2RDY) != 0U)
 800239e:	4b39      	ldr	r3, [pc, #228]	; (8002484 <HAL_RCC_DeInit+0x230>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_DeInit+0x138>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80023aa:	f7ff fa77 	bl	800189c <HAL_GetTick>
 80023ae:	6078      	str	r0, [r7, #4]

  /* Reset PLL3 bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLL3ON);
 80023b0:	4b34      	ldr	r3, [pc, #208]	; (8002484 <HAL_RCC_DeInit+0x230>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a33      	ldr	r2, [pc, #204]	; (8002484 <HAL_RCC_DeInit+0x230>)
 80023b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ba:	6013      	str	r3, [r2, #0]

  /* Wait till PLL3 is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_DeInit+0x17c>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023be:	f7ff fa6d 	bl	800189c <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_DeInit+0x17c>
    {
      return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e052      	b.n	8002476 <HAL_RCC_DeInit+0x222>
  while (READ_BIT(RCC->CR, RCC_CR_PLL3RDY) != 0U)
 80023d0:	4b2c      	ldr	r3, [pc, #176]	; (8002484 <HAL_RCC_DeInit+0x230>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f0      	bne.n	80023be <HAL_RCC_DeInit+0x16a>
    }
  }

#if defined(RCC_D1CFGR_HPRE)
  /* Reset D1CFGR register */
  CLEAR_REG(RCC->D1CFGR);
 80023dc:	4b29      	ldr	r3, [pc, #164]	; (8002484 <HAL_RCC_DeInit+0x230>)
 80023de:	2200      	movs	r2, #0
 80023e0:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  CLEAR_REG(RCC->D2CFGR);
 80023e2:	4b28      	ldr	r3, [pc, #160]	; (8002484 <HAL_RCC_DeInit+0x230>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  CLEAR_REG(RCC->D3CFGR);
 80023e8:	4b26      	ldr	r3, [pc, #152]	; (8002484 <HAL_RCC_DeInit+0x230>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	621a      	str	r2, [r3, #32]
  /* Reset SRDCFGR register */
  CLEAR_REG(RCC->SRDCFGR);
#endif

  /* Reset PLLCKSELR register to default value */
  RCC->PLLCKSELR = RCC_PLLCKSELR_DIVM1_5 | RCC_PLLCKSELR_DIVM2_5 | RCC_PLLCKSELR_DIVM3_5;
 80023ee:	4b25      	ldr	r3, [pc, #148]	; (8002484 <HAL_RCC_DeInit+0x230>)
 80023f0:	4a2a      	ldr	r2, [pc, #168]	; (800249c <HAL_RCC_DeInit+0x248>)
 80023f2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register to default value */
  WRITE_REG(RCC->PLLCFGR, 0x01FF0000U);
 80023f4:	4b23      	ldr	r3, [pc, #140]	; (8002484 <HAL_RCC_DeInit+0x230>)
 80023f6:	4a2a      	ldr	r2, [pc, #168]	; (80024a0 <HAL_RCC_DeInit+0x24c>)
 80023f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset PLL1DIVR register to default value */
  WRITE_REG(RCC->PLL1DIVR, 0x01010280U);
 80023fa:	4b22      	ldr	r3, [pc, #136]	; (8002484 <HAL_RCC_DeInit+0x230>)
 80023fc:	4a29      	ldr	r2, [pc, #164]	; (80024a4 <HAL_RCC_DeInit+0x250>)
 80023fe:	631a      	str	r2, [r3, #48]	; 0x30

  /* Reset PLL1FRACR register */
  CLEAR_REG(RCC->PLL1FRACR);
 8002400:	4b20      	ldr	r3, [pc, #128]	; (8002484 <HAL_RCC_DeInit+0x230>)
 8002402:	2200      	movs	r2, #0
 8002404:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register to default value */
  WRITE_REG(RCC->PLL2DIVR, 0x01010280U);
 8002406:	4b1f      	ldr	r3, [pc, #124]	; (8002484 <HAL_RCC_DeInit+0x230>)
 8002408:	4a26      	ldr	r2, [pc, #152]	; (80024a4 <HAL_RCC_DeInit+0x250>)
 800240a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */
  CLEAR_REG(RCC->PLL2FRACR);
 800240c:	4b1d      	ldr	r3, [pc, #116]	; (8002484 <HAL_RCC_DeInit+0x230>)
 800240e:	2200      	movs	r2, #0
 8002410:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Reset PLL3DIVR register to default value */
  WRITE_REG(RCC->PLL3DIVR, 0x01010280U);
 8002412:	4b1c      	ldr	r3, [pc, #112]	; (8002484 <HAL_RCC_DeInit+0x230>)
 8002414:	4a23      	ldr	r2, [pc, #140]	; (80024a4 <HAL_RCC_DeInit+0x250>)
 8002416:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  CLEAR_REG(RCC->PLL3FRACR);
 8002418:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <HAL_RCC_DeInit+0x230>)
 800241a:	2200      	movs	r2, #0
 800241c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Reset HSEEXT  */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEEXT);
#endif /* RCC_CR_HSEEXT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800241e:	4b19      	ldr	r3, [pc, #100]	; (8002484 <HAL_RCC_DeInit+0x230>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a18      	ldr	r2, [pc, #96]	; (8002484 <HAL_RCC_DeInit+0x230>)
 8002424:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002428:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 800242a:	4b16      	ldr	r3, [pc, #88]	; (8002484 <HAL_RCC_DeInit+0x230>)
 800242c:	2200      	movs	r2, #0
 800242e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Clear all interrupts flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 8002430:	4b14      	ldr	r3, [pc, #80]	; (8002484 <HAL_RCC_DeInit+0x230>)
 8002432:	f04f 32ff 	mov.w	r2, #4294967295
 8002436:	669a      	str	r2, [r3, #104]	; 0x68

  /* Reset all RSR flags */
  SET_BIT(RCC->RSR, RCC_RSR_RMVF);
 8002438:	4b12      	ldr	r3, [pc, #72]	; (8002484 <HAL_RCC_DeInit+0x230>)
 800243a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800243e:	4a11      	ldr	r2, [pc, #68]	; (8002484 <HAL_RCC_DeInit+0x230>)
 8002440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002444:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLASH_LATENCY_DEFAULT  < __HAL_FLASH_GET_LATENCY())
 8002448:	4b0d      	ldr	r3, [pc, #52]	; (8002480 <HAL_RCC_DeInit+0x22c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0308 	and.w	r3, r3, #8
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00f      	beq.n	8002474 <HAL_RCC_DeInit+0x220>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_DEFAULT);
 8002454:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <HAL_RCC_DeInit+0x22c>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f023 030f 	bic.w	r3, r3, #15
 800245c:	4a08      	ldr	r2, [pc, #32]	; (8002480 <HAL_RCC_DeInit+0x22c>)
 800245e:	f043 0307 	orr.w	r3, r3, #7
 8002462:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLASH_LATENCY_DEFAULT)
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_RCC_DeInit+0x22c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 030f 	and.w	r3, r3, #15
 800246c:	2b07      	cmp	r3, #7
 800246e:	d001      	beq.n	8002474 <HAL_RCC_DeInit+0x220>
    {
      return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <HAL_RCC_DeInit+0x222>
    }

  }

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	52002000 	.word	0x52002000
 8002484:	58024400 	.word	0x58024400
 8002488:	24000000 	.word	0x24000000
 800248c:	03d09000 	.word	0x03d09000
 8002490:	24000004 	.word	0x24000004
 8002494:	2400000c 	.word	0x2400000c
 8002498:	fff6ed45 	.word	0xfff6ed45
 800249c:	02020200 	.word	0x02020200
 80024a0:	01ff0000 	.word	0x01ff0000
 80024a4:	01010280 	.word	0x01010280

080024a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08c      	sub	sp, #48	; 0x30
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d102      	bne.n	80024bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	f000 bc48 	b.w	8002d4c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 8088 	beq.w	80025da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ca:	4b99      	ldr	r3, [pc, #612]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024d4:	4b96      	ldr	r3, [pc, #600]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 80024d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80024da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024dc:	2b10      	cmp	r3, #16
 80024de:	d007      	beq.n	80024f0 <HAL_RCC_OscConfig+0x48>
 80024e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e2:	2b18      	cmp	r3, #24
 80024e4:	d111      	bne.n	800250a <HAL_RCC_OscConfig+0x62>
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d10c      	bne.n	800250a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f0:	4b8f      	ldr	r3, [pc, #572]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d06d      	beq.n	80025d8 <HAL_RCC_OscConfig+0x130>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d169      	bne.n	80025d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	f000 bc21 	b.w	8002d4c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002512:	d106      	bne.n	8002522 <HAL_RCC_OscConfig+0x7a>
 8002514:	4b86      	ldr	r3, [pc, #536]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a85      	ldr	r2, [pc, #532]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 800251a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	e02e      	b.n	8002580 <HAL_RCC_OscConfig+0xd8>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10c      	bne.n	8002544 <HAL_RCC_OscConfig+0x9c>
 800252a:	4b81      	ldr	r3, [pc, #516]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a80      	ldr	r2, [pc, #512]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 8002530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	4b7e      	ldr	r3, [pc, #504]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a7d      	ldr	r2, [pc, #500]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 800253c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	e01d      	b.n	8002580 <HAL_RCC_OscConfig+0xd8>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0xc0>
 800254e:	4b78      	ldr	r3, [pc, #480]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a77      	ldr	r2, [pc, #476]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 8002554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	4b75      	ldr	r3, [pc, #468]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a74      	ldr	r2, [pc, #464]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 8002560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e00b      	b.n	8002580 <HAL_RCC_OscConfig+0xd8>
 8002568:	4b71      	ldr	r3, [pc, #452]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a70      	ldr	r2, [pc, #448]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 800256e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	4b6e      	ldr	r3, [pc, #440]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a6d      	ldr	r2, [pc, #436]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 800257a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800257e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d013      	beq.n	80025b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7ff f988 	bl	800189c <HAL_GetTick>
 800258c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002590:	f7ff f984 	bl	800189c <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	; 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e3d4      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025a2:	4b63      	ldr	r3, [pc, #396]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0xe8>
 80025ae:	e014      	b.n	80025da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7ff f974 	bl	800189c <HAL_GetTick>
 80025b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b8:	f7ff f970 	bl	800189c <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	; 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e3c0      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025ca:	4b59      	ldr	r3, [pc, #356]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x110>
 80025d6:	e000      	b.n	80025da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 80ca 	beq.w	800277c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e8:	4b51      	ldr	r3, [pc, #324]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80025f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025f2:	4b4f      	ldr	r3, [pc, #316]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 80025f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d007      	beq.n	800260e <HAL_RCC_OscConfig+0x166>
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	2b18      	cmp	r3, #24
 8002602:	d156      	bne.n	80026b2 <HAL_RCC_OscConfig+0x20a>
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d151      	bne.n	80026b2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800260e:	4b48      	ldr	r3, [pc, #288]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_RCC_OscConfig+0x17e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e392      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002626:	4b42      	ldr	r3, [pc, #264]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 0219 	bic.w	r2, r3, #25
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	493f      	ldr	r1, [pc, #252]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 8002634:	4313      	orrs	r3, r2
 8002636:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7ff f930 	bl	800189c <HAL_GetTick>
 800263c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002640:	f7ff f92c 	bl	800189c <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e37c      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002652:	4b37      	ldr	r3, [pc, #220]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265e:	f7ff f94d 	bl	80018fc <HAL_GetREVID>
 8002662:	4603      	mov	r3, r0
 8002664:	f241 0203 	movw	r2, #4099	; 0x1003
 8002668:	4293      	cmp	r3, r2
 800266a:	d817      	bhi.n	800269c <HAL_RCC_OscConfig+0x1f4>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	2b40      	cmp	r3, #64	; 0x40
 8002672:	d108      	bne.n	8002686 <HAL_RCC_OscConfig+0x1de>
 8002674:	4b2e      	ldr	r3, [pc, #184]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800267c:	4a2c      	ldr	r2, [pc, #176]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 800267e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002682:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002684:	e07a      	b.n	800277c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002686:	4b2a      	ldr	r3, [pc, #168]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	031b      	lsls	r3, r3, #12
 8002694:	4926      	ldr	r1, [pc, #152]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800269a:	e06f      	b.n	800277c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269c:	4b24      	ldr	r3, [pc, #144]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	061b      	lsls	r3, r3, #24
 80026aa:	4921      	ldr	r1, [pc, #132]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026b0:	e064      	b.n	800277c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d047      	beq.n	800274a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026ba:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 0219 	bic.w	r2, r3, #25
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	491a      	ldr	r1, [pc, #104]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026cc:	f7ff f8e6 	bl	800189c <HAL_GetTick>
 80026d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d4:	f7ff f8e2 	bl	800189c <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e332      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026e6:	4b12      	ldr	r3, [pc, #72]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f2:	f7ff f903 	bl	80018fc <HAL_GetREVID>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f241 0203 	movw	r2, #4099	; 0x1003
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d819      	bhi.n	8002734 <HAL_RCC_OscConfig+0x28c>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	2b40      	cmp	r3, #64	; 0x40
 8002706:	d108      	bne.n	800271a <HAL_RCC_OscConfig+0x272>
 8002708:	4b09      	ldr	r3, [pc, #36]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002710:	4a07      	ldr	r2, [pc, #28]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 8002712:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002716:	6053      	str	r3, [r2, #4]
 8002718:	e030      	b.n	800277c <HAL_RCC_OscConfig+0x2d4>
 800271a:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	031b      	lsls	r3, r3, #12
 8002728:	4901      	ldr	r1, [pc, #4]	; (8002730 <HAL_RCC_OscConfig+0x288>)
 800272a:	4313      	orrs	r3, r2
 800272c:	604b      	str	r3, [r1, #4]
 800272e:	e025      	b.n	800277c <HAL_RCC_OscConfig+0x2d4>
 8002730:	58024400 	.word	0x58024400
 8002734:	4b9a      	ldr	r3, [pc, #616]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	061b      	lsls	r3, r3, #24
 8002742:	4997      	ldr	r1, [pc, #604]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002744:	4313      	orrs	r3, r2
 8002746:	604b      	str	r3, [r1, #4]
 8002748:	e018      	b.n	800277c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800274a:	4b95      	ldr	r3, [pc, #596]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a94      	ldr	r2, [pc, #592]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002756:	f7ff f8a1 	bl	800189c <HAL_GetTick>
 800275a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800275e:	f7ff f89d 	bl	800189c <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e2ed      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002770:	4b8b      	ldr	r3, [pc, #556]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f0      	bne.n	800275e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 80a9 	beq.w	80028dc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800278a:	4b85      	ldr	r3, [pc, #532]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002792:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002794:	4b82      	ldr	r3, [pc, #520]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	2b08      	cmp	r3, #8
 800279e:	d007      	beq.n	80027b0 <HAL_RCC_OscConfig+0x308>
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	2b18      	cmp	r3, #24
 80027a4:	d13a      	bne.n	800281c <HAL_RCC_OscConfig+0x374>
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d135      	bne.n	800281c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027b0:	4b7b      	ldr	r3, [pc, #492]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <HAL_RCC_OscConfig+0x320>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	2b80      	cmp	r3, #128	; 0x80
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e2c1      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027c8:	f7ff f898 	bl	80018fc <HAL_GetREVID>
 80027cc:	4603      	mov	r3, r0
 80027ce:	f241 0203 	movw	r2, #4099	; 0x1003
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d817      	bhi.n	8002806 <HAL_RCC_OscConfig+0x35e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	2b20      	cmp	r3, #32
 80027dc:	d108      	bne.n	80027f0 <HAL_RCC_OscConfig+0x348>
 80027de:	4b70      	ldr	r3, [pc, #448]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80027e6:	4a6e      	ldr	r2, [pc, #440]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 80027e8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80027ec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027ee:	e075      	b.n	80028dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027f0:	4b6b      	ldr	r3, [pc, #428]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	069b      	lsls	r3, r3, #26
 80027fe:	4968      	ldr	r1, [pc, #416]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002804:	e06a      	b.n	80028dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002806:	4b66      	ldr	r3, [pc, #408]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	061b      	lsls	r3, r3, #24
 8002814:	4962      	ldr	r1, [pc, #392]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002816:	4313      	orrs	r3, r2
 8002818:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800281a:	e05f      	b.n	80028dc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d042      	beq.n	80028aa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002824:	4b5e      	ldr	r3, [pc, #376]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a5d      	ldr	r2, [pc, #372]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 800282a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800282e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002830:	f7ff f834 	bl	800189c <HAL_GetTick>
 8002834:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002838:	f7ff f830 	bl	800189c <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e280      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800284a:	4b55      	ldr	r3, [pc, #340]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0f0      	beq.n	8002838 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002856:	f7ff f851 	bl	80018fc <HAL_GetREVID>
 800285a:	4603      	mov	r3, r0
 800285c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002860:	4293      	cmp	r3, r2
 8002862:	d817      	bhi.n	8002894 <HAL_RCC_OscConfig+0x3ec>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	2b20      	cmp	r3, #32
 800286a:	d108      	bne.n	800287e <HAL_RCC_OscConfig+0x3d6>
 800286c:	4b4c      	ldr	r3, [pc, #304]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002874:	4a4a      	ldr	r2, [pc, #296]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002876:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800287a:	6053      	str	r3, [r2, #4]
 800287c:	e02e      	b.n	80028dc <HAL_RCC_OscConfig+0x434>
 800287e:	4b48      	ldr	r3, [pc, #288]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	069b      	lsls	r3, r3, #26
 800288c:	4944      	ldr	r1, [pc, #272]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 800288e:	4313      	orrs	r3, r2
 8002890:	604b      	str	r3, [r1, #4]
 8002892:	e023      	b.n	80028dc <HAL_RCC_OscConfig+0x434>
 8002894:	4b42      	ldr	r3, [pc, #264]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	061b      	lsls	r3, r3, #24
 80028a2:	493f      	ldr	r1, [pc, #252]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60cb      	str	r3, [r1, #12]
 80028a8:	e018      	b.n	80028dc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80028aa:	4b3d      	ldr	r3, [pc, #244]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a3c      	ldr	r2, [pc, #240]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 80028b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b6:	f7fe fff1 	bl	800189c <HAL_GetTick>
 80028ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80028be:	f7fe ffed 	bl	800189c <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e23d      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028d0:	4b33      	ldr	r3, [pc, #204]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1f0      	bne.n	80028be <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d036      	beq.n	8002956 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d019      	beq.n	8002924 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f0:	4b2b      	ldr	r3, [pc, #172]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 80028f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028f4:	4a2a      	ldr	r2, [pc, #168]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fc:	f7fe ffce 	bl	800189c <HAL_GetTick>
 8002900:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002904:	f7fe ffca 	bl	800189c <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e21a      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002916:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0x45c>
 8002922:	e018      	b.n	8002956 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002924:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002928:	4a1d      	ldr	r2, [pc, #116]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 800292a:	f023 0301 	bic.w	r3, r3, #1
 800292e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002930:	f7fe ffb4 	bl	800189c <HAL_GetTick>
 8002934:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002938:	f7fe ffb0 	bl	800189c <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e200      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800294a:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 800294c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0320 	and.w	r3, r3, #32
 800295e:	2b00      	cmp	r3, #0
 8002960:	d039      	beq.n	80029d6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d01c      	beq.n	80029a4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800296a:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a0c      	ldr	r2, [pc, #48]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002970:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002974:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002976:	f7fe ff91 	bl	800189c <HAL_GetTick>
 800297a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800297e:	f7fe ff8d 	bl	800189c <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e1dd      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002990:	4b03      	ldr	r3, [pc, #12]	; (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x4d6>
 800299c:	e01b      	b.n	80029d6 <HAL_RCC_OscConfig+0x52e>
 800299e:	bf00      	nop
 80029a0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029a4:	4b9b      	ldr	r3, [pc, #620]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a9a      	ldr	r2, [pc, #616]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 80029aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029b0:	f7fe ff74 	bl	800189c <HAL_GetTick>
 80029b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029b8:	f7fe ff70 	bl	800189c <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e1c0      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029ca:	4b92      	ldr	r3, [pc, #584]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 8081 	beq.w	8002ae6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029e4:	4b8c      	ldr	r3, [pc, #560]	; (8002c18 <HAL_RCC_OscConfig+0x770>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a8b      	ldr	r2, [pc, #556]	; (8002c18 <HAL_RCC_OscConfig+0x770>)
 80029ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029f0:	f7fe ff54 	bl	800189c <HAL_GetTick>
 80029f4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f8:	f7fe ff50 	bl	800189c <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b64      	cmp	r3, #100	; 0x64
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e1a0      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a0a:	4b83      	ldr	r3, [pc, #524]	; (8002c18 <HAL_RCC_OscConfig+0x770>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d106      	bne.n	8002a2c <HAL_RCC_OscConfig+0x584>
 8002a1e:	4b7d      	ldr	r3, [pc, #500]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a22:	4a7c      	ldr	r2, [pc, #496]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	6713      	str	r3, [r2, #112]	; 0x70
 8002a2a:	e02d      	b.n	8002a88 <HAL_RCC_OscConfig+0x5e0>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10c      	bne.n	8002a4e <HAL_RCC_OscConfig+0x5a6>
 8002a34:	4b77      	ldr	r3, [pc, #476]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a38:	4a76      	ldr	r2, [pc, #472]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002a3a:	f023 0301 	bic.w	r3, r3, #1
 8002a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a40:	4b74      	ldr	r3, [pc, #464]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	4a73      	ldr	r2, [pc, #460]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002a46:	f023 0304 	bic.w	r3, r3, #4
 8002a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4c:	e01c      	b.n	8002a88 <HAL_RCC_OscConfig+0x5e0>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2b05      	cmp	r3, #5
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x5c8>
 8002a56:	4b6f      	ldr	r3, [pc, #444]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5a:	4a6e      	ldr	r2, [pc, #440]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002a5c:	f043 0304 	orr.w	r3, r3, #4
 8002a60:	6713      	str	r3, [r2, #112]	; 0x70
 8002a62:	4b6c      	ldr	r3, [pc, #432]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a66:	4a6b      	ldr	r2, [pc, #428]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a6e:	e00b      	b.n	8002a88 <HAL_RCC_OscConfig+0x5e0>
 8002a70:	4b68      	ldr	r3, [pc, #416]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a74:	4a67      	ldr	r2, [pc, #412]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002a76:	f023 0301 	bic.w	r3, r3, #1
 8002a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7c:	4b65      	ldr	r3, [pc, #404]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a80:	4a64      	ldr	r2, [pc, #400]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002a82:	f023 0304 	bic.w	r3, r3, #4
 8002a86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d015      	beq.n	8002abc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a90:	f7fe ff04 	bl	800189c <HAL_GetTick>
 8002a94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a96:	e00a      	b.n	8002aae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a98:	f7fe ff00 	bl	800189c <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e14e      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aae:	4b59      	ldr	r3, [pc, #356]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0ee      	beq.n	8002a98 <HAL_RCC_OscConfig+0x5f0>
 8002aba:	e014      	b.n	8002ae6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abc:	f7fe feee 	bl	800189c <HAL_GetTick>
 8002ac0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ac2:	e00a      	b.n	8002ada <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac4:	f7fe feea 	bl	800189c <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e138      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ada:	4b4e      	ldr	r3, [pc, #312]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1ee      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 812d 	beq.w	8002d4a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002af0:	4b48      	ldr	r3, [pc, #288]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002af8:	2b18      	cmp	r3, #24
 8002afa:	f000 80bd 	beq.w	8002c78 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	f040 809e 	bne.w	8002c44 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b08:	4b42      	ldr	r3, [pc, #264]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a41      	ldr	r2, [pc, #260]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002b0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b14:	f7fe fec2 	bl	800189c <HAL_GetTick>
 8002b18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1c:	f7fe febe 	bl	800189c <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e10e      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b2e:	4b39      	ldr	r3, [pc, #228]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b3a:	4b36      	ldr	r3, [pc, #216]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002b3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b3e:	4b37      	ldr	r3, [pc, #220]	; (8002c1c <HAL_RCC_OscConfig+0x774>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002b4a:	0112      	lsls	r2, r2, #4
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	4931      	ldr	r1, [pc, #196]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	628b      	str	r3, [r1, #40]	; 0x28
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b62:	3b01      	subs	r3, #1
 8002b64:	025b      	lsls	r3, r3, #9
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	041b      	lsls	r3, r3, #16
 8002b72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	061b      	lsls	r3, r3, #24
 8002b80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002b84:	4923      	ldr	r1, [pc, #140]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002b8a:	4b22      	ldr	r3, [pc, #136]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8e:	4a21      	ldr	r2, [pc, #132]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002b90:	f023 0301 	bic.w	r3, r3, #1
 8002b94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b96:	4b1f      	ldr	r3, [pc, #124]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b9a:	4b21      	ldr	r3, [pc, #132]	; (8002c20 <HAL_RCC_OscConfig+0x778>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ba2:	00d2      	lsls	r2, r2, #3
 8002ba4:	491b      	ldr	r1, [pc, #108]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002baa:	4b1a      	ldr	r3, [pc, #104]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bae:	f023 020c 	bic.w	r2, r3, #12
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	4917      	ldr	r1, [pc, #92]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002bbc:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	f023 0202 	bic.w	r2, r3, #2
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc8:	4912      	ldr	r1, [pc, #72]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002bce:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd2:	4a10      	ldr	r2, [pc, #64]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bda:	4b0e      	ldr	r3, [pc, #56]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	4a0d      	ldr	r2, [pc, #52]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002be4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002be6:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bea:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bf0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002bf2:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf6:	4a07      	ldr	r2, [pc, #28]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bfe:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a04      	ldr	r2, [pc, #16]	; (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002c04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0a:	f7fe fe47 	bl	800189c <HAL_GetTick>
 8002c0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c10:	e011      	b.n	8002c36 <HAL_RCC_OscConfig+0x78e>
 8002c12:	bf00      	nop
 8002c14:	58024400 	.word	0x58024400
 8002c18:	58024800 	.word	0x58024800
 8002c1c:	fffffc0c 	.word	0xfffffc0c
 8002c20:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c24:	f7fe fe3a 	bl	800189c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e08a      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c36:	4b47      	ldr	r3, [pc, #284]	; (8002d54 <HAL_RCC_OscConfig+0x8ac>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0x77c>
 8002c42:	e082      	b.n	8002d4a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c44:	4b43      	ldr	r3, [pc, #268]	; (8002d54 <HAL_RCC_OscConfig+0x8ac>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a42      	ldr	r2, [pc, #264]	; (8002d54 <HAL_RCC_OscConfig+0x8ac>)
 8002c4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7fe fe24 	bl	800189c <HAL_GetTick>
 8002c54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c58:	f7fe fe20 	bl	800189c <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e070      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c6a:	4b3a      	ldr	r3, [pc, #232]	; (8002d54 <HAL_RCC_OscConfig+0x8ac>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x7b0>
 8002c76:	e068      	b.n	8002d4a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c78:	4b36      	ldr	r3, [pc, #216]	; (8002d54 <HAL_RCC_OscConfig+0x8ac>)
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c7e:	4b35      	ldr	r3, [pc, #212]	; (8002d54 <HAL_RCC_OscConfig+0x8ac>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d031      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f003 0203 	and.w	r2, r3, #3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d12a      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d122      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d11a      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	0a5b      	lsrs	r3, r3, #9
 8002cbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d111      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	0c1b      	lsrs	r3, r3, #16
 8002cd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d108      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	0e1b      	lsrs	r3, r3, #24
 8002ce2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e02b      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002cf4:	4b17      	ldr	r3, [pc, #92]	; (8002d54 <HAL_RCC_OscConfig+0x8ac>)
 8002cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf8:	08db      	lsrs	r3, r3, #3
 8002cfa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002cfe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d01f      	beq.n	8002d4a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002d0a:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <HAL_RCC_OscConfig+0x8ac>)
 8002d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0e:	4a11      	ldr	r2, [pc, #68]	; (8002d54 <HAL_RCC_OscConfig+0x8ac>)
 8002d10:	f023 0301 	bic.w	r3, r3, #1
 8002d14:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d16:	f7fe fdc1 	bl	800189c <HAL_GetTick>
 8002d1a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002d1c:	bf00      	nop
 8002d1e:	f7fe fdbd 	bl	800189c <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d0f9      	beq.n	8002d1e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <HAL_RCC_OscConfig+0x8ac>)
 8002d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	; (8002d58 <HAL_RCC_OscConfig+0x8b0>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d36:	00d2      	lsls	r2, r2, #3
 8002d38:	4906      	ldr	r1, [pc, #24]	; (8002d54 <HAL_RCC_OscConfig+0x8ac>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002d3e:	4b05      	ldr	r3, [pc, #20]	; (8002d54 <HAL_RCC_OscConfig+0x8ac>)
 8002d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d42:	4a04      	ldr	r2, [pc, #16]	; (8002d54 <HAL_RCC_OscConfig+0x8ac>)
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3730      	adds	r7, #48	; 0x30
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	58024400 	.word	0x58024400
 8002d58:	ffff0007 	.word	0xffff0007

08002d5c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e19c      	b.n	80030aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d70:	4b8a      	ldr	r3, [pc, #552]	; (8002f9c <HAL_RCC_ClockConfig+0x240>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 030f 	and.w	r3, r3, #15
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d910      	bls.n	8002da0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7e:	4b87      	ldr	r3, [pc, #540]	; (8002f9c <HAL_RCC_ClockConfig+0x240>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 020f 	bic.w	r2, r3, #15
 8002d86:	4985      	ldr	r1, [pc, #532]	; (8002f9c <HAL_RCC_ClockConfig+0x240>)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b83      	ldr	r3, [pc, #524]	; (8002f9c <HAL_RCC_ClockConfig+0x240>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e184      	b.n	80030aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d010      	beq.n	8002dce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	4b7b      	ldr	r3, [pc, #492]	; (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d908      	bls.n	8002dce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002dbc:	4b78      	ldr	r3, [pc, #480]	; (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	4975      	ldr	r1, [pc, #468]	; (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d010      	beq.n	8002dfc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695a      	ldr	r2, [r3, #20]
 8002dde:	4b70      	ldr	r3, [pc, #448]	; (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d908      	bls.n	8002dfc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002dea:	4b6d      	ldr	r3, [pc, #436]	; (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	496a      	ldr	r1, [pc, #424]	; (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0310 	and.w	r3, r3, #16
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d010      	beq.n	8002e2a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699a      	ldr	r2, [r3, #24]
 8002e0c:	4b64      	ldr	r3, [pc, #400]	; (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d908      	bls.n	8002e2a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e18:	4b61      	ldr	r3, [pc, #388]	; (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	495e      	ldr	r1, [pc, #376]	; (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d010      	beq.n	8002e58 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69da      	ldr	r2, [r3, #28]
 8002e3a:	4b59      	ldr	r3, [pc, #356]	; (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d908      	bls.n	8002e58 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e46:	4b56      	ldr	r3, [pc, #344]	; (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	4953      	ldr	r1, [pc, #332]	; (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d010      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	4b4d      	ldr	r3, [pc, #308]	; (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d908      	bls.n	8002e86 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e74:	4b4a      	ldr	r3, [pc, #296]	; (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	f023 020f 	bic.w	r2, r3, #15
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	4947      	ldr	r1, [pc, #284]	; (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d055      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e92:	4b43      	ldr	r3, [pc, #268]	; (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	4940      	ldr	r1, [pc, #256]	; (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d107      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002eac:	4b3c      	ldr	r3, [pc, #240]	; (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d121      	bne.n	8002efc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0f6      	b.n	80030aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d107      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ec4:	4b36      	ldr	r3, [pc, #216]	; (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d115      	bne.n	8002efc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0ea      	b.n	80030aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d107      	bne.n	8002eec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002edc:	4b30      	ldr	r3, [pc, #192]	; (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d109      	bne.n	8002efc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0de      	b.n	80030aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eec:	4b2c      	ldr	r3, [pc, #176]	; (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0d6      	b.n	80030aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002efc:	4b28      	ldr	r3, [pc, #160]	; (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	f023 0207 	bic.w	r2, r3, #7
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	4925      	ldr	r1, [pc, #148]	; (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f0e:	f7fe fcc5 	bl	800189c <HAL_GetTick>
 8002f12:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f14:	e00a      	b.n	8002f2c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f16:	f7fe fcc1 	bl	800189c <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e0be      	b.n	80030aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2c:	4b1c      	ldr	r3, [pc, #112]	; (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d1eb      	bne.n	8002f16 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d010      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	4b14      	ldr	r3, [pc, #80]	; (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d208      	bcs.n	8002f6c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f5a:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f023 020f 	bic.w	r2, r3, #15
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	490e      	ldr	r1, [pc, #56]	; (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <HAL_RCC_ClockConfig+0x240>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d214      	bcs.n	8002fa4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7a:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <HAL_RCC_ClockConfig+0x240>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 020f 	bic.w	r2, r3, #15
 8002f82:	4906      	ldr	r1, [pc, #24]	; (8002f9c <HAL_RCC_ClockConfig+0x240>)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8a:	4b04      	ldr	r3, [pc, #16]	; (8002f9c <HAL_RCC_ClockConfig+0x240>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d005      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e086      	b.n	80030aa <HAL_RCC_ClockConfig+0x34e>
 8002f9c:	52002000 	.word	0x52002000
 8002fa0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d010      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	4b3f      	ldr	r3, [pc, #252]	; (80030b4 <HAL_RCC_ClockConfig+0x358>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d208      	bcs.n	8002fd2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fc0:	4b3c      	ldr	r3, [pc, #240]	; (80030b4 <HAL_RCC_ClockConfig+0x358>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	4939      	ldr	r1, [pc, #228]	; (80030b4 <HAL_RCC_ClockConfig+0x358>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d010      	beq.n	8003000 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	4b34      	ldr	r3, [pc, #208]	; (80030b4 <HAL_RCC_ClockConfig+0x358>)
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d208      	bcs.n	8003000 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fee:	4b31      	ldr	r3, [pc, #196]	; (80030b4 <HAL_RCC_ClockConfig+0x358>)
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	492e      	ldr	r1, [pc, #184]	; (80030b4 <HAL_RCC_ClockConfig+0x358>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	2b00      	cmp	r3, #0
 800300a:	d010      	beq.n	800302e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	699a      	ldr	r2, [r3, #24]
 8003010:	4b28      	ldr	r3, [pc, #160]	; (80030b4 <HAL_RCC_ClockConfig+0x358>)
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003018:	429a      	cmp	r2, r3
 800301a:	d208      	bcs.n	800302e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800301c:	4b25      	ldr	r3, [pc, #148]	; (80030b4 <HAL_RCC_ClockConfig+0x358>)
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	4922      	ldr	r1, [pc, #136]	; (80030b4 <HAL_RCC_ClockConfig+0x358>)
 800302a:	4313      	orrs	r3, r2
 800302c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	2b00      	cmp	r3, #0
 8003038:	d010      	beq.n	800305c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69da      	ldr	r2, [r3, #28]
 800303e:	4b1d      	ldr	r3, [pc, #116]	; (80030b4 <HAL_RCC_ClockConfig+0x358>)
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003046:	429a      	cmp	r2, r3
 8003048:	d208      	bcs.n	800305c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800304a:	4b1a      	ldr	r3, [pc, #104]	; (80030b4 <HAL_RCC_ClockConfig+0x358>)
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	4917      	ldr	r1, [pc, #92]	; (80030b4 <HAL_RCC_ClockConfig+0x358>)
 8003058:	4313      	orrs	r3, r2
 800305a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800305c:	f000 f89e 	bl	800319c <HAL_RCC_GetSysClockFreq>
 8003060:	4602      	mov	r2, r0
 8003062:	4b14      	ldr	r3, [pc, #80]	; (80030b4 <HAL_RCC_ClockConfig+0x358>)
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	0a1b      	lsrs	r3, r3, #8
 8003068:	f003 030f 	and.w	r3, r3, #15
 800306c:	4912      	ldr	r1, [pc, #72]	; (80030b8 <HAL_RCC_ClockConfig+0x35c>)
 800306e:	5ccb      	ldrb	r3, [r1, r3]
 8003070:	f003 031f 	and.w	r3, r3, #31
 8003074:	fa22 f303 	lsr.w	r3, r2, r3
 8003078:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800307a:	4b0e      	ldr	r3, [pc, #56]	; (80030b4 <HAL_RCC_ClockConfig+0x358>)
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	4a0d      	ldr	r2, [pc, #52]	; (80030b8 <HAL_RCC_ClockConfig+0x35c>)
 8003084:	5cd3      	ldrb	r3, [r2, r3]
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
 8003090:	4a0a      	ldr	r2, [pc, #40]	; (80030bc <HAL_RCC_ClockConfig+0x360>)
 8003092:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003094:	4a0a      	ldr	r2, [pc, #40]	; (80030c0 <HAL_RCC_ClockConfig+0x364>)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800309a:	4b0a      	ldr	r3, [pc, #40]	; (80030c4 <HAL_RCC_ClockConfig+0x368>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fe fa1e 	bl	80014e0 <HAL_InitTick>
 80030a4:	4603      	mov	r3, r0
 80030a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	58024400 	.word	0x58024400
 80030b8:	08012b94 	.word	0x08012b94
 80030bc:	24000004 	.word	0x24000004
 80030c0:	24000000 	.word	0x24000000
 80030c4:	2400000c 	.word	0x2400000c

080030c8 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08c      	sub	sp, #48	; 0x30
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d12a      	bne.n	8003130 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80030da:	4b2d      	ldr	r3, [pc, #180]	; (8003190 <HAL_RCC_MCOConfig+0xc8>)
 80030dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030e0:	4a2b      	ldr	r2, [pc, #172]	; (8003190 <HAL_RCC_MCOConfig+0xc8>)
 80030e2:	f043 0301 	orr.w	r3, r3, #1
 80030e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030ea:	4b29      	ldr	r3, [pc, #164]	; (8003190 <HAL_RCC_MCOConfig+0xc8>)
 80030ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	61bb      	str	r3, [r7, #24]
 80030f6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80030f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fe:	2302      	movs	r3, #2
 8003100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003102:	2303      	movs	r3, #3
 8003104:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003106:	2300      	movs	r3, #0
 8003108:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800310a:	2300      	movs	r3, #0
 800310c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800310e:	f107 031c 	add.w	r3, r7, #28
 8003112:	4619      	mov	r1, r3
 8003114:	481f      	ldr	r0, [pc, #124]	; (8003194 <HAL_RCC_MCOConfig+0xcc>)
 8003116:	f7fe fd0f 	bl	8001b38 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800311a:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <HAL_RCC_MCOConfig+0xc8>)
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8003122:	68b9      	ldr	r1, [r7, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	430b      	orrs	r3, r1
 8003128:	4919      	ldr	r1, [pc, #100]	; (8003190 <HAL_RCC_MCOConfig+0xc8>)
 800312a:	4313      	orrs	r3, r2
 800312c:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800312e:	e02a      	b.n	8003186 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8003130:	4b17      	ldr	r3, [pc, #92]	; (8003190 <HAL_RCC_MCOConfig+0xc8>)
 8003132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003136:	4a16      	ldr	r2, [pc, #88]	; (8003190 <HAL_RCC_MCOConfig+0xc8>)
 8003138:	f043 0304 	orr.w	r3, r3, #4
 800313c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003140:	4b13      	ldr	r3, [pc, #76]	; (8003190 <HAL_RCC_MCOConfig+0xc8>)
 8003142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800314e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003154:	2302      	movs	r3, #2
 8003156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003158:	2303      	movs	r3, #3
 800315a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315c:	2300      	movs	r3, #0
 800315e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003160:	2300      	movs	r3, #0
 8003162:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003164:	f107 031c 	add.w	r3, r7, #28
 8003168:	4619      	mov	r1, r3
 800316a:	480b      	ldr	r0, [pc, #44]	; (8003198 <HAL_RCC_MCOConfig+0xd0>)
 800316c:	f7fe fce4 	bl	8001b38 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8003170:	4b07      	ldr	r3, [pc, #28]	; (8003190 <HAL_RCC_MCOConfig+0xc8>)
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	01d9      	lsls	r1, r3, #7
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	430b      	orrs	r3, r1
 8003180:	4903      	ldr	r1, [pc, #12]	; (8003190 <HAL_RCC_MCOConfig+0xc8>)
 8003182:	4313      	orrs	r3, r2
 8003184:	610b      	str	r3, [r1, #16]
}
 8003186:	bf00      	nop
 8003188:	3730      	adds	r7, #48	; 0x30
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	58024400 	.word	0x58024400
 8003194:	58020000 	.word	0x58020000
 8003198:	58020800 	.word	0x58020800

0800319c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800319c:	b480      	push	{r7}
 800319e:	b089      	sub	sp, #36	; 0x24
 80031a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031a2:	4bb3      	ldr	r3, [pc, #716]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031aa:	2b18      	cmp	r3, #24
 80031ac:	f200 8155 	bhi.w	800345a <HAL_RCC_GetSysClockFreq+0x2be>
 80031b0:	a201      	add	r2, pc, #4	; (adr r2, 80031b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80031b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b6:	bf00      	nop
 80031b8:	0800321d 	.word	0x0800321d
 80031bc:	0800345b 	.word	0x0800345b
 80031c0:	0800345b 	.word	0x0800345b
 80031c4:	0800345b 	.word	0x0800345b
 80031c8:	0800345b 	.word	0x0800345b
 80031cc:	0800345b 	.word	0x0800345b
 80031d0:	0800345b 	.word	0x0800345b
 80031d4:	0800345b 	.word	0x0800345b
 80031d8:	08003243 	.word	0x08003243
 80031dc:	0800345b 	.word	0x0800345b
 80031e0:	0800345b 	.word	0x0800345b
 80031e4:	0800345b 	.word	0x0800345b
 80031e8:	0800345b 	.word	0x0800345b
 80031ec:	0800345b 	.word	0x0800345b
 80031f0:	0800345b 	.word	0x0800345b
 80031f4:	0800345b 	.word	0x0800345b
 80031f8:	08003249 	.word	0x08003249
 80031fc:	0800345b 	.word	0x0800345b
 8003200:	0800345b 	.word	0x0800345b
 8003204:	0800345b 	.word	0x0800345b
 8003208:	0800345b 	.word	0x0800345b
 800320c:	0800345b 	.word	0x0800345b
 8003210:	0800345b 	.word	0x0800345b
 8003214:	0800345b 	.word	0x0800345b
 8003218:	0800324f 	.word	0x0800324f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800321c:	4b94      	ldr	r3, [pc, #592]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0320 	and.w	r3, r3, #32
 8003224:	2b00      	cmp	r3, #0
 8003226:	d009      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003228:	4b91      	ldr	r3, [pc, #580]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	08db      	lsrs	r3, r3, #3
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	4a90      	ldr	r2, [pc, #576]	; (8003474 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003234:	fa22 f303 	lsr.w	r3, r2, r3
 8003238:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800323a:	e111      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800323c:	4b8d      	ldr	r3, [pc, #564]	; (8003474 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800323e:	61bb      	str	r3, [r7, #24]
      break;
 8003240:	e10e      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003242:	4b8d      	ldr	r3, [pc, #564]	; (8003478 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003244:	61bb      	str	r3, [r7, #24]
      break;
 8003246:	e10b      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003248:	4b8c      	ldr	r3, [pc, #560]	; (800347c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800324a:	61bb      	str	r3, [r7, #24]
      break;
 800324c:	e108      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800324e:	4b88      	ldr	r3, [pc, #544]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003258:	4b85      	ldr	r3, [pc, #532]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800325a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325c:	091b      	lsrs	r3, r3, #4
 800325e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003262:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003264:	4b82      	ldr	r3, [pc, #520]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003268:	f003 0301 	and.w	r3, r3, #1
 800326c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800326e:	4b80      	ldr	r3, [pc, #512]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003272:	08db      	lsrs	r3, r3, #3
 8003274:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003278:	68fa      	ldr	r2, [r7, #12]
 800327a:	fb02 f303 	mul.w	r3, r2, r3
 800327e:	ee07 3a90 	vmov	s15, r3
 8003282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003286:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 80e1 	beq.w	8003454 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	2b02      	cmp	r3, #2
 8003296:	f000 8083 	beq.w	80033a0 <HAL_RCC_GetSysClockFreq+0x204>
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2b02      	cmp	r3, #2
 800329e:	f200 80a1 	bhi.w	80033e4 <HAL_RCC_GetSysClockFreq+0x248>
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <HAL_RCC_GetSysClockFreq+0x114>
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d056      	beq.n	800335c <HAL_RCC_GetSysClockFreq+0x1c0>
 80032ae:	e099      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032b0:	4b6f      	ldr	r3, [pc, #444]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0320 	and.w	r3, r3, #32
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d02d      	beq.n	8003318 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032bc:	4b6c      	ldr	r3, [pc, #432]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	08db      	lsrs	r3, r3, #3
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	4a6b      	ldr	r2, [pc, #428]	; (8003474 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
 80032cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	ee07 3a90 	vmov	s15, r3
 80032d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	ee07 3a90 	vmov	s15, r3
 80032de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032e6:	4b62      	ldr	r3, [pc, #392]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80032fa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003480 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800330a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800330e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003312:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003316:	e087      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003322:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003484 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800332a:	4b51      	ldr	r3, [pc, #324]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800333a:	ed97 6a02 	vldr	s12, [r7, #8]
 800333e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003480 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800334a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800334e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003356:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800335a:	e065      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003366:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003488 <HAL_RCC_GetSysClockFreq+0x2ec>
 800336a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800336e:	4b40      	ldr	r3, [pc, #256]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003376:	ee07 3a90 	vmov	s15, r3
 800337a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800337e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003382:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003480 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800338a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800338e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800339a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800339e:	e043      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033aa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800348c <HAL_RCC_GetSysClockFreq+0x2f0>
 80033ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033b2:	4b2f      	ldr	r3, [pc, #188]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ba:	ee07 3a90 	vmov	s15, r3
 80033be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80033c6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003480 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033e2:	e021      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003488 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033f6:	4b1e      	ldr	r3, [pc, #120]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033fe:	ee07 3a90 	vmov	s15, r3
 8003402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003406:	ed97 6a02 	vldr	s12, [r7, #8]
 800340a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003480 <HAL_RCC_GetSysClockFreq+0x2e4>
 800340e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003416:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800341a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800341e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003422:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003426:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003428:	4b11      	ldr	r3, [pc, #68]	; (8003470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	0a5b      	lsrs	r3, r3, #9
 800342e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003432:	3301      	adds	r3, #1
 8003434:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	ee07 3a90 	vmov	s15, r3
 800343c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003440:	edd7 6a07 	vldr	s13, [r7, #28]
 8003444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800344c:	ee17 3a90 	vmov	r3, s15
 8003450:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003452:	e005      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	61bb      	str	r3, [r7, #24]
      break;
 8003458:	e002      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800345a:	4b07      	ldr	r3, [pc, #28]	; (8003478 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800345c:	61bb      	str	r3, [r7, #24]
      break;
 800345e:	bf00      	nop
  }

  return sysclockfreq;
 8003460:	69bb      	ldr	r3, [r7, #24]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3724      	adds	r7, #36	; 0x24
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	58024400 	.word	0x58024400
 8003474:	03d09000 	.word	0x03d09000
 8003478:	003d0900 	.word	0x003d0900
 800347c:	017d7840 	.word	0x017d7840
 8003480:	46000000 	.word	0x46000000
 8003484:	4c742400 	.word	0x4c742400
 8003488:	4a742400 	.word	0x4a742400
 800348c:	4bbebc20 	.word	0x4bbebc20

08003490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003496:	f7ff fe81 	bl	800319c <HAL_RCC_GetSysClockFreq>
 800349a:	4602      	mov	r2, r0
 800349c:	4b10      	ldr	r3, [pc, #64]	; (80034e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	0a1b      	lsrs	r3, r3, #8
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	490f      	ldr	r1, [pc, #60]	; (80034e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80034a8:	5ccb      	ldrb	r3, [r1, r3]
 80034aa:	f003 031f 	and.w	r3, r3, #31
 80034ae:	fa22 f303 	lsr.w	r3, r2, r3
 80034b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034b4:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	f003 030f 	and.w	r3, r3, #15
 80034bc:	4a09      	ldr	r2, [pc, #36]	; (80034e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80034be:	5cd3      	ldrb	r3, [r2, r3]
 80034c0:	f003 031f 	and.w	r3, r3, #31
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	fa22 f303 	lsr.w	r3, r2, r3
 80034ca:	4a07      	ldr	r2, [pc, #28]	; (80034e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80034cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034ce:	4a07      	ldr	r2, [pc, #28]	; (80034ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80034d4:	4b04      	ldr	r3, [pc, #16]	; (80034e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80034d6:	681b      	ldr	r3, [r3, #0]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	58024400 	.word	0x58024400
 80034e4:	08012b94 	.word	0x08012b94
 80034e8:	24000004 	.word	0x24000004
 80034ec:	24000000 	.word	0x24000000

080034f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80034f4:	f7ff ffcc 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80034f8:	4602      	mov	r2, r0
 80034fa:	4b06      	ldr	r3, [pc, #24]	; (8003514 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	091b      	lsrs	r3, r3, #4
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	4904      	ldr	r1, [pc, #16]	; (8003518 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003506:	5ccb      	ldrb	r3, [r1, r3]
 8003508:	f003 031f 	and.w	r3, r3, #31
 800350c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003510:	4618      	mov	r0, r3
 8003512:	bd80      	pop	{r7, pc}
 8003514:	58024400 	.word	0x58024400
 8003518:	08012b94 	.word	0x08012b94

0800351c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003520:	f7ff ffb6 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 8003524:	4602      	mov	r2, r0
 8003526:	4b06      	ldr	r3, [pc, #24]	; (8003540 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	0a1b      	lsrs	r3, r3, #8
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	4904      	ldr	r1, [pc, #16]	; (8003544 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003532:	5ccb      	ldrb	r3, [r1, r3]
 8003534:	f003 031f 	and.w	r3, r3, #31
 8003538:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800353c:	4618      	mov	r0, r3
 800353e:	bd80      	pop	{r7, pc}
 8003540:	58024400 	.word	0x58024400
 8003544:	08012b94 	.word	0x08012b94

08003548 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	223f      	movs	r2, #63	; 0x3f
 8003556:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003558:	4b1a      	ldr	r3, [pc, #104]	; (80035c4 <HAL_RCC_GetClockConfig+0x7c>)
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	f003 0207 	and.w	r2, r3, #7
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8003564:	4b17      	ldr	r3, [pc, #92]	; (80035c4 <HAL_RCC_GetClockConfig+0x7c>)
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8003570:	4b14      	ldr	r3, [pc, #80]	; (80035c4 <HAL_RCC_GetClockConfig+0x7c>)
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	f003 020f 	and.w	r2, r3, #15
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800357c:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <HAL_RCC_GetClockConfig+0x7c>)
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8003588:	4b0e      	ldr	r3, [pc, #56]	; (80035c4 <HAL_RCC_GetClockConfig+0x7c>)
 800358a:	69db      	ldr	r3, [r3, #28]
 800358c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8003594:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <HAL_RCC_GetClockConfig+0x7c>)
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80035a0:	4b08      	ldr	r3, [pc, #32]	; (80035c4 <HAL_RCC_GetClockConfig+0x7c>)
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035ac:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <HAL_RCC_GetClockConfig+0x80>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 020f 	and.w	r2, r3, #15
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	601a      	str	r2, [r3, #0]
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	58024400 	.word	0x58024400
 80035c8:	52002000 	.word	0x52002000

080035cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035d0:	b0cc      	sub	sp, #304	; 0x130
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035d8:	2300      	movs	r3, #0
 80035da:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035de:	2300      	movs	r3, #0
 80035e0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ec:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80035f0:	2500      	movs	r5, #0
 80035f2:	ea54 0305 	orrs.w	r3, r4, r5
 80035f6:	d049      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80035f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003602:	d02f      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003604:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003608:	d828      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800360a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800360e:	d01a      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003610:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003614:	d822      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800361a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800361e:	d007      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003620:	e01c      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003622:	4bb8      	ldr	r3, [pc, #736]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003626:	4ab7      	ldr	r2, [pc, #732]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800362c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800362e:	e01a      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003630:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003634:	3308      	adds	r3, #8
 8003636:	2102      	movs	r1, #2
 8003638:	4618      	mov	r0, r3
 800363a:	f002 fba1 	bl	8005d80 <RCCEx_PLL2_Config>
 800363e:	4603      	mov	r3, r0
 8003640:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003644:	e00f      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003646:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800364a:	3328      	adds	r3, #40	; 0x28
 800364c:	2102      	movs	r1, #2
 800364e:	4618      	mov	r0, r3
 8003650:	f002 fc48 	bl	8005ee4 <RCCEx_PLL3_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800365a:	e004      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003662:	e000      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003666:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10a      	bne.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800366e:	4ba5      	ldr	r3, [pc, #660]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003672:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003676:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800367a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800367c:	4aa1      	ldr	r2, [pc, #644]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800367e:	430b      	orrs	r3, r1
 8003680:	6513      	str	r3, [r2, #80]	; 0x50
 8003682:	e003      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003684:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003688:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800368c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003694:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003698:	f04f 0900 	mov.w	r9, #0
 800369c:	ea58 0309 	orrs.w	r3, r8, r9
 80036a0:	d047      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80036a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d82a      	bhi.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80036ac:	a201      	add	r2, pc, #4	; (adr r2, 80036b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80036ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b2:	bf00      	nop
 80036b4:	080036c9 	.word	0x080036c9
 80036b8:	080036d7 	.word	0x080036d7
 80036bc:	080036ed 	.word	0x080036ed
 80036c0:	0800370b 	.word	0x0800370b
 80036c4:	0800370b 	.word	0x0800370b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c8:	4b8e      	ldr	r3, [pc, #568]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	4a8d      	ldr	r2, [pc, #564]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036d4:	e01a      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036da:	3308      	adds	r3, #8
 80036dc:	2100      	movs	r1, #0
 80036de:	4618      	mov	r0, r3
 80036e0:	f002 fb4e 	bl	8005d80 <RCCEx_PLL2_Config>
 80036e4:	4603      	mov	r3, r0
 80036e6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036ea:	e00f      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036f0:	3328      	adds	r3, #40	; 0x28
 80036f2:	2100      	movs	r1, #0
 80036f4:	4618      	mov	r0, r3
 80036f6:	f002 fbf5 	bl	8005ee4 <RCCEx_PLL3_Config>
 80036fa:	4603      	mov	r3, r0
 80036fc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003700:	e004      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003708:	e000      	b.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800370a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800370c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10a      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003714:	4b7b      	ldr	r3, [pc, #492]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003718:	f023 0107 	bic.w	r1, r3, #7
 800371c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003722:	4a78      	ldr	r2, [pc, #480]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003724:	430b      	orrs	r3, r1
 8003726:	6513      	str	r3, [r2, #80]	; 0x50
 8003728:	e003      	b.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800372e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003732:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800373e:	f04f 0b00 	mov.w	fp, #0
 8003742:	ea5a 030b 	orrs.w	r3, sl, fp
 8003746:	d04c      	beq.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003748:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800374c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800374e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003752:	d030      	beq.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003754:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003758:	d829      	bhi.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800375a:	2bc0      	cmp	r3, #192	; 0xc0
 800375c:	d02d      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800375e:	2bc0      	cmp	r3, #192	; 0xc0
 8003760:	d825      	bhi.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003762:	2b80      	cmp	r3, #128	; 0x80
 8003764:	d018      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003766:	2b80      	cmp	r3, #128	; 0x80
 8003768:	d821      	bhi.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800376a:	2b00      	cmp	r3, #0
 800376c:	d002      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800376e:	2b40      	cmp	r3, #64	; 0x40
 8003770:	d007      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003772:	e01c      	b.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003774:	4b63      	ldr	r3, [pc, #396]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003778:	4a62      	ldr	r2, [pc, #392]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800377a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800377e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003780:	e01c      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003782:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003786:	3308      	adds	r3, #8
 8003788:	2100      	movs	r1, #0
 800378a:	4618      	mov	r0, r3
 800378c:	f002 faf8 	bl	8005d80 <RCCEx_PLL2_Config>
 8003790:	4603      	mov	r3, r0
 8003792:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003796:	e011      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003798:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800379c:	3328      	adds	r3, #40	; 0x28
 800379e:	2100      	movs	r1, #0
 80037a0:	4618      	mov	r0, r3
 80037a2:	f002 fb9f 	bl	8005ee4 <RCCEx_PLL3_Config>
 80037a6:	4603      	mov	r3, r0
 80037a8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80037ac:	e006      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80037b4:	e002      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80037b6:	bf00      	nop
 80037b8:	e000      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80037ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037bc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d10a      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80037c4:	4b4f      	ldr	r3, [pc, #316]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80037cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d2:	4a4c      	ldr	r2, [pc, #304]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037d4:	430b      	orrs	r3, r1
 80037d6:	6513      	str	r3, [r2, #80]	; 0x50
 80037d8:	e003      	b.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037da:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80037de:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80037e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ea:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80037ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80037f2:	2300      	movs	r3, #0
 80037f4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80037f8:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80037fc:	460b      	mov	r3, r1
 80037fe:	4313      	orrs	r3, r2
 8003800:	d053      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003802:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003806:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800380a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800380e:	d035      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003810:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003814:	d82e      	bhi.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003816:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800381a:	d031      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800381c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003820:	d828      	bhi.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003822:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003826:	d01a      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003828:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800382c:	d822      	bhi.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800382e:	2b00      	cmp	r3, #0
 8003830:	d003      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003832:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003836:	d007      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003838:	e01c      	b.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800383a:	4b32      	ldr	r3, [pc, #200]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	4a31      	ldr	r2, [pc, #196]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003844:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003846:	e01c      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003848:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800384c:	3308      	adds	r3, #8
 800384e:	2100      	movs	r1, #0
 8003850:	4618      	mov	r0, r3
 8003852:	f002 fa95 	bl	8005d80 <RCCEx_PLL2_Config>
 8003856:	4603      	mov	r3, r0
 8003858:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800385c:	e011      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800385e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003862:	3328      	adds	r3, #40	; 0x28
 8003864:	2100      	movs	r1, #0
 8003866:	4618      	mov	r0, r3
 8003868:	f002 fb3c 	bl	8005ee4 <RCCEx_PLL3_Config>
 800386c:	4603      	mov	r3, r0
 800386e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003872:	e006      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800387a:	e002      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800387c:	bf00      	nop
 800387e:	e000      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003882:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10b      	bne.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800388a:	4b1e      	ldr	r3, [pc, #120]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800388c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003892:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003896:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800389a:	4a1a      	ldr	r2, [pc, #104]	; (8003904 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800389c:	430b      	orrs	r3, r1
 800389e:	6593      	str	r3, [r2, #88]	; 0x58
 80038a0:	e003      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80038a6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80038aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80038b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80038ba:	2300      	movs	r3, #0
 80038bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80038c0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80038c4:	460b      	mov	r3, r1
 80038c6:	4313      	orrs	r3, r2
 80038c8:	d056      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80038ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80038ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038d6:	d038      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80038d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038dc:	d831      	bhi.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038e2:	d034      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80038e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038e8:	d82b      	bhi.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038ee:	d01d      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x360>
 80038f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038f4:	d825      	bhi.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d006      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80038fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038fe:	d00a      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003900:	e01f      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003902:	bf00      	nop
 8003904:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003908:	4ba2      	ldr	r3, [pc, #648]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800390a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390c:	4aa1      	ldr	r2, [pc, #644]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800390e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003912:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003914:	e01c      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003916:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800391a:	3308      	adds	r3, #8
 800391c:	2100      	movs	r1, #0
 800391e:	4618      	mov	r0, r3
 8003920:	f002 fa2e 	bl	8005d80 <RCCEx_PLL2_Config>
 8003924:	4603      	mov	r3, r0
 8003926:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800392a:	e011      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800392c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003930:	3328      	adds	r3, #40	; 0x28
 8003932:	2100      	movs	r1, #0
 8003934:	4618      	mov	r0, r3
 8003936:	f002 fad5 	bl	8005ee4 <RCCEx_PLL3_Config>
 800393a:	4603      	mov	r3, r0
 800393c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003940:	e006      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003948:	e002      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800394a:	bf00      	nop
 800394c:	e000      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800394e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003950:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10b      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003958:	4b8e      	ldr	r3, [pc, #568]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800395a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003960:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003964:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003968:	4a8a      	ldr	r2, [pc, #552]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800396a:	430b      	orrs	r3, r1
 800396c:	6593      	str	r3, [r2, #88]	; 0x58
 800396e:	e003      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003970:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003974:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003978:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800397c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003980:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003984:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003988:	2300      	movs	r3, #0
 800398a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800398e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003992:	460b      	mov	r3, r1
 8003994:	4313      	orrs	r3, r2
 8003996:	d03a      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003998:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800399c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399e:	2b30      	cmp	r3, #48	; 0x30
 80039a0:	d01f      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80039a2:	2b30      	cmp	r3, #48	; 0x30
 80039a4:	d819      	bhi.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	d00c      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80039aa:	2b20      	cmp	r3, #32
 80039ac:	d815      	bhi.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d019      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80039b2:	2b10      	cmp	r3, #16
 80039b4:	d111      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b6:	4b77      	ldr	r3, [pc, #476]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ba:	4a76      	ldr	r2, [pc, #472]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80039c2:	e011      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80039c8:	3308      	adds	r3, #8
 80039ca:	2102      	movs	r1, #2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f002 f9d7 	bl	8005d80 <RCCEx_PLL2_Config>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80039d8:	e006      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80039e0:	e002      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80039e2:	bf00      	nop
 80039e4:	e000      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80039e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10a      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80039f0:	4b68      	ldr	r3, [pc, #416]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80039f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80039fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fe:	4a65      	ldr	r2, [pc, #404]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a00:	430b      	orrs	r3, r1
 8003a02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a04:	e003      	b.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a06:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003a0a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003a0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a16:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003a1a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003a1e:	2300      	movs	r3, #0
 8003a20:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003a24:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	d051      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003a2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a38:	d035      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003a3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a3e:	d82e      	bhi.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a44:	d031      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003a46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a4a:	d828      	bhi.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a50:	d01a      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a56:	d822      	bhi.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d003      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a60:	d007      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003a62:	e01c      	b.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a64:	4b4b      	ldr	r3, [pc, #300]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a68:	4a4a      	ldr	r2, [pc, #296]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a70:	e01c      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a72:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a76:	3308      	adds	r3, #8
 8003a78:	2100      	movs	r1, #0
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f002 f980 	bl	8005d80 <RCCEx_PLL2_Config>
 8003a80:	4603      	mov	r3, r0
 8003a82:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a86:	e011      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a8c:	3328      	adds	r3, #40	; 0x28
 8003a8e:	2100      	movs	r1, #0
 8003a90:	4618      	mov	r0, r3
 8003a92:	f002 fa27 	bl	8005ee4 <RCCEx_PLL3_Config>
 8003a96:	4603      	mov	r3, r0
 8003a98:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a9c:	e006      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003aa4:	e002      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003aa6:	bf00      	nop
 8003aa8:	e000      	b.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003aaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aac:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10a      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003ab4:	4b37      	ldr	r3, [pc, #220]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ab8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003abc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ac0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ac2:	4a34      	ldr	r2, [pc, #208]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ac4:	430b      	orrs	r3, r1
 8003ac6:	6513      	str	r3, [r2, #80]	; 0x50
 8003ac8:	e003      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ace:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003ad2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ada:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003ade:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003ae8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003aec:	460b      	mov	r3, r1
 8003aee:	4313      	orrs	r3, r2
 8003af0:	d056      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003af2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003af6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003afc:	d033      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003afe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b02:	d82c      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b08:	d02f      	beq.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003b0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b0e:	d826      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b10:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b14:	d02b      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003b16:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b1a:	d820      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b20:	d012      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003b22:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b26:	d81a      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d022      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003b2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b30:	d115      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b36:	3308      	adds	r3, #8
 8003b38:	2101      	movs	r1, #1
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f002 f920 	bl	8005d80 <RCCEx_PLL2_Config>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b46:	e015      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b48:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b4c:	3328      	adds	r3, #40	; 0x28
 8003b4e:	2101      	movs	r1, #1
 8003b50:	4618      	mov	r0, r3
 8003b52:	f002 f9c7 	bl	8005ee4 <RCCEx_PLL3_Config>
 8003b56:	4603      	mov	r3, r0
 8003b58:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b5c:	e00a      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003b64:	e006      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b66:	bf00      	nop
 8003b68:	e004      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b6a:	bf00      	nop
 8003b6c:	e002      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b6e:	bf00      	nop
 8003b70:	e000      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b74:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10d      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b7c:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b80:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003b84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003b88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b8a:	4a02      	ldr	r2, [pc, #8]	; (8003b94 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	6513      	str	r3, [r2, #80]	; 0x50
 8003b90:	e006      	b.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003b92:	bf00      	nop
 8003b94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b98:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003b9c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ba0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ba8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003bac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003bb6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	d055      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003bc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003bc4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003bc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bcc:	d033      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003bce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bd2:	d82c      	bhi.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd8:	d02f      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bde:	d826      	bhi.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003be0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003be4:	d02b      	beq.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003be6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bea:	d820      	bhi.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bf0:	d012      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003bf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bf6:	d81a      	bhi.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d022      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003bfc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c00:	d115      	bne.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c06:	3308      	adds	r3, #8
 8003c08:	2101      	movs	r1, #1
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f002 f8b8 	bl	8005d80 <RCCEx_PLL2_Config>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c16:	e015      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c18:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c1c:	3328      	adds	r3, #40	; 0x28
 8003c1e:	2101      	movs	r1, #1
 8003c20:	4618      	mov	r0, r3
 8003c22:	f002 f95f 	bl	8005ee4 <RCCEx_PLL3_Config>
 8003c26:	4603      	mov	r3, r0
 8003c28:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c2c:	e00a      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003c34:	e006      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c36:	bf00      	nop
 8003c38:	e004      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c3a:	bf00      	nop
 8003c3c:	e002      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c3e:	bf00      	nop
 8003c40:	e000      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c44:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d10b      	bne.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c4c:	4bb6      	ldr	r3, [pc, #728]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c50:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003c54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c5c:	4ab2      	ldr	r2, [pc, #712]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c5e:	430b      	orrs	r3, r1
 8003c60:	6593      	str	r3, [r2, #88]	; 0x58
 8003c62:	e003      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c64:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003c68:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8003c6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c74:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8003c78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003c82:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	d02a      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8003c8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d011      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c9a:	d10a      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ca0:	3308      	adds	r3, #8
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f002 f86b 	bl	8005d80 <RCCEx_PLL2_Config>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8003cb0:	e004      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003cb8:	e000      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8003cba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cbc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10a      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003cc4:	4b98      	ldr	r3, [pc, #608]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc8:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8003ccc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd2:	4a95      	ldr	r2, [pc, #596]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003cd4:	430b      	orrs	r3, r1
 8003cd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cd8:	e003      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cda:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003cde:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ce2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cea:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003cee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003cf8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	d037      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003d02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d0c:	d00e      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x760>
 8003d0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d12:	d816      	bhi.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d018      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8003d18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d1c:	d111      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d1e:	4b82      	ldr	r3, [pc, #520]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d22:	4a81      	ldr	r2, [pc, #516]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d2a:	e00f      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d30:	3308      	adds	r3, #8
 8003d32:	2101      	movs	r1, #1
 8003d34:	4618      	mov	r0, r3
 8003d36:	f002 f823 	bl	8005d80 <RCCEx_PLL2_Config>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d40:	e004      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003d48:	e000      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8003d4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d4c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10a      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d54:	4b74      	ldr	r3, [pc, #464]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d58:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003d5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d62:	4a71      	ldr	r2, [pc, #452]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003d64:	430b      	orrs	r3, r1
 8003d66:	6513      	str	r3, [r2, #80]	; 0x50
 8003d68:	e003      	b.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003d6e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d72:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7a:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003d7e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d82:	2300      	movs	r3, #0
 8003d84:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003d88:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	d03a      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003d92:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d98:	2b03      	cmp	r3, #3
 8003d9a:	d81d      	bhi.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8003d9c:	a201      	add	r2, pc, #4	; (adr r2, 8003da4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da2:	bf00      	nop
 8003da4:	08003de1 	.word	0x08003de1
 8003da8:	08003db5 	.word	0x08003db5
 8003dac:	08003dc3 	.word	0x08003dc3
 8003db0:	08003de1 	.word	0x08003de1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003db4:	4b5c      	ldr	r3, [pc, #368]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db8:	4a5b      	ldr	r2, [pc, #364]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003dba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003dc0:	e00f      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003dc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003dc6:	3308      	adds	r3, #8
 8003dc8:	2102      	movs	r1, #2
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f001 ffd8 	bl	8005d80 <RCCEx_PLL2_Config>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003dd6:	e004      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003dde:	e000      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8003de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10a      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003dea:	4b4f      	ldr	r3, [pc, #316]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dee:	f023 0103 	bic.w	r1, r3, #3
 8003df2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df8:	4a4b      	ldr	r2, [pc, #300]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dfe:	e003      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e00:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003e04:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e10:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003e14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003e1e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003e22:	460b      	mov	r3, r1
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f000 80a0 	beq.w	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e2a:	4b40      	ldr	r3, [pc, #256]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a3f      	ldr	r2, [pc, #252]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e36:	f7fd fd31 	bl	800189c <HAL_GetTick>
 8003e3a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e3e:	e00b      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e40:	f7fd fd2c 	bl	800189c <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b64      	cmp	r3, #100	; 0x64
 8003e4e:	d903      	bls.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003e56:	e005      	b.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e58:	4b34      	ldr	r3, [pc, #208]	; (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0ed      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8003e64:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d17a      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e6c:	4b2e      	ldr	r3, [pc, #184]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003e6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003e74:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003e78:	4053      	eors	r3, r2
 8003e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d015      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e82:	4b29      	ldr	r3, [pc, #164]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e8a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e8e:	4b26      	ldr	r3, [pc, #152]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e92:	4a25      	ldr	r2, [pc, #148]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e98:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e9a:	4b23      	ldr	r3, [pc, #140]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9e:	4a22      	ldr	r2, [pc, #136]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003ea0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ea4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ea6:	4a20      	ldr	r2, [pc, #128]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003ea8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003eac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003eae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003eb2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eba:	d118      	bne.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebc:	f7fd fcee 	bl	800189c <HAL_GetTick>
 8003ec0:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ec4:	e00d      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ec6:	f7fd fce9 	bl	800189c <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003ed0:	1ad2      	subs	r2, r2, r3
 8003ed2:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d903      	bls.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8003ee0:	e005      	b.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ee2:	4b11      	ldr	r3, [pc, #68]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d0eb      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8003eee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d130      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ef6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003efa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f06:	d115      	bne.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8003f08:	4b07      	ldr	r3, [pc, #28]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003f10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f14:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003f18:	091a      	lsrs	r2, r3, #4
 8003f1a:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	4a02      	ldr	r2, [pc, #8]	; (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003f20:	430b      	orrs	r3, r1
 8003f22:	6113      	str	r3, [r2, #16]
 8003f24:	e00c      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8003f26:	bf00      	nop
 8003f28:	58024400 	.word	0x58024400
 8003f2c:	58024800 	.word	0x58024800
 8003f30:	00ffffcf 	.word	0x00ffffcf
 8003f34:	4bd4      	ldr	r3, [pc, #848]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	4ad3      	ldr	r2, [pc, #844]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003f3a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f3e:	6113      	str	r3, [r2, #16]
 8003f40:	4bd1      	ldr	r3, [pc, #836]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003f42:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003f44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f48:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f50:	4acd      	ldr	r2, [pc, #820]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003f52:	430b      	orrs	r3, r1
 8003f54:	6713      	str	r3, [r2, #112]	; 0x70
 8003f56:	e008      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f58:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003f5c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8003f60:	e003      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f62:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003f66:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f72:	f002 0301 	and.w	r3, r2, #1
 8003f76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f000 808b 	beq.w	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003f8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003f90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f94:	2b28      	cmp	r3, #40	; 0x28
 8003f96:	d86b      	bhi.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003f98:	a201      	add	r2, pc, #4	; (adr r2, 8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8003f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f9e:	bf00      	nop
 8003fa0:	08004079 	.word	0x08004079
 8003fa4:	08004071 	.word	0x08004071
 8003fa8:	08004071 	.word	0x08004071
 8003fac:	08004071 	.word	0x08004071
 8003fb0:	08004071 	.word	0x08004071
 8003fb4:	08004071 	.word	0x08004071
 8003fb8:	08004071 	.word	0x08004071
 8003fbc:	08004071 	.word	0x08004071
 8003fc0:	08004045 	.word	0x08004045
 8003fc4:	08004071 	.word	0x08004071
 8003fc8:	08004071 	.word	0x08004071
 8003fcc:	08004071 	.word	0x08004071
 8003fd0:	08004071 	.word	0x08004071
 8003fd4:	08004071 	.word	0x08004071
 8003fd8:	08004071 	.word	0x08004071
 8003fdc:	08004071 	.word	0x08004071
 8003fe0:	0800405b 	.word	0x0800405b
 8003fe4:	08004071 	.word	0x08004071
 8003fe8:	08004071 	.word	0x08004071
 8003fec:	08004071 	.word	0x08004071
 8003ff0:	08004071 	.word	0x08004071
 8003ff4:	08004071 	.word	0x08004071
 8003ff8:	08004071 	.word	0x08004071
 8003ffc:	08004071 	.word	0x08004071
 8004000:	08004079 	.word	0x08004079
 8004004:	08004071 	.word	0x08004071
 8004008:	08004071 	.word	0x08004071
 800400c:	08004071 	.word	0x08004071
 8004010:	08004071 	.word	0x08004071
 8004014:	08004071 	.word	0x08004071
 8004018:	08004071 	.word	0x08004071
 800401c:	08004071 	.word	0x08004071
 8004020:	08004079 	.word	0x08004079
 8004024:	08004071 	.word	0x08004071
 8004028:	08004071 	.word	0x08004071
 800402c:	08004071 	.word	0x08004071
 8004030:	08004071 	.word	0x08004071
 8004034:	08004071 	.word	0x08004071
 8004038:	08004071 	.word	0x08004071
 800403c:	08004071 	.word	0x08004071
 8004040:	08004079 	.word	0x08004079
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004044:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004048:	3308      	adds	r3, #8
 800404a:	2101      	movs	r1, #1
 800404c:	4618      	mov	r0, r3
 800404e:	f001 fe97 	bl	8005d80 <RCCEx_PLL2_Config>
 8004052:	4603      	mov	r3, r0
 8004054:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004058:	e00f      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800405a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800405e:	3328      	adds	r3, #40	; 0x28
 8004060:	2101      	movs	r1, #1
 8004062:	4618      	mov	r0, r3
 8004064:	f001 ff3e 	bl	8005ee4 <RCCEx_PLL3_Config>
 8004068:	4603      	mov	r3, r0
 800406a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800406e:	e004      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004076:	e000      	b.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8004078:	bf00      	nop
    }

    if (ret == HAL_OK)
 800407a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10b      	bne.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004082:	4b81      	ldr	r3, [pc, #516]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004086:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800408a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800408e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004092:	4a7d      	ldr	r2, [pc, #500]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004094:	430b      	orrs	r3, r1
 8004096:	6553      	str	r3, [r2, #84]	; 0x54
 8004098:	e003      	b.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800409e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80040a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040aa:	f002 0302 	and.w	r3, r2, #2
 80040ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040b2:	2300      	movs	r3, #0
 80040b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80040b8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80040bc:	460b      	mov	r3, r1
 80040be:	4313      	orrs	r3, r2
 80040c0:	d042      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80040c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040c8:	2b05      	cmp	r3, #5
 80040ca:	d825      	bhi.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 80040cc:	a201      	add	r2, pc, #4	; (adr r2, 80040d4 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 80040ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d2:	bf00      	nop
 80040d4:	08004121 	.word	0x08004121
 80040d8:	080040ed 	.word	0x080040ed
 80040dc:	08004103 	.word	0x08004103
 80040e0:	08004121 	.word	0x08004121
 80040e4:	08004121 	.word	0x08004121
 80040e8:	08004121 	.word	0x08004121
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80040f0:	3308      	adds	r3, #8
 80040f2:	2101      	movs	r1, #1
 80040f4:	4618      	mov	r0, r3
 80040f6:	f001 fe43 	bl	8005d80 <RCCEx_PLL2_Config>
 80040fa:	4603      	mov	r3, r0
 80040fc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004100:	e00f      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004102:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004106:	3328      	adds	r3, #40	; 0x28
 8004108:	2101      	movs	r1, #1
 800410a:	4618      	mov	r0, r3
 800410c:	f001 feea 	bl	8005ee4 <RCCEx_PLL3_Config>
 8004110:	4603      	mov	r3, r0
 8004112:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004116:	e004      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800411e:	e000      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8004120:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004122:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10a      	bne.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800412a:	4b57      	ldr	r3, [pc, #348]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800412c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412e:	f023 0107 	bic.w	r1, r3, #7
 8004132:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004136:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004138:	4a53      	ldr	r2, [pc, #332]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800413a:	430b      	orrs	r3, r1
 800413c:	6553      	str	r3, [r2, #84]	; 0x54
 800413e:	e003      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004140:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004144:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004148:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800414c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004150:	f002 0304 	and.w	r3, r2, #4
 8004154:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004158:	2300      	movs	r3, #0
 800415a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800415e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004162:	460b      	mov	r3, r1
 8004164:	4313      	orrs	r3, r2
 8004166:	d044      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004168:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800416c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004170:	2b05      	cmp	r3, #5
 8004172:	d825      	bhi.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8004174:	a201      	add	r2, pc, #4	; (adr r2, 800417c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8004176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417a:	bf00      	nop
 800417c:	080041c9 	.word	0x080041c9
 8004180:	08004195 	.word	0x08004195
 8004184:	080041ab 	.word	0x080041ab
 8004188:	080041c9 	.word	0x080041c9
 800418c:	080041c9 	.word	0x080041c9
 8004190:	080041c9 	.word	0x080041c9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004194:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004198:	3308      	adds	r3, #8
 800419a:	2101      	movs	r1, #1
 800419c:	4618      	mov	r0, r3
 800419e:	f001 fdef 	bl	8005d80 <RCCEx_PLL2_Config>
 80041a2:	4603      	mov	r3, r0
 80041a4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80041a8:	e00f      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80041ae:	3328      	adds	r3, #40	; 0x28
 80041b0:	2101      	movs	r1, #1
 80041b2:	4618      	mov	r0, r3
 80041b4:	f001 fe96 	bl	8005ee4 <RCCEx_PLL3_Config>
 80041b8:	4603      	mov	r3, r0
 80041ba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80041be:	e004      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80041c6:	e000      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 80041c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10b      	bne.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041d2:	4b2d      	ldr	r3, [pc, #180]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80041d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d6:	f023 0107 	bic.w	r1, r3, #7
 80041da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80041de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041e2:	4a29      	ldr	r2, [pc, #164]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80041e4:	430b      	orrs	r3, r1
 80041e6:	6593      	str	r3, [r2, #88]	; 0x58
 80041e8:	e003      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80041ee:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80041f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fa:	f002 0320 	and.w	r3, r2, #32
 80041fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004202:	2300      	movs	r3, #0
 8004204:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004208:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800420c:	460b      	mov	r3, r1
 800420e:	4313      	orrs	r3, r2
 8004210:	d057      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004212:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800421a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800421e:	d035      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8004220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004224:	d82c      	bhi.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422a:	d031      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 800422c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004230:	d826      	bhi.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004232:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004236:	d02d      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8004238:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800423c:	d820      	bhi.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800423e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004242:	d012      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8004244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004248:	d81a      	bhi.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800424a:	2b00      	cmp	r3, #0
 800424c:	d024      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 800424e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004252:	d115      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004254:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004258:	3308      	adds	r3, #8
 800425a:	2100      	movs	r1, #0
 800425c:	4618      	mov	r0, r3
 800425e:	f001 fd8f 	bl	8005d80 <RCCEx_PLL2_Config>
 8004262:	4603      	mov	r3, r0
 8004264:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004268:	e017      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800426a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800426e:	3328      	adds	r3, #40	; 0x28
 8004270:	2102      	movs	r1, #2
 8004272:	4618      	mov	r0, r3
 8004274:	f001 fe36 	bl	8005ee4 <RCCEx_PLL3_Config>
 8004278:	4603      	mov	r3, r0
 800427a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800427e:	e00c      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004286:	e008      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8004288:	58024400 	.word	0x58024400
        break;
 800428c:	bf00      	nop
 800428e:	e004      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004290:	bf00      	nop
 8004292:	e002      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004294:	bf00      	nop
 8004296:	e000      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004298:	bf00      	nop
    }

    if (ret == HAL_OK)
 800429a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10b      	bne.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042a2:	4bc2      	ldr	r3, [pc, #776]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80042aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042b2:	4abe      	ldr	r2, [pc, #760]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80042b4:	430b      	orrs	r3, r1
 80042b6:	6553      	str	r3, [r2, #84]	; 0x54
 80042b8:	e003      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ba:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80042be:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80042c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ca:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80042ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80042d2:	2300      	movs	r3, #0
 80042d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80042d8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80042dc:	460b      	mov	r3, r1
 80042de:	4313      	orrs	r3, r2
 80042e0:	d055      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80042e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80042ea:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80042ee:	d033      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 80042f0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80042f4:	d82c      	bhi.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80042f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fa:	d02f      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xd90>
 80042fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004300:	d826      	bhi.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004302:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004306:	d02b      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8004308:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800430c:	d820      	bhi.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800430e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004312:	d012      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8004314:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004318:	d81a      	bhi.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d022      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 800431e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004322:	d115      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004324:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004328:	3308      	adds	r3, #8
 800432a:	2100      	movs	r1, #0
 800432c:	4618      	mov	r0, r3
 800432e:	f001 fd27 	bl	8005d80 <RCCEx_PLL2_Config>
 8004332:	4603      	mov	r3, r0
 8004334:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004338:	e015      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800433a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800433e:	3328      	adds	r3, #40	; 0x28
 8004340:	2102      	movs	r1, #2
 8004342:	4618      	mov	r0, r3
 8004344:	f001 fdce 	bl	8005ee4 <RCCEx_PLL3_Config>
 8004348:	4603      	mov	r3, r0
 800434a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800434e:	e00a      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004356:	e006      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004358:	bf00      	nop
 800435a:	e004      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800435c:	bf00      	nop
 800435e:	e002      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004360:	bf00      	nop
 8004362:	e000      	b.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004364:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004366:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800436a:	2b00      	cmp	r3, #0
 800436c:	d10b      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800436e:	4b8f      	ldr	r3, [pc, #572]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004372:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004376:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800437a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800437e:	4a8b      	ldr	r2, [pc, #556]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004380:	430b      	orrs	r3, r1
 8004382:	6593      	str	r3, [r2, #88]	; 0x58
 8004384:	e003      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004386:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800438a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800438e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004396:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800439a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800439e:	2300      	movs	r3, #0
 80043a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043a4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80043a8:	460b      	mov	r3, r1
 80043aa:	4313      	orrs	r3, r2
 80043ac:	d055      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80043ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80043b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043b6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80043ba:	d033      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80043bc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80043c0:	d82c      	bhi.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80043c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043c6:	d02f      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80043c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043cc:	d826      	bhi.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80043ce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80043d2:	d02b      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80043d4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80043d8:	d820      	bhi.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80043da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043de:	d012      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 80043e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043e4:	d81a      	bhi.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d022      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 80043ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043ee:	d115      	bne.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80043f4:	3308      	adds	r3, #8
 80043f6:	2100      	movs	r1, #0
 80043f8:	4618      	mov	r0, r3
 80043fa:	f001 fcc1 	bl	8005d80 <RCCEx_PLL2_Config>
 80043fe:	4603      	mov	r3, r0
 8004400:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004404:	e015      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004406:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800440a:	3328      	adds	r3, #40	; 0x28
 800440c:	2102      	movs	r1, #2
 800440e:	4618      	mov	r0, r3
 8004410:	f001 fd68 	bl	8005ee4 <RCCEx_PLL3_Config>
 8004414:	4603      	mov	r3, r0
 8004416:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800441a:	e00a      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004422:	e006      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004424:	bf00      	nop
 8004426:	e004      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004428:	bf00      	nop
 800442a:	e002      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800442c:	bf00      	nop
 800442e:	e000      	b.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004430:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004432:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10b      	bne.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800443a:	4b5c      	ldr	r3, [pc, #368]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800443c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443e:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004442:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004446:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800444a:	4a58      	ldr	r2, [pc, #352]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800444c:	430b      	orrs	r3, r1
 800444e:	6593      	str	r3, [r2, #88]	; 0x58
 8004450:	e003      	b.n	800445a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004452:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004456:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800445a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800445e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004462:	f002 0308 	and.w	r3, r2, #8
 8004466:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800446a:	2300      	movs	r3, #0
 800446c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004470:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004474:	460b      	mov	r3, r1
 8004476:	4313      	orrs	r3, r2
 8004478:	d01e      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800447a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004482:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004486:	d10c      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004488:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800448c:	3328      	adds	r3, #40	; 0x28
 800448e:	2102      	movs	r1, #2
 8004490:	4618      	mov	r0, r3
 8004492:	f001 fd27 	bl	8005ee4 <RCCEx_PLL3_Config>
 8004496:	4603      	mov	r3, r0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80044a2:	4b42      	ldr	r3, [pc, #264]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80044a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b2:	4a3e      	ldr	r2, [pc, #248]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80044b4:	430b      	orrs	r3, r1
 80044b6:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80044bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c0:	f002 0310 	and.w	r3, r2, #16
 80044c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044c8:	2300      	movs	r3, #0
 80044ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80044ce:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80044d2:	460b      	mov	r3, r1
 80044d4:	4313      	orrs	r3, r2
 80044d6:	d01e      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80044d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80044dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044e4:	d10c      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80044e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80044ea:	3328      	adds	r3, #40	; 0x28
 80044ec:	2102      	movs	r1, #2
 80044ee:	4618      	mov	r0, r3
 80044f0:	f001 fcf8 	bl	8005ee4 <RCCEx_PLL3_Config>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004500:	4b2a      	ldr	r3, [pc, #168]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004504:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004508:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800450c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004510:	4a26      	ldr	r2, [pc, #152]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004512:	430b      	orrs	r3, r1
 8004514:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004516:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451e:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004522:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004526:	2300      	movs	r3, #0
 8004528:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800452c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004530:	460b      	mov	r3, r1
 8004532:	4313      	orrs	r3, r2
 8004534:	d040      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004536:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800453a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800453e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004542:	d022      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8004544:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004548:	d81b      	bhi.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800454e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004552:	d00b      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8004554:	e015      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004556:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800455a:	3308      	adds	r3, #8
 800455c:	2100      	movs	r1, #0
 800455e:	4618      	mov	r0, r3
 8004560:	f001 fc0e 	bl	8005d80 <RCCEx_PLL2_Config>
 8004564:	4603      	mov	r3, r0
 8004566:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800456a:	e00f      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800456c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004570:	3328      	adds	r3, #40	; 0x28
 8004572:	2102      	movs	r1, #2
 8004574:	4618      	mov	r0, r3
 8004576:	f001 fcb5 	bl	8005ee4 <RCCEx_PLL3_Config>
 800457a:	4603      	mov	r3, r0
 800457c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004580:	e004      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004588:	e000      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 800458a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800458c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10d      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004594:	4b05      	ldr	r3, [pc, #20]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004598:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800459c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80045a4:	4a01      	ldr	r2, [pc, #4]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80045a6:	430b      	orrs	r3, r1
 80045a8:	6593      	str	r3, [r2, #88]	; 0x58
 80045aa:	e005      	b.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80045ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80045b4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c0:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80045c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80045c6:	2300      	movs	r3, #0
 80045c8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80045ca:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80045ce:	460b      	mov	r3, r1
 80045d0:	4313      	orrs	r3, r2
 80045d2:	d03b      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80045d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045e0:	d01f      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 80045e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80045e6:	d818      	bhi.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 80045e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ec:	d003      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 80045ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045f2:	d007      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 80045f4:	e011      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045f6:	4b64      	ldr	r3, [pc, #400]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80045f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fa:	4a63      	ldr	r2, [pc, #396]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80045fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004600:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004602:	e00f      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004604:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004608:	3328      	adds	r3, #40	; 0x28
 800460a:	2101      	movs	r1, #1
 800460c:	4618      	mov	r0, r3
 800460e:	f001 fc69 	bl	8005ee4 <RCCEx_PLL3_Config>
 8004612:	4603      	mov	r3, r0
 8004614:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004618:	e004      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004620:	e000      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8004622:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004624:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004628:	2b00      	cmp	r3, #0
 800462a:	d10b      	bne.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800462c:	4b56      	ldr	r3, [pc, #344]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800462e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004630:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004634:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800463c:	4a52      	ldr	r2, [pc, #328]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800463e:	430b      	orrs	r3, r1
 8004640:	6553      	str	r3, [r2, #84]	; 0x54
 8004642:	e003      	b.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004644:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004648:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800464c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004654:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004658:	673b      	str	r3, [r7, #112]	; 0x70
 800465a:	2300      	movs	r3, #0
 800465c:	677b      	str	r3, [r7, #116]	; 0x74
 800465e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004662:	460b      	mov	r3, r1
 8004664:	4313      	orrs	r3, r2
 8004666:	d031      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004668:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800466c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8004672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004676:	d007      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8004678:	e011      	b.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800467a:	4b43      	ldr	r3, [pc, #268]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	4a42      	ldr	r2, [pc, #264]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004684:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004686:	e00e      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004688:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800468c:	3308      	adds	r3, #8
 800468e:	2102      	movs	r1, #2
 8004690:	4618      	mov	r0, r3
 8004692:	f001 fb75 	bl	8005d80 <RCCEx_PLL2_Config>
 8004696:	4603      	mov	r3, r0
 8004698:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800469c:	e003      	b.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80046a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046a6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10a      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80046ae:	4b36      	ldr	r3, [pc, #216]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80046b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80046b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046bc:	4a32      	ldr	r2, [pc, #200]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80046be:	430b      	orrs	r3, r1
 80046c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80046c2:	e003      	b.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80046c8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80046cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80046d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80046da:	2300      	movs	r3, #0
 80046dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046de:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80046e2:	460b      	mov	r3, r1
 80046e4:	4313      	orrs	r3, r2
 80046e6:	d00c      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80046e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046ec:	3328      	adds	r3, #40	; 0x28
 80046ee:	2102      	movs	r1, #2
 80046f0:	4618      	mov	r0, r3
 80046f2:	f001 fbf7 	bl	8005ee4 <RCCEx_PLL3_Config>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d002      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004702:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800470e:	663b      	str	r3, [r7, #96]	; 0x60
 8004710:	2300      	movs	r3, #0
 8004712:	667b      	str	r3, [r7, #100]	; 0x64
 8004714:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004718:	460b      	mov	r3, r1
 800471a:	4313      	orrs	r3, r2
 800471c:	d03a      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800471e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004722:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004726:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800472a:	d018      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x1192>
 800472c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004730:	d811      	bhi.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8004732:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004736:	d014      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8004738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800473c:	d80b      	bhi.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800473e:	2b00      	cmp	r3, #0
 8004740:	d011      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8004742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004746:	d106      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004748:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800474a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474c:	4a0e      	ldr	r2, [pc, #56]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800474e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004752:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004754:	e008      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800475c:	e004      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800475e:	bf00      	nop
 8004760:	e002      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004762:	bf00      	nop
 8004764:	e000      	b.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8004766:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004768:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10d      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004770:	4b05      	ldr	r3, [pc, #20]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004774:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004778:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800477c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004780:	4a01      	ldr	r2, [pc, #4]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8004782:	430b      	orrs	r3, r1
 8004784:	6553      	str	r3, [r2, #84]	; 0x54
 8004786:	e005      	b.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8004788:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004790:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004794:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80047a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80047a2:	2300      	movs	r3, #0
 80047a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80047aa:	460b      	mov	r3, r1
 80047ac:	4313      	orrs	r3, r2
 80047ae:	d009      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047b0:	4baa      	ldr	r3, [pc, #680]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80047b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047b4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80047b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80047bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047be:	4aa7      	ldr	r2, [pc, #668]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80047c0:	430b      	orrs	r3, r1
 80047c2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80047c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80047c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047cc:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80047d0:	653b      	str	r3, [r7, #80]	; 0x50
 80047d2:	2300      	movs	r3, #0
 80047d4:	657b      	str	r3, [r7, #84]	; 0x54
 80047d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80047da:	460b      	mov	r3, r1
 80047dc:	4313      	orrs	r3, r2
 80047de:	d00a      	beq.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80047e0:	4b9e      	ldr	r3, [pc, #632]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80047e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80047ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80047f0:	4a9a      	ldr	r2, [pc, #616]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80047f2:	430b      	orrs	r3, r1
 80047f4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80047f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80047fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047fe:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004802:	64bb      	str	r3, [r7, #72]	; 0x48
 8004804:	2300      	movs	r3, #0
 8004806:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004808:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800480c:	460b      	mov	r3, r1
 800480e:	4313      	orrs	r3, r2
 8004810:	d009      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004812:	4b92      	ldr	r3, [pc, #584]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004816:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800481a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800481e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004820:	4a8e      	ldr	r2, [pc, #568]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004822:	430b      	orrs	r3, r1
 8004824:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004826:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800482a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800482e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004832:	643b      	str	r3, [r7, #64]	; 0x40
 8004834:	2300      	movs	r3, #0
 8004836:	647b      	str	r3, [r7, #68]	; 0x44
 8004838:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800483c:	460b      	mov	r3, r1
 800483e:	4313      	orrs	r3, r2
 8004840:	d00e      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004842:	4b86      	ldr	r3, [pc, #536]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	4a85      	ldr	r2, [pc, #532]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004848:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800484c:	6113      	str	r3, [r2, #16]
 800484e:	4b83      	ldr	r3, [pc, #524]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8004850:	6919      	ldr	r1, [r3, #16]
 8004852:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004856:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800485a:	4a80      	ldr	r2, [pc, #512]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800485c:	430b      	orrs	r3, r1
 800485e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004860:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004868:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800486c:	63bb      	str	r3, [r7, #56]	; 0x38
 800486e:	2300      	movs	r3, #0
 8004870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004872:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004876:	460b      	mov	r3, r1
 8004878:	4313      	orrs	r3, r2
 800487a:	d009      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800487c:	4b77      	ldr	r3, [pc, #476]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800487e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004880:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004884:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488a:	4a74      	ldr	r2, [pc, #464]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800488c:	430b      	orrs	r3, r1
 800488e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004890:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004898:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800489c:	633b      	str	r3, [r7, #48]	; 0x30
 800489e:	2300      	movs	r3, #0
 80048a0:	637b      	str	r3, [r7, #52]	; 0x34
 80048a2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80048a6:	460b      	mov	r3, r1
 80048a8:	4313      	orrs	r3, r2
 80048aa:	d00a      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048ac:	4b6b      	ldr	r3, [pc, #428]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80048ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80048b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80048b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048bc:	4a67      	ldr	r2, [pc, #412]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80048be:	430b      	orrs	r3, r1
 80048c0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80048c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ca:	2100      	movs	r1, #0
 80048cc:	62b9      	str	r1, [r7, #40]	; 0x28
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048d4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80048d8:	460b      	mov	r3, r1
 80048da:	4313      	orrs	r3, r2
 80048dc:	d011      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80048e2:	3308      	adds	r3, #8
 80048e4:	2100      	movs	r1, #0
 80048e6:	4618      	mov	r0, r3
 80048e8:	f001 fa4a 	bl	8005d80 <RCCEx_PLL2_Config>
 80048ec:	4603      	mov	r3, r0
 80048ee:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80048f2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80048fe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004902:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490a:	2100      	movs	r1, #0
 800490c:	6239      	str	r1, [r7, #32]
 800490e:	f003 0302 	and.w	r3, r3, #2
 8004912:	627b      	str	r3, [r7, #36]	; 0x24
 8004914:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004918:	460b      	mov	r3, r1
 800491a:	4313      	orrs	r3, r2
 800491c:	d011      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800491e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004922:	3308      	adds	r3, #8
 8004924:	2101      	movs	r1, #1
 8004926:	4618      	mov	r0, r3
 8004928:	f001 fa2a 	bl	8005d80 <RCCEx_PLL2_Config>
 800492c:	4603      	mov	r3, r0
 800492e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8004932:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800493a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800493e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004942:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494a:	2100      	movs	r1, #0
 800494c:	61b9      	str	r1, [r7, #24]
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	61fb      	str	r3, [r7, #28]
 8004954:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004958:	460b      	mov	r3, r1
 800495a:	4313      	orrs	r3, r2
 800495c:	d011      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800495e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004962:	3308      	adds	r3, #8
 8004964:	2102      	movs	r1, #2
 8004966:	4618      	mov	r0, r3
 8004968:	f001 fa0a 	bl	8005d80 <RCCEx_PLL2_Config>
 800496c:	4603      	mov	r3, r0
 800496e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8004972:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800497a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800497e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004982:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498a:	2100      	movs	r1, #0
 800498c:	6139      	str	r1, [r7, #16]
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004998:	460b      	mov	r3, r1
 800499a:	4313      	orrs	r3, r2
 800499c:	d011      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800499e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049a2:	3328      	adds	r3, #40	; 0x28
 80049a4:	2100      	movs	r1, #0
 80049a6:	4618      	mov	r0, r3
 80049a8:	f001 fa9c 	bl	8005ee4 <RCCEx_PLL3_Config>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 80049b2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049ba:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80049be:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80049c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ca:	2100      	movs	r1, #0
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	f003 0310 	and.w	r3, r3, #16
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80049d8:	460b      	mov	r3, r1
 80049da:	4313      	orrs	r3, r2
 80049dc:	d011      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049e2:	3328      	adds	r3, #40	; 0x28
 80049e4:	2101      	movs	r1, #1
 80049e6:	4618      	mov	r0, r3
 80049e8:	f001 fa7c 	bl	8005ee4 <RCCEx_PLL3_Config>
 80049ec:	4603      	mov	r3, r0
 80049ee:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80049f2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049fa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80049fe:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004a02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	6039      	str	r1, [r7, #0]
 8004a0e:	f003 0320 	and.w	r3, r3, #32
 8004a12:	607b      	str	r3, [r7, #4]
 8004a14:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004a18:	460b      	mov	r3, r1
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	d011      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a22:	3328      	adds	r3, #40	; 0x28
 8004a24:	2102      	movs	r1, #2
 8004a26:	4618      	mov	r0, r3
 8004a28:	f001 fa5c 	bl	8005ee4 <RCCEx_PLL3_Config>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8004a32:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a3a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004a3e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 8004a42:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d101      	bne.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e000      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8004a56:	46bd      	mov	sp, r7
 8004a58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a5c:	58024400 	.word	0x58024400

08004a60 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b090      	sub	sp, #64	; 0x40
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004a6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a6e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8004a72:	430b      	orrs	r3, r1
 8004a74:	f040 8094 	bne.w	8004ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004a78:	4b9e      	ldr	r3, [pc, #632]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	f200 8087 	bhi.w	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8004a8a:	a201      	add	r2, pc, #4	; (adr r2, 8004a90 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a90:	08004aa5 	.word	0x08004aa5
 8004a94:	08004acd 	.word	0x08004acd
 8004a98:	08004af5 	.word	0x08004af5
 8004a9c:	08004b91 	.word	0x08004b91
 8004aa0:	08004b1d 	.word	0x08004b1d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004aa4:	4b93      	ldr	r3, [pc, #588]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ab0:	d108      	bne.n	8004ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f001 f810 	bl	8005adc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ac0:	f000 bd45 	b.w	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ac8:	f000 bd41 	b.w	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004acc:	4b89      	ldr	r3, [pc, #548]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ad8:	d108      	bne.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ada:	f107 0318 	add.w	r3, r7, #24
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 fd54 	bl	800558c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ae8:	f000 bd31 	b.w	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004af0:	f000 bd2d 	b.w	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004af4:	4b7f      	ldr	r3, [pc, #508]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b00:	d108      	bne.n	8004b14 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b02:	f107 030c 	add.w	r3, r7, #12
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 fe94 	bl	8005834 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004b10:	f000 bd1d 	b.w	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004b14:	2300      	movs	r3, #0
 8004b16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b18:	f000 bd19 	b.w	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004b1c:	4b75      	ldr	r3, [pc, #468]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b24:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004b26:	4b73      	ldr	r3, [pc, #460]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0304 	and.w	r3, r3, #4
 8004b2e:	2b04      	cmp	r3, #4
 8004b30:	d10c      	bne.n	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d109      	bne.n	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b38:	4b6e      	ldr	r3, [pc, #440]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	08db      	lsrs	r3, r3, #3
 8004b3e:	f003 0303 	and.w	r3, r3, #3
 8004b42:	4a6d      	ldr	r2, [pc, #436]	; (8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004b44:	fa22 f303 	lsr.w	r3, r2, r3
 8004b48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b4a:	e01f      	b.n	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004b4c:	4b69      	ldr	r3, [pc, #420]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b58:	d106      	bne.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b60:	d102      	bne.n	8004b68 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004b62:	4b66      	ldr	r3, [pc, #408]	; (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004b64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b66:	e011      	b.n	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004b68:	4b62      	ldr	r3, [pc, #392]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004b74:	d106      	bne.n	8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8004b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b7c:	d102      	bne.n	8004b84 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004b7e:	4b60      	ldr	r3, [pc, #384]	; (8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004b80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b82:	e003      	b.n	8004b8c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004b84:	2300      	movs	r3, #0
 8004b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004b88:	f000 bce1 	b.w	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004b8c:	f000 bcdf 	b.w	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004b90:	4b5c      	ldr	r3, [pc, #368]	; (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004b92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b94:	f000 bcdb 	b.w	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b9c:	f000 bcd7 	b.w	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ba4:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8004ba8:	430b      	orrs	r3, r1
 8004baa:	f040 80ad 	bne.w	8004d08 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8004bae:	4b51      	ldr	r3, [pc, #324]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004bb6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bbe:	d056      	beq.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8004bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc6:	f200 8090 	bhi.w	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bcc:	2bc0      	cmp	r3, #192	; 0xc0
 8004bce:	f000 8088 	beq.w	8004ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd4:	2bc0      	cmp	r3, #192	; 0xc0
 8004bd6:	f200 8088 	bhi.w	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bdc:	2b80      	cmp	r3, #128	; 0x80
 8004bde:	d032      	beq.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8004be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be2:	2b80      	cmp	r3, #128	; 0x80
 8004be4:	f200 8081 	bhi.w	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d003      	beq.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8004bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bf0:	2b40      	cmp	r3, #64	; 0x40
 8004bf2:	d014      	beq.n	8004c1e <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004bf4:	e079      	b.n	8004cea <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004bf6:	4b3f      	ldr	r3, [pc, #252]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c02:	d108      	bne.n	8004c16 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 ff67 	bl	8005adc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c12:	f000 bc9c 	b.w	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004c16:	2300      	movs	r3, #0
 8004c18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c1a:	f000 bc98 	b.w	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c1e:	4b35      	ldr	r3, [pc, #212]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c2a:	d108      	bne.n	8004c3e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c2c:	f107 0318 	add.w	r3, r7, #24
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 fcab 	bl	800558c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c3a:	f000 bc88 	b.w	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c42:	f000 bc84 	b.w	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c46:	4b2b      	ldr	r3, [pc, #172]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c52:	d108      	bne.n	8004c66 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c54:	f107 030c 	add.w	r3, r7, #12
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f000 fdeb 	bl	8005834 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004c62:	f000 bc74 	b.w	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004c66:	2300      	movs	r3, #0
 8004c68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004c6a:	f000 bc70 	b.w	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004c6e:	4b21      	ldr	r3, [pc, #132]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c72:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c76:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c78:	4b1e      	ldr	r3, [pc, #120]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d10c      	bne.n	8004c9e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8004c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d109      	bne.n	8004c9e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c8a:	4b1a      	ldr	r3, [pc, #104]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	08db      	lsrs	r3, r3, #3
 8004c90:	f003 0303 	and.w	r3, r3, #3
 8004c94:	4a18      	ldr	r2, [pc, #96]	; (8004cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004c96:	fa22 f303 	lsr.w	r3, r2, r3
 8004c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c9c:	e01f      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c9e:	4b15      	ldr	r3, [pc, #84]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004caa:	d106      	bne.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cb2:	d102      	bne.n	8004cba <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004cb4:	4b11      	ldr	r3, [pc, #68]	; (8004cfc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cb8:	e011      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004cba:	4b0e      	ldr	r3, [pc, #56]	; (8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cc6:	d106      	bne.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8004cc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004cce:	d102      	bne.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004cd0:	4b0b      	ldr	r3, [pc, #44]	; (8004d00 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cd4:	e003      	b.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004cda:	f000 bc38 	b.w	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004cde:	f000 bc36 	b.w	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004ce2:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ce6:	f000 bc32 	b.w	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004cea:	2300      	movs	r3, #0
 8004cec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004cee:	f000 bc2e 	b.w	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004cf2:	bf00      	nop
 8004cf4:	58024400 	.word	0x58024400
 8004cf8:	03d09000 	.word	0x03d09000
 8004cfc:	003d0900 	.word	0x003d0900
 8004d00:	017d7840 	.word	0x017d7840
 8004d04:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004d08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d0c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8004d10:	430b      	orrs	r3, r1
 8004d12:	f040 809c 	bne.w	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8004d16:	4b9e      	ldr	r3, [pc, #632]	; (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8004d1e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d26:	d054      	beq.n	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8004d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d2e:	f200 808b 	bhi.w	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8004d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d34:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004d38:	f000 8083 	beq.w	8004e42 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8004d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d3e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004d42:	f200 8081 	bhi.w	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8004d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d4c:	d02f      	beq.n	8004dae <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d54:	d878      	bhi.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8004d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d004      	beq.n	8004d66 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d62:	d012      	beq.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8004d64:	e070      	b.n	8004e48 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004d66:	4b8a      	ldr	r3, [pc, #552]	; (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d72:	d107      	bne.n	8004d84 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 feaf 	bl	8005adc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d82:	e3e4      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004d84:	2300      	movs	r3, #0
 8004d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d88:	e3e1      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d8a:	4b81      	ldr	r3, [pc, #516]	; (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d96:	d107      	bne.n	8004da8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d98:	f107 0318 	add.w	r3, r7, #24
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f000 fbf5 	bl	800558c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004da6:	e3d2      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004da8:	2300      	movs	r3, #0
 8004daa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dac:	e3cf      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004dae:	4b78      	ldr	r3, [pc, #480]	; (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004db6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dba:	d107      	bne.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004dbc:	f107 030c 	add.w	r3, r7, #12
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fd37 	bl	8005834 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004dca:	e3c0      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dd0:	e3bd      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004dd2:	4b6f      	ldr	r3, [pc, #444]	; (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004dda:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ddc:	4b6c      	ldr	r3, [pc, #432]	; (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0304 	and.w	r3, r3, #4
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	d10c      	bne.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8004de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d109      	bne.n	8004e02 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004dee:	4b68      	ldr	r3, [pc, #416]	; (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	08db      	lsrs	r3, r3, #3
 8004df4:	f003 0303 	and.w	r3, r3, #3
 8004df8:	4a66      	ldr	r2, [pc, #408]	; (8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8004dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8004dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e00:	e01e      	b.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004e02:	4b63      	ldr	r3, [pc, #396]	; (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e0e:	d106      	bne.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8004e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e16:	d102      	bne.n	8004e1e <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004e18:	4b5f      	ldr	r3, [pc, #380]	; (8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8004e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e1c:	e010      	b.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004e1e:	4b5c      	ldr	r3, [pc, #368]	; (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e26:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e2a:	d106      	bne.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8004e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e32:	d102      	bne.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004e34:	4b59      	ldr	r3, [pc, #356]	; (8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8004e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e38:	e002      	b.n	8004e40 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004e3e:	e386      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004e40:	e385      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004e42:	4b57      	ldr	r3, [pc, #348]	; (8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004e44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e46:	e382      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e4c:	e37f      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004e4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e52:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8004e56:	430b      	orrs	r3, r1
 8004e58:	f040 80a7 	bne.w	8004faa <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8004e5c:	4b4c      	ldr	r3, [pc, #304]	; (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e60:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004e64:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e6c:	d055      	beq.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e74:	f200 8096 	bhi.w	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e7e:	f000 8084 	beq.w	8004f8a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8004e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e84:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e88:	f200 808c 	bhi.w	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e92:	d030      	beq.n	8004ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8004e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e9a:	f200 8083 	bhi.w	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d004      	beq.n	8004eae <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004eaa:	d012      	beq.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8004eac:	e07a      	b.n	8004fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004eae:	4b38      	ldr	r3, [pc, #224]	; (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004eba:	d107      	bne.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 fe0b 	bl	8005adc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004eca:	e340      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ed0:	e33d      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004ed2:	4b2f      	ldr	r3, [pc, #188]	; (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ede:	d107      	bne.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ee0:	f107 0318 	add.w	r3, r7, #24
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 fb51 	bl	800558c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004eee:	e32e      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ef4:	e32b      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004ef6:	4b26      	ldr	r3, [pc, #152]	; (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004efe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f02:	d107      	bne.n	8004f14 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f04:	f107 030c 	add.w	r3, r7, #12
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f000 fc93 	bl	8005834 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f12:	e31c      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004f14:	2300      	movs	r3, #0
 8004f16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f18:	e319      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004f1a:	4b1d      	ldr	r3, [pc, #116]	; (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f22:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f24:	4b1a      	ldr	r3, [pc, #104]	; (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0304 	and.w	r3, r3, #4
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	d10c      	bne.n	8004f4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8004f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d109      	bne.n	8004f4a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f36:	4b16      	ldr	r3, [pc, #88]	; (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	08db      	lsrs	r3, r3, #3
 8004f3c:	f003 0303 	and.w	r3, r3, #3
 8004f40:	4a14      	ldr	r2, [pc, #80]	; (8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8004f42:	fa22 f303 	lsr.w	r3, r2, r3
 8004f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f48:	e01e      	b.n	8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f4a:	4b11      	ldr	r3, [pc, #68]	; (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f56:	d106      	bne.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8004f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f5e:	d102      	bne.n	8004f66 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004f60:	4b0d      	ldr	r3, [pc, #52]	; (8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8004f62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f64:	e010      	b.n	8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004f66:	4b0a      	ldr	r3, [pc, #40]	; (8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f72:	d106      	bne.n	8004f82 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8004f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f7a:	d102      	bne.n	8004f82 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004f7c:	4b07      	ldr	r3, [pc, #28]	; (8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8004f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f80:	e002      	b.n	8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004f82:	2300      	movs	r3, #0
 8004f84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004f86:	e2e2      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004f88:	e2e1      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004f8a:	4b05      	ldr	r3, [pc, #20]	; (8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f8e:	e2de      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004f90:	58024400 	.word	0x58024400
 8004f94:	03d09000 	.word	0x03d09000
 8004f98:	003d0900 	.word	0x003d0900
 8004f9c:	017d7840 	.word	0x017d7840
 8004fa0:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fa8:	e2d1      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004faa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fae:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8004fb2:	430b      	orrs	r3, r1
 8004fb4:	f040 809c 	bne.w	80050f0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8004fb8:	4b93      	ldr	r3, [pc, #588]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fbc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004fc0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8004fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fc8:	d054      	beq.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fd0:	f200 808b 	bhi.w	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004fda:	f000 8083 	beq.w	80050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8004fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004fe4:	f200 8081 	bhi.w	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fee:	d02f      	beq.n	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8004ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff6:	d878      	bhi.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d004      	beq.n	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8004ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005004:	d012      	beq.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005006:	e070      	b.n	80050ea <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005008:	4b7f      	ldr	r3, [pc, #508]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005010:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005014:	d107      	bne.n	8005026 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005016:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800501a:	4618      	mov	r0, r3
 800501c:	f000 fd5e 	bl	8005adc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005022:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005024:	e293      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005026:	2300      	movs	r3, #0
 8005028:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800502a:	e290      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800502c:	4b76      	ldr	r3, [pc, #472]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005034:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005038:	d107      	bne.n	800504a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800503a:	f107 0318 	add.w	r3, r7, #24
 800503e:	4618      	mov	r0, r3
 8005040:	f000 faa4 	bl	800558c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005048:	e281      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800504a:	2300      	movs	r3, #0
 800504c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800504e:	e27e      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005050:	4b6d      	ldr	r3, [pc, #436]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800505c:	d107      	bne.n	800506e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800505e:	f107 030c 	add.w	r3, r7, #12
 8005062:	4618      	mov	r0, r3
 8005064:	f000 fbe6 	bl	8005834 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800506c:	e26f      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800506e:	2300      	movs	r3, #0
 8005070:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005072:	e26c      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005074:	4b64      	ldr	r3, [pc, #400]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005078:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800507c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800507e:	4b62      	ldr	r3, [pc, #392]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b04      	cmp	r3, #4
 8005088:	d10c      	bne.n	80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800508a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508c:	2b00      	cmp	r3, #0
 800508e:	d109      	bne.n	80050a4 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005090:	4b5d      	ldr	r3, [pc, #372]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	08db      	lsrs	r3, r3, #3
 8005096:	f003 0303 	and.w	r3, r3, #3
 800509a:	4a5c      	ldr	r2, [pc, #368]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800509c:	fa22 f303 	lsr.w	r3, r2, r3
 80050a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050a2:	e01e      	b.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80050a4:	4b58      	ldr	r3, [pc, #352]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050b0:	d106      	bne.n	80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80050b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050b8:	d102      	bne.n	80050c0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80050ba:	4b55      	ldr	r3, [pc, #340]	; (8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80050bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050be:	e010      	b.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80050c0:	4b51      	ldr	r3, [pc, #324]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050cc:	d106      	bne.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80050ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050d4:	d102      	bne.n	80050dc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80050d6:	4b4f      	ldr	r3, [pc, #316]	; (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80050d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050da:	e002      	b.n	80050e2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80050e0:	e235      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80050e2:	e234      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80050e4:	4b4c      	ldr	r3, [pc, #304]	; (8005218 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80050e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050e8:	e231      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80050ea:	2300      	movs	r3, #0
 80050ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050ee:	e22e      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80050f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050f4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80050f8:	430b      	orrs	r3, r1
 80050fa:	f040 808f 	bne.w	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80050fe:	4b42      	ldr	r3, [pc, #264]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005102:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005106:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8005108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800510a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800510e:	d06b      	beq.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005112:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005116:	d874      	bhi.n	8005202 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800511e:	d056      	beq.n	80051ce <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005122:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005126:	d86c      	bhi.n	8005202 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800512e:	d03b      	beq.n	80051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8005130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005132:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005136:	d864      	bhi.n	8005202 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800513e:	d021      	beq.n	8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005142:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005146:	d85c      	bhi.n	8005202 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514a:	2b00      	cmp	r3, #0
 800514c:	d004      	beq.n	8005158 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005154:	d004      	beq.n	8005160 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8005156:	e054      	b.n	8005202 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005158:	f7fe f9ca 	bl	80034f0 <HAL_RCC_GetPCLK1Freq>
 800515c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800515e:	e1f6      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005160:	4b29      	ldr	r3, [pc, #164]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005168:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800516c:	d107      	bne.n	800517e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800516e:	f107 0318 	add.w	r3, r7, #24
 8005172:	4618      	mov	r0, r3
 8005174:	f000 fa0a 	bl	800558c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800517c:	e1e7      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800517e:	2300      	movs	r3, #0
 8005180:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005182:	e1e4      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005184:	4b20      	ldr	r3, [pc, #128]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800518c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005190:	d107      	bne.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005192:	f107 030c 	add.w	r3, r7, #12
 8005196:	4618      	mov	r0, r3
 8005198:	f000 fb4c 	bl	8005834 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80051a0:	e1d5      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80051a2:	2300      	movs	r3, #0
 80051a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051a6:	e1d2      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80051a8:	4b17      	ldr	r3, [pc, #92]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f003 0304 	and.w	r3, r3, #4
 80051b0:	2b04      	cmp	r3, #4
 80051b2:	d109      	bne.n	80051c8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051b4:	4b14      	ldr	r3, [pc, #80]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	08db      	lsrs	r3, r3, #3
 80051ba:	f003 0303 	and.w	r3, r3, #3
 80051be:	4a13      	ldr	r2, [pc, #76]	; (800520c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80051c0:	fa22 f303 	lsr.w	r3, r2, r3
 80051c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80051c6:	e1c2      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80051c8:	2300      	movs	r3, #0
 80051ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051cc:	e1bf      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80051ce:	4b0e      	ldr	r3, [pc, #56]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051da:	d102      	bne.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80051dc:	4b0c      	ldr	r3, [pc, #48]	; (8005210 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80051de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80051e0:	e1b5      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80051e2:	2300      	movs	r3, #0
 80051e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051e6:	e1b2      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80051e8:	4b07      	ldr	r3, [pc, #28]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051f4:	d102      	bne.n	80051fc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80051f6:	4b07      	ldr	r3, [pc, #28]	; (8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80051f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80051fa:	e1a8      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80051fc:	2300      	movs	r3, #0
 80051fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005200:	e1a5      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005202:	2300      	movs	r3, #0
 8005204:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005206:	e1a2      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005208:	58024400 	.word	0x58024400
 800520c:	03d09000 	.word	0x03d09000
 8005210:	003d0900 	.word	0x003d0900
 8005214:	017d7840 	.word	0x017d7840
 8005218:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800521c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005220:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005224:	430b      	orrs	r3, r1
 8005226:	d173      	bne.n	8005310 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005228:	4b9c      	ldr	r3, [pc, #624]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800522a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800522c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005230:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005234:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005238:	d02f      	beq.n	800529a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800523a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005240:	d863      	bhi.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8005242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005244:	2b00      	cmp	r3, #0
 8005246:	d004      	beq.n	8005252 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800524e:	d012      	beq.n	8005276 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005250:	e05b      	b.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005252:	4b92      	ldr	r3, [pc, #584]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800525a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800525e:	d107      	bne.n	8005270 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005260:	f107 0318 	add.w	r3, r7, #24
 8005264:	4618      	mov	r0, r3
 8005266:	f000 f991 	bl	800558c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800526e:	e16e      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005270:	2300      	movs	r3, #0
 8005272:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005274:	e16b      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005276:	4b89      	ldr	r3, [pc, #548]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800527e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005282:	d107      	bne.n	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005284:	f107 030c 	add.w	r3, r7, #12
 8005288:	4618      	mov	r0, r3
 800528a:	f000 fad3 	bl	8005834 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005292:	e15c      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005294:	2300      	movs	r3, #0
 8005296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005298:	e159      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800529a:	4b80      	ldr	r3, [pc, #512]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800529c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800529e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052a2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052a4:	4b7d      	ldr	r3, [pc, #500]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0304 	and.w	r3, r3, #4
 80052ac:	2b04      	cmp	r3, #4
 80052ae:	d10c      	bne.n	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80052b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052b6:	4b79      	ldr	r3, [pc, #484]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	08db      	lsrs	r3, r3, #3
 80052bc:	f003 0303 	and.w	r3, r3, #3
 80052c0:	4a77      	ldr	r2, [pc, #476]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80052c2:	fa22 f303 	lsr.w	r3, r2, r3
 80052c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052c8:	e01e      	b.n	8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052ca:	4b74      	ldr	r3, [pc, #464]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052d6:	d106      	bne.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80052d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052de:	d102      	bne.n	80052e6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80052e0:	4b70      	ldr	r3, [pc, #448]	; (80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80052e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052e4:	e010      	b.n	8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80052e6:	4b6d      	ldr	r3, [pc, #436]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052f2:	d106      	bne.n	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80052f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052fa:	d102      	bne.n	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80052fc:	4b6a      	ldr	r3, [pc, #424]	; (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80052fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005300:	e002      	b.n	8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005302:	2300      	movs	r3, #0
 8005304:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005306:	e122      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005308:	e121      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800530a:	2300      	movs	r3, #0
 800530c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800530e:	e11e      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005310:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005314:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005318:	430b      	orrs	r3, r1
 800531a:	d133      	bne.n	8005384 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800531c:	4b5f      	ldr	r3, [pc, #380]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800531e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005324:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005328:	2b00      	cmp	r3, #0
 800532a:	d004      	beq.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800532c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005332:	d012      	beq.n	800535a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8005334:	e023      	b.n	800537e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005336:	4b59      	ldr	r3, [pc, #356]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800533e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005342:	d107      	bne.n	8005354 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005348:	4618      	mov	r0, r3
 800534a:	f000 fbc7 	bl	8005adc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800534e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005350:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005352:	e0fc      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005354:	2300      	movs	r3, #0
 8005356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005358:	e0f9      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800535a:	4b50      	ldr	r3, [pc, #320]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005362:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005366:	d107      	bne.n	8005378 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005368:	f107 0318 	add.w	r3, r7, #24
 800536c:	4618      	mov	r0, r3
 800536e:	f000 f90d 	bl	800558c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005372:	6a3b      	ldr	r3, [r7, #32]
 8005374:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005376:	e0ea      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005378:	2300      	movs	r3, #0
 800537a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800537c:	e0e7      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800537e:	2300      	movs	r3, #0
 8005380:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005382:	e0e4      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005384:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005388:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800538c:	430b      	orrs	r3, r1
 800538e:	f040 808d 	bne.w	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005392:	4b42      	ldr	r3, [pc, #264]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005396:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800539a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800539c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053a2:	d06b      	beq.n	800547c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80053a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053aa:	d874      	bhi.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80053ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053b2:	d056      	beq.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80053b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053ba:	d86c      	bhi.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80053bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053c2:	d03b      	beq.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80053c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80053ca:	d864      	bhi.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80053cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053d2:	d021      	beq.n	8005418 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80053d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053da:	d85c      	bhi.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80053dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d004      	beq.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80053e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053e8:	d004      	beq.n	80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80053ea:	e054      	b.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80053ec:	f000 f8b8 	bl	8005560 <HAL_RCCEx_GetD3PCLK1Freq>
 80053f0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80053f2:	e0ac      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053f4:	4b29      	ldr	r3, [pc, #164]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005400:	d107      	bne.n	8005412 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005402:	f107 0318 	add.w	r3, r7, #24
 8005406:	4618      	mov	r0, r3
 8005408:	f000 f8c0 	bl	800558c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005410:	e09d      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005412:	2300      	movs	r3, #0
 8005414:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005416:	e09a      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005418:	4b20      	ldr	r3, [pc, #128]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005420:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005424:	d107      	bne.n	8005436 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005426:	f107 030c 	add.w	r3, r7, #12
 800542a:	4618      	mov	r0, r3
 800542c:	f000 fa02 	bl	8005834 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005434:	e08b      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005436:	2300      	movs	r3, #0
 8005438:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800543a:	e088      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800543c:	4b17      	ldr	r3, [pc, #92]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	2b04      	cmp	r3, #4
 8005446:	d109      	bne.n	800545c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005448:	4b14      	ldr	r3, [pc, #80]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	08db      	lsrs	r3, r3, #3
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	4a13      	ldr	r2, [pc, #76]	; (80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005454:	fa22 f303 	lsr.w	r3, r2, r3
 8005458:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800545a:	e078      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800545c:	2300      	movs	r3, #0
 800545e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005460:	e075      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005462:	4b0e      	ldr	r3, [pc, #56]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800546e:	d102      	bne.n	8005476 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8005470:	4b0c      	ldr	r3, [pc, #48]	; (80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005472:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005474:	e06b      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005476:	2300      	movs	r3, #0
 8005478:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800547a:	e068      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800547c:	4b07      	ldr	r3, [pc, #28]	; (800549c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005484:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005488:	d102      	bne.n	8005490 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800548a:	4b07      	ldr	r3, [pc, #28]	; (80054a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800548c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800548e:	e05e      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005490:	2300      	movs	r3, #0
 8005492:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005494:	e05b      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005496:	2300      	movs	r3, #0
 8005498:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800549a:	e058      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800549c:	58024400 	.word	0x58024400
 80054a0:	03d09000 	.word	0x03d09000
 80054a4:	003d0900 	.word	0x003d0900
 80054a8:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80054ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054b0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80054b4:	430b      	orrs	r3, r1
 80054b6:	d148      	bne.n	800554a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80054b8:	4b27      	ldr	r3, [pc, #156]	; (8005558 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80054ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80054c0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80054c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054c8:	d02a      	beq.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80054ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054d0:	d838      	bhi.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80054d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d004      	beq.n	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80054d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054de:	d00d      	beq.n	80054fc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80054e0:	e030      	b.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80054e2:	4b1d      	ldr	r3, [pc, #116]	; (8005558 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054ee:	d102      	bne.n	80054f6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80054f0:	4b1a      	ldr	r3, [pc, #104]	; (800555c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80054f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054f4:	e02b      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80054f6:	2300      	movs	r3, #0
 80054f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054fa:	e028      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80054fc:	4b16      	ldr	r3, [pc, #88]	; (8005558 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005504:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005508:	d107      	bne.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800550a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800550e:	4618      	mov	r0, r3
 8005510:	f000 fae4 	bl	8005adc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005516:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005518:	e019      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800551a:	2300      	movs	r3, #0
 800551c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800551e:	e016      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005520:	4b0d      	ldr	r3, [pc, #52]	; (8005558 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005528:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800552c:	d107      	bne.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800552e:	f107 0318 	add.w	r3, r7, #24
 8005532:	4618      	mov	r0, r3
 8005534:	f000 f82a 	bl	800558c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800553c:	e007      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800553e:	2300      	movs	r3, #0
 8005540:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005542:	e004      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005544:	2300      	movs	r3, #0
 8005546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005548:	e001      	b.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800554a:	2300      	movs	r3, #0
 800554c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800554e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005550:	4618      	mov	r0, r3
 8005552:	3740      	adds	r7, #64	; 0x40
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	58024400 	.word	0x58024400
 800555c:	017d7840 	.word	0x017d7840

08005560 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005564:	f7fd ff94 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 8005568:	4602      	mov	r2, r0
 800556a:	4b06      	ldr	r3, [pc, #24]	; (8005584 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	091b      	lsrs	r3, r3, #4
 8005570:	f003 0307 	and.w	r3, r3, #7
 8005574:	4904      	ldr	r1, [pc, #16]	; (8005588 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005576:	5ccb      	ldrb	r3, [r1, r3]
 8005578:	f003 031f 	and.w	r3, r3, #31
 800557c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005580:	4618      	mov	r0, r3
 8005582:	bd80      	pop	{r7, pc}
 8005584:	58024400 	.word	0x58024400
 8005588:	08012b94 	.word	0x08012b94

0800558c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800558c:	b480      	push	{r7}
 800558e:	b089      	sub	sp, #36	; 0x24
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005594:	4ba1      	ldr	r3, [pc, #644]	; (800581c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005598:	f003 0303 	and.w	r3, r3, #3
 800559c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800559e:	4b9f      	ldr	r3, [pc, #636]	; (800581c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a2:	0b1b      	lsrs	r3, r3, #12
 80055a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80055aa:	4b9c      	ldr	r3, [pc, #624]	; (800581c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ae:	091b      	lsrs	r3, r3, #4
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80055b6:	4b99      	ldr	r3, [pc, #612]	; (800581c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ba:	08db      	lsrs	r3, r3, #3
 80055bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	fb02 f303 	mul.w	r3, r2, r3
 80055c6:	ee07 3a90 	vmov	s15, r3
 80055ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 8111 	beq.w	80057fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	2b02      	cmp	r3, #2
 80055de:	f000 8083 	beq.w	80056e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	f200 80a1 	bhi.w	800572c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d056      	beq.n	80056a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80055f6:	e099      	b.n	800572c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055f8:	4b88      	ldr	r3, [pc, #544]	; (800581c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 0320 	and.w	r3, r3, #32
 8005600:	2b00      	cmp	r3, #0
 8005602:	d02d      	beq.n	8005660 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005604:	4b85      	ldr	r3, [pc, #532]	; (800581c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	08db      	lsrs	r3, r3, #3
 800560a:	f003 0303 	and.w	r3, r3, #3
 800560e:	4a84      	ldr	r2, [pc, #528]	; (8005820 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005610:	fa22 f303 	lsr.w	r3, r2, r3
 8005614:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	ee07 3a90 	vmov	s15, r3
 800561c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	ee07 3a90 	vmov	s15, r3
 8005626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800562a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800562e:	4b7b      	ldr	r3, [pc, #492]	; (800581c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005636:	ee07 3a90 	vmov	s15, r3
 800563a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800563e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005642:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005824 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800564a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800564e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800565a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800565e:	e087      	b.n	8005770 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	ee07 3a90 	vmov	s15, r3
 8005666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800566a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005828 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800566e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005672:	4b6a      	ldr	r3, [pc, #424]	; (800581c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800567a:	ee07 3a90 	vmov	s15, r3
 800567e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005682:	ed97 6a03 	vldr	s12, [r7, #12]
 8005686:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005824 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800568a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800568e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005692:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800569a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800569e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056a2:	e065      	b.n	8005770 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	ee07 3a90 	vmov	s15, r3
 80056aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800582c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80056b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056b6:	4b59      	ldr	r3, [pc, #356]	; (800581c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056be:	ee07 3a90 	vmov	s15, r3
 80056c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80056ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005824 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80056ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056e6:	e043      	b.n	8005770 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	ee07 3a90 	vmov	s15, r3
 80056ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005830 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80056f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056fa:	4b48      	ldr	r3, [pc, #288]	; (800581c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005702:	ee07 3a90 	vmov	s15, r3
 8005706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800570a:	ed97 6a03 	vldr	s12, [r7, #12]
 800570e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005824 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800571a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800571e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800572a:	e021      	b.n	8005770 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	ee07 3a90 	vmov	s15, r3
 8005732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005736:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800582c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800573a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800573e:	4b37      	ldr	r3, [pc, #220]	; (800581c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005746:	ee07 3a90 	vmov	s15, r3
 800574a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800574e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005752:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005824 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800575a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800575e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800576a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800576e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005770:	4b2a      	ldr	r3, [pc, #168]	; (800581c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005774:	0a5b      	lsrs	r3, r3, #9
 8005776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800577a:	ee07 3a90 	vmov	s15, r3
 800577e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005782:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005786:	ee37 7a87 	vadd.f32	s14, s15, s14
 800578a:	edd7 6a07 	vldr	s13, [r7, #28]
 800578e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005792:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005796:	ee17 2a90 	vmov	r2, s15
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800579e:	4b1f      	ldr	r3, [pc, #124]	; (800581c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a2:	0c1b      	lsrs	r3, r3, #16
 80057a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057a8:	ee07 3a90 	vmov	s15, r3
 80057ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80057bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057c4:	ee17 2a90 	vmov	r2, s15
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80057cc:	4b13      	ldr	r3, [pc, #76]	; (800581c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d0:	0e1b      	lsrs	r3, r3, #24
 80057d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057d6:	ee07 3a90 	vmov	s15, r3
 80057da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80057e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80057ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057f2:	ee17 2a90 	vmov	r2, s15
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80057fa:	e008      	b.n	800580e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	609a      	str	r2, [r3, #8]
}
 800580e:	bf00      	nop
 8005810:	3724      	adds	r7, #36	; 0x24
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	58024400 	.word	0x58024400
 8005820:	03d09000 	.word	0x03d09000
 8005824:	46000000 	.word	0x46000000
 8005828:	4c742400 	.word	0x4c742400
 800582c:	4a742400 	.word	0x4a742400
 8005830:	4bbebc20 	.word	0x4bbebc20

08005834 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005834:	b480      	push	{r7}
 8005836:	b089      	sub	sp, #36	; 0x24
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800583c:	4ba1      	ldr	r3, [pc, #644]	; (8005ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800583e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005840:	f003 0303 	and.w	r3, r3, #3
 8005844:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005846:	4b9f      	ldr	r3, [pc, #636]	; (8005ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800584a:	0d1b      	lsrs	r3, r3, #20
 800584c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005850:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005852:	4b9c      	ldr	r3, [pc, #624]	; (8005ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005856:	0a1b      	lsrs	r3, r3, #8
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800585e:	4b99      	ldr	r3, [pc, #612]	; (8005ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005862:	08db      	lsrs	r3, r3, #3
 8005864:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	fb02 f303 	mul.w	r3, r2, r3
 800586e:	ee07 3a90 	vmov	s15, r3
 8005872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005876:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	2b00      	cmp	r3, #0
 800587e:	f000 8111 	beq.w	8005aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	2b02      	cmp	r3, #2
 8005886:	f000 8083 	beq.w	8005990 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	2b02      	cmp	r3, #2
 800588e:	f200 80a1 	bhi.w	80059d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d056      	beq.n	800594c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800589e:	e099      	b.n	80059d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058a0:	4b88      	ldr	r3, [pc, #544]	; (8005ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0320 	and.w	r3, r3, #32
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d02d      	beq.n	8005908 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058ac:	4b85      	ldr	r3, [pc, #532]	; (8005ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	08db      	lsrs	r3, r3, #3
 80058b2:	f003 0303 	and.w	r3, r3, #3
 80058b6:	4a84      	ldr	r2, [pc, #528]	; (8005ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80058b8:	fa22 f303 	lsr.w	r3, r2, r3
 80058bc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	ee07 3a90 	vmov	s15, r3
 80058c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	ee07 3a90 	vmov	s15, r3
 80058ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058d6:	4b7b      	ldr	r3, [pc, #492]	; (8005ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058de:	ee07 3a90 	vmov	s15, r3
 80058e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ea:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005acc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005902:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005906:	e087      	b.n	8005a18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	ee07 3a90 	vmov	s15, r3
 800590e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005912:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005916:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800591a:	4b6a      	ldr	r3, [pc, #424]	; (8005ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800591c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005922:	ee07 3a90 	vmov	s15, r3
 8005926:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800592a:	ed97 6a03 	vldr	s12, [r7, #12]
 800592e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005acc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005932:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005936:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800593a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800593e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005942:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005946:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800594a:	e065      	b.n	8005a18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	ee07 3a90 	vmov	s15, r3
 8005952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005956:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800595a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800595e:	4b59      	ldr	r3, [pc, #356]	; (8005ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005966:	ee07 3a90 	vmov	s15, r3
 800596a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800596e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005972:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005acc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005976:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800597a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800597e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005982:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005986:	ee67 7a27 	vmul.f32	s15, s14, s15
 800598a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800598e:	e043      	b.n	8005a18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	ee07 3a90 	vmov	s15, r3
 8005996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800599a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800599e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059a2:	4b48      	ldr	r3, [pc, #288]	; (8005ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059aa:	ee07 3a90 	vmov	s15, r3
 80059ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80059b6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005acc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059d2:	e021      	b.n	8005a18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	ee07 3a90 	vmov	s15, r3
 80059da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059de:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80059e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059e6:	4b37      	ldr	r3, [pc, #220]	; (8005ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ee:	ee07 3a90 	vmov	s15, r3
 80059f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80059fa:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005acc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a16:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005a18:	4b2a      	ldr	r3, [pc, #168]	; (8005ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1c:	0a5b      	lsrs	r3, r3, #9
 8005a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a22:	ee07 3a90 	vmov	s15, r3
 8005a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a32:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a3e:	ee17 2a90 	vmov	r2, s15
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005a46:	4b1f      	ldr	r3, [pc, #124]	; (8005ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4a:	0c1b      	lsrs	r3, r3, #16
 8005a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a50:	ee07 3a90 	vmov	s15, r3
 8005a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a60:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a6c:	ee17 2a90 	vmov	r2, s15
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005a74:	4b13      	ldr	r3, [pc, #76]	; (8005ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a78:	0e1b      	lsrs	r3, r3, #24
 8005a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a7e:	ee07 3a90 	vmov	s15, r3
 8005a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a9a:	ee17 2a90 	vmov	r2, s15
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005aa2:	e008      	b.n	8005ab6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	609a      	str	r2, [r3, #8]
}
 8005ab6:	bf00      	nop
 8005ab8:	3724      	adds	r7, #36	; 0x24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
 8005ac2:	bf00      	nop
 8005ac4:	58024400 	.word	0x58024400
 8005ac8:	03d09000 	.word	0x03d09000
 8005acc:	46000000 	.word	0x46000000
 8005ad0:	4c742400 	.word	0x4c742400
 8005ad4:	4a742400 	.word	0x4a742400
 8005ad8:	4bbebc20 	.word	0x4bbebc20

08005adc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b089      	sub	sp, #36	; 0x24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ae4:	4ba0      	ldr	r3, [pc, #640]	; (8005d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae8:	f003 0303 	and.w	r3, r3, #3
 8005aec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005aee:	4b9e      	ldr	r3, [pc, #632]	; (8005d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af2:	091b      	lsrs	r3, r3, #4
 8005af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005af8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005afa:	4b9b      	ldr	r3, [pc, #620]	; (8005d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005b04:	4b98      	ldr	r3, [pc, #608]	; (8005d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b08:	08db      	lsrs	r3, r3, #3
 8005b0a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	fb02 f303 	mul.w	r3, r2, r3
 8005b14:	ee07 3a90 	vmov	s15, r3
 8005b18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b1c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 8111 	beq.w	8005d4a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	f000 8083 	beq.w	8005c36 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	f200 80a1 	bhi.w	8005c7a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d003      	beq.n	8005b46 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005b3e:	69bb      	ldr	r3, [r7, #24]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d056      	beq.n	8005bf2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005b44:	e099      	b.n	8005c7a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b46:	4b88      	ldr	r3, [pc, #544]	; (8005d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0320 	and.w	r3, r3, #32
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d02d      	beq.n	8005bae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b52:	4b85      	ldr	r3, [pc, #532]	; (8005d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	08db      	lsrs	r3, r3, #3
 8005b58:	f003 0303 	and.w	r3, r3, #3
 8005b5c:	4a83      	ldr	r2, [pc, #524]	; (8005d6c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b62:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	ee07 3a90 	vmov	s15, r3
 8005b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	ee07 3a90 	vmov	s15, r3
 8005b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b7c:	4b7a      	ldr	r3, [pc, #488]	; (8005d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b84:	ee07 3a90 	vmov	s15, r3
 8005b88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b8c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b90:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005d70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005b94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ba0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ba8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005bac:	e087      	b.n	8005cbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	ee07 3a90 	vmov	s15, r3
 8005bb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bb8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005d74 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005bbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bc0:	4b69      	ldr	r3, [pc, #420]	; (8005d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bc8:	ee07 3a90 	vmov	s15, r3
 8005bcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bd0:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bd4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005d70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005bd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005be0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005be4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bf0:	e065      	b.n	8005cbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	ee07 3a90 	vmov	s15, r3
 8005bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bfc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005d78 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005c00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c04:	4b58      	ldr	r3, [pc, #352]	; (8005d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c0c:	ee07 3a90 	vmov	s15, r3
 8005c10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c14:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c18:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005d70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005c1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c34:	e043      	b.n	8005cbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	ee07 3a90 	vmov	s15, r3
 8005c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c40:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005d7c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005c44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c48:	4b47      	ldr	r3, [pc, #284]	; (8005d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c50:	ee07 3a90 	vmov	s15, r3
 8005c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c58:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c5c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005d70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005c60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c78:	e021      	b.n	8005cbe <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	ee07 3a90 	vmov	s15, r3
 8005c80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c84:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005d74 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005c88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c8c:	4b36      	ldr	r3, [pc, #216]	; (8005d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c94:	ee07 3a90 	vmov	s15, r3
 8005c98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ca0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005d70 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005ca4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ca8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cbc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005cbe:	4b2a      	ldr	r3, [pc, #168]	; (8005d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cc2:	0a5b      	lsrs	r3, r3, #9
 8005cc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cc8:	ee07 3a90 	vmov	s15, r3
 8005ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005cd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005cd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ce4:	ee17 2a90 	vmov	r2, s15
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005cec:	4b1e      	ldr	r3, [pc, #120]	; (8005d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf0:	0c1b      	lsrs	r3, r3, #16
 8005cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cf6:	ee07 3a90 	vmov	s15, r3
 8005cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d06:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d12:	ee17 2a90 	vmov	r2, s15
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005d1a:	4b13      	ldr	r3, [pc, #76]	; (8005d68 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1e:	0e1b      	lsrs	r3, r3, #24
 8005d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d24:	ee07 3a90 	vmov	s15, r3
 8005d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d34:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d40:	ee17 2a90 	vmov	r2, s15
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005d48:	e008      	b.n	8005d5c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	609a      	str	r2, [r3, #8]
}
 8005d5c:	bf00      	nop
 8005d5e:	3724      	adds	r7, #36	; 0x24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	58024400 	.word	0x58024400
 8005d6c:	03d09000 	.word	0x03d09000
 8005d70:	46000000 	.word	0x46000000
 8005d74:	4c742400 	.word	0x4c742400
 8005d78:	4a742400 	.word	0x4a742400
 8005d7c:	4bbebc20 	.word	0x4bbebc20

08005d80 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d8e:	4b53      	ldr	r3, [pc, #332]	; (8005edc <RCCEx_PLL2_Config+0x15c>)
 8005d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d92:	f003 0303 	and.w	r3, r3, #3
 8005d96:	2b03      	cmp	r3, #3
 8005d98:	d101      	bne.n	8005d9e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e099      	b.n	8005ed2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005d9e:	4b4f      	ldr	r3, [pc, #316]	; (8005edc <RCCEx_PLL2_Config+0x15c>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a4e      	ldr	r2, [pc, #312]	; (8005edc <RCCEx_PLL2_Config+0x15c>)
 8005da4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005da8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005daa:	f7fb fd77 	bl	800189c <HAL_GetTick>
 8005dae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005db0:	e008      	b.n	8005dc4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005db2:	f7fb fd73 	bl	800189c <HAL_GetTick>
 8005db6:	4602      	mov	r2, r0
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	1ad3      	subs	r3, r2, r3
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d901      	bls.n	8005dc4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e086      	b.n	8005ed2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005dc4:	4b45      	ldr	r3, [pc, #276]	; (8005edc <RCCEx_PLL2_Config+0x15c>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1f0      	bne.n	8005db2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005dd0:	4b42      	ldr	r3, [pc, #264]	; (8005edc <RCCEx_PLL2_Config+0x15c>)
 8005dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	031b      	lsls	r3, r3, #12
 8005dde:	493f      	ldr	r1, [pc, #252]	; (8005edc <RCCEx_PLL2_Config+0x15c>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	628b      	str	r3, [r1, #40]	; 0x28
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	3b01      	subs	r3, #1
 8005dea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	3b01      	subs	r3, #1
 8005df4:	025b      	lsls	r3, r3, #9
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68db      	ldr	r3, [r3, #12]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	041b      	lsls	r3, r3, #16
 8005e02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e06:	431a      	orrs	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	061b      	lsls	r3, r3, #24
 8005e10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e14:	4931      	ldr	r1, [pc, #196]	; (8005edc <RCCEx_PLL2_Config+0x15c>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005e1a:	4b30      	ldr	r3, [pc, #192]	; (8005edc <RCCEx_PLL2_Config+0x15c>)
 8005e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	492d      	ldr	r1, [pc, #180]	; (8005edc <RCCEx_PLL2_Config+0x15c>)
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005e2c:	4b2b      	ldr	r3, [pc, #172]	; (8005edc <RCCEx_PLL2_Config+0x15c>)
 8005e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e30:	f023 0220 	bic.w	r2, r3, #32
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	4928      	ldr	r1, [pc, #160]	; (8005edc <RCCEx_PLL2_Config+0x15c>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005e3e:	4b27      	ldr	r3, [pc, #156]	; (8005edc <RCCEx_PLL2_Config+0x15c>)
 8005e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e42:	4a26      	ldr	r2, [pc, #152]	; (8005edc <RCCEx_PLL2_Config+0x15c>)
 8005e44:	f023 0310 	bic.w	r3, r3, #16
 8005e48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005e4a:	4b24      	ldr	r3, [pc, #144]	; (8005edc <RCCEx_PLL2_Config+0x15c>)
 8005e4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e4e:	4b24      	ldr	r3, [pc, #144]	; (8005ee0 <RCCEx_PLL2_Config+0x160>)
 8005e50:	4013      	ands	r3, r2
 8005e52:	687a      	ldr	r2, [r7, #4]
 8005e54:	69d2      	ldr	r2, [r2, #28]
 8005e56:	00d2      	lsls	r2, r2, #3
 8005e58:	4920      	ldr	r1, [pc, #128]	; (8005edc <RCCEx_PLL2_Config+0x15c>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005e5e:	4b1f      	ldr	r3, [pc, #124]	; (8005edc <RCCEx_PLL2_Config+0x15c>)
 8005e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e62:	4a1e      	ldr	r2, [pc, #120]	; (8005edc <RCCEx_PLL2_Config+0x15c>)
 8005e64:	f043 0310 	orr.w	r3, r3, #16
 8005e68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d106      	bne.n	8005e7e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005e70:	4b1a      	ldr	r3, [pc, #104]	; (8005edc <RCCEx_PLL2_Config+0x15c>)
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	4a19      	ldr	r2, [pc, #100]	; (8005edc <RCCEx_PLL2_Config+0x15c>)
 8005e76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e7a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e7c:	e00f      	b.n	8005e9e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d106      	bne.n	8005e92 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005e84:	4b15      	ldr	r3, [pc, #84]	; (8005edc <RCCEx_PLL2_Config+0x15c>)
 8005e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e88:	4a14      	ldr	r2, [pc, #80]	; (8005edc <RCCEx_PLL2_Config+0x15c>)
 8005e8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005e90:	e005      	b.n	8005e9e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005e92:	4b12      	ldr	r3, [pc, #72]	; (8005edc <RCCEx_PLL2_Config+0x15c>)
 8005e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e96:	4a11      	ldr	r2, [pc, #68]	; (8005edc <RCCEx_PLL2_Config+0x15c>)
 8005e98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005e9c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005e9e:	4b0f      	ldr	r3, [pc, #60]	; (8005edc <RCCEx_PLL2_Config+0x15c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a0e      	ldr	r2, [pc, #56]	; (8005edc <RCCEx_PLL2_Config+0x15c>)
 8005ea4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005ea8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005eaa:	f7fb fcf7 	bl	800189c <HAL_GetTick>
 8005eae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005eb0:	e008      	b.n	8005ec4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005eb2:	f7fb fcf3 	bl	800189c <HAL_GetTick>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	2b02      	cmp	r3, #2
 8005ebe:	d901      	bls.n	8005ec4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e006      	b.n	8005ed2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ec4:	4b05      	ldr	r3, [pc, #20]	; (8005edc <RCCEx_PLL2_Config+0x15c>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d0f0      	beq.n	8005eb2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3710      	adds	r7, #16
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	58024400 	.word	0x58024400
 8005ee0:	ffff0007 	.word	0xffff0007

08005ee4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ef2:	4b53      	ldr	r3, [pc, #332]	; (8006040 <RCCEx_PLL3_Config+0x15c>)
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef6:	f003 0303 	and.w	r3, r3, #3
 8005efa:	2b03      	cmp	r3, #3
 8005efc:	d101      	bne.n	8005f02 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e099      	b.n	8006036 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005f02:	4b4f      	ldr	r3, [pc, #316]	; (8006040 <RCCEx_PLL3_Config+0x15c>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a4e      	ldr	r2, [pc, #312]	; (8006040 <RCCEx_PLL3_Config+0x15c>)
 8005f08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f0e:	f7fb fcc5 	bl	800189c <HAL_GetTick>
 8005f12:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f14:	e008      	b.n	8005f28 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005f16:	f7fb fcc1 	bl	800189c <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d901      	bls.n	8005f28 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e086      	b.n	8006036 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005f28:	4b45      	ldr	r3, [pc, #276]	; (8006040 <RCCEx_PLL3_Config+0x15c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1f0      	bne.n	8005f16 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005f34:	4b42      	ldr	r3, [pc, #264]	; (8006040 <RCCEx_PLL3_Config+0x15c>)
 8005f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f38:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	051b      	lsls	r3, r3, #20
 8005f42:	493f      	ldr	r1, [pc, #252]	; (8006040 <RCCEx_PLL3_Config+0x15c>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	628b      	str	r3, [r1, #40]	; 0x28
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	3b01      	subs	r3, #1
 8005f58:	025b      	lsls	r3, r3, #9
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	041b      	lsls	r3, r3, #16
 8005f66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f6a:	431a      	orrs	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	3b01      	subs	r3, #1
 8005f72:	061b      	lsls	r3, r3, #24
 8005f74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f78:	4931      	ldr	r1, [pc, #196]	; (8006040 <RCCEx_PLL3_Config+0x15c>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005f7e:	4b30      	ldr	r3, [pc, #192]	; (8006040 <RCCEx_PLL3_Config+0x15c>)
 8005f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	492d      	ldr	r1, [pc, #180]	; (8006040 <RCCEx_PLL3_Config+0x15c>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005f90:	4b2b      	ldr	r3, [pc, #172]	; (8006040 <RCCEx_PLL3_Config+0x15c>)
 8005f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f94:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	4928      	ldr	r1, [pc, #160]	; (8006040 <RCCEx_PLL3_Config+0x15c>)
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005fa2:	4b27      	ldr	r3, [pc, #156]	; (8006040 <RCCEx_PLL3_Config+0x15c>)
 8005fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa6:	4a26      	ldr	r2, [pc, #152]	; (8006040 <RCCEx_PLL3_Config+0x15c>)
 8005fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005fae:	4b24      	ldr	r3, [pc, #144]	; (8006040 <RCCEx_PLL3_Config+0x15c>)
 8005fb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fb2:	4b24      	ldr	r3, [pc, #144]	; (8006044 <RCCEx_PLL3_Config+0x160>)
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	69d2      	ldr	r2, [r2, #28]
 8005fba:	00d2      	lsls	r2, r2, #3
 8005fbc:	4920      	ldr	r1, [pc, #128]	; (8006040 <RCCEx_PLL3_Config+0x15c>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005fc2:	4b1f      	ldr	r3, [pc, #124]	; (8006040 <RCCEx_PLL3_Config+0x15c>)
 8005fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc6:	4a1e      	ldr	r2, [pc, #120]	; (8006040 <RCCEx_PLL3_Config+0x15c>)
 8005fc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fcc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d106      	bne.n	8005fe2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005fd4:	4b1a      	ldr	r3, [pc, #104]	; (8006040 <RCCEx_PLL3_Config+0x15c>)
 8005fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd8:	4a19      	ldr	r2, [pc, #100]	; (8006040 <RCCEx_PLL3_Config+0x15c>)
 8005fda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005fde:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fe0:	e00f      	b.n	8006002 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d106      	bne.n	8005ff6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005fe8:	4b15      	ldr	r3, [pc, #84]	; (8006040 <RCCEx_PLL3_Config+0x15c>)
 8005fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fec:	4a14      	ldr	r2, [pc, #80]	; (8006040 <RCCEx_PLL3_Config+0x15c>)
 8005fee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ff2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005ff4:	e005      	b.n	8006002 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005ff6:	4b12      	ldr	r3, [pc, #72]	; (8006040 <RCCEx_PLL3_Config+0x15c>)
 8005ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffa:	4a11      	ldr	r2, [pc, #68]	; (8006040 <RCCEx_PLL3_Config+0x15c>)
 8005ffc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006000:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006002:	4b0f      	ldr	r3, [pc, #60]	; (8006040 <RCCEx_PLL3_Config+0x15c>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4a0e      	ldr	r2, [pc, #56]	; (8006040 <RCCEx_PLL3_Config+0x15c>)
 8006008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800600c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800600e:	f7fb fc45 	bl	800189c <HAL_GetTick>
 8006012:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006014:	e008      	b.n	8006028 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006016:	f7fb fc41 	bl	800189c <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b02      	cmp	r3, #2
 8006022:	d901      	bls.n	8006028 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e006      	b.n	8006036 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006028:	4b05      	ldr	r3, [pc, #20]	; (8006040 <RCCEx_PLL3_Config+0x15c>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006030:	2b00      	cmp	r3, #0
 8006032:	d0f0      	beq.n	8006016 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006034:	7bfb      	ldrb	r3, [r7, #15]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	58024400 	.word	0x58024400
 8006044:	ffff0007 	.word	0xffff0007

08006048 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b08a      	sub	sp, #40	; 0x28
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e075      	b.n	8006146 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d105      	bne.n	8006072 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7fb f8ed 	bl	800124c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2204      	movs	r2, #4
 8006076:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f868 	bl	8006150 <HAL_SD_InitCard>
 8006080:	4603      	mov	r3, r0
 8006082:	2b00      	cmp	r3, #0
 8006084:	d001      	beq.n	800608a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e05d      	b.n	8006146 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800608a:	f107 0308 	add.w	r3, r7, #8
 800608e:	4619      	mov	r1, r3
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 fdcf 	bl	8006c34 <HAL_SD_GetCardStatus>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d001      	beq.n	80060a0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e052      	b.n	8006146 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80060a0:	7e3b      	ldrb	r3, [r7, #24]
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80060a6:	7e7b      	ldrb	r3, [r7, #25]
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d10a      	bne.n	80060ca <HAL_SD_Init+0x82>
 80060b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d102      	bne.n	80060c0 <HAL_SD_Init+0x78>
 80060ba:	6a3b      	ldr	r3, [r7, #32]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d004      	beq.n	80060ca <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060c6:	659a      	str	r2, [r3, #88]	; 0x58
 80060c8:	e00b      	b.n	80060e2 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d104      	bne.n	80060dc <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80060d8:	659a      	str	r2, [r3, #88]	; 0x58
 80060da:	e002      	b.n	80060e2 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	4619      	mov	r1, r3
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fe61 	bl	8006db0 <HAL_SD_ConfigWideBusOperation>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d001      	beq.n	80060f8 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e026      	b.n	8006146 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 80060f8:	f7fb fbd0 	bl	800189c <HAL_GetTick>
 80060fc:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80060fe:	e011      	b.n	8006124 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006100:	f7fb fbcc 	bl	800189c <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800610e:	d109      	bne.n	8006124 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006116:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e010      	b.n	8006146 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 ff55 	bl	8006fd4 <HAL_SD_GetCardState>
 800612a:	4603      	mov	r3, r0
 800612c:	2b04      	cmp	r3, #4
 800612e:	d1e7      	bne.n	8006100 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3728      	adds	r7, #40	; 0x28
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
	...

08006150 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006150:	b590      	push	{r4, r7, lr}
 8006152:	b08d      	sub	sp, #52	; 0x34
 8006154:	af02      	add	r7, sp, #8
 8006156:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006158:	2300      	movs	r3, #0
 800615a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800615c:	2300      	movs	r3, #0
 800615e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006160:	2300      	movs	r3, #0
 8006162:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006164:	2300      	movs	r3, #0
 8006166:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006168:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800616c:	f04f 0100 	mov.w	r1, #0
 8006170:	f7fe fc76 	bl	8004a60 <HAL_RCCEx_GetPeriphCLKFreq>
 8006174:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	2b00      	cmp	r3, #0
 800617a:	d109      	bne.n	8006190 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800618a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	e070      	b.n	8006272 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	0a1b      	lsrs	r3, r3, #8
 8006194:	4a39      	ldr	r2, [pc, #228]	; (800627c <HAL_SD_InitCard+0x12c>)
 8006196:	fba2 2303 	umull	r2, r3, r2, r3
 800619a:	091b      	lsrs	r3, r3, #4
 800619c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681c      	ldr	r4, [r3, #0]
 80061a2:	466a      	mov	r2, sp
 80061a4:	f107 0318 	add.w	r3, r7, #24
 80061a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80061ac:	e882 0003 	stmia.w	r2, {r0, r1}
 80061b0:	f107 030c 	add.w	r3, r7, #12
 80061b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061b6:	4620      	mov	r0, r4
 80061b8:	f003 f890 	bl	80092dc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f003 f8d3 	bl	800936c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d005      	beq.n	80061d8 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d6:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 80061d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d007      	beq.n	80061ee <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 80061de:	4a28      	ldr	r2, [pc, #160]	; (8006280 <HAL_SD_InitCard+0x130>)
 80061e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e6:	3301      	adds	r3, #1
 80061e8:	4618      	mov	r0, r3
 80061ea:	f7fb fb63 	bl	80018b4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f000 ffde 	bl	80071b0 <SD_PowerON>
 80061f4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00b      	beq.n	8006214 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	431a      	orrs	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e02e      	b.n	8006272 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fefd 	bl	8007014 <SD_InitCard>
 800621a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800621c:	6a3b      	ldr	r3, [r7, #32]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00b      	beq.n	800623a <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2201      	movs	r2, #1
 8006226:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	431a      	orrs	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e01b      	b.n	8006272 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006242:	4618      	mov	r0, r3
 8006244:	f003 f938 	bl	80094b8 <SDMMC_CmdBlockLength>
 8006248:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800624a:	6a3b      	ldr	r3, [r7, #32]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00f      	beq.n	8006270 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a0b      	ldr	r2, [pc, #44]	; (8006284 <HAL_SD_InitCard+0x134>)
 8006256:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	431a      	orrs	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e000      	b.n	8006272 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	372c      	adds	r7, #44	; 0x2c
 8006276:	46bd      	mov	sp, r7
 8006278:	bd90      	pop	{r4, r7, pc}
 800627a:	bf00      	nop
 800627c:	014f8b59 	.word	0x014f8b59
 8006280:	00012110 	.word	0x00012110
 8006284:	1fe00fff 	.word	0x1fe00fff

08006288 <HAL_SD_DeInit>:
  * @brief  De-Initializes the SD card.
  * @param  hsd: Pointer to SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_DeInit(SD_HandleTypeDef *hsd)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if (hsd == NULL)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d101      	bne.n	800629a <HAL_SD_DeInit+0x12>
  {
    return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e011      	b.n	80062be <HAL_SD_DeInit+0x36>
  }

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));

  hsd->State = HAL_SD_STATE_BUSY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2203      	movs	r2, #3
 800629e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }
#endif /* USE_SD_TRANSCEIVER   */

  /* Set SD power state to off */
  SD_PowerOFF(hsd);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f001 f812 	bl	80072cc <SD_PowerOFF>

  /* DeInit the low level hardware */
  hsd->MspDeInitCallback(hsd);
#else
  /* De-Initialize the MSP layer */
  HAL_SD_MspDeInit(hsd);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7fb f865 	bl	8001378 <HAL_SD_MspDeInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	635a      	str	r2, [r3, #52]	; 0x34
  hsd->State = HAL_SD_STATE_RESET;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
	...

080062c8 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b08c      	sub	sp, #48	; 0x30
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	60f8      	str	r0, [r7, #12]
 80062d0:	60b9      	str	r1, [r7, #8]
 80062d2:	607a      	str	r2, [r7, #4]
 80062d4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d107      	bne.n	80062f0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e08d      	b.n	800640c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80062f6:	b2db      	uxtb	r3, r3
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	f040 8086 	bne.w	800640a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2200      	movs	r2, #0
 8006302:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006304:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	441a      	add	r2, r3
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800630e:	429a      	cmp	r2, r3
 8006310:	d907      	bls.n	8006322 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006316:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e074      	b.n	800640c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2203      	movs	r2, #3
 8006326:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2200      	movs	r2, #0
 8006330:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	025a      	lsls	r2, r3, #9
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006344:	2b01      	cmp	r3, #1
 8006346:	d002      	beq.n	800634e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8006348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634a:	025b      	lsls	r3, r3, #9
 800634c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800634e:	f04f 33ff 	mov.w	r3, #4294967295
 8006352:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	025b      	lsls	r3, r3, #9
 8006358:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800635a:	2390      	movs	r3, #144	; 0x90
 800635c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800635e:	2302      	movs	r3, #2
 8006360:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006362:	2300      	movs	r3, #0
 8006364:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006366:	2300      	movs	r3, #0
 8006368:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f107 0210 	add.w	r2, r7, #16
 8006372:	4611      	mov	r1, r2
 8006374:	4618      	mov	r0, r3
 8006376:	f003 f873 	bl	8009460 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68da      	ldr	r2, [r3, #12]
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006388:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2201      	movs	r2, #1
 8006398:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d90a      	bls.n	80063b6 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2282      	movs	r2, #130	; 0x82
 80063a4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063ac:	4618      	mov	r0, r3
 80063ae:	f003 f8c9 	bl	8009544 <SDMMC_CmdReadMultiBlock>
 80063b2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80063b4:	e009      	b.n	80063ca <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2281      	movs	r2, #129	; 0x81
 80063ba:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80063c2:	4618      	mov	r0, r3
 80063c4:	f003 f89b 	bl	80094fe <SDMMC_CmdReadSingleBlock>
 80063c8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80063ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d012      	beq.n	80063f6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a0f      	ldr	r2, [pc, #60]	; (8006414 <HAL_SD_ReadBlocks_DMA+0x14c>)
 80063d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063de:	431a      	orrs	r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e00a      	b.n	800640c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006404:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	e000      	b.n	800640c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800640a:	2302      	movs	r3, #2
  }
}
 800640c:	4618      	mov	r0, r3
 800640e:	3730      	adds	r7, #48	; 0x30
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	1fe00fff 	.word	0x1fe00fff

08006418 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b08c      	sub	sp, #48	; 0x30
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
 8006424:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d107      	bne.n	8006440 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006434:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e08d      	b.n	800655c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b01      	cmp	r3, #1
 800644a:	f040 8086 	bne.w	800655a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	441a      	add	r2, r3
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800645e:	429a      	cmp	r2, r3
 8006460:	d907      	bls.n	8006472 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006466:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e074      	b.n	800655c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2203      	movs	r2, #3
 8006476:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2200      	movs	r2, #0
 8006480:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	68ba      	ldr	r2, [r7, #8]
 8006486:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	025a      	lsls	r2, r3, #9
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006494:	2b01      	cmp	r3, #1
 8006496:	d002      	beq.n	800649e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8006498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649a:	025b      	lsls	r3, r3, #9
 800649c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800649e:	f04f 33ff 	mov.w	r3, #4294967295
 80064a2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	025b      	lsls	r3, r3, #9
 80064a8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80064aa:	2390      	movs	r3, #144	; 0x90
 80064ac:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80064ae:	2300      	movs	r3, #0
 80064b0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80064b6:	2300      	movs	r3, #0
 80064b8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f107 0210 	add.w	r2, r7, #16
 80064c2:	4611      	mov	r1, r2
 80064c4:	4618      	mov	r0, r3
 80064c6:	f002 ffcb 	bl	8009460 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68da      	ldr	r2, [r3, #12]
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064d8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	2201      	movs	r2, #1
 80064e8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d90a      	bls.n	8006506 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	22a0      	movs	r2, #160	; 0xa0
 80064f4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064fc:	4618      	mov	r0, r3
 80064fe:	f003 f867 	bl	80095d0 <SDMMC_CmdWriteMultiBlock>
 8006502:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006504:	e009      	b.n	800651a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2290      	movs	r2, #144	; 0x90
 800650a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006512:	4618      	mov	r0, r3
 8006514:	f003 f839 	bl	800958a <SDMMC_CmdWriteSingleBlock>
 8006518:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800651a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800651c:	2b00      	cmp	r3, #0
 800651e:	d012      	beq.n	8006546 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a0f      	ldr	r2, [pc, #60]	; (8006564 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8006526:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800652c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652e:	431a      	orrs	r2, r3
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e00a      	b.n	800655c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8006554:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006556:	2300      	movs	r3, #0
 8006558:	e000      	b.n	800655c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800655a:	2302      	movs	r3, #2
  }
}
 800655c:	4618      	mov	r0, r3
 800655e:	3730      	adds	r7, #48	; 0x30
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	1fe00fff 	.word	0x1fe00fff

08006568 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800657c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d008      	beq.n	8006596 <HAL_SD_IRQHandler+0x2e>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f003 0308 	and.w	r3, r3, #8
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f001 f908 	bl	80077a4 <SD_Read_IT>
 8006594:	e19a      	b.n	80068cc <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800659c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f000 80ac 	beq.w	80066fe <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065ae:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	4b59      	ldr	r3, [pc, #356]	; (8006720 <HAL_SD_IRQHandler+0x1b8>)
 80065bc:	400b      	ands	r3, r1
 80065be:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80065ce:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	68da      	ldr	r2, [r3, #12]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065de:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f003 0308 	and.w	r3, r3, #8
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d038      	beq.n	800665c <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f003 0302 	and.w	r3, r3, #2
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d104      	bne.n	80065fe <HAL_SD_IRQHandler+0x96>
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f003 0320 	and.w	r3, r3, #32
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d011      	beq.n	8006622 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4618      	mov	r0, r3
 8006604:	f003 f808 	bl	8009618 <SDMMC_CmdStopTransfer>
 8006608:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d008      	beq.n	8006622 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	431a      	orrs	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f000 f95b 	bl	80068d8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a3f      	ldr	r2, [pc, #252]	; (8006724 <HAL_SD_IRQHandler+0x1bc>)
 8006628:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d104      	bne.n	800664c <HAL_SD_IRQHandler+0xe4>
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f003 fccb 	bl	8009fe8 <HAL_SD_RxCpltCallback>
 8006652:	e13b      	b.n	80068cc <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f003 fcb9 	bl	8009fcc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800665a:	e137      	b.n	80068cc <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006662:	2b00      	cmp	r3, #0
 8006664:	f000 8132 	beq.w	80068cc <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	2200      	movs	r2, #0
 800666e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2200      	movs	r2, #0
 8006676:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2200      	movs	r2, #0
 800667e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d104      	bne.n	8006694 <HAL_SD_IRQHandler+0x12c>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f003 0320 	and.w	r3, r3, #32
 8006690:	2b00      	cmp	r3, #0
 8006692:	d011      	beq.n	80066b8 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4618      	mov	r0, r3
 800669a:	f002 ffbd 	bl	8009618 <SDMMC_CmdStopTransfer>
 800669e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d008      	beq.n	80066b8 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	431a      	orrs	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f910 	bl	80068d8 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f003 0310 	and.w	r3, r3, #16
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d104      	bne.n	80066da <HAL_SD_IRQHandler+0x172>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f003 0320 	and.w	r3, r3, #32
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d002      	beq.n	80066e0 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	f003 fc76 	bl	8009fcc <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d105      	bne.n	80066f6 <HAL_SD_IRQHandler+0x18e>
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f003 0302 	and.w	r3, r3, #2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 80eb 	beq.w	80068cc <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f003 fc76 	bl	8009fe8 <HAL_SD_RxCpltCallback>
}
 80066fc:	e0e6      	b.n	80068cc <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006704:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00d      	beq.n	8006728 <HAL_SD_IRQHandler+0x1c0>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f003 0308 	and.w	r3, r3, #8
 8006712:	2b00      	cmp	r3, #0
 8006714:	d008      	beq.n	8006728 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f001 f88a 	bl	8007830 <SD_Write_IT>
 800671c:	e0d6      	b.n	80068cc <HAL_SD_IRQHandler+0x364>
 800671e:	bf00      	nop
 8006720:	ffff3ec5 	.word	0xffff3ec5
 8006724:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800672e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 809d 	beq.w	8006872 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800673e:	f003 0302 	and.w	r3, r3, #2
 8006742:	2b00      	cmp	r3, #0
 8006744:	d005      	beq.n	8006752 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800674a:	f043 0202 	orr.w	r2, r3, #2
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006758:	f003 0308 	and.w	r3, r3, #8
 800675c:	2b00      	cmp	r3, #0
 800675e:	d005      	beq.n	800676c <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006764:	f043 0208 	orr.w	r2, r3, #8
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006772:	f003 0320 	and.w	r3, r3, #32
 8006776:	2b00      	cmp	r3, #0
 8006778:	d005      	beq.n	8006786 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800677e:	f043 0220 	orr.w	r2, r3, #32
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800678c:	f003 0310 	and.w	r3, r3, #16
 8006790:	2b00      	cmp	r3, #0
 8006792:	d005      	beq.n	80067a0 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006798:	f043 0210 	orr.w	r2, r3, #16
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a4b      	ldr	r2, [pc, #300]	; (80068d4 <HAL_SD_IRQHandler+0x36c>)
 80067a6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80067b6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68da      	ldr	r2, [r3, #12]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067c6:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68da      	ldr	r2, [r3, #12]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067e6:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f002 ff13 	bl	8009618 <SDMMC_CmdStopTransfer>
 80067f2:	4602      	mov	r2, r0
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067f8:	431a      	orrs	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68da      	ldr	r2, [r3, #12]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800680c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006816:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f003 0308 	and.w	r3, r3, #8
 800681e:	2b00      	cmp	r3, #0
 8006820:	d00a      	beq.n	8006838 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 f851 	bl	80068d8 <HAL_SD_ErrorCallback>
}
 8006836:	e049      	b.n	80068cc <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800683e:	2b00      	cmp	r3, #0
 8006840:	d044      	beq.n	80068cc <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006846:	2b00      	cmp	r3, #0
 8006848:	d040      	beq.n	80068cc <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006858:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2200      	movs	r2, #0
 8006860:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f834 	bl	80068d8 <HAL_SD_ErrorCallback>
}
 8006870:	e02c      	b.n	80068cc <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d025      	beq.n	80068cc <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006888:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006890:	f003 0304 	and.w	r3, r3, #4
 8006894:	2b00      	cmp	r3, #0
 8006896:	d10c      	bne.n	80068b2 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f003 0320 	and.w	r3, r3, #32
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d003      	beq.n	80068aa <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f001 f82c 	bl	8007900 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 80068a8:	e010      	b.n	80068cc <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f001 f814 	bl	80078d8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 80068b0:	e00c      	b.n	80068cc <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f003 0320 	and.w	r3, r3, #32
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d003      	beq.n	80068c4 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f001 f815 	bl	80078ec <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 80068c2:	e003      	b.n	80068cc <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f000 fffd 	bl	80078c4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80068ca:	e7ff      	b.n	80068cc <HAL_SD_IRQHandler+0x364>
 80068cc:	bf00      	nop
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	18000f3a 	.word	0x18000f3a

080068d8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068fa:	0f9b      	lsrs	r3, r3, #30
 80068fc:	b2da      	uxtb	r2, r3
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006906:	0e9b      	lsrs	r3, r3, #26
 8006908:	b2db      	uxtb	r3, r3
 800690a:	f003 030f 	and.w	r3, r3, #15
 800690e:	b2da      	uxtb	r2, r3
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006918:	0e1b      	lsrs	r3, r3, #24
 800691a:	b2db      	uxtb	r3, r3
 800691c:	f003 0303 	and.w	r3, r3, #3
 8006920:	b2da      	uxtb	r2, r3
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800692a:	0c1b      	lsrs	r3, r3, #16
 800692c:	b2da      	uxtb	r2, r3
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006936:	0a1b      	lsrs	r3, r3, #8
 8006938:	b2da      	uxtb	r2, r3
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006942:	b2da      	uxtb	r2, r3
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800694c:	0d1b      	lsrs	r3, r3, #20
 800694e:	b29a      	uxth	r2, r3
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006958:	0c1b      	lsrs	r3, r3, #16
 800695a:	b2db      	uxtb	r3, r3
 800695c:	f003 030f 	and.w	r3, r3, #15
 8006960:	b2da      	uxtb	r2, r3
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800696a:	0bdb      	lsrs	r3, r3, #15
 800696c:	b2db      	uxtb	r3, r3
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	b2da      	uxtb	r2, r3
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800697c:	0b9b      	lsrs	r3, r3, #14
 800697e:	b2db      	uxtb	r3, r3
 8006980:	f003 0301 	and.w	r3, r3, #1
 8006984:	b2da      	uxtb	r2, r3
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800698e:	0b5b      	lsrs	r3, r3, #13
 8006990:	b2db      	uxtb	r3, r3
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	b2da      	uxtb	r2, r3
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069a0:	0b1b      	lsrs	r3, r3, #12
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	f003 0301 	and.w	r3, r3, #1
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2200      	movs	r2, #0
 80069b2:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d163      	bne.n	8006a84 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069c0:	009a      	lsls	r2, r3, #2
 80069c2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80069c6:	4013      	ands	r3, r2
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80069cc:	0f92      	lsrs	r2, r2, #30
 80069ce:	431a      	orrs	r2, r3
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069d8:	0edb      	lsrs	r3, r3, #27
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	f003 0307 	and.w	r3, r3, #7
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069ea:	0e1b      	lsrs	r3, r3, #24
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	f003 0307 	and.w	r3, r3, #7
 80069f2:	b2da      	uxtb	r2, r3
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069fc:	0d5b      	lsrs	r3, r3, #21
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	f003 0307 	and.w	r3, r3, #7
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a0e:	0c9b      	lsrs	r3, r3, #18
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	f003 0307 	and.w	r3, r3, #7
 8006a16:	b2da      	uxtb	r2, r3
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a20:	0bdb      	lsrs	r3, r3, #15
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	f003 0307 	and.w	r3, r3, #7
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	1c5a      	adds	r2, r3, #1
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	7e1b      	ldrb	r3, [r3, #24]
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	f003 0307 	and.w	r3, r3, #7
 8006a42:	3302      	adds	r3, #2
 8006a44:	2201      	movs	r2, #1
 8006a46:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006a4e:	fb03 f202 	mul.w	r2, r3, r2
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	7a1b      	ldrb	r3, [r3, #8]
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	f003 030f 	and.w	r3, r3, #15
 8006a60:	2201      	movs	r2, #1
 8006a62:	409a      	lsls	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006a70:	0a52      	lsrs	r2, r2, #9
 8006a72:	fb03 f202 	mul.w	r2, r3, r2
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a80:	655a      	str	r2, [r3, #84]	; 0x54
 8006a82:	e031      	b.n	8006ae8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d11d      	bne.n	8006ac8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a90:	041b      	lsls	r3, r3, #16
 8006a92:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a9a:	0c1b      	lsrs	r3, r3, #16
 8006a9c:	431a      	orrs	r2, r3
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	029a      	lsls	r2, r3, #10
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006abc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	655a      	str	r2, [r3, #84]	; 0x54
 8006ac6:	e00f      	b.n	8006ae8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a58      	ldr	r2, [pc, #352]	; (8006c30 <HAL_SD_GetCardCSD+0x344>)
 8006ace:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ad4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2201      	movs	r2, #1
 8006ae0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e09d      	b.n	8006c24 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006aec:	0b9b      	lsrs	r3, r3, #14
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	f003 0301 	and.w	r3, r3, #1
 8006af4:	b2da      	uxtb	r2, r3
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006afe:	09db      	lsrs	r3, r3, #7
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b06:	b2da      	uxtb	r2, r3
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b20:	0fdb      	lsrs	r3, r3, #31
 8006b22:	b2da      	uxtb	r2, r3
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b2c:	0f5b      	lsrs	r3, r3, #29
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	f003 0303 	and.w	r3, r3, #3
 8006b34:	b2da      	uxtb	r2, r3
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b3e:	0e9b      	lsrs	r3, r3, #26
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	f003 0307 	and.w	r3, r3, #7
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b50:	0d9b      	lsrs	r3, r3, #22
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	f003 030f 	and.w	r3, r3, #15
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b62:	0d5b      	lsrs	r3, r3, #21
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b7e:	0c1b      	lsrs	r3, r3, #16
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b92:	0bdb      	lsrs	r3, r3, #15
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ba6:	0b9b      	lsrs	r3, r3, #14
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	b2da      	uxtb	r2, r3
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bba:	0b5b      	lsrs	r3, r3, #13
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	f003 0301 	and.w	r3, r3, #1
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bce:	0b1b      	lsrs	r3, r3, #12
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	f003 0301 	and.w	r3, r3, #1
 8006bd6:	b2da      	uxtb	r2, r3
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006be2:	0a9b      	lsrs	r3, r3, #10
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	f003 0303 	and.w	r3, r3, #3
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006bf6:	0a1b      	lsrs	r3, r3, #8
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	f003 0303 	and.w	r3, r3, #3
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c0a:	085b      	lsrs	r3, r3, #1
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr
 8006c30:	1fe00fff 	.word	0x1fe00fff

08006c34 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b094      	sub	sp, #80	; 0x50
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006c3e:	2300      	movs	r3, #0
 8006c40:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	2b03      	cmp	r3, #3
 8006c4e:	d101      	bne.n	8006c54 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e0a7      	b.n	8006da4 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006c54:	f107 0308 	add.w	r3, r7, #8
 8006c58:	4619      	mov	r1, r3
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fb44 	bl	80072e8 <SD_SendSDStatus>
 8006c60:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006c62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d011      	beq.n	8006c8c <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a4f      	ldr	r2, [pc, #316]	; (8006dac <HAL_SD_GetCardStatus+0x178>)
 8006c6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c76:	431a      	orrs	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2201      	movs	r2, #1
 8006c80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006c8a:	e070      	b.n	8006d6e <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	099b      	lsrs	r3, r3, #6
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	f003 0303 	and.w	r3, r3, #3
 8006c96:	b2da      	uxtb	r2, r3
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	095b      	lsrs	r3, r3, #5
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	b2da      	uxtb	r2, r3
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	0a1b      	lsrs	r3, r3, #8
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	0e1b      	lsrs	r3, r3, #24
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	061a      	lsls	r2, r3, #24
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	021b      	lsls	r3, r3, #8
 8006cce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006cd2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	0a1b      	lsrs	r3, r3, #8
 8006cd8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006cdc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	0e1b      	lsrs	r3, r3, #24
 8006ce2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	b2da      	uxtb	r2, r3
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	0a1b      	lsrs	r3, r3, #8
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	0d1b      	lsrs	r3, r3, #20
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	f003 030f 	and.w	r3, r3, #15
 8006d04:	b2da      	uxtb	r2, r3
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	0c1b      	lsrs	r3, r3, #16
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	b29a      	uxth	r2, r3
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	0a9b      	lsrs	r3, r3, #10
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	0a1b      	lsrs	r3, r3, #8
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	f003 0303 	and.w	r3, r3, #3
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	091b      	lsrs	r3, r3, #4
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	f003 030f 	and.w	r3, r3, #15
 8006d50:	b2da      	uxtb	r2, r3
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	f003 030f 	and.w	r3, r3, #15
 8006d5e:	b2da      	uxtb	r2, r3
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	0e1b      	lsrs	r3, r3, #24
 8006d68:	b2da      	uxtb	r2, r3
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d76:	4618      	mov	r0, r3
 8006d78:	f002 fb9e 	bl	80094b8 <SDMMC_CmdBlockLength>
 8006d7c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00d      	beq.n	8006da0 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a08      	ldr	r2, [pc, #32]	; (8006dac <HAL_SD_GetCardStatus+0x178>)
 8006d8a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d90:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8006da0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3750      	adds	r7, #80	; 0x50
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	1fe00fff 	.word	0x1fe00fff

08006db0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006db0:	b590      	push	{r4, r7, lr}
 8006db2:	b08d      	sub	sp, #52	; 0x34
 8006db4:	af02      	add	r7, sp, #8
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2203      	movs	r2, #3
 8006dc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dcc:	2b03      	cmp	r3, #3
 8006dce:	d02e      	beq.n	8006e2e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dd6:	d106      	bne.n	8006de6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ddc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	635a      	str	r2, [r3, #52]	; 0x34
 8006de4:	e029      	b.n	8006e3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dec:	d10a      	bne.n	8006e04 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fb72 	bl	80074d8 <SD_WideBus_Enable>
 8006df4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	431a      	orrs	r2, r3
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	635a      	str	r2, [r3, #52]	; 0x34
 8006e02:	e01a      	b.n	8006e3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d10a      	bne.n	8006e20 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fbaf 	bl	800756e <SD_WideBus_Disable>
 8006e10:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e16:	6a3b      	ldr	r3, [r7, #32]
 8006e18:	431a      	orrs	r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	635a      	str	r2, [r3, #52]	; 0x34
 8006e1e:	e00c      	b.n	8006e3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e24:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	635a      	str	r2, [r3, #52]	; 0x34
 8006e2c:	e005      	b.n	8006e3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e32:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d007      	beq.n	8006e52 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a5f      	ldr	r2, [pc, #380]	; (8006fc4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006e48:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006e50:	e096      	b.n	8006f80 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006e52:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8006e56:	f04f 0100 	mov.w	r1, #0
 8006e5a:	f7fd fe01 	bl	8004a60 <HAL_RCCEx_GetPeriphCLKFreq>
 8006e5e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f000 8083 	beq.w	8006f6e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	695a      	ldr	r2, [r3, #20]
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	4950      	ldr	r1, [pc, #320]	; (8006fc8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006e86:	fba1 1303 	umull	r1, r3, r1, r3
 8006e8a:	0e1b      	lsrs	r3, r3, #24
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d303      	bcc.n	8006e98 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	61bb      	str	r3, [r7, #24]
 8006e96:	e05a      	b.n	8006f4e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ea0:	d103      	bne.n	8006eaa <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	61bb      	str	r3, [r7, #24]
 8006ea8:	e051      	b.n	8006f4e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eb2:	d126      	bne.n	8006f02 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	695b      	ldr	r3, [r3, #20]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10e      	bne.n	8006eda <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	4a43      	ldr	r2, [pc, #268]	; (8006fcc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d906      	bls.n	8006ed2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	4a40      	ldr	r2, [pc, #256]	; (8006fc8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ecc:	0e5b      	lsrs	r3, r3, #25
 8006ece:	61bb      	str	r3, [r7, #24]
 8006ed0:	e03d      	b.n	8006f4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	61bb      	str	r3, [r7, #24]
 8006ed8:	e039      	b.n	8006f4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	005b      	lsls	r3, r3, #1
 8006ee0:	69fa      	ldr	r2, [r7, #28]
 8006ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee6:	4a39      	ldr	r2, [pc, #228]	; (8006fcc <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d906      	bls.n	8006efa <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	4a36      	ldr	r2, [pc, #216]	; (8006fc8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef4:	0e5b      	lsrs	r3, r3, #25
 8006ef6:	61bb      	str	r3, [r7, #24]
 8006ef8:	e029      	b.n	8006f4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	695b      	ldr	r3, [r3, #20]
 8006efe:	61bb      	str	r3, [r7, #24]
 8006f00:	e025      	b.n	8006f4e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	695b      	ldr	r3, [r3, #20]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10e      	bne.n	8006f28 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	4a30      	ldr	r2, [pc, #192]	; (8006fd0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d906      	bls.n	8006f20 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	4a2c      	ldr	r2, [pc, #176]	; (8006fc8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006f16:	fba2 2303 	umull	r2, r3, r2, r3
 8006f1a:	0e1b      	lsrs	r3, r3, #24
 8006f1c:	61bb      	str	r3, [r7, #24]
 8006f1e:	e016      	b.n	8006f4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	61bb      	str	r3, [r7, #24]
 8006f26:	e012      	b.n	8006f4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	695b      	ldr	r3, [r3, #20]
 8006f2c:	005b      	lsls	r3, r3, #1
 8006f2e:	69fa      	ldr	r2, [r7, #28]
 8006f30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f34:	4a26      	ldr	r2, [pc, #152]	; (8006fd0 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d906      	bls.n	8006f48 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006f3a:	69fb      	ldr	r3, [r7, #28]
 8006f3c:	4a22      	ldr	r2, [pc, #136]	; (8006fc8 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006f42:	0e1b      	lsrs	r3, r3, #24
 8006f44:	61bb      	str	r3, [r7, #24]
 8006f46:	e002      	b.n	8006f4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	695b      	ldr	r3, [r3, #20]
 8006f4c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681c      	ldr	r4, [r3, #0]
 8006f52:	466a      	mov	r2, sp
 8006f54:	f107 0314 	add.w	r3, r7, #20
 8006f58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006f5c:	e882 0003 	stmia.w	r2, {r0, r1}
 8006f60:	f107 0308 	add.w	r3, r7, #8
 8006f64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f66:	4620      	mov	r0, r4
 8006f68:	f002 f9b8 	bl	80092dc <SDMMC_Init>
 8006f6c:	e008      	b.n	8006f80 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f72:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f002 fa95 	bl	80094b8 <SDMMC_CmdBlockLength>
 8006f8e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00c      	beq.n	8006fb0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a0a      	ldr	r2, [pc, #40]	; (8006fc4 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006f9c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	431a      	orrs	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	372c      	adds	r7, #44	; 0x2c
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd90      	pop	{r4, r7, pc}
 8006fc4:	1fe00fff 	.word	0x1fe00fff
 8006fc8:	55e63b89 	.word	0x55e63b89
 8006fcc:	02faf080 	.word	0x02faf080
 8006fd0:	017d7840 	.word	0x017d7840

08006fd4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006fe0:	f107 030c 	add.w	r3, r7, #12
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fa4e 	bl	8007488 <SD_SendStatus>
 8006fec:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d005      	beq.n	8007000 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	0a5b      	lsrs	r3, r3, #9
 8007004:	f003 030f 	and.w	r3, r3, #15
 8007008:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800700a:	693b      	ldr	r3, [r7, #16]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3718      	adds	r7, #24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b090      	sub	sp, #64	; 0x40
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800701c:	2300      	movs	r3, #0
 800701e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8007020:	f7fa fc3c 	bl	800189c <HAL_GetTick>
 8007024:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4618      	mov	r0, r3
 800702c:	f002 f9c0 	bl	80093b0 <SDMMC_GetPowerState>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d102      	bne.n	800703c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007036:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800703a:	e0b5      	b.n	80071a8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007040:	2b03      	cmp	r3, #3
 8007042:	d02e      	beq.n	80070a2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4618      	mov	r0, r3
 800704a:	f002 fc0a 	bl	8009862 <SDMMC_CmdSendCID>
 800704e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <SD_InitCard+0x46>
    {
      return errorstate;
 8007056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007058:	e0a6      	b.n	80071a8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2100      	movs	r1, #0
 8007060:	4618      	mov	r0, r3
 8007062:	f002 f9ea 	bl	800943a <SDMMC_GetResponse>
 8007066:	4602      	mov	r2, r0
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2104      	movs	r1, #4
 8007072:	4618      	mov	r0, r3
 8007074:	f002 f9e1 	bl	800943a <SDMMC_GetResponse>
 8007078:	4602      	mov	r2, r0
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2108      	movs	r1, #8
 8007084:	4618      	mov	r0, r3
 8007086:	f002 f9d8 	bl	800943a <SDMMC_GetResponse>
 800708a:	4602      	mov	r2, r0
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	210c      	movs	r1, #12
 8007096:	4618      	mov	r0, r3
 8007098:	f002 f9cf 	bl	800943a <SDMMC_GetResponse>
 800709c:	4602      	mov	r2, r0
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d01d      	beq.n	80070e6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80070aa:	e019      	b.n	80070e0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f107 020a 	add.w	r2, r7, #10
 80070b4:	4611      	mov	r1, r2
 80070b6:	4618      	mov	r0, r3
 80070b8:	f002 fc12 	bl	80098e0 <SDMMC_CmdSetRelAdd>
 80070bc:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 80070be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d001      	beq.n	80070c8 <SD_InitCard+0xb4>
      {
        return errorstate;
 80070c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070c6:	e06f      	b.n	80071a8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 80070c8:	f7fa fbe8 	bl	800189c <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	f241 3287 	movw	r2, #4999	; 0x1387
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d902      	bls.n	80070e0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 80070da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070de:	e063      	b.n	80071a8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 80070e0:	897b      	ldrh	r3, [r7, #10]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d0e2      	beq.n	80070ac <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ea:	2b03      	cmp	r3, #3
 80070ec:	d036      	beq.n	800715c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80070ee:	897b      	ldrh	r3, [r7, #10]
 80070f0:	461a      	mov	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070fe:	041b      	lsls	r3, r3, #16
 8007100:	4619      	mov	r1, r3
 8007102:	4610      	mov	r0, r2
 8007104:	f002 fbcc 	bl	80098a0 <SDMMC_CmdSendCSD>
 8007108:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800710a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710c:	2b00      	cmp	r3, #0
 800710e:	d001      	beq.n	8007114 <SD_InitCard+0x100>
    {
      return errorstate;
 8007110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007112:	e049      	b.n	80071a8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2100      	movs	r1, #0
 800711a:	4618      	mov	r0, r3
 800711c:	f002 f98d 	bl	800943a <SDMMC_GetResponse>
 8007120:	4602      	mov	r2, r0
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2104      	movs	r1, #4
 800712c:	4618      	mov	r0, r3
 800712e:	f002 f984 	bl	800943a <SDMMC_GetResponse>
 8007132:	4602      	mov	r2, r0
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2108      	movs	r1, #8
 800713e:	4618      	mov	r0, r3
 8007140:	f002 f97b 	bl	800943a <SDMMC_GetResponse>
 8007144:	4602      	mov	r2, r0
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	210c      	movs	r1, #12
 8007150:	4618      	mov	r0, r3
 8007152:	f002 f972 	bl	800943a <SDMMC_GetResponse>
 8007156:	4602      	mov	r2, r0
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2104      	movs	r1, #4
 8007162:	4618      	mov	r0, r3
 8007164:	f002 f969 	bl	800943a <SDMMC_GetResponse>
 8007168:	4603      	mov	r3, r0
 800716a:	0d1a      	lsrs	r2, r3, #20
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007170:	f107 030c 	add.w	r3, r7, #12
 8007174:	4619      	mov	r1, r3
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7ff fbb8 	bl	80068ec <HAL_SD_GetCardCSD>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d002      	beq.n	8007188 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007182:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007186:	e00f      	b.n	80071a8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007190:	041b      	lsls	r3, r3, #16
 8007192:	4619      	mov	r1, r3
 8007194:	4610      	mov	r0, r2
 8007196:	f002 fa7b 	bl	8009690 <SDMMC_CmdSelDesel>
 800719a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800719c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d001      	beq.n	80071a6 <SD_InitCard+0x192>
  {
    return errorstate;
 80071a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a4:	e000      	b.n	80071a8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80071a6:	2300      	movs	r3, #0
}
 80071a8:	4618      	mov	r0, r3
 80071aa:	3740      	adds	r7, #64	; 0x40
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071b8:	2300      	movs	r3, #0
 80071ba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 80071bc:	2300      	movs	r3, #0
 80071be:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 80071c0:	2300      	movs	r3, #0
 80071c2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4618      	mov	r0, r3
 80071ca:	f002 fa84 	bl	80096d6 <SDMMC_CmdGoIdleState>
 80071ce:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <SD_PowerON+0x2a>
  {
    return errorstate;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	e072      	b.n	80072c0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4618      	mov	r0, r3
 80071e0:	f002 fa97 	bl	8009712 <SDMMC_CmdOperCond>
 80071e4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071ec:	d10d      	bne.n	800720a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f002 fa6c 	bl	80096d6 <SDMMC_CmdGoIdleState>
 80071fe:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d004      	beq.n	8007210 <SD_PowerON+0x60>
    {
      return errorstate;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	e05a      	b.n	80072c0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007214:	2b01      	cmp	r3, #1
 8007216:	d137      	bne.n	8007288 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2100      	movs	r1, #0
 800721e:	4618      	mov	r0, r3
 8007220:	f002 fa97 	bl	8009752 <SDMMC_CmdAppCommand>
 8007224:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d02d      	beq.n	8007288 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800722c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007230:	e046      	b.n	80072c0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2100      	movs	r1, #0
 8007238:	4618      	mov	r0, r3
 800723a:	f002 fa8a 	bl	8009752 <SDMMC_CmdAppCommand>
 800723e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <SD_PowerON+0x9a>
    {
      return errorstate;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	e03a      	b.n	80072c0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	491e      	ldr	r1, [pc, #120]	; (80072c8 <SD_PowerON+0x118>)
 8007250:	4618      	mov	r0, r3
 8007252:	f002 faa1 	bl	8009798 <SDMMC_CmdAppOperCommand>
 8007256:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d002      	beq.n	8007264 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800725e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007262:	e02d      	b.n	80072c0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2100      	movs	r1, #0
 800726a:	4618      	mov	r0, r3
 800726c:	f002 f8e5 	bl	800943a <SDMMC_GetResponse>
 8007270:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	0fdb      	lsrs	r3, r3, #31
 8007276:	2b01      	cmp	r3, #1
 8007278:	d101      	bne.n	800727e <SD_PowerON+0xce>
 800727a:	2301      	movs	r3, #1
 800727c:	e000      	b.n	8007280 <SD_PowerON+0xd0>
 800727e:	2300      	movs	r3, #0
 8007280:	613b      	str	r3, [r7, #16]

    count++;
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	3301      	adds	r3, #1
 8007286:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800728e:	4293      	cmp	r3, r2
 8007290:	d802      	bhi.n	8007298 <SD_PowerON+0xe8>
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d0cc      	beq.n	8007232 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800729e:	4293      	cmp	r3, r2
 80072a0:	d902      	bls.n	80072a8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80072a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80072a6:	e00b      	b.n	80072c0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d002      	beq.n	80072be <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3718      	adds	r7, #24
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	c1100000 	.word	0xc1100000

080072cc <SD_PowerOFF>:
  * @brief  Turns the SDMMC output signals off.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
static void SD_PowerOFF(SD_HandleTypeDef *hsd)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Set Power State to OFF */
  (void)SDMMC_PowerState_OFF(hsd->Instance);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4618      	mov	r0, r3
 80072da:	f002 f858 	bl	800938e <SDMMC_PowerState_OFF>
}
 80072de:	bf00      	nop
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
	...

080072e8 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b08c      	sub	sp, #48	; 0x30
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80072f2:	f7fa fad3 	bl	800189c <HAL_GetTick>
 80072f6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2100      	movs	r1, #0
 8007302:	4618      	mov	r0, r3
 8007304:	f002 f899 	bl	800943a <SDMMC_GetResponse>
 8007308:	4603      	mov	r3, r0
 800730a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800730e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007312:	d102      	bne.n	800731a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007314:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007318:	e0b0      	b.n	800747c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2140      	movs	r1, #64	; 0x40
 8007320:	4618      	mov	r0, r3
 8007322:	f002 f8c9 	bl	80094b8 <SDMMC_CmdBlockLength>
 8007326:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007328:	6a3b      	ldr	r3, [r7, #32]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d005      	beq.n	800733a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007336:	6a3b      	ldr	r3, [r7, #32]
 8007338:	e0a0      	b.n	800747c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007342:	041b      	lsls	r3, r3, #16
 8007344:	4619      	mov	r1, r3
 8007346:	4610      	mov	r0, r2
 8007348:	f002 fa03 	bl	8009752 <SDMMC_CmdAppCommand>
 800734c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d005      	beq.n	8007360 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	e08d      	b.n	800747c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007360:	f04f 33ff 	mov.w	r3, #4294967295
 8007364:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007366:	2340      	movs	r3, #64	; 0x40
 8007368:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800736a:	2360      	movs	r3, #96	; 0x60
 800736c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800736e:	2302      	movs	r3, #2
 8007370:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007372:	2300      	movs	r3, #0
 8007374:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007376:	2301      	movs	r3, #1
 8007378:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f107 0208 	add.w	r2, r7, #8
 8007382:	4611      	mov	r1, r2
 8007384:	4618      	mov	r0, r3
 8007386:	f002 f86b 	bl	8009460 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4618      	mov	r0, r3
 8007390:	f002 faeb 	bl	800996a <SDMMC_CmdStatusRegister>
 8007394:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007396:	6a3b      	ldr	r3, [r7, #32]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d02b      	beq.n	80073f4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80073a4:	6a3b      	ldr	r3, [r7, #32]
 80073a6:	e069      	b.n	800747c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d013      	beq.n	80073de <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80073b6:	2300      	movs	r3, #0
 80073b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073ba:	e00d      	b.n	80073d8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4618      	mov	r0, r3
 80073c2:	f001 ffb5 	bl	8009330 <SDMMC_ReadFIFO>
 80073c6:	4602      	mov	r2, r0
 80073c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ca:	601a      	str	r2, [r3, #0]
        pData++;
 80073cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ce:	3304      	adds	r3, #4
 80073d0:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 80073d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073d4:	3301      	adds	r3, #1
 80073d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073da:	2b07      	cmp	r3, #7
 80073dc:	d9ee      	bls.n	80073bc <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80073de:	f7fa fa5d 	bl	800189c <HAL_GetTick>
 80073e2:	4602      	mov	r2, r0
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ec:	d102      	bne.n	80073f4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80073ee:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80073f2:	e043      	b.n	800747c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073fa:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d0d2      	beq.n	80073a8 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007408:	f003 0308 	and.w	r3, r3, #8
 800740c:	2b00      	cmp	r3, #0
 800740e:	d001      	beq.n	8007414 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007410:	2308      	movs	r3, #8
 8007412:	e033      	b.n	800747c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800741a:	f003 0302 	and.w	r3, r3, #2
 800741e:	2b00      	cmp	r3, #0
 8007420:	d001      	beq.n	8007426 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007422:	2302      	movs	r3, #2
 8007424:	e02a      	b.n	800747c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800742c:	f003 0320 	and.w	r3, r3, #32
 8007430:	2b00      	cmp	r3, #0
 8007432:	d017      	beq.n	8007464 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007434:	2320      	movs	r3, #32
 8007436:	e021      	b.n	800747c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4618      	mov	r0, r3
 800743e:	f001 ff77 	bl	8009330 <SDMMC_ReadFIFO>
 8007442:	4602      	mov	r2, r0
 8007444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007446:	601a      	str	r2, [r3, #0]
    pData++;
 8007448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744a:	3304      	adds	r3, #4
 800744c:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800744e:	f7fa fa25 	bl	800189c <HAL_GetTick>
 8007452:	4602      	mov	r2, r0
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745c:	d102      	bne.n	8007464 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800745e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007462:	e00b      	b.n	800747c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800746a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1e2      	bne.n	8007438 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a03      	ldr	r2, [pc, #12]	; (8007484 <SD_SendSDStatus+0x19c>)
 8007478:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3730      	adds	r7, #48	; 0x30
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	18000f3a 	.word	0x18000f3a

08007488 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d102      	bne.n	800749e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007498:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800749c:	e018      	b.n	80074d0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074a6:	041b      	lsls	r3, r3, #16
 80074a8:	4619      	mov	r1, r3
 80074aa:	4610      	mov	r0, r2
 80074ac:	f002 fa3a 	bl	8009924 <SDMMC_CmdSendStatus>
 80074b0:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d001      	beq.n	80074bc <SD_SendStatus+0x34>
  {
    return errorstate;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	e009      	b.n	80074d0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2100      	movs	r1, #0
 80074c2:	4618      	mov	r0, r3
 80074c4:	f001 ffb9 	bl	800943a <SDMMC_GetResponse>
 80074c8:	4602      	mov	r2, r0
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b086      	sub	sp, #24
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80074e0:	2300      	movs	r3, #0
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	2300      	movs	r3, #0
 80074e6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2100      	movs	r1, #0
 80074ee:	4618      	mov	r0, r3
 80074f0:	f001 ffa3 	bl	800943a <SDMMC_GetResponse>
 80074f4:	4603      	mov	r3, r0
 80074f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80074fe:	d102      	bne.n	8007506 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007500:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007504:	e02f      	b.n	8007566 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007506:	f107 030c 	add.w	r3, r7, #12
 800750a:	4619      	mov	r1, r3
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f879 	bl	8007604 <SD_FindSCR>
 8007512:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d001      	beq.n	800751e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	e023      	b.n	8007566 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007524:	2b00      	cmp	r3, #0
 8007526:	d01c      	beq.n	8007562 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007530:	041b      	lsls	r3, r3, #16
 8007532:	4619      	mov	r1, r3
 8007534:	4610      	mov	r0, r2
 8007536:	f002 f90c 	bl	8009752 <SDMMC_CmdAppCommand>
 800753a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d001      	beq.n	8007546 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	e00f      	b.n	8007566 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2102      	movs	r1, #2
 800754c:	4618      	mov	r0, r3
 800754e:	f002 f943 	bl	80097d8 <SDMMC_CmdBusWidth>
 8007552:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	e003      	b.n	8007566 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800755e:	2300      	movs	r3, #0
 8007560:	e001      	b.n	8007566 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007562:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007566:	4618      	mov	r0, r3
 8007568:	3718      	adds	r7, #24
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800756e:	b580      	push	{r7, lr}
 8007570:	b086      	sub	sp, #24
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007576:	2300      	movs	r3, #0
 8007578:	60fb      	str	r3, [r7, #12]
 800757a:	2300      	movs	r3, #0
 800757c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	2100      	movs	r1, #0
 8007584:	4618      	mov	r0, r3
 8007586:	f001 ff58 	bl	800943a <SDMMC_GetResponse>
 800758a:	4603      	mov	r3, r0
 800758c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007590:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007594:	d102      	bne.n	800759c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007596:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800759a:	e02f      	b.n	80075fc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800759c:	f107 030c 	add.w	r3, r7, #12
 80075a0:	4619      	mov	r1, r3
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f82e 	bl	8007604 <SD_FindSCR>
 80075a8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d001      	beq.n	80075b4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	e023      	b.n	80075fc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d01c      	beq.n	80075f8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c6:	041b      	lsls	r3, r3, #16
 80075c8:	4619      	mov	r1, r3
 80075ca:	4610      	mov	r0, r2
 80075cc:	f002 f8c1 	bl	8009752 <SDMMC_CmdAppCommand>
 80075d0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d001      	beq.n	80075dc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	e00f      	b.n	80075fc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2100      	movs	r1, #0
 80075e2:	4618      	mov	r0, r3
 80075e4:	f002 f8f8 	bl	80097d8 <SDMMC_CmdBusWidth>
 80075e8:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	e003      	b.n	80075fc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80075f4:	2300      	movs	r3, #0
 80075f6:	e001      	b.n	80075fc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80075f8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3718      	adds	r7, #24
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b08e      	sub	sp, #56	; 0x38
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800760e:	f7fa f945 	bl	800189c <HAL_GetTick>
 8007612:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007614:	2300      	movs	r3, #0
 8007616:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8007618:	2300      	movs	r3, #0
 800761a:	60bb      	str	r3, [r7, #8]
 800761c:	2300      	movs	r3, #0
 800761e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2108      	movs	r1, #8
 800762a:	4618      	mov	r0, r3
 800762c:	f001 ff44 	bl	80094b8 <SDMMC_CmdBlockLength>
 8007630:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007634:	2b00      	cmp	r3, #0
 8007636:	d001      	beq.n	800763c <SD_FindSCR+0x38>
  {
    return errorstate;
 8007638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763a:	e0ad      	b.n	8007798 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007644:	041b      	lsls	r3, r3, #16
 8007646:	4619      	mov	r1, r3
 8007648:	4610      	mov	r0, r2
 800764a:	f002 f882 	bl	8009752 <SDMMC_CmdAppCommand>
 800764e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <SD_FindSCR+0x56>
  {
    return errorstate;
 8007656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007658:	e09e      	b.n	8007798 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800765a:	f04f 33ff 	mov.w	r3, #4294967295
 800765e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007660:	2308      	movs	r3, #8
 8007662:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007664:	2330      	movs	r3, #48	; 0x30
 8007666:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007668:	2302      	movs	r3, #2
 800766a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800766c:	2300      	movs	r3, #0
 800766e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007670:	2301      	movs	r3, #1
 8007672:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f107 0210 	add.w	r2, r7, #16
 800767c:	4611      	mov	r1, r2
 800767e:	4618      	mov	r0, r3
 8007680:	f001 feee 	bl	8009460 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4618      	mov	r0, r3
 800768a:	f002 f8c8 	bl	800981e <SDMMC_CmdSendSCR>
 800768e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007692:	2b00      	cmp	r3, #0
 8007694:	d027      	beq.n	80076e6 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8007696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007698:	e07e      	b.n	8007798 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d113      	bne.n	80076d0 <SD_FindSCR+0xcc>
 80076a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d110      	bne.n	80076d0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4618      	mov	r0, r3
 80076b4:	f001 fe3c 	bl	8009330 <SDMMC_ReadFIFO>
 80076b8:	4603      	mov	r3, r0
 80076ba:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f001 fe35 	bl	8009330 <SDMMC_ReadFIFO>
 80076c6:	4603      	mov	r3, r0
 80076c8:	60fb      	str	r3, [r7, #12]
      index++;
 80076ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076cc:	3301      	adds	r3, #1
 80076ce:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80076d0:	f7fa f8e4 	bl	800189c <HAL_GetTick>
 80076d4:	4602      	mov	r2, r0
 80076d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076de:	d102      	bne.n	80076e6 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80076e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80076e4:	e058      	b.n	8007798 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076ec:	f240 532a 	movw	r3, #1322	; 0x52a
 80076f0:	4013      	ands	r3, r2
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d0d1      	beq.n	800769a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076fc:	f003 0308 	and.w	r3, r3, #8
 8007700:	2b00      	cmp	r3, #0
 8007702:	d005      	beq.n	8007710 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2208      	movs	r2, #8
 800770a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800770c:	2308      	movs	r3, #8
 800770e:	e043      	b.n	8007798 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007716:	f003 0302 	and.w	r3, r3, #2
 800771a:	2b00      	cmp	r3, #0
 800771c:	d005      	beq.n	800772a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	2202      	movs	r2, #2
 8007724:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007726:	2302      	movs	r3, #2
 8007728:	e036      	b.n	8007798 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007730:	f003 0320 	and.w	r3, r3, #32
 8007734:	2b00      	cmp	r3, #0
 8007736:	d005      	beq.n	8007744 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2220      	movs	r2, #32
 800773e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007740:	2320      	movs	r3, #32
 8007742:	e029      	b.n	8007798 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a15      	ldr	r2, [pc, #84]	; (80077a0 <SD_FindSCR+0x19c>)
 800774a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	061a      	lsls	r2, r3, #24
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	021b      	lsls	r3, r3, #8
 8007754:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007758:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	0a1b      	lsrs	r3, r3, #8
 800775e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007762:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	0e1b      	lsrs	r3, r3, #24
 8007768:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800776a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776c:	601a      	str	r2, [r3, #0]
    scr++;
 800776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007770:	3304      	adds	r3, #4
 8007772:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	061a      	lsls	r2, r3, #24
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	021b      	lsls	r3, r3, #8
 800777c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007780:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	0a1b      	lsrs	r3, r3, #8
 8007786:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800778a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	0e1b      	lsrs	r3, r3, #24
 8007790:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007794:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3738      	adds	r7, #56	; 0x38
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	18000f3a 	.word	0x18000f3a

080077a4 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b086      	sub	sp, #24
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b0:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b6:	2b1f      	cmp	r3, #31
 80077b8:	d936      	bls.n	8007828 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80077ba:	2300      	movs	r3, #0
 80077bc:	617b      	str	r3, [r7, #20]
 80077be:	e027      	b.n	8007810 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f001 fdb3 	bl	8009330 <SDMMC_ReadFIFO>
 80077ca:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	b2da      	uxtb	r2, r3
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	3301      	adds	r3, #1
 80077d8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	0a1b      	lsrs	r3, r3, #8
 80077de:	b2da      	uxtb	r2, r3
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	3301      	adds	r3, #1
 80077e8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	0c1b      	lsrs	r3, r3, #16
 80077ee:	b2da      	uxtb	r2, r3
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	3301      	adds	r3, #1
 80077f8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	0e1b      	lsrs	r3, r3, #24
 80077fe:	b2da      	uxtb	r2, r3
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	3301      	adds	r3, #1
 8007808:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	3301      	adds	r3, #1
 800780e:	617b      	str	r3, [r7, #20]
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	2b07      	cmp	r3, #7
 8007814:	d9d4      	bls.n	80077c0 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	693a      	ldr	r2, [r7, #16]
 800781a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007820:	f1a3 0220 	sub.w	r2, r3, #32
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8007828:	bf00      	nop
 800782a:	3718      	adds	r7, #24
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	69db      	ldr	r3, [r3, #28]
 800783c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	2b1f      	cmp	r3, #31
 8007844:	d93a      	bls.n	80078bc <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8007846:	2300      	movs	r3, #0
 8007848:	617b      	str	r3, [r7, #20]
 800784a:	e02b      	b.n	80078a4 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	3301      	adds	r3, #1
 8007856:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	021a      	lsls	r2, r3, #8
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	4313      	orrs	r3, r2
 8007862:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	3301      	adds	r3, #1
 8007868:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	041a      	lsls	r2, r3, #16
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	4313      	orrs	r3, r2
 8007874:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	3301      	adds	r3, #1
 800787a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	061a      	lsls	r2, r3, #24
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	4313      	orrs	r3, r2
 8007886:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	3301      	adds	r3, #1
 800788c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f107 020c 	add.w	r2, r7, #12
 8007896:	4611      	mov	r1, r2
 8007898:	4618      	mov	r0, r3
 800789a:	f001 fd56 	bl	800934a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	3301      	adds	r3, #1
 80078a2:	617b      	str	r3, [r7, #20]
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	2b07      	cmp	r3, #7
 80078a8:	d9d0      	bls.n	800784c <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	693a      	ldr	r2, [r7, #16]
 80078ae:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6a1b      	ldr	r3, [r3, #32]
 80078b4:	f1a3 0220 	sub.w	r2, r3, #32
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	621a      	str	r2, [r3, #32]
  }
}
 80078bc:	bf00      	nop
 80078be:	3718      	adds	r7, #24
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e049      	b.n	80079ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b00      	cmp	r3, #0
 8007930:	d106      	bne.n	8007940 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f89d 	bl	8007a7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2202      	movs	r2, #2
 8007944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	3304      	adds	r3, #4
 8007950:	4619      	mov	r1, r3
 8007952:	4610      	mov	r0, r2
 8007954:	f000 fa66 	bl	8007e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b082      	sub	sp, #8
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2202      	movs	r2, #2
 80079ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	6a1a      	ldr	r2, [r3, #32]
 80079d8:	f241 1311 	movw	r3, #4369	; 0x1111
 80079dc:	4013      	ands	r3, r2
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10f      	bne.n	8007a02 <HAL_TIM_Base_DeInit+0x40>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	6a1a      	ldr	r2, [r3, #32]
 80079e8:	f240 4344 	movw	r3, #1092	; 0x444
 80079ec:	4013      	ands	r3, r2
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d107      	bne.n	8007a02 <HAL_TIM_Base_DeInit+0x40>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f022 0201 	bic.w	r2, r2, #1
 8007a00:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f843 	bl	8007a8e <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3708      	adds	r7, #8
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b083      	sub	sp, #12
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8007a82:	bf00      	nop
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <HAL_TIM_Base_MspDeInit>:
  * @brief  DeInitializes TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	b083      	sub	sp, #12
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspDeInit could be implemented in the user file
   */
}
 8007a96:	bf00      	nop
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
	...

08007aa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b085      	sub	sp, #20
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d001      	beq.n	8007abc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e054      	b.n	8007b66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68da      	ldr	r2, [r3, #12]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f042 0201 	orr.w	r2, r2, #1
 8007ad2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a26      	ldr	r2, [pc, #152]	; (8007b74 <HAL_TIM_Base_Start_IT+0xd0>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d022      	beq.n	8007b24 <HAL_TIM_Base_Start_IT+0x80>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ae6:	d01d      	beq.n	8007b24 <HAL_TIM_Base_Start_IT+0x80>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a22      	ldr	r2, [pc, #136]	; (8007b78 <HAL_TIM_Base_Start_IT+0xd4>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d018      	beq.n	8007b24 <HAL_TIM_Base_Start_IT+0x80>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a21      	ldr	r2, [pc, #132]	; (8007b7c <HAL_TIM_Base_Start_IT+0xd8>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d013      	beq.n	8007b24 <HAL_TIM_Base_Start_IT+0x80>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a1f      	ldr	r2, [pc, #124]	; (8007b80 <HAL_TIM_Base_Start_IT+0xdc>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d00e      	beq.n	8007b24 <HAL_TIM_Base_Start_IT+0x80>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a1e      	ldr	r2, [pc, #120]	; (8007b84 <HAL_TIM_Base_Start_IT+0xe0>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d009      	beq.n	8007b24 <HAL_TIM_Base_Start_IT+0x80>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a1c      	ldr	r2, [pc, #112]	; (8007b88 <HAL_TIM_Base_Start_IT+0xe4>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d004      	beq.n	8007b24 <HAL_TIM_Base_Start_IT+0x80>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a1b      	ldr	r2, [pc, #108]	; (8007b8c <HAL_TIM_Base_Start_IT+0xe8>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d115      	bne.n	8007b50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	689a      	ldr	r2, [r3, #8]
 8007b2a:	4b19      	ldr	r3, [pc, #100]	; (8007b90 <HAL_TIM_Base_Start_IT+0xec>)
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2b06      	cmp	r3, #6
 8007b34:	d015      	beq.n	8007b62 <HAL_TIM_Base_Start_IT+0xbe>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b3c:	d011      	beq.n	8007b62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f042 0201 	orr.w	r2, r2, #1
 8007b4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b4e:	e008      	b.n	8007b62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f042 0201 	orr.w	r2, r2, #1
 8007b5e:	601a      	str	r2, [r3, #0]
 8007b60:	e000      	b.n	8007b64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3714      	adds	r7, #20
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b70:	4770      	bx	lr
 8007b72:	bf00      	nop
 8007b74:	40010000 	.word	0x40010000
 8007b78:	40000400 	.word	0x40000400
 8007b7c:	40000800 	.word	0x40000800
 8007b80:	40000c00 	.word	0x40000c00
 8007b84:	40010400 	.word	0x40010400
 8007b88:	40001800 	.word	0x40001800
 8007b8c:	40014000 	.word	0x40014000
 8007b90:	00010007 	.word	0x00010007

08007b94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	f003 0302 	and.w	r3, r3, #2
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d122      	bne.n	8007bf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	f003 0302 	and.w	r3, r3, #2
 8007bb4:	2b02      	cmp	r3, #2
 8007bb6:	d11b      	bne.n	8007bf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f06f 0202 	mvn.w	r2, #2
 8007bc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	f003 0303 	and.w	r3, r3, #3
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d003      	beq.n	8007bde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f905 	bl	8007de6 <HAL_TIM_IC_CaptureCallback>
 8007bdc:	e005      	b.n	8007bea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 f8f7 	bl	8007dd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f908 	bl	8007dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	f003 0304 	and.w	r3, r3, #4
 8007bfa:	2b04      	cmp	r3, #4
 8007bfc:	d122      	bne.n	8007c44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	f003 0304 	and.w	r3, r3, #4
 8007c08:	2b04      	cmp	r3, #4
 8007c0a:	d11b      	bne.n	8007c44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f06f 0204 	mvn.w	r2, #4
 8007c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2202      	movs	r2, #2
 8007c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d003      	beq.n	8007c32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 f8db 	bl	8007de6 <HAL_TIM_IC_CaptureCallback>
 8007c30:	e005      	b.n	8007c3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 f8cd 	bl	8007dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f8de 	bl	8007dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	f003 0308 	and.w	r3, r3, #8
 8007c4e:	2b08      	cmp	r3, #8
 8007c50:	d122      	bne.n	8007c98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	f003 0308 	and.w	r3, r3, #8
 8007c5c:	2b08      	cmp	r3, #8
 8007c5e:	d11b      	bne.n	8007c98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f06f 0208 	mvn.w	r2, #8
 8007c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2204      	movs	r2, #4
 8007c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	69db      	ldr	r3, [r3, #28]
 8007c76:	f003 0303 	and.w	r3, r3, #3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d003      	beq.n	8007c86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f8b1 	bl	8007de6 <HAL_TIM_IC_CaptureCallback>
 8007c84:	e005      	b.n	8007c92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 f8a3 	bl	8007dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 f8b4 	bl	8007dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	f003 0310 	and.w	r3, r3, #16
 8007ca2:	2b10      	cmp	r3, #16
 8007ca4:	d122      	bne.n	8007cec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	f003 0310 	and.w	r3, r3, #16
 8007cb0:	2b10      	cmp	r3, #16
 8007cb2:	d11b      	bne.n	8007cec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f06f 0210 	mvn.w	r2, #16
 8007cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2208      	movs	r2, #8
 8007cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	69db      	ldr	r3, [r3, #28]
 8007cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d003      	beq.n	8007cda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f887 	bl	8007de6 <HAL_TIM_IC_CaptureCallback>
 8007cd8:	e005      	b.n	8007ce6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f879 	bl	8007dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 f88a 	bl	8007dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	f003 0301 	and.w	r3, r3, #1
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d10e      	bne.n	8007d18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d107      	bne.n	8007d18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f06f 0201 	mvn.w	r2, #1
 8007d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f7f9 f9b8 	bl	8001088 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d22:	2b80      	cmp	r3, #128	; 0x80
 8007d24:	d10e      	bne.n	8007d44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d30:	2b80      	cmp	r3, #128	; 0x80
 8007d32:	d107      	bne.n	8007d44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f914 	bl	8007f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d52:	d10e      	bne.n	8007d72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d5e:	2b80      	cmp	r3, #128	; 0x80
 8007d60:	d107      	bne.n	8007d72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f000 f907 	bl	8007f80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	691b      	ldr	r3, [r3, #16]
 8007d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d7c:	2b40      	cmp	r3, #64	; 0x40
 8007d7e:	d10e      	bne.n	8007d9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d8a:	2b40      	cmp	r3, #64	; 0x40
 8007d8c:	d107      	bne.n	8007d9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 f838 	bl	8007e0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	f003 0320 	and.w	r3, r3, #32
 8007da8:	2b20      	cmp	r3, #32
 8007daa:	d10e      	bne.n	8007dca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	f003 0320 	and.w	r3, r3, #32
 8007db6:	2b20      	cmp	r3, #32
 8007db8:	d107      	bne.n	8007dca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f06f 0220 	mvn.w	r2, #32
 8007dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f8c7 	bl	8007f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dca:	bf00      	nop
 8007dcc:	3708      	adds	r7, #8
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dd2:	b480      	push	{r7}
 8007dd4:	b083      	sub	sp, #12
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007dda:	bf00      	nop
 8007ddc:	370c      	adds	r7, #12
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b083      	sub	sp, #12
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007dee:	bf00      	nop
 8007df0:	370c      	adds	r7, #12
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr

08007dfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007dfa:	b480      	push	{r7}
 8007dfc:	b083      	sub	sp, #12
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e02:	bf00      	nop
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr

08007e0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e0e:	b480      	push	{r7}
 8007e10:	b083      	sub	sp, #12
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e16:	bf00      	nop
 8007e18:	370c      	adds	r7, #12
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr
	...

08007e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a40      	ldr	r2, [pc, #256]	; (8007f38 <TIM_Base_SetConfig+0x114>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d013      	beq.n	8007e64 <TIM_Base_SetConfig+0x40>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e42:	d00f      	beq.n	8007e64 <TIM_Base_SetConfig+0x40>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a3d      	ldr	r2, [pc, #244]	; (8007f3c <TIM_Base_SetConfig+0x118>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d00b      	beq.n	8007e64 <TIM_Base_SetConfig+0x40>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a3c      	ldr	r2, [pc, #240]	; (8007f40 <TIM_Base_SetConfig+0x11c>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d007      	beq.n	8007e64 <TIM_Base_SetConfig+0x40>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a3b      	ldr	r2, [pc, #236]	; (8007f44 <TIM_Base_SetConfig+0x120>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d003      	beq.n	8007e64 <TIM_Base_SetConfig+0x40>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a3a      	ldr	r2, [pc, #232]	; (8007f48 <TIM_Base_SetConfig+0x124>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d108      	bne.n	8007e76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a2f      	ldr	r2, [pc, #188]	; (8007f38 <TIM_Base_SetConfig+0x114>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d01f      	beq.n	8007ebe <TIM_Base_SetConfig+0x9a>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e84:	d01b      	beq.n	8007ebe <TIM_Base_SetConfig+0x9a>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a2c      	ldr	r2, [pc, #176]	; (8007f3c <TIM_Base_SetConfig+0x118>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d017      	beq.n	8007ebe <TIM_Base_SetConfig+0x9a>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a2b      	ldr	r2, [pc, #172]	; (8007f40 <TIM_Base_SetConfig+0x11c>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d013      	beq.n	8007ebe <TIM_Base_SetConfig+0x9a>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a2a      	ldr	r2, [pc, #168]	; (8007f44 <TIM_Base_SetConfig+0x120>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d00f      	beq.n	8007ebe <TIM_Base_SetConfig+0x9a>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a29      	ldr	r2, [pc, #164]	; (8007f48 <TIM_Base_SetConfig+0x124>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d00b      	beq.n	8007ebe <TIM_Base_SetConfig+0x9a>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a28      	ldr	r2, [pc, #160]	; (8007f4c <TIM_Base_SetConfig+0x128>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d007      	beq.n	8007ebe <TIM_Base_SetConfig+0x9a>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a27      	ldr	r2, [pc, #156]	; (8007f50 <TIM_Base_SetConfig+0x12c>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d003      	beq.n	8007ebe <TIM_Base_SetConfig+0x9a>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a26      	ldr	r2, [pc, #152]	; (8007f54 <TIM_Base_SetConfig+0x130>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d108      	bne.n	8007ed0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	689a      	ldr	r2, [r3, #8]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a10      	ldr	r2, [pc, #64]	; (8007f38 <TIM_Base_SetConfig+0x114>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d00f      	beq.n	8007f1c <TIM_Base_SetConfig+0xf8>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a12      	ldr	r2, [pc, #72]	; (8007f48 <TIM_Base_SetConfig+0x124>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d00b      	beq.n	8007f1c <TIM_Base_SetConfig+0xf8>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a11      	ldr	r2, [pc, #68]	; (8007f4c <TIM_Base_SetConfig+0x128>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d007      	beq.n	8007f1c <TIM_Base_SetConfig+0xf8>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a10      	ldr	r2, [pc, #64]	; (8007f50 <TIM_Base_SetConfig+0x12c>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d003      	beq.n	8007f1c <TIM_Base_SetConfig+0xf8>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a0f      	ldr	r2, [pc, #60]	; (8007f54 <TIM_Base_SetConfig+0x130>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d103      	bne.n	8007f24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	691a      	ldr	r2, [r3, #16]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	615a      	str	r2, [r3, #20]
}
 8007f2a:	bf00      	nop
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	40010000 	.word	0x40010000
 8007f3c:	40000400 	.word	0x40000400
 8007f40:	40000800 	.word	0x40000800
 8007f44:	40000c00 	.word	0x40000c00
 8007f48:	40010400 	.word	0x40010400
 8007f4c:	40014000 	.word	0x40014000
 8007f50:	40014400 	.word	0x40014400
 8007f54:	40014800 	.word	0x40014800

08007f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d101      	bne.n	8007fa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e042      	b.n	800802c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d106      	bne.n	8007fbe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f7f9 fa07 	bl	80013cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2224      	movs	r2, #36	; 0x24
 8007fc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f022 0201 	bic.w	r2, r2, #1
 8007fd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f8fa 	bl	80081d0 <UART_SetConfig>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d101      	bne.n	8007fe6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e022      	b.n	800802c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d002      	beq.n	8007ff4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fe56 	bl	8008ca0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	685a      	ldr	r2, [r3, #4]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008002:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	689a      	ldr	r2, [r3, #8]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008012:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f042 0201 	orr.w	r2, r2, #1
 8008022:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fedd 	bl	8008de4 <UART_CheckIdleState>
 800802a:	4603      	mov	r3, r0
}
 800802c:	4618      	mov	r0, r3
 800802e:	3708      	adds	r7, #8
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b082      	sub	sp, #8
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8008042:	2301      	movs	r3, #1
 8008044:	e031      	b.n	80080aa <HAL_UART_DeInit+0x76>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2224      	movs	r2, #36	; 0x24
 800804a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f022 0201 	bic.w	r2, r2, #1
 800805c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	2200      	movs	r2, #0
 8008064:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2200      	movs	r2, #0
 800806c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2200      	movs	r2, #0
 8008074:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f7f9 fa12 	bl	80014a0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->gState = HAL_UART_STATE_RESET;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2200      	movs	r2, #0
 8008090:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80080a8:	2300      	movs	r3, #0
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3708      	adds	r7, #8
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}

080080b2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b08a      	sub	sp, #40	; 0x28
 80080b6:	af02      	add	r7, sp, #8
 80080b8:	60f8      	str	r0, [r7, #12]
 80080ba:	60b9      	str	r1, [r7, #8]
 80080bc:	603b      	str	r3, [r7, #0]
 80080be:	4613      	mov	r3, r2
 80080c0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080c8:	2b20      	cmp	r3, #32
 80080ca:	d17b      	bne.n	80081c4 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d002      	beq.n	80080d8 <HAL_UART_Transmit+0x26>
 80080d2:	88fb      	ldrh	r3, [r7, #6]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d101      	bne.n	80080dc <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	e074      	b.n	80081c6 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2200      	movs	r2, #0
 80080e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2221      	movs	r2, #33	; 0x21
 80080e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80080ec:	f7f9 fbd6 	bl	800189c <HAL_GetTick>
 80080f0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	88fa      	ldrh	r2, [r7, #6]
 80080f6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	88fa      	ldrh	r2, [r7, #6]
 80080fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800810a:	d108      	bne.n	800811e <HAL_UART_Transmit+0x6c>
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d104      	bne.n	800811e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008114:	2300      	movs	r3, #0
 8008116:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	61bb      	str	r3, [r7, #24]
 800811c:	e003      	b.n	8008126 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008122:	2300      	movs	r3, #0
 8008124:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008126:	e030      	b.n	800818a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	9300      	str	r3, [sp, #0]
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	2200      	movs	r2, #0
 8008130:	2180      	movs	r1, #128	; 0x80
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f000 ff00 	bl	8008f38 <UART_WaitOnFlagUntilTimeout>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	d005      	beq.n	800814a <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2220      	movs	r2, #32
 8008142:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e03d      	b.n	80081c6 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d10b      	bne.n	8008168 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	881b      	ldrh	r3, [r3, #0]
 8008154:	461a      	mov	r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800815e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	3302      	adds	r3, #2
 8008164:	61bb      	str	r3, [r7, #24]
 8008166:	e007      	b.n	8008178 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	781a      	ldrb	r2, [r3, #0]
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	3301      	adds	r3, #1
 8008176:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800817e:	b29b      	uxth	r3, r3
 8008180:	3b01      	subs	r3, #1
 8008182:	b29a      	uxth	r2, r3
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008190:	b29b      	uxth	r3, r3
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1c8      	bne.n	8008128 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2200      	movs	r2, #0
 800819e:	2140      	movs	r1, #64	; 0x40
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f000 fec9 	bl	8008f38 <UART_WaitOnFlagUntilTimeout>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d005      	beq.n	80081b8 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2220      	movs	r2, #32
 80081b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e006      	b.n	80081c6 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2220      	movs	r2, #32
 80081bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80081c0:	2300      	movs	r3, #0
 80081c2:	e000      	b.n	80081c6 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80081c4:	2302      	movs	r3, #2
  }
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3720      	adds	r7, #32
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
	...

080081d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80081d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081d4:	b092      	sub	sp, #72	; 0x48
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80081da:	2300      	movs	r3, #0
 80081dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	689a      	ldr	r2, [r3, #8]
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	431a      	orrs	r2, r3
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	431a      	orrs	r2, r3
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	69db      	ldr	r3, [r3, #28]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681a      	ldr	r2, [r3, #0]
 80081fe:	4bbe      	ldr	r3, [pc, #760]	; (80084f8 <UART_SetConfig+0x328>)
 8008200:	4013      	ands	r3, r2
 8008202:	697a      	ldr	r2, [r7, #20]
 8008204:	6812      	ldr	r2, [r2, #0]
 8008206:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008208:	430b      	orrs	r3, r1
 800820a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	68da      	ldr	r2, [r3, #12]
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	430a      	orrs	r2, r1
 8008220:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4ab3      	ldr	r2, [pc, #716]	; (80084fc <UART_SetConfig+0x32c>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d004      	beq.n	800823c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	6a1b      	ldr	r3, [r3, #32]
 8008236:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008238:	4313      	orrs	r3, r2
 800823a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	689a      	ldr	r2, [r3, #8]
 8008242:	4baf      	ldr	r3, [pc, #700]	; (8008500 <UART_SetConfig+0x330>)
 8008244:	4013      	ands	r3, r2
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	6812      	ldr	r2, [r2, #0]
 800824a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800824c:	430b      	orrs	r3, r1
 800824e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008256:	f023 010f 	bic.w	r1, r3, #15
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	430a      	orrs	r2, r1
 8008264:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4aa6      	ldr	r2, [pc, #664]	; (8008504 <UART_SetConfig+0x334>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d177      	bne.n	8008360 <UART_SetConfig+0x190>
 8008270:	4ba5      	ldr	r3, [pc, #660]	; (8008508 <UART_SetConfig+0x338>)
 8008272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008274:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008278:	2b28      	cmp	r3, #40	; 0x28
 800827a:	d86d      	bhi.n	8008358 <UART_SetConfig+0x188>
 800827c:	a201      	add	r2, pc, #4	; (adr r2, 8008284 <UART_SetConfig+0xb4>)
 800827e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008282:	bf00      	nop
 8008284:	08008329 	.word	0x08008329
 8008288:	08008359 	.word	0x08008359
 800828c:	08008359 	.word	0x08008359
 8008290:	08008359 	.word	0x08008359
 8008294:	08008359 	.word	0x08008359
 8008298:	08008359 	.word	0x08008359
 800829c:	08008359 	.word	0x08008359
 80082a0:	08008359 	.word	0x08008359
 80082a4:	08008331 	.word	0x08008331
 80082a8:	08008359 	.word	0x08008359
 80082ac:	08008359 	.word	0x08008359
 80082b0:	08008359 	.word	0x08008359
 80082b4:	08008359 	.word	0x08008359
 80082b8:	08008359 	.word	0x08008359
 80082bc:	08008359 	.word	0x08008359
 80082c0:	08008359 	.word	0x08008359
 80082c4:	08008339 	.word	0x08008339
 80082c8:	08008359 	.word	0x08008359
 80082cc:	08008359 	.word	0x08008359
 80082d0:	08008359 	.word	0x08008359
 80082d4:	08008359 	.word	0x08008359
 80082d8:	08008359 	.word	0x08008359
 80082dc:	08008359 	.word	0x08008359
 80082e0:	08008359 	.word	0x08008359
 80082e4:	08008341 	.word	0x08008341
 80082e8:	08008359 	.word	0x08008359
 80082ec:	08008359 	.word	0x08008359
 80082f0:	08008359 	.word	0x08008359
 80082f4:	08008359 	.word	0x08008359
 80082f8:	08008359 	.word	0x08008359
 80082fc:	08008359 	.word	0x08008359
 8008300:	08008359 	.word	0x08008359
 8008304:	08008349 	.word	0x08008349
 8008308:	08008359 	.word	0x08008359
 800830c:	08008359 	.word	0x08008359
 8008310:	08008359 	.word	0x08008359
 8008314:	08008359 	.word	0x08008359
 8008318:	08008359 	.word	0x08008359
 800831c:	08008359 	.word	0x08008359
 8008320:	08008359 	.word	0x08008359
 8008324:	08008351 	.word	0x08008351
 8008328:	2301      	movs	r3, #1
 800832a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800832e:	e222      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008330:	2304      	movs	r3, #4
 8008332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008336:	e21e      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008338:	2308      	movs	r3, #8
 800833a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800833e:	e21a      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008340:	2310      	movs	r3, #16
 8008342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008346:	e216      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008348:	2320      	movs	r3, #32
 800834a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800834e:	e212      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008350:	2340      	movs	r3, #64	; 0x40
 8008352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008356:	e20e      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008358:	2380      	movs	r3, #128	; 0x80
 800835a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800835e:	e20a      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a69      	ldr	r2, [pc, #420]	; (800850c <UART_SetConfig+0x33c>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d130      	bne.n	80083cc <UART_SetConfig+0x1fc>
 800836a:	4b67      	ldr	r3, [pc, #412]	; (8008508 <UART_SetConfig+0x338>)
 800836c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800836e:	f003 0307 	and.w	r3, r3, #7
 8008372:	2b05      	cmp	r3, #5
 8008374:	d826      	bhi.n	80083c4 <UART_SetConfig+0x1f4>
 8008376:	a201      	add	r2, pc, #4	; (adr r2, 800837c <UART_SetConfig+0x1ac>)
 8008378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837c:	08008395 	.word	0x08008395
 8008380:	0800839d 	.word	0x0800839d
 8008384:	080083a5 	.word	0x080083a5
 8008388:	080083ad 	.word	0x080083ad
 800838c:	080083b5 	.word	0x080083b5
 8008390:	080083bd 	.word	0x080083bd
 8008394:	2300      	movs	r3, #0
 8008396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800839a:	e1ec      	b.n	8008776 <UART_SetConfig+0x5a6>
 800839c:	2304      	movs	r3, #4
 800839e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083a2:	e1e8      	b.n	8008776 <UART_SetConfig+0x5a6>
 80083a4:	2308      	movs	r3, #8
 80083a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083aa:	e1e4      	b.n	8008776 <UART_SetConfig+0x5a6>
 80083ac:	2310      	movs	r3, #16
 80083ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083b2:	e1e0      	b.n	8008776 <UART_SetConfig+0x5a6>
 80083b4:	2320      	movs	r3, #32
 80083b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ba:	e1dc      	b.n	8008776 <UART_SetConfig+0x5a6>
 80083bc:	2340      	movs	r3, #64	; 0x40
 80083be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083c2:	e1d8      	b.n	8008776 <UART_SetConfig+0x5a6>
 80083c4:	2380      	movs	r3, #128	; 0x80
 80083c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80083ca:	e1d4      	b.n	8008776 <UART_SetConfig+0x5a6>
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a4f      	ldr	r2, [pc, #316]	; (8008510 <UART_SetConfig+0x340>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d130      	bne.n	8008438 <UART_SetConfig+0x268>
 80083d6:	4b4c      	ldr	r3, [pc, #304]	; (8008508 <UART_SetConfig+0x338>)
 80083d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083da:	f003 0307 	and.w	r3, r3, #7
 80083de:	2b05      	cmp	r3, #5
 80083e0:	d826      	bhi.n	8008430 <UART_SetConfig+0x260>
 80083e2:	a201      	add	r2, pc, #4	; (adr r2, 80083e8 <UART_SetConfig+0x218>)
 80083e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e8:	08008401 	.word	0x08008401
 80083ec:	08008409 	.word	0x08008409
 80083f0:	08008411 	.word	0x08008411
 80083f4:	08008419 	.word	0x08008419
 80083f8:	08008421 	.word	0x08008421
 80083fc:	08008429 	.word	0x08008429
 8008400:	2300      	movs	r3, #0
 8008402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008406:	e1b6      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008408:	2304      	movs	r3, #4
 800840a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800840e:	e1b2      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008410:	2308      	movs	r3, #8
 8008412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008416:	e1ae      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008418:	2310      	movs	r3, #16
 800841a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800841e:	e1aa      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008420:	2320      	movs	r3, #32
 8008422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008426:	e1a6      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008428:	2340      	movs	r3, #64	; 0x40
 800842a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800842e:	e1a2      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008430:	2380      	movs	r3, #128	; 0x80
 8008432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008436:	e19e      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a35      	ldr	r2, [pc, #212]	; (8008514 <UART_SetConfig+0x344>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d130      	bne.n	80084a4 <UART_SetConfig+0x2d4>
 8008442:	4b31      	ldr	r3, [pc, #196]	; (8008508 <UART_SetConfig+0x338>)
 8008444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008446:	f003 0307 	and.w	r3, r3, #7
 800844a:	2b05      	cmp	r3, #5
 800844c:	d826      	bhi.n	800849c <UART_SetConfig+0x2cc>
 800844e:	a201      	add	r2, pc, #4	; (adr r2, 8008454 <UART_SetConfig+0x284>)
 8008450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008454:	0800846d 	.word	0x0800846d
 8008458:	08008475 	.word	0x08008475
 800845c:	0800847d 	.word	0x0800847d
 8008460:	08008485 	.word	0x08008485
 8008464:	0800848d 	.word	0x0800848d
 8008468:	08008495 	.word	0x08008495
 800846c:	2300      	movs	r3, #0
 800846e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008472:	e180      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008474:	2304      	movs	r3, #4
 8008476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800847a:	e17c      	b.n	8008776 <UART_SetConfig+0x5a6>
 800847c:	2308      	movs	r3, #8
 800847e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008482:	e178      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008484:	2310      	movs	r3, #16
 8008486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800848a:	e174      	b.n	8008776 <UART_SetConfig+0x5a6>
 800848c:	2320      	movs	r3, #32
 800848e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008492:	e170      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008494:	2340      	movs	r3, #64	; 0x40
 8008496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800849a:	e16c      	b.n	8008776 <UART_SetConfig+0x5a6>
 800849c:	2380      	movs	r3, #128	; 0x80
 800849e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084a2:	e168      	b.n	8008776 <UART_SetConfig+0x5a6>
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a1b      	ldr	r2, [pc, #108]	; (8008518 <UART_SetConfig+0x348>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d142      	bne.n	8008534 <UART_SetConfig+0x364>
 80084ae:	4b16      	ldr	r3, [pc, #88]	; (8008508 <UART_SetConfig+0x338>)
 80084b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b2:	f003 0307 	and.w	r3, r3, #7
 80084b6:	2b05      	cmp	r3, #5
 80084b8:	d838      	bhi.n	800852c <UART_SetConfig+0x35c>
 80084ba:	a201      	add	r2, pc, #4	; (adr r2, 80084c0 <UART_SetConfig+0x2f0>)
 80084bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c0:	080084d9 	.word	0x080084d9
 80084c4:	080084e1 	.word	0x080084e1
 80084c8:	080084e9 	.word	0x080084e9
 80084cc:	080084f1 	.word	0x080084f1
 80084d0:	0800851d 	.word	0x0800851d
 80084d4:	08008525 	.word	0x08008525
 80084d8:	2300      	movs	r3, #0
 80084da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084de:	e14a      	b.n	8008776 <UART_SetConfig+0x5a6>
 80084e0:	2304      	movs	r3, #4
 80084e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084e6:	e146      	b.n	8008776 <UART_SetConfig+0x5a6>
 80084e8:	2308      	movs	r3, #8
 80084ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084ee:	e142      	b.n	8008776 <UART_SetConfig+0x5a6>
 80084f0:	2310      	movs	r3, #16
 80084f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80084f6:	e13e      	b.n	8008776 <UART_SetConfig+0x5a6>
 80084f8:	cfff69f3 	.word	0xcfff69f3
 80084fc:	58000c00 	.word	0x58000c00
 8008500:	11fff4ff 	.word	0x11fff4ff
 8008504:	40011000 	.word	0x40011000
 8008508:	58024400 	.word	0x58024400
 800850c:	40004400 	.word	0x40004400
 8008510:	40004800 	.word	0x40004800
 8008514:	40004c00 	.word	0x40004c00
 8008518:	40005000 	.word	0x40005000
 800851c:	2320      	movs	r3, #32
 800851e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008522:	e128      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008524:	2340      	movs	r3, #64	; 0x40
 8008526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800852a:	e124      	b.n	8008776 <UART_SetConfig+0x5a6>
 800852c:	2380      	movs	r3, #128	; 0x80
 800852e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008532:	e120      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4acb      	ldr	r2, [pc, #812]	; (8008868 <UART_SetConfig+0x698>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d176      	bne.n	800862c <UART_SetConfig+0x45c>
 800853e:	4bcb      	ldr	r3, [pc, #812]	; (800886c <UART_SetConfig+0x69c>)
 8008540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008542:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008546:	2b28      	cmp	r3, #40	; 0x28
 8008548:	d86c      	bhi.n	8008624 <UART_SetConfig+0x454>
 800854a:	a201      	add	r2, pc, #4	; (adr r2, 8008550 <UART_SetConfig+0x380>)
 800854c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008550:	080085f5 	.word	0x080085f5
 8008554:	08008625 	.word	0x08008625
 8008558:	08008625 	.word	0x08008625
 800855c:	08008625 	.word	0x08008625
 8008560:	08008625 	.word	0x08008625
 8008564:	08008625 	.word	0x08008625
 8008568:	08008625 	.word	0x08008625
 800856c:	08008625 	.word	0x08008625
 8008570:	080085fd 	.word	0x080085fd
 8008574:	08008625 	.word	0x08008625
 8008578:	08008625 	.word	0x08008625
 800857c:	08008625 	.word	0x08008625
 8008580:	08008625 	.word	0x08008625
 8008584:	08008625 	.word	0x08008625
 8008588:	08008625 	.word	0x08008625
 800858c:	08008625 	.word	0x08008625
 8008590:	08008605 	.word	0x08008605
 8008594:	08008625 	.word	0x08008625
 8008598:	08008625 	.word	0x08008625
 800859c:	08008625 	.word	0x08008625
 80085a0:	08008625 	.word	0x08008625
 80085a4:	08008625 	.word	0x08008625
 80085a8:	08008625 	.word	0x08008625
 80085ac:	08008625 	.word	0x08008625
 80085b0:	0800860d 	.word	0x0800860d
 80085b4:	08008625 	.word	0x08008625
 80085b8:	08008625 	.word	0x08008625
 80085bc:	08008625 	.word	0x08008625
 80085c0:	08008625 	.word	0x08008625
 80085c4:	08008625 	.word	0x08008625
 80085c8:	08008625 	.word	0x08008625
 80085cc:	08008625 	.word	0x08008625
 80085d0:	08008615 	.word	0x08008615
 80085d4:	08008625 	.word	0x08008625
 80085d8:	08008625 	.word	0x08008625
 80085dc:	08008625 	.word	0x08008625
 80085e0:	08008625 	.word	0x08008625
 80085e4:	08008625 	.word	0x08008625
 80085e8:	08008625 	.word	0x08008625
 80085ec:	08008625 	.word	0x08008625
 80085f0:	0800861d 	.word	0x0800861d
 80085f4:	2301      	movs	r3, #1
 80085f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80085fa:	e0bc      	b.n	8008776 <UART_SetConfig+0x5a6>
 80085fc:	2304      	movs	r3, #4
 80085fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008602:	e0b8      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008604:	2308      	movs	r3, #8
 8008606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800860a:	e0b4      	b.n	8008776 <UART_SetConfig+0x5a6>
 800860c:	2310      	movs	r3, #16
 800860e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008612:	e0b0      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008614:	2320      	movs	r3, #32
 8008616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800861a:	e0ac      	b.n	8008776 <UART_SetConfig+0x5a6>
 800861c:	2340      	movs	r3, #64	; 0x40
 800861e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008622:	e0a8      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008624:	2380      	movs	r3, #128	; 0x80
 8008626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800862a:	e0a4      	b.n	8008776 <UART_SetConfig+0x5a6>
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a8f      	ldr	r2, [pc, #572]	; (8008870 <UART_SetConfig+0x6a0>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d130      	bne.n	8008698 <UART_SetConfig+0x4c8>
 8008636:	4b8d      	ldr	r3, [pc, #564]	; (800886c <UART_SetConfig+0x69c>)
 8008638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800863a:	f003 0307 	and.w	r3, r3, #7
 800863e:	2b05      	cmp	r3, #5
 8008640:	d826      	bhi.n	8008690 <UART_SetConfig+0x4c0>
 8008642:	a201      	add	r2, pc, #4	; (adr r2, 8008648 <UART_SetConfig+0x478>)
 8008644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008648:	08008661 	.word	0x08008661
 800864c:	08008669 	.word	0x08008669
 8008650:	08008671 	.word	0x08008671
 8008654:	08008679 	.word	0x08008679
 8008658:	08008681 	.word	0x08008681
 800865c:	08008689 	.word	0x08008689
 8008660:	2300      	movs	r3, #0
 8008662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008666:	e086      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008668:	2304      	movs	r3, #4
 800866a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800866e:	e082      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008670:	2308      	movs	r3, #8
 8008672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008676:	e07e      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008678:	2310      	movs	r3, #16
 800867a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800867e:	e07a      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008680:	2320      	movs	r3, #32
 8008682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008686:	e076      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008688:	2340      	movs	r3, #64	; 0x40
 800868a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800868e:	e072      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008690:	2380      	movs	r3, #128	; 0x80
 8008692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008696:	e06e      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a75      	ldr	r2, [pc, #468]	; (8008874 <UART_SetConfig+0x6a4>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d130      	bne.n	8008704 <UART_SetConfig+0x534>
 80086a2:	4b72      	ldr	r3, [pc, #456]	; (800886c <UART_SetConfig+0x69c>)
 80086a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086a6:	f003 0307 	and.w	r3, r3, #7
 80086aa:	2b05      	cmp	r3, #5
 80086ac:	d826      	bhi.n	80086fc <UART_SetConfig+0x52c>
 80086ae:	a201      	add	r2, pc, #4	; (adr r2, 80086b4 <UART_SetConfig+0x4e4>)
 80086b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b4:	080086cd 	.word	0x080086cd
 80086b8:	080086d5 	.word	0x080086d5
 80086bc:	080086dd 	.word	0x080086dd
 80086c0:	080086e5 	.word	0x080086e5
 80086c4:	080086ed 	.word	0x080086ed
 80086c8:	080086f5 	.word	0x080086f5
 80086cc:	2300      	movs	r3, #0
 80086ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086d2:	e050      	b.n	8008776 <UART_SetConfig+0x5a6>
 80086d4:	2304      	movs	r3, #4
 80086d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086da:	e04c      	b.n	8008776 <UART_SetConfig+0x5a6>
 80086dc:	2308      	movs	r3, #8
 80086de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086e2:	e048      	b.n	8008776 <UART_SetConfig+0x5a6>
 80086e4:	2310      	movs	r3, #16
 80086e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086ea:	e044      	b.n	8008776 <UART_SetConfig+0x5a6>
 80086ec:	2320      	movs	r3, #32
 80086ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086f2:	e040      	b.n	8008776 <UART_SetConfig+0x5a6>
 80086f4:	2340      	movs	r3, #64	; 0x40
 80086f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80086fa:	e03c      	b.n	8008776 <UART_SetConfig+0x5a6>
 80086fc:	2380      	movs	r3, #128	; 0x80
 80086fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008702:	e038      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a5b      	ldr	r2, [pc, #364]	; (8008878 <UART_SetConfig+0x6a8>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d130      	bne.n	8008770 <UART_SetConfig+0x5a0>
 800870e:	4b57      	ldr	r3, [pc, #348]	; (800886c <UART_SetConfig+0x69c>)
 8008710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008712:	f003 0307 	and.w	r3, r3, #7
 8008716:	2b05      	cmp	r3, #5
 8008718:	d826      	bhi.n	8008768 <UART_SetConfig+0x598>
 800871a:	a201      	add	r2, pc, #4	; (adr r2, 8008720 <UART_SetConfig+0x550>)
 800871c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008720:	08008739 	.word	0x08008739
 8008724:	08008741 	.word	0x08008741
 8008728:	08008749 	.word	0x08008749
 800872c:	08008751 	.word	0x08008751
 8008730:	08008759 	.word	0x08008759
 8008734:	08008761 	.word	0x08008761
 8008738:	2302      	movs	r3, #2
 800873a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800873e:	e01a      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008740:	2304      	movs	r3, #4
 8008742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008746:	e016      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008748:	2308      	movs	r3, #8
 800874a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800874e:	e012      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008750:	2310      	movs	r3, #16
 8008752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008756:	e00e      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008758:	2320      	movs	r3, #32
 800875a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800875e:	e00a      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008760:	2340      	movs	r3, #64	; 0x40
 8008762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008766:	e006      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008768:	2380      	movs	r3, #128	; 0x80
 800876a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800876e:	e002      	b.n	8008776 <UART_SetConfig+0x5a6>
 8008770:	2380      	movs	r3, #128	; 0x80
 8008772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008776:	697b      	ldr	r3, [r7, #20]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a3f      	ldr	r2, [pc, #252]	; (8008878 <UART_SetConfig+0x6a8>)
 800877c:	4293      	cmp	r3, r2
 800877e:	f040 80f8 	bne.w	8008972 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008782:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008786:	2b20      	cmp	r3, #32
 8008788:	dc46      	bgt.n	8008818 <UART_SetConfig+0x648>
 800878a:	2b02      	cmp	r3, #2
 800878c:	f2c0 8082 	blt.w	8008894 <UART_SetConfig+0x6c4>
 8008790:	3b02      	subs	r3, #2
 8008792:	2b1e      	cmp	r3, #30
 8008794:	d87e      	bhi.n	8008894 <UART_SetConfig+0x6c4>
 8008796:	a201      	add	r2, pc, #4	; (adr r2, 800879c <UART_SetConfig+0x5cc>)
 8008798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800879c:	0800881f 	.word	0x0800881f
 80087a0:	08008895 	.word	0x08008895
 80087a4:	08008827 	.word	0x08008827
 80087a8:	08008895 	.word	0x08008895
 80087ac:	08008895 	.word	0x08008895
 80087b0:	08008895 	.word	0x08008895
 80087b4:	08008837 	.word	0x08008837
 80087b8:	08008895 	.word	0x08008895
 80087bc:	08008895 	.word	0x08008895
 80087c0:	08008895 	.word	0x08008895
 80087c4:	08008895 	.word	0x08008895
 80087c8:	08008895 	.word	0x08008895
 80087cc:	08008895 	.word	0x08008895
 80087d0:	08008895 	.word	0x08008895
 80087d4:	08008847 	.word	0x08008847
 80087d8:	08008895 	.word	0x08008895
 80087dc:	08008895 	.word	0x08008895
 80087e0:	08008895 	.word	0x08008895
 80087e4:	08008895 	.word	0x08008895
 80087e8:	08008895 	.word	0x08008895
 80087ec:	08008895 	.word	0x08008895
 80087f0:	08008895 	.word	0x08008895
 80087f4:	08008895 	.word	0x08008895
 80087f8:	08008895 	.word	0x08008895
 80087fc:	08008895 	.word	0x08008895
 8008800:	08008895 	.word	0x08008895
 8008804:	08008895 	.word	0x08008895
 8008808:	08008895 	.word	0x08008895
 800880c:	08008895 	.word	0x08008895
 8008810:	08008895 	.word	0x08008895
 8008814:	08008887 	.word	0x08008887
 8008818:	2b40      	cmp	r3, #64	; 0x40
 800881a:	d037      	beq.n	800888c <UART_SetConfig+0x6bc>
 800881c:	e03a      	b.n	8008894 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800881e:	f7fc fe9f 	bl	8005560 <HAL_RCCEx_GetD3PCLK1Freq>
 8008822:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008824:	e03c      	b.n	80088a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008826:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800882a:	4618      	mov	r0, r3
 800882c:	f7fc feae 	bl	800558c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008832:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008834:	e034      	b.n	80088a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008836:	f107 0318 	add.w	r3, r7, #24
 800883a:	4618      	mov	r0, r3
 800883c:	f7fc fffa 	bl	8005834 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008844:	e02c      	b.n	80088a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008846:	4b09      	ldr	r3, [pc, #36]	; (800886c <UART_SetConfig+0x69c>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	f003 0320 	and.w	r3, r3, #32
 800884e:	2b00      	cmp	r3, #0
 8008850:	d016      	beq.n	8008880 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008852:	4b06      	ldr	r3, [pc, #24]	; (800886c <UART_SetConfig+0x69c>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	08db      	lsrs	r3, r3, #3
 8008858:	f003 0303 	and.w	r3, r3, #3
 800885c:	4a07      	ldr	r2, [pc, #28]	; (800887c <UART_SetConfig+0x6ac>)
 800885e:	fa22 f303 	lsr.w	r3, r2, r3
 8008862:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008864:	e01c      	b.n	80088a0 <UART_SetConfig+0x6d0>
 8008866:	bf00      	nop
 8008868:	40011400 	.word	0x40011400
 800886c:	58024400 	.word	0x58024400
 8008870:	40007800 	.word	0x40007800
 8008874:	40007c00 	.word	0x40007c00
 8008878:	58000c00 	.word	0x58000c00
 800887c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008880:	4b9d      	ldr	r3, [pc, #628]	; (8008af8 <UART_SetConfig+0x928>)
 8008882:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008884:	e00c      	b.n	80088a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008886:	4b9d      	ldr	r3, [pc, #628]	; (8008afc <UART_SetConfig+0x92c>)
 8008888:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800888a:	e009      	b.n	80088a0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800888c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008890:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008892:	e005      	b.n	80088a0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008894:	2300      	movs	r3, #0
 8008896:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800889e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80088a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f000 81de 	beq.w	8008c64 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ac:	4a94      	ldr	r2, [pc, #592]	; (8008b00 <UART_SetConfig+0x930>)
 80088ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088b2:	461a      	mov	r2, r3
 80088b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80088ba:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	685a      	ldr	r2, [r3, #4]
 80088c0:	4613      	mov	r3, r2
 80088c2:	005b      	lsls	r3, r3, #1
 80088c4:	4413      	add	r3, r2
 80088c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088c8:	429a      	cmp	r2, r3
 80088ca:	d305      	bcc.n	80088d8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d903      	bls.n	80088e0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80088de:	e1c1      	b.n	8008c64 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088e2:	2200      	movs	r2, #0
 80088e4:	60bb      	str	r3, [r7, #8]
 80088e6:	60fa      	str	r2, [r7, #12]
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ec:	4a84      	ldr	r2, [pc, #528]	; (8008b00 <UART_SetConfig+0x930>)
 80088ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	2200      	movs	r2, #0
 80088f6:	603b      	str	r3, [r7, #0]
 80088f8:	607a      	str	r2, [r7, #4]
 80088fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008902:	f7f7 fe5d 	bl	80005c0 <__aeabi_uldivmod>
 8008906:	4602      	mov	r2, r0
 8008908:	460b      	mov	r3, r1
 800890a:	4610      	mov	r0, r2
 800890c:	4619      	mov	r1, r3
 800890e:	f04f 0200 	mov.w	r2, #0
 8008912:	f04f 0300 	mov.w	r3, #0
 8008916:	020b      	lsls	r3, r1, #8
 8008918:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800891c:	0202      	lsls	r2, r0, #8
 800891e:	6979      	ldr	r1, [r7, #20]
 8008920:	6849      	ldr	r1, [r1, #4]
 8008922:	0849      	lsrs	r1, r1, #1
 8008924:	2000      	movs	r0, #0
 8008926:	460c      	mov	r4, r1
 8008928:	4605      	mov	r5, r0
 800892a:	eb12 0804 	adds.w	r8, r2, r4
 800892e:	eb43 0905 	adc.w	r9, r3, r5
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	2200      	movs	r2, #0
 8008938:	469a      	mov	sl, r3
 800893a:	4693      	mov	fp, r2
 800893c:	4652      	mov	r2, sl
 800893e:	465b      	mov	r3, fp
 8008940:	4640      	mov	r0, r8
 8008942:	4649      	mov	r1, r9
 8008944:	f7f7 fe3c 	bl	80005c0 <__aeabi_uldivmod>
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	4613      	mov	r3, r2
 800894e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008952:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008956:	d308      	bcc.n	800896a <UART_SetConfig+0x79a>
 8008958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800895e:	d204      	bcs.n	800896a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008966:	60da      	str	r2, [r3, #12]
 8008968:	e17c      	b.n	8008c64 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008970:	e178      	b.n	8008c64 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	69db      	ldr	r3, [r3, #28]
 8008976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800897a:	f040 80c5 	bne.w	8008b08 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800897e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008982:	2b20      	cmp	r3, #32
 8008984:	dc48      	bgt.n	8008a18 <UART_SetConfig+0x848>
 8008986:	2b00      	cmp	r3, #0
 8008988:	db7b      	blt.n	8008a82 <UART_SetConfig+0x8b2>
 800898a:	2b20      	cmp	r3, #32
 800898c:	d879      	bhi.n	8008a82 <UART_SetConfig+0x8b2>
 800898e:	a201      	add	r2, pc, #4	; (adr r2, 8008994 <UART_SetConfig+0x7c4>)
 8008990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008994:	08008a1f 	.word	0x08008a1f
 8008998:	08008a27 	.word	0x08008a27
 800899c:	08008a83 	.word	0x08008a83
 80089a0:	08008a83 	.word	0x08008a83
 80089a4:	08008a2f 	.word	0x08008a2f
 80089a8:	08008a83 	.word	0x08008a83
 80089ac:	08008a83 	.word	0x08008a83
 80089b0:	08008a83 	.word	0x08008a83
 80089b4:	08008a3f 	.word	0x08008a3f
 80089b8:	08008a83 	.word	0x08008a83
 80089bc:	08008a83 	.word	0x08008a83
 80089c0:	08008a83 	.word	0x08008a83
 80089c4:	08008a83 	.word	0x08008a83
 80089c8:	08008a83 	.word	0x08008a83
 80089cc:	08008a83 	.word	0x08008a83
 80089d0:	08008a83 	.word	0x08008a83
 80089d4:	08008a4f 	.word	0x08008a4f
 80089d8:	08008a83 	.word	0x08008a83
 80089dc:	08008a83 	.word	0x08008a83
 80089e0:	08008a83 	.word	0x08008a83
 80089e4:	08008a83 	.word	0x08008a83
 80089e8:	08008a83 	.word	0x08008a83
 80089ec:	08008a83 	.word	0x08008a83
 80089f0:	08008a83 	.word	0x08008a83
 80089f4:	08008a83 	.word	0x08008a83
 80089f8:	08008a83 	.word	0x08008a83
 80089fc:	08008a83 	.word	0x08008a83
 8008a00:	08008a83 	.word	0x08008a83
 8008a04:	08008a83 	.word	0x08008a83
 8008a08:	08008a83 	.word	0x08008a83
 8008a0c:	08008a83 	.word	0x08008a83
 8008a10:	08008a83 	.word	0x08008a83
 8008a14:	08008a75 	.word	0x08008a75
 8008a18:	2b40      	cmp	r3, #64	; 0x40
 8008a1a:	d02e      	beq.n	8008a7a <UART_SetConfig+0x8aa>
 8008a1c:	e031      	b.n	8008a82 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a1e:	f7fa fd67 	bl	80034f0 <HAL_RCC_GetPCLK1Freq>
 8008a22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a24:	e033      	b.n	8008a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a26:	f7fa fd79 	bl	800351c <HAL_RCC_GetPCLK2Freq>
 8008a2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008a2c:	e02f      	b.n	8008a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7fc fdaa 	bl	800558c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a3c:	e027      	b.n	8008a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a3e:	f107 0318 	add.w	r3, r7, #24
 8008a42:	4618      	mov	r0, r3
 8008a44:	f7fc fef6 	bl	8005834 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a4c:	e01f      	b.n	8008a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a4e:	4b2d      	ldr	r3, [pc, #180]	; (8008b04 <UART_SetConfig+0x934>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f003 0320 	and.w	r3, r3, #32
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d009      	beq.n	8008a6e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a5a:	4b2a      	ldr	r3, [pc, #168]	; (8008b04 <UART_SetConfig+0x934>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	08db      	lsrs	r3, r3, #3
 8008a60:	f003 0303 	and.w	r3, r3, #3
 8008a64:	4a24      	ldr	r2, [pc, #144]	; (8008af8 <UART_SetConfig+0x928>)
 8008a66:	fa22 f303 	lsr.w	r3, r2, r3
 8008a6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a6c:	e00f      	b.n	8008a8e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008a6e:	4b22      	ldr	r3, [pc, #136]	; (8008af8 <UART_SetConfig+0x928>)
 8008a70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a72:	e00c      	b.n	8008a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a74:	4b21      	ldr	r3, [pc, #132]	; (8008afc <UART_SetConfig+0x92c>)
 8008a76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a78:	e009      	b.n	8008a8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008a80:	e005      	b.n	8008a8e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008a82:	2300      	movs	r3, #0
 8008a84:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008a86:	2301      	movs	r3, #1
 8008a88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008a8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	f000 80e7 	beq.w	8008c64 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9a:	4a19      	ldr	r2, [pc, #100]	; (8008b00 <UART_SetConfig+0x930>)
 8008a9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008aa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8008aa8:	005a      	lsls	r2, r3, #1
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	085b      	lsrs	r3, r3, #1
 8008ab0:	441a      	add	r2, r3
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008aba:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008abe:	2b0f      	cmp	r3, #15
 8008ac0:	d916      	bls.n	8008af0 <UART_SetConfig+0x920>
 8008ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ac8:	d212      	bcs.n	8008af0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	f023 030f 	bic.w	r3, r3, #15
 8008ad2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ad6:	085b      	lsrs	r3, r3, #1
 8008ad8:	b29b      	uxth	r3, r3
 8008ada:	f003 0307 	and.w	r3, r3, #7
 8008ade:	b29a      	uxth	r2, r3
 8008ae0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008aec:	60da      	str	r2, [r3, #12]
 8008aee:	e0b9      	b.n	8008c64 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008af6:	e0b5      	b.n	8008c64 <UART_SetConfig+0xa94>
 8008af8:	03d09000 	.word	0x03d09000
 8008afc:	003d0900 	.word	0x003d0900
 8008b00:	08012bac 	.word	0x08012bac
 8008b04:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b08:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008b0c:	2b20      	cmp	r3, #32
 8008b0e:	dc49      	bgt.n	8008ba4 <UART_SetConfig+0x9d4>
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	db7c      	blt.n	8008c0e <UART_SetConfig+0xa3e>
 8008b14:	2b20      	cmp	r3, #32
 8008b16:	d87a      	bhi.n	8008c0e <UART_SetConfig+0xa3e>
 8008b18:	a201      	add	r2, pc, #4	; (adr r2, 8008b20 <UART_SetConfig+0x950>)
 8008b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b1e:	bf00      	nop
 8008b20:	08008bab 	.word	0x08008bab
 8008b24:	08008bb3 	.word	0x08008bb3
 8008b28:	08008c0f 	.word	0x08008c0f
 8008b2c:	08008c0f 	.word	0x08008c0f
 8008b30:	08008bbb 	.word	0x08008bbb
 8008b34:	08008c0f 	.word	0x08008c0f
 8008b38:	08008c0f 	.word	0x08008c0f
 8008b3c:	08008c0f 	.word	0x08008c0f
 8008b40:	08008bcb 	.word	0x08008bcb
 8008b44:	08008c0f 	.word	0x08008c0f
 8008b48:	08008c0f 	.word	0x08008c0f
 8008b4c:	08008c0f 	.word	0x08008c0f
 8008b50:	08008c0f 	.word	0x08008c0f
 8008b54:	08008c0f 	.word	0x08008c0f
 8008b58:	08008c0f 	.word	0x08008c0f
 8008b5c:	08008c0f 	.word	0x08008c0f
 8008b60:	08008bdb 	.word	0x08008bdb
 8008b64:	08008c0f 	.word	0x08008c0f
 8008b68:	08008c0f 	.word	0x08008c0f
 8008b6c:	08008c0f 	.word	0x08008c0f
 8008b70:	08008c0f 	.word	0x08008c0f
 8008b74:	08008c0f 	.word	0x08008c0f
 8008b78:	08008c0f 	.word	0x08008c0f
 8008b7c:	08008c0f 	.word	0x08008c0f
 8008b80:	08008c0f 	.word	0x08008c0f
 8008b84:	08008c0f 	.word	0x08008c0f
 8008b88:	08008c0f 	.word	0x08008c0f
 8008b8c:	08008c0f 	.word	0x08008c0f
 8008b90:	08008c0f 	.word	0x08008c0f
 8008b94:	08008c0f 	.word	0x08008c0f
 8008b98:	08008c0f 	.word	0x08008c0f
 8008b9c:	08008c0f 	.word	0x08008c0f
 8008ba0:	08008c01 	.word	0x08008c01
 8008ba4:	2b40      	cmp	r3, #64	; 0x40
 8008ba6:	d02e      	beq.n	8008c06 <UART_SetConfig+0xa36>
 8008ba8:	e031      	b.n	8008c0e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008baa:	f7fa fca1 	bl	80034f0 <HAL_RCC_GetPCLK1Freq>
 8008bae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008bb0:	e033      	b.n	8008c1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008bb2:	f7fa fcb3 	bl	800351c <HAL_RCC_GetPCLK2Freq>
 8008bb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008bb8:	e02f      	b.n	8008c1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f7fc fce4 	bl	800558c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bc8:	e027      	b.n	8008c1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008bca:	f107 0318 	add.w	r3, r7, #24
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7fc fe30 	bl	8005834 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008bd4:	69fb      	ldr	r3, [r7, #28]
 8008bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bd8:	e01f      	b.n	8008c1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bda:	4b2d      	ldr	r3, [pc, #180]	; (8008c90 <UART_SetConfig+0xac0>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 0320 	and.w	r3, r3, #32
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d009      	beq.n	8008bfa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008be6:	4b2a      	ldr	r3, [pc, #168]	; (8008c90 <UART_SetConfig+0xac0>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	08db      	lsrs	r3, r3, #3
 8008bec:	f003 0303 	and.w	r3, r3, #3
 8008bf0:	4a28      	ldr	r2, [pc, #160]	; (8008c94 <UART_SetConfig+0xac4>)
 8008bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8008bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008bf8:	e00f      	b.n	8008c1a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008bfa:	4b26      	ldr	r3, [pc, #152]	; (8008c94 <UART_SetConfig+0xac4>)
 8008bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bfe:	e00c      	b.n	8008c1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008c00:	4b25      	ldr	r3, [pc, #148]	; (8008c98 <UART_SetConfig+0xac8>)
 8008c02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c04:	e009      	b.n	8008c1a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c0c:	e005      	b.n	8008c1a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008c18:	bf00      	nop
    }

    if (pclk != 0U)
 8008c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d021      	beq.n	8008c64 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c24:	4a1d      	ldr	r2, [pc, #116]	; (8008c9c <UART_SetConfig+0xacc>)
 8008c26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c2e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	085b      	lsrs	r3, r3, #1
 8008c38:	441a      	add	r2, r3
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c42:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c46:	2b0f      	cmp	r3, #15
 8008c48:	d909      	bls.n	8008c5e <UART_SetConfig+0xa8e>
 8008c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c50:	d205      	bcs.n	8008c5e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c54:	b29a      	uxth	r2, r3
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	60da      	str	r2, [r3, #12]
 8008c5c:	e002      	b.n	8008c64 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	2201      	movs	r2, #1
 8008c70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	2200      	movs	r2, #0
 8008c78:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008c80:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3748      	adds	r7, #72	; 0x48
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c8e:	bf00      	nop
 8008c90:	58024400 	.word	0x58024400
 8008c94:	03d09000 	.word	0x03d09000
 8008c98:	003d0900 	.word	0x003d0900
 8008c9c:	08012bac 	.word	0x08012bac

08008ca0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cac:	f003 0301 	and.w	r3, r3, #1
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d00a      	beq.n	8008cca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	430a      	orrs	r2, r1
 8008cc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cce:	f003 0302 	and.w	r3, r3, #2
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00a      	beq.n	8008cec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	430a      	orrs	r2, r1
 8008cea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf0:	f003 0304 	and.w	r3, r3, #4
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d00a      	beq.n	8008d0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	430a      	orrs	r2, r1
 8008d0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d12:	f003 0308 	and.w	r3, r3, #8
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00a      	beq.n	8008d30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	430a      	orrs	r2, r1
 8008d2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d34:	f003 0310 	and.w	r3, r3, #16
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00a      	beq.n	8008d52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	430a      	orrs	r2, r1
 8008d50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d56:	f003 0320 	and.w	r3, r3, #32
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00a      	beq.n	8008d74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	430a      	orrs	r2, r1
 8008d72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d01a      	beq.n	8008db6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	430a      	orrs	r2, r1
 8008d94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d9e:	d10a      	bne.n	8008db6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	430a      	orrs	r2, r1
 8008db4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00a      	beq.n	8008dd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	430a      	orrs	r2, r1
 8008dd6:	605a      	str	r2, [r3, #4]
  }
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b098      	sub	sp, #96	; 0x60
 8008de8:	af02      	add	r7, sp, #8
 8008dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008df4:	f7f8 fd52 	bl	800189c <HAL_GetTick>
 8008df8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 0308 	and.w	r3, r3, #8
 8008e04:	2b08      	cmp	r3, #8
 8008e06:	d12f      	bne.n	8008e68 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e0c:	9300      	str	r3, [sp, #0]
 8008e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e10:	2200      	movs	r2, #0
 8008e12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f88e 	bl	8008f38 <UART_WaitOnFlagUntilTimeout>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d022      	beq.n	8008e68 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e2a:	e853 3f00 	ldrex	r3, [r3]
 8008e2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e36:	653b      	str	r3, [r7, #80]	; 0x50
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e40:	647b      	str	r3, [r7, #68]	; 0x44
 8008e42:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008e46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e48:	e841 2300 	strex	r3, r2, [r1]
 8008e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1e6      	bne.n	8008e22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2220      	movs	r2, #32
 8008e58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008e64:	2303      	movs	r3, #3
 8008e66:	e063      	b.n	8008f30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f003 0304 	and.w	r3, r3, #4
 8008e72:	2b04      	cmp	r3, #4
 8008e74:	d149      	bne.n	8008f0a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008e76:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008e7a:	9300      	str	r3, [sp, #0]
 8008e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f000 f857 	bl	8008f38 <UART_WaitOnFlagUntilTimeout>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d03c      	beq.n	8008f0a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e98:	e853 3f00 	ldrex	r3, [r3]
 8008e9c:	623b      	str	r3, [r7, #32]
   return(result);
 8008e9e:	6a3b      	ldr	r3, [r7, #32]
 8008ea0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ea4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008eae:	633b      	str	r3, [r7, #48]	; 0x30
 8008eb0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008eb6:	e841 2300 	strex	r3, r2, [r1]
 8008eba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d1e6      	bne.n	8008e90 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	3308      	adds	r3, #8
 8008ec8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	e853 3f00 	ldrex	r3, [r3]
 8008ed0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f023 0301 	bic.w	r3, r3, #1
 8008ed8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	3308      	adds	r3, #8
 8008ee0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ee2:	61fa      	str	r2, [r7, #28]
 8008ee4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee6:	69b9      	ldr	r1, [r7, #24]
 8008ee8:	69fa      	ldr	r2, [r7, #28]
 8008eea:	e841 2300 	strex	r3, r2, [r1]
 8008eee:	617b      	str	r3, [r7, #20]
   return(result);
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1e5      	bne.n	8008ec2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2220      	movs	r2, #32
 8008efa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f06:	2303      	movs	r3, #3
 8008f08:	e012      	b.n	8008f30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2220      	movs	r2, #32
 8008f0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2220      	movs	r2, #32
 8008f16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f2e:	2300      	movs	r3, #0
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3758      	adds	r7, #88	; 0x58
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	603b      	str	r3, [r7, #0]
 8008f44:	4613      	mov	r3, r2
 8008f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f48:	e049      	b.n	8008fde <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f50:	d045      	beq.n	8008fde <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f52:	f7f8 fca3 	bl	800189c <HAL_GetTick>
 8008f56:	4602      	mov	r2, r0
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	1ad3      	subs	r3, r2, r3
 8008f5c:	69ba      	ldr	r2, [r7, #24]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d302      	bcc.n	8008f68 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d101      	bne.n	8008f6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	e048      	b.n	8008ffe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f003 0304 	and.w	r3, r3, #4
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d031      	beq.n	8008fde <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	69db      	ldr	r3, [r3, #28]
 8008f80:	f003 0308 	and.w	r3, r3, #8
 8008f84:	2b08      	cmp	r3, #8
 8008f86:	d110      	bne.n	8008faa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2208      	movs	r2, #8
 8008f8e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008f90:	68f8      	ldr	r0, [r7, #12]
 8008f92:	f000 f839 	bl	8009008 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2208      	movs	r2, #8
 8008f9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	e029      	b.n	8008ffe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	69db      	ldr	r3, [r3, #28]
 8008fb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008fb8:	d111      	bne.n	8008fde <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fc2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f000 f81f 	bl	8009008 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2220      	movs	r2, #32
 8008fce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e00f      	b.n	8008ffe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	69da      	ldr	r2, [r3, #28]
 8008fe4:	68bb      	ldr	r3, [r7, #8]
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	68ba      	ldr	r2, [r7, #8]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	bf0c      	ite	eq
 8008fee:	2301      	moveq	r3, #1
 8008ff0:	2300      	movne	r3, #0
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	79fb      	ldrb	r3, [r7, #7]
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d0a6      	beq.n	8008f4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ffc:	2300      	movs	r3, #0
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
	...

08009008 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009008:	b480      	push	{r7}
 800900a:	b095      	sub	sp, #84	; 0x54
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009018:	e853 3f00 	ldrex	r3, [r3]
 800901c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800901e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009020:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009024:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	461a      	mov	r2, r3
 800902c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800902e:	643b      	str	r3, [r7, #64]	; 0x40
 8009030:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009032:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009034:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009036:	e841 2300 	strex	r3, r2, [r1]
 800903a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800903c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800903e:	2b00      	cmp	r3, #0
 8009040:	d1e6      	bne.n	8009010 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	3308      	adds	r3, #8
 8009048:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904a:	6a3b      	ldr	r3, [r7, #32]
 800904c:	e853 3f00 	ldrex	r3, [r3]
 8009050:	61fb      	str	r3, [r7, #28]
   return(result);
 8009052:	69fa      	ldr	r2, [r7, #28]
 8009054:	4b1e      	ldr	r3, [pc, #120]	; (80090d0 <UART_EndRxTransfer+0xc8>)
 8009056:	4013      	ands	r3, r2
 8009058:	64bb      	str	r3, [r7, #72]	; 0x48
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	3308      	adds	r3, #8
 8009060:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009062:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009064:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009066:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009068:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800906a:	e841 2300 	strex	r3, r2, [r1]
 800906e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1e5      	bne.n	8009042 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800907a:	2b01      	cmp	r3, #1
 800907c:	d118      	bne.n	80090b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	e853 3f00 	ldrex	r3, [r3]
 800908a:	60bb      	str	r3, [r7, #8]
   return(result);
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	f023 0310 	bic.w	r3, r3, #16
 8009092:	647b      	str	r3, [r7, #68]	; 0x44
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	461a      	mov	r2, r3
 800909a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800909c:	61bb      	str	r3, [r7, #24]
 800909e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a0:	6979      	ldr	r1, [r7, #20]
 80090a2:	69ba      	ldr	r2, [r7, #24]
 80090a4:	e841 2300 	strex	r3, r2, [r1]
 80090a8:	613b      	str	r3, [r7, #16]
   return(result);
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d1e6      	bne.n	800907e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2220      	movs	r2, #32
 80090b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2200      	movs	r2, #0
 80090bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2200      	movs	r2, #0
 80090c2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80090c4:	bf00      	nop
 80090c6:	3754      	adds	r7, #84	; 0x54
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr
 80090d0:	effffffe 	.word	0xeffffffe

080090d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d101      	bne.n	80090ea <HAL_UARTEx_DisableFifoMode+0x16>
 80090e6:	2302      	movs	r3, #2
 80090e8:	e027      	b.n	800913a <HAL_UARTEx_DisableFifoMode+0x66>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2201      	movs	r2, #1
 80090ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2224      	movs	r2, #36	; 0x24
 80090f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f022 0201 	bic.w	r2, r2, #1
 8009110:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009118:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68fa      	ldr	r2, [r7, #12]
 8009126:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2220      	movs	r2, #32
 800912c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3714      	adds	r7, #20
 800913e:	46bd      	mov	sp, r7
 8009140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009144:	4770      	bx	lr

08009146 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009146:	b580      	push	{r7, lr}
 8009148:	b084      	sub	sp, #16
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009156:	2b01      	cmp	r3, #1
 8009158:	d101      	bne.n	800915e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800915a:	2302      	movs	r3, #2
 800915c:	e02d      	b.n	80091ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2201      	movs	r2, #1
 8009162:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2224      	movs	r2, #36	; 0x24
 800916a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	681a      	ldr	r2, [r3, #0]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f022 0201 	bic.w	r2, r2, #1
 8009184:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	683a      	ldr	r2, [r7, #0]
 8009196:	430a      	orrs	r2, r1
 8009198:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 f850 	bl	8009240 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2220      	movs	r2, #32
 80091ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2200      	movs	r2, #0
 80091b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80091b8:	2300      	movs	r3, #0
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	3710      	adds	r7, #16
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}

080091c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091c2:	b580      	push	{r7, lr}
 80091c4:	b084      	sub	sp, #16
 80091c6:	af00      	add	r7, sp, #0
 80091c8:	6078      	str	r0, [r7, #4]
 80091ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80091d2:	2b01      	cmp	r3, #1
 80091d4:	d101      	bne.n	80091da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80091d6:	2302      	movs	r3, #2
 80091d8:	e02d      	b.n	8009236 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2201      	movs	r2, #1
 80091de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2224      	movs	r2, #36	; 0x24
 80091e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f022 0201 	bic.w	r2, r2, #1
 8009200:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	683a      	ldr	r2, [r7, #0]
 8009212:	430a      	orrs	r2, r1
 8009214:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f812 	bl	8009240 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2220      	movs	r2, #32
 8009228:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2200      	movs	r2, #0
 8009230:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3710      	adds	r7, #16
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
	...

08009240 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009240:	b480      	push	{r7}
 8009242:	b085      	sub	sp, #20
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800924c:	2b00      	cmp	r3, #0
 800924e:	d108      	bne.n	8009262 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2201      	movs	r2, #1
 8009254:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2201      	movs	r2, #1
 800925c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009260:	e031      	b.n	80092c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009262:	2310      	movs	r3, #16
 8009264:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009266:	2310      	movs	r3, #16
 8009268:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	689b      	ldr	r3, [r3, #8]
 8009270:	0e5b      	lsrs	r3, r3, #25
 8009272:	b2db      	uxtb	r3, r3
 8009274:	f003 0307 	and.w	r3, r3, #7
 8009278:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	0f5b      	lsrs	r3, r3, #29
 8009282:	b2db      	uxtb	r3, r3
 8009284:	f003 0307 	and.w	r3, r3, #7
 8009288:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800928a:	7bbb      	ldrb	r3, [r7, #14]
 800928c:	7b3a      	ldrb	r2, [r7, #12]
 800928e:	4911      	ldr	r1, [pc, #68]	; (80092d4 <UARTEx_SetNbDataToProcess+0x94>)
 8009290:	5c8a      	ldrb	r2, [r1, r2]
 8009292:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009296:	7b3a      	ldrb	r2, [r7, #12]
 8009298:	490f      	ldr	r1, [pc, #60]	; (80092d8 <UARTEx_SetNbDataToProcess+0x98>)
 800929a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800929c:	fb93 f3f2 	sdiv	r3, r3, r2
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80092a8:	7bfb      	ldrb	r3, [r7, #15]
 80092aa:	7b7a      	ldrb	r2, [r7, #13]
 80092ac:	4909      	ldr	r1, [pc, #36]	; (80092d4 <UARTEx_SetNbDataToProcess+0x94>)
 80092ae:	5c8a      	ldrb	r2, [r1, r2]
 80092b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80092b4:	7b7a      	ldrb	r2, [r7, #13]
 80092b6:	4908      	ldr	r1, [pc, #32]	; (80092d8 <UARTEx_SetNbDataToProcess+0x98>)
 80092b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80092ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80092be:	b29a      	uxth	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80092c6:	bf00      	nop
 80092c8:	3714      	adds	r7, #20
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	08012bc4 	.word	0x08012bc4
 80092d8:	08012bcc 	.word	0x08012bcc

080092dc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80092dc:	b084      	sub	sp, #16
 80092de:	b480      	push	{r7}
 80092e0:	b085      	sub	sp, #20
 80092e2:	af00      	add	r7, sp, #0
 80092e4:	6078      	str	r0, [r7, #4]
 80092e6:	f107 001c 	add.w	r0, r7, #28
 80092ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80092ee:	2300      	movs	r3, #0
 80092f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80092f2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80092f4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80092f6:	431a      	orrs	r2, r3
             Init.BusWide             | \
 80092f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 80092fa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 80092fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 80092fe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8009302:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8009304:	68fa      	ldr	r2, [r7, #12]
 8009306:	4313      	orrs	r3, r2
 8009308:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	685a      	ldr	r2, [r3, #4]
 800930e:	4b07      	ldr	r3, [pc, #28]	; (800932c <SDMMC_Init+0x50>)
 8009310:	4013      	ands	r3, r2
 8009312:	68fa      	ldr	r2, [r7, #12]
 8009314:	431a      	orrs	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3714      	adds	r7, #20
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	b004      	add	sp, #16
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	ffc02c00 	.word	0xffc02c00

08009330 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800933e:	4618      	mov	r0, r3
 8009340:	370c      	adds	r7, #12
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr

0800934a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800934a:	b480      	push	{r7}
 800934c:	b083      	sub	sp, #12
 800934e:	af00      	add	r7, sp, #0
 8009350:	6078      	str	r0, [r7, #4]
 8009352:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800935e:	2300      	movs	r3, #0
}
 8009360:	4618      	mov	r0, r3
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f043 0203 	orr.w	r2, r3, #3
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	370c      	adds	r7, #12
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr

0800938e <SDMMC_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_OFF(SDMMC_TypeDef *SDMMCx)
{
 800938e:	b480      	push	{r7}
 8009390:	b083      	sub	sp, #12
 8009392:	af00      	add	r7, sp, #0
 8009394:	6078      	str	r0, [r7, #4]
  /* Set power state to OFF */
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f023 0203 	bic.w	r2, r3, #3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	370c      	adds	r7, #12
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f003 0303 	and.w	r3, r3, #3
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80093d6:	2300      	movs	r3, #0
 80093d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80093ea:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80093f0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80093f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80093f8:	68fa      	ldr	r2, [r7, #12]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	68da      	ldr	r2, [r3, #12]
 8009402:	4b06      	ldr	r3, [pc, #24]	; (800941c <SDMMC_SendCommand+0x50>)
 8009404:	4013      	ands	r3, r2
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	431a      	orrs	r2, r3
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	3714      	adds	r7, #20
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr
 800941c:	fffee0c0 	.word	0xfffee0c0

08009420 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	b2db      	uxtb	r3, r3
}
 800942e:	4618      	mov	r0, r3
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800943a:	b480      	push	{r7}
 800943c:	b085      	sub	sp, #20
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	3314      	adds	r3, #20
 8009448:	461a      	mov	r2, r3
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	4413      	add	r3, r2
 800944e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
}
 8009454:	4618      	mov	r0, r3
 8009456:	3714      	adds	r7, #20
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8009460:	b480      	push	{r7}
 8009462:	b085      	sub	sp, #20
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
 8009468:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800946a:	2300      	movs	r3, #0
 800946c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	685a      	ldr	r2, [r3, #4]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009486:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800948c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8009492:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	4313      	orrs	r3, r2
 8009498:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800949e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	431a      	orrs	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80094aa:	2300      	movs	r3, #0

}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3714      	adds	r7, #20
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b088      	sub	sp, #32
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80094c6:	2310      	movs	r3, #16
 80094c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80094ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80094d0:	2300      	movs	r3, #0
 80094d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80094d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80094da:	f107 0308 	add.w	r3, r7, #8
 80094de:	4619      	mov	r1, r3
 80094e0:	6878      	ldr	r0, [r7, #4]
 80094e2:	f7ff ff73 	bl	80093cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80094e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80094ea:	2110      	movs	r1, #16
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 fa5f 	bl	80099b0 <SDMMC_GetCmdResp1>
 80094f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094f4:	69fb      	ldr	r3, [r7, #28]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3720      	adds	r7, #32
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}

080094fe <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b088      	sub	sp, #32
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
 8009506:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800950c:	2311      	movs	r3, #17
 800950e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009510:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009514:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009516:	2300      	movs	r3, #0
 8009518:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800951a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800951e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009520:	f107 0308 	add.w	r3, r7, #8
 8009524:	4619      	mov	r1, r3
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	f7ff ff50 	bl	80093cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800952c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009530:	2111      	movs	r1, #17
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 fa3c 	bl	80099b0 <SDMMC_GetCmdResp1>
 8009538:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800953a:	69fb      	ldr	r3, [r7, #28]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3720      	adds	r7, #32
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}

08009544 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b088      	sub	sp, #32
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009552:	2312      	movs	r3, #18
 8009554:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009556:	f44f 7380 	mov.w	r3, #256	; 0x100
 800955a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800955c:	2300      	movs	r3, #0
 800955e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009564:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009566:	f107 0308 	add.w	r3, r7, #8
 800956a:	4619      	mov	r1, r3
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f7ff ff2d 	bl	80093cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009572:	f241 3288 	movw	r2, #5000	; 0x1388
 8009576:	2112      	movs	r1, #18
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 fa19 	bl	80099b0 <SDMMC_GetCmdResp1>
 800957e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009580:	69fb      	ldr	r3, [r7, #28]
}
 8009582:	4618      	mov	r0, r3
 8009584:	3720      	adds	r7, #32
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b088      	sub	sp, #32
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009598:	2318      	movs	r3, #24
 800959a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800959c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095a2:	2300      	movs	r3, #0
 80095a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095ac:	f107 0308 	add.w	r3, r7, #8
 80095b0:	4619      	mov	r1, r3
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f7ff ff0a 	bl	80093cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80095b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80095bc:	2118      	movs	r1, #24
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f9f6 	bl	80099b0 <SDMMC_GetCmdResp1>
 80095c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80095c6:	69fb      	ldr	r3, [r7, #28]
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3720      	adds	r7, #32
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b088      	sub	sp, #32
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80095de:	2319      	movs	r3, #25
 80095e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80095e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80095e8:	2300      	movs	r3, #0
 80095ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80095ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80095f2:	f107 0308 	add.w	r3, r7, #8
 80095f6:	4619      	mov	r1, r3
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f7ff fee7 	bl	80093cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80095fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009602:	2119      	movs	r1, #25
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 f9d3 	bl	80099b0 <SDMMC_GetCmdResp1>
 800960a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800960c:	69fb      	ldr	r3, [r7, #28]
}
 800960e:	4618      	mov	r0, r3
 8009610:	3720      	adds	r7, #32
 8009612:	46bd      	mov	sp, r7
 8009614:	bd80      	pop	{r7, pc}
	...

08009618 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b088      	sub	sp, #32
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009620:	2300      	movs	r3, #0
 8009622:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009624:	230c      	movs	r3, #12
 8009626:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800962c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800962e:	2300      	movs	r3, #0
 8009630:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009632:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009636:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009650:	f107 0308 	add.w	r3, r7, #8
 8009654:	4619      	mov	r1, r3
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f7ff feb8 	bl	80093cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800965c:	4a0b      	ldr	r2, [pc, #44]	; (800968c <SDMMC_CmdStopTransfer+0x74>)
 800965e:	210c      	movs	r1, #12
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 f9a5 	bl	80099b0 <SDMMC_GetCmdResp1>
 8009666:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800967a:	d101      	bne.n	8009680 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800967c:	2300      	movs	r3, #0
 800967e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8009680:	69fb      	ldr	r3, [r7, #28]
}
 8009682:	4618      	mov	r0, r3
 8009684:	3720      	adds	r7, #32
 8009686:	46bd      	mov	sp, r7
 8009688:	bd80      	pop	{r7, pc}
 800968a:	bf00      	nop
 800968c:	05f5e100 	.word	0x05f5e100

08009690 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b088      	sub	sp, #32
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800969e:	2307      	movs	r3, #7
 80096a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80096a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80096a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096a8:	2300      	movs	r3, #0
 80096aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096b2:	f107 0308 	add.w	r3, r7, #8
 80096b6:	4619      	mov	r1, r3
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f7ff fe87 	bl	80093cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80096be:	f241 3288 	movw	r2, #5000	; 0x1388
 80096c2:	2107      	movs	r1, #7
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f000 f973 	bl	80099b0 <SDMMC_GetCmdResp1>
 80096ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096cc:	69fb      	ldr	r3, [r7, #28]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3720      	adds	r7, #32
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b088      	sub	sp, #32
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80096de:	2300      	movs	r3, #0
 80096e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80096e2:	2300      	movs	r3, #0
 80096e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80096e6:	2300      	movs	r3, #0
 80096e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80096ea:	2300      	movs	r3, #0
 80096ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80096ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80096f4:	f107 0308 	add.w	r3, r7, #8
 80096f8:	4619      	mov	r1, r3
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f7ff fe66 	bl	80093cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fb97 	bl	8009e34 <SDMMC_GetCmdError>
 8009706:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009708:	69fb      	ldr	r3, [r7, #28]
}
 800970a:	4618      	mov	r0, r3
 800970c:	3720      	adds	r7, #32
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009712:	b580      	push	{r7, lr}
 8009714:	b088      	sub	sp, #32
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800971a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800971e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009720:	2308      	movs	r3, #8
 8009722:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009724:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009728:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800972a:	2300      	movs	r3, #0
 800972c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800972e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009732:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009734:	f107 0308 	add.w	r3, r7, #8
 8009738:	4619      	mov	r1, r3
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f7ff fe46 	bl	80093cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 fb29 	bl	8009d98 <SDMMC_GetCmdResp7>
 8009746:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009748:	69fb      	ldr	r3, [r7, #28]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3720      	adds	r7, #32
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009752:	b580      	push	{r7, lr}
 8009754:	b088      	sub	sp, #32
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
 800975a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009760:	2337      	movs	r3, #55	; 0x37
 8009762:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009764:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009768:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800976a:	2300      	movs	r3, #0
 800976c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800976e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009772:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009774:	f107 0308 	add.w	r3, r7, #8
 8009778:	4619      	mov	r1, r3
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f7ff fe26 	bl	80093cc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009780:	f241 3288 	movw	r2, #5000	; 0x1388
 8009784:	2137      	movs	r1, #55	; 0x37
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 f912 	bl	80099b0 <SDMMC_GetCmdResp1>
 800978c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800978e:	69fb      	ldr	r3, [r7, #28]
}
 8009790:	4618      	mov	r0, r3
 8009792:	3720      	adds	r7, #32
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b088      	sub	sp, #32
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80097a6:	2329      	movs	r3, #41	; 0x29
 80097a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80097aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80097b0:	2300      	movs	r3, #0
 80097b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80097b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097ba:	f107 0308 	add.w	r3, r7, #8
 80097be:	4619      	mov	r1, r3
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f7ff fe03 	bl	80093cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 fa2e 	bl	8009c28 <SDMMC_GetCmdResp3>
 80097cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097ce:	69fb      	ldr	r3, [r7, #28]
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3720      	adds	r7, #32
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b088      	sub	sp, #32
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80097e6:	2306      	movs	r3, #6
 80097e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80097ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80097ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80097f0:	2300      	movs	r3, #0
 80097f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80097f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80097fa:	f107 0308 	add.w	r3, r7, #8
 80097fe:	4619      	mov	r1, r3
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f7ff fde3 	bl	80093cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009806:	f241 3288 	movw	r2, #5000	; 0x1388
 800980a:	2106      	movs	r1, #6
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 f8cf 	bl	80099b0 <SDMMC_GetCmdResp1>
 8009812:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009814:	69fb      	ldr	r3, [r7, #28]
}
 8009816:	4618      	mov	r0, r3
 8009818:	3720      	adds	r7, #32
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b088      	sub	sp, #32
 8009822:	af00      	add	r7, sp, #0
 8009824:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009826:	2300      	movs	r3, #0
 8009828:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800982a:	2333      	movs	r3, #51	; 0x33
 800982c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800982e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009832:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009834:	2300      	movs	r3, #0
 8009836:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800983c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800983e:	f107 0308 	add.w	r3, r7, #8
 8009842:	4619      	mov	r1, r3
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f7ff fdc1 	bl	80093cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800984a:	f241 3288 	movw	r2, #5000	; 0x1388
 800984e:	2133      	movs	r1, #51	; 0x33
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 f8ad 	bl	80099b0 <SDMMC_GetCmdResp1>
 8009856:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009858:	69fb      	ldr	r3, [r7, #28]
}
 800985a:	4618      	mov	r0, r3
 800985c:	3720      	adds	r7, #32
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}

08009862 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009862:	b580      	push	{r7, lr}
 8009864:	b088      	sub	sp, #32
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800986a:	2300      	movs	r3, #0
 800986c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800986e:	2302      	movs	r3, #2
 8009870:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009872:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009876:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009878:	2300      	movs	r3, #0
 800987a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800987c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009880:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009882:	f107 0308 	add.w	r3, r7, #8
 8009886:	4619      	mov	r1, r3
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f7ff fd9f 	bl	80093cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 f980 	bl	8009b94 <SDMMC_GetCmdResp2>
 8009894:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009896:	69fb      	ldr	r3, [r7, #28]
}
 8009898:	4618      	mov	r0, r3
 800989a:	3720      	adds	r7, #32
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b088      	sub	sp, #32
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80098ae:	2309      	movs	r3, #9
 80098b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80098b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80098b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098b8:	2300      	movs	r3, #0
 80098ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80098c2:	f107 0308 	add.w	r3, r7, #8
 80098c6:	4619      	mov	r1, r3
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f7ff fd7f 	bl	80093cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 f960 	bl	8009b94 <SDMMC_GetCmdResp2>
 80098d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098d6:	69fb      	ldr	r3, [r7, #28]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3720      	adds	r7, #32
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b088      	sub	sp, #32
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80098ea:	2300      	movs	r3, #0
 80098ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80098ee:	2303      	movs	r3, #3
 80098f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80098f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80098f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80098f8:	2300      	movs	r3, #0
 80098fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80098fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009900:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009902:	f107 0308 	add.w	r3, r7, #8
 8009906:	4619      	mov	r1, r3
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f7ff fd5f 	bl	80093cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800990e:	683a      	ldr	r2, [r7, #0]
 8009910:	2103      	movs	r1, #3
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 f9c8 	bl	8009ca8 <SDMMC_GetCmdResp6>
 8009918:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800991a:	69fb      	ldr	r3, [r7, #28]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3720      	adds	r7, #32
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b088      	sub	sp, #32
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009932:	230d      	movs	r3, #13
 8009934:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009936:	f44f 7380 	mov.w	r3, #256	; 0x100
 800993a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800993c:	2300      	movs	r3, #0
 800993e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009944:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009946:	f107 0308 	add.w	r3, r7, #8
 800994a:	4619      	mov	r1, r3
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f7ff fd3d 	bl	80093cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009952:	f241 3288 	movw	r2, #5000	; 0x1388
 8009956:	210d      	movs	r1, #13
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 f829 	bl	80099b0 <SDMMC_GetCmdResp1>
 800995e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009960:	69fb      	ldr	r3, [r7, #28]
}
 8009962:	4618      	mov	r0, r3
 8009964:	3720      	adds	r7, #32
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b088      	sub	sp, #32
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009972:	2300      	movs	r3, #0
 8009974:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009976:	230d      	movs	r3, #13
 8009978:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800997a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800997e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009980:	2300      	movs	r3, #0
 8009982:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009984:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009988:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800998a:	f107 0308 	add.w	r3, r7, #8
 800998e:	4619      	mov	r1, r3
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f7ff fd1b 	bl	80093cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009996:	f241 3288 	movw	r2, #5000	; 0x1388
 800999a:	210d      	movs	r1, #13
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f807 	bl	80099b0 <SDMMC_GetCmdResp1>
 80099a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099a4:	69fb      	ldr	r3, [r7, #28]
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3720      	adds	r7, #32
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
	...

080099b0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b088      	sub	sp, #32
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	60f8      	str	r0, [r7, #12]
 80099b8:	460b      	mov	r3, r1
 80099ba:	607a      	str	r2, [r7, #4]
 80099bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80099be:	4b70      	ldr	r3, [pc, #448]	; (8009b80 <SDMMC_GetCmdResp1+0x1d0>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a70      	ldr	r2, [pc, #448]	; (8009b84 <SDMMC_GetCmdResp1+0x1d4>)
 80099c4:	fba2 2303 	umull	r2, r3, r2, r3
 80099c8:	0a5a      	lsrs	r2, r3, #9
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	fb02 f303 	mul.w	r3, r2, r3
 80099d0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80099d2:	69fb      	ldr	r3, [r7, #28]
 80099d4:	1e5a      	subs	r2, r3, #1
 80099d6:	61fa      	str	r2, [r7, #28]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d102      	bne.n	80099e2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80099dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80099e0:	e0c9      	b.n	8009b76 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099e6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80099e8:	69ba      	ldr	r2, [r7, #24]
 80099ea:	4b67      	ldr	r3, [pc, #412]	; (8009b88 <SDMMC_GetCmdResp1+0x1d8>)
 80099ec:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d0ef      	beq.n	80099d2 <SDMMC_GetCmdResp1+0x22>
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1ea      	bne.n	80099d2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a00:	f003 0304 	and.w	r3, r3, #4
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d004      	beq.n	8009a12 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2204      	movs	r2, #4
 8009a0c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009a0e:	2304      	movs	r3, #4
 8009a10:	e0b1      	b.n	8009b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a16:	f003 0301 	and.w	r3, r3, #1
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d004      	beq.n	8009a28 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2201      	movs	r2, #1
 8009a22:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a24:	2301      	movs	r3, #1
 8009a26:	e0a6      	b.n	8009b76 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	4a58      	ldr	r2, [pc, #352]	; (8009b8c <SDMMC_GetCmdResp1+0x1dc>)
 8009a2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009a2e:	68f8      	ldr	r0, [r7, #12]
 8009a30:	f7ff fcf6 	bl	8009420 <SDMMC_GetCommandResponse>
 8009a34:	4603      	mov	r3, r0
 8009a36:	461a      	mov	r2, r3
 8009a38:	7afb      	ldrb	r3, [r7, #11]
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d001      	beq.n	8009a42 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e099      	b.n	8009b76 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009a42:	2100      	movs	r1, #0
 8009a44:	68f8      	ldr	r0, [r7, #12]
 8009a46:	f7ff fcf8 	bl	800943a <SDMMC_GetResponse>
 8009a4a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009a4c:	697a      	ldr	r2, [r7, #20]
 8009a4e:	4b50      	ldr	r3, [pc, #320]	; (8009b90 <SDMMC_GetCmdResp1+0x1e0>)
 8009a50:	4013      	ands	r3, r2
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d101      	bne.n	8009a5a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009a56:	2300      	movs	r3, #0
 8009a58:	e08d      	b.n	8009b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	da02      	bge.n	8009a66 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009a60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a64:	e087      	b.n	8009b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009a66:	697b      	ldr	r3, [r7, #20]
 8009a68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d001      	beq.n	8009a74 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009a70:	2340      	movs	r3, #64	; 0x40
 8009a72:	e080      	b.n	8009b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d001      	beq.n	8009a82 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009a7e:	2380      	movs	r3, #128	; 0x80
 8009a80:	e079      	b.n	8009b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d002      	beq.n	8009a92 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009a8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a90:	e071      	b.n	8009b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d002      	beq.n	8009aa2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009a9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009aa0:	e069      	b.n	8009b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d002      	beq.n	8009ab2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009aac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ab0:	e061      	b.n	8009b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d002      	beq.n	8009ac2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009abc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009ac0:	e059      	b.n	8009b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d002      	beq.n	8009ad2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ad0:	e051      	b.n	8009b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d002      	beq.n	8009ae2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ae0:	e049      	b.n	8009b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d002      	beq.n	8009af2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009aec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009af0:	e041      	b.n	8009b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d002      	beq.n	8009b02 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009afc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b00:	e039      	b.n	8009b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d002      	beq.n	8009b12 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009b0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009b10:	e031      	b.n	8009b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d002      	beq.n	8009b22 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009b1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009b20:	e029      	b.n	8009b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d002      	beq.n	8009b32 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009b2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009b30:	e021      	b.n	8009b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d002      	beq.n	8009b42 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009b3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009b40:	e019      	b.n	8009b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d002      	beq.n	8009b52 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009b4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009b50:	e011      	b.n	8009b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d002      	beq.n	8009b62 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009b5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009b60:	e009      	b.n	8009b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	f003 0308 	and.w	r3, r3, #8
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d002      	beq.n	8009b72 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009b6c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009b70:	e001      	b.n	8009b76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009b72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3720      	adds	r7, #32
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	24000000 	.word	0x24000000
 8009b84:	10624dd3 	.word	0x10624dd3
 8009b88:	00200045 	.word	0x00200045
 8009b8c:	002000c5 	.word	0x002000c5
 8009b90:	fdffe008 	.word	0xfdffe008

08009b94 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009b94:	b480      	push	{r7}
 8009b96:	b085      	sub	sp, #20
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009b9c:	4b1f      	ldr	r3, [pc, #124]	; (8009c1c <SDMMC_GetCmdResp2+0x88>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a1f      	ldr	r2, [pc, #124]	; (8009c20 <SDMMC_GetCmdResp2+0x8c>)
 8009ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ba6:	0a5b      	lsrs	r3, r3, #9
 8009ba8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bac:	fb02 f303 	mul.w	r3, r2, r3
 8009bb0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	1e5a      	subs	r2, r3, #1
 8009bb6:	60fa      	str	r2, [r7, #12]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d102      	bne.n	8009bc2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009bbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009bc0:	e026      	b.n	8009c10 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bc6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d0ef      	beq.n	8009bb2 <SDMMC_GetCmdResp2+0x1e>
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1ea      	bne.n	8009bb2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be0:	f003 0304 	and.w	r3, r3, #4
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d004      	beq.n	8009bf2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2204      	movs	r2, #4
 8009bec:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009bee:	2304      	movs	r3, #4
 8009bf0:	e00e      	b.n	8009c10 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bf6:	f003 0301 	and.w	r3, r3, #1
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d004      	beq.n	8009c08 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2201      	movs	r2, #1
 8009c02:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009c04:	2301      	movs	r3, #1
 8009c06:	e003      	b.n	8009c10 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4a06      	ldr	r2, [pc, #24]	; (8009c24 <SDMMC_GetCmdResp2+0x90>)
 8009c0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009c0e:	2300      	movs	r3, #0
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3714      	adds	r7, #20
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr
 8009c1c:	24000000 	.word	0x24000000
 8009c20:	10624dd3 	.word	0x10624dd3
 8009c24:	002000c5 	.word	0x002000c5

08009c28 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009c30:	4b1a      	ldr	r3, [pc, #104]	; (8009c9c <SDMMC_GetCmdResp3+0x74>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a1a      	ldr	r2, [pc, #104]	; (8009ca0 <SDMMC_GetCmdResp3+0x78>)
 8009c36:	fba2 2303 	umull	r2, r3, r2, r3
 8009c3a:	0a5b      	lsrs	r3, r3, #9
 8009c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c40:	fb02 f303 	mul.w	r3, r2, r3
 8009c44:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	1e5a      	subs	r2, r3, #1
 8009c4a:	60fa      	str	r2, [r7, #12]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d102      	bne.n	8009c56 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c54:	e01b      	b.n	8009c8e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c5a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d0ef      	beq.n	8009c46 <SDMMC_GetCmdResp3+0x1e>
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d1ea      	bne.n	8009c46 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c74:	f003 0304 	and.w	r3, r3, #4
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d004      	beq.n	8009c86 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2204      	movs	r2, #4
 8009c80:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009c82:	2304      	movs	r3, #4
 8009c84:	e003      	b.n	8009c8e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	4a06      	ldr	r2, [pc, #24]	; (8009ca4 <SDMMC_GetCmdResp3+0x7c>)
 8009c8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009c8c:	2300      	movs	r3, #0
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3714      	adds	r7, #20
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr
 8009c9a:	bf00      	nop
 8009c9c:	24000000 	.word	0x24000000
 8009ca0:	10624dd3 	.word	0x10624dd3
 8009ca4:	002000c5 	.word	0x002000c5

08009ca8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b088      	sub	sp, #32
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	607a      	str	r2, [r7, #4]
 8009cb4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009cb6:	4b35      	ldr	r3, [pc, #212]	; (8009d8c <SDMMC_GetCmdResp6+0xe4>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a35      	ldr	r2, [pc, #212]	; (8009d90 <SDMMC_GetCmdResp6+0xe8>)
 8009cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8009cc0:	0a5b      	lsrs	r3, r3, #9
 8009cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cc6:	fb02 f303 	mul.w	r3, r2, r3
 8009cca:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009ccc:	69fb      	ldr	r3, [r7, #28]
 8009cce:	1e5a      	subs	r2, r3, #1
 8009cd0:	61fa      	str	r2, [r7, #28]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d102      	bne.n	8009cdc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009cd6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009cda:	e052      	b.n	8009d82 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ce0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d0ef      	beq.n	8009ccc <SDMMC_GetCmdResp6+0x24>
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d1ea      	bne.n	8009ccc <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cfa:	f003 0304 	and.w	r3, r3, #4
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d004      	beq.n	8009d0c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	2204      	movs	r2, #4
 8009d06:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d08:	2304      	movs	r3, #4
 8009d0a:	e03a      	b.n	8009d82 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d10:	f003 0301 	and.w	r3, r3, #1
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d004      	beq.n	8009d22 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e02f      	b.n	8009d82 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009d22:	68f8      	ldr	r0, [r7, #12]
 8009d24:	f7ff fb7c 	bl	8009420 <SDMMC_GetCommandResponse>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	7afb      	ldrb	r3, [r7, #11]
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d001      	beq.n	8009d36 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d32:	2301      	movs	r3, #1
 8009d34:	e025      	b.n	8009d82 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	4a16      	ldr	r2, [pc, #88]	; (8009d94 <SDMMC_GetCmdResp6+0xec>)
 8009d3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009d3c:	2100      	movs	r1, #0
 8009d3e:	68f8      	ldr	r0, [r7, #12]
 8009d40:	f7ff fb7b 	bl	800943a <SDMMC_GetResponse>
 8009d44:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d106      	bne.n	8009d5e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	0c1b      	lsrs	r3, r3, #16
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	e011      	b.n	8009d82 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d002      	beq.n	8009d6e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009d68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009d6c:	e009      	b.n	8009d82 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d002      	beq.n	8009d7e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d7c:	e001      	b.n	8009d82 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009d7e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3720      	adds	r7, #32
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	24000000 	.word	0x24000000
 8009d90:	10624dd3 	.word	0x10624dd3
 8009d94:	002000c5 	.word	0x002000c5

08009d98 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b085      	sub	sp, #20
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009da0:	4b22      	ldr	r3, [pc, #136]	; (8009e2c <SDMMC_GetCmdResp7+0x94>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a22      	ldr	r2, [pc, #136]	; (8009e30 <SDMMC_GetCmdResp7+0x98>)
 8009da6:	fba2 2303 	umull	r2, r3, r2, r3
 8009daa:	0a5b      	lsrs	r3, r3, #9
 8009dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8009db0:	fb02 f303 	mul.w	r3, r2, r3
 8009db4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	1e5a      	subs	r2, r3, #1
 8009dba:	60fa      	str	r2, [r7, #12]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d102      	bne.n	8009dc6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009dc0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009dc4:	e02c      	b.n	8009e20 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dca:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d0ef      	beq.n	8009db6 <SDMMC_GetCmdResp7+0x1e>
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1ea      	bne.n	8009db6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009de4:	f003 0304 	and.w	r3, r3, #4
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d004      	beq.n	8009df6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2204      	movs	r2, #4
 8009df0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009df2:	2304      	movs	r3, #4
 8009df4:	e014      	b.n	8009e20 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dfa:	f003 0301 	and.w	r3, r3, #1
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d004      	beq.n	8009e0c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2201      	movs	r2, #1
 8009e06:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	e009      	b.n	8009e20 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d002      	beq.n	8009e1e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2240      	movs	r2, #64	; 0x40
 8009e1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009e1e:	2300      	movs	r3, #0

}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3714      	adds	r7, #20
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr
 8009e2c:	24000000 	.word	0x24000000
 8009e30:	10624dd3 	.word	0x10624dd3

08009e34 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b085      	sub	sp, #20
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009e3c:	4b11      	ldr	r3, [pc, #68]	; (8009e84 <SDMMC_GetCmdError+0x50>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	4a11      	ldr	r2, [pc, #68]	; (8009e88 <SDMMC_GetCmdError+0x54>)
 8009e42:	fba2 2303 	umull	r2, r3, r2, r3
 8009e46:	0a5b      	lsrs	r3, r3, #9
 8009e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e4c:	fb02 f303 	mul.w	r3, r2, r3
 8009e50:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	1e5a      	subs	r2, r3, #1
 8009e56:	60fa      	str	r2, [r7, #12]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d102      	bne.n	8009e62 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e60:	e009      	b.n	8009e76 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d0f1      	beq.n	8009e52 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	4a06      	ldr	r2, [pc, #24]	; (8009e8c <SDMMC_GetCmdError+0x58>)
 8009e72:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8009e74:	2300      	movs	r3, #0
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3714      	adds	r7, #20
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e80:	4770      	bx	lr
 8009e82:	bf00      	nop
 8009e84:	24000000 	.word	0x24000000
 8009e88:	10624dd3 	.word	0x10624dd3
 8009e8c:	002000c5 	.word	0x002000c5

08009e90 <MX_FileX_Init>:
  * @brief  Application FileX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_FileX_Init(VOID *memory_ptr)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b08e      	sub	sp, #56	; 0x38
 8009e94:	af08      	add	r7, sp, #32
 8009e96:	6078      	str	r0, [r7, #4]
  UINT ret = FX_SUCCESS;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	617b      	str	r3, [r7, #20]

  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	613b      	str	r3, [r7, #16]
  /* USER CODE BEGIN 0 */

  /* USER CODE END 0 */

  /*Allocate memory for the main thread's stack*/
  ret = tx_byte_allocate(byte_pool, &pointer, FX_APP_THREAD_STACK_SIZE, TX_NO_WAIT);
 8009ea0:	f107 010c 	add.w	r1, r7, #12
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009eaa:	6938      	ldr	r0, [r7, #16]
 8009eac:	f007 f99e 	bl	80111ec <_txe_byte_allocate>
 8009eb0:	6178      	str	r0, [r7, #20]

  /* Check FX_APP_THREAD_STACK_SIZE allocation*/
  if (ret != FX_SUCCESS)
 8009eb2:	697b      	ldr	r3, [r7, #20]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d001      	beq.n	8009ebc <MX_FileX_Init+0x2c>
  {
    return TX_POOL_ERROR;
 8009eb8:	2302      	movs	r3, #2
 8009eba:	e01d      	b.n	8009ef8 <MX_FileX_Init+0x68>
  }

  /* Create the main thread.  */
  ret = tx_thread_create(&fx_app_thread, FX_APP_THREAD_NAME, fx_app_thread_entry, 0, pointer, FX_APP_THREAD_STACK_SIZE,
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	22b0      	movs	r2, #176	; 0xb0
 8009ec0:	9206      	str	r2, [sp, #24]
 8009ec2:	2201      	movs	r2, #1
 8009ec4:	9205      	str	r2, [sp, #20]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	9204      	str	r2, [sp, #16]
 8009eca:	220a      	movs	r2, #10
 8009ecc:	9203      	str	r2, [sp, #12]
 8009ece:	220a      	movs	r2, #10
 8009ed0:	9202      	str	r2, [sp, #8]
 8009ed2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009ed6:	9201      	str	r2, [sp, #4]
 8009ed8:	9300      	str	r3, [sp, #0]
 8009eda:	2300      	movs	r3, #0
 8009edc:	4a08      	ldr	r2, [pc, #32]	; (8009f00 <MX_FileX_Init+0x70>)
 8009ede:	4909      	ldr	r1, [pc, #36]	; (8009f04 <MX_FileX_Init+0x74>)
 8009ee0:	4809      	ldr	r0, [pc, #36]	; (8009f08 <MX_FileX_Init+0x78>)
 8009ee2:	f007 fbcb 	bl	801167c <_txe_thread_create>
 8009ee6:	6178      	str	r0, [r7, #20]
                         FX_APP_THREAD_PRIO, FX_APP_PREEMPTION_THRESHOLD, FX_APP_THREAD_TIME_SLICE, FX_APP_THREAD_AUTO_START);

  /* Check main thread creation */
  if (ret != FX_SUCCESS)
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d001      	beq.n	8009ef2 <MX_FileX_Init+0x62>
  {
    return TX_THREAD_ERROR;
 8009eee:	230e      	movs	r3, #14
 8009ef0:	e002      	b.n	8009ef8 <MX_FileX_Init+0x68>
  /* USER CODE BEGIN MX_FileX_Init */

  /* USER CODE END MX_FileX_Init */

  /* Initialize FileX.  */
  fx_system_initialize();
 8009ef2:	f002 f8a7 	bl	800c044 <_fx_system_initialize>

  /* USER CODE BEGIN MX_FileX_Init 1*/

  /* USER CODE END MX_FileX_Init 1*/

  return ret;
 8009ef6:	697b      	ldr	r3, [r7, #20]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3718      	adds	r7, #24
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}
 8009f00:	08009f0d 	.word	0x08009f0d
 8009f04:	08012aec 	.word	0x08012aec
 8009f08:	240149b8 	.word	0x240149b8

08009f0c <fx_app_thread_entry>:
 * @brief  Main thread entry.
 * @param thread_input: ULONG user argument used by the thread entry
 * @retval none
 */
void fx_app_thread_entry(ULONG thread_input)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN fx_app_thread_entry 0 */
	fw_update_thread_entry();
 8009f14:	f7f6 fdc1 	bl	8000a9a <fw_update_thread_entry>

	/* Should never reach here */
	assert(0);
 8009f18:	4b02      	ldr	r3, [pc, #8]	; (8009f24 <fx_app_thread_entry+0x18>)
 8009f1a:	4a03      	ldr	r2, [pc, #12]	; (8009f28 <fx_app_thread_entry+0x1c>)
 8009f1c:	217c      	movs	r1, #124	; 0x7c
 8009f1e:	4803      	ldr	r0, [pc, #12]	; (8009f2c <fx_app_thread_entry+0x20>)
 8009f20:	f007 fc9e 	bl	8011860 <__assert_func>
 8009f24:	08012b00 	.word	0x08012b00
 8009f28:	08012bd4 	.word	0x08012bd4
 8009f2c:	08012b04 	.word	0x08012b04

08009f30 <fx_stm32_sd_get_status>:
* @brief Check the SD IP status.
* @param UINT instance SD instance to check
* @retval 0 when ready 1 when busy
*/
INT fx_stm32_sd_get_status(UINT instance)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  INT ret = 0;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN PRE_GET_STATUS */
  UNUSED(instance);
  /* USER CODE END PRE_GET_STATUS */

  if(HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER)
 8009f3c:	4806      	ldr	r0, [pc, #24]	; (8009f58 <fx_stm32_sd_get_status+0x28>)
 8009f3e:	f7fd f849 	bl	8006fd4 <HAL_SD_GetCardState>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b04      	cmp	r3, #4
 8009f46:	d001      	beq.n	8009f4c <fx_stm32_sd_get_status+0x1c>
  {
    ret = 1;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	60fb      	str	r3, [r7, #12]

  /* USER CODE BEGIN POST_GET_STATUS */

  /* USER CODE END POST_GET_STATUS */

  return ret;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	24012164 	.word	0x24012164

08009f5c <fx_stm32_sd_read_blocks>:
* @param UINT start_block the first block to start reading from.
* @param UINT total_blocks total number of blocks to read.
* @retval 0 on success error code otherwise
*/
INT fx_stm32_sd_read_blocks(UINT instance, UINT *buffer, UINT start_block, UINT total_blocks)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b086      	sub	sp, #24
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	60f8      	str	r0, [r7, #12]
 8009f64:	60b9      	str	r1, [r7, #8]
 8009f66:	607a      	str	r2, [r7, #4]
 8009f68:	603b      	str	r3, [r7, #0]
  INT ret = 0;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_READ_BLOCKS */
  UNUSED(instance);
  /* USER CODE END PRE_READ_BLOCKS */

  if(HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)buffer, start_block, total_blocks) != HAL_OK)
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	687a      	ldr	r2, [r7, #4]
 8009f72:	68b9      	ldr	r1, [r7, #8]
 8009f74:	4806      	ldr	r0, [pc, #24]	; (8009f90 <fx_stm32_sd_read_blocks+0x34>)
 8009f76:	f7fc f9a7 	bl	80062c8 <HAL_SD_ReadBlocks_DMA>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d001      	beq.n	8009f84 <fx_stm32_sd_read_blocks+0x28>
  {
    ret = 1;
 8009f80:	2301      	movs	r3, #1
 8009f82:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN POST_READ_BLOCKS */

  /* USER CODE END POST_READ_BLOCKS */

  return ret;
 8009f84:	697b      	ldr	r3, [r7, #20]
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3718      	adds	r7, #24
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	24012164 	.word	0x24012164

08009f94 <fx_stm32_sd_write_blocks>:
* @param UINT start_block the first block to start writing into.
* @param UINT total_blocks total number of blocks to write.
* @retval 0 on success error code otherwise
*/
INT fx_stm32_sd_write_blocks(UINT instance, UINT *buffer, UINT start_block, UINT total_blocks)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b086      	sub	sp, #24
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	607a      	str	r2, [r7, #4]
 8009fa0:	603b      	str	r3, [r7, #0]
  INT ret = 0;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN PRE_WRITE_BLOCKS */
  UNUSED(instance);
  /* USER CODE END PRE_WRITE_BLOCKS */

  if(HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)buffer, start_block, total_blocks) != HAL_OK)
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	68b9      	ldr	r1, [r7, #8]
 8009fac:	4806      	ldr	r0, [pc, #24]	; (8009fc8 <fx_stm32_sd_write_blocks+0x34>)
 8009fae:	f7fc fa33 	bl	8006418 <HAL_SD_WriteBlocks_DMA>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d001      	beq.n	8009fbc <fx_stm32_sd_write_blocks+0x28>
  {
    ret = 1;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	617b      	str	r3, [r7, #20]

  /* USER CODE BEGIN POST_WRITE_BLOCKS */

  /* USER CODE END POST_WRITE_BLOCKS */

  return ret;
 8009fbc:	697b      	ldr	r3, [r7, #20]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3718      	adds	r7, #24
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	24012164 	.word	0x24012164

08009fcc <HAL_SD_TxCpltCallback>:
* @brief SD DMA Tx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_TX_CMPLT */

  /* USER CODE END PRE_TX_CMPLT */

  tx_semaphore_put(&sd_tx_semaphore);
 8009fd4:	4803      	ldr	r0, [pc, #12]	; (8009fe4 <HAL_SD_TxCpltCallback+0x18>)
 8009fd6:	f007 fb33 	bl	8011640 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_TX_CMPLT */

  /* USER CODE END POST_TX_CMPLT */
}
 8009fda:	bf00      	nop
 8009fdc:	3708      	adds	r7, #8
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	24014a68 	.word	0x24014a68

08009fe8 <HAL_SD_RxCpltCallback>:
* @brief SD DMA Rx Transfer completed callbacks
* @param Instance the sd instance
* @retval None
*/
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PRE_RX_CMPLT */

  /* USER CODE END PRE_RX_CMPLT */

  tx_semaphore_put(&sd_rx_semaphore);
 8009ff0:	4803      	ldr	r0, [pc, #12]	; (800a000 <HAL_SD_RxCpltCallback+0x18>)
 8009ff2:	f007 fb25 	bl	8011640 <_txe_semaphore_put>

  /* USER CODE BEGIN POST_RX_CMPLT */

  /* USER CODE END POST_RX_CMPLT */
}
 8009ff6:	bf00      	nop
 8009ff8:	3708      	adds	r7, #8
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	24014a84 	.word	0x24014a84

0800a004 <_fx_directory_entry_write>:
/*  03-02-2021     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1.5  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_directory_entry_write(FX_MEDIA *media_ptr, FX_DIR_ENTRY *entry_ptr)
{
 800a004:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a008:	b0a2      	sub	sp, #136	; 0x88
 800a00a:	af04      	add	r7, sp, #16
 800a00c:	6178      	str	r0, [r7, #20]
 800a00e:	6139      	str	r1, [r7, #16]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of directory entry write requests.  */
    media_ptr -> fx_media_directory_entry_writes++;
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800a016:	1c5a      	adds	r2, r3, #1
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_DIR_ENTRY_WRITE, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine if this is entry is being deleted.  */
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	781b      	ldrb	r3, [r3, #0]
 800a024:	2be5      	cmp	r3, #229	; 0xe5
 800a026:	d109      	bne.n	800a03c <_fx_directory_entry_write+0x38>
        ((UCHAR)entry_ptr -> fx_dir_entry_short_name[0] == (UCHAR)FX_DIR_ENTRY_FREE))
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	791b      	ldrb	r3, [r3, #4]
    if (((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE) &&
 800a02c:	2be5      	cmp	r3, #229	; 0xe5
 800a02e:	d105      	bne.n	800a03c <_fx_directory_entry_write+0x38>
    {

        /* Yes, this is a request to delete the entry. Set the flag to remember this.  */
        delete_flag =  FX_TRUE;
 800a030:	2301      	movs	r3, #1
 800a032:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Null the short file name.  */
        entry_ptr -> fx_dir_entry_short_name[0] =  0;
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	2200      	movs	r2, #0
 800a038:	711a      	strb	r2, [r3, #4]
 800a03a:	e001      	b.n	800a040 <_fx_directory_entry_write+0x3c>
    }
    else
    {

        /* Not a deleted entry. Set the flag to false.  */
        delete_flag =  FX_FALSE;
 800a03c:	2300      	movs	r3, #0
 800a03e:	66bb      	str	r3, [r7, #104]	; 0x68
    }

    /* Pickup the byte offset of the entry.  */
    byte_offset = entry_ptr -> fx_dir_entry_byte_offset;
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a044:	637b      	str	r3, [r7, #52]	; 0x34

    /* Pickup the logical sector of the entry.  */
    logical_sector = (ULONG)entry_ptr -> fx_dir_entry_log_sector;
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 800a04c:	4613      	mov	r3, r2
 800a04e:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Figure out where what cluster we are in.  */
    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a054:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a056:	429a      	cmp	r2, r3
 800a058:	d316      	bcc.n	800a088 <_fx_directory_entry_write+0x84>
    {

        /* Calculate the cluster that this logical sector is in.  */
        cluster =  (logical_sector - media_ptr -> fx_media_data_sector_start) / (media_ptr -> fx_media_sectors_per_cluster) + FX_FAT_ENTRY_START;
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a05e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a060:	1ad2      	subs	r2, r2, r3
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a066:	fbb2 f3f3 	udiv	r3, r2, r3
 800a06a:	3302      	adds	r3, #2
 800a06c:	633b      	str	r3, [r7, #48]	; 0x30

        /* Calculate the relative cluster.  */
        relative_sector =  logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                              (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a074:	3b02      	subs	r3, #2
                                               ((ULONG)media_ptr -> fx_media_sectors_per_cluster)));
 800a076:	6979      	ldr	r1, [r7, #20]
 800a078:	6d49      	ldr	r1, [r1, #84]	; 0x54
                                              (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a07a:	fb01 f303 	mul.w	r3, r1, r3
        relative_sector =  logical_sector -  (((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a07e:	4413      	add	r3, r2
 800a080:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a082:	1ad3      	subs	r3, r2, r3
 800a084:	63bb      	str	r3, [r7, #56]	; 0x38
 800a086:	e003      	b.n	800a090 <_fx_directory_entry_write+0x8c>
    }
    else
    {

        /* Clear the cluster and the relative sector.  */
        cluster =  0;
 800a088:	2300      	movs	r3, #0
 800a08a:	633b      	str	r3, [r7, #48]	; 0x30
        relative_sector =  0;
 800a08c:	2300      	movs	r3, #0
 800a08e:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Read the logical directory sector.  */
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
                                              media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	689a      	ldr	r2, [r3, #8]
    status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) entry_ptr -> fx_dir_entry_log_sector,
 800a09a:	2303      	movs	r3, #3
 800a09c:	9302      	str	r3, [sp, #8]
 800a09e:	2301      	movs	r3, #1
 800a0a0:	9301      	str	r3, [sp, #4]
 800a0a2:	9200      	str	r2, [sp, #0]
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	6978      	ldr	r0, [r7, #20]
 800a0aa:	f003 fcff 	bl	800daac <_fx_utility_logical_sector_read>
 800a0ae:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 800a0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d002      	beq.n	800a0bc <_fx_directory_entry_write+0xb8>
    {

        /* Return the error status.  */
        return(status);
 800a0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b8:	f000 bdda 	b.w	800ac70 <_fx_directory_entry_write+0xc6c>
    }

    /* Setup a pointer into the buffer.  */
    sector_base_ptr = (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	673b      	str	r3, [r7, #112]	; 0x70
    work_ptr =  sector_base_ptr + (UINT)entry_ptr -> fx_dir_entry_byte_offset;
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0c6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a0c8:	4413      	add	r3, r2
 800a0ca:	677b      	str	r3, [r7, #116]	; 0x74
    changed_size = 0;
    changed_offset = entry_ptr -> fx_dir_entry_byte_offset;
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if a long file name is present.  */
    if (entry_ptr -> fx_dir_entry_long_name_present)
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	695b      	ldr	r3, [r3, #20]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f000 83cc 	beq.w	800a86e <_fx_directory_entry_write+0x86a>
    {

        /* Yes, long name is present - prepare short name and write out this name.  */
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	653b      	str	r3, [r7, #80]	; 0x50
 800a0da:	2300      	movs	r3, #0
 800a0dc:	667b      	str	r3, [r7, #100]	; 0x64
 800a0de:	2300      	movs	r3, #0
 800a0e0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0e6:	e02c      	b.n	800a142 <_fx_directory_entry_write+0x13e>
        {

            /* Check for a dot.  */
            if (entry_ptr -> fx_dir_entry_name[len] == '.')
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	681a      	ldr	r2, [r3, #0]
 800a0ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0ee:	4413      	add	r3, r2
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	2b2e      	cmp	r3, #46	; 0x2e
 800a0f4:	d108      	bne.n	800a108 <_fx_directory_entry_write+0x104>
            {

                /* Check for leading dot. */
                if (len == 0)
 800a0f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d01e      	beq.n	800a13a <_fx_directory_entry_write+0x136>
                    continue;
                }

                /* Yes, a dot is present.  From this position the extension will
                   be written.  */
                dotfound = i;
 800a0fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0fe:	64fb      	str	r3, [r7, #76]	; 0x4c
                dotpos   = len + 1;
 800a100:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a102:	3301      	adds	r3, #1
 800a104:	64bb      	str	r3, [r7, #72]	; 0x48
                continue;
 800a106:	e019      	b.n	800a13c <_fx_directory_entry_write+0x138>
            }

            /* Check for non-space and within the short file name length.  */
            if ((entry_ptr -> fx_dir_entry_name[len] != ' ') && (i < 8))
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a10e:	4413      	add	r3, r2
 800a110:	781b      	ldrb	r3, [r3, #0]
 800a112:	2b20      	cmp	r3, #32
 800a114:	d012      	beq.n	800a13c <_fx_directory_entry_write+0x138>
 800a116:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a118:	2b07      	cmp	r3, #7
 800a11a:	d80f      	bhi.n	800a13c <_fx_directory_entry_write+0x138>
            {

                /* Copy characters into the short file name area.  */
                shortname[i] = entry_ptr -> fx_dir_entry_name[len];
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a122:	4413      	add	r3, r2
 800a124:	7819      	ldrb	r1, [r3, #0]
 800a126:	f107 021c 	add.w	r2, r7, #28
 800a12a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a12c:	4413      	add	r3, r2
 800a12e:	460a      	mov	r2, r1
 800a130:	701a      	strb	r2, [r3, #0]
                i++;
 800a132:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a134:	3301      	adds	r3, #1
 800a136:	667b      	str	r3, [r7, #100]	; 0x64
 800a138:	e000      	b.n	800a13c <_fx_directory_entry_write+0x138>
                    continue;
 800a13a:	bf00      	nop
        for (len = 0, i = 0, dotpos = 0, dotfound = 0; entry_ptr -> fx_dir_entry_name[len]; len++)
 800a13c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a13e:	3301      	adds	r3, #1
 800a140:	653b      	str	r3, [r7, #80]	; 0x50
 800a142:	693b      	ldr	r3, [r7, #16]
 800a144:	681a      	ldr	r2, [r3, #0]
 800a146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a148:	4413      	add	r3, r2
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d1cb      	bne.n	800a0e8 <_fx_directory_entry_write+0xe4>
            }
        }

        /* Fill remaining short file name with spaces.  */
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800a150:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a152:	663b      	str	r3, [r7, #96]	; 0x60
 800a154:	e008      	b.n	800a168 <_fx_directory_entry_write+0x164>
        {
            shortname[j] =  ' ';
 800a156:	f107 021c 	add.w	r2, r7, #28
 800a15a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a15c:	4413      	add	r3, r2
 800a15e:	2220      	movs	r2, #32
 800a160:	701a      	strb	r2, [r3, #0]
        for (j = i; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800a162:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a164:	3301      	adds	r3, #1
 800a166:	663b      	str	r3, [r7, #96]	; 0x60
 800a168:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a16a:	2b0a      	cmp	r3, #10
 800a16c:	d9f3      	bls.n	800a156 <_fx_directory_entry_write+0x152>
        }

        /* Determine if a dot was encountered.  */
        if (dotpos)
 800a16e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a170:	2b00      	cmp	r3, #0
 800a172:	d03e      	beq.n	800a1f2 <_fx_directory_entry_write+0x1ee>
        {

            /* Process relative to the dot position.  */
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a17a:	4413      	add	r3, r2
 800a17c:	781b      	ldrb	r3, [r3, #0]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d008      	beq.n	800a194 <_fx_directory_entry_write+0x190>
            {
                shortname[8] = entry_ptr -> fx_dir_entry_name[dotpos++];
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a188:	1c59      	adds	r1, r3, #1
 800a18a:	64b9      	str	r1, [r7, #72]	; 0x48
 800a18c:	4413      	add	r3, r2
 800a18e:	781b      	ldrb	r3, [r3, #0]
 800a190:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a19a:	4413      	add	r3, r2
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d008      	beq.n	800a1b4 <_fx_directory_entry_write+0x1b0>
            {
                shortname[9] = entry_ptr -> fx_dir_entry_name[dotpos++];
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	681a      	ldr	r2, [r3, #0]
 800a1a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1a8:	1c59      	adds	r1, r3, #1
 800a1aa:	64b9      	str	r1, [r7, #72]	; 0x48
 800a1ac:	4413      	add	r3, r2
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            }
            if (entry_ptr -> fx_dir_entry_name[dotpos])
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	681a      	ldr	r2, [r3, #0]
 800a1b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1ba:	4413      	add	r3, r2
 800a1bc:	781b      	ldrb	r3, [r3, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d008      	beq.n	800a1d4 <_fx_directory_entry_write+0x1d0>
            {
                shortname[10] = entry_ptr -> fx_dir_entry_name[dotpos++];
 800a1c2:	693b      	ldr	r3, [r7, #16]
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1c8:	1c59      	adds	r1, r3, #1
 800a1ca:	64b9      	str	r1, [r7, #72]	; 0x48
 800a1cc:	4413      	add	r3, r2
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }

            /* Determine if additional spaces are needed.  */
            i = dotfound;
 800a1d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1d6:	667b      	str	r3, [r7, #100]	; 0x64

            for (; dotfound <= 7; dotfound++)
 800a1d8:	e008      	b.n	800a1ec <_fx_directory_entry_write+0x1e8>
            {
                /* Add space...  */
                shortname[dotfound] = ' ';
 800a1da:	f107 021c 	add.w	r2, r7, #28
 800a1de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1e0:	4413      	add	r3, r2
 800a1e2:	2220      	movs	r2, #32
 800a1e4:	701a      	strb	r2, [r3, #0]
            for (; dotfound <= 7; dotfound++)
 800a1e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1e8:	3301      	adds	r3, #1
 800a1ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a1ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1ee:	2b07      	cmp	r3, #7
 800a1f0:	d9f3      	bls.n	800a1da <_fx_directory_entry_write+0x1d6>
            }
        }

        /* Each entry contains 13 unicode entries.  Calculate the remainder.  */
        if (len % 13 == 0)
 800a1f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a1f4:	4b8e      	ldr	r3, [pc, #568]	; (800a430 <_fx_directory_entry_write+0x42c>)
 800a1f6:	fba3 2301 	umull	r2, r3, r3, r1
 800a1fa:	089a      	lsrs	r2, r3, #2
 800a1fc:	4613      	mov	r3, r2
 800a1fe:	005b      	lsls	r3, r3, #1
 800a200:	4413      	add	r3, r2
 800a202:	009b      	lsls	r3, r3, #2
 800a204:	4413      	add	r3, r2
 800a206:	1aca      	subs	r2, r1, r3
 800a208:	2a00      	cmp	r2, #0
 800a20a:	d106      	bne.n	800a21a <_fx_directory_entry_write+0x216>
        {
            card =  len / 13;
 800a20c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a20e:	4a88      	ldr	r2, [pc, #544]	; (800a430 <_fx_directory_entry_write+0x42c>)
 800a210:	fba2 2303 	umull	r2, r3, r2, r3
 800a214:	089b      	lsrs	r3, r3, #2
 800a216:	657b      	str	r3, [r7, #84]	; 0x54
 800a218:	e006      	b.n	800a228 <_fx_directory_entry_write+0x224>
        }
        else
        {
            card =  len / 13 + 1;
 800a21a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a21c:	4a84      	ldr	r2, [pc, #528]	; (800a430 <_fx_directory_entry_write+0x42c>)
 800a21e:	fba2 2303 	umull	r2, r3, r2, r3
 800a222:	089b      	lsrs	r3, r3, #2
 800a224:	3301      	adds	r3, #1
 800a226:	657b      	str	r3, [r7, #84]	; 0x54
        }

        /* Default the name match to true.  */
        match =  FX_TRUE;
 800a228:	2301      	movs	r3, #1
 800a22a:	647b      	str	r3, [r7, #68]	; 0x44

        /* Loop through the newly derived short name and the original name and look
           for a non-matching character.  */
        l =  0;
 800a22c:	2300      	movs	r3, #0
 800a22e:	65bb      	str	r3, [r7, #88]	; 0x58
        k =  0;
 800a230:	2300      	movs	r3, #0
 800a232:	65fb      	str	r3, [r7, #92]	; 0x5c
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 800a234:	e03f      	b.n	800a2b6 <_fx_directory_entry_write+0x2b2>
        {

            /* Determine if a space is detected in the short name. If so,
               advance to the extension index.  */
            if (shortname[k] == ' ')
 800a236:	f107 021c 	add.w	r2, r7, #28
 800a23a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a23c:	4413      	add	r3, r2
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	2b20      	cmp	r3, #32
 800a242:	d116      	bne.n	800a272 <_fx_directory_entry_write+0x26e>
            {

                /* The first pad space was detected. First, check for a name
                   without an extension.  */
                if (entry_ptr -> fx_dir_entry_name[l] == FX_NULL)
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a24a:	4413      	add	r3, r2
 800a24c:	781b      	ldrb	r3, [r3, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d035      	beq.n	800a2be <_fx_directory_entry_write+0x2ba>
                    /* All is okay, get out of the loop!  */
                    break;
                }

                /* Now check for a period in the long name... if not, there is a non-match!  */
                if (entry_ptr -> fx_dir_entry_name[l] != '.')
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a258:	4413      	add	r3, r2
 800a25a:	781b      	ldrb	r3, [r3, #0]
 800a25c:	2b2e      	cmp	r3, #46	; 0x2e
 800a25e:	d002      	beq.n	800a266 <_fx_directory_entry_write+0x262>
                {

                    /* Set the match flag to false and exit the loop.  */
                    match =  FX_FALSE;
 800a260:	2300      	movs	r3, #0
 800a262:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 800a264:	e02c      	b.n	800a2c0 <_fx_directory_entry_write+0x2bc>
                }

                /* Otherwise move short file name index to the extension area and
                   increment the long file name index.  */
                k =  8;
 800a266:	2308      	movs	r3, #8
 800a268:	65fb      	str	r3, [r7, #92]	; 0x5c
                l++;
 800a26a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a26c:	3301      	adds	r3, #1
 800a26e:	65bb      	str	r3, [r7, #88]	; 0x58

                /* Restart the loop at the top.  */
                continue;
 800a270:	e021      	b.n	800a2b6 <_fx_directory_entry_write+0x2b2>
            }

            /* Check for the dot for the 8.3 match... it is no longer in the
               shortname but possibly still present in the long name.  */
            if ((k == 8) && (entry_ptr -> fx_dir_entry_name[l] == '.'))
 800a272:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a274:	2b08      	cmp	r3, #8
 800a276:	d109      	bne.n	800a28c <_fx_directory_entry_write+0x288>
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a27e:	4413      	add	r3, r2
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	2b2e      	cmp	r3, #46	; 0x2e
 800a284:	d102      	bne.n	800a28c <_fx_directory_entry_write+0x288>
            {

                /* Yes, handle the implicit dot in the shortname by
                   positioning past it in the long name.  */
                l++;
 800a286:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a288:	3301      	adds	r3, #1
 800a28a:	65bb      	str	r3, [r7, #88]	; 0x58
            }

            /* Do the names match?  */
            if (shortname[k] != entry_ptr -> fx_dir_entry_name[l])
 800a28c:	f107 021c 	add.w	r2, r7, #28
 800a290:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a292:	4413      	add	r3, r2
 800a294:	781a      	ldrb	r2, [r3, #0]
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	6819      	ldr	r1, [r3, #0]
 800a29a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a29c:	440b      	add	r3, r1
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	429a      	cmp	r2, r3
 800a2a2:	d002      	beq.n	800a2aa <_fx_directory_entry_write+0x2a6>
            {

                /* No, the names do not match, set the match flag to false and
                   exit the loop.  */
                match =  FX_FALSE;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	647b      	str	r3, [r7, #68]	; 0x44
                break;
 800a2a8:	e00a      	b.n	800a2c0 <_fx_directory_entry_write+0x2bc>
            }

            /* Move the indices forward.  */
            k++;
 800a2aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2ac:	3301      	adds	r3, #1
 800a2ae:	65fb      	str	r3, [r7, #92]	; 0x5c
            l++;
 800a2b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	65bb      	str	r3, [r7, #88]	; 0x58
        while (k < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE)
 800a2b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a2b8:	2b0a      	cmp	r3, #10
 800a2ba:	d9bc      	bls.n	800a236 <_fx_directory_entry_write+0x232>
 800a2bc:	e000      	b.n	800a2c0 <_fx_directory_entry_write+0x2bc>
                    break;
 800a2be:	bf00      	nop
        }

        /* Check if there is a dot in the name, but no extension in the short name.  In this case, 
           we should create a mangled short name.  */
        if ((dotpos) && (shortname[8] == ' '))
 800a2c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d005      	beq.n	800a2d2 <_fx_directory_entry_write+0x2ce>
 800a2c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a2ca:	2b20      	cmp	r3, #32
 800a2cc:	d101      	bne.n	800a2d2 <_fx_directory_entry_write+0x2ce>
        {
        
            /* Something left.. the names do not match!  */
            match =  FX_FALSE;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* One final check to make sure there is nothing left on the long file name.  */
        if (entry_ptr -> fx_dir_entry_name[l])
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a2d8:	4413      	add	r3, r2
 800a2da:	781b      	ldrb	r3, [r3, #0]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d001      	beq.n	800a2e4 <_fx_directory_entry_write+0x2e0>
        {

            /* Something left.. the names do not match!  */
            match =  FX_FALSE;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	647b      	str	r3, [r7, #68]	; 0x44
        }

        /* Determine if the derived short name matches exactly the long file name. If so
           we don't need to mangle the name with a numeric value based on its entry.  */
        if (match == FX_FALSE)
 800a2e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d15a      	bne.n	800a3a0 <_fx_directory_entry_write+0x39c>
        {

            /* Name does not match, create a mangled name.  */

            /* Generate short file name from LFN.  */
            entry = entry_ptr -> fx_dir_entry_number;
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2ee:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Name suffice is between 000 and FFFF in hex, calculate this short file
               name's numeric component.  */
            entry = entry % 0x10000;
 800a2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2f2:	b29b      	uxth	r3, r3
 800a2f4:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Build short name of the format xxx~NNNN.ext.  */
            if (i > 3)
 800a2f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2f8:	2b03      	cmp	r3, #3
 800a2fa:	d901      	bls.n	800a300 <_fx_directory_entry_write+0x2fc>
            {
                i = 3;
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	667b      	str	r3, [r7, #100]	; 0x64
            }
            shortname[i++] = '~';
 800a300:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a302:	1c5a      	adds	r2, r3, #1
 800a304:	667a      	str	r2, [r7, #100]	; 0x64
 800a306:	3368      	adds	r3, #104	; 0x68
 800a308:	f107 0210 	add.w	r2, r7, #16
 800a30c:	4413      	add	r3, r2
 800a30e:	227e      	movs	r2, #126	; 0x7e
 800a310:	f803 2c5c 	strb.w	r2, [r3, #-92]

            /* Loop to build the numeric part of the name.  */
            for (l = 0; l < 4; l++)
 800a314:	2300      	movs	r3, #0
 800a316:	65bb      	str	r3, [r7, #88]	; 0x58
 800a318:	e03f      	b.n	800a39a <_fx_directory_entry_write+0x396>
            {
                
                /* Shift down the entry number based on the numeric position.  */
                if (l == 0)
 800a31a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d105      	bne.n	800a32c <_fx_directory_entry_write+0x328>
                {
                    temp =  ((entry >> 12) & 0xf);
 800a320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a322:	0b1b      	lsrs	r3, r3, #12
 800a324:	f003 030f 	and.w	r3, r3, #15
 800a328:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a32a:	e015      	b.n	800a358 <_fx_directory_entry_write+0x354>
                }
                else if (l == 1)
 800a32c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d105      	bne.n	800a33e <_fx_directory_entry_write+0x33a>
                {
                     temp = ((entry >> 8) & 0xf);
 800a332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a334:	0a1b      	lsrs	r3, r3, #8
 800a336:	f003 030f 	and.w	r3, r3, #15
 800a33a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a33c:	e00c      	b.n	800a358 <_fx_directory_entry_write+0x354>
                }
                else if (l == 2)
 800a33e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a340:	2b02      	cmp	r3, #2
 800a342:	d105      	bne.n	800a350 <_fx_directory_entry_write+0x34c>
                {
                     temp = ((entry >> 4) & 0xf);
 800a344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a346:	091b      	lsrs	r3, r3, #4
 800a348:	f003 030f 	and.w	r3, r3, #15
 800a34c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a34e:	e003      	b.n	800a358 <_fx_directory_entry_write+0x354>
                }
                else
                {
                     temp = ((entry) & 0xf);
 800a350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a352:	f003 030f 	and.w	r3, r3, #15
 800a356:	66fb      	str	r3, [r7, #108]	; 0x6c
                }
                
                /* Now build hex value.  */
                if (temp > 9)
 800a358:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a35a:	2b09      	cmp	r3, #9
 800a35c:	d90d      	bls.n	800a37a <_fx_directory_entry_write+0x376>
                    shortname[i++] =  (CHAR)('A' + (temp - 10));
 800a35e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a360:	b2da      	uxtb	r2, r3
 800a362:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a364:	1c59      	adds	r1, r3, #1
 800a366:	6679      	str	r1, [r7, #100]	; 0x64
 800a368:	3237      	adds	r2, #55	; 0x37
 800a36a:	b2d2      	uxtb	r2, r2
 800a36c:	3368      	adds	r3, #104	; 0x68
 800a36e:	f107 0110 	add.w	r1, r7, #16
 800a372:	440b      	add	r3, r1
 800a374:	f803 2c5c 	strb.w	r2, [r3, #-92]
 800a378:	e00c      	b.n	800a394 <_fx_directory_entry_write+0x390>
                else
                    shortname[i++] =  (CHAR)('0' + temp);
 800a37a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a37c:	b2da      	uxtb	r2, r3
 800a37e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a380:	1c59      	adds	r1, r3, #1
 800a382:	6679      	str	r1, [r7, #100]	; 0x64
 800a384:	3230      	adds	r2, #48	; 0x30
 800a386:	b2d2      	uxtb	r2, r2
 800a388:	3368      	adds	r3, #104	; 0x68
 800a38a:	f107 0110 	add.w	r1, r7, #16
 800a38e:	440b      	add	r3, r1
 800a390:	f803 2c5c 	strb.w	r2, [r3, #-92]
            for (l = 0; l < 4; l++)
 800a394:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a396:	3301      	adds	r3, #1
 800a398:	65bb      	str	r3, [r7, #88]	; 0x58
 800a39a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a39c:	2b03      	cmp	r3, #3
 800a39e:	d9bc      	bls.n	800a31a <_fx_directory_entry_write+0x316>
            }
        }

        /* Set end of short string to NULL.   */
        shortname[11] = 0;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        /* Determine if the first character of the short file name is the directory free
           value. If so, it must be changed.  */
        if (((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE) && (delete_flag == FX_FALSE))
 800a3a6:	7f3b      	ldrb	r3, [r7, #28]
 800a3a8:	2be5      	cmp	r3, #229	; 0xe5
 800a3aa:	d104      	bne.n	800a3b6 <_fx_directory_entry_write+0x3b2>
 800a3ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d101      	bne.n	800a3b6 <_fx_directory_entry_write+0x3b2>
        {

            /* Change to 0x8F to be compatible with what DOS does.  */
            shortname[0] =  (CHAR)0x8F;
 800a3b2:	238f      	movs	r3, #143	; 0x8f
 800a3b4:	773b      	strb	r3, [r7, #28]
        }

        /* Loop to convert the new short file name to upper case.  */
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	667b      	str	r3, [r7, #100]	; 0x64
 800a3ba:	e01d      	b.n	800a3f8 <_fx_directory_entry_write+0x3f4>
        {

            /* Pickup shortname character.  */
            alpha = shortname[i];
 800a3bc:	f107 021c 	add.w	r2, r7, #28
 800a3c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3c2:	4413      	add	r3, r2
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

            /* Determine if character is lower case.  */
            if ((alpha >= 'a') && (alpha <= 'z'))
 800a3ca:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a3ce:	2b60      	cmp	r3, #96	; 0x60
 800a3d0:	d908      	bls.n	800a3e4 <_fx_directory_entry_write+0x3e0>
 800a3d2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a3d6:	2b7a      	cmp	r3, #122	; 0x7a
 800a3d8:	d804      	bhi.n	800a3e4 <_fx_directory_entry_write+0x3e0>
            {

                /* Store the character - converted to upper case.  */
                alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800a3da:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a3de:	3b20      	subs	r3, #32
 800a3e0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
            }

            /* Now store the short name character.  */
            shortname[i] =  alpha;
 800a3e4:	f107 021c 	add.w	r2, r7, #28
 800a3e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3ea:	4413      	add	r3, r2
 800a3ec:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a3f0:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800a3f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3f4:	3301      	adds	r3, #1
 800a3f6:	667b      	str	r3, [r7, #100]	; 0x64
 800a3f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3fa:	2b0a      	cmp	r3, #10
 800a3fc:	d9de      	bls.n	800a3bc <_fx_directory_entry_write+0x3b8>
        }

        /* Determine if there already is a short name and we are not deleting the entry.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] != 0)
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	791b      	ldrb	r3, [r3, #4]
 800a402:	2b00      	cmp	r3, #0
 800a404:	f000 8095 	beq.w	800a532 <_fx_directory_entry_write+0x52e>
        {

            /* Yes, override the calculated shortname with the original 8.3 name.  */

            /* Clear the short file name area.  */
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a408:	2300      	movs	r3, #0
 800a40a:	667b      	str	r3, [r7, #100]	; 0x64
 800a40c:	e008      	b.n	800a420 <_fx_directory_entry_write+0x41c>
            {
                shortname[i] = ' ';
 800a40e:	f107 021c 	add.w	r2, r7, #28
 800a412:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a414:	4413      	add	r3, r2
 800a416:	2220      	movs	r2, #32
 800a418:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a41a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a41c:	3301      	adds	r3, #1
 800a41e:	667b      	str	r3, [r7, #100]	; 0x64
 800a420:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a422:	2b0a      	cmp	r3, #10
 800a424:	d9f3      	bls.n	800a40e <_fx_directory_entry_write+0x40a>
            }

            /* Loop to copy the original short file name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a426:	2300      	movs	r3, #0
 800a428:	667b      	str	r3, [r7, #100]	; 0x64
 800a42a:	2300      	movs	r3, #0
 800a42c:	663b      	str	r3, [r7, #96]	; 0x60
 800a42e:	e023      	b.n	800a478 <_fx_directory_entry_write+0x474>
 800a430:	4ec4ec4f 	.word	0x4ec4ec4f
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 800a434:	693a      	ldr	r2, [r7, #16]
 800a436:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a438:	4413      	add	r3, r2
 800a43a:	3304      	adds	r3, #4
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	2b2e      	cmp	r3, #46	; 0x2e
 800a440:	d01e      	beq.n	800a480 <_fx_directory_entry_write+0x47c>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800a442:	693a      	ldr	r2, [r7, #16]
 800a444:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a446:	4413      	add	r3, r2
 800a448:	3304      	adds	r3, #4
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d019      	beq.n	800a484 <_fx_directory_entry_write+0x480>
                {
                    break;
                }

                /* Pickup the character.  */
                alpha =  entry_ptr -> fx_dir_entry_short_name[i];
 800a450:	693a      	ldr	r2, [r7, #16]
 800a452:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a454:	4413      	add	r3, r2
 800a456:	3304      	adds	r3, #4
 800a458:	781b      	ldrb	r3, [r3, #0]
 800a45a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Copy file name character.  */
                shortname[j] =  alpha;
 800a45e:	f107 021c 	add.w	r2, r7, #28
 800a462:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a464:	4413      	add	r3, r2
 800a466:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a46a:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a46c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a46e:	3301      	adds	r3, #1
 800a470:	667b      	str	r3, [r7, #100]	; 0x64
 800a472:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a474:	3301      	adds	r3, #1
 800a476:	663b      	str	r3, [r7, #96]	; 0x60
 800a478:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a47a:	2b07      	cmp	r3, #7
 800a47c:	d9da      	bls.n	800a434 <_fx_directory_entry_write+0x430>
 800a47e:	e002      	b.n	800a486 <_fx_directory_entry_write+0x482>
                    break;
 800a480:	bf00      	nop
 800a482:	e000      	b.n	800a486 <_fx_directory_entry_write+0x482>
                    break;
 800a484:	bf00      	nop
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 800a486:	693a      	ldr	r2, [r7, #16]
 800a488:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a48a:	4413      	add	r3, r2
 800a48c:	3304      	adds	r3, #4
 800a48e:	781b      	ldrb	r3, [r3, #0]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d025      	beq.n	800a4e0 <_fx_directory_entry_write+0x4dc>
            {

                /* Pickup remaining characters.  */
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a494:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a496:	3301      	adds	r3, #1
 800a498:	667b      	str	r3, [r7, #100]	; 0x64
 800a49a:	2308      	movs	r3, #8
 800a49c:	663b      	str	r3, [r7, #96]	; 0x60
 800a49e:	e01a      	b.n	800a4d6 <_fx_directory_entry_write+0x4d2>
                {

                    /* If NULL is encountered, stop the copying.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800a4a0:	693a      	ldr	r2, [r7, #16]
 800a4a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4a4:	4413      	add	r3, r2
 800a4a6:	3304      	adds	r3, #4
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d017      	beq.n	800a4de <_fx_directory_entry_write+0x4da>
                    {
                        break;
                    }

                    /* Pickup the character.  */
                    alpha =  entry_ptr -> fx_dir_entry_short_name[i];
 800a4ae:	693a      	ldr	r2, [r7, #16]
 800a4b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4b2:	4413      	add	r3, r2
 800a4b4:	3304      	adds	r3, #4
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                    /* Copy file name character.  */
                    shortname[j] =  alpha;
 800a4bc:	f107 021c 	add.w	r2, r7, #28
 800a4c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4c2:	4413      	add	r3, r2
 800a4c4:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a4c8:	701a      	strb	r2, [r3, #0]
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a4ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	667b      	str	r3, [r7, #100]	; 0x64
 800a4d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	663b      	str	r3, [r7, #96]	; 0x60
 800a4d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4d8:	2b0a      	cmp	r3, #10
 800a4da:	d9e1      	bls.n	800a4a0 <_fx_directory_entry_write+0x49c>
 800a4dc:	e000      	b.n	800a4e0 <_fx_directory_entry_write+0x4dc>
                        break;
 800a4de:	bf00      	nop
                }
            }

            /* Loop to make sure the short name is upper case.  */
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	663b      	str	r3, [r7, #96]	; 0x60
 800a4e4:	e01d      	b.n	800a522 <_fx_directory_entry_write+0x51e>
            {

                /* Pickup the character.  */
                alpha =  shortname[j];
 800a4e6:	f107 021c 	add.w	r2, r7, #28
 800a4ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a4ec:	4413      	add	r3, r2
 800a4ee:	781b      	ldrb	r3, [r3, #0]
 800a4f0:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800a4f4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a4f8:	2b60      	cmp	r3, #96	; 0x60
 800a4fa:	d908      	bls.n	800a50e <_fx_directory_entry_write+0x50a>
 800a4fc:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a500:	2b7a      	cmp	r3, #122	; 0x7a
 800a502:	d804      	bhi.n	800a50e <_fx_directory_entry_write+0x50a>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800a504:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800a508:	3b20      	subs	r3, #32
 800a50a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy file name character.  */
                shortname[j] =  alpha;
 800a50e:	f107 021c 	add.w	r2, r7, #28
 800a512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a514:	4413      	add	r3, r2
 800a516:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a51a:	701a      	strb	r2, [r3, #0]
            for (j = 0; j < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); j++)
 800a51c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a51e:	3301      	adds	r3, #1
 800a520:	663b      	str	r3, [r7, #96]	; 0x60
 800a522:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a524:	2b0a      	cmp	r3, #10
 800a526:	d9de      	bls.n	800a4e6 <_fx_directory_entry_write+0x4e2>
            }

            /* Determine if the first character of the short file name is the directory free
               value. If so, it must be changed.  */
            if (((UCHAR)shortname[0]) == ((UCHAR)FX_DIR_ENTRY_FREE))
 800a528:	7f3b      	ldrb	r3, [r7, #28]
 800a52a:	2be5      	cmp	r3, #229	; 0xe5
 800a52c:	d101      	bne.n	800a532 <_fx_directory_entry_write+0x52e>
            {

                /* Change to 0x8F to be compatible with what DOS does.  */
                shortname[0] =  (CHAR)0x8F;
 800a52e:	238f      	movs	r3, #143	; 0x8f
 800a530:	773b      	strb	r3, [r7, #28]
            }
        }

        /* Loop to calculate the checksum.  */
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a532:	2300      	movs	r3, #0
 800a534:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a538:	2300      	movs	r3, #0
 800a53a:	667b      	str	r3, [r7, #100]	; 0x64
 800a53c:	e016      	b.n	800a56c <_fx_directory_entry_write+0x568>
        {

            /* Calculate the checksum.  */
            checksum = (UCHAR)((UCHAR)(((checksum & 1) << 7) | ((checksum & (UCHAR)0xfe) >> 1)) + shortname[i]);
 800a53e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a542:	01db      	lsls	r3, r3, #7
 800a544:	b25a      	sxtb	r2, r3
 800a546:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a54a:	085b      	lsrs	r3, r3, #1
 800a54c:	b2db      	uxtb	r3, r3
 800a54e:	b25b      	sxtb	r3, r3
 800a550:	4313      	orrs	r3, r2
 800a552:	b25b      	sxtb	r3, r3
 800a554:	b2da      	uxtb	r2, r3
 800a556:	f107 011c 	add.w	r1, r7, #28
 800a55a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a55c:	440b      	add	r3, r1
 800a55e:	781b      	ldrb	r3, [r3, #0]
 800a560:	4413      	add	r3, r2
 800a562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
        for (i = checksum = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a566:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a568:	3301      	adds	r3, #1
 800a56a:	667b      	str	r3, [r7, #100]	; 0x64
 800a56c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a56e:	2b0a      	cmp	r3, #10
 800a570:	d9e5      	bls.n	800a53e <_fx_directory_entry_write+0x53a>
        }

        /* Set the last entry mark.  */
        work_ptr[0] =  (UCHAR)(0x40 | card);
 800a572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a574:	b2db      	uxtb	r3, r3
 800a576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a57a:	b2da      	uxtb	r2, r3
 800a57c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a57e:	701a      	strb	r2, [r3, #0]

        /* Loop to process remainder of long file name entry.  */
        while (card > 0)
 800a580:	e0f3      	b.n	800a76a <_fx_directory_entry_write+0x766>
        {

            /* Clear eof marker.  */
            eof_marker = 0;
 800a582:	2300      	movs	r3, #0
 800a584:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

            /* Determine if the entry is free.  */
            if ((UCHAR)shortname[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 800a588:	7f3b      	ldrb	r3, [r7, #28]
 800a58a:	2be5      	cmp	r3, #229	; 0xe5
 800a58c:	d102      	bne.n	800a594 <_fx_directory_entry_write+0x590>
            {
                /* Yes, place delete marker.  */
                work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 800a58e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a590:	22e5      	movs	r2, #229	; 0xe5
 800a592:	701a      	strb	r2, [r3, #0]
            }

            /* Setup various long file name fields.  */
            work_ptr[11] = FX_LONG_NAME;
 800a594:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a596:	330b      	adds	r3, #11
 800a598:	220f      	movs	r2, #15
 800a59a:	701a      	strb	r2, [r3, #0]
            work_ptr[12] = 0;
 800a59c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a59e:	330c      	adds	r3, #12
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	701a      	strb	r2, [r3, #0]
            work_ptr[13] = checksum;
 800a5a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5a6:	330d      	adds	r3, #13
 800a5a8:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 800a5ac:	701a      	strb	r2, [r3, #0]
            work_ptr[26] = 0;
 800a5ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5b0:	331a      	adds	r3, #26
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	701a      	strb	r2, [r3, #0]
            work_ptr[27] = 0;
 800a5b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5b8:	331b      	adds	r3, #27
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	701a      	strb	r2, [r3, #0]

            /* Loop through file name fields.  */
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 800a5be:	2301      	movs	r3, #1
 800a5c0:	667b      	str	r3, [r7, #100]	; 0x64
 800a5c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a5c4:	4613      	mov	r3, r2
 800a5c6:	005b      	lsls	r3, r3, #1
 800a5c8:	4413      	add	r3, r2
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	4413      	add	r3, r2
 800a5ce:	3b0d      	subs	r3, #13
 800a5d0:	663b      	str	r3, [r7, #96]	; 0x60
 800a5d2:	e03e      	b.n	800a652 <_fx_directory_entry_write+0x64e>
            {

                /* Process relative to specific fields.  */
                if ((i == 11) || (i == 26))
 800a5d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5d6:	2b0b      	cmp	r3, #11
 800a5d8:	d037      	beq.n	800a64a <_fx_directory_entry_write+0x646>
 800a5da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5dc:	2b1a      	cmp	r3, #26
 800a5de:	d034      	beq.n	800a64a <_fx_directory_entry_write+0x646>
                {
                    continue;
                }

                if (i == 13)
 800a5e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5e2:	2b0d      	cmp	r3, #13
 800a5e4:	d102      	bne.n	800a5ec <_fx_directory_entry_write+0x5e8>
                {
                    i = 12;
 800a5e6:	230c      	movs	r3, #12
 800a5e8:	667b      	str	r3, [r7, #100]	; 0x64
                    continue;
 800a5ea:	e02f      	b.n	800a64c <_fx_directory_entry_write+0x648>
                }

                /* Determine if the EOF marker is present.  */
                if (eof_marker)
 800a5ec:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d00d      	beq.n	800a610 <_fx_directory_entry_write+0x60c>
                {

                    work_ptr[i] = eof_marker;
 800a5f4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a5f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5f8:	4413      	add	r3, r2
 800a5fa:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 800a5fe:	701a      	strb	r2, [r3, #0]
                    work_ptr[i + 1] = eof_marker;
 800a600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a602:	3301      	adds	r3, #1
 800a604:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a606:	4413      	add	r3, r2
 800a608:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 800a60c:	701a      	strb	r2, [r3, #0]
 800a60e:	e00e      	b.n	800a62e <_fx_directory_entry_write+0x62a>
                }
                else
                {
                    work_ptr[i] = (UCHAR)entry_ptr -> fx_dir_entry_name[j];
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a616:	441a      	add	r2, r3
 800a618:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800a61a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a61c:	440b      	add	r3, r1
 800a61e:	7812      	ldrb	r2, [r2, #0]
 800a620:	701a      	strb	r2, [r3, #0]
                    work_ptr[i + 1] = 0;
 800a622:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a624:	3301      	adds	r3, #1
 800a626:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a628:	4413      	add	r3, r2
 800a62a:	2200      	movs	r2, #0
 800a62c:	701a      	strb	r2, [r3, #0]
                }

                if (entry_ptr -> fx_dir_entry_name[j] == 0)
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	681a      	ldr	r2, [r3, #0]
 800a632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a634:	4413      	add	r3, r2
 800a636:	781b      	ldrb	r3, [r3, #0]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d102      	bne.n	800a642 <_fx_directory_entry_write+0x63e>
                {

                    /* end of name, pad with 0xff.  */
                    eof_marker =  (UCHAR)0xff;
 800a63c:	23ff      	movs	r3, #255	; 0xff
 800a63e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
                }

                j++;
 800a642:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a644:	3301      	adds	r3, #1
 800a646:	663b      	str	r3, [r7, #96]	; 0x60
 800a648:	e000      	b.n	800a64c <_fx_directory_entry_write+0x648>
                    continue;
 800a64a:	bf00      	nop
            for (i = 1, j = 13 * (card - 1); i < FX_DIR_ENTRY_SIZE; i += 2)
 800a64c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a64e:	3302      	adds	r3, #2
 800a650:	667b      	str	r3, [r7, #100]	; 0x64
 800a652:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a654:	2b1f      	cmp	r3, #31
 800a656:	d9bd      	bls.n	800a5d4 <_fx_directory_entry_write+0x5d0>
            }

            /* Move to the next directory entry.  */
            work_ptr += FX_DIR_ENTRY_SIZE;
 800a658:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a65a:	3320      	adds	r3, #32
 800a65c:	677b      	str	r3, [r7, #116]	; 0x74
            byte_offset += FX_DIR_ENTRY_SIZE;
 800a65e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a660:	3320      	adds	r3, #32
 800a662:	637b      	str	r3, [r7, #52]	; 0x34
            /* Update changed_size. */
            changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

            /* Determine if the entry overlaps into the next sector.  */
            if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a668:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d376      	bcc.n	800a75c <_fx_directory_entry_write+0x758>
                else
                {
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Write current logical sector out.  */
                    status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800a66e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a670:	2200      	movs	r2, #0
 800a672:	60bb      	str	r3, [r7, #8]
 800a674:	60fa      	str	r2, [r7, #12]
 800a676:	2303      	movs	r3, #3
 800a678:	9302      	str	r3, [sp, #8]
 800a67a:	2301      	movs	r3, #1
 800a67c:	9301      	str	r3, [sp, #4]
 800a67e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a680:	9300      	str	r3, [sp, #0]
 800a682:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a686:	6978      	ldr	r0, [r7, #20]
 800a688:	f003 fca4 	bl	800dfd4 <_fx_utility_logical_sector_write>
 800a68c:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
                }
#endif /* FX_ENABLE_FAULT_TOLERANT */

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800a68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a690:	2b00      	cmp	r3, #0
 800a692:	d001      	beq.n	800a698 <_fx_directory_entry_write+0x694>
                {

                    /* Return the error status.  */
                    return(status);
 800a694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a696:	e2eb      	b.n	800ac70 <_fx_directory_entry_write+0xc6c>
                }

                /* Determine if we are in the root directory.  */
                if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a69c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d335      	bcc.n	800a70e <_fx_directory_entry_write+0x70a>
                {

                    /* Determine the next sector of the directory entry.  */
                    if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d206      	bcs.n	800a6bc <_fx_directory_entry_write+0x6b8>
                    {

                        /* More sectors in this cluster.  */

                        /* Simply increment the logical sector.  */
                        logical_sector++;
 800a6ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	63fb      	str	r3, [r7, #60]	; 0x3c

                        /* Increment the relative sector.  */
                        relative_sector++;
 800a6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	63bb      	str	r3, [r7, #56]	; 0x38
 800a6ba:	e032      	b.n	800a722 <_fx_directory_entry_write+0x71e>
                    {

                        /* We need to move to the next cluster.  */

                        /* Pickup the next cluster.  */
                        status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800a6bc:	f107 0318 	add.w	r3, r7, #24
 800a6c0:	461a      	mov	r2, r3
 800a6c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a6c4:	6978      	ldr	r0, [r7, #20]
 800a6c6:	f001 fed7 	bl	800c478 <_fx_utility_FAT_entry_read>
 800a6ca:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* Check for I/O error.  */
                        if (status != FX_SUCCESS)
 800a6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d001      	beq.n	800a6d6 <_fx_directory_entry_write+0x6d2>
                        {

                            /* Return error code.  */
                            return(status);
 800a6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d4:	e2cc      	b.n	800ac70 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Copy next cluster to the current cluster.  */
                        cluster =  next_cluster;
 800a6d6:	69bb      	ldr	r3, [r7, #24]
 800a6d8:	633b      	str	r3, [r7, #48]	; 0x30

                        /* Check the value of the new cluster - it must be a valid cluster number
                           or something is really wrong!  */
                        if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800a6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d907      	bls.n	800a6f0 <_fx_directory_entry_write+0x6ec>
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a6e6:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800a6ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d301      	bcc.n	800a6f4 <_fx_directory_entry_write+0x6f0>
                        {

                            /* Send error message back to caller.  */
                            return(FX_FILE_CORRUPT);
 800a6f0:	2308      	movs	r3, #8
 800a6f2:	e2bd      	b.n	800ac70 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Setup the relative sector (this is zero for subsequent cluster.  */
                        relative_sector =  0;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	63bb      	str	r3, [r7, #56]	; 0x38

                        /* Calculate the next logical sector.  */
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fe:	3b02      	subs	r3, #2
                             ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800a700:	6979      	ldr	r1, [r7, #20]
 800a702:	6d49      	ldr	r1, [r1, #84]	; 0x54
                            (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a704:	fb01 f303 	mul.w	r3, r1, r3
                        logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a708:	4413      	add	r3, r2
 800a70a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a70c:	e009      	b.n	800a722 <_fx_directory_entry_write+0x71e>
                }
                else
                {

                    /* Increment the logical sector.  */
                    logical_sector++;
 800a70e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a710:	3301      	adds	r3, #1
 800a712:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Determine if the logical sector is valid.  */
                    if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a718:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a71a:	429a      	cmp	r2, r3
 800a71c:	d301      	bcc.n	800a722 <_fx_directory_entry_write+0x71e>
                    {

                        /* We have exceeded the root directory.  */

                        /* Send error message back to caller.  */
                        return(FX_FILE_CORRUPT);
 800a71e:	2308      	movs	r3, #8
 800a720:	e2a6      	b.n	800ac70 <_fx_directory_entry_write+0xc6c>
                    }
                }

                /* Read the sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a722:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a724:	2200      	movs	r2, #0
 800a726:	603b      	str	r3, [r7, #0]
 800a728:	607a      	str	r2, [r7, #4]
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a72e:	2203      	movs	r2, #3
 800a730:	9202      	str	r2, [sp, #8]
 800a732:	2201      	movs	r2, #1
 800a734:	9201      	str	r2, [sp, #4]
 800a736:	9300      	str	r3, [sp, #0]
 800a738:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a73c:	6978      	ldr	r0, [r7, #20]
 800a73e:	f003 f9b5 	bl	800daac <_fx_utility_logical_sector_read>
 800a742:	62f8      	str	r0, [r7, #44]	; 0x2c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800a744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a746:	2b00      	cmp	r3, #0
 800a748:	d001      	beq.n	800a74e <_fx_directory_entry_write+0x74a>
                {

                    /* Return the error status.  */
                    return(status);
 800a74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a74c:	e290      	b.n	800ac70 <_fx_directory_entry_write+0xc6c>
                }

                /* Setup logical sector.  */
                sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	689b      	ldr	r3, [r3, #8]
 800a752:	673b      	str	r3, [r7, #112]	; 0x70

                /* Setup a fresh byte offset.  */
                byte_offset = 0;
 800a754:	2300      	movs	r3, #0
 800a756:	637b      	str	r3, [r7, #52]	; 0x34

                /* Setup a new pointer into the buffer.  */
                work_ptr = sector_base_ptr;
 800a758:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a75a:	677b      	str	r3, [r7, #116]	; 0x74
                changed_offset = 0;
#endif /* FX_ENABLE_FAULT_TOLERANT */
            }

            /* Decrement loop control.  */
            card--;
 800a75c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a75e:	3b01      	subs	r3, #1
 800a760:	657b      	str	r3, [r7, #84]	; 0x54
            work_ptr[0] = (UCHAR)card;
 800a762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a764:	b2da      	uxtb	r2, r3
 800a766:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a768:	701a      	strb	r2, [r3, #0]
        while (card > 0)
 800a76a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	f47f af08 	bne.w	800a582 <_fx_directory_entry_write+0x57e>
        }

        /* Determine if there is a short name.  */
        if (entry_ptr -> fx_dir_entry_short_name[0] == 0)
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	791b      	ldrb	r3, [r3, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d116      	bne.n	800a7a8 <_fx_directory_entry_write+0x7a4>
        {

            /* Loop to copy the new short file name.  */
            for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800a77a:	2300      	movs	r3, #0
 800a77c:	667b      	str	r3, [r7, #100]	; 0x64
 800a77e:	e00f      	b.n	800a7a0 <_fx_directory_entry_write+0x79c>
            {

                /* Pickup shortname character.  */
                alpha = shortname[i];
 800a780:	f107 021c 	add.w	r2, r7, #28
 800a784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a786:	4413      	add	r3, r2
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Now store the short name character.  */
                *work_ptr++ =  (UCHAR)alpha;
 800a78e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a790:	1c5a      	adds	r2, r3, #1
 800a792:	677a      	str	r2, [r7, #116]	; 0x74
 800a794:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800a798:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE); i++)
 800a79a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a79c:	3301      	adds	r3, #1
 800a79e:	667b      	str	r3, [r7, #100]	; 0x64
 800a7a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7a2:	2b0a      	cmp	r3, #10
 800a7a4:	d9ec      	bls.n	800a780 <_fx_directory_entry_write+0x77c>
 800a7a6:	e1a5      	b.n	800aaf4 <_fx_directory_entry_write+0xaf0>
        }
        else
        {

            /* Clear the short file name area.  */
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	667b      	str	r3, [r7, #100]	; 0x64
 800a7ac:	e007      	b.n	800a7be <_fx_directory_entry_write+0x7ba>
            {
                work_ptr[i] = ' ';
 800a7ae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a7b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7b2:	4413      	add	r3, r2
 800a7b4:	2220      	movs	r2, #32
 800a7b6:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++)
 800a7b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	667b      	str	r3, [r7, #100]	; 0x64
 800a7be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7c0:	2b0a      	cmp	r3, #10
 800a7c2:	d9f4      	bls.n	800a7ae <_fx_directory_entry_write+0x7aa>
            }

            /* Loop to copy the old short file name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	667b      	str	r3, [r7, #100]	; 0x64
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	663b      	str	r3, [r7, #96]	; 0x60
 800a7cc:	e01c      	b.n	800a808 <_fx_directory_entry_write+0x804>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == '.')
 800a7ce:	693a      	ldr	r2, [r7, #16]
 800a7d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7d2:	4413      	add	r3, r2
 800a7d4:	3304      	adds	r3, #4
 800a7d6:	781b      	ldrb	r3, [r3, #0]
 800a7d8:	2b2e      	cmp	r3, #46	; 0x2e
 800a7da:	d019      	beq.n	800a810 <_fx_directory_entry_write+0x80c>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800a7dc:	693a      	ldr	r2, [r7, #16]
 800a7de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7e0:	4413      	add	r3, r2
 800a7e2:	3304      	adds	r3, #4
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d014      	beq.n	800a814 <_fx_directory_entry_write+0x810>
                {
                    break;
                }

                /* Copy file name character.  */
                work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 800a7ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a7ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a7ee:	4413      	add	r3, r2
 800a7f0:	6939      	ldr	r1, [r7, #16]
 800a7f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a7f4:	440a      	add	r2, r1
 800a7f6:	3204      	adds	r2, #4
 800a7f8:	7812      	ldrb	r2, [r2, #0]
 800a7fa:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800a7fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7fe:	3301      	adds	r3, #1
 800a800:	667b      	str	r3, [r7, #100]	; 0x64
 800a802:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a804:	3301      	adds	r3, #1
 800a806:	663b      	str	r3, [r7, #96]	; 0x60
 800a808:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a80a:	2b07      	cmp	r3, #7
 800a80c:	d9df      	bls.n	800a7ce <_fx_directory_entry_write+0x7ca>
 800a80e:	e002      	b.n	800a816 <_fx_directory_entry_write+0x812>
                    break;
 800a810:	bf00      	nop
 800a812:	e000      	b.n	800a816 <_fx_directory_entry_write+0x812>
                    break;
 800a814:	bf00      	nop
            }

            /* Determine if there is anything left in the short file name.  */
            if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] != 0)
 800a816:	693a      	ldr	r2, [r7, #16]
 800a818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a81a:	4413      	add	r3, r2
 800a81c:	3304      	adds	r3, #4
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d020      	beq.n	800a866 <_fx_directory_entry_write+0x862>
            {

                /* Pickup remaining characters.  */
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a824:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a826:	3301      	adds	r3, #1
 800a828:	667b      	str	r3, [r7, #100]	; 0x64
 800a82a:	2308      	movs	r3, #8
 800a82c:	663b      	str	r3, [r7, #96]	; 0x60
 800a82e:	e015      	b.n	800a85c <_fx_directory_entry_write+0x858>
                {

                    /* If NULL is encountered, stop the copying.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_short_name[i] == 0)
 800a830:	693a      	ldr	r2, [r7, #16]
 800a832:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a834:	4413      	add	r3, r2
 800a836:	3304      	adds	r3, #4
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d012      	beq.n	800a864 <_fx_directory_entry_write+0x860>
                    {
                        break;
                    }

                    /* Copy file name character.  */
                    work_ptr[j] =  (UCHAR)entry_ptr -> fx_dir_entry_short_name[i];
 800a83e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a840:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a842:	4413      	add	r3, r2
 800a844:	6939      	ldr	r1, [r7, #16]
 800a846:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a848:	440a      	add	r2, r1
 800a84a:	3204      	adds	r2, #4
 800a84c:	7812      	ldrb	r2, [r2, #0]
 800a84e:	701a      	strb	r2, [r3, #0]
                for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800a850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a852:	3301      	adds	r3, #1
 800a854:	667b      	str	r3, [r7, #100]	; 0x64
 800a856:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a858:	3301      	adds	r3, #1
 800a85a:	663b      	str	r3, [r7, #96]	; 0x60
 800a85c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a85e:	2b0a      	cmp	r3, #10
 800a860:	d9e6      	bls.n	800a830 <_fx_directory_entry_write+0x82c>
 800a862:	e000      	b.n	800a866 <_fx_directory_entry_write+0x862>
                        break;
 800a864:	bf00      	nop
                }
            }

            /* Adjust the work pointer accordingly.  */
            work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 800a866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a868:	330b      	adds	r3, #11
 800a86a:	677b      	str	r3, [r7, #116]	; 0x74
 800a86c:	e142      	b.n	800aaf4 <_fx_directory_entry_write+0xaf0>
    }
    else
    {

        /* Determine if long name was shorted.  */
        if (entry_ptr -> fx_dir_entry_long_name_shorted > 0)
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	699b      	ldr	r3, [r3, #24]
 800a872:	2b00      	cmp	r3, #0
 800a874:	f000 80a1 	beq.w	800a9ba <_fx_directory_entry_write+0x9b6>
        {

            /* Check for a valid short name.  */
            if ((UCHAR)(0x40 | entry_ptr -> fx_dir_entry_long_name_shorted) == (UCHAR)(*work_ptr))
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	699b      	ldr	r3, [r3, #24]
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a882:	b2da      	uxtb	r2, r3
 800a884:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	429a      	cmp	r2, r3
 800a88a:	f040 8096 	bne.w	800a9ba <_fx_directory_entry_write+0x9b6>
            {

                /* Loop through the file name.  */
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 800a88e:	2300      	movs	r3, #0
 800a890:	663b      	str	r3, [r7, #96]	; 0x60
 800a892:	e08c      	b.n	800a9ae <_fx_directory_entry_write+0x9aa>
                {

                    /* Check for a free entry to be written.  */
                    if ((UCHAR)entry_ptr -> fx_dir_entry_name[0] == (UCHAR)FX_DIR_ENTRY_FREE)
 800a894:	693b      	ldr	r3, [r7, #16]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	2be5      	cmp	r3, #229	; 0xe5
 800a89c:	d102      	bne.n	800a8a4 <_fx_directory_entry_write+0x8a0>
                    {
                        /* Delete long parts.  */
                        work_ptr[0] =  (UCHAR)FX_DIR_ENTRY_FREE;
 800a89e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8a0:	22e5      	movs	r2, #229	; 0xe5
 800a8a2:	701a      	strb	r2, [r3, #0]
                    }

                    /* Setup pointers for the name write.  */
                    work_ptr += FX_DIR_ENTRY_SIZE;
 800a8a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8a6:	3320      	adds	r3, #32
 800a8a8:	677b      	str	r3, [r7, #116]	; 0x74
                    byte_offset += FX_DIR_ENTRY_SIZE;
 800a8aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ac:	3320      	adds	r3, #32
 800a8ae:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Update changed_size. */
                    changed_size += FX_DIR_ENTRY_SIZE;
#endif /* FX_ENABLE_FAULT_TOLERANT */

                    /* Determine if the write is within the current sector.   */
                    if (byte_offset >= media_ptr -> fx_media_bytes_per_sector)
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d376      	bcc.n	800a9a8 <_fx_directory_entry_write+0x9a4>
                        else
                        {
#endif /* FX_ENABLE_FAULT_TOLERANT */

                            /* Write the current sector out.  */
                            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800a8ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8bc:	2200      	movs	r2, #0
 800a8be:	4698      	mov	r8, r3
 800a8c0:	4691      	mov	r9, r2
 800a8c2:	2303      	movs	r3, #3
 800a8c4:	9302      	str	r3, [sp, #8]
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	9301      	str	r3, [sp, #4]
 800a8ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a8cc:	9300      	str	r3, [sp, #0]
 800a8ce:	4642      	mov	r2, r8
 800a8d0:	464b      	mov	r3, r9
 800a8d2:	6978      	ldr	r0, [r7, #20]
 800a8d4:	f003 fb7e 	bl	800dfd4 <_fx_utility_logical_sector_write>
 800a8d8:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
                        }
#endif /* FX_ENABLE_FAULT_TOLERANT */

                        /* Determine if an error occurred.  */
                        if (status != FX_SUCCESS)
 800a8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d001      	beq.n	800a8e4 <_fx_directory_entry_write+0x8e0>
                        {

                            /* Return the error status.  */
                            return(status);
 800a8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e2:	e1c5      	b.n	800ac70 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Determine if we are in the root directory.  */
                        if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d335      	bcc.n	800a95a <_fx_directory_entry_write+0x956>
                        {

                            /* Determine the next sector of the directory entry.  */
                            if (relative_sector < (media_ptr -> fx_media_sectors_per_cluster - 1))
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8f2:	3b01      	subs	r3, #1
 800a8f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d206      	bcs.n	800a908 <_fx_directory_entry_write+0x904>
                            {

                                /* More sectors in this cluster.  */

                                /* Simply increment the logical sector.  */
                                logical_sector++;
 800a8fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	63fb      	str	r3, [r7, #60]	; 0x3c

                                /* Increment the relative sector.  */
                                relative_sector++;
 800a900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a902:	3301      	adds	r3, #1
 800a904:	63bb      	str	r3, [r7, #56]	; 0x38
 800a906:	e032      	b.n	800a96e <_fx_directory_entry_write+0x96a>
                            {

                                /* We need to move to the next cluster.  */

                                /* Pickup the next cluster.  */
                                status =  _fx_utility_FAT_entry_read(media_ptr, cluster, &next_cluster);
 800a908:	f107 0318 	add.w	r3, r7, #24
 800a90c:	461a      	mov	r2, r3
 800a90e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a910:	6978      	ldr	r0, [r7, #20]
 800a912:	f001 fdb1 	bl	800c478 <_fx_utility_FAT_entry_read>
 800a916:	62f8      	str	r0, [r7, #44]	; 0x2c

                                /* Check for I/O error.  */
                                if (status != FX_SUCCESS)
 800a918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d001      	beq.n	800a922 <_fx_directory_entry_write+0x91e>
                                {

                                    /* Return error code.  */
                                    return(status);
 800a91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a920:	e1a6      	b.n	800ac70 <_fx_directory_entry_write+0xc6c>
                                }

                                /* Copy next cluster to the current cluster.  */
                                cluster =  next_cluster;
 800a922:	69bb      	ldr	r3, [r7, #24]
 800a924:	633b      	str	r3, [r7, #48]	; 0x30

                                /* Check the value of the new cluster - it must be a valid cluster number
                                   or something is really wrong!  */
                                if ((cluster < FX_FAT_ENTRY_START) || (cluster >= media_ptr -> fx_media_fat_reserved))
 800a926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d907      	bls.n	800a93c <_fx_directory_entry_write+0x938>
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a932:	f8d3 34a8 	ldr.w	r3, [r3, #1192]	; 0x4a8
 800a936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a938:	429a      	cmp	r2, r3
 800a93a:	d301      	bcc.n	800a940 <_fx_directory_entry_write+0x93c>
                                {

                                    /* Send error message back to caller.  */
                                    return(FX_FILE_CORRUPT);
 800a93c:	2308      	movs	r3, #8
 800a93e:	e197      	b.n	800ac70 <_fx_directory_entry_write+0xc6c>
                                }

                                /* Setup the relative sector (this is zero for subsequent cluster.  */
                                relative_sector =  0;
 800a940:	2300      	movs	r3, #0
 800a942:	63bb      	str	r3, [r7, #56]	; 0x38

                                /* Calculate the next logical sector.  */
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94a:	3b02      	subs	r3, #2
                                     ((ULONG)media_ptr -> fx_media_sectors_per_cluster));
 800a94c:	6979      	ldr	r1, [r7, #20]
 800a94e:	6d49      	ldr	r1, [r1, #84]	; 0x54
                                    (((ULONG)cluster - FX_FAT_ENTRY_START) *
 800a950:	fb01 f303 	mul.w	r3, r1, r3
                                logical_sector =   ((ULONG)media_ptr -> fx_media_data_sector_start) +
 800a954:	4413      	add	r3, r2
 800a956:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a958:	e009      	b.n	800a96e <_fx_directory_entry_write+0x96a>
                        }
                        else
                        {

                            /* Increment the logical sector.  */
                            logical_sector++;
 800a95a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a95c:	3301      	adds	r3, #1
 800a95e:	63fb      	str	r3, [r7, #60]	; 0x3c

                            /* Determine if the logical sector is valid.  */
                            if (logical_sector >= (ULONG)(media_ptr -> fx_media_data_sector_start))
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a964:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a966:	429a      	cmp	r2, r3
 800a968:	d301      	bcc.n	800a96e <_fx_directory_entry_write+0x96a>
                            {

                                /* We have exceeded the root directory.  */

                                /* Send error message back to caller.  */
                                return(FX_FILE_CORRUPT);
 800a96a:	2308      	movs	r3, #8
 800a96c:	e180      	b.n	800ac70 <_fx_directory_entry_write+0xc6c>
                            }
                        }

                        /* Read the next logical sector.  */
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a96e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a970:	2200      	movs	r2, #0
 800a972:	469a      	mov	sl, r3
 800a974:	4693      	mov	fp, r2
                                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_DIRECTORY_SECTOR);
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	689b      	ldr	r3, [r3, #8]
                        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) logical_sector,
 800a97a:	2203      	movs	r2, #3
 800a97c:	9202      	str	r2, [sp, #8]
 800a97e:	2201      	movs	r2, #1
 800a980:	9201      	str	r2, [sp, #4]
 800a982:	9300      	str	r3, [sp, #0]
 800a984:	4652      	mov	r2, sl
 800a986:	465b      	mov	r3, fp
 800a988:	6978      	ldr	r0, [r7, #20]
 800a98a:	f003 f88f 	bl	800daac <_fx_utility_logical_sector_read>
 800a98e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* Determine if an error occurred.  */
                        if (status != FX_SUCCESS)
 800a990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a992:	2b00      	cmp	r3, #0
 800a994:	d001      	beq.n	800a99a <_fx_directory_entry_write+0x996>
                        {

                            /* Return the error status.  */
                            return(status);
 800a996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a998:	e16a      	b.n	800ac70 <_fx_directory_entry_write+0xc6c>
                        }

                        /* Move to the next sector buffer.  */
                        sector_base_ptr = media_ptr -> fx_media_memory_buffer;
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	689b      	ldr	r3, [r3, #8]
 800a99e:	673b      	str	r3, [r7, #112]	; 0x70

                        /* Setup new buffer pointers.  */
                        byte_offset =  0;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	637b      	str	r3, [r7, #52]	; 0x34
                        work_ptr = sector_base_ptr;
 800a9a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a9a6:	677b      	str	r3, [r7, #116]	; 0x74
                for (j = 0; j < entry_ptr -> fx_dir_entry_long_name_shorted; j++)
 800a9a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	663b      	str	r3, [r7, #96]	; 0x60
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	699b      	ldr	r3, [r3, #24]
 800a9b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	f4ff af6d 	bcc.w	800a894 <_fx_directory_entry_write+0x890>
                }
            }
        }

        /* This is an 8.3 name.  First clear the directory name.  */
        for (j = 0; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	663b      	str	r3, [r7, #96]	; 0x60
 800a9be:	e007      	b.n	800a9d0 <_fx_directory_entry_write+0x9cc>
        {
            work_ptr[j] = ' ';
 800a9c0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a9c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9c4:	4413      	add	r3, r2
 800a9c6:	2220      	movs	r2, #32
 800a9c8:	701a      	strb	r2, [r3, #0]
        for (j = 0; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; j++)
 800a9ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9cc:	3301      	adds	r3, #1
 800a9ce:	663b      	str	r3, [r7, #96]	; 0x60
 800a9d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a9d2:	2b0a      	cmp	r3, #10
 800a9d4:	d9f4      	bls.n	800a9c0 <_fx_directory_entry_write+0x9bc>
        }

        /* Copy leading dots in case of first two entries of a directory.  */
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	667b      	str	r3, [r7, #100]	; 0x64
 800a9da:	e007      	b.n	800a9ec <_fx_directory_entry_write+0x9e8>
        {
            work_ptr[i] = '.';
 800a9dc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a9de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9e0:	4413      	add	r3, r2
 800a9e2:	222e      	movs	r2, #46	; 0x2e
 800a9e4:	701a      	strb	r2, [r3, #0]
        for (i = 0; (UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.'; i++)
 800a9e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9e8:	3301      	adds	r3, #1
 800a9ea:	667b      	str	r3, [r7, #100]	; 0x64
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	681a      	ldr	r2, [r3, #0]
 800a9f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9f2:	4413      	add	r3, r2
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	2b2e      	cmp	r3, #46	; 0x2e
 800a9f8:	d0f0      	beq.n	800a9dc <_fx_directory_entry_write+0x9d8>
        }

        /* Determine if there are more characters to copy.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	681a      	ldr	r2, [r3, #0]
 800a9fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa00:	4413      	add	r3, r2
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d039      	beq.n	800aa7c <_fx_directory_entry_write+0xa78>
        {

            /* Copy directory name.  */
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800aa08:	2300      	movs	r3, #0
 800aa0a:	667b      	str	r3, [r7, #100]	; 0x64
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	663b      	str	r3, [r7, #96]	; 0x60
 800aa10:	e02d      	b.n	800aa6e <_fx_directory_entry_write+0xa6a>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == '.')
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa18:	4413      	add	r3, r2
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	2b2e      	cmp	r3, #46	; 0x2e
 800aa1e:	d02a      	beq.n	800aa76 <_fx_directory_entry_write+0xa72>
                {
                    break;
                }
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa26:	4413      	add	r3, r2
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d025      	beq.n	800aa7a <_fx_directory_entry_write+0xa76>
                {
                    break;
                }

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	681a      	ldr	r2, [r3, #0]
 800aa32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa34:	4413      	add	r3, r2
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800aa3c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800aa40:	2b60      	cmp	r3, #96	; 0x60
 800aa42:	d908      	bls.n	800aa56 <_fx_directory_entry_write+0xa52>
 800aa44:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800aa48:	2b7a      	cmp	r3, #122	; 0x7a
 800aa4a:	d804      	bhi.n	800aa56 <_fx_directory_entry_write+0xa52>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800aa4c:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800aa50:	3b20      	subs	r3, #32
 800aa52:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 800aa56:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800aa58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa5a:	4413      	add	r3, r2
 800aa5c:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800aa60:	701a      	strb	r2, [r3, #0]
            for (i = 0, j = 0; j < FX_DIR_NAME_SIZE; i++, j++)
 800aa62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa64:	3301      	adds	r3, #1
 800aa66:	667b      	str	r3, [r7, #100]	; 0x64
 800aa68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	663b      	str	r3, [r7, #96]	; 0x60
 800aa6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aa70:	2b07      	cmp	r3, #7
 800aa72:	d9ce      	bls.n	800aa12 <_fx_directory_entry_write+0xa0e>
 800aa74:	e002      	b.n	800aa7c <_fx_directory_entry_write+0xa78>
                    break;
 800aa76:	bf00      	nop
 800aa78:	e000      	b.n	800aa7c <_fx_directory_entry_write+0xa78>
                    break;
 800aa7a:	bf00      	nop
            }
        }

        /* Determine if there are more characters in the name.  */
        if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] != 0)
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	681a      	ldr	r2, [r3, #0]
 800aa80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa82:	4413      	add	r3, r2
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d031      	beq.n	800aaee <_fx_directory_entry_write+0xaea>
        {

            /* Loop to copy the remainder of the name.  */
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800aa8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	667b      	str	r3, [r7, #100]	; 0x64
 800aa90:	2308      	movs	r3, #8
 800aa92:	663b      	str	r3, [r7, #96]	; 0x60
 800aa94:	e026      	b.n	800aae4 <_fx_directory_entry_write+0xae0>
            {

                /* Check for end of copy conditions.  */
                if ((UCHAR)entry_ptr -> fx_dir_entry_name[i] == 0)
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa9c:	4413      	add	r3, r2
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d023      	beq.n	800aaec <_fx_directory_entry_write+0xae8>
                {
                    break;
                }

                /* Pickup shortname character.  */
                alpha = entry_ptr -> fx_dir_entry_name[i];
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	681a      	ldr	r2, [r3, #0]
 800aaa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aaaa:	4413      	add	r3, r2
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

                /* Determine if character is lower case.  */
                if ((alpha >= 'a') && (alpha <= 'z'))
 800aab2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800aab6:	2b60      	cmp	r3, #96	; 0x60
 800aab8:	d908      	bls.n	800aacc <_fx_directory_entry_write+0xac8>
 800aaba:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800aabe:	2b7a      	cmp	r3, #122	; 0x7a
 800aac0:	d804      	bhi.n	800aacc <_fx_directory_entry_write+0xac8>
                {

                    /* Store the character - converted to upper case.  */
                    alpha =  (CHAR)(alpha - ((CHAR)0x20));
 800aac2:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 800aac6:	3b20      	subs	r3, #32
 800aac8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
                }

                /* Copy a name character.  */
                work_ptr[j] =  (UCHAR)alpha;
 800aacc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800aace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aad0:	4413      	add	r3, r2
 800aad2:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 800aad6:	701a      	strb	r2, [r3, #0]
            for (i++, j = FX_DIR_NAME_SIZE; j < FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE; i++, j++)
 800aad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aada:	3301      	adds	r3, #1
 800aadc:	667b      	str	r3, [r7, #100]	; 0x64
 800aade:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aae0:	3301      	adds	r3, #1
 800aae2:	663b      	str	r3, [r7, #96]	; 0x60
 800aae4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800aae6:	2b0a      	cmp	r3, #10
 800aae8:	d9d5      	bls.n	800aa96 <_fx_directory_entry_write+0xa92>
 800aaea:	e000      	b.n	800aaee <_fx_directory_entry_write+0xaea>
                    break;
 800aaec:	bf00      	nop
            }
        }

        /* Move to the next entry.  */
        work_ptr += (FX_DIR_NAME_SIZE + FX_DIR_EXT_SIZE);
 800aaee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aaf0:	330b      	adds	r3, #11
 800aaf2:	677b      	str	r3, [r7, #116]	; 0x74
    }

    /* Write out the 8.3 part of the name. */

    /* Copy the attribute into the destination.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_attributes;
 800aaf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aaf6:	1c5a      	adds	r2, r3, #1
 800aaf8:	677a      	str	r2, [r7, #116]	; 0x74
 800aafa:	693a      	ldr	r2, [r7, #16]
 800aafc:	7f12      	ldrb	r2, [r2, #28]
 800aafe:	701a      	strb	r2, [r3, #0]

    /* Copy the reserved byte.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_reserved;
 800ab00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab02:	1c5a      	adds	r2, r3, #1
 800ab04:	677a      	str	r2, [r7, #116]	; 0x74
 800ab06:	693a      	ldr	r2, [r7, #16]
 800ab08:	7f52      	ldrb	r2, [r2, #29]
 800ab0a:	701a      	strb	r2, [r3, #0]

    /* Copy the created time in milliseconds.  */
    *work_ptr++ =  entry_ptr -> fx_dir_entry_created_time_ms;
 800ab0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab0e:	1c5a      	adds	r2, r3, #1
 800ab10:	677a      	str	r2, [r7, #116]	; 0x74
 800ab12:	693a      	ldr	r2, [r7, #16]
 800ab14:	7f92      	ldrb	r2, [r2, #30]
 800ab16:	701a      	strb	r2, [r3, #0]

    /* Copy the created time.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_time);
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	6a1b      	ldr	r3, [r3, #32]
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800ab20:	f001 fc57 	bl	800c3d2 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800ab24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab26:	3302      	adds	r3, #2
 800ab28:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the created date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_created_date);
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab2e:	4619      	mov	r1, r3
 800ab30:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800ab32:	f001 fc4e 	bl	800c3d2 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800ab36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab38:	3302      	adds	r3, #2
 800ab3a:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the last accessed date.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_last_accessed_date);
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab40:	4619      	mov	r1, r3
 800ab42:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800ab44:	f001 fc45 	bl	800c3d2 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800ab48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab4a:	3302      	adds	r3, #2
 800ab4c:	677b      	str	r3, [r7, #116]	; 0x74

    /* Determine if a FAT32 entry is present.  */
    if (media_ptr -> fx_media_32_bit_FAT)
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d008      	beq.n	800ab68 <_fx_directory_entry_write+0xb64>
    {

        /* Yes, FAT32 is present, store upper half of cluster.  */
        temp = (entry_ptr -> fx_dir_entry_cluster >> 16);
 800ab56:	693b      	ldr	r3, [r7, #16]
 800ab58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab5a:	0c1b      	lsrs	r3, r3, #16
 800ab5c:	66fb      	str	r3, [r7, #108]	; 0x6c
        _fx_utility_16_unsigned_write(work_ptr, temp);
 800ab5e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800ab60:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800ab62:	f001 fc36 	bl	800c3d2 <_fx_utility_16_unsigned_write>
 800ab66:	e003      	b.n	800ab70 <_fx_directory_entry_write+0xb6c>
    else
    {

        /* No, FAT16 or FAT12 is present, just write a 0 for
           the upper half of the cluster.  */
        _fx_utility_16_unsigned_write(work_ptr, 0);
 800ab68:	2100      	movs	r1, #0
 800ab6a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800ab6c:	f001 fc31 	bl	800c3d2 <_fx_utility_16_unsigned_write>
    }

    /* Advance the entry pointer.  */
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800ab70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab72:	3302      	adds	r3, #2
 800ab74:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the time into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_time);
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab7a:	4619      	mov	r1, r3
 800ab7c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800ab7e:	f001 fc28 	bl	800c3d2 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800ab82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab84:	3302      	adds	r3, #2
 800ab86:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the date into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, entry_ptr -> fx_dir_entry_date);
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800ab90:	f001 fc1f 	bl	800c3d2 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800ab94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab96:	3302      	adds	r3, #2
 800ab98:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the starting cluster into the destination.  */
    _fx_utility_16_unsigned_write(work_ptr, (UINT)entry_ptr -> fx_dir_entry_cluster);
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab9e:	4619      	mov	r1, r3
 800aba0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800aba2:	f001 fc16 	bl	800c3d2 <_fx_utility_16_unsigned_write>
    work_ptr =  work_ptr + 2;  /* Always 2 bytes  */
 800aba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aba8:	3302      	adds	r3, #2
 800abaa:	677b      	str	r3, [r7, #116]	; 0x74

    /* Copy the file size into the destination.  */
    _fx_utility_32_unsigned_write(work_ptr, (ULONG)entry_ptr -> fx_dir_entry_file_size);
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800abb2:	4613      	mov	r3, r2
 800abb4:	4619      	mov	r1, r3
 800abb6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800abb8:	f001 fc3d 	bl	800c436 <_fx_utility_32_unsigned_write>
    else
    {
#endif /* FX_ENABLE_FAULT_TOLERANT */

        /* Write the directory sector to the media.  */
        status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) logical_sector,
 800abbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abbe:	2200      	movs	r2, #0
 800abc0:	461c      	mov	r4, r3
 800abc2:	4615      	mov	r5, r2
 800abc4:	2303      	movs	r3, #3
 800abc6:	9302      	str	r3, [sp, #8]
 800abc8:	2301      	movs	r3, #1
 800abca:	9301      	str	r3, [sp, #4]
 800abcc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800abce:	9300      	str	r3, [sp, #0]
 800abd0:	4622      	mov	r2, r4
 800abd2:	462b      	mov	r3, r5
 800abd4:	6978      	ldr	r0, [r7, #20]
 800abd6:	f003 f9fd 	bl	800dfd4 <_fx_utility_logical_sector_write>
 800abda:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_FAULT_TOLERANT
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Determine if an error occurred.  */
    if (status != FX_SUCCESS)
 800abdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d001      	beq.n	800abe6 <_fx_directory_entry_write+0xbe2>
    {

        /* Return the error status.  */
        return(status);
 800abe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe4:	e044      	b.n	800ac70 <_fx_directory_entry_write+0xc6c>

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Determine if there is a previously found directory entry in the directory
       search cache.  */
    if (media_ptr -> fx_media_last_found_name[0])
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	f893 33e0 	ldrb.w	r3, [r3, #992]	; 0x3e0
 800abec:	2b00      	cmp	r3, #0
 800abee:	d03e      	beq.n	800ac6e <_fx_directory_entry_write+0xc6a>
    {

        /* Determine if the cached search directory entry matches the directory entry being
           written.  */
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	e9d3 23ac 	ldrd	r2, r3, [r3, #688]	; 0x2b0
 800abfc:	4299      	cmp	r1, r3
 800abfe:	bf08      	it	eq
 800ac00:	4290      	cmpeq	r0, r2
 800ac02:	d134      	bne.n	800ac6e <_fx_directory_entry_write+0xc6a>
            (entry_ptr -> fx_dir_entry_byte_offset == media_ptr -> fx_media_last_found_entry.fx_dir_entry_byte_offset))
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
        if ((entry_ptr -> fx_dir_entry_log_sector == media_ptr -> fx_media_last_found_entry.fx_dir_entry_log_sector) &&
 800ac0e:	429a      	cmp	r2, r3
 800ac10:	d12d      	bne.n	800ac6e <_fx_directory_entry_write+0xc6a>
        {

            /* Yes, this entry is the same as the one currently in the directory search cache.
               Update various fields in the directory search cache with the information being
               written now.  */
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_cluster =         entry_ptr -> fx_dir_entry_cluster;
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_file_size =       entry_ptr -> fx_dir_entry_file_size;
 800ac1c:	693b      	ldr	r3, [r7, #16]
 800ac1e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ac22:	6979      	ldr	r1, [r7, #20]
 800ac24:	e9c1 23aa 	strd	r2, r3, [r1, #680]	; 0x2a8
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_attributes =      entry_ptr -> fx_dir_entry_attributes;
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	7f1a      	ldrb	r2, [r3, #28]
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	f883 228c 	strb.w	r2, [r3, #652]	; 0x28c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_time =            entry_ptr -> fx_dir_entry_time;
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	f8c3 229c 	str.w	r2, [r3, #668]	; 0x29c
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_date =            entry_ptr -> fx_dir_entry_date;
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	f8c3 22a0 	str.w	r2, [r3, #672]	; 0x2a0
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_reserved =        entry_ptr -> fx_dir_entry_reserved;
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	7f5a      	ldrb	r2, [r3, #29]
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	f883 228d 	strb.w	r2, [r3, #653]	; 0x28d
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time_ms = entry_ptr -> fx_dir_entry_created_time_ms;
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	7f9a      	ldrb	r2, [r3, #30]
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	f883 228e 	strb.w	r2, [r3, #654]	; 0x28e
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_time =    entry_ptr -> fx_dir_entry_created_time;
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	6a1a      	ldr	r2, [r3, #32]
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
            media_ptr -> fx_media_last_found_entry.fx_dir_entry_created_date =    entry_ptr -> fx_dir_entry_created_date;
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac68:	697b      	ldr	r3, [r7, #20]
 800ac6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        }
    }
#endif

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 800ac6e:	2300      	movs	r3, #0
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3778      	adds	r7, #120	; 0x78
 800ac74:	46bd      	mov	sp, r7
 800ac76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac7a:	bf00      	nop

0800ac7c <_fx_media_abort>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_abort(FX_MEDIA  *media_ptr)
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b088      	sub	sp, #32
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of times this service has been called.  */
    media_ptr -> fx_media_aborts++;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800ac8a:	1c5a      	adds	r2, r3, #1
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
#endif

    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	4a3f      	ldr	r2, [pc, #252]	; (800ad94 <_fx_media_abort+0x118>)
 800ac98:	4293      	cmp	r3, r2
 800ac9a:	d001      	beq.n	800aca0 <_fx_media_abort+0x24>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800ac9c:	2311      	movs	r3, #17
 800ac9e:	e074      	b.n	800ad8a <_fx_media_abort+0x10e>

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_ABORT, media_ptr, 0, 0, 0, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	4a3b      	ldr	r2, [pc, #236]	; (800ad94 <_fx_media_abort+0x118>)
 800aca6:	4293      	cmp	r3, r2
 800aca8:	d001      	beq.n	800acae <_fx_media_abort+0x32>
 800acaa:	2311      	movs	r3, #17
 800acac:	e06d      	b.n	800ad8a <_fx_media_abort+0x10e>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800acb4:	f04f 31ff 	mov.w	r1, #4294967295
 800acb8:	4618      	mov	r0, r3
 800acba:	f004 fb89 	bl	800f3d0 <_tx_mutex_get>
 800acbe:	4603      	mov	r3, r0
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d001      	beq.n	800acc8 <_fx_media_abort+0x4c>
 800acc4:	2311      	movs	r3, #17
 800acc6:	e060      	b.n	800ad8a <_fx_media_abort+0x10e>

    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800acce:	61fb      	str	r3, [r7, #28]
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800acd6:	61bb      	str	r3, [r7, #24]
    while (open_count)
 800acd8:	e008      	b.n	800acec <_fx_media_abort+0x70>
    {

        /* Mark the file as aborted.  */
        file_ptr -> fx_file_id =  FX_FILE_ABORTED_ID;
 800acda:	69bb      	ldr	r3, [r7, #24]
 800acdc:	4a2e      	ldr	r2, [pc, #184]	; (800ad98 <_fx_media_abort+0x11c>)
 800acde:	601a      	str	r2, [r3, #0]

        /* Adjust the pointer and decrement the file opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ace4:	61bb      	str	r3, [r7, #24]
        open_count--;
 800ace6:	69fb      	ldr	r3, [r7, #28]
 800ace8:	3b01      	subs	r3, #1
 800acea:	61fb      	str	r3, [r7, #28]
    while (open_count)
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d1f3      	bne.n	800acda <_fx_media_abort+0x5e>
    }

    /* Build the "abort" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_ABORT;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2203      	movs	r2, #3
 800acf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2290      	movs	r2, #144	; 0x90
 800acfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_ABORT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the abort request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	4798      	blx	r3
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ad0c:	f3ef 8310 	mrs	r3, PRIMASK
 800ad10:	613b      	str	r3, [r7, #16]
#endif
    return(posture);
 800ad12:	693b      	ldr	r3, [r7, #16]

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 800ad14:	60fb      	str	r3, [r7, #12]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800ad16:	b672      	cpsid	i
#endif
    return(int_posture);
 800ad18:	68fb      	ldr	r3, [r7, #12]

    /* Now remove this media from the open list.  */

    /* Lockout interrupts for media removal.  */
    FX_DISABLE_INTS
 800ad1a:	617b      	str	r3, [r7, #20]

    /* See if the media is the only one on the media opened list.  */
    if (_fx_system_media_opened_count == ((ULONG) 1))
 800ad1c:	4b1f      	ldr	r3, [pc, #124]	; (800ad9c <_fx_media_abort+0x120>)
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	2b01      	cmp	r3, #1
 800ad22:	d103      	bne.n	800ad2c <_fx_media_abort+0xb0>
    {

        /* Only opened media, just set the opened list to NULL.  */
        _fx_system_media_opened_ptr =  FX_NULL;
 800ad24:	4b1e      	ldr	r3, [pc, #120]	; (800ada0 <_fx_media_abort+0x124>)
 800ad26:	2200      	movs	r2, #0
 800ad28:	601a      	str	r2, [r3, #0]
 800ad2a:	e019      	b.n	800ad60 <_fx_media_abort+0xe4>
    }
    else
    {

        /* Otherwise, not the only opened media, link-up the neighbors.  */
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
            media_ptr -> fx_media_opened_previous;
 800ad32:	687a      	ldr	r2, [r7, #4]
 800ad34:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800ad38:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
            media_ptr -> fx_media_opened_next;
 800ad42:	687a      	ldr	r2, [r7, #4]
 800ad44:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800ad48:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* See if we have to update the opened list head pointer.  */
        if (_fx_system_media_opened_ptr == media_ptr)
 800ad4c:	4b14      	ldr	r3, [pc, #80]	; (800ada0 <_fx_media_abort+0x124>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d104      	bne.n	800ad60 <_fx_media_abort+0xe4>
        {

            /* Yes, move the head pointer to the next opened media. */
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800ad5c:	4a10      	ldr	r2, [pc, #64]	; (800ada0 <_fx_media_abort+0x124>)
 800ad5e:	6013      	str	r3, [r2, #0]
        }
    }

    /* Decrement the opened media counter.  */
    _fx_system_media_opened_count--;
 800ad60:	4b0e      	ldr	r3, [pc, #56]	; (800ad9c <_fx_media_abort+0x120>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	3b01      	subs	r3, #1
 800ad66:	4a0d      	ldr	r2, [pc, #52]	; (800ad9c <_fx_media_abort+0x120>)
 800ad68:	6013      	str	r3, [r2, #0]

    /* Finally, Indicate that this media is aborted.  */
    media_ptr -> fx_media_id =  FX_MEDIA_ABORTED_ID;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	4a0d      	ldr	r2, [pc, #52]	; (800ada4 <_fx_media_abort+0x128>)
 800ad6e:	601a      	str	r2, [r3, #0]
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	f383 8810 	msr	PRIMASK, r3
}
 800ad7a:	bf00      	nop
#ifndef FX_DONT_CREATE_MUTEX

    /* Note that the protection is never released. The mutex delete
       service will handle all threads waiting access to this media
       control block.  */
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800ad82:	4618      	mov	r0, r3
 800ad84:	f004 fa7a 	bl	800f27c <_tx_mutex_delete>
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return status to the caller.  */
    return(FX_SUCCESS);
 800ad88:	2300      	movs	r3, #0
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3720      	adds	r7, #32
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	4d454449 	.word	0x4d454449
 800ad98:	46494c41 	.word	0x46494c41
 800ad9c:	24014aa4 	.word	0x24014aa4
 800ada0:	24014aa0 	.word	0x24014aa0
 800ada4:	4d454441 	.word	0x4d454441

0800ada8 <_fx_media_boot_info_extract>:
/*                                            check for bimap cache size, */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_boot_info_extract(FX_MEDIA *media_ptr)
{
 800ada8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800adac:	b084      	sub	sp, #16
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]

UCHAR *boot_sector;


    /* Move the buffer pointer into a local copy.  */
    boot_sector =  media_ptr -> fx_media_driver_buffer;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adb8:	60fb      	str	r3, [r7, #12]

    /* Extract the number of bytes per sector.  */
    media_ptr -> fx_media_bytes_per_sector =    _fx_utility_16_unsigned_read(&boot_sector[FX_BYTES_SECTOR]);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	330b      	adds	r3, #11
 800adbe:	4618      	mov	r0, r3
 800adc0:	f001 faf4 	bl	800c3ac <_fx_utility_16_unsigned_read>
 800adc4:	4602      	mov	r2, r0
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	629a      	str	r2, [r3, #40]	; 0x28
    if (media_ptr -> fx_media_bytes_per_sector == 0)
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adce:	2b00      	cmp	r3, #0
 800add0:	d101      	bne.n	800add6 <_fx_media_boot_info_extract+0x2e>
        return(_fx_utility_exFAT_geometry_check(media_ptr, boot_sector));
    }
    else
    {
#else
        return(FX_MEDIA_INVALID);
 800add2:	2302      	movs	r3, #2
 800add4:	e08c      	b.n	800aef0 <_fx_media_boot_info_extract+0x148>
#endif /* FX_ENABLE_EXFAT */


        /* FAT12/16/32 volume.  */
        /* Extract the number of sectors per track.  */
        media_ptr -> fx_media_sectors_per_track =   _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_TRK]);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	3318      	adds	r3, #24
 800adda:	4618      	mov	r0, r3
 800addc:	f001 fae6 	bl	800c3ac <_fx_utility_16_unsigned_read>
 800ade0:	4602      	mov	r2, r0
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Extract the number of heads.  */
        media_ptr -> fx_media_heads =               _fx_utility_16_unsigned_read(&boot_sector[FX_HEADS]);
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	331a      	adds	r3, #26
 800adea:	4618      	mov	r0, r3
 800adec:	f001 fade 	bl	800c3ac <_fx_utility_16_unsigned_read>
 800adf0:	4602      	mov	r2, r0
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Extract the total number of sectors.  */
        media_ptr -> fx_media_total_sectors =       _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS]);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	3313      	adds	r3, #19
 800adfa:	4618      	mov	r0, r3
 800adfc:	f001 fad6 	bl	800c3ac <_fx_utility_16_unsigned_read>
 800ae00:	4603      	mov	r3, r0
 800ae02:	2200      	movs	r2, #0
 800ae04:	4698      	mov	r8, r3
 800ae06:	4691      	mov	r9, r2
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	e9c3 890e 	strd	r8, r9, [r3, #56]	; 0x38
        if (media_ptr -> fx_media_total_sectors == 0)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ae14:	4313      	orrs	r3, r2
 800ae16:	d10b      	bne.n	800ae30 <_fx_media_boot_info_extract+0x88>
        {
            media_ptr -> fx_media_total_sectors = _fx_utility_32_unsigned_read(&boot_sector[FX_HUGE_SECTORS]);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	3320      	adds	r3, #32
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	f001 faed 	bl	800c3fc <_fx_utility_32_unsigned_read>
 800ae22:	4603      	mov	r3, r0
 800ae24:	2200      	movs	r2, #0
 800ae26:	461c      	mov	r4, r3
 800ae28:	4615      	mov	r5, r2
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	e9c3 450e 	strd	r4, r5, [r3, #56]	; 0x38
        }

        if (media_ptr -> fx_media_total_sectors == 0)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800ae36:	4313      	orrs	r3, r2
 800ae38:	d101      	bne.n	800ae3e <_fx_media_boot_info_extract+0x96>
        {
            return(FX_MEDIA_INVALID);
 800ae3a:	2302      	movs	r3, #2
 800ae3c:	e058      	b.n	800aef0 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of reserved sectors before the first FAT.  */
        media_ptr -> fx_media_reserved_sectors =    _fx_utility_16_unsigned_read(&boot_sector[FX_RESERVED_SECTORS]);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	330e      	adds	r3, #14
 800ae42:	4618      	mov	r0, r3
 800ae44:	f001 fab2 	bl	800c3ac <_fx_utility_16_unsigned_read>
 800ae48:	4602      	mov	r2, r0
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	645a      	str	r2, [r3, #68]	; 0x44
        if (media_ptr -> fx_media_reserved_sectors == 0)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d101      	bne.n	800ae5a <_fx_media_boot_info_extract+0xb2>
        {
            return(FX_MEDIA_INVALID);
 800ae56:	2302      	movs	r3, #2
 800ae58:	e04a      	b.n	800aef0 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of sectors per cluster.  */
        media_ptr -> fx_media_sectors_per_cluster = ((UINT)boot_sector[FX_SECTORS_CLUSTER] & 0xFF);
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	330d      	adds	r3, #13
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	461a      	mov	r2, r3
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	655a      	str	r2, [r3, #84]	; 0x54

        /* There should always be at least one reserved sector, representing the boot record itself.  */
        if (media_ptr -> fx_media_sectors_per_cluster == 0)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d101      	bne.n	800ae72 <_fx_media_boot_info_extract+0xca>
        {
            return(FX_MEDIA_INVALID);
 800ae6e:	2302      	movs	r3, #2
 800ae70:	e03e      	b.n	800aef0 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of sectors per FAT.  */
        media_ptr -> fx_media_sectors_per_FAT =     _fx_utility_16_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT]);
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	3316      	adds	r3, #22
 800ae76:	4618      	mov	r0, r3
 800ae78:	f001 fa98 	bl	800c3ac <_fx_utility_16_unsigned_read>
 800ae7c:	4602      	mov	r2, r0
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	659a      	str	r2, [r3, #88]	; 0x58
        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d107      	bne.n	800ae9a <_fx_media_boot_info_extract+0xf2>
        {
            media_ptr -> fx_media_sectors_per_FAT = _fx_utility_32_unsigned_read(&boot_sector[FX_SECTORS_PER_FAT_32]);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	3324      	adds	r3, #36	; 0x24
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f001 fab4 	bl	800c3fc <_fx_utility_32_unsigned_read>
 800ae94:	4602      	mov	r2, r0
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	659a      	str	r2, [r3, #88]	; 0x58
        }

        if (media_ptr -> fx_media_sectors_per_FAT == 0)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d101      	bne.n	800aea6 <_fx_media_boot_info_extract+0xfe>
        {
            return(FX_MEDIA_INVALID);
 800aea2:	2302      	movs	r3, #2
 800aea4:	e024      	b.n	800aef0 <_fx_media_boot_info_extract+0x148>
        }

        /* Extract the number of FATs.  */
        media_ptr -> fx_media_number_of_FATs =      ((UINT)boot_sector[FX_NUMBER_OF_FATS] & 0xFF);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	3310      	adds	r3, #16
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	461a      	mov	r2, r3
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	65da      	str	r2, [r3, #92]	; 0x5c
        if (media_ptr -> fx_media_number_of_FATs == 0)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d101      	bne.n	800aebe <_fx_media_boot_info_extract+0x116>
        {
            return(FX_BOOT_ERROR);
 800aeba:	2301      	movs	r3, #1
 800aebc:	e018      	b.n	800aef0 <_fx_media_boot_info_extract+0x148>

        /* Extract the number of hidden sectors.  */
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_64_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
#else
        media_ptr -> fx_media_hidden_sectors =      _fx_utility_32_unsigned_read(&boot_sector[FX_HIDDEN_SECTORS]);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	331c      	adds	r3, #28
 800aec2:	4618      	mov	r0, r3
 800aec4:	f001 fa9a 	bl	800c3fc <_fx_utility_32_unsigned_read>
 800aec8:	4602      	mov	r2, r0
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	671a      	str	r2, [r3, #112]	; 0x70
#endif
        /* Extract the number of root directory entries.  */
        media_ptr -> fx_media_root_directory_entries =  _fx_utility_16_unsigned_read(&boot_sector[FX_ROOT_DIR_ENTRIES]);
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	3311      	adds	r3, #17
 800aed2:	4618      	mov	r0, r3
 800aed4:	f001 fa6a 	bl	800c3ac <_fx_utility_16_unsigned_read>
 800aed8:	4602      	mov	r2, r0
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	679a      	str	r2, [r3, #120]	; 0x78

        /* Extract root directory starting cluster (32 bit only) and compute start sector */
        media_ptr -> fx_media_root_cluster_32 = _fx_utility_32_unsigned_read(&boot_sector[FX_ROOT_CLUSTER_32]);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	332c      	adds	r3, #44	; 0x2c
 800aee2:	4618      	mov	r0, r3
 800aee4:	f001 fa8a 	bl	800c3fc <_fx_utility_32_unsigned_read>
 800aee8:	4602      	mov	r2, r0
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	675a      	str	r2, [r3, #116]	; 0x74
#ifdef FX_ENABLE_EXFAT
    }
#endif /* FX_ENABLE_EXFAT */

    /* Return a successful status.  */
    return(FX_SUCCESS);
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3710      	adds	r7, #16
 800aef4:	46bd      	mov	sp, r7
 800aef6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800aefc <_fx_media_close>:
/*                                            and cache,                  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_close(FX_MEDIA  *media_ptr)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b092      	sub	sp, #72	; 0x48
 800af00:	af04      	add	r7, sp, #16
 800af02:	6078      	str	r0, [r7, #4]
#endif /* FX_DISABLE_FILE_CLOSE */
UINT     status;


    /* Check the media to make sure it is open.  */
    if (media_ptr -> fx_media_id != FX_MEDIA_ID)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4aa6      	ldr	r2, [pc, #664]	; (800b1a4 <_fx_media_close+0x2a8>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d001      	beq.n	800af12 <_fx_media_close+0x16>
    {

        /* Return the media not opened error.  */
        return(FX_MEDIA_NOT_OPEN);
 800af0e:	2311      	movs	r3, #17
 800af10:	e1c2      	b.n	800b298 <_fx_media_close+0x39c>

    /* If trace is enabled, unregister this object.  */
    FX_TRACE_OBJECT_UNREGISTER(media_ptr)

    /* Protect against other threads accessing the media.  */
    FX_PROTECT
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	4aa3      	ldr	r2, [pc, #652]	; (800b1a4 <_fx_media_close+0x2a8>)
 800af18:	4293      	cmp	r3, r2
 800af1a:	d001      	beq.n	800af20 <_fx_media_close+0x24>
 800af1c:	2311      	movs	r3, #17
 800af1e:	e1bb      	b.n	800b298 <_fx_media_close+0x39c>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800af26:	f04f 31ff 	mov.w	r1, #4294967295
 800af2a:	4618      	mov	r0, r3
 800af2c:	f004 fa50 	bl	800f3d0 <_tx_mutex_get>
 800af30:	4603      	mov	r3, r0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d001      	beq.n	800af3a <_fx_media_close+0x3e>
 800af36:	2311      	movs	r3, #17
 800af38:	e1ae      	b.n	800b298 <_fx_media_close+0x39c>

#ifndef FX_DISABLE_FILE_CLOSE
    /* Loop through the media's open files.  */
    open_count =  media_ptr -> fx_media_opened_file_count;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800af40:	637b      	str	r3, [r7, #52]	; 0x34
    file_ptr =    media_ptr -> fx_media_opened_file_list;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800af48:	633b      	str	r3, [r7, #48]	; 0x30
    while (open_count)
 800af4a:	e046      	b.n	800afda <_fx_media_close+0xde>
    {

        /* Look at each opened file to see if the same file is opened
           for writing and has been written to.  */
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800af4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	2b01      	cmp	r3, #1
 800af52:	d139      	bne.n	800afc8 <_fx_media_close+0xcc>
            (file_ptr -> fx_file_modified))
 800af54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af56:	7b1b      	ldrb	r3, [r3, #12]
        if ((file_ptr -> fx_file_open_mode == FX_OPEN_FOR_WRITE) &&
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d035      	beq.n	800afc8 <_fx_media_close+0xcc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800af5c:	f3ef 8310 	mrs	r3, PRIMASK
 800af60:	61bb      	str	r3, [r7, #24]
    return(posture);
 800af62:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800af64:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800af66:	b672      	cpsid	i
    return(int_posture);
 800af68:	697b      	ldr	r3, [r7, #20]
        {

            /* Lockout interrupts for time/date access.  */
            FX_DISABLE_INTS
 800af6a:	623b      	str	r3, [r7, #32]

            /* Set the new time and date.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_time =  _fx_system_time;
 800af6c:	4b8e      	ldr	r3, [pc, #568]	; (800b1a8 <_fx_media_close+0x2ac>)
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af72:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            file_ptr -> fx_file_dir_entry.fx_dir_entry_date =  _fx_system_date;
 800af76:	4b8d      	ldr	r3, [pc, #564]	; (800b1ac <_fx_media_close+0x2b0>)
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800af80:	6a3b      	ldr	r3, [r7, #32]
 800af82:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800af84:	69fb      	ldr	r3, [r7, #28]
 800af86:	f383 8810 	msr	PRIMASK, r3
}
 800af8a:	bf00      	nop
            /* Restore interrupt posture.  */
            FX_RESTORE_INTS

            /* Copy the new file size into the directory entry.  */
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
                file_ptr -> fx_file_current_file_size;
 800af8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
            file_ptr -> fx_file_dir_entry.fx_dir_entry_file_size =
 800af92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800af94:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                status = _fx_directory_exFAT_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry), UPDATE_STREAM);
            }
            else
            {
#endif /* FX_ENABLE_EXFAT */
                status = _fx_directory_entry_write(media_ptr, &(file_ptr -> fx_file_dir_entry));
 800af98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af9a:	3368      	adds	r3, #104	; 0x68
 800af9c:	4619      	mov	r1, r3
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f7ff f830 	bl	800a004 <_fx_directory_entry_write>
 800afa4:	62f8      	str	r0, [r7, #44]	; 0x2c
#ifdef FX_ENABLE_EXFAT
            }
#endif /* FX_ENABLE_EXFAT */

            /* Determine if the status was unsuccessful. */
            if (status != FX_SUCCESS)
 800afa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d00a      	beq.n	800afc2 <_fx_media_close+0xc6>
            {

                /* Release media protection.  */
                FX_UNPROTECT
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800afb2:	4618      	mov	r0, r3
 800afb4:	f004 fc84 	bl	800f8c0 <_tx_mutex_put>

                /* Call the media abort routine.  */
                _fx_media_abort(media_ptr);
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f7ff fe5f 	bl	800ac7c <_fx_media_abort>

                /* Return the error status.  */
                return(FX_IO_ERROR);
 800afbe:	2390      	movs	r3, #144	; 0x90
 800afc0:	e16a      	b.n	800b298 <_fx_media_close+0x39c>
            }

            /* Clear the file modified flag.  */
            file_ptr -> fx_file_modified =  FX_FALSE;
 800afc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc4:	2200      	movs	r2, #0
 800afc6:	731a      	strb	r2, [r3, #12]
        }

        /* Mark the file as closed.  */
        file_ptr -> fx_file_id =  FX_FILE_CLOSED_ID;
 800afc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afca:	4a79      	ldr	r2, [pc, #484]	; (800b1b0 <_fx_media_close+0x2b4>)
 800afcc:	601a      	str	r2, [r3, #0]

        /* Adjust the pointer and decrement the opened count.  */
        file_ptr =  file_ptr -> fx_file_opened_next;
 800afce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800afd2:	633b      	str	r3, [r7, #48]	; 0x30
        open_count--;
 800afd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afd6:	3b01      	subs	r3, #1
 800afd8:	637b      	str	r3, [r7, #52]	; 0x34
    while (open_count)
 800afda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d1b5      	bne.n	800af4c <_fx_media_close+0x50>
    }
#endif /* FX_DISABLE_FILE_CLOSE */

    /* Flush the cached individual FAT entries */
    _fx_utility_FAT_flush(media_ptr);
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f001 fc72 	bl	800c8ca <_fx_utility_FAT_flush>

    /* Flush changed sector(s) in the primary FAT to secondary FATs.  */
    _fx_utility_FAT_map_flush(media_ptr);
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f001 ffc0 	bl	800cf6c <_fx_utility_FAT_map_flush>
        _fx_utility_exFAT_bitmap_flush(media_ptr);
    }
#endif /* FX_ENABLE_EXFAT */

    /* Flush the internal logical sector cache.  */
    status =  _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_FALSE);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800aff2:	2100      	movs	r1, #0
 800aff4:	9102      	str	r1, [sp, #8]
 800aff6:	e9cd 2300 	strd	r2, r3, [sp]
 800affa:	f04f 0201 	mov.w	r2, #1
 800affe:	f04f 0300 	mov.w	r3, #0
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f002 fb3c 	bl	800d680 <_fx_utility_logical_sector_flush>
 800b008:	62f8      	str	r0, [r7, #44]	; 0x2c

    /* Determine if the flush was unsuccessful. */
    if (status != FX_SUCCESS)
 800b00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d00a      	beq.n	800b026 <_fx_media_close+0x12a>
    {

        /* Release media protection.  */
        FX_UNPROTECT
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800b016:	4618      	mov	r0, r3
 800b018:	f004 fc52 	bl	800f8c0 <_tx_mutex_put>

        /* Call the media abort routine.  */
        _fx_media_abort(media_ptr);
 800b01c:	6878      	ldr	r0, [r7, #4]
 800b01e:	f7ff fe2d 	bl	800ac7c <_fx_media_abort>

        /* Return the error status.  */
        return(FX_IO_ERROR);
 800b022:	2390      	movs	r3, #144	; 0x90
 800b024:	e138      	b.n	800b298 <_fx_media_close+0x39c>
    }

    /* Determine if the media needs to have the additional information sector updated. This will
       only be the case for 32-bit FATs. The logic here only needs to be done if the last reported
       available cluster count is different that the currently available clusters.  */
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	f000 80ca 	beq.w	800b1c4 <_fx_media_close+0x2c8>
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters) &&
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if ((media_ptr -> fx_media_FAT32_additional_info_sector) &&
 800b038:	429a      	cmp	r2, r3
 800b03a:	f000 80c3 	beq.w	800b1c4 <_fx_media_close+0x2c8>
        (media_ptr -> fx_media_driver_write_protect == FX_FALSE))
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
        (media_ptr -> fx_media_FAT32_additional_info_last_available != media_ptr -> fx_media_available_clusters) &&
 800b044:	2b00      	cmp	r3, #0
 800b046:	f040 80bd 	bne.w	800b1c4 <_fx_media_close+0x2c8>
    ULONG  signature;


#ifndef FX_DISABLE_CACHE
        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	69db      	ldr	r3, [r3, #28]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~(ULONG64)0);
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	69d9      	ldr	r1, [r3, #28]
 800b056:	f04f 32ff 	mov.w	r2, #4294967295
 800b05a:	f04f 33ff 	mov.w	r3, #4294967295
 800b05e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	69db      	ldr	r3, [r3, #28]
 800b066:	2200      	movs	r2, #0
 800b068:	745a      	strb	r2, [r3, #17]
#else
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2290      	movs	r2, #144	; 0x90
 800b076:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b07e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2201      	movs	r2, #1
 800b090:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2203      	movs	r2, #3
 800b098:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800b0a2:	1c5a      	adds	r2, r3, #1
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d00a      	beq.n	800b0d4 <_fx_media_close+0x1d8>
        {

            /* Release media protection.  */
            FX_UNPROTECT
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	f004 fbfb 	bl	800f8c0 <_tx_mutex_put>

            /* Call the media abort routine.  */
            _fx_media_abort(media_ptr);
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f7ff fdd6 	bl	800ac7c <_fx_media_abort>

            /* Return the error status.  */
            return(FX_IO_ERROR);
 800b0d0:	2390      	movs	r3, #144	; 0x90
 800b0d2:	e0e1      	b.n	800b298 <_fx_media_close+0x39c>
        }

        /* Setup a pointer into the FAT32 additional information sector.  */
        buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0da:	62bb      	str	r3, [r7, #40]	; 0x28

        /* Pickup the first signature long word.  */
        signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800b0dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0de:	f001 f98d 	bl	800c3fc <_fx_utility_32_unsigned_read>
 800b0e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Determine if the signature is correct.  */
        if (signature == 0x41615252)
 800b0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e6:	4a33      	ldr	r2, [pc, #204]	; (800b1b4 <_fx_media_close+0x2b8>)
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d16b      	bne.n	800b1c4 <_fx_media_close+0x2c8>
        {

            /* Yes, the first signature is correct, now pickup the next signature.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 800b0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f001 f982 	bl	800c3fc <_fx_utility_32_unsigned_read>
 800b0f8:	6278      	str	r0, [r7, #36]	; 0x24

            /* Determine if this signature is correct.  */
            if (signature == 0x61417272)
 800b0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0fc:	4a2e      	ldr	r2, [pc, #184]	; (800b1b8 <_fx_media_close+0x2bc>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d160      	bne.n	800b1c4 <_fx_media_close+0x2c8>
            {

                /* Yes, we have a good FAT32 additional information sector.  */

                /* Set the free cluster count to the available clusters in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[488], media_ptr -> fx_media_available_clusters);
 800b102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b104:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b10c:	4619      	mov	r1, r3
 800b10e:	4610      	mov	r0, r2
 800b110:	f001 f991 	bl	800c436 <_fx_utility_32_unsigned_write>

                /* Set the next free cluster number hint to starting search cluster in the media control block.  */
                _fx_utility_32_unsigned_write(&buffer_ptr[492], media_ptr -> fx_media_cluster_search_start);
 800b114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b116:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b120:	4619      	mov	r1, r3
 800b122:	4610      	mov	r0, r2
 800b124:	f001 f987 	bl	800c436 <_fx_utility_32_unsigned_write>

                /* Now write the sector back out to the media.  */
                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2201      	movs	r2, #1
 800b12c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2290      	movs	r2, #144	; 0x90
 800b134:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b13c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
                media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
                media_ptr -> fx_media_driver_sectors =          1;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2201      	movs	r2, #1
 800b14e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2203      	movs	r2, #3
 800b156:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                /* Set the system write flag since we are writing a directory sector.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2201      	movs	r2, #1
 800b15e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of driver write sector(s) requests.  */
                media_ptr -> fx_media_driver_write_requests++;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800b168:	1c5a      	adds	r2, r3, #1
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Invoke the driver to write the FAT32 additional information sector.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	4798      	blx	r3

                /* Clear the system write flag.  */
                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                /* Determine if the FAT32 sector was written correctly. */
                if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d017      	beq.n	800b1bc <_fx_media_close+0x2c0>
                {

                    /* Release media protection.  */
                    FX_UNPROTECT
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800b192:	4618      	mov	r0, r3
 800b194:	f004 fb94 	bl	800f8c0 <_tx_mutex_put>

                    /* Call the media abort routine.  */
                    _fx_media_abort(media_ptr);
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f7ff fd6f 	bl	800ac7c <_fx_media_abort>

                    /* Return the sector IO error status.  */
                    return(FX_IO_ERROR);
 800b19e:	2390      	movs	r3, #144	; 0x90
 800b1a0:	e07a      	b.n	800b298 <_fx_media_close+0x39c>
 800b1a2:	bf00      	nop
 800b1a4:	4d454449 	.word	0x4d454449
 800b1a8:	24014aac 	.word	0x24014aac
 800b1ac:	24014aa8 	.word	0x24014aa8
 800b1b0:	46494c43 	.word	0x46494c43
 800b1b4:	41615252 	.word	0x41615252
 800b1b8:	61417272 	.word	0x61417272
                }

                /* Successful update of the FAT32 additional information sector. Update the
                   last written available cluster count.  */
                media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	66da      	str	r2, [r3, #108]	; 0x6c
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver flush requests.  */
    media_ptr -> fx_media_driver_flush_requests++;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800b1ca:	1c5a      	adds	r2, r3, #1
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
#endif

    /* Build the "flush" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_FLUSH;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2202      	movs	r2, #2
 800b1d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2290      	movs	r2, #144	; 0x90
 800b1de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_FLUSH, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the flush request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	4798      	blx	r3

    /* Build the "uninitialize" I/O driver request.  */
    media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2208      	movs	r2, #8
 800b1f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2290      	movs	r2, #144	; 0x90
 800b1f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the uninitialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b206:	f3ef 8310 	mrs	r3, PRIMASK
 800b20a:	613b      	str	r3, [r7, #16]
    return(posture);
 800b20c:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800b20e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b210:	b672      	cpsid	i
    return(int_posture);
 800b212:	68fb      	ldr	r3, [r7, #12]

    /* Now remove this media from the open list.  */

    /* Lockout interrupts for media removal.  */
    FX_DISABLE_INTS
 800b214:	623b      	str	r3, [r7, #32]

    /* See if the media is the only one on the media opened list.  */
    if (_fx_system_media_opened_count == ((ULONG) 1))
 800b216:	4b22      	ldr	r3, [pc, #136]	; (800b2a0 <_fx_media_close+0x3a4>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d103      	bne.n	800b226 <_fx_media_close+0x32a>
    {

        /* Only opened media, just set the opened list to NULL.  */
        _fx_system_media_opened_ptr =  FX_NULL;
 800b21e:	4b21      	ldr	r3, [pc, #132]	; (800b2a4 <_fx_media_close+0x3a8>)
 800b220:	2200      	movs	r2, #0
 800b222:	601a      	str	r2, [r3, #0]
 800b224:	e019      	b.n	800b25a <_fx_media_close+0x35e>
    }
    else
    {

        /* Otherwise, not the only opened media, link-up the neighbors.  */
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
            media_ptr -> fx_media_opened_previous;
 800b22c:	687a      	ldr	r2, [r7, #4]
 800b22e:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
        (media_ptr -> fx_media_opened_next) -> fx_media_opened_previous =
 800b232:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
            media_ptr -> fx_media_opened_next;
 800b23c:	687a      	ldr	r2, [r7, #4]
 800b23e:	f8d2 20d0 	ldr.w	r2, [r2, #208]	; 0xd0
        (media_ptr -> fx_media_opened_previous) -> fx_media_opened_next =
 800b242:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* See if we have to update the opened list head pointer.  */
        if (_fx_system_media_opened_ptr == media_ptr)
 800b246:	4b17      	ldr	r3, [pc, #92]	; (800b2a4 <_fx_media_close+0x3a8>)
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	687a      	ldr	r2, [r7, #4]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d104      	bne.n	800b25a <_fx_media_close+0x35e>
        {

            /* Yes, move the head pointer to the next opened media. */
            _fx_system_media_opened_ptr =  media_ptr -> fx_media_opened_next;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800b256:	4a13      	ldr	r2, [pc, #76]	; (800b2a4 <_fx_media_close+0x3a8>)
 800b258:	6013      	str	r3, [r2, #0]
        }
    }

    /* Decrement the opened media counter.  */
    _fx_system_media_opened_count--;
 800b25a:	4b11      	ldr	r3, [pc, #68]	; (800b2a0 <_fx_media_close+0x3a4>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	3b01      	subs	r3, #1
 800b260:	4a0f      	ldr	r2, [pc, #60]	; (800b2a0 <_fx_media_close+0x3a4>)
 800b262:	6013      	str	r3, [r2, #0]

    /* Finally, Indicate that this media is closed.  */
    media_ptr -> fx_media_id =  FX_MEDIA_CLOSED_ID;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	4a10      	ldr	r2, [pc, #64]	; (800b2a8 <_fx_media_close+0x3ac>)
 800b268:	601a      	str	r2, [r3, #0]
 800b26a:	6a3b      	ldr	r3, [r7, #32]
 800b26c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b26e:	68bb      	ldr	r3, [r7, #8]
 800b270:	f383 8810 	msr	PRIMASK, r3
}
 800b274:	bf00      	nop
#ifndef FX_DONT_CREATE_MUTEX

    /* Note that the protection is never released. The mutex delete
       service will handle all threads waiting access to this media
       control block.  */
    tx_mutex_delete(& (media_ptr -> fx_media_protect));
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800b27c:	4618      	mov	r0, r3
 800b27e:	f003 fffd 	bl	800f27c <_tx_mutex_delete>
#endif
#endif

    /* Invoke media close callback. */
    if (media_ptr -> fx_media_close_notify)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d004      	beq.n	800b296 <_fx_media_close+0x39a>
    {
        media_ptr -> fx_media_close_notify(media_ptr);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	4798      	blx	r3
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return success status to the caller.  */
    return(FX_SUCCESS);
 800b296:	2300      	movs	r3, #0
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3738      	adds	r7, #56	; 0x38
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	24014aa4 	.word	0x24014aa4
 800b2a4:	24014aa0 	.word	0x24014aa0
 800b2a8:	4d454443 	.word	0x4d454443

0800b2ac <_fx_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fx_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                     VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                     VOID *memory_ptr, ULONG memory_size)
{
 800b2ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b2b0:	b09a      	sub	sp, #104	; 0x68
 800b2b2:	af04      	add	r7, sp, #16
 800b2b4:	60f8      	str	r0, [r7, #12]
 800b2b6:	60b9      	str	r1, [r7, #8]
 800b2b8:	607a      	str	r2, [r7, #4]
 800b2ba:	603b      	str	r3, [r7, #0]
FX_INT_SAVE_AREA


#ifndef FX_DISABLE_BUILD_OPTIONS
    /* Reference the version ID and option words to ensure they are linked in.  */
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 800b2bc:	4bba      	ldr	r3, [pc, #744]	; (800b5a8 <_fx_media_open+0x2fc>)
 800b2be:	681a      	ldr	r2, [r3, #0]
 800b2c0:	4bba      	ldr	r3, [pc, #744]	; (800b5ac <_fx_media_open+0x300>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	431a      	orrs	r2, r3
 800b2c6:	4bba      	ldr	r3, [pc, #744]	; (800b5b0 <_fx_media_open+0x304>)
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d003      	beq.n	800b2d8 <_fx_media_open+0x2c>
        _fx_version_id[0] == 0)
 800b2d0:	4bb8      	ldr	r3, [pc, #736]	; (800b5b4 <_fx_media_open+0x308>)
 800b2d2:	781b      	ldrb	r3, [r3, #0]
    if ((_fx_system_build_options_1 | _fx_system_build_options_2 | _fx_system_build_options_3) == 0 ||
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d102      	bne.n	800b2de <_fx_media_open+0x32>
    {

        /* We should never get here!  */
        return(FX_NOT_IMPLEMENTED);
 800b2d8:	2322      	movs	r3, #34	; 0x22
 800b2da:	f000 bd53 	b.w	800bd84 <_fx_media_open+0xad8>
#ifdef FX_DISABLE_CACHE
    media_ptr -> fx_media_memory_buffer_sector = (ULONG64)-1;
#endif /* FX_DISABLE_CACHE */

    /* Save the basic information in the media control block.  */
    media_ptr -> fx_media_name =                        media_name;
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	68ba      	ldr	r2, [r7, #8]
 800b2e2:	605a      	str	r2, [r3, #4]
    media_ptr -> fx_media_driver_entry =                media_driver;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	687a      	ldr	r2, [r7, #4]
 800b2e8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    media_ptr -> fx_media_memory_buffer =               (UCHAR *)memory_ptr;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b2f0:	609a      	str	r2, [r3, #8]
    media_ptr -> fx_media_memory_size =                 memory_size;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b2f6:	60da      	str	r2, [r3, #12]
#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    media_ptr -> fx_media_disable_burst_cache =         FX_FALSE;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b2fe:	461a      	mov	r2, r3
 800b300:	2300      	movs	r3, #0
 800b302:	f8c2 34a4 	str.w	r3, [r2, #1188]	; 0x4a4
    media_ptr -> fx_media_FAT_type =                    0;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b30c:	2200      	movs	r2, #0
 800b30e:	f883 24b0 	strb.w	r2, [r3, #1200]	; 0x4b0
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Save the original memory pointer.  */
    original_memory_ptr =  (UCHAR *)memory_ptr;
 800b312:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b314:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Clear the optional media statistics.  */
    media_ptr -> fx_media_directory_attributes_reads =  0;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2200      	movs	r2, #0
 800b31a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    media_ptr -> fx_media_directory_attributes_sets =  0;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2200      	movs	r2, #0
 800b322:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    media_ptr -> fx_media_directory_creates =  0;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2200      	movs	r2, #0
 800b32a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    media_ptr -> fx_media_directory_default_gets =  0;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2200      	movs	r2, #0
 800b332:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    media_ptr -> fx_media_directory_default_sets =  0;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2200      	movs	r2, #0
 800b33a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
    media_ptr -> fx_media_directory_deletes =  0;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2200      	movs	r2, #0
 800b342:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    media_ptr -> fx_media_directory_first_entry_finds =  0;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2200      	movs	r2, #0
 800b34a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
    media_ptr -> fx_media_directory_first_full_entry_finds =  0;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2200      	movs	r2, #0
 800b352:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    media_ptr -> fx_media_directory_information_gets =  0;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2200      	movs	r2, #0
 800b35a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
    media_ptr -> fx_media_directory_local_path_clears =  0;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	2200      	movs	r2, #0
 800b362:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
    media_ptr -> fx_media_directory_local_path_gets =  0;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	2200      	movs	r2, #0
 800b36a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    media_ptr -> fx_media_directory_local_path_restores =  0;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2200      	movs	r2, #0
 800b372:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    media_ptr -> fx_media_directory_local_path_sets =  0;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2200      	movs	r2, #0
 800b37a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    media_ptr -> fx_media_directory_name_tests =  0;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2200      	movs	r2, #0
 800b382:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    media_ptr -> fx_media_directory_next_entry_finds =  0;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2200      	movs	r2, #0
 800b38a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    media_ptr -> fx_media_directory_next_full_entry_finds =  0;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2200      	movs	r2, #0
 800b392:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    media_ptr -> fx_media_directory_renames =  0;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2200      	movs	r2, #0
 800b39a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    media_ptr -> fx_media_file_allocates =  0;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    media_ptr -> fx_media_file_attributes_reads =  0;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    media_ptr -> fx_media_file_attributes_sets =  0;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    media_ptr -> fx_media_file_best_effort_allocates =  0;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    media_ptr -> fx_media_file_closes =  0;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    media_ptr -> fx_media_file_creates =  0;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    media_ptr -> fx_media_file_deletes =  0;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
    media_ptr -> fx_media_file_opens =  0;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    media_ptr -> fx_media_file_reads =  0;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    media_ptr -> fx_media_file_relative_seeks =  0;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    media_ptr -> fx_media_file_renames =  0;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
    media_ptr -> fx_media_file_seeks =  0;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    media_ptr -> fx_media_file_truncates =  0;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2200      	movs	r2, #0
 800b402:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    media_ptr -> fx_media_file_truncate_releases =  0;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2200      	movs	r2, #0
 800b40a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    media_ptr -> fx_media_file_writes =  0;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	2200      	movs	r2, #0
 800b412:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    media_ptr -> fx_media_aborts =  0;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	2200      	movs	r2, #0
 800b41a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    media_ptr -> fx_media_flushes =  0;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2200      	movs	r2, #0
 800b422:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    media_ptr -> fx_media_reads =  0;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2200      	movs	r2, #0
 800b42a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    media_ptr -> fx_media_writes =  0;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2200      	movs	r2, #0
 800b432:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    media_ptr -> fx_media_directory_entry_reads =  0;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2200      	movs	r2, #0
 800b43a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    media_ptr -> fx_media_directory_entry_writes =  0;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2200      	movs	r2, #0
 800b442:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    media_ptr -> fx_media_directory_searches =  0;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2200      	movs	r2, #0
 800b44a:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE
    media_ptr -> fx_media_directory_search_cache_hits =  0;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	2200      	movs	r2, #0
 800b452:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
#endif
    media_ptr -> fx_media_directory_free_searches =  0;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2200      	movs	r2, #0
 800b45a:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
    media_ptr -> fx_media_fat_entry_reads =  0;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2200      	movs	r2, #0
 800b462:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_writes =  0;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	2200      	movs	r2, #0
 800b46a:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    media_ptr -> fx_media_fat_entry_cache_read_hits =  0;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2200      	movs	r2, #0
 800b472:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    media_ptr -> fx_media_fat_entry_cache_read_misses =  0;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	2200      	movs	r2, #0
 800b47a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    media_ptr -> fx_media_fat_entry_cache_write_hits =  0;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2200      	movs	r2, #0
 800b482:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    media_ptr -> fx_media_fat_entry_cache_write_misses =  0;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2200      	movs	r2, #0
 800b48a:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    media_ptr -> fx_media_fat_cache_flushes =  0;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2200      	movs	r2, #0
 800b492:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    media_ptr -> fx_media_fat_sector_reads =  0;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2200      	movs	r2, #0
 800b49a:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    media_ptr -> fx_media_fat_sector_writes =  0;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    media_ptr -> fx_media_logical_sector_reads =  0;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    media_ptr -> fx_media_logical_sector_writes =  0;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    media_ptr -> fx_media_logical_sector_cache_read_hits =  0;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
    media_ptr -> fx_media_logical_sector_cache_read_misses =  0;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    media_ptr -> fx_media_driver_read_requests =  0;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    media_ptr -> fx_media_driver_write_requests =  0;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
    media_ptr -> fx_media_driver_boot_read_requests =  0;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    media_ptr -> fx_media_driver_boot_write_requests =  0;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
    media_ptr -> fx_media_driver_release_sectors_requests =  0;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
    media_ptr -> fx_media_driver_flush_requests =  0;
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_MEDIA_OPEN, media_ptr, media_driver, memory_ptr, memory_size, FX_TRACE_MEDIA_EVENTS, 0, 0)

    /* Initialize the supplied media I/O driver.  First, build the
       initialize driver request.  */
    media_ptr -> fx_media_driver_request =              FX_DRIVER_INIT;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2204      	movs	r2, #4
 800b4fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =               FX_IO_ERROR;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	2290      	movs	r2, #144	; 0x90
 800b502:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    media_ptr -> fx_media_driver_info =                 driver_info_ptr;
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	683a      	ldr	r2, [r7, #0]
 800b50a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    media_ptr -> fx_media_driver_write_protect =        FX_FALSE;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	2200      	movs	r2, #0
 800b512:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    media_ptr -> fx_media_driver_free_sector_update =   FX_FALSE;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	2200      	movs	r2, #0
 800b51a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    media_ptr -> fx_media_driver_data_sector_read =     FX_FALSE;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	2200      	movs	r2, #0
 800b522:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_INIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Call the specified I/O driver with the initialize request.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b52c:	68f8      	ldr	r0, [r7, #12]
 800b52e:	4798      	blx	r3

    /* Determine if the I/O driver initialized successfully.  */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b536:	2b00      	cmp	r3, #0
 800b538:	d002      	beq.n	800b540 <_fx_media_open+0x294>
    {

        /* Return the driver error status.  */
        return(FX_IO_ERROR);
 800b53a:	2390      	movs	r3, #144	; 0x90
 800b53c:	f000 bc22 	b.w	800bd84 <_fx_media_open+0xad8>
    }

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Increment the number of driver boot read requests.  */
    media_ptr -> fx_media_driver_boot_read_requests++;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800b546:	1c5a      	adds	r2, r3, #1
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
#endif

    /* Read the boot sector from the device.  Build the read boot sector
       command.  */
    media_ptr -> fx_media_driver_request =          FX_DRIVER_BOOT_READ;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2205      	movs	r2, #5
 800b552:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2290      	movs	r2, #144	; 0x90
 800b55a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    media_ptr -> fx_media_driver_buffer =           memory_ptr;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b562:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    media_ptr -> fx_media_driver_sectors =          1;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2201      	movs	r2, #1
 800b56a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    media_ptr -> fx_media_driver_sector_type =      FX_BOOT_SECTOR;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2201      	movs	r2, #1
 800b572:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_BOOT_READ, media_ptr, memory_ptr, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Invoke the driver to read the boot sector.  */
    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b57c:	68f8      	ldr	r0, [r7, #12]
 800b57e:	4798      	blx	r3

    /* Determine if the boot sector was read correctly. */
    if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b586:	2b00      	cmp	r3, #0
 800b588:	d016      	beq.n	800b5b8 <_fx_media_open+0x30c>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	2208      	movs	r2, #8
 800b58e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2290      	movs	r2, #144	; 0x90
 800b596:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b5a0:	68f8      	ldr	r0, [r7, #12]
 800b5a2:	4798      	blx	r3

        /* Return the boot sector error status.  */
        return(FX_BOOT_ERROR);
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	e3ed      	b.n	800bd84 <_fx_media_open+0xad8>
 800b5a8:	24014ab8 	.word	0x24014ab8
 800b5ac:	24014abc 	.word	0x24014abc
 800b5b0:	24014ac0 	.word	0x24014ac0
 800b5b4:	24000014 	.word	0x24000014
    }

    /* Extract and validate the media parameters from the boot sector.  */
    if (_fx_media_boot_info_extract(media_ptr) != FX_SUCCESS)
 800b5b8:	68f8      	ldr	r0, [r7, #12]
 800b5ba:	f7ff fbf5 	bl	800ada8 <_fx_media_boot_info_extract>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d00e      	beq.n	800b5e2 <_fx_media_open+0x336>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2208      	movs	r2, #8
 800b5c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2290      	movs	r2, #144	; 0x90
 800b5d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b5da:	68f8      	ldr	r0, [r7, #12]
 800b5dc:	4798      	blx	r3

        /* Return the invalid media error status.  */
        return(FX_MEDIA_INVALID);
 800b5de:	2302      	movs	r3, #2
 800b5e0:	e3d0      	b.n	800bd84 <_fx_media_open+0xad8>
    }

    /* Pickup the additional info sector number. This will only be used in FAT32 situations.  */
    additional_info_sector =  _fx_utility_16_unsigned_read(&media_ptr -> fx_media_driver_buffer[48]);
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5e8:	3330      	adds	r3, #48	; 0x30
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f000 fede 	bl	800c3ac <_fx_utility_16_unsigned_read>
 800b5f0:	63f8      	str	r0, [r7, #60]	; 0x3c

    /* Is there at least one?  */
    if (memory_size < media_ptr -> fx_media_bytes_per_sector)
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5f6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d20e      	bcs.n	800b61a <_fx_media_open+0x36e>
    {

        /* Build the "uninitialize" I/O driver request.  */
        media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2208      	movs	r2, #8
 800b600:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2290      	movs	r2, #144	; 0x90
 800b608:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Call the specified I/O driver with the uninitialize request.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b612:	68f8      	ldr	r0, [r7, #12]
 800b614:	4798      	blx	r3

        /* Error in the buffer size supplied by user.  */
        return(FX_BUFFER_ERROR);
 800b616:	2321      	movs	r3, #33	; 0x21
 800b618:	e3b4      	b.n	800bd84 <_fx_media_open+0xad8>
    }

#ifndef FX_DISABLE_CACHE
    /* Determine how many logical sectors can be cached with user's supplied
       buffer area - there must be at least enough for one sector!  */
    media_ptr -> fx_media_sector_cache_size =  memory_size / media_ptr -> fx_media_bytes_per_sector;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b61e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b620:	fbb2 f2f3 	udiv	r2, r2, r3
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	615a      	str	r2, [r3, #20]
    /* If trace is enabled, register this object.  */
    FX_TRACE_OBJECT_REGISTER(FX_TRACE_OBJECT_TYPE_MEDIA, media_ptr, media_name, FX_MAX_FAT_CACHE, media_ptr -> fx_media_sector_cache_size)
    
    /* Adjust the internal cache to fit the fixed number of sector cache control blocks
       built into the media control block.  */
    if (media_ptr -> fx_media_sector_cache_size > FX_MAX_SECTOR_CACHE)
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	695b      	ldr	r3, [r3, #20]
 800b62c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b630:	d903      	bls.n	800b63a <_fx_media_open+0x38e>
    {

        /* Adjust the number of cache sectors downward.  If this is insufficient,
           the FX_MAX_SECTOR_CACHE constant in FX_API.H must be changed and the FileX
           library must be rebuilt.  */
        media_ptr -> fx_media_sector_cache_size =  FX_MAX_SECTOR_CACHE;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b638:	615a      	str	r2, [r3, #20]
    }

    /* Otherwise, everything is okay.  Initialize the data structures for managing the
       logical sector cache.  */
    i =  (UINT)media_ptr -> fx_media_sector_cache_size;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	695b      	ldr	r3, [r3, #20]
 800b63e:	64fb      	str	r3, [r7, #76]	; 0x4c
    cache_entry_ptr =  media_ptr -> fx_media_sector_cache;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 800b646:	647b      	str	r3, [r7, #68]	; 0x44
    while (i--)
 800b648:	e01c      	b.n	800b684 <_fx_media_open+0x3d8>
    {

        /* Initialize each of the cache entries.  */
        cache_entry_ptr -> fx_cached_sector_memory_buffer =  (UCHAR *)memory_ptr;
 800b64a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b64c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b64e:	601a      	str	r2, [r3, #0]
        cache_entry_ptr -> fx_cached_sector =                (~(ULONG64)0);
 800b650:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b652:	f04f 32ff 	mov.w	r2, #4294967295
 800b656:	f04f 33ff 	mov.w	r3, #4294967295
 800b65a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        cache_entry_ptr -> fx_cached_sector_buffer_dirty =   FX_FALSE;
 800b65e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b660:	2200      	movs	r2, #0
 800b662:	741a      	strb	r2, [r3, #16]
        cache_entry_ptr -> fx_cached_sector_valid =          FX_FALSE;
 800b664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b666:	2200      	movs	r2, #0
 800b668:	745a      	strb	r2, [r3, #17]
        cache_entry_ptr -> fx_cached_sector_next_used =      cache_entry_ptr + 1;
 800b66a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b66c:	f103 0218 	add.w	r2, r3, #24
 800b670:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b672:	615a      	str	r2, [r3, #20]

        /* Move to the next cache sector entry.  */
        cache_entry_ptr++;
 800b674:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b676:	3318      	adds	r3, #24
 800b678:	647b      	str	r3, [r7, #68]	; 0x44

        /* Update the memory pointer to the next buffer slot.  */
        memory_ptr =  (VOID *)(((UCHAR *)memory_ptr) + media_ptr -> fx_media_bytes_per_sector);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b67e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b680:	4413      	add	r3, r2
 800b682:	67bb      	str	r3, [r7, #120]	; 0x78
    while (i--)
 800b684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b686:	1e5a      	subs	r2, r3, #1
 800b688:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d1dd      	bne.n	800b64a <_fx_media_open+0x39e>
    }

    /* Backup to the last cache entry to set its next pointer to NULL.  */
    cache_entry_ptr--;
 800b68e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b690:	3b18      	subs	r3, #24
 800b692:	647b      	str	r3, [r7, #68]	; 0x44
    cache_entry_ptr -> fx_cached_sector_next_used =  FX_NULL;
 800b694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b696:	2200      	movs	r2, #0
 800b698:	615a      	str	r2, [r3, #20]

    /* Remember the last memory address used by the caching logic.  */
    media_ptr -> fx_media_sector_cache_end =  ((UCHAR *)memory_ptr) - 1;
 800b69a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b69c:	1e5a      	subs	r2, r3, #1
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	619a      	str	r2, [r3, #24]

    /* Setup the head pointer of the list.  */
    media_ptr -> fx_media_sector_cache_list_ptr =  media_ptr -> fx_media_sector_cache;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	f503 624a 	add.w	r2, r3, #3232	; 0xca0
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	61da      	str	r2, [r3, #28]

    /* Setup the bit map that keeps track of the valid hashed cache logical sectors.  */
    media_ptr -> fx_media_sector_cache_hashed_sector_valid =  0;
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	621a      	str	r2, [r3, #32]

    /* Clear the counter of the number of outstanding dirty sectors.  */
    media_ptr -> fx_media_sector_cache_dirty_count =  0;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Determine if the logical sector cache should be managed by the hash function
       instead of the linear search. The cache must be a power of 2 that is between the
       minimum and maximum cache size.  */
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	695b      	ldr	r3, [r3, #20]
 800b6bc:	2b0f      	cmp	r3, #15
 800b6be:	d91a      	bls.n	800b6f6 <_fx_media_open+0x44a>
        ((media_ptr -> fx_media_sector_cache_size ^ (media_ptr -> fx_media_sector_cache_size - 1)) ==
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	695a      	ldr	r2, [r3, #20]
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	695b      	ldr	r3, [r3, #20]
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	405a      	eors	r2, r3
         (media_ptr -> fx_media_sector_cache_size | (media_ptr -> fx_media_sector_cache_size - 1))))
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	6959      	ldr	r1, [r3, #20]
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	695b      	ldr	r3, [r3, #20]
 800b6d4:	3b01      	subs	r3, #1
 800b6d6:	430b      	orrs	r3, r1
    if ((media_ptr -> fx_media_sector_cache_size >= FX_SECTOR_CACHE_HASH_ENABLE) &&
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d10c      	bne.n	800b6f6 <_fx_media_open+0x44a>
    {


        /* Set the logical sector cache hash flag. When this flag is set, the logical
           sector cache is accessed with a hash function instead of a linear search.  */
        media_ptr -> fx_media_sector_cache_hashed =  FX_TRUE;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	611a      	str	r2, [r3, #16]
        media_ptr -> fx_media_sector_cache_hash_mask =
            ((media_ptr -> fx_media_sector_cache_size / FX_SECTOR_CACHE_DEPTH) - 1);
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	695b      	ldr	r3, [r3, #20]
 800b6e6:	089b      	lsrs	r3, r3, #2
 800b6e8:	3b01      	subs	r3, #1
        media_ptr -> fx_media_sector_cache_hash_mask =
 800b6ea:	68fa      	ldr	r2, [r7, #12]
 800b6ec:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800b6f0:	f8c2 34a0 	str.w	r3, [r2, #1184]	; 0x4a0
 800b6f4:	e002      	b.n	800b6fc <_fx_media_open+0x450>
    }
    else
    {

        /* Clear the logical sector cache flag.  */
        media_ptr -> fx_media_sector_cache_hashed =  FX_FALSE;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	611a      	str	r2, [r3, #16]
    media_ptr -> fx_media_memory_buffer = memory_ptr;
#endif /* FX_DISABLE_CACHE */

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Initialize the FAT cache entry array.  */
    for (i = 0; i < FX_MAX_FAT_CACHE; i++)
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b700:	e023      	b.n	800b74a <_fx_media_open+0x49e>
    {

        /* Clear entry in the FAT cache.  */
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster =   0;
 800b702:	68f9      	ldr	r1, [r7, #12]
 800b704:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b706:	4613      	mov	r3, r2
 800b708:	005b      	lsls	r3, r3, #1
 800b70a:	4413      	add	r3, r2
 800b70c:	009b      	lsls	r3, r3, #2
 800b70e:	440b      	add	r3, r1
 800b710:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800b714:	2200      	movs	r2, #0
 800b716:	601a      	str	r2, [r3, #0]
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value   =   0;
 800b718:	68f9      	ldr	r1, [r7, #12]
 800b71a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b71c:	4613      	mov	r3, r2
 800b71e:	005b      	lsls	r3, r3, #1
 800b720:	4413      	add	r3, r2
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	440b      	add	r3, r1
 800b726:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800b72a:	2200      	movs	r2, #0
 800b72c:	601a      	str	r2, [r3, #0]
        media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty   =   0;
 800b72e:	68f9      	ldr	r1, [r7, #12]
 800b730:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b732:	4613      	mov	r3, r2
 800b734:	005b      	lsls	r3, r3, #1
 800b736:	4413      	add	r3, r2
 800b738:	009b      	lsls	r3, r3, #2
 800b73a:	440b      	add	r3, r1
 800b73c:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800b740:	2200      	movs	r2, #0
 800b742:	601a      	str	r2, [r3, #0]
    for (i = 0; i < FX_MAX_FAT_CACHE; i++)
 800b744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b746:	3301      	adds	r3, #1
 800b748:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b74a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b74c:	2b0f      	cmp	r3, #15
 800b74e:	d9d8      	bls.n	800b702 <_fx_media_open+0x456>
    }

    /* Initialize the secondary FAT update map.  */
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 800b750:	2300      	movs	r3, #0
 800b752:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b754:	e009      	b.n	800b76a <_fx_media_open+0x4be>
    {

        /* Clear bit map entry for secondary FAT update.  */
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
 800b756:	68fa      	ldr	r2, [r7, #12]
 800b758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b75a:	4413      	add	r3, r2
 800b75c:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800b760:	2200      	movs	r2, #0
 800b762:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 800b764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b766:	3301      	adds	r3, #1
 800b768:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b76a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b76c:	2b7f      	cmp	r3, #127	; 0x7f
 800b76e:	d9f2      	bls.n	800b756 <_fx_media_open+0x4aa>
    if (media_ptr -> fx_media_FAT_type != FX_exFAT)
    {
#endif /* FX_ENABLE_EXFAT */

        /* Root_sector_start has been computed */
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	6c5a      	ldr	r2, [r3, #68]	; 0x44
            (media_ptr -> fx_media_number_of_FATs *
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
             media_ptr -> fx_media_sectors_per_FAT);
 800b778:	68f9      	ldr	r1, [r7, #12]
 800b77a:	6d89      	ldr	r1, [r1, #88]	; 0x58
            (media_ptr -> fx_media_number_of_FATs *
 800b77c:	fb01 f303 	mul.w	r3, r1, r3
        media_ptr -> fx_media_root_sector_start =  media_ptr -> fx_media_reserved_sectors +
 800b780:	441a      	add	r2, r3
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	649a      	str	r2, [r3, #72]	; 0x48

        /* Calculate the number of directory sectors.  */
        media_ptr -> fx_media_root_sectors =
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b78a:	015a      	lsls	r2, r3, #5
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            ((media_ptr -> fx_media_root_directory_entries * FX_DIR_ENTRY_SIZE) +
 800b790:	4413      	add	r3, r2
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800b792:	1e5a      	subs	r2, r3, #1
            media_ptr -> fx_media_bytes_per_sector;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             media_ptr -> fx_media_bytes_per_sector - 1) /
 800b798:	fbb2 f2f3 	udiv	r2, r2, r3
        media_ptr -> fx_media_root_sectors =
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Calculate the starting data sector.  */
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
            media_ptr -> fx_media_root_sectors;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
        media_ptr -> fx_media_data_sector_start =  media_ptr -> fx_media_root_sector_start +
 800b7a8:	441a      	add	r2, r3
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	651a      	str	r2, [r3, #80]	; 0x50

        /* Calculate the total number of clusters.  */
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800b7b4:	68f9      	ldr	r1, [r7, #12]
 800b7b6:	6d09      	ldr	r1, [r1, #80]	; 0x50
 800b7b8:	2000      	movs	r0, #0
 800b7ba:	460c      	mov	r4, r1
 800b7bc:	4605      	mov	r5, r0
 800b7be:	ebb2 0804 	subs.w	r8, r2, r4
 800b7c2:	eb63 0905 	sbc.w	r9, r3, r5
                                                            media_ptr -> fx_media_sectors_per_cluster);
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	469a      	mov	sl, r3
 800b7ce:	4693      	mov	fp, r2
        media_ptr -> fx_media_total_clusters =  (ULONG)((media_ptr -> fx_media_total_sectors - media_ptr -> fx_media_data_sector_start) /
 800b7d0:	4652      	mov	r2, sl
 800b7d2:	465b      	mov	r3, fp
 800b7d4:	4640      	mov	r0, r8
 800b7d6:	4649      	mov	r1, r9
 800b7d8:	f7f4 fef2 	bl	80005c0 <__aeabi_uldivmod>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	460b      	mov	r3, r1
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Determine if a 12-bit FAT is in use.  */
        if (media_ptr -> fx_media_total_clusters < FX_12_BIT_FAT_SIZE)
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7e8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d819      	bhi.n	800b824 <_fx_media_open+0x578>
        {

            /* Yes, 12-bit FAT is present.  Set flag accordingly.  */
            media_ptr -> fx_media_12_bit_FAT = FX_TRUE;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT = FX_FALSE;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	665a      	str	r2, [r3, #100]	; 0x64
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT12;
#endif /* FX_ENABLE_EXFAT */

            /* No additional information sector in FAT12.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2200      	movs	r2, #0
 800b800:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b808:	461a      	mov	r2, r3
 800b80a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800b80e:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b818:	461a      	mov	r2, r3
 800b81a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b81e:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
 800b822:	e037      	b.n	800b894 <_fx_media_open+0x5e8>
        }
        else if (media_ptr -> fx_media_total_clusters < FX_16_BIT_FAT_SIZE)
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b828:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 800b82c:	4293      	cmp	r3, r2
 800b82e:	d819      	bhi.n	800b864 <_fx_media_open+0x5b8>
        {

            /* A 16-bit FAT is present.  Set flag accordingly.  */
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2200      	movs	r2, #0
 800b834:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT =  FX_FALSE;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	2200      	movs	r2, #0
 800b83a:	665a      	str	r2, [r3, #100]	; 0x64
#ifdef FX_ENABLE_EXFAT
            media_ptr -> fx_media_FAT_type = FX_FAT16;
#endif /* FX_ENABLE_EXFAT */

            /* No additional information sector in FAT16.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	2200      	movs	r2, #0
 800b840:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b848:	461a      	mov	r2, r3
 800b84a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800b84e:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b858:	461a      	mov	r2, r3
 800b85a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b85e:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
 800b862:	e017      	b.n	800b894 <_fx_media_open+0x5e8>
        }
        else
        {

            /* Yes, a 32-bit FAT is present.  */
            media_ptr -> fx_media_12_bit_FAT =  FX_FALSE;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2200      	movs	r2, #0
 800b868:	661a      	str	r2, [r3, #96]	; 0x60
            media_ptr -> fx_media_32_bit_FAT =  FX_TRUE;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	2201      	movs	r2, #1
 800b86e:	665a      	str	r2, [r3, #100]	; 0x64
            media_ptr -> fx_media_FAT_type = FX_FAT32;
#endif /* FX_ENABLE_EXFAT */

            /* Save the additional information sector FAT32. This was read from the boot
               sector earlier in this routine. */
            media_ptr -> fx_media_FAT32_additional_info_sector =  additional_info_sector;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b874:	669a      	str	r2, [r3, #104]	; 0x68

            /* Set FAT last and FAT reserved. */
            media_ptr -> fx_media_fat_reserved = FX_RESERVED_1_32;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b87c:	461a      	mov	r2, r3
 800b87e:	4b95      	ldr	r3, [pc, #596]	; (800bad4 <_fx_media_open+0x828>)
 800b880:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8
            media_ptr -> fx_media_fat_last = FX_LAST_CLUSTER_2_32;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800b88a:	461a      	mov	r2, r3
 800b88c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 800b890:	f8c2 34ac 	str.w	r3, [r2, #1196]	; 0x4ac
       it is variable in FAT32.  */
#ifdef FX_ENABLE_EXFAT
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE || 
        (media_ptr -> fx_media_FAT_type == FX_exFAT))
#else
    if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE)
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d15f      	bne.n	800b95c <_fx_media_open+0x6b0>
        if (media_ptr -> fx_media_32_bit_FAT == FX_TRUE)
        {
#endif /* FX_ENABLE_EXFAT */

            /* Root First cluster starts from at least cluster 2, or higher. */
            if (media_ptr -> fx_media_root_cluster_32 < FX_FAT_ENTRY_START)
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	d801      	bhi.n	800b8a8 <_fx_media_open+0x5fc>
            {
                return(FX_MEDIA_INVALID);
 800b8a4:	2302      	movs	r3, #2
 800b8a6:	e26d      	b.n	800bd84 <_fx_media_open+0xad8>
            }

            /* Calculate logical number of root dir sector.  */
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8b0:	3b02      	subs	r3, #2
                media_ptr -> fx_media_sectors_per_cluster;
 800b8b2:	68f9      	ldr	r1, [r7, #12]
 800b8b4:	6d49      	ldr	r1, [r1, #84]	; 0x54
                (media_ptr -> fx_media_root_cluster_32 - FX_FAT_ENTRY_START) *
 800b8b6:	fb01 f303 	mul.w	r3, r1, r3
            media_ptr -> fx_media_root_sector_start = media_ptr -> fx_media_data_sector_start +
 800b8ba:	441a      	add	r2, r3
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	649a      	str	r2, [r3, #72]	; 0x48
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        /* Calculate maximum possible value for fx_media_root_directory_entries */
        i = 0;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	64fb      	str	r3, [r7, #76]	; 0x4c
        for (cluster_number = media_ptr -> fx_media_root_cluster_32;;)
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b8c8:	657b      	str	r3, [r7, #84]	; 0x54
        {

            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800b8ca:	f107 0310 	add.w	r3, r7, #16
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b8d2:	68f8      	ldr	r0, [r7, #12]
 800b8d4:	f000 fdd0 	bl	800c478 <_fx_utility_FAT_entry_read>
 800b8d8:	63b8      	str	r0, [r7, #56]	; 0x38
            i++;
 800b8da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8dc:	3301      	adds	r3, #1
 800b8de:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Determine if the read was successful.  */
            if (status != FX_SUCCESS)
 800b8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d00e      	beq.n	800b904 <_fx_media_open+0x658>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2208      	movs	r2, #8
 800b8ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	2290      	movs	r2, #144	; 0x90
 800b8f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b8fc:	68f8      	ldr	r0, [r7, #12]
 800b8fe:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800b900:	2303      	movs	r3, #3
 800b902:	e23f      	b.n	800bd84 <_fx_media_open+0xad8>
            }

            if ((cluster_number == FAT_entry) || (i > media_ptr -> fx_media_total_clusters))
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b908:	429a      	cmp	r2, r3
 800b90a:	d004      	beq.n	800b916 <_fx_media_open+0x66a>
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b910:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b912:	429a      	cmp	r2, r3
 800b914:	d90e      	bls.n	800b934 <_fx_media_open+0x688>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2208      	movs	r2, #8
 800b91a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2290      	movs	r2, #144	; 0x90
 800b922:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b92c:	68f8      	ldr	r0, [r7, #12]
 800b92e:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800b930:	2303      	movs	r3, #3
 800b932:	e227      	b.n	800bd84 <_fx_media_open+0xad8>
            }
            if (FAT_entry >= FX_RESERVED_1_32)
 800b934:	693b      	ldr	r3, [r7, #16]
 800b936:	4a68      	ldr	r2, [pc, #416]	; (800bad8 <_fx_media_open+0x82c>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d802      	bhi.n	800b942 <_fx_media_open+0x696>
            {
                break;
            }
            cluster_number = FAT_entry;
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	657b      	str	r3, [r7, #84]	; 0x54
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800b940:	e7c3      	b.n	800b8ca <_fx_media_open+0x61e>
                break;
 800b942:	bf00      	nop
        }

        /* Calculate the number of directory entries.  */
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b948:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b94a:	fb02 f303 	mul.w	r3, r2, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800b94e:	68fa      	ldr	r2, [r7, #12]
 800b950:	6a92      	ldr	r2, [r2, #40]	; 0x28
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800b952:	fb02 f303 	mul.w	r3, r2, r3
                                                         media_ptr -> fx_media_bytes_per_sector) / FX_DIR_ENTRY_SIZE;
 800b956:	095a      	lsrs	r2, r3, #5
        media_ptr -> fx_media_root_directory_entries =  (i * media_ptr -> fx_media_sectors_per_cluster *
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	679a      	str	r2, [r3, #120]	; 0x78
    }

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Calculate the number of available clusters.  */
    media_ptr -> fx_media_available_clusters =  0;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	2200      	movs	r2, #0
 800b960:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the cluster search start to an invalid value.  */
    media_ptr -> fx_media_cluster_search_start =  0;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2200      	movs	r2, #0
 800b966:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* FX_DISABLE_FORCE_MEMORY_OPERATION */

    /* Determine if there is 32-bit FAT additional information sector. */
    if (media_ptr -> fx_media_FAT32_additional_info_sector)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b96e:	2b00      	cmp	r3, #0
 800b970:	f000 808e 	beq.w	800ba90 <_fx_media_open+0x7e4>
        /* Yes, read the FAT32 additional information sector to get the available cluster count and
           the hint for the first available cluster.  */

#ifndef FX_DISABLE_CACHE
        /* Setup a pointer to the first cached entry's buffer.  */
        buffer_ptr =  (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_memory_buffer;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	69db      	ldr	r3, [r3, #28]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	637b      	str	r3, [r7, #52]	; 0x34

        /* Invalidate this cache entry.  */
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector =  (~((ULONG64) 0));
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	69d9      	ldr	r1, [r3, #28]
 800b980:	f04f 32ff 	mov.w	r2, #4294967295
 800b984:	f04f 33ff 	mov.w	r3, #4294967295
 800b988:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (media_ptr -> fx_media_sector_cache_list_ptr) -> fx_cached_sector_valid =  FX_FALSE;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	69db      	ldr	r3, [r3, #28]
 800b990:	2200      	movs	r2, #0
 800b992:	745a      	strb	r2, [r3, #17]
        buffer_ptr =  media_ptr -> fx_media_memory_buffer;
        media_ptr -> fx_media_memory_buffer_sector = (ULONG64)-1;
#endif /* FX_DISABLE_CACHE */

        /* Read the FAT32 additional information sector from the device.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	2200      	movs	r2, #0
 800b998:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	2290      	movs	r2, #144	; 0x90
 800b9a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b9a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        media_ptr -> fx_media_driver_logical_sector =   media_ptr -> fx_media_FAT32_additional_info_sector;
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        media_ptr -> fx_media_driver_sectors =          1;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      FX_DIRECTORY_SECTOR;
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2203      	movs	r2, #3
 800b9c2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800b9cc:	1c5a      	adds	r2, r3, #1
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, media_ptr -> fx_media_FAT32_additional_info_sector, 1, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the FAT32 additional information sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800b9da:	68f8      	ldr	r0, [r7, #12]
 800b9dc:	4798      	blx	r3

        /* Determine if the FAT32 sector was read correctly. */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d150      	bne.n	800ba8a <_fx_media_open+0x7de>
        {

            /* Yes, setup a pointer into the FAT32 additional information sector.  */
            buffer_ptr =  media_ptr -> fx_media_driver_buffer;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b9ee:	637b      	str	r3, [r7, #52]	; 0x34

            /* Pickup the first signature long word.  */
            signature =  _fx_utility_32_unsigned_read(&buffer_ptr[0]);
 800b9f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b9f2:	f000 fd03 	bl	800c3fc <_fx_utility_32_unsigned_read>
 800b9f6:	6338      	str	r0, [r7, #48]	; 0x30

            /* Determine if the signature is correct.  */
            if (signature == 0x41615252)
 800b9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fa:	4a38      	ldr	r2, [pc, #224]	; (800badc <_fx_media_open+0x830>)
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d140      	bne.n	800ba82 <_fx_media_open+0x7d6>
            {

                /* Yes, the first signature is correct, now pickup the next signature.  */
                signature =  _fx_utility_32_unsigned_read(&buffer_ptr[484]);
 800ba00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba02:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ba06:	4618      	mov	r0, r3
 800ba08:	f000 fcf8 	bl	800c3fc <_fx_utility_32_unsigned_read>
 800ba0c:	6338      	str	r0, [r7, #48]	; 0x30

                /* Determine if this signature is correct.  */
                if (signature == 0x61417272)
 800ba0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba10:	4a33      	ldr	r2, [pc, #204]	; (800bae0 <_fx_media_open+0x834>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d131      	bne.n	800ba7a <_fx_media_open+0x7ce>
                {

                    /* Yes, we have a good FAT32 additional information sector.  */

                    /* Pickup the current available cluster count on the media.  */
                    media_ptr -> fx_media_available_clusters =  _fx_utility_32_unsigned_read(&buffer_ptr[488]);
 800ba16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba18:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f000 fced 	bl	800c3fc <_fx_utility_32_unsigned_read>
 800ba22:	4602      	mov	r2, r0
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	67da      	str	r2, [r3, #124]	; 0x7c

                    /* Initialize the last reported available cluster count to the same value.  */
                    media_ptr -> fx_media_FAT32_additional_info_last_available =  media_ptr -> fx_media_available_clusters;
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	66da      	str	r2, [r3, #108]	; 0x6c

                    /* Pickup the hint for the starting free cluster search.  */
                    media_ptr -> fx_media_cluster_search_start =  _fx_utility_32_unsigned_read(&buffer_ptr[492]);
 800ba30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba32:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ba36:	4618      	mov	r0, r3
 800ba38:	f000 fce0 	bl	800c3fc <_fx_utility_32_unsigned_read>
 800ba3c:	4602      	mov	r2, r0
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

                    /* Perform a quick sanity check on the available cluster count and the starting free
                       cluster search.  */
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d80c      	bhi.n	800ba6a <_fx_media_open+0x7be>
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba5a:	3302      	adds	r3, #2
                    if ((media_ptr -> fx_media_available_clusters > media_ptr -> fx_media_total_clusters) ||
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d804      	bhi.n	800ba6a <_fx_media_open+0x7be>
                        (media_ptr -> fx_media_cluster_search_start < FX_FAT_ENTRY_START))
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
                        (media_ptr -> fx_media_cluster_search_start > media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START) ||
 800ba66:	2b01      	cmp	r3, #1
 800ba68:	d812      	bhi.n	800ba90 <_fx_media_open+0x7e4>
                    {

                        /* Something is wrong, clear the available cluster count and search so the regular processing
                           is used.  */
                        media_ptr -> fx_media_available_clusters =    0;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	67da      	str	r2, [r3, #124]	; 0x7c
                        media_ptr -> fx_media_cluster_search_start =  0;
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2200      	movs	r2, #0
 800ba74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800ba78:	e00a      	b.n	800ba90 <_fx_media_open+0x7e4>
                }
                else
                {

                    /* Signature is bad, invalidate the additional info sector.  */
                    media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	669a      	str	r2, [r3, #104]	; 0x68
 800ba80:	e006      	b.n	800ba90 <_fx_media_open+0x7e4>
            }
            else
            {

                /* Signature is bad, invalidate the additional info sector.  */
                media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2200      	movs	r2, #0
 800ba86:	669a      	str	r2, [r3, #104]	; 0x68
 800ba88:	e002      	b.n	800ba90 <_fx_media_open+0x7e4>
        }
        else
        {

            /* IO error trying to read additional information sector, invalidate the additional info sector.  */
            media_ptr -> fx_media_FAT32_additional_info_sector =  0;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	669a      	str	r2, [r3, #104]	; 0x68

    /* Search the media to find the first available cluster as well as the total
       available clusters.  */

    /* Determine what type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d040      	beq.n	800bb1a <_fx_media_open+0x86e>

        /* A 12-bit FAT is present.  Utilize the FAT entry read utility to pickup
           each FAT entry's contents.  */

        /* Loop to read each cluster entry in the first FAT.  */
        for (cluster_number =  FX_FAT_ENTRY_START;
 800ba98:	2302      	movs	r3, #2
 800ba9a:	657b      	str	r3, [r7, #84]	; 0x54
 800ba9c:	e036      	b.n	800bb0c <_fx_media_open+0x860>
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
             cluster_number++)
        {

            /* Read a FAT entry.  */
            status =  _fx_utility_FAT_entry_read(media_ptr, cluster_number, &FAT_entry);
 800ba9e:	f107 0310 	add.w	r3, r7, #16
 800baa2:	461a      	mov	r2, r3
 800baa4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800baa6:	68f8      	ldr	r0, [r7, #12]
 800baa8:	f000 fce6 	bl	800c478 <_fx_utility_FAT_entry_read>
 800baac:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if the read was successful.  */
            if (status != FX_SUCCESS)
 800baae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d017      	beq.n	800bae4 <_fx_media_open+0x838>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	2208      	movs	r2, #8
 800bab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2290      	movs	r2, #144	; 0x90
 800bac0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800baca:	68f8      	ldr	r0, [r7, #12]
 800bacc:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800bace:	2303      	movs	r3, #3
 800bad0:	e158      	b.n	800bd84 <_fx_media_open+0xad8>
 800bad2:	bf00      	nop
 800bad4:	0ffffff0 	.word	0x0ffffff0
 800bad8:	0fffffef 	.word	0x0fffffef
 800badc:	41615252 	.word	0x41615252
 800bae0:	61417272 	.word	0x61417272
            }

            /* Now determine if the FAT entry is available.  */
            if (FAT_entry == FX_FREE_CLUSTER)
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d10d      	bne.n	800bb06 <_fx_media_open+0x85a>
            {

                /* Increment the number of available clusters.  */
                media_ptr -> fx_media_available_clusters++;
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800baee:	1c5a      	adds	r2, r3, #1
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Determine if the starting free cluster has been found yet.  */
                if (media_ptr -> fx_media_cluster_search_start == 0)
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d103      	bne.n	800bb06 <_fx_media_open+0x85a>
                {

                    /* Remember the first free cluster to start further searches from.  */
                    media_ptr -> fx_media_cluster_search_start =  cluster_number;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
             cluster_number++)
 800bb06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb08:	3301      	adds	r3, #1
 800bb0a:	657b      	str	r3, [r7, #84]	; 0x54
             cluster_number < (media_ptr -> fx_media_total_clusters) + FX_FAT_ENTRY_START;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb10:	3302      	adds	r3, #2
        for (cluster_number =  FX_FAT_ENTRY_START;
 800bb12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d3c2      	bcc.n	800ba9e <_fx_media_open+0x7f2>
 800bb18:	e0b4      	b.n	800bc84 <_fx_media_open+0x9d8>
    }
#ifdef FX_ENABLE_EXFAT
    else if ((media_ptr -> fx_media_available_clusters == 0)
             && (media_ptr -> fx_media_FAT_type != FX_exFAT))
#else
    else if (media_ptr -> fx_media_available_clusters == 0)
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	f040 80b0 	bne.w	800bc84 <_fx_media_open+0x9d8>
        /* A 16 or 32-bit FAT is present. Read directly into the logical sector
           cache memory to optimize I/O on larger devices. Since we are looking for
           values of zero, endian issues are not important.  */

        /* Invalidate the current logical sector cache.  */
        _fx_utility_logical_sector_flush(media_ptr, ((ULONG64) 1), (ULONG64) (media_ptr -> fx_media_total_sectors), FX_TRUE);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800bb2a:	2101      	movs	r1, #1
 800bb2c:	9102      	str	r1, [sp, #8]
 800bb2e:	e9cd 2300 	strd	r2, r3, [sp]
 800bb32:	f04f 0201 	mov.w	r2, #1
 800bb36:	f04f 0300 	mov.w	r3, #0
 800bb3a:	68f8      	ldr	r0, [r7, #12]
 800bb3c:	f001 fda0 	bl	800d680 <_fx_utility_logical_sector_flush>

        /* Reset the memory pointer.  */
        media_ptr -> fx_media_memory_buffer =  original_memory_ptr;
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb44:	609a      	str	r2, [r3, #8]

        /* Loop through all FAT sectors in the primary FAT.  The first two entries are
           examined in this loop, but they are always unavailable.  */
        cluster_number =  0;
 800bb46:	2300      	movs	r3, #0
 800bb48:	657b      	str	r3, [r7, #84]	; 0x54
#ifndef FX_DISABLE_CACHE
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb4e:	e093      	b.n	800bc78 <_fx_media_open+0x9cc>
        {

            /* Calculate the starting next FAT sector.  */
            FAT_sector =  media_ptr -> fx_media_reserved_sectors + i;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bb56:	4413      	add	r3, r2
 800bb58:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Calculate how many sectors to read.  */
            FAT_read_sectors =  media_ptr -> fx_media_sectors_per_FAT - i;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bb5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb60:	1ad3      	subs	r3, r2, r3
 800bb62:	653b      	str	r3, [r7, #80]	; 0x50

            /* Determine if there is not enough memory to read the remaining FAT sectors.  */
            if (FAT_read_sectors > media_ptr -> fx_media_sector_cache_size)
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	695b      	ldr	r3, [r3, #20]
 800bb68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d902      	bls.n	800bb74 <_fx_media_open+0x8c8>
            {
                FAT_read_sectors =  media_ptr -> fx_media_sector_cache_size;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	695b      	ldr	r3, [r3, #20]
 800bb72:	653b      	str	r3, [r7, #80]	; 0x50
            /* Calculate how many sectors to read.  */
            FAT_read_sectors =  1;
#endif /* FX_DISABLE_CACHE */

            /* Read the FAT sectors directly from the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2200      	movs	r2, #0
 800bb78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	2290      	movs	r2, #144	; 0x90
 800bb80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            media_ptr -> fx_media_driver_buffer =           media_ptr -> fx_media_memory_buffer;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	689a      	ldr	r2, [r3, #8]
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
            media_ptr -> fx_media_driver_logical_sector =   FAT_sector;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb92:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
            media_ptr -> fx_media_driver_sectors =          FAT_read_sectors;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bb9a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            media_ptr -> fx_media_driver_sector_type =      FX_FAT_SECTOR;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	2202      	movs	r2, #2
 800bba2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, FAT_sector, FAT_read_sectors, media_ptr -> fx_media_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Invoke the driver to read the FAT sectors.  */
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bbac:	68f8      	ldr	r0, [r7, #12]
 800bbae:	4798      	blx	r3

            /* Determine if the read was successful.  */
            if (media_ptr -> fx_media_driver_status != FX_SUCCESS)
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d00e      	beq.n	800bbd8 <_fx_media_open+0x92c>
            {

                /* Build the "uninitialize" I/O driver request.  */
                media_ptr -> fx_media_driver_request =      FX_DRIVER_UNINIT;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	2208      	movs	r2, #8
 800bbbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                media_ptr -> fx_media_driver_status =       FX_IO_ERROR;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	2290      	movs	r2, #144	; 0x90
 800bbc6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

                /* If trace is enabled, insert this event into the trace buffer.  */
                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_UNINIT, media_ptr, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                /* Call the specified I/O driver with the uninitialize request.  */
                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bbd0:	68f8      	ldr	r0, [r7, #12]
 800bbd2:	4798      	blx	r3

                return(FX_FAT_READ_ERROR);
 800bbd4:	2303      	movs	r3, #3
 800bbd6:	e0d5      	b.n	800bd84 <_fx_media_open+0xad8>
            }

            /* Calculate the number of bytes in the buffer.  */
            bytes_in_buffer =  (media_ptr -> fx_media_bytes_per_sector * FAT_read_sectors);
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bbdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bbde:	fb02 f303 	mul.w	r3, r2, r3
 800bbe2:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Walk through the sector cache memory to search for available clusters and the first
               available if not already found.  */
            for (j = 0; j < bytes_in_buffer;)
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbe8:	e03d      	b.n	800bc66 <_fx_media_open+0x9ba>
            {

                /* Check for a 32-bit FAT.  */
                if (media_ptr -> fx_media_32_bit_FAT)
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d009      	beq.n	800bc06 <_fx_media_open+0x95a>
                {

                    /* Pickup 32-bit FAT entry.  */
                    FAT_entry =  *((ULONG *)&(media_ptr -> fx_media_memory_buffer[j]));
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	689a      	ldr	r2, [r3, #8]
 800bbf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bbf8:	4413      	add	r3, r2
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	613b      	str	r3, [r7, #16]

                    /* Advance to next FAT entry.  */
                    j = j + 4;
 800bbfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc00:	3304      	adds	r3, #4
 800bc02:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc04:	e011      	b.n	800bc2a <_fx_media_open+0x97e>
                }
                else
                {

                    /* Process a 16-bit FAT entry.  */
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	689a      	ldr	r2, [r3, #8]
 800bc0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc0c:	4413      	add	r3, r2
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	4619      	mov	r1, r3
                        ((((ULONG)(media_ptr -> fx_media_memory_buffer[j + 1])) & 0xFF) << 8);
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	689a      	ldr	r2, [r3, #8]
 800bc16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc18:	3301      	adds	r3, #1
 800bc1a:	4413      	add	r3, r2
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	021b      	lsls	r3, r3, #8
                    FAT_entry =  (((ULONG)(media_ptr -> fx_media_memory_buffer[j])) & 0xFF) |
 800bc20:	430b      	orrs	r3, r1
 800bc22:	613b      	str	r3, [r7, #16]

                    /* Advance to next FAT entry.  */
                    j =  j + 2;
 800bc24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc26:	3302      	adds	r3, #2
 800bc28:	64bb      	str	r3, [r7, #72]	; 0x48
                }

                /* Determine if the FAT entry is free.  */
                if (FAT_entry == FX_FREE_CLUSTER)
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d10d      	bne.n	800bc4c <_fx_media_open+0x9a0>
                {

                    /* Entry is free, increment available clusters.  */
                    media_ptr -> fx_media_available_clusters++;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc34:	1c5a      	adds	r2, r3, #1
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	67da      	str	r2, [r3, #124]	; 0x7c

                    /* Determine if the starting free cluster has been found yet.  */
                    if (media_ptr -> fx_media_cluster_search_start == 0)
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d103      	bne.n	800bc4c <_fx_media_open+0x9a0>
                    {

                        /* Remember the first free cluster to start further searches from.  */
                        media_ptr -> fx_media_cluster_search_start =  cluster_number;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bc48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                    }
                }

                /* Increment the cluster number.  */
                cluster_number++;
 800bc4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bc4e:	3301      	adds	r3, #1
 800bc50:	657b      	str	r3, [r7, #84]	; 0x54

                /* Determine if we have reviewed all FAT entries.  */
                if (cluster_number >= (media_ptr -> fx_media_total_clusters + FX_FAT_ENTRY_START))
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc56:	3302      	adds	r3, #2
 800bc58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d303      	bcc.n	800bc66 <_fx_media_open+0x9ba>
                {

                    /* Yes, we have looked at all the FAT entries.  */

                    /* Ensure that the outer loop terminates as well.  */
                    i = media_ptr -> fx_media_sectors_per_FAT;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc62:	64fb      	str	r3, [r7, #76]	; 0x4c
                    break;
 800bc64:	e003      	b.n	800bc6e <_fx_media_open+0x9c2>
            for (j = 0; j < bytes_in_buffer;)
 800bc66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d3bd      	bcc.n	800bbea <_fx_media_open+0x93e>
        for (i = 0; i < media_ptr -> fx_media_sectors_per_FAT; i = i + media_ptr -> fx_media_sector_cache_size)
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	695b      	ldr	r3, [r3, #20]
 800bc72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bc74:	4413      	add	r3, r2
 800bc76:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	f4ff af66 	bcc.w	800bb50 <_fx_media_open+0x8a4>
    }
#endif /* FX_ENABLE_EXFAT */

    /* If there were no free clusters, just set the search pointer to the
       first cluster number.  */
    if (media_ptr -> fx_media_cluster_search_start == 0)
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d103      	bne.n	800bc96 <_fx_media_open+0x9ea>
    {
        media_ptr -> fx_media_cluster_search_start =  FX_FAT_ENTRY_START;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2202      	movs	r2, #2
 800bc92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Setup the current working directory fields to default to the root
       directory.  */
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
        media_ptr -> fx_media_default_path.fx_path_name_buffer;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f503 62ca 	add.w	r2, r3, #1616	; 0x650
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name =
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f8c3 24e0 	str.w	r2, [r3, #1248]	; 0x4e0
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_short_name[0] =  0;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2200      	movs	r2, #0
 800bca6:	f883 24e4 	strb.w	r2, [r3, #1252]	; 0x4e4
    media_ptr -> fx_media_default_path.fx_path_directory.fx_dir_entry_name[0] =        0;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	701a      	strb	r2, [r3, #0]
    media_ptr -> fx_media_default_path.fx_path_string[0] =                      (CHAR)0;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	f883 2550 	strb.w	r2, [r3, #1360]	; 0x550
    media_ptr -> fx_media_default_path.fx_path_string[FX_MAXIMUM_PATH - 1] =      (CHAR)0;
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	f883 264f 	strb.w	r2, [r3, #1615]	; 0x64f
    media_ptr -> fx_media_default_path.fx_path_current_entry =                         0;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2200      	movs	r2, #0
 800bcc8:	f8c3 2750 	str.w	r2, [r3, #1872]	; 0x750

#ifndef FX_MEDIA_DISABLE_SEARCH_CACHE

    /* Invalidate the previously found directory entry.  */
    media_ptr -> fx_media_last_found_name[0] =  0;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f883 23e0 	strb.w	r2, [r3, #992]	; 0x3e0
#endif

#ifndef FX_DISABLE_FORCE_MEMORY_OPERATION
    /* Initialize the opened file linked list and associated counter.  */
    media_ptr -> fx_media_opened_file_list =      FX_NULL;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    media_ptr -> fx_media_opened_file_count =     0;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2200      	movs	r2, #0
 800bce0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
#ifndef FX_SINGLE_THREAD

#ifndef FX_DONT_CREATE_MUTEX

    /* Create ThreadX mutex for protection.  */
    tx_mutex_create(&(media_ptr -> fx_media_protect), "FileX Media Mutex", TX_NO_INHERIT);
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800bcea:	2200      	movs	r2, #0
 800bcec:	4928      	ldr	r1, [pc, #160]	; (800bd90 <_fx_media_open+0xae4>)
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f003 fa6a 	bl	800f1c8 <_tx_mutex_create>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bcf4:	f3ef 8310 	mrs	r3, PRIMASK
 800bcf8:	61fb      	str	r3, [r7, #28]
    return(posture);
 800bcfa:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800bcfc:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bcfe:	b672      	cpsid	i
    return(int_posture);
 800bd00:	69bb      	ldr	r3, [r7, #24]
    /* Protect against other threads accessing the media.  */
    FX_PROTECT
#endif

    /* Lockout interrupts.  */
    FX_DISABLE_INTS
 800bd02:	627b      	str	r3, [r7, #36]	; 0x24

    /* At this point, the media has been opened successfully.  Place the
       media on the linked list of currently opened media.  */

    /* Load the media ID field in the media control block.  */
    media_ptr -> fx_media_id =  (ULONG)FX_MEDIA_ID;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	4a23      	ldr	r2, [pc, #140]	; (800bd94 <_fx_media_open+0xae8>)
 800bd08:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of opened media.  First,
       check for an empty list.  */
    if (_fx_system_media_opened_ptr)
 800bd0a:	4b23      	ldr	r3, [pc, #140]	; (800bd98 <_fx_media_open+0xaec>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d017      	beq.n	800bd42 <_fx_media_open+0xa96>
    {

        /* Pickup tail pointer.  */
        tail_ptr =  _fx_system_media_opened_ptr -> fx_media_opened_previous;
 800bd12:	4b21      	ldr	r3, [pc, #132]	; (800bd98 <_fx_media_open+0xaec>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800bd1a:	623b      	str	r3, [r7, #32]

        /* Place the new media in the list.  */
        _fx_system_media_opened_ptr -> fx_media_opened_previous =  media_ptr;
 800bd1c:	4b1e      	ldr	r3, [pc, #120]	; (800bd98 <_fx_media_open+0xaec>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	68fa      	ldr	r2, [r7, #12]
 800bd22:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        tail_ptr -> fx_media_opened_next =  media_ptr;
 800bd26:	6a3b      	ldr	r3, [r7, #32]
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

        /* Setup this media's opened links.  */
        media_ptr -> fx_media_opened_previous =  tail_ptr;
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	6a3a      	ldr	r2, [r7, #32]
 800bd32:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
        media_ptr -> fx_media_opened_next =      _fx_system_media_opened_ptr;
 800bd36:	4b18      	ldr	r3, [pc, #96]	; (800bd98 <_fx_media_open+0xaec>)
 800bd38:	681a      	ldr	r2, [r3, #0]
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 800bd40:	e00a      	b.n	800bd58 <_fx_media_open+0xaac>
    }
    else
    {

        /* The opened media list is empty.  Add the media to empty list.  */
        _fx_system_media_opened_ptr =           media_ptr;
 800bd42:	4a15      	ldr	r2, [pc, #84]	; (800bd98 <_fx_media_open+0xaec>)
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	6013      	str	r3, [r2, #0]
        media_ptr -> fx_media_opened_next =     media_ptr;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	68fa      	ldr	r2, [r7, #12]
 800bd4c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
        media_ptr -> fx_media_opened_previous = media_ptr;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	68fa      	ldr	r2, [r7, #12]
 800bd54:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    }

    /* Increment the opened media counter.  */
    _fx_system_media_opened_count++;
 800bd58:	4b10      	ldr	r3, [pc, #64]	; (800bd9c <_fx_media_open+0xaf0>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	3301      	adds	r3, #1
 800bd5e:	4a0f      	ldr	r2, [pc, #60]	; (800bd9c <_fx_media_open+0xaf0>)
 800bd60:	6013      	str	r3, [r2, #0]

    /* Invoke media open callback. */
    if (media_ptr -> fx_media_open_notify)
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d004      	beq.n	800bd76 <_fx_media_open+0xaca>
    {
        media_ptr -> fx_media_open_notify(media_ptr);
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800bd72:	68f8      	ldr	r0, [r7, #12]
 800bd74:	4798      	blx	r3
 800bd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd78:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	f383 8810 	msr	PRIMASK, r3
}
 800bd80:	bf00      	nop
    /* Release media protection.  */
    FX_UNPROTECT
#endif

    /* Return a successful status.  */
    return(FX_SUCCESS);
 800bd82:	2300      	movs	r3, #0
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3758      	adds	r7, #88	; 0x58
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd8e:	bf00      	nop
 800bd90:	08012b20 	.word	0x08012b20
 800bd94:	4d454449 	.word	0x4d454449
 800bd98:	24014aa0 	.word	0x24014aa0
 800bd9c:	24014aa4 	.word	0x24014aa4

0800bda0 <_fx_partition_offset_calculate>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_partition_offset_calculate(void  *partition_sector, UINT partition,
                                     ULONG *partition_start, ULONG *partition_size)
{
 800bda0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800bda4:	b090      	sub	sp, #64	; 0x40
 800bda6:	af00      	add	r7, sp, #0
 800bda8:	60f8      	str	r0, [r7, #12]
 800bdaa:	60b9      	str	r1, [r7, #8]
 800bdac:	607a      	str	r2, [r7, #4]
 800bdae:	603b      	str	r3, [r7, #0]
ULONG64             total_sectors;
UCHAR               *partition_sector_ptr;


    /* Setup working pointer and initialize count.  */
    partition_sector_ptr =  partition_sector;
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	637b      	str	r3, [r7, #52]	; 0x34
    count =  0;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	613b      	str	r3, [r7, #16]

    /* Check for a real boot sector instead of a partition table.  */
    if ((partition_sector_ptr[0] == 0xe9) || ((partition_sector_ptr[0] == 0xeb) && (partition_sector_ptr[2] == 0x90)))    
 800bdb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdba:	781b      	ldrb	r3, [r3, #0]
 800bdbc:	2be9      	cmp	r3, #233	; 0xe9
 800bdbe:	d008      	beq.n	800bdd2 <_fx_partition_offset_calculate+0x32>
 800bdc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	2beb      	cmp	r3, #235	; 0xeb
 800bdc6:	d17d      	bne.n	800bec4 <_fx_partition_offset_calculate+0x124>
 800bdc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdca:	3302      	adds	r3, #2
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	2b90      	cmp	r3, #144	; 0x90
 800bdd0:	d178      	bne.n	800bec4 <_fx_partition_offset_calculate+0x124>
    {
    
        /* Yes, a real boot sector could be present.  */  

        /* See if there are good values for sectors per FAT.  */
        if (partition_sector_ptr[0x16] || partition_sector_ptr[0x17] || partition_sector_ptr[0x24] || partition_sector_ptr[0x25] || partition_sector_ptr[0x26] || partition_sector_ptr[0x27])
 800bdd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdd4:	3316      	adds	r3, #22
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d118      	bne.n	800be0e <_fx_partition_offset_calculate+0x6e>
 800bddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdde:	3317      	adds	r3, #23
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d113      	bne.n	800be0e <_fx_partition_offset_calculate+0x6e>
 800bde6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bde8:	3324      	adds	r3, #36	; 0x24
 800bdea:	781b      	ldrb	r3, [r3, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d10e      	bne.n	800be0e <_fx_partition_offset_calculate+0x6e>
 800bdf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdf2:	3325      	adds	r3, #37	; 0x25
 800bdf4:	781b      	ldrb	r3, [r3, #0]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d109      	bne.n	800be0e <_fx_partition_offset_calculate+0x6e>
 800bdfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bdfc:	3326      	adds	r3, #38	; 0x26
 800bdfe:	781b      	ldrb	r3, [r3, #0]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d104      	bne.n	800be0e <_fx_partition_offset_calculate+0x6e>
 800be04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be06:	3327      	adds	r3, #39	; 0x27
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d05a      	beq.n	800bec4 <_fx_partition_offset_calculate+0x124>
        {

            /* There are values for sectors per FAT.  */

            /* Determine if there is a total sector count.  */
            total_sectors =  0;
 800be0e:	f04f 0200 	mov.w	r2, #0
 800be12:	f04f 0300 	mov.w	r3, #0
 800be16:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

            if (partition_sector_ptr[0x13] || partition_sector_ptr[0x14])
 800be1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be1c:	3313      	adds	r3, #19
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d104      	bne.n	800be2e <_fx_partition_offset_calculate+0x8e>
 800be24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be26:	3314      	adds	r3, #20
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d00d      	beq.n	800be4a <_fx_partition_offset_calculate+0xaa>
            {

                /* Calculate the total sectors, FAT12/16.  */
                total_sectors =  (((ULONG) partition_sector_ptr[0x14]) << 8) | ((ULONG) partition_sector_ptr[0x13]);
 800be2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be30:	3314      	adds	r3, #20
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	021b      	lsls	r3, r3, #8
 800be36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be38:	3213      	adds	r2, #19
 800be3a:	7812      	ldrb	r2, [r2, #0]
 800be3c:	4313      	orrs	r3, r2
 800be3e:	2200      	movs	r2, #0
 800be40:	4698      	mov	r8, r3
 800be42:	4691      	mov	r9, r2
 800be44:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38
 800be48:	e02a      	b.n	800bea0 <_fx_partition_offset_calculate+0x100>
            }
            else if (partition_sector_ptr[0x20] || partition_sector_ptr[0x21] || partition_sector_ptr[0x22] || partition_sector_ptr[0x23])
 800be4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be4c:	3320      	adds	r3, #32
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	2b00      	cmp	r3, #0
 800be52:	d10e      	bne.n	800be72 <_fx_partition_offset_calculate+0xd2>
 800be54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be56:	3321      	adds	r3, #33	; 0x21
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d109      	bne.n	800be72 <_fx_partition_offset_calculate+0xd2>
 800be5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be60:	3322      	adds	r3, #34	; 0x22
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d104      	bne.n	800be72 <_fx_partition_offset_calculate+0xd2>
 800be68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be6a:	3323      	adds	r3, #35	; 0x23
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d016      	beq.n	800bea0 <_fx_partition_offset_calculate+0x100>
            {

                /* Calculate the total sectors, FAT32.  */
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 800be72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be74:	3323      	adds	r3, #35	; 0x23
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	061a      	lsls	r2, r3, #24
                                 (((ULONG) partition_sector_ptr[0x22]) << 16) |
 800be7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be7c:	3322      	adds	r3, #34	; 0x22
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	041b      	lsls	r3, r3, #16
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 800be82:	431a      	orrs	r2, r3
                                 (((ULONG) partition_sector_ptr[0x21]) << 8)  |
 800be84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be86:	3321      	adds	r3, #33	; 0x21
 800be88:	781b      	ldrb	r3, [r3, #0]
 800be8a:	021b      	lsls	r3, r3, #8
                                 (((ULONG) partition_sector_ptr[0x22]) << 16) |
 800be8c:	4313      	orrs	r3, r2
                                 ((ULONG) partition_sector_ptr[0x20]);
 800be8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800be90:	3220      	adds	r2, #32
 800be92:	7812      	ldrb	r2, [r2, #0]
                                 (((ULONG) partition_sector_ptr[0x21]) << 8)  |
 800be94:	4313      	orrs	r3, r2
                total_sectors =  (((ULONG) partition_sector_ptr[0x23]) << 24) | 
 800be96:	2200      	movs	r2, #0
 800be98:	461c      	mov	r4, r3
 800be9a:	4615      	mov	r5, r2
 800be9c:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38
            }       

            /* Determine if there is a total sector count.  */
            if (total_sectors)
 800bea0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800bea4:	4313      	orrs	r3, r2
 800bea6:	d00d      	beq.n	800bec4 <_fx_partition_offset_calculate+0x124>
            {

                if (partition_start != FX_NULL)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d002      	beq.n	800beb4 <_fx_partition_offset_calculate+0x114>
                {
                    /* Return an offset of 0, size of boot record, and a successful status.  */
                    *partition_start =  0;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2200      	movs	r2, #0
 800beb2:	601a      	str	r2, [r3, #0]
                }

                /* Determine if the total sectors is required.  */
                if (partition_size != FX_NULL)
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d002      	beq.n	800bec0 <_fx_partition_offset_calculate+0x120>
                {

                    /* Return the total sectors.  */
                    *partition_size =  (ULONG)(total_sectors & 0xFFFFFFFF);
 800beba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	601a      	str	r2, [r3, #0]
                }

                /* Return success!  */
                return(FX_SUCCESS);
 800bec0:	2300      	movs	r3, #0
 800bec2:	e032      	b.n	800bf2a <_fx_partition_offset_calculate+0x18a>
        }
#endif /* FX_ENABLE_EXFAT */
    }

    /* Check signature to make sure the buffer is valid.  */
    if ((partition_sector_ptr[510] != 0x55) || (partition_sector_ptr[511] != 0xAA))
 800bec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bec6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800beca:	781b      	ldrb	r3, [r3, #0]
 800becc:	2b55      	cmp	r3, #85	; 0x55
 800bece:	d105      	bne.n	800bedc <_fx_partition_offset_calculate+0x13c>
 800bed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bed2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	2baa      	cmp	r3, #170	; 0xaa
 800beda:	d001      	beq.n	800bee0 <_fx_partition_offset_calculate+0x140>
    {

        /* Invalid, return an error.  */
        return(FX_NOT_FOUND);
 800bedc:	2304      	movs	r3, #4
 800bede:	e024      	b.n	800bf2a <_fx_partition_offset_calculate+0x18a>
    }
    
    /* Not bootable, look for specific partition.  */
    _fx_utility_partition_get(partition_table, &count, 0, partition_sector_ptr);
 800bee0:	f107 0110 	add.w	r1, r7, #16
 800bee4:	f107 0014 	add.w	r0, r7, #20
 800bee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beea:	2200      	movs	r2, #0
 800beec:	f000 f822 	bl	800bf34 <_fx_utility_partition_get>

    /* Determine if return value is valid.  */
    if (partition >= count)
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	68ba      	ldr	r2, [r7, #8]
 800bef4:	429a      	cmp	r2, r3
 800bef6:	d301      	bcc.n	800befc <_fx_partition_offset_calculate+0x15c>
    {

        /* No, return an error.  */
        return(FX_NOT_FOUND);
 800bef8:	2304      	movs	r3, #4
 800befa:	e016      	b.n	800bf2a <_fx_partition_offset_calculate+0x18a>
    }

    /* Return the partition starting sector, if non-NULL.  */
    if (partition_start != FX_NULL)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d007      	beq.n	800bf12 <_fx_partition_offset_calculate+0x172>
    {
        *partition_start =  partition_table[partition].fx_media_part_start;
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	00db      	lsls	r3, r3, #3
 800bf06:	3340      	adds	r3, #64	; 0x40
 800bf08:	443b      	add	r3, r7
 800bf0a:	f853 2c2c 	ldr.w	r2, [r3, #-44]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	601a      	str	r2, [r3, #0]
    }

    /* Return the partition size, if non-NULL.  */
    if (partition_size != FX_NULL)
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d007      	beq.n	800bf28 <_fx_partition_offset_calculate+0x188>
    {
        *partition_size =  partition_table[partition].fx_media_part_size;
 800bf18:	68bb      	ldr	r3, [r7, #8]
 800bf1a:	00db      	lsls	r3, r3, #3
 800bf1c:	3340      	adds	r3, #64	; 0x40
 800bf1e:	443b      	add	r3, r7
 800bf20:	f853 2c28 	ldr.w	r2, [r3, #-40]
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	601a      	str	r2, [r3, #0]
    }

    /* Return successful completion.  */
    return(FX_SUCCESS);
 800bf28:	2300      	movs	r3, #0
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3740      	adds	r7, #64	; 0x40
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800bf34 <_fx_utility_partition_get>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_partition_get(FX_MEDIA_PARTITION *partition_table, 
                                UINT *count, ULONG sector, UCHAR *sector_buffer)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b089      	sub	sp, #36	; 0x24
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	60f8      	str	r0, [r7, #12]
 800bf3c:	60b9      	str	r1, [r7, #8]
 800bf3e:	607a      	str	r2, [r7, #4]
 800bf40:	603b      	str	r3, [r7, #0]

    /* This parameter has not been supported yet. */
    FX_PARAMETER_NOT_USED(sector); 

    /* Initialize base sector.  */
    base_sector =  0;
 800bf42:	2300      	movs	r3, #0
 800bf44:	61bb      	str	r3, [r7, #24]

    for(i = 446; i <= 494; i+=16)
 800bf46:	f44f 73df 	mov.w	r3, #446	; 0x1be
 800bf4a:	61fb      	str	r3, [r7, #28]
 800bf4c:	e06f      	b.n	800c02e <_fx_utility_partition_get+0xfa>
    {
        if (sector_buffer[i + 4] == 0) /* no partition entry here */
 800bf4e:	69fb      	ldr	r3, [r7, #28]
 800bf50:	3304      	adds	r3, #4
 800bf52:	683a      	ldr	r2, [r7, #0]
 800bf54:	4413      	add	r3, r2
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d10e      	bne.n	800bf7a <_fx_utility_partition_get+0x46>
        {

            partition_table[*count].fx_media_part_start = 0;
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	00db      	lsls	r3, r3, #3
 800bf62:	68fa      	ldr	r2, [r7, #12]
 800bf64:	4413      	add	r3, r2
 800bf66:	2200      	movs	r2, #0
 800bf68:	601a      	str	r2, [r3, #0]
            partition_table[*count].fx_media_part_size  = 0;
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	00db      	lsls	r3, r3, #3
 800bf70:	68fa      	ldr	r2, [r7, #12]
 800bf72:	4413      	add	r3, r2
 800bf74:	2200      	movs	r2, #0
 800bf76:	605a      	str	r2, [r3, #4]
 800bf78:	e051      	b.n	800c01e <_fx_utility_partition_get+0xea>
        }
        else
        {

            value =  (ULONG) sector_buffer[i + 8]; /* little endian start value */
 800bf7a:	69fb      	ldr	r3, [r7, #28]
 800bf7c:	3308      	adds	r3, #8
 800bf7e:	683a      	ldr	r2, [r7, #0]
 800bf80:	4413      	add	r3, r2
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 9]) << 8) | value;
 800bf86:	69fb      	ldr	r3, [r7, #28]
 800bf88:	3309      	adds	r3, #9
 800bf8a:	683a      	ldr	r2, [r7, #0]
 800bf8c:	4413      	add	r3, r2
 800bf8e:	781b      	ldrb	r3, [r3, #0]
 800bf90:	021b      	lsls	r3, r3, #8
 800bf92:	697a      	ldr	r2, [r7, #20]
 800bf94:	4313      	orrs	r3, r2
 800bf96:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 10]) << 16) | value;
 800bf98:	69fb      	ldr	r3, [r7, #28]
 800bf9a:	330a      	adds	r3, #10
 800bf9c:	683a      	ldr	r2, [r7, #0]
 800bf9e:	4413      	add	r3, r2
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	041b      	lsls	r3, r3, #16
 800bfa4:	697a      	ldr	r2, [r7, #20]
 800bfa6:	4313      	orrs	r3, r2
 800bfa8:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 11]) << 24) | value;
 800bfaa:	69fb      	ldr	r3, [r7, #28]
 800bfac:	330b      	adds	r3, #11
 800bfae:	683a      	ldr	r2, [r7, #0]
 800bfb0:	4413      	add	r3, r2
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	061b      	lsls	r3, r3, #24
 800bfb6:	697a      	ldr	r2, [r7, #20]
 800bfb8:	4313      	orrs	r3, r2
 800bfba:	617b      	str	r3, [r7, #20]
            partition_table[*count].fx_media_part_start = value + base_sector;
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	00db      	lsls	r3, r3, #3
 800bfc2:	68fa      	ldr	r2, [r7, #12]
 800bfc4:	4413      	add	r3, r2
 800bfc6:	6979      	ldr	r1, [r7, #20]
 800bfc8:	69ba      	ldr	r2, [r7, #24]
 800bfca:	440a      	add	r2, r1
 800bfcc:	601a      	str	r2, [r3, #0]

            value =  (ULONG) sector_buffer[i + 12]; /* little endian size value */
 800bfce:	69fb      	ldr	r3, [r7, #28]
 800bfd0:	330c      	adds	r3, #12
 800bfd2:	683a      	ldr	r2, [r7, #0]
 800bfd4:	4413      	add	r3, r2
 800bfd6:	781b      	ldrb	r3, [r3, #0]
 800bfd8:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 13]) << 8) | value;
 800bfda:	69fb      	ldr	r3, [r7, #28]
 800bfdc:	330d      	adds	r3, #13
 800bfde:	683a      	ldr	r2, [r7, #0]
 800bfe0:	4413      	add	r3, r2
 800bfe2:	781b      	ldrb	r3, [r3, #0]
 800bfe4:	021b      	lsls	r3, r3, #8
 800bfe6:	697a      	ldr	r2, [r7, #20]
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 14]) << 16) | value;
 800bfec:	69fb      	ldr	r3, [r7, #28]
 800bfee:	330e      	adds	r3, #14
 800bff0:	683a      	ldr	r2, [r7, #0]
 800bff2:	4413      	add	r3, r2
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	041b      	lsls	r3, r3, #16
 800bff8:	697a      	ldr	r2, [r7, #20]
 800bffa:	4313      	orrs	r3, r2
 800bffc:	617b      	str	r3, [r7, #20]
            value =  (((ULONG) sector_buffer[i + 15]) << 24) | value;
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	330f      	adds	r3, #15
 800c002:	683a      	ldr	r2, [r7, #0]
 800c004:	4413      	add	r3, r2
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	061b      	lsls	r3, r3, #24
 800c00a:	697a      	ldr	r2, [r7, #20]
 800c00c:	4313      	orrs	r3, r2
 800c00e:	617b      	str	r3, [r7, #20]
            partition_table[*count].fx_media_part_size = value;
 800c010:	68bb      	ldr	r3, [r7, #8]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	00db      	lsls	r3, r3, #3
 800c016:	68fa      	ldr	r2, [r7, #12]
 800c018:	4413      	add	r3, r2
 800c01a:	697a      	ldr	r2, [r7, #20]
 800c01c:	605a      	str	r2, [r3, #4]
        }

        (*count)++;
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	1c5a      	adds	r2, r3, #1
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	601a      	str	r2, [r3, #0]
    for(i = 446; i <= 494; i+=16)
 800c028:	69fb      	ldr	r3, [r7, #28]
 800c02a:	3310      	adds	r3, #16
 800c02c:	61fb      	str	r3, [r7, #28]
 800c02e:	69fb      	ldr	r3, [r7, #28]
 800c030:	f5b3 7ff7 	cmp.w	r3, #494	; 0x1ee
 800c034:	d98b      	bls.n	800bf4e <_fx_utility_partition_get+0x1a>
    }

    /* Return success.  */
    return(FX_SUCCESS);
 800c036:	2300      	movs	r3, #0
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3724      	adds	r7, #36	; 0x24
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr

0800c044 <_fx_system_initialize>:
/*                                            disable build options,      */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_system_initialize(VOID)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b084      	sub	sp, #16
 800c048:	af04      	add	r7, sp, #16
    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_SYSTEM_INITIALIZE, 0, 0, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Initialize the head pointer of the opened media list and the
       number of opened media.  */
    _fx_system_media_opened_ptr =       FX_NULL;
 800c04a:	4b27      	ldr	r3, [pc, #156]	; (800c0e8 <_fx_system_initialize+0xa4>)
 800c04c:	2200      	movs	r2, #0
 800c04e:	601a      	str	r2, [r3, #0]
    _fx_system_media_opened_count =     0;
 800c050:	4b26      	ldr	r3, [pc, #152]	; (800c0ec <_fx_system_initialize+0xa8>)
 800c052:	2200      	movs	r2, #0
 800c054:	601a      	str	r2, [r3, #0]

    /* Initialize the time and date fields with their default values.  */
    _fx_system_date =   FX_INITIAL_DATE;
 800c056:	4b26      	ldr	r3, [pc, #152]	; (800c0f0 <_fx_system_initialize+0xac>)
 800c058:	f644 2221 	movw	r2, #18977	; 0x4a21
 800c05c:	601a      	str	r2, [r3, #0]
    _fx_system_time =   FX_INITIAL_TIME;
 800c05e:	4b25      	ldr	r3, [pc, #148]	; (800c0f4 <_fx_system_initialize+0xb0>)
 800c060:	2200      	movs	r2, #0
 800c062:	601a      	str	r2, [r3, #0]

    /* Initialize the sector and FAT cache sizes.  */
    _fx_system_media_max_sector_cache =  FX_MAX_SECTOR_CACHE;
 800c064:	4b24      	ldr	r3, [pc, #144]	; (800c0f8 <_fx_system_initialize+0xb4>)
 800c066:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c06a:	601a      	str	r2, [r3, #0]
    _fx_system_media_max_fat_cache =     FX_MAX_FAT_CACHE;
 800c06c:	4b23      	ldr	r3, [pc, #140]	; (800c0fc <_fx_system_initialize+0xb8>)
 800c06e:	2210      	movs	r2, #16
 800c070:	601a      	str	r2, [r3, #0]
       FX_UPDATE_RATE_IN_TICKS.  Note that the timer is not necessary for
       regular FileX operation - it is only needed for accurate system
       date and time stamps on files.  */

#ifndef FX_NO_TIMER
    tx_timer_create(&_fx_system_timer, "FileX System Timer", _fx_system_timer_entry, FX_TIMER_ID,
 800c072:	2301      	movs	r3, #1
 800c074:	9302      	str	r3, [sp, #8]
 800c076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c07a:	9301      	str	r3, [sp, #4]
 800c07c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c080:	9300      	str	r3, [sp, #0]
 800c082:	4b1f      	ldr	r3, [pc, #124]	; (800c100 <_fx_system_initialize+0xbc>)
 800c084:	4a1f      	ldr	r2, [pc, #124]	; (800c104 <_fx_system_initialize+0xc0>)
 800c086:	4920      	ldr	r1, [pc, #128]	; (800c108 <_fx_system_initialize+0xc4>)
 800c088:	4820      	ldr	r0, [pc, #128]	; (800c10c <_fx_system_initialize+0xc8>)
 800c08a:	f004 fe15 	bl	8010cb8 <_tx_timer_create>
    /* Setup the build options variables.  */

    /* Setup the first build options variable.  */
    if (FX_MAX_LONG_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 24);
 800c08e:	4b20      	ldr	r3, [pc, #128]	; (800c110 <_fx_system_initialize+0xcc>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800c096:	4a1e      	ldr	r2, [pc, #120]	; (800c110 <_fx_system_initialize+0xcc>)
 800c098:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)(FX_MAX_LONG_NAME_LEN & 0xFF)) << 24);
    }
    if (FX_MAX_LAST_NAME_LEN > 0xFF)
    {
        _fx_system_build_options_1 =  _fx_system_build_options_1 | (((ULONG)0xFF) << 16);
 800c09a:	4b1d      	ldr	r3, [pc, #116]	; (800c110 <_fx_system_initialize+0xcc>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800c0a2:	4a1b      	ldr	r2, [pc, #108]	; (800c110 <_fx_system_initialize+0xcc>)
 800c0a4:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFFFF) << 16);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_MAX_SECTOR_CACHE) << 16);
 800c0a6:	4b1b      	ldr	r3, [pc, #108]	; (800c114 <_fx_system_initialize+0xd0>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c0ae:	4a19      	ldr	r2, [pc, #100]	; (800c114 <_fx_system_initialize+0xd0>)
 800c0b0:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)0xFF) << 8);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | (((ULONG)FX_FAT_MAP_SIZE) << 8);
 800c0b2:	4b18      	ldr	r3, [pc, #96]	; (800c114 <_fx_system_initialize+0xd0>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c0ba:	4a16      	ldr	r2, [pc, #88]	; (800c114 <_fx_system_initialize+0xd0>)
 800c0bc:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)0xFF);
    }
    else
    {
        _fx_system_build_options_2 =  _fx_system_build_options_2 | ((ULONG)FX_MAX_FAT_CACHE);
 800c0be:	4b15      	ldr	r3, [pc, #84]	; (800c114 <_fx_system_initialize+0xd0>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f043 0310 	orr.w	r3, r3, #16
 800c0c6:	4a13      	ldr	r2, [pc, #76]	; (800c114 <_fx_system_initialize+0xd0>)
 800c0c8:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)0xFF) << 16);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | (((ULONG)FX_UPDATE_RATE_IN_SECONDS) << 16);
 800c0ca:	4b13      	ldr	r3, [pc, #76]	; (800c118 <_fx_system_initialize+0xd4>)
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	f443 2320 	orr.w	r3, r3, #655360	; 0xa0000
 800c0d2:	4a11      	ldr	r2, [pc, #68]	; (800c118 <_fx_system_initialize+0xd4>)
 800c0d4:	6013      	str	r3, [r2, #0]
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)0xFFFF);
    }
    else
    {
        _fx_system_build_options_3 =  _fx_system_build_options_3 | ((ULONG)FX_UPDATE_RATE_IN_TICKS);
 800c0d6:	4b10      	ldr	r3, [pc, #64]	; (800c118 <_fx_system_initialize+0xd4>)
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	f443 737a 	orr.w	r3, r3, #1000	; 0x3e8
 800c0de:	4a0e      	ldr	r2, [pc, #56]	; (800c118 <_fx_system_initialize+0xd4>)
 800c0e0:	6013      	str	r3, [r2, #0]
    }
#endif /* FX_DISABLE_BUILD_OPTIONS */
}
 800c0e2:	bf00      	nop
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}
 800c0e8:	24014aa0 	.word	0x24014aa0
 800c0ec:	24014aa4 	.word	0x24014aa4
 800c0f0:	24014aa8 	.word	0x24014aa8
 800c0f4:	24014aac 	.word	0x24014aac
 800c0f8:	24014ab0 	.word	0x24014ab0
 800c0fc:	24014ab4 	.word	0x24014ab4
 800c100:	46585359 	.word	0x46585359
 800c104:	0800c11d 	.word	0x0800c11d
 800c108:	08012b34 	.word	0x08012b34
 800c10c:	24014ac4 	.word	0x24014ac4
 800c110:	24014ab8 	.word	0x24014ab8
 800c114:	24014abc 	.word	0x24014abc
 800c118:	24014ac0 	.word	0x24014ac0

0800c11c <_fx_system_timer_entry>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _fx_system_timer_entry(ULONG id)
{
 800c11c:	b480      	push	{r7}
 800c11e:	b089      	sub	sp, #36	; 0x24
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
UINT month;
UINT year;


    /* Determine if the ID is valid.  */
    if (id == FX_TIMER_ID)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	4a9d      	ldr	r2, [pc, #628]	; (800c39c <_fx_system_timer_entry+0x280>)
 800c128:	4293      	cmp	r3, r2
 800c12a:	f040 8132 	bne.w	800c392 <_fx_system_timer_entry+0x276>
    {

        /* Break the current date time into separate fields for easier work!  */
        second =  (_fx_system_time & FX_SECOND_MASK) * 2;
 800c12e:	4b9c      	ldr	r3, [pc, #624]	; (800c3a0 <_fx_system_timer_entry+0x284>)
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f003 031f 	and.w	r3, r3, #31
 800c136:	005b      	lsls	r3, r3, #1
 800c138:	61fb      	str	r3, [r7, #28]
        minute =  (_fx_system_time >> FX_MINUTE_SHIFT) & FX_MINUTE_MASK;
 800c13a:	4b99      	ldr	r3, [pc, #612]	; (800c3a0 <_fx_system_timer_entry+0x284>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	095b      	lsrs	r3, r3, #5
 800c140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c144:	61bb      	str	r3, [r7, #24]
        hour =    (_fx_system_time >> FX_HOUR_SHIFT) & FX_HOUR_MASK;
 800c146:	4b96      	ldr	r3, [pc, #600]	; (800c3a0 <_fx_system_timer_entry+0x284>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	0adb      	lsrs	r3, r3, #11
 800c14c:	f003 031f 	and.w	r3, r3, #31
 800c150:	617b      	str	r3, [r7, #20]
        day =     _fx_system_date & FX_DAY_MASK;
 800c152:	4b94      	ldr	r3, [pc, #592]	; (800c3a4 <_fx_system_timer_entry+0x288>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f003 031f 	and.w	r3, r3, #31
 800c15a:	613b      	str	r3, [r7, #16]
        month =   (_fx_system_date >> FX_MONTH_SHIFT) & FX_MONTH_MASK;
 800c15c:	4b91      	ldr	r3, [pc, #580]	; (800c3a4 <_fx_system_timer_entry+0x288>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	095b      	lsrs	r3, r3, #5
 800c162:	f003 030f 	and.w	r3, r3, #15
 800c166:	60fb      	str	r3, [r7, #12]
        year =    ((_fx_system_date >> FX_YEAR_SHIFT) & FX_YEAR_MASK) + FX_BASE_YEAR;
 800c168:	4b8e      	ldr	r3, [pc, #568]	; (800c3a4 <_fx_system_timer_entry+0x288>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	0a5b      	lsrs	r3, r3, #9
 800c16e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c172:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 800c176:	60bb      	str	r3, [r7, #8]

        /* Now apply the "second" update.  */
        second =  second + FX_UPDATE_RATE_IN_SECONDS;
 800c178:	69fb      	ldr	r3, [r7, #28]
 800c17a:	330a      	adds	r3, #10
 800c17c:	61fb      	str	r3, [r7, #28]

        /* Determine if we need to adjust the minute field.  */
        if (second > FX_MAXIMUM_SECOND)
 800c17e:	69fb      	ldr	r3, [r7, #28]
 800c180:	2b3b      	cmp	r3, #59	; 0x3b
 800c182:	f240 80d4 	bls.w	800c32e <_fx_system_timer_entry+0x212>
        {

            /* Yes, we need to adjust the minute field.  */
            minute =  minute + second / 60;
 800c186:	69fb      	ldr	r3, [r7, #28]
 800c188:	4a87      	ldr	r2, [pc, #540]	; (800c3a8 <_fx_system_timer_entry+0x28c>)
 800c18a:	fba2 2303 	umull	r2, r3, r2, r3
 800c18e:	095b      	lsrs	r3, r3, #5
 800c190:	69ba      	ldr	r2, [r7, #24]
 800c192:	4413      	add	r3, r2
 800c194:	61bb      	str	r3, [r7, #24]
            second =  second % 60;
 800c196:	69fa      	ldr	r2, [r7, #28]
 800c198:	4b83      	ldr	r3, [pc, #524]	; (800c3a8 <_fx_system_timer_entry+0x28c>)
 800c19a:	fba3 1302 	umull	r1, r3, r3, r2
 800c19e:	0959      	lsrs	r1, r3, #5
 800c1a0:	460b      	mov	r3, r1
 800c1a2:	011b      	lsls	r3, r3, #4
 800c1a4:	1a5b      	subs	r3, r3, r1
 800c1a6:	009b      	lsls	r3, r3, #2
 800c1a8:	1ad3      	subs	r3, r2, r3
 800c1aa:	61fb      	str	r3, [r7, #28]

            /* Determine if we need to adjust the hour field.  */
            if (minute > FX_MAXIMUM_MINUTE)
 800c1ac:	69bb      	ldr	r3, [r7, #24]
 800c1ae:	2b3b      	cmp	r3, #59	; 0x3b
 800c1b0:	f240 80bd 	bls.w	800c32e <_fx_system_timer_entry+0x212>
            {

                /* Yes, we need to adjust the hour field.  */
                hour =    hour + minute / 60;
 800c1b4:	69bb      	ldr	r3, [r7, #24]
 800c1b6:	4a7c      	ldr	r2, [pc, #496]	; (800c3a8 <_fx_system_timer_entry+0x28c>)
 800c1b8:	fba2 2303 	umull	r2, r3, r2, r3
 800c1bc:	095b      	lsrs	r3, r3, #5
 800c1be:	697a      	ldr	r2, [r7, #20]
 800c1c0:	4413      	add	r3, r2
 800c1c2:	617b      	str	r3, [r7, #20]
                minute =  minute % 60;
 800c1c4:	69ba      	ldr	r2, [r7, #24]
 800c1c6:	4b78      	ldr	r3, [pc, #480]	; (800c3a8 <_fx_system_timer_entry+0x28c>)
 800c1c8:	fba3 1302 	umull	r1, r3, r3, r2
 800c1cc:	0959      	lsrs	r1, r3, #5
 800c1ce:	460b      	mov	r3, r1
 800c1d0:	011b      	lsls	r3, r3, #4
 800c1d2:	1a5b      	subs	r3, r3, r1
 800c1d4:	009b      	lsls	r3, r3, #2
 800c1d6:	1ad3      	subs	r3, r2, r3
 800c1d8:	61bb      	str	r3, [r7, #24]

                /* Determine if we need to adjust the day field.  */
                if (hour > FX_MAXIMUM_HOUR)
 800c1da:	697b      	ldr	r3, [r7, #20]
 800c1dc:	2b17      	cmp	r3, #23
 800c1de:	f240 80a6 	bls.w	800c32e <_fx_system_timer_entry+0x212>
                {

                    /* Yes, we need to adjust the day field.  */
                    hour =  0;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	617b      	str	r3, [r7, #20]
                    day++;
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	3301      	adds	r3, #1
 800c1ea:	613b      	str	r3, [r7, #16]

                    /* Determine if we need to adjust the month field.  */
                    switch (month)
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	3b01      	subs	r3, #1
 800c1f0:	2b0b      	cmp	r3, #11
 800c1f2:	f200 80cb 	bhi.w	800c38c <_fx_system_timer_entry+0x270>
 800c1f6:	a201      	add	r2, pc, #4	; (adr r2, 800c1fc <_fx_system_timer_entry+0xe0>)
 800c1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1fc:	0800c22d 	.word	0x0800c22d
 800c200:	0800c23f 	.word	0x0800c23f
 800c204:	0800c26d 	.word	0x0800c26d
 800c208:	0800c27f 	.word	0x0800c27f
 800c20c:	0800c291 	.word	0x0800c291
 800c210:	0800c2a3 	.word	0x0800c2a3
 800c214:	0800c2b5 	.word	0x0800c2b5
 800c218:	0800c2c7 	.word	0x0800c2c7
 800c21c:	0800c2d9 	.word	0x0800c2d9
 800c220:	0800c2eb 	.word	0x0800c2eb
 800c224:	0800c2fd 	.word	0x0800c2fd
 800c228:	0800c30f 	.word	0x0800c30f

                    case 1:                 /* January  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	2b1f      	cmp	r3, #31
 800c230:	d97f      	bls.n	800c332 <_fx_system_timer_entry+0x216>
                        {

                            /* Move to next month.  */
                            day = 1;
 800c232:	2301      	movs	r3, #1
 800c234:	613b      	str	r3, [r7, #16]
                            month++;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	3301      	adds	r3, #1
 800c23a:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800c23c:	e079      	b.n	800c332 <_fx_system_timer_entry+0x216>
                    {

                        /* Check for leap year.  We don't need to check for leap
                           century her (century years divisible by 400) since 2000
                           is and this FAT format only supports years to 2107. */
                        if ((year % 4) == 0)
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	f003 0303 	and.w	r3, r3, #3
 800c244:	2b00      	cmp	r3, #0
 800c246:	d108      	bne.n	800c25a <_fx_system_timer_entry+0x13e>
                        {

                            /* Leap year in February... check for 29 days
                               instead of 28.  */
                            if (day > 29)
 800c248:	693b      	ldr	r3, [r7, #16]
 800c24a:	2b1d      	cmp	r3, #29
 800c24c:	d973      	bls.n	800c336 <_fx_system_timer_entry+0x21a>
                            {

                                /* Adjust the month.  */
                                day =  1;
 800c24e:	2301      	movs	r3, #1
 800c250:	613b      	str	r3, [r7, #16]
                                month++;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	3301      	adds	r3, #1
 800c256:	60fb      	str	r3, [r7, #12]
                                /* Adjust the month.  */
                                day = 1;
                                month++;
                            }
                        }
                        break;
 800c258:	e06d      	b.n	800c336 <_fx_system_timer_entry+0x21a>
                            if (day > 28)
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	2b1c      	cmp	r3, #28
 800c25e:	d96a      	bls.n	800c336 <_fx_system_timer_entry+0x21a>
                                day = 1;
 800c260:	2301      	movs	r3, #1
 800c262:	613b      	str	r3, [r7, #16]
                                month++;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	3301      	adds	r3, #1
 800c268:	60fb      	str	r3, [r7, #12]
                        break;
 800c26a:	e064      	b.n	800c336 <_fx_system_timer_entry+0x21a>

                    case 3:                 /* March  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	2b1f      	cmp	r3, #31
 800c270:	d963      	bls.n	800c33a <_fx_system_timer_entry+0x21e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800c272:	2301      	movs	r3, #1
 800c274:	613b      	str	r3, [r7, #16]
                            month++;
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	3301      	adds	r3, #1
 800c27a:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800c27c:	e05d      	b.n	800c33a <_fx_system_timer_entry+0x21e>

                    case 4:                 /* April  */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	2b1e      	cmp	r3, #30
 800c282:	d95c      	bls.n	800c33e <_fx_system_timer_entry+0x222>
                        {

                            /* Move to next month.  */
                            day = 1;
 800c284:	2301      	movs	r3, #1
 800c286:	613b      	str	r3, [r7, #16]
                            month++;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	3301      	adds	r3, #1
 800c28c:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800c28e:	e056      	b.n	800c33e <_fx_system_timer_entry+0x222>

                    case 5:                 /* May  */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800c290:	693b      	ldr	r3, [r7, #16]
 800c292:	2b1f      	cmp	r3, #31
 800c294:	d955      	bls.n	800c342 <_fx_system_timer_entry+0x226>
                        {

                            /* Move to next month.  */
                            day = 1;
 800c296:	2301      	movs	r3, #1
 800c298:	613b      	str	r3, [r7, #16]
                            month++;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	3301      	adds	r3, #1
 800c29e:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800c2a0:	e04f      	b.n	800c342 <_fx_system_timer_entry+0x226>

                    case 6:                 /* June */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	2b1e      	cmp	r3, #30
 800c2a6:	d94e      	bls.n	800c346 <_fx_system_timer_entry+0x22a>
                        {

                            /* Move to next month.  */
                            day = 1;
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	613b      	str	r3, [r7, #16]
                            month++;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	3301      	adds	r3, #1
 800c2b0:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800c2b2:	e048      	b.n	800c346 <_fx_system_timer_entry+0x22a>

                    case 7:                 /* July */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800c2b4:	693b      	ldr	r3, [r7, #16]
 800c2b6:	2b1f      	cmp	r3, #31
 800c2b8:	d947      	bls.n	800c34a <_fx_system_timer_entry+0x22e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	613b      	str	r3, [r7, #16]
                            month++;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800c2c4:	e041      	b.n	800c34a <_fx_system_timer_entry+0x22e>

                    case 8:                 /* August */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	2b1f      	cmp	r3, #31
 800c2ca:	d940      	bls.n	800c34e <_fx_system_timer_entry+0x232>
                        {

                            /* Move to next month.  */
                            day = 1;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	613b      	str	r3, [r7, #16]
                            month++;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800c2d6:	e03a      	b.n	800c34e <_fx_system_timer_entry+0x232>

                    case 9:                 /* September */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	2b1e      	cmp	r3, #30
 800c2dc:	d939      	bls.n	800c352 <_fx_system_timer_entry+0x236>
                        {

                            /* Move to next month.  */
                            day = 1;
 800c2de:	2301      	movs	r3, #1
 800c2e0:	613b      	str	r3, [r7, #16]
                            month++;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	3301      	adds	r3, #1
 800c2e6:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800c2e8:	e033      	b.n	800c352 <_fx_system_timer_entry+0x236>

                    case 10:                /* October */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	2b1f      	cmp	r3, #31
 800c2ee:	d932      	bls.n	800c356 <_fx_system_timer_entry+0x23a>
                        {

                            /* Move to next month.  */
                            day = 1;
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	613b      	str	r3, [r7, #16]
                            month++;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800c2fa:	e02c      	b.n	800c356 <_fx_system_timer_entry+0x23a>

                    case 11:                /* November */
                    {

                        /* Check for end of the month.  */
                        if (day > 30)
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	2b1e      	cmp	r3, #30
 800c300:	d92b      	bls.n	800c35a <_fx_system_timer_entry+0x23e>
                        {

                            /* Move to next month.  */
                            day = 1;
 800c302:	2301      	movs	r3, #1
 800c304:	613b      	str	r3, [r7, #16]
                            month++;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	3301      	adds	r3, #1
 800c30a:	60fb      	str	r3, [r7, #12]
                        }
                        break;
 800c30c:	e025      	b.n	800c35a <_fx_system_timer_entry+0x23e>

                    case 12:                /* December */
                    {

                        /* Check for end of the month.  */
                        if (day > 31)
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	2b1f      	cmp	r3, #31
 800c312:	d924      	bls.n	800c35e <_fx_system_timer_entry+0x242>
                        {

                            /* Move to next month.  */
                            day = 1;
 800c314:	2301      	movs	r3, #1
 800c316:	613b      	str	r3, [r7, #16]
                            month = 1;
 800c318:	2301      	movs	r3, #1
 800c31a:	60fb      	str	r3, [r7, #12]

                            /* Also move to next year.  */
                            year++;
 800c31c:	68bb      	ldr	r3, [r7, #8]
 800c31e:	3301      	adds	r3, #1
 800c320:	60bb      	str	r3, [r7, #8]

                            /* Check for a year that exceeds the representation
                               in this format.  */
                            if (year > FX_MAXIMUM_YEAR)
 800c322:	68bb      	ldr	r3, [r7, #8]
 800c324:	f640 023b 	movw	r2, #2107	; 0x83b
 800c328:	4293      	cmp	r3, r2
 800c32a:	d831      	bhi.n	800c390 <_fx_system_timer_entry+0x274>
                            {
                                return;
                            }
                        }
                        break;
 800c32c:	e017      	b.n	800c35e <_fx_system_timer_entry+0x242>

                    default:                /* Invalid month!  */

                        return;             /* Skip updating date/time!  */
                    }
                }
 800c32e:	bf00      	nop
 800c330:	e016      	b.n	800c360 <_fx_system_timer_entry+0x244>
                        break;
 800c332:	bf00      	nop
 800c334:	e014      	b.n	800c360 <_fx_system_timer_entry+0x244>
                        break;
 800c336:	bf00      	nop
 800c338:	e012      	b.n	800c360 <_fx_system_timer_entry+0x244>
                        break;
 800c33a:	bf00      	nop
 800c33c:	e010      	b.n	800c360 <_fx_system_timer_entry+0x244>
                        break;
 800c33e:	bf00      	nop
 800c340:	e00e      	b.n	800c360 <_fx_system_timer_entry+0x244>
                        break;
 800c342:	bf00      	nop
 800c344:	e00c      	b.n	800c360 <_fx_system_timer_entry+0x244>
                        break;
 800c346:	bf00      	nop
 800c348:	e00a      	b.n	800c360 <_fx_system_timer_entry+0x244>
                        break;
 800c34a:	bf00      	nop
 800c34c:	e008      	b.n	800c360 <_fx_system_timer_entry+0x244>
                        break;
 800c34e:	bf00      	nop
 800c350:	e006      	b.n	800c360 <_fx_system_timer_entry+0x244>
                        break;
 800c352:	bf00      	nop
 800c354:	e004      	b.n	800c360 <_fx_system_timer_entry+0x244>
                        break;
 800c356:	bf00      	nop
 800c358:	e002      	b.n	800c360 <_fx_system_timer_entry+0x244>
                        break;
 800c35a:	bf00      	nop
 800c35c:	e000      	b.n	800c360 <_fx_system_timer_entry+0x244>
                        break;
 800c35e:	bf00      	nop
        }

        /* Now apply the new setting to the internal representation.  */

        /* Set the system date.  */
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	f2a3 73bc 	subw	r3, r3, #1980	; 0x7bc
 800c366:	025a      	lsls	r2, r3, #9
                            (month << FX_MONTH_SHIFT) | day;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	015b      	lsls	r3, r3, #5
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800c36c:	431a      	orrs	r2, r3
                            (month << FX_MONTH_SHIFT) | day;
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	4313      	orrs	r3, r2
        _fx_system_date =  ((year - FX_BASE_YEAR) << FX_YEAR_SHIFT) |
 800c372:	4a0c      	ldr	r2, [pc, #48]	; (800c3a4 <_fx_system_timer_entry+0x288>)
 800c374:	6013      	str	r3, [r2, #0]

        /* Set the new system time.  */
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	02da      	lsls	r2, r3, #11
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	015b      	lsls	r3, r3, #5
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 800c37e:	431a      	orrs	r2, r3
                            (minute << FX_MINUTE_SHIFT) | (second / 2);
 800c380:	69fb      	ldr	r3, [r7, #28]
 800c382:	085b      	lsrs	r3, r3, #1
 800c384:	4313      	orrs	r3, r2
        _fx_system_time  =  (hour << FX_HOUR_SHIFT) |
 800c386:	4a06      	ldr	r2, [pc, #24]	; (800c3a0 <_fx_system_timer_entry+0x284>)
 800c388:	6013      	str	r3, [r2, #0]
 800c38a:	e002      	b.n	800c392 <_fx_system_timer_entry+0x276>
                        return;             /* Skip updating date/time!  */
 800c38c:	bf00      	nop
 800c38e:	e000      	b.n	800c392 <_fx_system_timer_entry+0x276>
                                return;
 800c390:	bf00      	nop
    }
}
 800c392:	3724      	adds	r7, #36	; 0x24
 800c394:	46bd      	mov	sp, r7
 800c396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39a:	4770      	bx	lr
 800c39c:	46585359 	.word	0x46585359
 800c3a0:	24014aac 	.word	0x24014aac
 800c3a4:	24014aa8 	.word	0x24014aa8
 800c3a8:	88888889 	.word	0x88888889

0800c3ac <_fx_utility_16_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_16_unsigned_read(UCHAR *source_ptr)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b085      	sub	sp, #20
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]

UINT value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	021b      	lsls	r3, r3, #8
              ((UINT)*(source_ptr) & 0xFF);
 800c3bc:	687a      	ldr	r2, [r7, #4]
 800c3be:	7812      	ldrb	r2, [r2, #0]
    value =  ((((UINT)*(source_ptr + 1)) & 0xFF) << 8) |
 800c3c0:	4313      	orrs	r3, r2
 800c3c2:	60fb      	str	r3, [r7, #12]

    /* Return value to caller.  */
    return(value);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	3714      	adds	r7, #20
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d0:	4770      	bx	lr

0800c3d2 <_fx_utility_16_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_16_unsigned_write(UCHAR *dest_ptr, UINT value)
{
 800c3d2:	b480      	push	{r7}
 800c3d4:	b083      	sub	sp, #12
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	6078      	str	r0, [r7, #4]
 800c3da:	6039      	str	r1, [r7, #0]

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	b2da      	uxtb	r2, r3
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	0a1a      	lsrs	r2, r3, #8
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	3301      	adds	r3, #1
 800c3ec:	b2d2      	uxtb	r2, r2
 800c3ee:	701a      	strb	r2, [r3, #0]
}
 800c3f0:	bf00      	nop
 800c3f2:	370c      	adds	r7, #12
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr

0800c3fc <_fx_utility_32_unsigned_read>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _fx_utility_32_unsigned_read(UCHAR *source_ptr)
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b085      	sub	sp, #20
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]

ULONG value;

    /* Pickup the UINT from the destination with endian-awareness.  */
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	3303      	adds	r3, #3
 800c408:	781b      	ldrb	r3, [r3, #0]
 800c40a:	061a      	lsls	r2, r3, #24
             ((((ULONG) *(source_ptr+2)) & 0xFF) << 16) |
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	3302      	adds	r3, #2
 800c410:	781b      	ldrb	r3, [r3, #0]
 800c412:	041b      	lsls	r3, r3, #16
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 800c414:	431a      	orrs	r2, r3
             ((((ULONG) *(source_ptr+1)) & 0xFF) << 8)  |
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	3301      	adds	r3, #1
 800c41a:	781b      	ldrb	r3, [r3, #0]
 800c41c:	021b      	lsls	r3, r3, #8
             ((((ULONG) *(source_ptr+2)) & 0xFF) << 16) |
 800c41e:	4313      	orrs	r3, r2
              (((ULONG) *(source_ptr)) & 0xFF);
 800c420:	687a      	ldr	r2, [r7, #4]
 800c422:	7812      	ldrb	r2, [r2, #0]
    value =  ((((ULONG) *(source_ptr+3)) & 0xFF) << 24) |
 800c424:	4313      	orrs	r3, r2
 800c426:	60fb      	str	r3, [r7, #12]

    /* Return value to caller.  */
    return(value);
 800c428:	68fb      	ldr	r3, [r7, #12]
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3714      	adds	r7, #20
 800c42e:	46bd      	mov	sp, r7
 800c430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c434:	4770      	bx	lr

0800c436 <_fx_utility_32_unsigned_write>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_32_unsigned_write(UCHAR *dest_ptr, ULONG value)
{
 800c436:	b480      	push	{r7}
 800c438:	b083      	sub	sp, #12
 800c43a:	af00      	add	r7, sp, #0
 800c43c:	6078      	str	r0, [r7, #4]
 800c43e:	6039      	str	r1, [r7, #0]

    /* Store the UINT into the destination with endian-awareness.  */
    *(dest_ptr) =       (UCHAR)(value & 0xFF);
 800c440:	683b      	ldr	r3, [r7, #0]
 800c442:	b2da      	uxtb	r2, r3
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 1) =   (UCHAR)((value >> 8) & 0xFF);
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	0a1a      	lsrs	r2, r3, #8
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	3301      	adds	r3, #1
 800c450:	b2d2      	uxtb	r2, r2
 800c452:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 2) =   (UCHAR)((value >> 16) & 0xFF);
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	0c1a      	lsrs	r2, r3, #16
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	3302      	adds	r3, #2
 800c45c:	b2d2      	uxtb	r2, r2
 800c45e:	701a      	strb	r2, [r3, #0]
    *(dest_ptr + 3) =   (UCHAR)((value >> 24) & 0xFF);
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	0e1a      	lsrs	r2, r3, #24
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	3303      	adds	r3, #3
 800c468:	b2d2      	uxtb	r2, r2
 800c46a:	701a      	strb	r2, [r3, #0]
}
 800c46c:	bf00      	nop
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <_fx_utility_FAT_entry_read>:
/*                                            fixed compiler warning,     */
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_entry_read(FX_MEDIA *media_ptr, ULONG cluster, ULONG *entry_ptr)
{
 800c478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c47c:	b098      	sub	sp, #96	; 0x60
 800c47e:	af04      	add	r7, sp, #16
 800c480:	61f8      	str	r0, [r7, #28]
 800c482:	61b9      	str	r1, [r7, #24]
 800c484:	617a      	str	r2, [r7, #20]
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of FAT entry reads and cache hits.  */
    media_ptr -> fx_media_fat_entry_reads++;
 800c486:	69fb      	ldr	r3, [r7, #28]
 800c488:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 800c48c:	1c5a      	adds	r2, r3, #1
 800c48e:	69fb      	ldr	r3, [r7, #28]
 800c490:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    media_ptr -> fx_media_fat_entry_cache_read_hits++;
 800c494:	69fb      	ldr	r3, [r7, #28]
 800c496:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800c49a:	1c5a      	adds	r2, r3, #1
 800c49c:	69fb      	ldr	r3, [r7, #28]
 800c49e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_FAT_ENTRY_READ_EXTENSION

    /* Calculate the area of the cache for this FAT entry.  */
    index =  (cluster & FX_FAT_CACHE_HASH_MASK) * FX_FAT_CACHE_DEPTH;
 800c4a2:	69bb      	ldr	r3, [r7, #24]
 800c4a4:	f003 0303 	and.w	r3, r3, #3
 800c4a8:	009b      	lsls	r3, r3, #2
 800c4aa:	647b      	str	r3, [r7, #68]	; 0x44

    /* Build a pointer to the cache entry.  */
    cache_entry_ptr =  &media_ptr -> fx_media_fat_cache[index];
 800c4ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4ae:	4613      	mov	r3, r2
 800c4b0:	005b      	lsls	r3, r3, #1
 800c4b2:	4413      	add	r3, r2
 800c4b4:	009b      	lsls	r3, r3, #2
 800c4b6:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800c4ba:	69fa      	ldr	r2, [r7, #28]
 800c4bc:	4413      	add	r3, r2
 800c4be:	643b      	str	r3, [r7, #64]	; 0x40

#ifndef FX_DISABLE_FAT_ENTRY_REFRESH
    /* Determine if the FAT entry is in the cache - assuming the depth of the FAT cache is
       4 entries.  */
    if ((cache_entry_ptr -> fx_fat_cache_entry_cluster) == cluster)
 800c4c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	69ba      	ldr	r2, [r7, #24]
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d105      	bne.n	800c4d6 <_fx_utility_FAT_entry_read+0x5e>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  cache_entry_ptr -> fx_fat_cache_entry_value;
 800c4ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4cc:	685a      	ldr	r2, [r3, #4]
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	601a      	str	r2, [r3, #0]

        /* Don't move anything since we found the entry.  */

        /* Return a successful status.  */
        return(FX_SUCCESS);
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	e1f4      	b.n	800c8c0 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 1) -> fx_fat_cache_entry_cluster) == cluster)
 800c4d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4d8:	330c      	adds	r3, #12
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	69ba      	ldr	r2, [r7, #24]
 800c4de:	429a      	cmp	r2, r3
 800c4e0:	d11d      	bne.n	800c51e <_fx_utility_FAT_entry_read+0xa6>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 1) -> fx_fat_cache_entry_value;
 800c4e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4e4:	330c      	adds	r3, #12
 800c4e6:	685a      	ldr	r2, [r3, #4]
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	601a      	str	r2, [r3, #0]

        /* Just swap the first and second entry.  */
        temp_cache_entry =        *(cache_entry_ptr);
 800c4ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c4ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4f2:	ca07      	ldmia	r2, {r0, r1, r2}
 800c4f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 1);
 800c4f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c4fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c4fc:	4614      	mov	r4, r2
 800c4fe:	330c      	adds	r3, #12
 800c500:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c504:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 800c508:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c50a:	330c      	adds	r3, #12
 800c50c:	461c      	mov	r4, r3
 800c50e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c512:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c516:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 800c51a:	2300      	movs	r3, #0
 800c51c:	e1d0      	b.n	800c8c0 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 2) -> fx_fat_cache_entry_cluster) == cluster)
 800c51e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c520:	3318      	adds	r3, #24
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	69ba      	ldr	r2, [r7, #24]
 800c526:	429a      	cmp	r2, r3
 800c528:	d127      	bne.n	800c57a <_fx_utility_FAT_entry_read+0x102>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 2) -> fx_fat_cache_entry_value;
 800c52a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c52c:	3318      	adds	r3, #24
 800c52e:	685a      	ldr	r2, [r3, #4]
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	601a      	str	r2, [r3, #0]

        /* Move the third entry to the top and the first two entries down.  */
        temp_cache_entry =        *(cache_entry_ptr);
 800c534:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c53a:	ca07      	ldmia	r2, {r0, r1, r2}
 800c53c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 2);
 800c540:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c544:	4614      	mov	r4, r2
 800c546:	3318      	adds	r3, #24
 800c548:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c54c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 800c550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c552:	f103 0218 	add.w	r2, r3, #24
 800c556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c558:	4614      	mov	r4, r2
 800c55a:	330c      	adds	r3, #12
 800c55c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c560:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 800c564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c566:	330c      	adds	r3, #12
 800c568:	461c      	mov	r4, r3
 800c56a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c56e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c572:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 800c576:	2300      	movs	r3, #0
 800c578:	e1a2      	b.n	800c8c0 <_fx_utility_FAT_entry_read+0x448>
    }
    else if (((cache_entry_ptr + 3) -> fx_fat_cache_entry_cluster) == cluster)
 800c57a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c57c:	3324      	adds	r3, #36	; 0x24
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	69ba      	ldr	r2, [r7, #24]
 800c582:	429a      	cmp	r2, r3
 800c584:	d131      	bne.n	800c5ea <_fx_utility_FAT_entry_read+0x172>
    {

        /* Yes, return the cached value.  */
        *entry_ptr =  (cache_entry_ptr + 3) -> fx_fat_cache_entry_value;
 800c586:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c588:	3324      	adds	r3, #36	; 0x24
 800c58a:	685a      	ldr	r2, [r3, #4]
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	601a      	str	r2, [r3, #0]

        /* Move the last entry to the top and the first three entries down.  */
        temp_cache_entry =        *(cache_entry_ptr);
 800c590:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c596:	ca07      	ldmia	r2, {r0, r1, r2}
 800c598:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        *(cache_entry_ptr) =      *(cache_entry_ptr + 3);
 800c59c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c59e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5a0:	4614      	mov	r4, r2
 800c5a2:	3324      	adds	r3, #36	; 0x24
 800c5a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c5a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 800c5ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5ae:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c5b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5b4:	4614      	mov	r4, r2
 800c5b6:	3318      	adds	r3, #24
 800c5b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c5bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 800c5c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5c2:	f103 0218 	add.w	r2, r3, #24
 800c5c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5c8:	4614      	mov	r4, r2
 800c5ca:	330c      	adds	r3, #12
 800c5cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c5d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        *(cache_entry_ptr + 1) =  temp_cache_entry;
 800c5d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5d6:	330c      	adds	r3, #12
 800c5d8:	461c      	mov	r4, r3
 800c5da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5de:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c5e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}

        /* Return a successful status.  */
        return(FX_SUCCESS);
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	e16a      	b.n	800c8c0 <_fx_utility_FAT_entry_read+0x448>
    }
#endif /* FX_DISABLE_FAT_ENTRY_REFRESH */

    /* Determine if the oldest entry was modified, i.e. whether or not it is
       dirty.  */
    if (media_ptr -> fx_media_fat_cache[index + 3].fx_fat_cache_entry_dirty)
 800c5ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5ec:	1cda      	adds	r2, r3, #3
 800c5ee:	69f9      	ldr	r1, [r7, #28]
 800c5f0:	4613      	mov	r3, r2
 800c5f2:	005b      	lsls	r3, r3, #1
 800c5f4:	4413      	add	r3, r2
 800c5f6:	009b      	lsls	r3, r3, #2
 800c5f8:	440b      	add	r3, r1
 800c5fa:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d008      	beq.n	800c616 <_fx_utility_FAT_entry_read+0x19e>
    {

        /* Yes, the entry is dirty and needs to be flushed out.  */
        status = _fx_utility_FAT_flush(media_ptr);
 800c604:	69f8      	ldr	r0, [r7, #28]
 800c606:	f000 f960 	bl	800c8ca <_fx_utility_FAT_flush>
 800c60a:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Check for completion status.  */
        if (status != FX_SUCCESS)
 800c60c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d001      	beq.n	800c616 <_fx_utility_FAT_entry_read+0x19e>
        {

            /* Return error status.  */
            return(status);
 800c612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c614:	e154      	b.n	800c8c0 <_fx_utility_FAT_entry_read+0x448>
       actually read the FAT entry.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Decrement the number of cache hits.  */
    media_ptr -> fx_media_fat_entry_cache_read_hits--;
 800c616:	69fb      	ldr	r3, [r7, #28]
 800c618:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800c61c:	1e5a      	subs	r2, r3, #1
 800c61e:	69fb      	ldr	r3, [r7, #28]
 800c620:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

    /* Increment the number of cache misses.  */
    media_ptr -> fx_media_fat_entry_cache_read_misses++;
 800c624:	69fb      	ldr	r3, [r7, #28]
 800c626:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800c62a:	1c5a      	adds	r2, r3, #1
 800c62c:	69fb      	ldr	r3, [r7, #28]
 800c62e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
#endif

    /* Determine which type of FAT is present.  */
    if (media_ptr -> fx_media_12_bit_FAT)
 800c632:	69fb      	ldr	r3, [r7, #28]
 800c634:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c636:	2b00      	cmp	r3, #0
 800c638:	f000 80a7 	beq.w	800c78a <_fx_utility_FAT_entry_read+0x312>
    {

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 800c63c:	69bb      	ldr	r3, [r7, #24]
 800c63e:	005a      	lsls	r2, r3, #1
 800c640:	69bb      	ldr	r3, [r7, #24]
 800c642:	4413      	add	r3, r2
 800c644:	085b      	lsrs	r3, r3, #1
 800c646:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800c648:	69fb      	ldr	r3, [r7, #28]
 800c64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c64c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c64e:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 800c652:	69fb      	ldr	r3, [r7, #28]
 800c654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800c656:	4413      	add	r3, r2
 800c658:	637b      	str	r3, [r7, #52]	; 0x34

        /* Read the sector in.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800c65a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c65c:	2200      	movs	r2, #0
 800c65e:	60bb      	str	r3, [r7, #8]
 800c660:	60fa      	str	r2, [r7, #12]
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800c662:	69fb      	ldr	r3, [r7, #28]
 800c664:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800c666:	2202      	movs	r2, #2
 800c668:	9202      	str	r2, [sp, #8]
 800c66a:	2201      	movs	r2, #1
 800c66c:	9201      	str	r2, [sp, #4]
 800c66e:	9300      	str	r3, [sp, #0]
 800c670:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c674:	69f8      	ldr	r0, [r7, #28]
 800c676:	f001 fa19 	bl	800daac <_fx_utility_logical_sector_read>
 800c67a:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800c67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d001      	beq.n	800c686 <_fx_utility_FAT_entry_read+0x20e>
        {
            /* Return the error status.  */
            return(status);
 800c682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c684:	e11c      	b.n	800c8c0 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800c686:	69fb      	ldr	r3, [r7, #28]
 800c688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c68a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c68c:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 800c68e:	69fa      	ldr	r2, [r7, #28]
 800c690:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800c692:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 800c696:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c698:	1ad3      	subs	r3, r2, r3
 800c69a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800c69c:	69fb      	ldr	r3, [r7, #28]
 800c69e:	689a      	ldr	r2, [r3, #8]
 800c6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a2:	4413      	add	r3, r2
 800c6a4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Determine if the cluster entry is odd or even.  */
        if (cluster & 1)
 800c6a6:	69bb      	ldr	r3, [r7, #24]
 800c6a8:	f003 0301 	and.w	r3, r3, #1
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d030      	beq.n	800c712 <_fx_utility_FAT_entry_read+0x29a>
        {

            /* Odd cluster number.  */

            /* Pickup the lower nibble of the FAT entry.  */
            entry =  (((UINT)*FAT_ptr) & 0xF0) >> 4;
 800c6b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6b2:	781b      	ldrb	r3, [r3, #0]
 800c6b4:	091b      	lsrs	r3, r3, #4
 800c6b6:	b2db      	uxtb	r3, r3
 800c6b8:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Move to the next byte of the FAT entry.  */
            FAT_ptr++;
 800c6ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6bc:	3301      	adds	r3, #1
 800c6be:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if we are now past the end of the FAT buffer in memory.  */
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 800c6c0:	69fb      	ldr	r3, [r7, #28]
 800c6c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6c4:	3b01      	subs	r3, #1
 800c6c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d11b      	bne.n	800c704 <_fx_utility_FAT_entry_read+0x28c>
            {

                /* Yes, we need to read the next sector.  */
                FAT_sector++;
 800c6cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	637b      	str	r3, [r7, #52]	; 0x34
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800c6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	603b      	str	r3, [r7, #0]
 800c6d8:	607a      	str	r2, [r7, #4]
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800c6da:	69fb      	ldr	r3, [r7, #28]
 800c6dc:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800c6de:	2202      	movs	r2, #2
 800c6e0:	9202      	str	r2, [sp, #8]
 800c6e2:	2201      	movs	r2, #1
 800c6e4:	9201      	str	r2, [sp, #4]
 800c6e6:	9300      	str	r3, [sp, #0]
 800c6e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6ec:	69f8      	ldr	r0, [r7, #28]
 800c6ee:	f001 f9dd 	bl	800daac <_fx_utility_logical_sector_read>
 800c6f2:	63f8      	str	r0, [r7, #60]	; 0x3c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800c6f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d001      	beq.n	800c6fe <_fx_utility_FAT_entry_read+0x286>
                {

                    /* Return the error status.  */
                    return(status);
 800c6fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6fc:	e0e0      	b.n	800c8c0 <_fx_utility_FAT_entry_read+0x448>
                }

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800c6fe:	69fb      	ldr	r3, [r7, #28]
 800c700:	689b      	ldr	r3, [r3, #8]
 800c702:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Pickup the upper 8 bits of the FAT entry.  */
            entry =  entry | (((UINT)*FAT_ptr) << 4);
 800c704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	011b      	lsls	r3, r3, #4
 800c70a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c70c:	4313      	orrs	r3, r2
 800c70e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c710:	e02f      	b.n	800c772 <_fx_utility_FAT_entry_read+0x2fa>
        {

            /* Even cluster number.  */

            /* Pickup the lower byte of the FAT entry.  */
            entry =  (UINT)(((UINT)*FAT_ptr) & 0xFF);
 800c712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c714:	781b      	ldrb	r3, [r3, #0]
 800c716:	64bb      	str	r3, [r7, #72]	; 0x48

            /* Move to the next nibble of the FAT entry.  */
            FAT_ptr++;
 800c718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c71a:	3301      	adds	r3, #1
 800c71c:	64fb      	str	r3, [r7, #76]	; 0x4c

            /* Determine if we are now past the end of the FAT buffer in memory.  */
            if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 800c71e:	69fb      	ldr	r3, [r7, #28]
 800c720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c722:	3b01      	subs	r3, #1
 800c724:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c726:	429a      	cmp	r2, r3
 800c728:	d11b      	bne.n	800c762 <_fx_utility_FAT_entry_read+0x2ea>
            {

                /* Yes, we need to read the next sector.  */
                FAT_sector++;
 800c72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c72c:	3301      	adds	r3, #1
 800c72e:	637b      	str	r3, [r7, #52]	; 0x34
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800c730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c732:	2200      	movs	r2, #0
 800c734:	469a      	mov	sl, r3
 800c736:	4693      	mov	fp, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800c738:	69fb      	ldr	r3, [r7, #28]
 800c73a:	689b      	ldr	r3, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800c73c:	2202      	movs	r2, #2
 800c73e:	9202      	str	r2, [sp, #8]
 800c740:	2201      	movs	r2, #1
 800c742:	9201      	str	r2, [sp, #4]
 800c744:	9300      	str	r3, [sp, #0]
 800c746:	4652      	mov	r2, sl
 800c748:	465b      	mov	r3, fp
 800c74a:	69f8      	ldr	r0, [r7, #28]
 800c74c:	f001 f9ae 	bl	800daac <_fx_utility_logical_sector_read>
 800c750:	63f8      	str	r0, [r7, #60]	; 0x3c

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800c752:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c754:	2b00      	cmp	r3, #0
 800c756:	d001      	beq.n	800c75c <_fx_utility_FAT_entry_read+0x2e4>
                {
                    return(status);
 800c758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c75a:	e0b1      	b.n	800c8c0 <_fx_utility_FAT_entry_read+0x448>
                }

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	689b      	ldr	r3, [r3, #8]
 800c760:	64fb      	str	r3, [r7, #76]	; 0x4c
            }

            /* Pickup the upper 4 bits of the FAT entry.  */
            entry =  entry | ((((UINT)*FAT_ptr) & 0x0F) << 8);
 800c762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	021b      	lsls	r3, r3, #8
 800c768:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c76c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c76e:	4313      	orrs	r3, r2
 800c770:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        /* Determine if we need to do sign extension on the 12-bit eof value.  */
        if (entry >= FX_MAX_12BIT_CLUST)
 800c772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c774:	f5b3 6f7f 	cmp.w	r3, #4080	; 0xff0
 800c778:	d303      	bcc.n	800c782 <_fx_utility_FAT_entry_read+0x30a>
        {

            /* Yes, we need to sign extend.  */
            entry =  entry | FX_SIGN_EXTEND;
 800c77a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c77c:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 800c780:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        *entry_ptr =  entry;
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c786:	601a      	str	r2, [r3, #0]
 800c788:	e078      	b.n	800c87c <_fx_utility_FAT_entry_read+0x404>

    /* Check for a 16-bit FAT.  */
#ifdef FX_ENABLE_EXFAT
    else if (FX_FAT16  == media_ptr -> fx_media_FAT_type)
#else
    else if (!media_ptr -> fx_media_32_bit_FAT)
 800c78a:	69fb      	ldr	r3, [r7, #28]
 800c78c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d139      	bne.n	800c806 <_fx_utility_FAT_entry_read+0x38e>
    {

        /* 16-bit FAT is present.  */

        /* Calculate the byte offset to the cluster entry.  */
        byte_offset =  (((ULONG)cluster) * 2);
 800c792:	69bb      	ldr	r3, [r7, #24]
 800c794:	005b      	lsls	r3, r3, #1
 800c796:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c79c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c79e:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 800c7a2:	69fb      	ldr	r3, [r7, #28]
 800c7a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800c7a6:	4413      	add	r3, r2
 800c7a8:	637b      	str	r3, [r7, #52]	; 0x34

        /* Read the FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800c7aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	4698      	mov	r8, r3
 800c7b0:	4691      	mov	r9, r2
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800c7b6:	2202      	movs	r2, #2
 800c7b8:	9202      	str	r2, [sp, #8]
 800c7ba:	2201      	movs	r2, #1
 800c7bc:	9201      	str	r2, [sp, #4]
 800c7be:	9300      	str	r3, [sp, #0]
 800c7c0:	4642      	mov	r2, r8
 800c7c2:	464b      	mov	r3, r9
 800c7c4:	69f8      	ldr	r0, [r7, #28]
 800c7c6:	f001 f971 	bl	800daac <_fx_utility_logical_sector_read>
 800c7ca:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800c7cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d001      	beq.n	800c7d6 <_fx_utility_FAT_entry_read+0x35e>
        {

            /* Return the error code.  */
            return(status);
 800c7d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7d4:	e074      	b.n	800c8c0 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Now calculate the byte offset into this FAT sector.  */
        byte_offset =  byte_offset -
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800c7d6:	69fb      	ldr	r3, [r7, #28]
 800c7d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7dc:	1ad3      	subs	r3, r2, r3
             media_ptr -> fx_media_bytes_per_sector);
 800c7de:	69fa      	ldr	r2, [r7, #28]
 800c7e0:	6a92      	ldr	r2, [r2, #40]	; 0x28
            ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800c7e2:	fb02 f303 	mul.w	r3, r2, r3
        byte_offset =  byte_offset -
 800c7e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7e8:	1ad3      	subs	r3, r2, r3
 800c7ea:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800c7ec:	69fb      	ldr	r3, [r7, #28]
 800c7ee:	689a      	ldr	r2, [r3, #8]
 800c7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f2:	4413      	add	r3, r2
 800c7f4:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the FAT entry.  */
        entry =  _fx_utility_16_unsigned_read(FAT_ptr);
 800c7f6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c7f8:	f7ff fdd8 	bl	800c3ac <_fx_utility_16_unsigned_read>
 800c7fc:	64b8      	str	r0, [r7, #72]	; 0x48

        *entry_ptr =  entry;
 800c7fe:	697b      	ldr	r3, [r7, #20]
 800c800:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c802:	601a      	str	r2, [r3, #0]
 800c804:	e03a      	b.n	800c87c <_fx_utility_FAT_entry_read+0x404>
    else
#endif /* FX_ENABLE_EXFAT */
    {

        /* Otherwise, a 32 bit FAT present.  */
        byte_offset =  (((ULONG)cluster) * 4);
 800c806:	69bb      	ldr	r3, [r7, #24]
 800c808:	009b      	lsls	r3, r3, #2
 800c80a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Calculate the FAT sector the requested FAT entry resides in.  */
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800c80c:	69fb      	ldr	r3, [r7, #28]
 800c80e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c810:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c812:	fbb2 f2f3 	udiv	r2, r2, r3
            (ULONG)media_ptr -> fx_media_reserved_sectors;
 800c816:	69fb      	ldr	r3, [r7, #28]
 800c818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800c81a:	4413      	add	r3, r2
 800c81c:	637b      	str	r3, [r7, #52]	; 0x34

        /* Calculate the byte offset to the FAT entry.  */
        byte_offset = (byte_offset % media_ptr -> fx_media_bytes_per_sector);
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c824:	fbb3 f1f2 	udiv	r1, r3, r2
 800c828:	fb01 f202 	mul.w	r2, r1, r2
 800c82c:	1a9b      	subs	r3, r3, r2
 800c82e:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Read the appropriate FAT sector.  */
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800c830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c832:	2200      	movs	r2, #0
 800c834:	461c      	mov	r4, r3
 800c836:	4615      	mov	r5, r2
                                                  media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800c838:	69fb      	ldr	r3, [r7, #28]
 800c83a:	689b      	ldr	r3, [r3, #8]
        status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800c83c:	2202      	movs	r2, #2
 800c83e:	9202      	str	r2, [sp, #8]
 800c840:	2201      	movs	r2, #1
 800c842:	9201      	str	r2, [sp, #4]
 800c844:	9300      	str	r3, [sp, #0]
 800c846:	4622      	mov	r2, r4
 800c848:	462b      	mov	r3, r5
 800c84a:	69f8      	ldr	r0, [r7, #28]
 800c84c:	f001 f92e 	bl	800daac <_fx_utility_logical_sector_read>
 800c850:	63f8      	str	r0, [r7, #60]	; 0x3c

        /* Determine if an error occurred.  */
        if (status != FX_SUCCESS)
 800c852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c854:	2b00      	cmp	r3, #0
 800c856:	d001      	beq.n	800c85c <_fx_utility_FAT_entry_read+0x3e4>
        {

            /* Return the error code.  */
            return(status);
 800c858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c85a:	e031      	b.n	800c8c0 <_fx_utility_FAT_entry_read+0x448>
        }

        /* Setup a pointer into the buffer.  */
        FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (ULONG)byte_offset;
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	689a      	ldr	r2, [r3, #8]
 800c860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c862:	4413      	add	r3, r2
 800c864:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Pickup the FAT entry.  */
        entry32 =  _fx_utility_32_unsigned_read(FAT_ptr);
 800c866:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c868:	f7ff fdc8 	bl	800c3fc <_fx_utility_32_unsigned_read>
 800c86c:	6338      	str	r0, [r7, #48]	; 0x30
        if (media_ptr -> fx_media_FAT_type == FX_FAT32)
        {
#endif /* FX_ENABLE_EXFAT */

            /* Clear upper nibble.  */
            entry32 = entry32 & 0x0FFFFFFF;
 800c86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c870:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c874:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef FX_ENABLE_EXFAT
        }
#endif /* FX_ENABLE_EXFAT */

        *entry_ptr =  entry32;
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c87a:	601a      	str	r2, [r3, #0]
    }

    /* Move all the cache entries down so the oldest is at the bottom.  */
    *(cache_entry_ptr + 3) =  *(cache_entry_ptr + 2);
 800c87c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c87e:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800c882:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c884:	4614      	mov	r4, r2
 800c886:	3318      	adds	r3, #24
 800c888:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c88c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 2) =  *(cache_entry_ptr + 1);
 800c890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c892:	f103 0218 	add.w	r2, r3, #24
 800c896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c898:	4614      	mov	r4, r2
 800c89a:	330c      	adds	r3, #12
 800c89c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c8a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    *(cache_entry_ptr + 1) =  *(cache_entry_ptr);
 800c8a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8a6:	330c      	adds	r3, #12
 800c8a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c8aa:	ca07      	ldmia	r2, {r0, r1, r2}
 800c8ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    /* Setup the new FAT entry in the cache.  */
    cache_entry_ptr -> fx_fat_cache_entry_cluster =  cluster;
 800c8b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8b2:	69ba      	ldr	r2, [r7, #24]
 800c8b4:	601a      	str	r2, [r3, #0]
    cache_entry_ptr -> fx_fat_cache_entry_value   =  *entry_ptr;
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8bc:	605a      	str	r2, [r3, #4]

    /* Return success to the caller.  */
    return(FX_SUCCESS);
 800c8be:	2300      	movs	r3, #0
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3750      	adds	r7, #80	; 0x50
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c8ca <_fx_utility_FAT_flush>:
/*                                            FAT secondary update map,   */
/*                                            resulting in version 6.1.2  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_flush(FX_MEDIA *media_ptr)
{
 800c8ca:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c8ce:	b09a      	sub	sp, #104	; 0x68
 800c8d0:	af04      	add	r7, sp, #16
 800c8d2:	61f8      	str	r0, [r7, #28]
INT    multi_sector_entry;
ULONG  sector;

#ifndef FX_MEDIA_STATISTICS_DISABLE
    /* Increment the number of cache flush requests.  */
    media_ptr -> fx_media_fat_cache_flushes++;
 800c8d4:	69fb      	ldr	r3, [r7, #28]
 800c8d6:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800c8da:	1c5a      	adds	r2, r3, #1
 800c8dc:	69fb      	ldr	r3, [r7, #28]
 800c8de:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
#endif

    /* Loop through the media's FAT cache and flush out dirty entries.  */
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c8e6:	e337      	b.n	800cf58 <_fx_utility_FAT_flush+0x68e>
    {

        /* Determine if the entry is dirty.  */
        if ((media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_dirty) == 0)
 800c8e8:	69f9      	ldr	r1, [r7, #28]
 800c8ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c8ec:	4613      	mov	r3, r2
 800c8ee:	005b      	lsls	r3, r3, #1
 800c8f0:	4413      	add	r3, r2
 800c8f2:	009b      	lsls	r3, r3, #2
 800c8f4:	440b      	add	r3, r1
 800c8f6:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	f000 8325 	beq.w	800cf4c <_fx_utility_FAT_flush+0x682>

        /* Otherwise, the entry is indeed dirty and must be flushed out.  Process
           relative to the type of FAT that is being used.  */

        /* Pickup the contents of the FAT cache entry.  */
        cluster =       media_ptr -> fx_media_fat_cache[index].fx_fat_cache_entry_cluster;
 800c902:	69f9      	ldr	r1, [r7, #28]
 800c904:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c906:	4613      	mov	r3, r2
 800c908:	005b      	lsls	r3, r3, #1
 800c90a:	4413      	add	r3, r2
 800c90c:	009b      	lsls	r3, r3, #2
 800c90e:	440b      	add	r3, r1
 800c910:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	643b      	str	r3, [r7, #64]	; 0x40

        /* Determine which type of FAT is present.  */
#ifdef FX_ENABLE_EXFAT
        if (media_ptr -> fx_media_FAT_type == FX_FAT12)
#else
        if (media_ptr -> fx_media_12_bit_FAT)
 800c918:	69fb      	ldr	r3, [r7, #28]
 800c91a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f000 816c 	beq.w	800cbfa <_fx_utility_FAT_flush+0x330>
#endif /* FX_ENABLE_EXFAT */
        {

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 800c922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c924:	005a      	lsls	r2, r3, #1
 800c926:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c928:	4413      	add	r3, r2
 800c92a:	085b      	lsrs	r3, r3, #1
 800c92c:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800c92e:	69fb      	ldr	r3, [r7, #28]
 800c930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c932:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c934:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 800c938:	69fb      	ldr	r3, [r7, #28]
 800c93a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800c93c:	4413      	add	r3, r2
 800c93e:	657b      	str	r3, [r7, #84]	; 0x54

            /* Initialize as not written.  */
            multi_sector_entry = -1;
 800c940:	f04f 33ff 	mov.w	r3, #4294967295
 800c944:	647b      	str	r3, [r7, #68]	; 0x44

            for (;;)
            {

                /* Pickup the FAT sector.  */
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800c946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c948:	2200      	movs	r2, #0
 800c94a:	461c      	mov	r4, r3
 800c94c:	4615      	mov	r5, r2
                                                          media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800c94e:	69fb      	ldr	r3, [r7, #28]
 800c950:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800c952:	2302      	movs	r3, #2
 800c954:	9302      	str	r3, [sp, #8]
 800c956:	2301      	movs	r3, #1
 800c958:	9301      	str	r3, [sp, #4]
 800c95a:	9200      	str	r2, [sp, #0]
 800c95c:	4622      	mov	r2, r4
 800c95e:	462b      	mov	r3, r5
 800c960:	69f8      	ldr	r0, [r7, #28]
 800c962:	f001 f8a3 	bl	800daac <_fx_utility_logical_sector_read>
 800c966:	63b8      	str	r0, [r7, #56]	; 0x38

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800c968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d001      	beq.n	800c972 <_fx_utility_FAT_flush+0xa8>
                {

                    /* Return the error status.  */
                    return(status);
 800c96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c970:	e2f7      	b.n	800cf62 <_fx_utility_FAT_flush+0x698>
                }

                /* Determine if a mulit-sector FAT update is present.  */
                if (multi_sector_entry != -1)
 800c972:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c974:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c978:	d037      	beq.n	800c9ea <_fx_utility_FAT_flush+0x120>

                    /* Yes, store the remaining portion of the new FAT entry in the
                       next FAT sector.  */

                    /* Setup a pointer into the buffer.  */
                    FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer;
 800c97a:	69fb      	ldr	r3, [r7, #28]
 800c97c:	689b      	ldr	r3, [r3, #8]
 800c97e:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Pickup the cluster and next cluster.  */
                    cluster = (media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_cluster);
 800c980:	69f9      	ldr	r1, [r7, #28]
 800c982:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c984:	4613      	mov	r3, r2
 800c986:	005b      	lsls	r3, r3, #1
 800c988:	4413      	add	r3, r2
 800c98a:	009b      	lsls	r3, r3, #2
 800c98c:	440b      	add	r3, r1
 800c98e:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	643b      	str	r3, [r7, #64]	; 0x40
                    next_cluster = media_ptr -> fx_media_fat_cache[multi_sector_entry].fx_fat_cache_entry_value;
 800c996:	69f9      	ldr	r1, [r7, #28]
 800c998:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c99a:	4613      	mov	r3, r2
 800c99c:	005b      	lsls	r3, r3, #1
 800c99e:	4413      	add	r3, r2
 800c9a0:	009b      	lsls	r3, r3, #2
 800c9a2:	440b      	add	r3, r1
 800c9a4:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Determine if the cluster entry is odd or even.  */
                    if (cluster & 1)
 800c9ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c9ae:	f003 0301 	and.w	r3, r3, #1
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d005      	beq.n	800c9c2 <_fx_utility_FAT_flush+0xf8>
                    {

                        /* Store the upper 8 bits of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 800c9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9b8:	091b      	lsrs	r3, r3, #4
 800c9ba:	b2db      	uxtb	r3, r3
 800c9bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9be:	7013      	strb	r3, [r2, #0]
 800c9c0:	e010      	b.n	800c9e4 <_fx_utility_FAT_flush+0x11a>
                    }
                    else
                    {

                        /* Store the upper 4 bits of the FAT entry.  */
                        temp =  ((UINT)*FAT_ptr) & 0xF0;
 800c9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c9ca:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 800c9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ce:	b2da      	uxtb	r2, r3
 800c9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d2:	0a1b      	lsrs	r3, r3, #8
 800c9d4:	b2db      	uxtb	r3, r3
 800c9d6:	f003 030f 	and.w	r3, r3, #15
 800c9da:	b2db      	uxtb	r3, r3
 800c9dc:	4313      	orrs	r3, r2
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9e2:	7013      	strb	r3, [r2, #0]
                    }

                    /* Clear the multi-sector flag.  */
                    multi_sector_entry = -1;
 800c9e4:	f04f 33ff 	mov.w	r3, #4294967295
 800c9e8:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Loop through the remainder of the cache to check for multiple entries
                   within the same FAT sector being written out.  */
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 800c9ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9ec:	653b      	str	r3, [r7, #80]	; 0x50
 800c9ee:	e0a0      	b.n	800cb32 <_fx_utility_FAT_flush+0x268>
                {

                    /* Is the cache entry dirty?  */
                    if ((media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty) == 0)
 800c9f0:	69f9      	ldr	r1, [r7, #28]
 800c9f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c9f4:	4613      	mov	r3, r2
 800c9f6:	005b      	lsls	r3, r3, #1
 800c9f8:	4413      	add	r3, r2
 800c9fa:	009b      	lsls	r3, r3, #2
 800c9fc:	440b      	add	r3, r1
 800c9fe:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	f000 808a 	beq.w	800cb1e <_fx_utility_FAT_flush+0x254>
                        /* Not dirty, does not need to be flushed.  */
                        continue;
                    }

                    /* Isolate the cluster.  */
                    cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 800ca0a:	69f9      	ldr	r1, [r7, #28]
 800ca0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ca0e:	4613      	mov	r3, r2
 800ca10:	005b      	lsls	r3, r3, #1
 800ca12:	4413      	add	r3, r2
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	440b      	add	r3, r1
 800ca18:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	643b      	str	r3, [r7, #64]	; 0x40

                    /* Calculate the byte offset to the cluster entry.  */
                    byte_offset =  (((ULONG)cluster << 1) + cluster) >> 1;
 800ca20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca22:	005a      	lsls	r2, r3, #1
 800ca24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ca26:	4413      	add	r3, r2
 800ca28:	085b      	lsrs	r3, r3, #1
 800ca2a:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Pickup the sector.  */
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800ca2c:	69fb      	ldr	r3, [r7, #28]
 800ca2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca32:	fbb2 f2f3 	udiv	r2, r2, r3
                        (ULONG)media_ptr -> fx_media_reserved_sectors;
 800ca36:	69fb      	ldr	r3, [r7, #28]
 800ca38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                    sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800ca3a:	4413      	add	r3, r2
 800ca3c:	633b      	str	r3, [r7, #48]	; 0x30

                    /* Is it the current FAT sector?  */
                    if (sector != FAT_sector)
 800ca3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d16d      	bne.n	800cb22 <_fx_utility_FAT_flush+0x258>
                        /* Different FAT sector - not in this pass of the loop.  */
                        continue;
                    }

                    /* Pickup new value for this FAT entry.  */
                    next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 800ca46:	69f9      	ldr	r1, [r7, #28]
 800ca48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ca4a:	4613      	mov	r3, r2
 800ca4c:	005b      	lsls	r3, r3, #1
 800ca4e:	4413      	add	r3, r2
 800ca50:	009b      	lsls	r3, r3, #2
 800ca52:	440b      	add	r3, r1
 800ca54:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	62bb      	str	r3, [r7, #40]	; 0x28

                    /* Now calculate the byte offset into this FAT sector.  */
                    byte_offset =  byte_offset -
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800ca5c:	69fb      	ldr	r3, [r7, #28]
 800ca5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ca62:	1ad2      	subs	r2, r2, r3
                         media_ptr -> fx_media_bytes_per_sector);
 800ca64:	69fb      	ldr	r3, [r7, #28]
 800ca66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                        ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800ca68:	fb02 f303 	mul.w	r3, r2, r3
                    byte_offset =  byte_offset -
 800ca6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca6e:	1ad3      	subs	r3, r2, r3
 800ca70:	63fb      	str	r3, [r7, #60]	; 0x3c

                    /* Determine if we are now past the end of the FAT buffer in memory.  */
                    if (byte_offset == (ULONG)(media_ptr -> fx_media_bytes_per_sector - 1))
 800ca72:	69fb      	ldr	r3, [r7, #28]
 800ca74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca76:	3b01      	subs	r3, #1
 800ca78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ca7a:	429a      	cmp	r2, r3
 800ca7c:	d101      	bne.n	800ca82 <_fx_utility_FAT_flush+0x1b8>
                    {

                        /* Yes, we need to read the next sector */
                        multi_sector_entry = (INT)i;
 800ca7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca80:	647b      	str	r3, [r7, #68]	; 0x44
                    }

                    /* Setup a pointer into the buffer.  */
                    FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800ca82:	69fb      	ldr	r3, [r7, #28]
 800ca84:	689a      	ldr	r2, [r3, #8]
 800ca86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ca88:	4413      	add	r3, r2
 800ca8a:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Clear the dirty flag.  */
                    media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 800ca8c:	69f9      	ldr	r1, [r7, #28]
 800ca8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ca90:	4613      	mov	r3, r2
 800ca92:	005b      	lsls	r3, r3, #1
 800ca94:	4413      	add	r3, r2
 800ca96:	009b      	lsls	r3, r3, #2
 800ca98:	440b      	add	r3, r1
 800ca9a:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800ca9e:	2200      	movs	r2, #0
 800caa0:	601a      	str	r2, [r3, #0]

                    /* Determine if the cluster entry is odd or even.  */
                    if (cluster & 1)
 800caa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caa4:	f003 0301 	and.w	r3, r3, #1
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d01b      	beq.n	800cae4 <_fx_utility_FAT_flush+0x21a>
                        /* Odd cluster number.  */

                        /* Pickup the upper nibble of the FAT entry.  */

                        /* First, set the lower nibble of the FAT entry.  */
                        temp =      (((UINT)*FAT_ptr) & 0x0F);
 800caac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	f003 030f 	and.w	r3, r3, #15
 800cab4:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster << 4) & 0xF0));
 800cab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab8:	b2da      	uxtb	r2, r3
 800caba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cabc:	b2db      	uxtb	r3, r3
 800cabe:	011b      	lsls	r3, r3, #4
 800cac0:	b2db      	uxtb	r3, r3
 800cac2:	4313      	orrs	r3, r2
 800cac4:	b2db      	uxtb	r3, r3
 800cac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cac8:	7013      	strb	r3, [r2, #0]

                        /* Determine if this is a mulit-sector entry.  */
                        if ((multi_sector_entry) == (INT)i)
 800caca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cacc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cace:	429a      	cmp	r2, r3
 800cad0:	d029      	beq.n	800cb26 <_fx_utility_FAT_flush+0x25c>
                            /* Yes, requires multiple sector - will write rest of the part later.  */
                            continue;
                        }

                        /* Move to the next byte of the FAT entry.  */
                        FAT_ptr++;
 800cad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad4:	3301      	adds	r3, #1
 800cad6:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Store the upper 8 bits of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)((next_cluster >> 4) & 0xFF);
 800cad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cada:	091b      	lsrs	r3, r3, #4
 800cadc:	b2db      	uxtb	r3, r3
 800cade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cae0:	7013      	strb	r3, [r2, #0]
 800cae2:	e023      	b.n	800cb2c <_fx_utility_FAT_flush+0x262>
                    {

                        /* Even cluster number.  */

                        /* Store the lower byte of the FAT entry.  */
                        *FAT_ptr =  (UCHAR)(next_cluster & 0xFF);
 800cae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cae6:	b2db      	uxtb	r3, r3
 800cae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800caea:	7013      	strb	r3, [r2, #0]

                        /* Determine if this is a mulit-sector entry.  */
                        if ((multi_sector_entry) == (INT)i)
 800caec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800caf0:	429a      	cmp	r2, r3
 800caf2:	d01a      	beq.n	800cb2a <_fx_utility_FAT_flush+0x260>
                            /* Yes, requires multiple sector - will write rest of the part later.  */
                            continue;
                        }

                        /* Move to the next nibble of the FAT entry.  */
                        FAT_ptr++;
 800caf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf6:	3301      	adds	r3, #1
 800caf8:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Store the upper 4 bits of the FAT entry.  */
                        temp =  ((UINT)*FAT_ptr) & 0xF0;
 800cafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cafc:	781b      	ldrb	r3, [r3, #0]
 800cafe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb02:	627b      	str	r3, [r7, #36]	; 0x24
                        *FAT_ptr =  (UCHAR)(temp | ((next_cluster >> 8) & 0xF));
 800cb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb06:	b2da      	uxtb	r2, r3
 800cb08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb0a:	0a1b      	lsrs	r3, r3, #8
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	f003 030f 	and.w	r3, r3, #15
 800cb12:	b2db      	uxtb	r3, r3
 800cb14:	4313      	orrs	r3, r2
 800cb16:	b2db      	uxtb	r3, r3
 800cb18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb1a:	7013      	strb	r3, [r2, #0]
 800cb1c:	e006      	b.n	800cb2c <_fx_utility_FAT_flush+0x262>
                        continue;
 800cb1e:	bf00      	nop
 800cb20:	e004      	b.n	800cb2c <_fx_utility_FAT_flush+0x262>
                        continue;
 800cb22:	bf00      	nop
 800cb24:	e002      	b.n	800cb2c <_fx_utility_FAT_flush+0x262>
                            continue;
 800cb26:	bf00      	nop
 800cb28:	e000      	b.n	800cb2c <_fx_utility_FAT_flush+0x262>
                            continue;
 800cb2a:	bf00      	nop
                for (i = index; i < FX_MAX_FAT_CACHE; i++)
 800cb2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb2e:	3301      	adds	r3, #1
 800cb30:	653b      	str	r3, [r7, #80]	; 0x50
 800cb32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb34:	2b0f      	cmp	r3, #15
 800cb36:	f67f af5b 	bls.w	800c9f0 <_fx_utility_FAT_flush+0x126>
                    }
                }

                /* First, write out the current sector. */
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 800cb3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	4698      	mov	r8, r3
 800cb40:	4691      	mov	r9, r2
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800cb42:	69fb      	ldr	r3, [r7, #28]
 800cb44:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 800cb46:	2302      	movs	r3, #2
 800cb48:	9302      	str	r3, [sp, #8]
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	9301      	str	r3, [sp, #4]
 800cb4e:	9200      	str	r2, [sp, #0]
 800cb50:	4642      	mov	r2, r8
 800cb52:	464b      	mov	r3, r9
 800cb54:	69f8      	ldr	r0, [r7, #28]
 800cb56:	f001 fa3d 	bl	800dfd4 <_fx_utility_logical_sector_write>
 800cb5a:	63b8      	str	r0, [r7, #56]	; 0x38
                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800cb5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d001      	beq.n	800cb66 <_fx_utility_FAT_flush+0x29c>
                {

                    /* Return the error status.  */
                    return(status);
 800cb62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb64:	e1fd      	b.n	800cf62 <_fx_utility_FAT_flush+0x698>
                }

                /* Mark the FAT sector update bit map to indicate this sector has been written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 800cb66:	69fb      	ldr	r3, [r7, #28]
 800cb68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d105      	bne.n	800cb7e <_fx_utility_FAT_flush+0x2b4>
                {
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 800cb72:	69fb      	ldr	r3, [r7, #28]
 800cb74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb76:	0a9b      	lsrs	r3, r3, #10
 800cb78:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800cb7c:	e006      	b.n	800cb8c <_fx_utility_FAT_flush+0x2c2>
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((UINT)media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 800cb7e:	69fb      	ldr	r3, [r7, #28]
 800cb80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb82:	0a9b      	lsrs	r3, r3, #10
 800cb84:	b2db      	uxtb	r3, r3
 800cb86:	3301      	adds	r3, #1
 800cb88:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                }

                /* Check for invalid value.  */
                if (sectors_per_bit == 0)
 800cb8c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d101      	bne.n	800cb98 <_fx_utility_FAT_flush+0x2ce>
                {

                    /* Invalid media, return error.  */
                    return(FX_MEDIA_INVALID);
 800cb94:	2302      	movs	r3, #2
 800cb96:	e1e4      	b.n	800cf62 <_fx_utility_FAT_flush+0x698>
                }

                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 800cb98:	69fb      	ldr	r3, [r7, #28]
 800cb9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cb9e:	1ad2      	subs	r2, r2, r3
 800cba0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800cba4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cba8:	08db      	lsrs	r3, r3, #3
 800cbaa:	637b      	str	r3, [r7, #52]	; 0x34
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 800cbac:	69fa      	ldr	r2, [r7, #28]
 800cbae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbb0:	4413      	add	r3, r2
 800cbb2:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800cbb6:	781b      	ldrb	r3, [r3, #0]
 800cbb8:	b259      	sxtb	r1, r3
                    | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 800cbba:	69fb      	ldr	r3, [r7, #28]
 800cbbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cbbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbc0:	1a9a      	subs	r2, r3, r2
 800cbc2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800cbc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbca:	f003 0207 	and.w	r2, r3, #7
 800cbce:	2301      	movs	r3, #1
 800cbd0:	4093      	lsls	r3, r2
 800cbd2:	b25b      	sxtb	r3, r3
 800cbd4:	430b      	orrs	r3, r1
 800cbd6:	b25b      	sxtb	r3, r3
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 800cbd8:	b2d9      	uxtb	r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 800cbda:	69fa      	ldr	r2, [r7, #28]
 800cbdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbde:	4413      	add	r3, r2
 800cbe0:	f603 0218 	addw	r2, r3, #2072	; 0x818
 800cbe4:	460b      	mov	r3, r1
 800cbe6:	7013      	strb	r3, [r2, #0]

                /* Determine if the multi-sector flag is set.  */
                if (multi_sector_entry != -1)
 800cbe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cbea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbee:	f000 81af 	beq.w	800cf50 <_fx_utility_FAT_flush+0x686>
                {

                    /* Yes, position to the next sector and read it in.  */
                    FAT_sector++;
 800cbf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	657b      	str	r3, [r7, #84]	; 0x54
                status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800cbf8:	e6a5      	b.n	800c946 <_fx_utility_FAT_flush+0x7c>
            }
        }
#ifdef FX_ENABLE_EXFAT
        else if (media_ptr -> fx_media_FAT_type == FX_FAT16)
#else
        else if (!media_ptr -> fx_media_32_bit_FAT)
 800cbfa:	69fb      	ldr	r3, [r7, #28]
 800cbfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	f040 80d2 	bne.w	800cda8 <_fx_utility_FAT_flush+0x4de>
        {

            /* 16-bit FAT is present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) << 1);
 800cc04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc06:	005b      	lsls	r3, r3, #1
 800cc08:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800cc0a:	69fb      	ldr	r3, [r7, #28]
 800cc0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc10:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 800cc14:	69fb      	ldr	r3, [r7, #28]
 800cc16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800cc18:	4413      	add	r3, r2
 800cc1a:	657b      	str	r3, [r7, #84]	; 0x54

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800cc1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc1e:	2200      	movs	r2, #0
 800cc20:	469a      	mov	sl, r3
 800cc22:	4693      	mov	fp, r2
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800cc24:	69fb      	ldr	r3, [r7, #28]
 800cc26:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800cc28:	2302      	movs	r3, #2
 800cc2a:	9302      	str	r3, [sp, #8]
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	9301      	str	r3, [sp, #4]
 800cc30:	9200      	str	r2, [sp, #0]
 800cc32:	4652      	mov	r2, sl
 800cc34:	465b      	mov	r3, fp
 800cc36:	69f8      	ldr	r0, [r7, #28]
 800cc38:	f000 ff38 	bl	800daac <_fx_utility_logical_sector_read>
 800cc3c:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 800cc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d001      	beq.n	800cc48 <_fx_utility_FAT_flush+0x37e>
            {

                /* Return the error status.  */
                return(status);
 800cc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc46:	e18c      	b.n	800cf62 <_fx_utility_FAT_flush+0x698>
            }

            /* Loop through the remainder of the cache to check for multiple entries
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 800cc48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cc4a:	653b      	str	r3, [r7, #80]	; 0x50
 800cc4c:	e057      	b.n	800ccfe <_fx_utility_FAT_flush+0x434>
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 800cc4e:	69f9      	ldr	r1, [r7, #28]
 800cc50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc52:	4613      	mov	r3, r2
 800cc54:	005b      	lsls	r3, r3, #1
 800cc56:	4413      	add	r3, r2
 800cc58:	009b      	lsls	r3, r3, #2
 800cc5a:	440b      	add	r3, r1
 800cc5c:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d045      	beq.n	800ccf2 <_fx_utility_FAT_flush+0x428>
                    /* Not dirty, does not need to be flushed.  */
                    continue;
                }

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 800cc66:	69f9      	ldr	r1, [r7, #28]
 800cc68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cc6a:	4613      	mov	r3, r2
 800cc6c:	005b      	lsls	r3, r3, #1
 800cc6e:	4413      	add	r3, r2
 800cc70:	009b      	lsls	r3, r3, #2
 800cc72:	440b      	add	r3, r1
 800cc74:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	643b      	str	r3, [r7, #64]	; 0x40

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 2);
 800cc7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc7e:	005b      	lsls	r3, r3, #1
 800cc80:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800cc82:	69fb      	ldr	r3, [r7, #28]
 800cc84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc88:	fbb2 f2f3 	udiv	r2, r2, r3
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 800cc8c:	69fb      	ldr	r3, [r7, #28]
 800cc8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800cc90:	4413      	add	r3, r2
 800cc92:	633b      	str	r3, [r7, #48]	; 0x30

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 800cc94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cc98:	429a      	cmp	r2, r3
 800cc9a:	d12c      	bne.n	800ccf6 <_fx_utility_FAT_flush+0x42c>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800cc9c:	69fb      	ldr	r3, [r7, #28]
 800cc9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cca0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cca2:	1ad2      	subs	r2, r2, r3
                     media_ptr -> fx_media_bytes_per_sector);
 800cca4:	69fb      	ldr	r3, [r7, #28]
 800cca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800cca8:	fb02 f303 	mul.w	r3, r2, r3
                byte_offset =  byte_offset -
 800ccac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ccae:	1ad3      	subs	r3, r2, r3
 800ccb0:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800ccb2:	69fb      	ldr	r3, [r7, #28]
 800ccb4:	689a      	ldr	r2, [r3, #8]
 800ccb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccb8:	4413      	add	r3, r2
 800ccba:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 800ccbc:	69f9      	ldr	r1, [r7, #28]
 800ccbe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ccc0:	4613      	mov	r3, r2
 800ccc2:	005b      	lsls	r3, r3, #1
 800ccc4:	4413      	add	r3, r2
 800ccc6:	009b      	lsls	r3, r3, #2
 800ccc8:	440b      	add	r3, r1
 800ccca:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Store the FAT entry.  */
                _fx_utility_16_unsigned_write(FAT_ptr, (UINT)next_cluster);
 800ccd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ccd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccd6:	f7ff fb7c 	bl	800c3d2 <_fx_utility_16_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 800ccda:	69f9      	ldr	r1, [r7, #28]
 800ccdc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ccde:	4613      	mov	r3, r2
 800cce0:	005b      	lsls	r3, r3, #1
 800cce2:	4413      	add	r3, r2
 800cce4:	009b      	lsls	r3, r3, #2
 800cce6:	440b      	add	r3, r1
 800cce8:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800ccec:	2200      	movs	r2, #0
 800ccee:	601a      	str	r2, [r3, #0]
 800ccf0:	e002      	b.n	800ccf8 <_fx_utility_FAT_flush+0x42e>
                    continue;
 800ccf2:	bf00      	nop
 800ccf4:	e000      	b.n	800ccf8 <_fx_utility_FAT_flush+0x42e>
                    continue;
 800ccf6:	bf00      	nop
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 800ccf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	653b      	str	r3, [r7, #80]	; 0x50
 800ccfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd00:	2b0f      	cmp	r3, #15
 800cd02:	d9a4      	bls.n	800cc4e <_fx_utility_FAT_flush+0x384>
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 800cd04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd06:	2200      	movs	r2, #0
 800cd08:	613b      	str	r3, [r7, #16]
 800cd0a:	617a      	str	r2, [r7, #20]
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800cd0c:	69fb      	ldr	r3, [r7, #28]
 800cd0e:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 800cd10:	2302      	movs	r3, #2
 800cd12:	9302      	str	r3, [sp, #8]
 800cd14:	2301      	movs	r3, #1
 800cd16:	9301      	str	r3, [sp, #4]
 800cd18:	9200      	str	r2, [sp, #0]
 800cd1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cd1e:	69f8      	ldr	r0, [r7, #28]
 800cd20:	f001 f958 	bl	800dfd4 <_fx_utility_logical_sector_write>
 800cd24:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 800cd26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d001      	beq.n	800cd30 <_fx_utility_FAT_flush+0x466>
            {
                /* Return the error status.  */
                return(status);
 800cd2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd2e:	e118      	b.n	800cf62 <_fx_utility_FAT_flush+0x698>
            }

            /* Mark the FAT sector update bit map to indicate this sector has been
               written.  */
            if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 800cd30:	69fb      	ldr	r3, [r7, #28]
 800cd32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d105      	bne.n	800cd48 <_fx_utility_FAT_flush+0x47e>
            {
                sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 800cd3c:	69fb      	ldr	r3, [r7, #28]
 800cd3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd40:	0a9b      	lsrs	r3, r3, #10
 800cd42:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800cd46:	e006      	b.n	800cd56 <_fx_utility_FAT_flush+0x48c>
            }
            else
            {
                sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 800cd48:	69fb      	ldr	r3, [r7, #28]
 800cd4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd4c:	0a9b      	lsrs	r3, r3, #10
 800cd4e:	b2db      	uxtb	r3, r3
 800cd50:	3301      	adds	r3, #1
 800cd52:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            }
            ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 800cd56:	69fb      	ldr	r3, [r7, #28]
 800cd58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cd5c:	1ad2      	subs	r2, r2, r3
 800cd5e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800cd62:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd66:	08db      	lsrs	r3, r3, #3
 800cd68:	637b      	str	r3, [r7, #52]	; 0x34
            media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 800cd6a:	69fa      	ldr	r2, [r7, #28]
 800cd6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd6e:	4413      	add	r3, r2
 800cd70:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800cd74:	781b      	ldrb	r3, [r3, #0]
 800cd76:	b259      	sxtb	r1, r3
                | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 800cd78:	69fb      	ldr	r3, [r7, #28]
 800cd7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cd7e:	1a9a      	subs	r2, r3, r2
 800cd80:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800cd84:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd88:	f003 0207 	and.w	r2, r3, #7
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	4093      	lsls	r3, r2
 800cd90:	b25b      	sxtb	r3, r3
 800cd92:	430b      	orrs	r3, r1
 800cd94:	b25b      	sxtb	r3, r3
                (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 800cd96:	b2d9      	uxtb	r1, r3
            media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 800cd98:	69fa      	ldr	r2, [r7, #28]
 800cd9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd9c:	4413      	add	r3, r2
 800cd9e:	f603 0218 	addw	r2, r3, #2072	; 0x818
 800cda2:	460b      	mov	r3, r1
 800cda4:	7013      	strb	r3, [r2, #0]
 800cda6:	e0d4      	b.n	800cf52 <_fx_utility_FAT_flush+0x688>
        {

            /* 32-bit FAT or exFAT are present.  */

            /* Calculate the byte offset to the cluster entry.  */
            byte_offset =  (((ULONG)cluster) * 4);
 800cda8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdaa:	009b      	lsls	r3, r3, #2
 800cdac:	63fb      	str	r3, [r7, #60]	; 0x3c

            /* Calculate the FAT sector the requested FAT entry resides in.  */
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800cdae:	69fb      	ldr	r3, [r7, #28]
 800cdb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cdb4:	fbb2 f2f3 	udiv	r2, r2, r3
                (ULONG)media_ptr -> fx_media_reserved_sectors;
 800cdb8:	69fb      	ldr	r3, [r7, #28]
 800cdba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            FAT_sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800cdbc:	4413      	add	r3, r2
 800cdbe:	657b      	str	r3, [r7, #84]	; 0x54

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800cdc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	60bb      	str	r3, [r7, #8]
 800cdc6:	60fa      	str	r2, [r7, #12]
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800cdc8:	69fb      	ldr	r3, [r7, #28]
 800cdca:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800cdcc:	2302      	movs	r3, #2
 800cdce:	9302      	str	r3, [sp, #8]
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	9301      	str	r3, [sp, #4]
 800cdd4:	9200      	str	r2, [sp, #0]
 800cdd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cdda:	69f8      	ldr	r0, [r7, #28]
 800cddc:	f000 fe66 	bl	800daac <_fx_utility_logical_sector_read>
 800cde0:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 800cde2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d001      	beq.n	800cdec <_fx_utility_FAT_flush+0x522>
            {

                /* Return the error status.  */
                return(status);
 800cde8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdea:	e0ba      	b.n	800cf62 <_fx_utility_FAT_flush+0x698>
            }

            /* Loop through the remainder of the cache to check for multiple entries
               within the same FAT sector being written out.  */
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 800cdec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdee:	653b      	str	r3, [r7, #80]	; 0x50
 800cdf0:	e057      	b.n	800cea2 <_fx_utility_FAT_flush+0x5d8>
            {

                /* Determine if the entry is dirty.  */
                if (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty == 0)
 800cdf2:	69f9      	ldr	r1, [r7, #28]
 800cdf4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cdf6:	4613      	mov	r3, r2
 800cdf8:	005b      	lsls	r3, r3, #1
 800cdfa:	4413      	add	r3, r2
 800cdfc:	009b      	lsls	r3, r3, #2
 800cdfe:	440b      	add	r3, r1
 800ce00:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d045      	beq.n	800ce96 <_fx_utility_FAT_flush+0x5cc>
                    /* Not dirty, does not need to be flushed.  */
                    continue;
                }

                /* Isolate the cluster.  */
                cluster = (media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_cluster);
 800ce0a:	69f9      	ldr	r1, [r7, #28]
 800ce0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce0e:	4613      	mov	r3, r2
 800ce10:	005b      	lsls	r3, r3, #1
 800ce12:	4413      	add	r3, r2
 800ce14:	009b      	lsls	r3, r3, #2
 800ce16:	440b      	add	r3, r1
 800ce18:	f503 63eb 	add.w	r3, r3, #1880	; 0x758
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	643b      	str	r3, [r7, #64]	; 0x40

                /* Calculate the byte offset to the cluster entry.  */
                byte_offset =  (((ULONG)cluster) * 4);
 800ce20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce22:	009b      	lsls	r3, r3, #2
 800ce24:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Pickup the sector.  */
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800ce26:	69fb      	ldr	r3, [r7, #28]
 800ce28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce2a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce2c:	fbb2 f2f3 	udiv	r2, r2, r3
                    (ULONG)media_ptr -> fx_media_reserved_sectors;
 800ce30:	69fb      	ldr	r3, [r7, #28]
 800ce32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                sector =  (byte_offset / media_ptr -> fx_media_bytes_per_sector) +
 800ce34:	4413      	add	r3, r2
 800ce36:	633b      	str	r3, [r7, #48]	; 0x30

                /* Is it the current FAT sector?  */
                if (sector != FAT_sector)
 800ce38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ce3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d12c      	bne.n	800ce9a <_fx_utility_FAT_flush+0x5d0>
                    continue;
                }

                /* Now calculate the byte offset into this FAT sector.  */
                byte_offset =  byte_offset -
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800ce40:	69fb      	ldr	r3, [r7, #28]
 800ce42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ce46:	1ad2      	subs	r2, r2, r3
                     media_ptr -> fx_media_bytes_per_sector);
 800ce48:	69fb      	ldr	r3, [r7, #28]
 800ce4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    ((FAT_sector - (ULONG)media_ptr -> fx_media_reserved_sectors) *
 800ce4c:	fb02 f303 	mul.w	r3, r2, r3
                byte_offset =  byte_offset -
 800ce50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ce52:	1ad3      	subs	r3, r2, r3
 800ce54:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup a pointer into the buffer.  */
                FAT_ptr =  (UCHAR *)media_ptr -> fx_media_memory_buffer + (UINT)byte_offset;
 800ce56:	69fb      	ldr	r3, [r7, #28]
 800ce58:	689a      	ldr	r2, [r3, #8]
 800ce5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce5c:	4413      	add	r3, r2
 800ce5e:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Pickup new value for this FAT entry.  */
                next_cluster =  media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_value;
 800ce60:	69f9      	ldr	r1, [r7, #28]
 800ce62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce64:	4613      	mov	r3, r2
 800ce66:	005b      	lsls	r3, r3, #1
 800ce68:	4413      	add	r3, r2
 800ce6a:	009b      	lsls	r3, r3, #2
 800ce6c:	440b      	add	r3, r1
 800ce6e:	f203 735c 	addw	r3, r3, #1884	; 0x75c
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Store the FAT entry.  */
                _fx_utility_32_unsigned_write(FAT_ptr, next_cluster);
 800ce76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ce78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce7a:	f7ff fadc 	bl	800c436 <_fx_utility_32_unsigned_write>

                /* Clear the dirty flag.  */
                media_ptr -> fx_media_fat_cache[i].fx_fat_cache_entry_dirty = 0;
 800ce7e:	69f9      	ldr	r1, [r7, #28]
 800ce80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce82:	4613      	mov	r3, r2
 800ce84:	005b      	lsls	r3, r3, #1
 800ce86:	4413      	add	r3, r2
 800ce88:	009b      	lsls	r3, r3, #2
 800ce8a:	440b      	add	r3, r1
 800ce8c:	f503 63ec 	add.w	r3, r3, #1888	; 0x760
 800ce90:	2200      	movs	r2, #0
 800ce92:	601a      	str	r2, [r3, #0]
 800ce94:	e002      	b.n	800ce9c <_fx_utility_FAT_flush+0x5d2>
                    continue;
 800ce96:	bf00      	nop
 800ce98:	e000      	b.n	800ce9c <_fx_utility_FAT_flush+0x5d2>
                    continue;
 800ce9a:	bf00      	nop
            for (i = index; i < FX_MAX_FAT_CACHE; i++)
 800ce9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce9e:	3301      	adds	r3, #1
 800cea0:	653b      	str	r3, [r7, #80]	; 0x50
 800cea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cea4:	2b0f      	cmp	r3, #15
 800cea6:	d9a4      	bls.n	800cdf2 <_fx_utility_FAT_flush+0x528>
            }

            /* Write the last written FAT sector out.  */
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 800cea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ceaa:	2200      	movs	r2, #0
 800ceac:	603b      	str	r3, [r7, #0]
 800ceae:	607a      	str	r2, [r7, #4]
                                                       media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800ceb0:	69fb      	ldr	r3, [r7, #28]
 800ceb2:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_write(media_ptr, (ULONG64) FAT_sector,
 800ceb4:	2302      	movs	r3, #2
 800ceb6:	9302      	str	r3, [sp, #8]
 800ceb8:	2301      	movs	r3, #1
 800ceba:	9301      	str	r3, [sp, #4]
 800cebc:	9200      	str	r2, [sp, #0]
 800cebe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cec2:	69f8      	ldr	r0, [r7, #28]
 800cec4:	f001 f886 	bl	800dfd4 <_fx_utility_logical_sector_write>
 800cec8:	63b8      	str	r0, [r7, #56]	; 0x38

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 800ceca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d001      	beq.n	800ced4 <_fx_utility_FAT_flush+0x60a>
            {

                /* Return the error status.  */
                return(status);
 800ced0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced2:	e046      	b.n	800cf62 <_fx_utility_FAT_flush+0x698>
            {
#endif /* FX_ENABLE_EXFAT */

                /* Mark the FAT sector update bit map to indicate this sector has been
                   written.  */
                if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 800ced4:	69fb      	ldr	r3, [r7, #28]
 800ced6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ced8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d105      	bne.n	800ceec <_fx_utility_FAT_flush+0x622>
                {
                    sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 800cee0:	69fb      	ldr	r3, [r7, #28]
 800cee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cee4:	0a9b      	lsrs	r3, r3, #10
 800cee6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
 800ceea:	e006      	b.n	800cefa <_fx_utility_FAT_flush+0x630>
                }
                else
                {
                    sectors_per_bit =  (UCHAR)((media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3)) + 1);
 800ceec:	69fb      	ldr	r3, [r7, #28]
 800ceee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cef0:	0a9b      	lsrs	r3, r3, #10
 800cef2:	b2db      	uxtb	r3, r3
 800cef4:	3301      	adds	r3, #1
 800cef6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
                }
                ind = ((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) >> 3;
 800cefa:	69fb      	ldr	r3, [r7, #28]
 800cefc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cefe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cf00:	1ad2      	subs	r2, r2, r3
 800cf02:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800cf06:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf0a:	08db      	lsrs	r3, r3, #3
 800cf0c:	637b      	str	r3, [r7, #52]	; 0x34
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 800cf0e:	69fa      	ldr	r2, [r7, #28]
 800cf10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf12:	4413      	add	r3, r2
 800cf14:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	b259      	sxtb	r1, r3
                    | (1 <<(((FAT_sector - media_ptr -> fx_media_reserved_sectors) / sectors_per_bit) & 7)));
 800cf1c:	69fb      	ldr	r3, [r7, #28]
 800cf1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cf20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf22:	1a9a      	subs	r2, r3, r2
 800cf24:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800cf28:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf2c:	f003 0207 	and.w	r2, r3, #7
 800cf30:	2301      	movs	r3, #1
 800cf32:	4093      	lsls	r3, r2
 800cf34:	b25b      	sxtb	r3, r3
 800cf36:	430b      	orrs	r3, r1
 800cf38:	b25b      	sxtb	r3, r3
                    (UCHAR)((INT)media_ptr -> fx_media_fat_secondary_update_map[ind]
 800cf3a:	b2d9      	uxtb	r1, r3
                media_ptr -> fx_media_fat_secondary_update_map[ind] = 
 800cf3c:	69fa      	ldr	r2, [r7, #28]
 800cf3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf40:	4413      	add	r3, r2
 800cf42:	f603 0218 	addw	r2, r3, #2072	; 0x818
 800cf46:	460b      	mov	r3, r1
 800cf48:	7013      	strb	r3, [r2, #0]
 800cf4a:	e002      	b.n	800cf52 <_fx_utility_FAT_flush+0x688>
            continue;
 800cf4c:	bf00      	nop
 800cf4e:	e000      	b.n	800cf52 <_fx_utility_FAT_flush+0x688>
                    break;
 800cf50:	bf00      	nop
    for (index = 0; index < FX_MAX_FAT_CACHE; index++)
 800cf52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf54:	3301      	adds	r3, #1
 800cf56:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cf58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf5a:	2b0f      	cmp	r3, #15
 800cf5c:	f67f acc4 	bls.w	800c8e8 <_fx_utility_FAT_flush+0x1e>
        media_ptr -> fx_media_fault_tolerant_cached_FAT_sector = 0;
    }
#endif /* FX_ENABLE_FAULT_TOLERANT */

    /* Return successful status.  */
    return(FX_SUCCESS);
 800cf60:	2300      	movs	r3, #0
}
 800cf62:	4618      	mov	r0, r3
 800cf64:	3758      	adds	r7, #88	; 0x58
 800cf66:	46bd      	mov	sp, r7
 800cf68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800cf6c <_fx_utility_FAT_map_flush>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_FAT_map_flush(FX_MEDIA *media_ptr)
{
 800cf6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cf70:	b092      	sub	sp, #72	; 0x48
 800cf72:	af04      	add	r7, sp, #16
 800cf74:	61f8      	str	r0, [r7, #28]
       or more primary FAT sectors. Because of this, it is possible some FAT sectors that
       were not changed may get flushed out to the secondary FAT.  However, this method
       provides very nice performance benefits during normal operation and is much more
       reasonable than performing a total copy of the primary FAT to each secondary FAT
       on media flush and media close.  */
    if (media_ptr -> fx_media_sectors_per_FAT % (FX_FAT_MAP_SIZE << 3) == 0)
 800cf76:	69fb      	ldr	r3, [r7, #28]
 800cf78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d105      	bne.n	800cf8e <_fx_utility_FAT_map_flush+0x22>
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3));
 800cf82:	69fb      	ldr	r3, [r7, #28]
 800cf84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf86:	0a9b      	lsrs	r3, r3, #10
 800cf88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cf8c:	e006      	b.n	800cf9c <_fx_utility_FAT_map_flush+0x30>
    }
    else
    {
        sectors_per_bit =  (UCHAR)(media_ptr -> fx_media_sectors_per_FAT / (FX_FAT_MAP_SIZE << 3) + 1);
 800cf8e:	69fb      	ldr	r3, [r7, #28]
 800cf90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf92:	0a9b      	lsrs	r3, r3, #10
 800cf94:	b2db      	uxtb	r3, r3
 800cf96:	3301      	adds	r3, #1
 800cf98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Loop through the FAT update map to mirror primary FAT sectors to secondary FAT(s).  */
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cfa0:	e089      	b.n	800d0b6 <_fx_utility_FAT_map_flush+0x14a>
    {

        /* Determine if there are FAT changes specified by this entry.  */
        if ((media_ptr -> fx_media_fat_secondary_update_map[i >> 3] & (1 << (i & 7))) == 0)
 800cfa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa4:	08db      	lsrs	r3, r3, #3
 800cfa6:	69fa      	ldr	r2, [r7, #28]
 800cfa8:	4413      	add	r3, r2
 800cfaa:	f893 3818 	ldrb.w	r3, [r3, #2072]	; 0x818
 800cfae:	461a      	mov	r2, r3
 800cfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfb2:	f003 0307 	and.w	r3, r3, #7
 800cfb6:	fa42 f303 	asr.w	r3, r2, r3
 800cfba:	f003 0301 	and.w	r3, r3, #1
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d075      	beq.n	800d0ae <_fx_utility_FAT_map_flush+0x142>
            /* No, look at the next bit map entry.  */
            continue;
        }

        /* Setup the parameters for performing the update.  */
        FAT_sector =    i * sectors_per_bit + media_ptr -> fx_media_reserved_sectors;
 800cfc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfc8:	fb03 f202 	mul.w	r2, r3, r2
 800cfcc:	69fb      	ldr	r3, [r7, #28]
 800cfce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfd0:	4413      	add	r3, r2
 800cfd2:	637b      	str	r3, [r7, #52]	; 0x34
        last_sector =   FAT_sector + sectors_per_bit;
 800cfd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cfd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cfda:	4413      	add	r3, r2
 800cfdc:	633b      	str	r3, [r7, #48]	; 0x30

        /* Make sure the last update sector is within range.  */
        if (last_sector > (media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors))
 800cfde:	69fb      	ldr	r3, [r7, #28]
 800cfe0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cfe2:	69fb      	ldr	r3, [r7, #28]
 800cfe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfe6:	4413      	add	r3, r2
 800cfe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d95a      	bls.n	800d0a4 <_fx_utility_FAT_map_flush+0x138>
        {
            last_sector =  media_ptr -> fx_media_sectors_per_FAT + media_ptr -> fx_media_reserved_sectors;
 800cfee:	69fb      	ldr	r3, [r7, #28]
 800cff0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cff2:	69fb      	ldr	r3, [r7, #28]
 800cff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cff6:	4413      	add	r3, r2
 800cff8:	633b      	str	r3, [r7, #48]	; 0x30
        }

        /* Loop to mirror primary FAT sectors to secondary FAT(s).  */
        for (; FAT_sector < last_sector; FAT_sector++)
 800cffa:	e053      	b.n	800d0a4 <_fx_utility_FAT_map_flush+0x138>
        {

            /* Read the FAT sector.  */
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800cffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cffe:	2200      	movs	r2, #0
 800d000:	613b      	str	r3, [r7, #16]
 800d002:	617a      	str	r2, [r7, #20]
                                                      media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800d004:	69fb      	ldr	r3, [r7, #28]
 800d006:	689a      	ldr	r2, [r3, #8]
            status =  _fx_utility_logical_sector_read(media_ptr, (ULONG64) FAT_sector,
 800d008:	2302      	movs	r3, #2
 800d00a:	9302      	str	r3, [sp, #8]
 800d00c:	2301      	movs	r3, #1
 800d00e:	9301      	str	r3, [sp, #4]
 800d010:	9200      	str	r2, [sp, #0]
 800d012:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d016:	69f8      	ldr	r0, [r7, #28]
 800d018:	f000 fd48 	bl	800daac <_fx_utility_logical_sector_read>
 800d01c:	6238      	str	r0, [r7, #32]

            /* Determine if an error occurred.  */
            if (status != FX_SUCCESS)
 800d01e:	6a3b      	ldr	r3, [r7, #32]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d001      	beq.n	800d028 <_fx_utility_FAT_map_flush+0xbc>
            {
                /* Return the error status.  */
                return(status);
 800d024:	6a3b      	ldr	r3, [r7, #32]
 800d026:	e05c      	b.n	800d0e2 <_fx_utility_FAT_map_flush+0x176>
            }

            /* Pickup how many secondary FATs there are.  */
            FATs =  media_ptr -> fx_media_number_of_FATs - 1;
 800d028:	69fb      	ldr	r3, [r7, #28]
 800d02a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d02c:	3b01      	subs	r3, #1
 800d02e:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop to update additional FAT entries.  */
            while (FATs)
 800d030:	e032      	b.n	800d098 <_fx_utility_FAT_map_flush+0x12c>
            {

                /* Mirror main FAT sector write into the additional FATs.  */
                status =  _fx_utility_logical_sector_write(media_ptr,
                                                           ((ULONG64) FAT_sector) + ((ULONG64)FATs * (ULONG64)(media_ptr -> fx_media_sectors_per_FAT)),
 800d032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d034:	2200      	movs	r2, #0
 800d036:	60bb      	str	r3, [r7, #8]
 800d038:	60fa      	str	r2, [r7, #12]
 800d03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d03c:	2200      	movs	r2, #0
 800d03e:	4698      	mov	r8, r3
 800d040:	4691      	mov	r9, r2
 800d042:	69fb      	ldr	r3, [r7, #28]
 800d044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d046:	2200      	movs	r2, #0
 800d048:	469a      	mov	sl, r3
 800d04a:	4693      	mov	fp, r2
 800d04c:	fb0a f209 	mul.w	r2, sl, r9
 800d050:	fb08 f30b 	mul.w	r3, r8, fp
 800d054:	4413      	add	r3, r2
 800d056:	fba8 450a 	umull	r4, r5, r8, sl
 800d05a:	442b      	add	r3, r5
 800d05c:	461d      	mov	r5, r3
                status =  _fx_utility_logical_sector_write(media_ptr,
 800d05e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d062:	460b      	mov	r3, r1
 800d064:	191b      	adds	r3, r3, r4
 800d066:	603b      	str	r3, [r7, #0]
 800d068:	4613      	mov	r3, r2
 800d06a:	416b      	adcs	r3, r5
 800d06c:	607b      	str	r3, [r7, #4]
                                                           media_ptr -> fx_media_memory_buffer, ((ULONG) 1), FX_FAT_SECTOR);
 800d06e:	69fb      	ldr	r3, [r7, #28]
 800d070:	689a      	ldr	r2, [r3, #8]
                status =  _fx_utility_logical_sector_write(media_ptr,
 800d072:	2302      	movs	r3, #2
 800d074:	9302      	str	r3, [sp, #8]
 800d076:	2301      	movs	r3, #1
 800d078:	9301      	str	r3, [sp, #4]
 800d07a:	9200      	str	r2, [sp, #0]
 800d07c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d080:	69f8      	ldr	r0, [r7, #28]
 800d082:	f000 ffa7 	bl	800dfd4 <_fx_utility_logical_sector_write>
 800d086:	6238      	str	r0, [r7, #32]

                /* Determine if an error occurred.  */
                if (status != FX_SUCCESS)
 800d088:	6a3b      	ldr	r3, [r7, #32]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d001      	beq.n	800d092 <_fx_utility_FAT_map_flush+0x126>
                {

                    /* Return the error status.  */
                    return(status);
 800d08e:	6a3b      	ldr	r3, [r7, #32]
 800d090:	e027      	b.n	800d0e2 <_fx_utility_FAT_map_flush+0x176>
                }

                /* Decrement the number of FATs.  */
                FATs--;
 800d092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d094:	3b01      	subs	r3, #1
 800d096:	62bb      	str	r3, [r7, #40]	; 0x28
            while (FATs)
 800d098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d1c9      	bne.n	800d032 <_fx_utility_FAT_map_flush+0xc6>
        for (; FAT_sector < last_sector; FAT_sector++)
 800d09e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0a0:	3301      	adds	r3, #1
 800d0a2:	637b      	str	r3, [r7, #52]	; 0x34
 800d0a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d3a7      	bcc.n	800cffc <_fx_utility_FAT_map_flush+0x90>
 800d0ac:	e000      	b.n	800d0b0 <_fx_utility_FAT_map_flush+0x144>
            continue;
 800d0ae:	bf00      	nop
    for (i = 0; i < FX_FAT_MAP_SIZE << 3; i++)
 800d0b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d0bc:	f4ff af71 	bcc.w	800cfa2 <_fx_utility_FAT_map_flush+0x36>
            }
        }
    }

    /* Clear the bit map that indicates primary FAT updates.  */
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0c4:	e009      	b.n	800d0da <_fx_utility_FAT_map_flush+0x16e>
    {

        /* Clear each entry in the bit map.  */
        media_ptr -> fx_media_fat_secondary_update_map[i] =  0;
 800d0c6:	69fa      	ldr	r2, [r7, #28]
 800d0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ca:	4413      	add	r3, r2
 800d0cc:	f603 0318 	addw	r3, r3, #2072	; 0x818
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < FX_FAT_MAP_SIZE; i++)
 800d0d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d6:	3301      	adds	r3, #1
 800d0d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0dc:	2b7f      	cmp	r3, #127	; 0x7f
 800d0de:	d9f2      	bls.n	800d0c6 <_fx_utility_FAT_map_flush+0x15a>
    }

    /* Return a successful completion.  */
    return(FX_SUCCESS);
 800d0e0:	2300      	movs	r3, #0
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3738      	adds	r7, #56	; 0x38
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d0ec <_fx_utility_logical_sector_cache_entry_read>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
FX_CACHED_SECTOR  *_fx_utility_logical_sector_cache_entry_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                                               FX_CACHED_SECTOR **previous_cache_entry)
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b08f      	sub	sp, #60	; 0x3c
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	e9c7 2300 	strd	r2, r3, [r7]
ULONG             cache_size;
ULONG             index;


    /* Determine if the logical sector cache access should use the hash function.  */
    if (media_ptr -> fx_media_sector_cache_hashed)
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	691b      	ldr	r3, [r3, #16]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	f000 8275 	beq.w	800d5ec <_fx_utility_logical_sector_cache_entry_read+0x500>

        /* Calculate the area of the cache for this logical sector.  */

        /* First compute the hashed value of this index by simply using the lower bits of
           the sector number.  */
        index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 800d102:	683a      	ldr	r2, [r7, #0]
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d10a:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800d10e:	4013      	ands	r3, r2
 800d110:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Set the bit indicating there is one or more valid sectors at this cache index.  */
        media_ptr -> fx_media_sector_cache_hashed_sector_valid |=  ((ULONG)1) << (index % 32);
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	6a1a      	ldr	r2, [r3, #32]
 800d116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d118:	f003 031f 	and.w	r3, r3, #31
 800d11c:	2101      	movs	r1, #1
 800d11e:	fa01 f303 	lsl.w	r3, r1, r3
 800d122:	431a      	orrs	r2, r3
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	621a      	str	r2, [r3, #32]

        /* Compute the actual array index by multiplying by the cache depth.  */
        index =  index * FX_SECTOR_CACHE_DEPTH;
 800d128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Build a pointer to the cache entry.  */
        cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 800d12e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d130:	4613      	mov	r3, r2
 800d132:	005b      	lsls	r3, r3, #1
 800d134:	4413      	add	r3, r2
 800d136:	00db      	lsls	r3, r3, #3
 800d138:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 800d13c:	68fa      	ldr	r2, [r7, #12]
 800d13e:	4413      	add	r3, r2
 800d140:	637b      	str	r3, [r7, #52]	; 0x34

        /* Determine if the logical sector is in the cache - assuming the depth of the
           sector cache is 4 entries.  */
        if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 800d142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d144:	7c5b      	ldrb	r3, [r3, #17]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d015      	beq.n	800d176 <_fx_utility_logical_sector_cache_entry_read+0x8a>
 800d14a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d14c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d150:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d154:	4299      	cmp	r1, r3
 800d156:	bf08      	it	eq
 800d158:	4290      	cmpeq	r0, r2
 800d15a:	d10c      	bne.n	800d176 <_fx_utility_logical_sector_cache_entry_read+0x8a>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 800d15c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d15e:	681a      	ldr	r2, [r3, #0]
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800d16a:	1c5a      	adds	r2, r3, #1
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif
            /* Success, return to caller immediately!  */
            return(FX_NULL);
 800d172:	2300      	movs	r3, #0
 800d174:	e27e      	b.n	800d674 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 1) -> fx_cached_sector_valid) && ((cache_entry + 1) -> fx_cached_sector == logical_sector))
 800d176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d178:	3318      	adds	r3, #24
 800d17a:	7c5b      	ldrb	r3, [r3, #17]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d060      	beq.n	800d242 <_fx_utility_logical_sector_cache_entry_read+0x156>
 800d180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d182:	3318      	adds	r3, #24
 800d184:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d188:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d18c:	4299      	cmp	r1, r3
 800d18e:	bf08      	it	eq
 800d190:	4290      	cmpeq	r0, r2
 800d192:	d156      	bne.n	800d242 <_fx_utility_logical_sector_cache_entry_read+0x156>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 800d194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d196:	3318      	adds	r3, #24
 800d198:	681a      	ldr	r2, [r3, #0]
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800d1a4:	1c5a      	adds	r2, r3, #1
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Swap the first and second cache entries to keep the most recently used
               at the top.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 800d1ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 800d1b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1b4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d1b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 800d1bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1be:	7c1b      	ldrb	r3, [r3, #16]
 800d1c0:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 800d1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1c6:	7c5b      	ldrb	r3, [r3, #17]
 800d1c8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 800d1cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1ce:	7c9b      	ldrb	r3, [r3, #18]
 800d1d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 800d1d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1d6:	3318      	adds	r3, #24
 800d1d8:	681a      	ldr	r2, [r3, #0]
 800d1da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1dc:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 1) -> fx_cached_sector;
 800d1de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1e0:	3318      	adds	r3, #24
 800d1e2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d1e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d1e8:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 800d1ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1ee:	3318      	adds	r3, #24
 800d1f0:	7c1a      	ldrb	r2, [r3, #16]
 800d1f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1f4:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 1) -> fx_cached_sector_valid;
 800d1f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1f8:	3318      	adds	r3, #24
 800d1fa:	7c5a      	ldrb	r2, [r3, #17]
 800d1fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1fe:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 1) -> fx_cached_sector_type;
 800d200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d202:	3318      	adds	r3, #24
 800d204:	7c9a      	ldrb	r2, [r3, #18]
 800d206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d208:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 800d20a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d20c:	3318      	adds	r3, #24
 800d20e:	693a      	ldr	r2, [r7, #16]
 800d210:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 800d212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d214:	f103 0118 	add.w	r1, r3, #24
 800d218:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d21c:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 800d220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d222:	3318      	adds	r3, #24
 800d224:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d228:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 800d22a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d22c:	3318      	adds	r3, #24
 800d22e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d232:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 800d234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d236:	3318      	adds	r3, #24
 800d238:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d23c:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 800d23e:	2300      	movs	r3, #0
 800d240:	e218      	b.n	800d674 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 2) -> fx_cached_sector_valid) && ((cache_entry + 2) -> fx_cached_sector == logical_sector))
 800d242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d244:	3330      	adds	r3, #48	; 0x30
 800d246:	7c5b      	ldrb	r3, [r3, #17]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	f000 8086 	beq.w	800d35a <_fx_utility_logical_sector_cache_entry_read+0x26e>
 800d24e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d250:	3330      	adds	r3, #48	; 0x30
 800d252:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d256:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d25a:	4299      	cmp	r1, r3
 800d25c:	bf08      	it	eq
 800d25e:	4290      	cmpeq	r0, r2
 800d260:	d17b      	bne.n	800d35a <_fx_utility_logical_sector_cache_entry_read+0x26e>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 800d262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d264:	3330      	adds	r3, #48	; 0x30
 800d266:	681a      	ldr	r2, [r3, #0]
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800d272:	1c5a      	adds	r2, r3, #1
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Move the third entry to the top and the first two entries down.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 800d27a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 800d280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d282:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d286:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 800d28a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d28c:	7c1b      	ldrb	r3, [r3, #16]
 800d28e:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 800d292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d294:	7c5b      	ldrb	r3, [r3, #17]
 800d296:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 800d29a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d29c:	7c9b      	ldrb	r3, [r3, #18]
 800d29e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 800d2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2a4:	3330      	adds	r3, #48	; 0x30
 800d2a6:	681a      	ldr	r2, [r3, #0]
 800d2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2aa:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 2) -> fx_cached_sector;
 800d2ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2ae:	3330      	adds	r3, #48	; 0x30
 800d2b0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d2b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d2b6:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 800d2ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2bc:	3330      	adds	r3, #48	; 0x30
 800d2be:	7c1a      	ldrb	r2, [r3, #16]
 800d2c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2c2:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 2) -> fx_cached_sector_valid;
 800d2c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2c6:	3330      	adds	r3, #48	; 0x30
 800d2c8:	7c5a      	ldrb	r2, [r3, #17]
 800d2ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2cc:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 2) -> fx_cached_sector_type;
 800d2ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2d0:	3330      	adds	r3, #48	; 0x30
 800d2d2:	7c9a      	ldrb	r2, [r3, #18]
 800d2d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2d6:	749a      	strb	r2, [r3, #18]

            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 800d2d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2da:	f103 0218 	add.w	r2, r3, #24
 800d2de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2e0:	3330      	adds	r3, #48	; 0x30
 800d2e2:	6812      	ldr	r2, [r2, #0]
 800d2e4:	601a      	str	r2, [r3, #0]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 800d2e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2e8:	3318      	adds	r3, #24
 800d2ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2ec:	f102 0130 	add.w	r1, r2, #48	; 0x30
 800d2f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d2f4:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 800d2f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2fa:	f103 0218 	add.w	r2, r3, #24
 800d2fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d300:	3330      	adds	r3, #48	; 0x30
 800d302:	7c12      	ldrb	r2, [r2, #16]
 800d304:	741a      	strb	r2, [r3, #16]
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 800d306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d308:	f103 0218 	add.w	r2, r3, #24
 800d30c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d30e:	3330      	adds	r3, #48	; 0x30
 800d310:	7c52      	ldrb	r2, [r2, #17]
 800d312:	745a      	strb	r2, [r3, #17]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 800d314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d316:	f103 0218 	add.w	r2, r3, #24
 800d31a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d31c:	3330      	adds	r3, #48	; 0x30
 800d31e:	7c92      	ldrb	r2, [r2, #18]
 800d320:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 800d322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d324:	3318      	adds	r3, #24
 800d326:	693a      	ldr	r2, [r7, #16]
 800d328:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 800d32a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d32c:	f103 0118 	add.w	r1, r3, #24
 800d330:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d334:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 800d338:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d33a:	3318      	adds	r3, #24
 800d33c:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d340:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 800d342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d344:	3318      	adds	r3, #24
 800d346:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d34a:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 800d34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d34e:	3318      	adds	r3, #24
 800d350:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d354:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 800d356:	2300      	movs	r3, #0
 800d358:	e18c      	b.n	800d674 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }
        else if (((cache_entry + 3) -> fx_cached_sector_valid) && ((cache_entry + 3) -> fx_cached_sector == logical_sector))
 800d35a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d35c:	3348      	adds	r3, #72	; 0x48
 800d35e:	7c5b      	ldrb	r3, [r3, #17]
 800d360:	2b00      	cmp	r3, #0
 800d362:	f000 80ac 	beq.w	800d4be <_fx_utility_logical_sector_cache_entry_read+0x3d2>
 800d366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d368:	3348      	adds	r3, #72	; 0x48
 800d36a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d36e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d372:	4299      	cmp	r1, r3
 800d374:	bf08      	it	eq
 800d376:	4290      	cmpeq	r0, r2
 800d378:	f040 80a1 	bne.w	800d4be <_fx_utility_logical_sector_cache_entry_read+0x3d2>
        {

            /* Yes, we found a match.  Simply setup the pointer to this
               buffer and return.  */
            media_ptr -> fx_media_memory_buffer =  (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 800d37c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d37e:	3348      	adds	r3, #72	; 0x48
 800d380:	681a      	ldr	r2, [r3, #0]
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	609a      	str	r2, [r3, #8]

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of logical sectors cache read hits.  */
            media_ptr -> fx_media_logical_sector_cache_read_hits++;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800d38c:	1c5a      	adds	r2, r3, #1
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

            /* Move the last entry to the top and the first three entries down.  */
            temp_storage.fx_cached_sector_memory_buffer =           (cache_entry) -> fx_cached_sector_memory_buffer;
 800d394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	613b      	str	r3, [r7, #16]
            temp_storage.fx_cached_sector =                         (cache_entry) -> fx_cached_sector;
 800d39a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d39c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d3a0:	e9c7 2306 	strd	r2, r3, [r7, #24]
            temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry) -> fx_cached_sector_buffer_dirty;
 800d3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3a6:	7c1b      	ldrb	r3, [r3, #16]
 800d3a8:	f887 3020 	strb.w	r3, [r7, #32]
            temp_storage.fx_cached_sector_valid =                   (cache_entry) -> fx_cached_sector_valid;
 800d3ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3ae:	7c5b      	ldrb	r3, [r3, #17]
 800d3b0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            temp_storage.fx_cached_sector_type =                    (cache_entry) -> fx_cached_sector_type;
 800d3b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3b6:	7c9b      	ldrb	r3, [r3, #18]
 800d3b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

            (cache_entry) -> fx_cached_sector_memory_buffer =       (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 800d3bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3be:	3348      	adds	r3, #72	; 0x48
 800d3c0:	681a      	ldr	r2, [r3, #0]
 800d3c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3c4:	601a      	str	r2, [r3, #0]
            (cache_entry) -> fx_cached_sector =                     (cache_entry + 3) -> fx_cached_sector;
 800d3c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3c8:	3348      	adds	r3, #72	; 0x48
 800d3ca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d3ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d3d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry) -> fx_cached_sector_buffer_dirty =        (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 800d3d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3d6:	3348      	adds	r3, #72	; 0x48
 800d3d8:	7c1a      	ldrb	r2, [r3, #16]
 800d3da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3dc:	741a      	strb	r2, [r3, #16]
            (cache_entry) -> fx_cached_sector_valid =               (cache_entry + 3) -> fx_cached_sector_valid;
 800d3de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3e0:	3348      	adds	r3, #72	; 0x48
 800d3e2:	7c5a      	ldrb	r2, [r3, #17]
 800d3e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3e6:	745a      	strb	r2, [r3, #17]
            (cache_entry) -> fx_cached_sector_type =                (cache_entry + 3) -> fx_cached_sector_type;
 800d3e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3ea:	3348      	adds	r3, #72	; 0x48
 800d3ec:	7c9a      	ldrb	r2, [r3, #18]
 800d3ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3f0:	749a      	strb	r2, [r3, #18]

            (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 800d3f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3f4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d3f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3fa:	3348      	adds	r3, #72	; 0x48
 800d3fc:	6812      	ldr	r2, [r2, #0]
 800d3fe:	601a      	str	r2, [r3, #0]
            (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 800d400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d402:	3330      	adds	r3, #48	; 0x30
 800d404:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d406:	f102 0148 	add.w	r1, r2, #72	; 0x48
 800d40a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d40e:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 800d412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d414:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d41a:	3348      	adds	r3, #72	; 0x48
 800d41c:	7c12      	ldrb	r2, [r2, #16]
 800d41e:	741a      	strb	r2, [r3, #16]
            (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 800d420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d422:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d428:	3348      	adds	r3, #72	; 0x48
 800d42a:	7c52      	ldrb	r2, [r2, #17]
 800d42c:	745a      	strb	r2, [r3, #17]
            (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 800d42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d430:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d436:	3348      	adds	r3, #72	; 0x48
 800d438:	7c92      	ldrb	r2, [r2, #18]
 800d43a:	749a      	strb	r2, [r3, #18]

            (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 800d43c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d43e:	f103 0218 	add.w	r2, r3, #24
 800d442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d444:	3330      	adds	r3, #48	; 0x30
 800d446:	6812      	ldr	r2, [r2, #0]
 800d448:	601a      	str	r2, [r3, #0]
            (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 800d44a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d44c:	3318      	adds	r3, #24
 800d44e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d450:	f102 0130 	add.w	r1, r2, #48	; 0x30
 800d454:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d458:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 800d45c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d45e:	f103 0218 	add.w	r2, r3, #24
 800d462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d464:	3330      	adds	r3, #48	; 0x30
 800d466:	7c12      	ldrb	r2, [r2, #16]
 800d468:	741a      	strb	r2, [r3, #16]
            (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 800d46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d46c:	f103 0218 	add.w	r2, r3, #24
 800d470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d472:	3330      	adds	r3, #48	; 0x30
 800d474:	7c52      	ldrb	r2, [r2, #17]
 800d476:	745a      	strb	r2, [r3, #17]
            (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 800d478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d47a:	f103 0218 	add.w	r2, r3, #24
 800d47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d480:	3330      	adds	r3, #48	; 0x30
 800d482:	7c92      	ldrb	r2, [r2, #18]
 800d484:	749a      	strb	r2, [r3, #18]

            (cache_entry + 1) -> fx_cached_sector_memory_buffer =   temp_storage.fx_cached_sector_memory_buffer;
 800d486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d488:	3318      	adds	r3, #24
 800d48a:	693a      	ldr	r2, [r7, #16]
 800d48c:	601a      	str	r2, [r3, #0]
            (cache_entry + 1) -> fx_cached_sector =                 temp_storage.fx_cached_sector;
 800d48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d490:	f103 0118 	add.w	r1, r3, #24
 800d494:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d498:	e9c1 2302 	strd	r2, r3, [r1, #8]
            (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    temp_storage.fx_cached_sector_buffer_dirty;
 800d49c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d49e:	3318      	adds	r3, #24
 800d4a0:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d4a4:	741a      	strb	r2, [r3, #16]
            (cache_entry + 1) -> fx_cached_sector_valid =           temp_storage.fx_cached_sector_valid;
 800d4a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4a8:	3318      	adds	r3, #24
 800d4aa:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d4ae:	745a      	strb	r2, [r3, #17]
            (cache_entry + 1) -> fx_cached_sector_type =            temp_storage.fx_cached_sector_type;
 800d4b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4b2:	3318      	adds	r3, #24
 800d4b4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d4b8:	749a      	strb	r2, [r3, #18]

            /* Success, return to caller immediately!  */
            return(FX_NULL);
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	e0da      	b.n	800d674 <_fx_utility_logical_sector_cache_entry_read+0x588>
        }

        /* At this point we have a cache miss.  We need to move all of the sectors down one slot, swapping
           the 4th entry with the first.  */
        temp_storage.fx_cached_sector_memory_buffer =           (cache_entry + 3) -> fx_cached_sector_memory_buffer;
 800d4be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4c0:	3348      	adds	r3, #72	; 0x48
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	613b      	str	r3, [r7, #16]
        temp_storage.fx_cached_sector =                         (cache_entry + 3) -> fx_cached_sector;
 800d4c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4c8:	3348      	adds	r3, #72	; 0x48
 800d4ca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d4ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
        temp_storage.fx_cached_sector_buffer_dirty =            (cache_entry + 3) -> fx_cached_sector_buffer_dirty;
 800d4d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4d4:	3348      	adds	r3, #72	; 0x48
 800d4d6:	7c1b      	ldrb	r3, [r3, #16]
 800d4d8:	f887 3020 	strb.w	r3, [r7, #32]
        temp_storage.fx_cached_sector_valid =                   (cache_entry + 3) -> fx_cached_sector_valid;
 800d4dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4de:	3348      	adds	r3, #72	; 0x48
 800d4e0:	7c5b      	ldrb	r3, [r3, #17]
 800d4e2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        temp_storage.fx_cached_sector_type =                    (cache_entry + 3) -> fx_cached_sector_type;
 800d4e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4e8:	3348      	adds	r3, #72	; 0x48
 800d4ea:	7c9b      	ldrb	r3, [r3, #18]
 800d4ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

        (cache_entry + 3) -> fx_cached_sector_memory_buffer =   (cache_entry + 2) -> fx_cached_sector_memory_buffer;
 800d4f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d4f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d4f8:	3348      	adds	r3, #72	; 0x48
 800d4fa:	6812      	ldr	r2, [r2, #0]
 800d4fc:	601a      	str	r2, [r3, #0]
        (cache_entry + 3) -> fx_cached_sector =                 (cache_entry + 2) -> fx_cached_sector;
 800d4fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d500:	3330      	adds	r3, #48	; 0x30
 800d502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d504:	f102 0148 	add.w	r1, r2, #72	; 0x48
 800d508:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d50c:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 3) -> fx_cached_sector_buffer_dirty =    (cache_entry + 2) -> fx_cached_sector_buffer_dirty;
 800d510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d512:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d518:	3348      	adds	r3, #72	; 0x48
 800d51a:	7c12      	ldrb	r2, [r2, #16]
 800d51c:	741a      	strb	r2, [r3, #16]
        (cache_entry + 3) -> fx_cached_sector_valid =           (cache_entry + 2) -> fx_cached_sector_valid;
 800d51e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d520:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d526:	3348      	adds	r3, #72	; 0x48
 800d528:	7c52      	ldrb	r2, [r2, #17]
 800d52a:	745a      	strb	r2, [r3, #17]
        (cache_entry + 3) -> fx_cached_sector_type =            (cache_entry + 2) -> fx_cached_sector_type;
 800d52c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d52e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d534:	3348      	adds	r3, #72	; 0x48
 800d536:	7c92      	ldrb	r2, [r2, #18]
 800d538:	749a      	strb	r2, [r3, #18]

        (cache_entry + 2) -> fx_cached_sector_memory_buffer =   (cache_entry + 1) -> fx_cached_sector_memory_buffer;
 800d53a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d53c:	f103 0218 	add.w	r2, r3, #24
 800d540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d542:	3330      	adds	r3, #48	; 0x30
 800d544:	6812      	ldr	r2, [r2, #0]
 800d546:	601a      	str	r2, [r3, #0]
        (cache_entry + 2) -> fx_cached_sector =                 (cache_entry + 1) -> fx_cached_sector;
 800d548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d54a:	3318      	adds	r3, #24
 800d54c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d54e:	f102 0130 	add.w	r1, r2, #48	; 0x30
 800d552:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d556:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 2) -> fx_cached_sector_buffer_dirty =    (cache_entry + 1) -> fx_cached_sector_buffer_dirty;
 800d55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d55c:	f103 0218 	add.w	r2, r3, #24
 800d560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d562:	3330      	adds	r3, #48	; 0x30
 800d564:	7c12      	ldrb	r2, [r2, #16]
 800d566:	741a      	strb	r2, [r3, #16]
        (cache_entry + 2) -> fx_cached_sector_valid =           (cache_entry + 1) -> fx_cached_sector_valid;
 800d568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d56a:	f103 0218 	add.w	r2, r3, #24
 800d56e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d570:	3330      	adds	r3, #48	; 0x30
 800d572:	7c52      	ldrb	r2, [r2, #17]
 800d574:	745a      	strb	r2, [r3, #17]
        (cache_entry + 2) -> fx_cached_sector_type =            (cache_entry + 1) -> fx_cached_sector_type;
 800d576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d578:	f103 0218 	add.w	r2, r3, #24
 800d57c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d57e:	3330      	adds	r3, #48	; 0x30
 800d580:	7c92      	ldrb	r2, [r2, #18]
 800d582:	749a      	strb	r2, [r3, #18]

        (cache_entry + 1) -> fx_cached_sector_memory_buffer =   (cache_entry) -> fx_cached_sector_memory_buffer;
 800d584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d586:	3318      	adds	r3, #24
 800d588:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d58a:	6812      	ldr	r2, [r2, #0]
 800d58c:	601a      	str	r2, [r3, #0]
        (cache_entry + 1) -> fx_cached_sector =                 (cache_entry) -> fx_cached_sector;
 800d58e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d590:	f103 0118 	add.w	r1, r3, #24
 800d594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d596:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d59a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry + 1) -> fx_cached_sector_buffer_dirty =    (cache_entry) -> fx_cached_sector_buffer_dirty;
 800d59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5a0:	3318      	adds	r3, #24
 800d5a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5a4:	7c12      	ldrb	r2, [r2, #16]
 800d5a6:	741a      	strb	r2, [r3, #16]
        (cache_entry + 1) -> fx_cached_sector_valid =           (cache_entry) -> fx_cached_sector_valid;
 800d5a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5aa:	3318      	adds	r3, #24
 800d5ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5ae:	7c52      	ldrb	r2, [r2, #17]
 800d5b0:	745a      	strb	r2, [r3, #17]
        (cache_entry + 1) -> fx_cached_sector_type =            (cache_entry) -> fx_cached_sector_type;
 800d5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5b4:	3318      	adds	r3, #24
 800d5b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5b8:	7c92      	ldrb	r2, [r2, #18]
 800d5ba:	749a      	strb	r2, [r3, #18]

        (cache_entry) -> fx_cached_sector_memory_buffer =       temp_storage.fx_cached_sector_memory_buffer;
 800d5bc:	693a      	ldr	r2, [r7, #16]
 800d5be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5c0:	601a      	str	r2, [r3, #0]
        (cache_entry) -> fx_cached_sector =                     temp_storage.fx_cached_sector;
 800d5c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d5c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d5c8:	e9c1 2302 	strd	r2, r3, [r1, #8]
        (cache_entry) -> fx_cached_sector_buffer_dirty =        temp_storage.fx_cached_sector_buffer_dirty;
 800d5cc:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d5d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5d2:	741a      	strb	r2, [r3, #16]
        (cache_entry) -> fx_cached_sector_valid =               temp_storage.fx_cached_sector_valid;
 800d5d4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800d5d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5da:	745a      	strb	r2, [r3, #17]
        (cache_entry) -> fx_cached_sector_type =                temp_storage.fx_cached_sector_type;
 800d5dc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800d5e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5e2:	749a      	strb	r2, [r3, #18]

        /* Set the previous pointer to NULL to avoid the linked list update below.  */
        *previous_cache_entry =  FX_NULL;
 800d5e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	601a      	str	r2, [r3, #0]
 800d5ea:	e042      	b.n	800d672 <_fx_utility_logical_sector_cache_entry_read+0x586>
    }
    else
    {

        /* Search for an entry in the cache that matches this request.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	695b      	ldr	r3, [r3, #20]
 800d5f0:	633b      	str	r3, [r7, #48]	; 0x30
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	69db      	ldr	r3, [r3, #28]
 800d5f6:	637b      	str	r3, [r7, #52]	; 0x34
        *previous_cache_entry =  FX_NULL;
 800d5f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	601a      	str	r2, [r3, #0]

        /* Look at the cache entries until a match is found or the end of
           the cache is reached.  */
        while (cache_size--)
 800d5fe:	e033      	b.n	800d668 <_fx_utility_logical_sector_cache_entry_read+0x57c>
        {

            /* Determine if the requested sector has been found.  */
            if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 800d600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d602:	7c5b      	ldrb	r3, [r3, #17]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d025      	beq.n	800d654 <_fx_utility_logical_sector_cache_entry_read+0x568>
 800d608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d60a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d60e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d612:	4299      	cmp	r1, r3
 800d614:	bf08      	it	eq
 800d616:	4290      	cmpeq	r0, r2
 800d618:	d11c      	bne.n	800d654 <_fx_utility_logical_sector_cache_entry_read+0x568>
            {

                /* Yes, we found a match.  Simply setup the pointer to this
                   buffer and return.  */
                media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 800d61a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d61c:	681a      	ldr	r2, [r3, #0]
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	609a      	str	r2, [r3, #8]

                /* Determine if we need to update the last used list.  */
                if (*previous_cache_entry)
 800d622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d00b      	beq.n	800d642 <_fx_utility_logical_sector_cache_entry_read+0x556>

                    /* Yes, the current entry is not at the front of the list
                       so we need to change the order.  */

                    /* Link the previous entry to this entry's next pointer.  */
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 800d62a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d62c:	681b      	ldr	r3, [r3, #0]
                        cache_entry -> fx_cached_sector_next_used;
 800d62e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d630:	6952      	ldr	r2, [r2, #20]
                    (*previous_cache_entry) -> fx_cached_sector_next_used =
 800d632:	615a      	str	r2, [r3, #20]

                    /* Place this entry at the head of the list.  */
                    cache_entry -> fx_cached_sector_next_used =
                        media_ptr -> fx_media_sector_cache_list_ptr;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	69da      	ldr	r2, [r3, #28]
                    cache_entry -> fx_cached_sector_next_used =
 800d638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d63a:	615a      	str	r2, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d640:	61da      	str	r2, [r3, #28]
                }

#ifndef FX_MEDIA_STATISTICS_DISABLE

                /* Increment the number of logical sectors cache read hits.  */
                media_ptr -> fx_media_logical_sector_cache_read_hits++;
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 800d648:	1c5a      	adds	r2, r3, #1
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
#endif

                /* Success, return to caller immediately!  */
                return(FX_NULL);
 800d650:	2300      	movs	r3, #0
 800d652:	e00f      	b.n	800d674 <_fx_utility_logical_sector_cache_entry_read+0x588>
            }

            /* Otherwise, we have not found the cached entry yet.  */

            /* If there are more entries, move to the next one.  */
            if (cache_entry -> fx_cached_sector_next_used)
 800d654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d656:	695b      	ldr	r3, [r3, #20]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d005      	beq.n	800d668 <_fx_utility_logical_sector_cache_entry_read+0x57c>
            {

                *previous_cache_entry =  cache_entry;
 800d65c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d65e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d660:	601a      	str	r2, [r3, #0]
                cache_entry =           cache_entry -> fx_cached_sector_next_used;
 800d662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d664:	695b      	ldr	r3, [r3, #20]
 800d666:	637b      	str	r3, [r7, #52]	; 0x34
        while (cache_size--)
 800d668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d66a:	1e5a      	subs	r2, r3, #1
 800d66c:	633a      	str	r2, [r7, #48]	; 0x30
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d1c6      	bne.n	800d600 <_fx_utility_logical_sector_cache_entry_read+0x514>
            }
        }
    }

    /* The requested sector is not in cache, return the last cache entry.  */
    return(cache_entry);
 800d672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    FX_PARAMETER_NOT_USED(media_ptr);
    FX_PARAMETER_NOT_USED(logical_sector);
    FX_PARAMETER_NOT_USED(previous_cache_entry);
    return(FX_NULL);
#endif /* FX_DISABLE_CACHE */
}
 800d674:	4618      	mov	r0, r3
 800d676:	373c      	adds	r7, #60	; 0x3c
 800d678:	46bd      	mov	sp, r7
 800d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67e:	4770      	bx	lr

0800d680 <_fx_utility_logical_sector_flush>:
/*                                            errors without cache,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_flush(FX_MEDIA *media_ptr, ULONG64 starting_sector, ULONG64 sectors, UINT invalidate)
{
 800d680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d684:	b094      	sub	sp, #80	; 0x50
 800d686:	af00      	add	r7, sp, #0
 800d688:	61f8      	str	r0, [r7, #28]
 800d68a:	e9c7 2304 	strd	r2, r3, [r7, #16]

    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_FLUSH_EXTENSION

    /* Calculate the ending sector.  */
    ending_sector =  starting_sector + sectors - 1;
 800d68e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d692:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d696:	1884      	adds	r4, r0, r2
 800d698:	eb41 0503 	adc.w	r5, r1, r3
 800d69c:	1e63      	subs	r3, r4, #1
 800d69e:	60bb      	str	r3, [r7, #8]
 800d6a0:	f145 33ff 	adc.w	r3, r5, #4294967295
 800d6a4:	60fb      	str	r3, [r7, #12]
 800d6a6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d6aa:	e9c7 3408 	strd	r3, r4, [r7, #32]

    /* Pickup the number of dirty sectors currently in the cache.  */
    remaining_dirty =  media_ptr -> fx_media_sector_cache_dirty_count;
 800d6ae:	69fb      	ldr	r3, [r7, #28]
 800d6b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d6b2:	633b      	str	r3, [r7, #48]	; 0x30

    /* If trace is enabled, insert this event into the trace buffer.  */
    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_MEDIA_FLUSH, media_ptr, media_ptr -> fx_media_sector_cache_dirty_count, 0, 0, FX_TRACE_INTERNAL_EVENTS, 0, 0)

    /* Determine what type of cache configuration we have.  */
    if (media_ptr -> fx_media_sector_cache_hashed == FX_FALSE)
 800d6b4:	69fb      	ldr	r3, [r7, #28]
 800d6b6:	691b      	ldr	r3, [r3, #16]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	f040 80b4 	bne.w	800d826 <_fx_utility_logical_sector_flush+0x1a6>

        /* Linear cache present, simply walk through the search list until
           an unused cache entry is present.  */

        /* Flush and invalidate the internal logical sector cache.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 800d6be:	69fb      	ldr	r3, [r7, #28]
 800d6c0:	695b      	ldr	r3, [r3, #20]
 800d6c2:	64bb      	str	r3, [r7, #72]	; 0x48
        cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 800d6c4:	69fb      	ldr	r3, [r7, #28]
 800d6c6:	69db      	ldr	r3, [r3, #28]
 800d6c8:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* Look at the cache entries that have been written to.  */
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 800d6ca:	e09f      	b.n	800d80c <_fx_utility_logical_sector_flush+0x18c>
        {

            /* Determine if invalidation is not required and there are no
               more dirty sectors. */
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 800d6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d103      	bne.n	800d6da <_fx_utility_logical_sector_flush+0x5a>
 800d6d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	f000 81de 	beq.w	800da96 <_fx_utility_logical_sector_flush+0x416>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if (sectors == 0)
 800d6da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d6de:	4313      	orrs	r3, r2
 800d6e0:	f000 81db 	beq.w	800da9a <_fx_utility_logical_sector_flush+0x41a>
                /* No more sectors required to process.  */
                break;
            }

            /* Determine if this cached sector is within the specified range and is valid.  */
            if ((cache_entry -> fx_cached_sector_valid) &&
 800d6e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6e6:	7c5b      	ldrb	r3, [r3, #17]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	f000 808c 	beq.w	800d806 <_fx_utility_logical_sector_flush+0x186>
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 800d6ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6f0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
            if ((cache_entry -> fx_cached_sector_valid) &&
 800d6f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d6f8:	4290      	cmp	r0, r2
 800d6fa:	eb71 0303 	sbcs.w	r3, r1, r3
 800d6fe:	f0c0 8082 	bcc.w	800d806 <_fx_utility_logical_sector_flush+0x186>
                (cache_entry -> fx_cached_sector <= ending_sector))
 800d702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d704:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                (cache_entry -> fx_cached_sector >= starting_sector) &&
 800d708:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d70c:	4290      	cmp	r0, r2
 800d70e:	eb71 0303 	sbcs.w	r3, r1, r3
 800d712:	d378      	bcc.n	800d806 <_fx_utility_logical_sector_flush+0x186>
            {

                /* Yes, the cache entry is valid and within the specified range. Determine if
                   the requested sector has been written to.  */
                if (cache_entry -> fx_cached_sector_buffer_dirty)
 800d714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d716:	7c1b      	ldrb	r3, [r3, #16]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d04d      	beq.n	800d7b8 <_fx_utility_logical_sector_flush+0x138>
                {

                    /* Yes, write the cached sector out to the media.  */

                    /* Check for write protect at the media level (set by driver).  */
                    if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 800d71c:	69fb      	ldr	r3, [r7, #28]
 800d71e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d722:	2b00      	cmp	r3, #0
 800d724:	d148      	bne.n	800d7b8 <_fx_utility_logical_sector_flush+0x138>
                    {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                        /* Increment the number of driver write sector(s) requests.  */
                        media_ptr -> fx_media_driver_write_requests++;
 800d726:	69fb      	ldr	r3, [r7, #28]
 800d728:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800d72c:	1c5a      	adds	r2, r3, #1
 800d72e:	69fb      	ldr	r3, [r7, #28]
 800d730:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                        /* Build write request to the driver.  */
                        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800d734:	69fb      	ldr	r3, [r7, #28]
 800d736:	2201      	movs	r2, #1
 800d738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800d73c:	69fb      	ldr	r3, [r7, #28]
 800d73e:	2290      	movs	r2, #144	; 0x90
 800d740:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 800d744:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d746:	681a      	ldr	r2, [r3, #0]
 800d748:	69fb      	ldr	r3, [r7, #28]
 800d74a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                        media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                        media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 800d74e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d750:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d754:	69fb      	ldr	r3, [r7, #28]
 800d756:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                        media_ptr -> fx_media_driver_sectors =          1;
 800d75a:	69fb      	ldr	r3, [r7, #28]
 800d75c:	2201      	movs	r2, #1
 800d75e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                        media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 800d762:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d764:	7c9b      	ldrb	r3, [r3, #18]
 800d766:	461a      	mov	r2, r3
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                        /* Sectors other than FX_DATA_SECTOR will never be dirty when FX_FAULT_TOLERANT is defined. */
#ifndef FX_FAULT_TOLERANT
                        /* Determine if the system write flag needs to be set.  */
                        if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 800d76e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d770:	7c9b      	ldrb	r3, [r3, #18]
 800d772:	2b04      	cmp	r3, #4
 800d774:	d003      	beq.n	800d77e <_fx_utility_logical_sector_flush+0xfe>
                        {

                            /* Yes, a system sector write is present so set the flag.  The driver
                               can use this flag to make extra safeguards in writing the sector
                               out, yielding more fault tolerance.  */
                            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800d776:	69fb      	ldr	r3, [r7, #28]
 800d778:	2201      	movs	r2, #1
 800d77a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                        /* If trace is enabled, insert this event into the trace buffer.  */
                        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                        /* Invoke the driver to write the sector.  */
                        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800d77e:	69fb      	ldr	r3, [r7, #28]
 800d780:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d784:	69f8      	ldr	r0, [r7, #28]
 800d786:	4798      	blx	r3

                        /* Clear the system write flag.  */
                        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800d788:	69fb      	ldr	r3, [r7, #28]
 800d78a:	2200      	movs	r2, #0
 800d78c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                        /* Check for successful completion.  */
                        if (media_ptr -> fx_media_driver_status)
 800d790:	69fb      	ldr	r3, [r7, #28]
 800d792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d796:	2b00      	cmp	r3, #0
 800d798:	d003      	beq.n	800d7a2 <_fx_utility_logical_sector_flush+0x122>
                        {

                            /* Error writing a cached sector out.  Return the
                               error status.  */
                            return(media_ptr -> fx_media_driver_status);
 800d79a:	69fb      	ldr	r3, [r7, #28]
 800d79c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d7a0:	e17f      	b.n	800daa2 <_fx_utility_logical_sector_flush+0x422>
                        }

                        /* Clear the buffer dirty flag since it has been flushed
                           out.  */
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 800d7a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	741a      	strb	r2, [r3, #16]

                        /* Decrement the number of dirty sectors currently in the cache.  */
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 800d7a8:	69fb      	ldr	r3, [r7, #28]
 800d7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7ac:	1e5a      	subs	r2, r3, #1
 800d7ae:	69fb      	ldr	r3, [r7, #28]
 800d7b0:	625a      	str	r2, [r3, #36]	; 0x24
                        remaining_dirty--;
 800d7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b4:	3b01      	subs	r3, #1
 800d7b6:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                }

                /* Determine if the invalidate option is specified.  */
                if (invalidate)
 800d7b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d018      	beq.n	800d7f0 <_fx_utility_logical_sector_flush+0x170>
                {

                    /* Invalidate the cache entry.  */
                    cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 800d7be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	745a      	strb	r2, [r3, #17]

                    /* Place all ones in the sector number.  */
                    cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 800d7c4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d7c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d7ca:	f04f 33ff 	mov.w	r3, #4294967295
 800d7ce:	e9c1 2302 	strd	r2, r3, [r1, #8]

                    /* Determine if this sector is still dirty, this could be the case if
                       write protection was turned on.  */
                    if (cache_entry -> fx_cached_sector_buffer_dirty)
 800d7d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7d4:	7c1b      	ldrb	r3, [r3, #16]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d00a      	beq.n	800d7f0 <_fx_utility_logical_sector_flush+0x170>
                    {

                        /* Yes, clear the dirty flag.  */
                        cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 800d7da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d7dc:	2200      	movs	r2, #0
 800d7de:	741a      	strb	r2, [r3, #16]

                        /* Decrement the number of dirty sectors currently in the cache.  */
                        media_ptr -> fx_media_sector_cache_dirty_count--;
 800d7e0:	69fb      	ldr	r3, [r7, #28]
 800d7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7e4:	1e5a      	subs	r2, r3, #1
 800d7e6:	69fb      	ldr	r3, [r7, #28]
 800d7e8:	625a      	str	r2, [r3, #36]	; 0x24
                        remaining_dirty--;
 800d7ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ec:	3b01      	subs	r3, #1
 800d7ee:	633b      	str	r3, [r7, #48]	; 0x30
                    }
                }

                /* Decrement the number of sectors in the range that have been processed.  */
                sectors--;
 800d7f0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d7f4:	1e51      	subs	r1, r2, #1
 800d7f6:	6039      	str	r1, [r7, #0]
 800d7f8:	f143 33ff 	adc.w	r3, r3, #4294967295
 800d7fc:	607b      	str	r3, [r7, #4]
 800d7fe:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d802:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
            }

            /* Move to the next entry in the sector cache.  */
            cache_entry =  cache_entry -> fx_cached_sector_next_used;
 800d806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d808:	695b      	ldr	r3, [r3, #20]
 800d80a:	64fb      	str	r3, [r7, #76]	; 0x4c
        while ((cache_size--) && (cache_entry -> fx_cached_sector))
 800d80c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d80e:	1e5a      	subs	r2, r3, #1
 800d810:	64ba      	str	r2, [r7, #72]	; 0x48
 800d812:	2b00      	cmp	r3, #0
 800d814:	f000 8144 	beq.w	800daa0 <_fx_utility_logical_sector_flush+0x420>
 800d818:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d81a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d81e:	4313      	orrs	r3, r2
 800d820:	f47f af54 	bne.w	800d6cc <_fx_utility_logical_sector_flush+0x4c>
 800d824:	e13c      	b.n	800daa0 <_fx_utility_logical_sector_flush+0x420>
    }
    else
    {

        /* Hashed cache is present. Pickup the cache size.  */
        cache_size =            media_ptr -> fx_media_sector_cache_size;
 800d826:	69fb      	ldr	r3, [r7, #28]
 800d828:	695b      	ldr	r3, [r3, #20]
 800d82a:	64bb      	str	r3, [r7, #72]	; 0x48

        /* Initialize the loop control parameters.  */
        bit_set =  0;
 800d82c:	2300      	movs	r3, #0
 800d82e:	643b      	str	r3, [r7, #64]	; 0x40
        valid_bit_map =  media_ptr -> fx_media_sector_cache_hashed_sector_valid;
 800d830:	69fb      	ldr	r3, [r7, #28]
 800d832:	6a1b      	ldr	r3, [r3, #32]
 800d834:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine how to process the hashed cache based on the number of sectors
           to process. If the sequential sector range is less than the bit map size,
           simply use the starting sector to derive the index into the cache.  */
        if (sectors < 32)
 800d836:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d83a:	2a20      	cmp	r2, #32
 800d83c:	f173 0300 	sbcs.w	r3, r3, #0
 800d840:	d202      	bcs.n	800d848 <_fx_utility_logical_sector_flush+0x1c8>
        {
            use_starting_sector =  FX_TRUE;
 800d842:	2301      	movs	r3, #1
 800d844:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d846:	e121      	b.n	800da8c <_fx_utility_logical_sector_flush+0x40c>
        }
        else
        {
            use_starting_sector =  FX_FALSE;
 800d848:	2300      	movs	r3, #0
 800d84a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* Determine if there is anything valid in the cache.  */
        while (valid_bit_map)
 800d84c:	e11e      	b.n	800da8c <_fx_utility_logical_sector_flush+0x40c>
        {

            /* Determine if invalidation is not required and there are no
               more dirty sectors. */
            if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 800d84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d850:	2b00      	cmp	r3, #0
 800d852:	d103      	bne.n	800d85c <_fx_utility_logical_sector_flush+0x1dc>
 800d854:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d856:	2b00      	cmp	r3, #0
 800d858:	f000 8121 	beq.w	800da9e <_fx_utility_logical_sector_flush+0x41e>
                /* Yes, nothing left to do.  */
                break;
            }

            /* Determine if there are any more sectors to process.  */
            if ((sectors == 0) || (starting_sector > ending_sector))
 800d85c:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d860:	4313      	orrs	r3, r2
 800d862:	f000 811d 	beq.w	800daa0 <_fx_utility_logical_sector_flush+0x420>
 800d866:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d86a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d86e:	4290      	cmp	r0, r2
 800d870:	eb71 0303 	sbcs.w	r3, r1, r3
 800d874:	f0c0 8114 	bcc.w	800daa0 <_fx_utility_logical_sector_flush+0x420>
                /* No more sectors required to process.  */
                break;
            }

            /* Determine how to compute the hash index.  */
            if (use_starting_sector)
 800d878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d015      	beq.n	800d8aa <_fx_utility_logical_sector_flush+0x22a>
            {

                /* Calculate the hash value of this sector using the lower bits.  */
                index =  (ULONG)(starting_sector & media_ptr -> fx_media_sector_cache_hash_mask);
 800d87e:	693a      	ldr	r2, [r7, #16]
 800d880:	69fb      	ldr	r3, [r7, #28]
 800d882:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d886:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800d88a:	4013      	ands	r3, r2
 800d88c:	63bb      	str	r3, [r7, #56]	; 0x38

                /* Calculate the bit set indicating there is one or more valid sectors at this cache index.  */
                bit_set =  (index % 32);
 800d88e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d890:	f003 031f 	and.w	r3, r3, #31
 800d894:	643b      	str	r3, [r7, #64]	; 0x40

                /* Compute the actual array index by multiplying by the cache depth.  */
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 800d896:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d898:	009b      	lsls	r3, r3, #2
 800d89a:	63bb      	str	r3, [r7, #56]	; 0x38
 800d89c:	e00d      	b.n	800d8ba <_fx_utility_logical_sector_flush+0x23a>
                /* Find the next set bit.  */
                while ((valid_bit_map & 1) == 0)
                {

                    /* Otherwise, shift down the bit in the bit map.  */
                    valid_bit_map =  valid_bit_map >> 1;
 800d89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a0:	085b      	lsrs	r3, r3, #1
 800d8a2:	62fb      	str	r3, [r7, #44]	; 0x2c

                    /* Increment the set bit marker.  */
                    bit_set++;
 800d8a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	643b      	str	r3, [r7, #64]	; 0x40
                while ((valid_bit_map & 1) == 0)
 800d8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ac:	f003 0301 	and.w	r3, r3, #1
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d0f4      	beq.n	800d89e <_fx_utility_logical_sector_flush+0x21e>
                }

                /* Compute the first actual index into the hashed cache.  */
                index =  (bit_set * FX_SECTOR_CACHE_DEPTH);
 800d8b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8b6:	009b      	lsls	r3, r3, #2
 800d8b8:	63bb      	str	r3, [r7, #56]	; 0x38
            /* At this point, bit_set represents the next group of hashed sectors that could
               have valid cache entries and index represents the index into the sector cache
               of that sector group.  */

            /* Clear the remaining valid sectors for this entry in the bit map.  */
            remaining_valid =  0;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	637b      	str	r3, [r7, #52]	; 0x34
            /* Loop to check the corresponding hash entries.  */
            do
            {

                /* Setup pointer to the cache entry.  */
                cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 800d8be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d8c0:	4613      	mov	r3, r2
 800d8c2:	005b      	lsls	r3, r3, #1
 800d8c4:	4413      	add	r3, r2
 800d8c6:	00db      	lsls	r3, r3, #3
 800d8c8:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 800d8cc:	69fa      	ldr	r2, [r7, #28]
 800d8ce:	4413      	add	r3, r2
 800d8d0:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Loop to examine the full depth of the hashed cache.  */
                for (i = 0; i < 4; i++)
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	647b      	str	r3, [r7, #68]	; 0x44
 800d8d6:	e0a7      	b.n	800da28 <_fx_utility_logical_sector_flush+0x3a8>
                {

                    /* Determine if this cached sector is within the specified range and is valid.  */
                    if ((cache_entry -> fx_cached_sector_valid) &&
 800d8d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8da:	7c5b      	ldrb	r3, [r3, #17]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	f000 8089 	beq.w	800d9f4 <_fx_utility_logical_sector_flush+0x374>
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 800d8e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8e4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
                    if ((cache_entry -> fx_cached_sector_valid) &&
 800d8e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d8ec:	4290      	cmp	r0, r2
 800d8ee:	eb71 0303 	sbcs.w	r3, r1, r3
 800d8f2:	d37f      	bcc.n	800d9f4 <_fx_utility_logical_sector_flush+0x374>
                        (cache_entry -> fx_cached_sector <= ending_sector))
 800d8f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d8f6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
                        (cache_entry -> fx_cached_sector >= starting_sector) &&
 800d8fa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800d8fe:	4290      	cmp	r0, r2
 800d900:	eb71 0303 	sbcs.w	r3, r1, r3
 800d904:	d376      	bcc.n	800d9f4 <_fx_utility_logical_sector_flush+0x374>
                    {

                        /* Determine if the requested sector has been written to.  */
                        if (cache_entry -> fx_cached_sector_buffer_dirty)
 800d906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d908:	7c1b      	ldrb	r3, [r3, #16]
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d04d      	beq.n	800d9aa <_fx_utility_logical_sector_flush+0x32a>


                            /* Yes, write the cached sector out to the media.  */

                            /* Check for write protect at the media level (set by driver).  */
                            if (media_ptr -> fx_media_driver_write_protect == FX_FALSE)
 800d90e:	69fb      	ldr	r3, [r7, #28]
 800d910:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d914:	2b00      	cmp	r3, #0
 800d916:	d148      	bne.n	800d9aa <_fx_utility_logical_sector_flush+0x32a>
                            {

#ifndef FX_MEDIA_STATISTICS_DISABLE

                                /* Increment the number of driver write sector(s) requests.  */
                                media_ptr -> fx_media_driver_write_requests++;
 800d918:	69fb      	ldr	r3, [r7, #28]
 800d91a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800d91e:	1c5a      	adds	r2, r3, #1
 800d920:	69fb      	ldr	r3, [r7, #28]
 800d922:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                                /* Build Write request to the driver.  */
                                media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800d926:	69fb      	ldr	r3, [r7, #28]
 800d928:	2201      	movs	r2, #1
 800d92a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                                media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800d92e:	69fb      	ldr	r3, [r7, #28]
 800d930:	2290      	movs	r2, #144	; 0x90
 800d932:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                                media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 800d936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d938:	681a      	ldr	r2, [r3, #0]
 800d93a:	69fb      	ldr	r3, [r7, #28]
 800d93c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                                media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                                media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 800d940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d942:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d946:	69fb      	ldr	r3, [r7, #28]
 800d948:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                                media_ptr -> fx_media_driver_sectors =          1;
 800d94c:	69fb      	ldr	r3, [r7, #28]
 800d94e:	2201      	movs	r2, #1
 800d950:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                                media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 800d954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d956:	7c9b      	ldrb	r3, [r3, #18]
 800d958:	461a      	mov	r2, r3
 800d95a:	69fb      	ldr	r3, [r7, #28]
 800d95c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                                /* Sectors other than FX_DATA_SECTOR will never be dirty when FX_FAULT_TOLERANT is defined. */
#ifndef FX_FAULT_TOLERANT
                                /* Determine if the system write flag needs to be set.  */
                                if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 800d960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d962:	7c9b      	ldrb	r3, [r3, #18]
 800d964:	2b04      	cmp	r3, #4
 800d966:	d003      	beq.n	800d970 <_fx_utility_logical_sector_flush+0x2f0>
                                {

                                    /* Yes, a system sector write is present so set the flag.  The driver
                                       can use this flag to make extra safeguards in writing the sector
                                       out, yielding more fault tolerance.  */
                                    media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800d968:	69fb      	ldr	r3, [r7, #28]
 800d96a:	2201      	movs	r2, #1
 800d96c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                                /* If trace is enabled, insert this event into the trace buffer.  */
                                FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                                /* Invoke the driver to write the sector.  */
                                (media_ptr -> fx_media_driver_entry) (media_ptr);
 800d970:	69fb      	ldr	r3, [r7, #28]
 800d972:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800d976:	69f8      	ldr	r0, [r7, #28]
 800d978:	4798      	blx	r3

                                /* Clear the system write flag.  */
                                media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800d97a:	69fb      	ldr	r3, [r7, #28]
 800d97c:	2200      	movs	r2, #0
 800d97e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                                /* Check for successful completion.  */
                                if (media_ptr -> fx_media_driver_status)
 800d982:	69fb      	ldr	r3, [r7, #28]
 800d984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d003      	beq.n	800d994 <_fx_utility_logical_sector_flush+0x314>
                                {

                                    /* Error writing a cached sector out.  Return the
                                       error status.  */
                                    return(media_ptr -> fx_media_driver_status);
 800d98c:	69fb      	ldr	r3, [r7, #28]
 800d98e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d992:	e086      	b.n	800daa2 <_fx_utility_logical_sector_flush+0x422>
                                }

                                /* Clear the buffer dirty flag since it has been flushed
                                   out.  */
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 800d994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d996:	2200      	movs	r2, #0
 800d998:	741a      	strb	r2, [r3, #16]

                                /* Decrement the number of dirty sectors currently in the cache.  */
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 800d99a:	69fb      	ldr	r3, [r7, #28]
 800d99c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d99e:	1e5a      	subs	r2, r3, #1
 800d9a0:	69fb      	ldr	r3, [r7, #28]
 800d9a2:	625a      	str	r2, [r3, #36]	; 0x24
                                remaining_dirty--;
 800d9a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9a6:	3b01      	subs	r3, #1
 800d9a8:	633b      	str	r3, [r7, #48]	; 0x30
                            }
                        }

                        /* Determine if the invalidate option is specified.  */
                        if (invalidate)
 800d9aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d018      	beq.n	800d9e2 <_fx_utility_logical_sector_flush+0x362>
                        {

                            /* Invalidate the cache entry.  */
                            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 800d9b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9b2:	2200      	movs	r2, #0
 800d9b4:	745a      	strb	r2, [r3, #17]

                            /* Place all ones in the sector number.  */
                            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 800d9b6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d9b8:	f04f 32ff 	mov.w	r2, #4294967295
 800d9bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d9c0:	e9c1 2302 	strd	r2, r3, [r1, #8]

                            /* Determine if this sector is still dirty, this could be the case if
                               write protection was turned on.  */
                            if (cache_entry -> fx_cached_sector_buffer_dirty)
 800d9c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9c6:	7c1b      	ldrb	r3, [r3, #16]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d00a      	beq.n	800d9e2 <_fx_utility_logical_sector_flush+0x362>
                            {

                                /* Yes, clear the dirty flag.  */
                                cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 800d9cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9ce:	2200      	movs	r2, #0
 800d9d0:	741a      	strb	r2, [r3, #16]

                                /* Decrement the number of dirty sectors currently in the cache.  */
                                media_ptr -> fx_media_sector_cache_dirty_count--;
 800d9d2:	69fb      	ldr	r3, [r7, #28]
 800d9d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9d6:	1e5a      	subs	r2, r3, #1
 800d9d8:	69fb      	ldr	r3, [r7, #28]
 800d9da:	625a      	str	r2, [r3, #36]	; 0x24
                                remaining_dirty--;
 800d9dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9de:	3b01      	subs	r3, #1
 800d9e0:	633b      	str	r3, [r7, #48]	; 0x30
                            }
                        }

                        /* Decrement the number of sectors in the range that have been processed.  */
                        sectors--;
 800d9e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800d9e6:	f112 38ff 	adds.w	r8, r2, #4294967295
 800d9ea:	f143 39ff 	adc.w	r9, r3, #4294967295
 800d9ee:	e9c7 891c 	strd	r8, r9, [r7, #112]	; 0x70
 800d9f2:	e006      	b.n	800da02 <_fx_utility_logical_sector_flush+0x382>
                    }
                    else
                    {

                        /* Determine if the sector is valid.  */
                        if (cache_entry -> fx_cached_sector_valid)
 800d9f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9f6:	7c5b      	ldrb	r3, [r3, #17]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d002      	beq.n	800da02 <_fx_utility_logical_sector_flush+0x382>
                        {

                            /* Increment the number of still remaining but out of range sectors.  */
                            remaining_valid++;
 800d9fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9fe:	3301      	adds	r3, #1
 800da00:	637b      	str	r3, [r7, #52]	; 0x34
                        }
                    }

                    /* Determine if invalidation is not required and there are no
                       more dirty sectors. */
                    if ((remaining_dirty == 0) && (invalidate == FX_FALSE))
 800da02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da04:	2b00      	cmp	r3, #0
 800da06:	d102      	bne.n	800da0e <_fx_utility_logical_sector_flush+0x38e>
 800da08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d011      	beq.n	800da32 <_fx_utility_logical_sector_flush+0x3b2>
                        /* Yes, nothing left to do.  */
                        break;
                    }

                    /* Determine if there are any more sectors to process.  */
                    if ((sectors == 0) && (invalidate == FX_FALSE))
 800da0e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800da12:	4313      	orrs	r3, r2
 800da14:	d102      	bne.n	800da1c <_fx_utility_logical_sector_flush+0x39c>
 800da16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d00c      	beq.n	800da36 <_fx_utility_logical_sector_flush+0x3b6>
                        /* No more sectors required to process.  */
                        break;
                    }

                    /* Move to the next cache entry.  */
                    cache_entry++;
 800da1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da1e:	3318      	adds	r3, #24
 800da20:	64fb      	str	r3, [r7, #76]	; 0x4c
                for (i = 0; i < 4; i++)
 800da22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da24:	3301      	adds	r3, #1
 800da26:	647b      	str	r3, [r7, #68]	; 0x44
 800da28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da2a:	2b03      	cmp	r3, #3
 800da2c:	f67f af54 	bls.w	800d8d8 <_fx_utility_logical_sector_flush+0x258>
 800da30:	e002      	b.n	800da38 <_fx_utility_logical_sector_flush+0x3b8>
                        break;
 800da32:	bf00      	nop
 800da34:	e000      	b.n	800da38 <_fx_utility_logical_sector_flush+0x3b8>
                        break;
 800da36:	bf00      	nop
                }

                /* Move the index to the next position since the bit map can only represent 32
                   cache entries.  */
                index =  index + (32 * FX_SECTOR_CACHE_DEPTH);
 800da38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da3a:	3380      	adds	r3, #128	; 0x80
 800da3c:	63bb      	str	r3, [r7, #56]	; 0x38
            } while (index < cache_size);
 800da3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800da42:	429a      	cmp	r2, r3
 800da44:	f4ff af3b 	bcc.w	800d8be <_fx_utility_logical_sector_flush+0x23e>

            /* Determine if invalidation was required and there are no more valid sectors
               associated with this bit position.  */
            if ((invalidate) && (remaining_valid == 0))
 800da48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d00c      	beq.n	800da68 <_fx_utility_logical_sector_flush+0x3e8>
 800da4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da50:	2b00      	cmp	r3, #0
 800da52:	d109      	bne.n	800da68 <_fx_utility_logical_sector_flush+0x3e8>
            {

                /* Clear this bit position.  */
                media_ptr -> fx_media_sector_cache_hashed_sector_valid &=  ~(((ULONG)1) << bit_set);
 800da54:	69fb      	ldr	r3, [r7, #28]
 800da56:	6a1a      	ldr	r2, [r3, #32]
 800da58:	2101      	movs	r1, #1
 800da5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da5c:	fa01 f303 	lsl.w	r3, r1, r3
 800da60:	43db      	mvns	r3, r3
 800da62:	401a      	ands	r2, r3
 800da64:	69fb      	ldr	r3, [r7, #28]
 800da66:	621a      	str	r2, [r3, #32]
            }

            /* Determine if the starting sector is being used for examination of the hash.  */
            if (use_starting_sector)
 800da68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d008      	beq.n	800da80 <_fx_utility_logical_sector_flush+0x400>
            {

                /* Move to the next sector.  */
                starting_sector++;
 800da6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800da72:	f112 0a01 	adds.w	sl, r2, #1
 800da76:	f143 0b00 	adc.w	fp, r3, #0
 800da7a:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 800da7e:	e005      	b.n	800da8c <_fx_utility_logical_sector_flush+0x40c>
            }
            else
            {

                /* Move to next bit in the map.  */
                valid_bit_map =  valid_bit_map >> 1;
 800da80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da82:	085b      	lsrs	r3, r3, #1
 800da84:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Increment the set bit marker.  */
                bit_set++;
 800da86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da88:	3301      	adds	r3, #1
 800da8a:	643b      	str	r3, [r7, #64]	; 0x40
        while (valid_bit_map)
 800da8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da8e:	2b00      	cmp	r3, #0
 800da90:	f47f aedd 	bne.w	800d84e <_fx_utility_logical_sector_flush+0x1ce>
 800da94:	e004      	b.n	800daa0 <_fx_utility_logical_sector_flush+0x420>
                break;
 800da96:	bf00      	nop
 800da98:	e002      	b.n	800daa0 <_fx_utility_logical_sector_flush+0x420>
                break;
 800da9a:	bf00      	nop
 800da9c:	e000      	b.n	800daa0 <_fx_utility_logical_sector_flush+0x420>
                break;
 800da9e:	bf00      	nop
    FX_PARAMETER_NOT_USED(sectors);
    FX_PARAMETER_NOT_USED(invalidate);
#endif /* FX_DISABLE_CACHE */

    /* If we get here, return successful status to the caller.  */
    return(FX_SUCCESS);
 800daa0:	2300      	movs	r3, #0
}
 800daa2:	4618      	mov	r0, r3
 800daa4:	3750      	adds	r7, #80	; 0x50
 800daa6:	46bd      	mov	sp, r7
 800daa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800daac <_fx_utility_logical_sector_read>:
/*                                            resulting in version 6.2.0  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_read(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                      VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 800daac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dab0:	b09c      	sub	sp, #112	; 0x70
 800dab2:	af04      	add	r7, sp, #16
 800dab4:	64f8      	str	r0, [r7, #76]	; 0x4c
 800dab6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40


#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 800daba:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800dabe:	2b02      	cmp	r3, #2
 800dac0:	d106      	bne.n	800dad0 <_fx_utility_logical_sector_read+0x24>
    {

        /* Increment the number of FAT sector reads.  */
        media_ptr -> fx_media_fat_sector_reads++;
 800dac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dac4:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800dac8:	1c5a      	adds	r2, r3, #1
 800daca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dacc:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    }

    /* Increment the number of logical sectors read.  */
    media_ptr -> fx_media_logical_sector_reads++;
 800dad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dad2:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 800dad6:	1c5a      	adds	r2, r3, #1
 800dad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dada:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION

#ifndef FX_DISABLE_CACHE
    /* Determine if the request is for the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 800dade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dae0:	689a      	ldr	r2, [r3, #8]
 800dae2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dae6:	4293      	cmp	r3, r2
 800dae8:	f0c0 80d9 	bcc.w	800dc9e <_fx_utility_logical_sector_read+0x1f2>
        (((UCHAR *)buffer_ptr) <= media_ptr -> fx_media_sector_cache_end))
 800daec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800daee:	699a      	ldr	r2, [r3, #24]
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 800daf0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800daf4:	4293      	cmp	r3, r2
 800daf6:	f200 80d2 	bhi.w	800dc9e <_fx_utility_logical_sector_read+0x1f2>
    {

        /* Internal cache buffer is requested.  */

        /* Examine the logical sector cache.  */
        cache_entry = _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 800dafa:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dafe:	9300      	str	r3, [sp, #0]
 800db00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800db04:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800db06:	f7ff faf1 	bl	800d0ec <_fx_utility_logical_sector_cache_entry_read>
 800db0a:	6578      	str	r0, [r7, #84]	; 0x54

        /* Was the sector found?  */
        if (cache_entry == FX_NULL)
 800db0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d101      	bne.n	800db16 <_fx_utility_logical_sector_read+0x6a>
        {

            /* Yes, the sector was found. Return success!  */
            return(FX_SUCCESS);
 800db12:	2300      	movs	r3, #0
 800db14:	e259      	b.n	800dfca <_fx_utility_logical_sector_read+0x51e>
        /* At this point, we need to read in a sector from the media.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of logical sectors cache read misses.  */
        media_ptr -> fx_media_logical_sector_cache_read_misses++;
 800db16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db18:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800db1c:	1c5a      	adds	r2, r3, #1
 800db1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db20:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_LOG_SECTOR_CACHE_MISS, media_ptr, logical_sector, 0, media_ptr -> fx_media_sector_cache_size, FX_TRACE_INTERNAL_EVENTS, 0, 0)
#endif

        /* First, check and see if the last used entry has been
           modified.  */
        if ((cache_entry -> fx_cached_sector_valid) &&
 800db24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db26:	7c5b      	ldrb	r3, [r3, #17]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d049      	beq.n	800dbc0 <_fx_utility_logical_sector_read+0x114>
            (cache_entry -> fx_cached_sector_buffer_dirty))
 800db2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db2e:	7c1b      	ldrb	r3, [r3, #16]
        if ((cache_entry -> fx_cached_sector_valid) &&
 800db30:	2b00      	cmp	r3, #0
 800db32:	d045      	beq.n	800dbc0 <_fx_utility_logical_sector_read+0x114>
               before we read in the new buffer.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

            /* Increment the number of driver write sector(s) requests.  */
            media_ptr -> fx_media_driver_write_requests++;
 800db34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db36:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800db3a:	1c5a      	adds	r2, r3, #1
 800db3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db3e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

            /* Build write request to the driver.  */
            media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800db42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db44:	2201      	movs	r2, #1
 800db46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
            media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800db4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db4c:	2290      	movs	r2, #144	; 0x90
 800db4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 800db52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
            media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
            media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 800db5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db5e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800db62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
            media_ptr -> fx_media_driver_sectors =          1;
 800db68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db6a:	2201      	movs	r2, #1
 800db6c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
            media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 800db70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db72:	7c9b      	ldrb	r3, [r3, #18]
 800db74:	461a      	mov	r2, r3
 800db76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db78:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

            /* Determine if the sector is a data sector or a system sector.  */
            if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 800db7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800db7e:	7c9b      	ldrb	r3, [r3, #18]
 800db80:	2b04      	cmp	r3, #4
 800db82:	d003      	beq.n	800db8c <_fx_utility_logical_sector_read+0xe0>
            {

                /* System sector is present.  */
                media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800db84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db86:	2201      	movs	r2, #1
 800db88:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* If trace is enabled, insert this event into the trace buffer.  */
            FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

            /* Invoke the driver to write the sector.  */
            (media_ptr -> fx_media_driver_entry) (media_ptr);
 800db8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800db92:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800db94:	4798      	blx	r3

            /* Clear the system write flag.  */
            media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800db96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db98:	2200      	movs	r2, #0
 800db9a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

            /* Check for successful completion.  */
            if (media_ptr -> fx_media_driver_status)
 800db9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d003      	beq.n	800dbb0 <_fx_utility_logical_sector_read+0x104>
            {

                /* Error writing a cached sector out.  Return the
                   error status.  */
                return(media_ptr -> fx_media_driver_status);
 800dba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dbae:	e20c      	b.n	800dfca <_fx_utility_logical_sector_read+0x51e>
            }

            /* Clear the buffer dirty flag since it has been flushed
               out.  */
            cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 800dbb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	741a      	strb	r2, [r3, #16]

            /* Decrement the number of outstanding dirty cache entries.  */
            media_ptr -> fx_media_sector_cache_dirty_count--;
 800dbb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbba:	1e5a      	subs	r2, r3, #1
 800dbbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbbe:	625a      	str	r2, [r3, #36]	; 0x24

        /* At this point, we can go out and setup this cached sector
           entry.  */

        /* Compare against logical sector to make sure it is valid.  */
        if (logical_sector >= media_ptr -> fx_media_total_sectors)
 800dbc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbc2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dbc6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800dbca:	4290      	cmp	r0, r2
 800dbcc:	eb71 0303 	sbcs.w	r3, r1, r3
 800dbd0:	d301      	bcc.n	800dbd6 <_fx_utility_logical_sector_read+0x12a>
        {
            return(FX_SECTOR_INVALID);
 800dbd2:	2389      	movs	r3, #137	; 0x89
 800dbd4:	e1f9      	b.n	800dfca <_fx_utility_logical_sector_read+0x51e>
        }

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800dbd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbd8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800dbdc:	1c5a      	adds	r2, r3, #1
 800dbde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbe0:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
#endif

        /* Build Read request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800dbe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800dbec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbee:	2290      	movs	r2, #144	; 0x90
 800dbf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 800dbf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dbf6:	681a      	ldr	r2, [r3, #0]
 800dbf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbfa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 800dbfe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dc00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc02:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          1;
 800dc06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc08:	2201      	movs	r2, #1
 800dc0a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 800dc0e:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 800dc12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc14:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 800dc18:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800dc1c:	2b04      	cmp	r3, #4
 800dc1e:	d103      	bne.n	800dc28 <_fx_utility_logical_sector_read+0x17c>
        {

            /* Data sector is present.  */
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 800dc20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc22:	2201      	movs	r2, #1
 800dc24:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800dc28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc2a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800dc2e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dc30:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 800dc32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc34:	2200      	movs	r2, #0
 800dc36:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* Determine if the read was successful.  */
        if (media_ptr -> fx_media_driver_status == FX_SUCCESS)
 800dc3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d11a      	bne.n	800dc7a <_fx_utility_logical_sector_read+0x1ce>
        {

            /* Remember the sector number.  */
            cache_entry -> fx_cached_sector =  logical_sector;
 800dc44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dc46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dc4a:	e9c1 2302 	strd	r2, r3, [r1, #8]

            /* Make the cache entry valid.  */
            cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 800dc4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc50:	2201      	movs	r2, #1
 800dc52:	745a      	strb	r2, [r3, #17]

            /* Remember the sector type.  */
            cache_entry -> fx_cached_sector_type =  sector_type;
 800dc54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc56:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 800dc5a:	749a      	strb	r2, [r3, #18]

            /* Place this entry that the head of the cached sector
               list.  */

            /* Determine if we need to update the last used list.  */
            if (previous_cache_entry)
 800dc5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d015      	beq.n	800dc8e <_fx_utility_logical_sector_read+0x1e2>

                /* Yes, the current entry is not at the front of the list
                   so we need to change the order.  */

                /* Link the previous entry to this entry's next pointer.  */
                previous_cache_entry -> fx_cached_sector_next_used =
 800dc62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                    cache_entry -> fx_cached_sector_next_used;
 800dc64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dc66:	6952      	ldr	r2, [r2, #20]
                previous_cache_entry -> fx_cached_sector_next_used =
 800dc68:	615a      	str	r2, [r3, #20]

                /* Place this entry at the head of the list.  */
                cache_entry -> fx_cached_sector_next_used =
                    media_ptr -> fx_media_sector_cache_list_ptr;
 800dc6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc6c:	69da      	ldr	r2, [r3, #28]
                cache_entry -> fx_cached_sector_next_used =
 800dc6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc70:	615a      	str	r2, [r3, #20]
                media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 800dc72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dc76:	61da      	str	r2, [r3, #28]
 800dc78:	e009      	b.n	800dc8e <_fx_utility_logical_sector_read+0x1e2>
        }
        else
        {

            /* Invalidate the cache entry on read errors.  */
            cache_entry -> fx_cached_sector_valid =  FX_FALSE;
 800dc7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	745a      	strb	r2, [r3, #17]

            /* Put all ones in the sector value.  */
            cache_entry -> fx_cached_sector =  (~(ULONG64)0);
 800dc80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dc82:	f04f 32ff 	mov.w	r2, #4294967295
 800dc86:	f04f 33ff 	mov.w	r3, #4294967295
 800dc8a:	e9c1 2302 	strd	r2, r3, [r1, #8]
        }

        /* Simply setup the pointer to this buffer and return.  */
        media_ptr -> fx_media_memory_buffer =  cache_entry -> fx_cached_sector_memory_buffer;
 800dc8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dc90:	681a      	ldr	r2, [r3, #0]
 800dc92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc94:	609a      	str	r2, [r3, #8]

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 800dc96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc9c:	e195      	b.n	800dfca <_fx_utility_logical_sector_read+0x51e>
    {

        /* Direct I/O to application buffer area.  */

        /* Compare against logical sector to make sure it is valid.  */
        if ((logical_sector + sectors - 1) > (ULONG)media_ptr -> fx_media_total_sectors)
 800dc9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dca2:	2200      	movs	r2, #0
 800dca4:	469a      	mov	sl, r3
 800dca6:	4693      	mov	fp, r2
 800dca8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dcac:	eb1a 0402 	adds.w	r4, sl, r2
 800dcb0:	eb4b 0503 	adc.w	r5, fp, r3
 800dcb4:	f114 38ff 	adds.w	r8, r4, #4294967295
 800dcb8:	f145 39ff 	adc.w	r9, r5, #4294967295
 800dcbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcbe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	63ba      	str	r2, [r7, #56]	; 0x38
 800dcc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dcc8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800dccc:	460b      	mov	r3, r1
 800dcce:	4543      	cmp	r3, r8
 800dcd0:	4613      	mov	r3, r2
 800dcd2:	eb73 0309 	sbcs.w	r3, r3, r9
 800dcd6:	d22c      	bcs.n	800dd32 <_fx_utility_logical_sector_read+0x286>
        {
            return(FX_SECTOR_INVALID);
 800dcd8:	2389      	movs	r3, #137	; 0x89
 800dcda:	e176      	b.n	800dfca <_fx_utility_logical_sector_read+0x51e>
        /* Attempt to fill the beginning of the buffer from cached sectors.  */
        while (sectors)
        {

            /* Determine if the sector is in the cache.  */
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry))
 800dcdc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dce0:	9300      	str	r3, [sp, #0]
 800dce2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dce6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dce8:	f7ff fa00 	bl	800d0ec <_fx_utility_logical_sector_cache_entry_read>
 800dcec:	4603      	mov	r3, r0
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d124      	bne.n	800dd3c <_fx_utility_logical_sector_read+0x290>
                /* Not in the cache - get out of the loop!  */
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, buffer_ptr, media_ptr -> fx_media_bytes_per_sector); /* Use case of memcpy is verified. */
 800dcf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcf4:	6898      	ldr	r0, [r3, #8]
 800dcf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dcf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800dd00:	f000 fad0 	bl	800e2a4 <_fx_utility_memory_copy>

            /* Advance the destination buffer.  */
            buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 800dd04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd08:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dd0c:	4413      	add	r3, r2
 800dd0e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

            /* Advance the sector and decrement the number of sectors left.  */
            logical_sector++;
 800dd12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dd16:	1c51      	adds	r1, r2, #1
 800dd18:	61b9      	str	r1, [r7, #24]
 800dd1a:	f143 0300 	adc.w	r3, r3, #0
 800dd1e:	61fb      	str	r3, [r7, #28]
 800dd20:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800dd24:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
            sectors--;
 800dd28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dd2c:	3b01      	subs	r3, #1
 800dd2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (sectors)
 800dd32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d1d0      	bne.n	800dcdc <_fx_utility_logical_sector_read+0x230>
 800dd3a:	e000      	b.n	800dd3e <_fx_utility_logical_sector_read+0x292>
                break;
 800dd3c:	bf00      	nop
        }

        /* Calculate the end sector.  */
        end_sector = logical_sector + sectors - 1;
 800dd3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dd42:	2200      	movs	r2, #0
 800dd44:	633b      	str	r3, [r7, #48]	; 0x30
 800dd46:	637a      	str	r2, [r7, #52]	; 0x34
 800dd48:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dd4c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800dd50:	4621      	mov	r1, r4
 800dd52:	1889      	adds	r1, r1, r2
 800dd54:	62b9      	str	r1, [r7, #40]	; 0x28
 800dd56:	4629      	mov	r1, r5
 800dd58:	eb43 0101 	adc.w	r1, r3, r1
 800dd5c:	62f9      	str	r1, [r7, #44]	; 0x2c
 800dd5e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800dd62:	460b      	mov	r3, r1
 800dd64:	3b01      	subs	r3, #1
 800dd66:	613b      	str	r3, [r7, #16]
 800dd68:	4613      	mov	r3, r2
 800dd6a:	f143 33ff 	adc.w	r3, r3, #4294967295
 800dd6e:	617b      	str	r3, [r7, #20]
 800dd70:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800dd74:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58

        /* Attempt to fill the end of the buffer from the opposite direction.  */
        while (sectors)
 800dd78:	e02b      	b.n	800ddd2 <_fx_utility_logical_sector_read+0x326>
        {

            /* Determine if the sector is in the cache.  */
            if (_fx_utility_logical_sector_cache_entry_read(media_ptr, end_sector, &previous_cache_entry))
 800dd7a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800dd7e:	9300      	str	r3, [sp, #0]
 800dd80:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800dd84:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dd86:	f7ff f9b1 	bl	800d0ec <_fx_utility_logical_sector_cache_entry_read>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d125      	bne.n	800dddc <_fx_utility_logical_sector_read+0x330>
                /* Not in the cache - get out of the loop!  */
                break;
            }

            /* Yes, sector is in the cache. Copy the data from the cache to the destination buffer.  */
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 800dd90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dd92:	6898      	ldr	r0, [r3, #8]
                                    ((UCHAR *)buffer_ptr) + ((sectors - 1) * media_ptr -> fx_media_bytes_per_sector),
 800dd94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dd98:	3b01      	subs	r3, #1
 800dd9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dd9c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800dd9e:	fb02 f303 	mul.w	r3, r2, r3
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 800dda2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800dda6:	18d1      	adds	r1, r2, r3
                                    media_ptr -> fx_media_bytes_per_sector);
 800dda8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ddaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            _fx_utility_memory_copy(media_ptr -> fx_media_memory_buffer, /* Use case of memcpy is verified. */
 800ddac:	461a      	mov	r2, r3
 800ddae:	f000 fa79 	bl	800e2a4 <_fx_utility_memory_copy>

            /* Move sector to previous sector and decrement the number of sectors left.  */
            end_sector--;
 800ddb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ddb6:	1e51      	subs	r1, r2, #1
 800ddb8:	60b9      	str	r1, [r7, #8]
 800ddba:	f143 33ff 	adc.w	r3, r3, #4294967295
 800ddbe:	60fb      	str	r3, [r7, #12]
 800ddc0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800ddc4:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
            sectors--;
 800ddc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ddcc:	3b01      	subs	r3, #1
 800ddce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        while (sectors)
 800ddd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d1cf      	bne.n	800dd7a <_fx_utility_logical_sector_read+0x2ce>
 800ddda:	e000      	b.n	800ddde <_fx_utility_logical_sector_read+0x332>
                break;
 800dddc:	bf00      	nop
        }

        /* Determine if there are still sectors left to read.  */
        if (sectors == 0)
 800ddde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d101      	bne.n	800ddea <_fx_utility_logical_sector_read+0x33e>
        {

            /* No more sectors to read - return success!  */
            return(FX_SUCCESS);
 800dde6:	2300      	movs	r3, #0
 800dde8:	e0ef      	b.n	800dfca <_fx_utility_logical_sector_read+0x51e>
        }

        /* Flush and invalidate any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 800ddea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ddee:	2200      	movs	r2, #0
 800ddf0:	623b      	str	r3, [r7, #32]
 800ddf2:	627a      	str	r2, [r7, #36]	; 0x24
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	9302      	str	r3, [sp, #8]
 800ddf8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800ddfc:	e9cd 3400 	strd	r3, r4, [sp]
 800de00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800de04:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800de06:	f7ff fc3b 	bl	800d680 <_fx_utility_logical_sector_flush>
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver read sector(s) requests.  */
        media_ptr -> fx_media_driver_read_requests++;
 800de0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de0c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800de10:	1c5a      	adds	r2, r3, #1
 800de12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de14:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
#endif

        /* Build read request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_READ;
 800de18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de1a:	2200      	movs	r2, #0
 800de1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800de20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de22:	2290      	movs	r2, #144	; 0x90
 800de24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800de28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800de2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 800de32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800de34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de36:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 800de3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de3c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800de40:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 800de44:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 800de48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de4a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the sector is a data sector or a system sector.  */
        if (sector_type == FX_DATA_SECTOR)
 800de4e:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800de52:	2b04      	cmp	r3, #4
 800de54:	d103      	bne.n	800de5e <_fx_utility_logical_sector_read+0x3b2>
        {

            /* Data sector is present.  */
            media_ptr -> fx_media_driver_data_sector_read =  FX_TRUE;
 800de56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de58:	2201      	movs	r2, #1
 800de5a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_READ, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to read the sector.  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800de5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de60:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800de64:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800de66:	4798      	blx	r3

        /* Clear data sector is present flag.  */
        media_ptr -> fx_media_driver_data_sector_read =  FX_FALSE;
 800de68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de6a:	2200      	movs	r2, #0
 800de6c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

#ifndef FX_DISABLE_DIRECT_DATA_READ_CACHE_FILL

        /* Determine if the read was successful and if number of sectors just read will
           reasonably fit into the cache.  */
        if ((media_ptr -> fx_media_driver_status == FX_SUCCESS) && (sectors < (media_ptr -> fx_media_sector_cache_size / 4)))
 800de70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800de76:	2b00      	cmp	r3, #0
 800de78:	f040 80a4 	bne.w	800dfc4 <_fx_utility_logical_sector_read+0x518>
 800de7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de7e:	695b      	ldr	r3, [r3, #20]
 800de80:	089b      	lsrs	r3, r3, #2
 800de82:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800de86:	429a      	cmp	r2, r3
 800de88:	f080 809c 	bcs.w	800dfc4 <_fx_utility_logical_sector_read+0x518>

            /* Yes, read of direct sectors was successful.  */

            /* Copy the sectors directly read into the cache so they are available on
               subsequent read requests.  */
            while (sectors)
 800de8c:	e095      	b.n	800dfba <_fx_utility_logical_sector_read+0x50e>
            {

                /* Attempt to read the cache entry.  */
                cache_entry =  _fx_utility_logical_sector_cache_entry_read(media_ptr, logical_sector, &previous_cache_entry);
 800de8e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800de92:	9300      	str	r3, [sp, #0]
 800de94:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800de98:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800de9a:	f7ff f927 	bl	800d0ec <_fx_utility_logical_sector_cache_entry_read>
 800de9e:	6578      	str	r0, [r7, #84]	; 0x54
                FX_UTILITY_LOGICAL_SECTOR_READ_EXTENSION_1

                /* At this point, a cache entry should always be present since we invalidated
                   the cache over this sector range previously. In any case, check for the error
                   condition.  */
                if (cache_entry == FX_NULL)
 800dea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d101      	bne.n	800deaa <_fx_utility_logical_sector_read+0x3fe>
                {

                    /* This case should never happen, however, if it does simply give up on updating the
                       cache with the sectors from the direct read.  */
                    return(FX_SUCCESS);
 800dea6:	2300      	movs	r3, #0
 800dea8:	e08f      	b.n	800dfca <_fx_utility_logical_sector_read+0x51e>
                }

                /* Determine if the cache entry is dirty and needs to be written out before it is used.  */
                if ((cache_entry -> fx_cached_sector_valid) &&
 800deaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800deac:	7c5b      	ldrb	r3, [r3, #17]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d049      	beq.n	800df46 <_fx_utility_logical_sector_read+0x49a>
                    (cache_entry -> fx_cached_sector_buffer_dirty))
 800deb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800deb4:	7c1b      	ldrb	r3, [r3, #16]
                if ((cache_entry -> fx_cached_sector_valid) &&
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d045      	beq.n	800df46 <_fx_utility_logical_sector_read+0x49a>
                       before we read in the new buffer.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

                    /* Increment the number of driver write sector(s) requests.  */
                    media_ptr -> fx_media_driver_write_requests++;
 800deba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800debc:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800dec0:	1c5a      	adds	r2, r3, #1
 800dec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dec4:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

                    /* Build write request to the driver.  */
                    media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800dec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deca:	2201      	movs	r2, #1
 800decc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
                    media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800ded0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ded2:	2290      	movs	r2, #144	; 0x90
 800ded4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
                    media_ptr -> fx_media_driver_buffer =           cache_entry -> fx_cached_sector_memory_buffer;
 800ded8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800deda:	681a      	ldr	r2, [r3, #0]
 800dedc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dede:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
                    media_ptr -> fx_media_driver_logical_sector =   cache_entry -> fx_cached_sector;
#else
                    media_ptr -> fx_media_driver_logical_sector =   (ULONG)cache_entry -> fx_cached_sector;
 800dee2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dee4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800dee8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800deea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
                    media_ptr -> fx_media_driver_sectors =          1;
 800deee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800def0:	2201      	movs	r2, #1
 800def2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
                    media_ptr -> fx_media_driver_sector_type =      cache_entry -> fx_cached_sector_type;
 800def6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800def8:	7c9b      	ldrb	r3, [r3, #18]
 800defa:	461a      	mov	r2, r3
 800defc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800defe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

                    /* Only data sectors may be dirty when FX_FAULT_TOLERANT is defined */
#ifndef FX_FAULT_TOLERANT
                    /* Determine if the sector is a data sector or a system sector.  */
                    if (cache_entry -> fx_cached_sector_type != FX_DATA_SECTOR)
 800df02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df04:	7c9b      	ldrb	r3, [r3, #18]
 800df06:	2b04      	cmp	r3, #4
 800df08:	d003      	beq.n	800df12 <_fx_utility_logical_sector_read+0x466>
                    {

                        /* System sector is present.  */
                        media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800df0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df0c:	2201      	movs	r2, #1
 800df0e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, cache_entry -> fx_cached_sector, 1, cache_entry -> fx_cached_sector_memory_buffer, FX_TRACE_INTERNAL_EVENTS, 0, 0)

                    /* Invoke the driver to write the sector.  */
                    (media_ptr -> fx_media_driver_entry) (media_ptr);
 800df12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df14:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800df18:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800df1a:	4798      	blx	r3

                    /* Clear the system write flag.  */
                    media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800df1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df1e:	2200      	movs	r2, #0
 800df20:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

                    /* Check for successful completion.  */
                    if (media_ptr -> fx_media_driver_status)
 800df24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d003      	beq.n	800df36 <_fx_utility_logical_sector_read+0x48a>
                    {

                        /* Error writing a cached sector out.  Return the
                           error status.  */
                        return(media_ptr -> fx_media_driver_status);
 800df2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df34:	e049      	b.n	800dfca <_fx_utility_logical_sector_read+0x51e>
                    }

                    /* Clear the buffer dirty flag since it has been flushed
                       out.  */
                    cache_entry -> fx_cached_sector_buffer_dirty =  FX_FALSE;
 800df36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df38:	2200      	movs	r2, #0
 800df3a:	741a      	strb	r2, [r3, #16]

                    /* Decrement the number of outstanding dirty cache entries.  */
                    media_ptr -> fx_media_sector_cache_dirty_count--;
 800df3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df40:	1e5a      	subs	r2, r3, #1
 800df42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df44:	625a      	str	r2, [r3, #36]	; 0x24
                }

                /* Now setup the cache entry with information from the new sector.  */

                /* Remember the sector number.  */
                cache_entry -> fx_cached_sector =  logical_sector;
 800df46:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800df48:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800df4c:	e9c1 2302 	strd	r2, r3, [r1, #8]

                /* Make the cache entry valid.  */
                cache_entry -> fx_cached_sector_valid =  FX_TRUE;
 800df50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df52:	2201      	movs	r2, #1
 800df54:	745a      	strb	r2, [r3, #17]

                /* Remember the sector type.  */
                cache_entry -> fx_cached_sector_type =  sector_type;
 800df56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df58:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 800df5c:	749a      	strb	r2, [r3, #18]

                /* Place this entry that the head of the cached sector
                   list.  */

                /* Determine if we need to update the last used list.  */
                if (previous_cache_entry)
 800df5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df60:	2b00      	cmp	r3, #0
 800df62:	d00a      	beq.n	800df7a <_fx_utility_logical_sector_read+0x4ce>

                    /* Yes, the current entry is not at the front of the list
                       so we need to change the order.  */

                    /* Link the previous entry to this entry's next pointer.  */
                    previous_cache_entry -> fx_cached_sector_next_used =
 800df64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                        cache_entry -> fx_cached_sector_next_used;
 800df66:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800df68:	6952      	ldr	r2, [r2, #20]
                    previous_cache_entry -> fx_cached_sector_next_used =
 800df6a:	615a      	str	r2, [r3, #20]

                    /* Place this entry at the head of the list.  */
                    cache_entry -> fx_cached_sector_next_used =
                        media_ptr -> fx_media_sector_cache_list_ptr;
 800df6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df6e:	69da      	ldr	r2, [r3, #28]
                    cache_entry -> fx_cached_sector_next_used =
 800df70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df72:	615a      	str	r2, [r3, #20]
                    media_ptr -> fx_media_sector_cache_list_ptr =  cache_entry;
 800df74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800df78:	61da      	str	r2, [r3, #28]
                }

                /* Copy the data from the destination buffer to the cache entry.  */
                _fx_utility_memory_copy(buffer_ptr, /* Use case of memcpy is verified. */
 800df7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800df7c:	6819      	ldr	r1, [r3, #0]
                                        cache_entry -> fx_cached_sector_memory_buffer,
                                        media_ptr -> fx_media_bytes_per_sector);
 800df7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                _fx_utility_memory_copy(buffer_ptr, /* Use case of memcpy is verified. */
 800df82:	461a      	mov	r2, r3
 800df84:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800df88:	f000 f98c 	bl	800e2a4 <_fx_utility_memory_copy>

                /* Advance the destination buffer.  */
                buffer_ptr =  ((UCHAR *)buffer_ptr) + media_ptr -> fx_media_bytes_per_sector;
 800df8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800df8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df90:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800df94:	4413      	add	r3, r2
 800df96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                /* Advance the source sector and decrement the sector count.  */
                logical_sector++;
 800df9a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800df9e:	1c51      	adds	r1, r2, #1
 800dfa0:	6039      	str	r1, [r7, #0]
 800dfa2:	f143 0300 	adc.w	r3, r3, #0
 800dfa6:	607b      	str	r3, [r7, #4]
 800dfa8:	e9d7 3400 	ldrd	r3, r4, [r7]
 800dfac:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                sectors--;
 800dfb0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dfb4:	3b01      	subs	r3, #1
 800dfb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
            while (sectors)
 800dfba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	f47f af65 	bne.w	800de8e <_fx_utility_logical_sector_read+0x3e2>
            }
        }
#endif

        /* Return the driver status.  */
        return(media_ptr -> fx_media_driver_status);
 800dfc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dfc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3760      	adds	r7, #96	; 0x60
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800dfd4 <_fx_utility_logical_sector_write>:
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _fx_utility_logical_sector_write(FX_MEDIA *media_ptr, ULONG64 logical_sector,
                                       VOID *buffer_ptr, ULONG sectors, UCHAR sector_type)
{
 800dfd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dfd8:	b096      	sub	sp, #88	; 0x58
 800dfda:	af04      	add	r7, sp, #16
 800dfdc:	62f8      	str	r0, [r7, #44]	; 0x2c
 800dfde:	e9c7 2308 	strd	r2, r3, [r7, #32]
#ifndef FX_DISABLE_CACHE
FX_CACHED_SECTOR *cache_entry;
UINT              cache_size;
UINT              index;
UINT              i;
UCHAR             cache_found = FX_FALSE;
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

    /* Determine if the request is for FAT sector.  */
    if (sector_type == FX_FAT_SECTOR)
 800dfe8:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800dfec:	2b02      	cmp	r3, #2
 800dfee:	d106      	bne.n	800dffe <_fx_utility_logical_sector_write+0x2a>
    {

        /* Increment the number of FAT sector writes.  */
        media_ptr -> fx_media_fat_sector_writes++;
 800dff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dff2:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800dff6:	1c5a      	adds	r2, r3, #1
 800dff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dffa:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    }

    /* Increment the number of logical sectors written.  */
    media_ptr -> fx_media_logical_sector_writes++;
 800dffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e000:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800e004:	1c5a      	adds	r2, r3, #1
 800e006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e008:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
    /* Extended port-specific processing macro, which is by default defined to white space.  */
    FX_UTILITY_LOGICAL_SECTOR_WRITE_EXTENSION

#ifndef FX_DISABLE_CACHE
    /* Determine if the request is from the internal media buffer area.  */
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 800e00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e00e:	689a      	ldr	r2, [r3, #8]
 800e010:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e012:	4293      	cmp	r3, r2
 800e014:	f0c0 80d8 	bcc.w	800e1c8 <_fx_utility_logical_sector_write+0x1f4>
        (((UCHAR *)buffer_ptr) <= media_ptr -> fx_media_sector_cache_end))
 800e018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e01a:	699a      	ldr	r2, [r3, #24]
    if ((((UCHAR *)buffer_ptr) >= media_ptr -> fx_media_memory_buffer) &&
 800e01c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e01e:	4293      	cmp	r3, r2
 800e020:	f200 80d2 	bhi.w	800e1c8 <_fx_utility_logical_sector_write+0x1f4>
    {

        /* Internal cache buffer is requested.  */

        /* Determine if the logical sector cache access should use the hash function.  */
        if (media_ptr -> fx_media_sector_cache_hashed)
 800e024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e026:	691b      	ldr	r3, [r3, #16]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d030      	beq.n	800e08e <_fx_utility_logical_sector_write+0xba>
        {

            /* Calculate the area of the cache for this logical sector.  */
            index =  (ULONG)(logical_sector & media_ptr -> fx_media_sector_cache_hash_mask) * FX_SECTOR_CACHE_DEPTH;
 800e02c:	6a3a      	ldr	r2, [r7, #32]
 800e02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e030:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800e034:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
 800e038:	4013      	ands	r3, r2
 800e03a:	009b      	lsls	r3, r3, #2
 800e03c:	637b      	str	r3, [r7, #52]	; 0x34

            /* Build a pointer to the cache entry.  */
            cache_entry =  &(media_ptr -> fx_media_sector_cache[index]);
 800e03e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e040:	4613      	mov	r3, r2
 800e042:	005b      	lsls	r3, r3, #1
 800e044:	4413      	add	r3, r2
 800e046:	00db      	lsls	r3, r3, #3
 800e048:	f503 634a 	add.w	r3, r3, #3232	; 0xca0
 800e04c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e04e:	4413      	add	r3, r2
 800e050:	647b      	str	r3, [r7, #68]	; 0x44

            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 800e052:	2300      	movs	r3, #0
 800e054:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e056:	e016      	b.n	800e086 <_fx_utility_logical_sector_write+0xb2>
            {


                /* Determine if the logical sector is in the cache - assuming the depth of the
                   sector cache is 4 entries.  */
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 800e058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e05a:	7c5b      	ldrb	r3, [r3, #17]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d00c      	beq.n	800e07a <_fx_utility_logical_sector_write+0xa6>
 800e060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e062:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800e066:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e06a:	4299      	cmp	r1, r3
 800e06c:	bf08      	it	eq
 800e06e:	4290      	cmpeq	r0, r2
 800e070:	d103      	bne.n	800e07a <_fx_utility_logical_sector_write+0xa6>
                {
                    cache_found = FX_TRUE;
 800e072:	2301      	movs	r3, #1
 800e074:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    break;
 800e078:	e02d      	b.n	800e0d6 <_fx_utility_logical_sector_write+0x102>
            for (i = 0; i < FX_SECTOR_CACHE_DEPTH; i++, cache_entry++)
 800e07a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e07c:	3301      	adds	r3, #1
 800e07e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e080:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e082:	3318      	adds	r3, #24
 800e084:	647b      	str	r3, [r7, #68]	; 0x44
 800e086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e088:	2b03      	cmp	r3, #3
 800e08a:	d9e5      	bls.n	800e058 <_fx_utility_logical_sector_write+0x84>
 800e08c:	e023      	b.n	800e0d6 <_fx_utility_logical_sector_write+0x102>
        }
        else
        {

            /* Search for an entry in the cache that matches this request.  */
            cache_size =            media_ptr -> fx_media_sector_cache_size;
 800e08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e090:	695b      	ldr	r3, [r3, #20]
 800e092:	643b      	str	r3, [r7, #64]	; 0x40
            cache_entry =           media_ptr -> fx_media_sector_cache_list_ptr;
 800e094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e096:	69db      	ldr	r3, [r3, #28]
 800e098:	647b      	str	r3, [r7, #68]	; 0x44

            /* Look at the cache entries until a match is found or the end of
               the cache is reached.  */
            while (cache_size--)
 800e09a:	e017      	b.n	800e0cc <_fx_utility_logical_sector_write+0xf8>
            {

                /* Determine if the requested sector has been found.  */
                if ((cache_entry -> fx_cached_sector_valid) && (cache_entry -> fx_cached_sector == logical_sector))
 800e09c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e09e:	7c5b      	ldrb	r3, [r3, #17]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d00c      	beq.n	800e0be <_fx_utility_logical_sector_write+0xea>
 800e0a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0a6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800e0aa:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800e0ae:	4299      	cmp	r1, r3
 800e0b0:	bf08      	it	eq
 800e0b2:	4290      	cmpeq	r0, r2
 800e0b4:	d103      	bne.n	800e0be <_fx_utility_logical_sector_write+0xea>
                {
                    cache_found = FX_TRUE;
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
                    break;
 800e0bc:	e00b      	b.n	800e0d6 <_fx_utility_logical_sector_write+0x102>
                }

                /* Otherwise, we have not found the cached entry yet.  */

                /* If there are more entries, move to the next one.  */
                if (cache_entry -> fx_cached_sector_next_used)
 800e0be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0c0:	695b      	ldr	r3, [r3, #20]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d002      	beq.n	800e0cc <_fx_utility_logical_sector_write+0xf8>
                {

                    /* Move to the next cache entry.  */
                    cache_entry =  cache_entry -> fx_cached_sector_next_used;
 800e0c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0c8:	695b      	ldr	r3, [r3, #20]
 800e0ca:	647b      	str	r3, [r7, #68]	; 0x44
            while (cache_size--)
 800e0cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e0ce:	1e5a      	subs	r2, r3, #1
 800e0d0:	643a      	str	r2, [r7, #64]	; 0x40
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d1e2      	bne.n	800e09c <_fx_utility_logical_sector_write+0xc8>
                }
            }
        }
#endif /* FX_ENABLE_FAULT_TOLERANT */

        if (cache_found)
 800e0d6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d00d      	beq.n	800e0fa <_fx_utility_logical_sector_write+0x126>
                return(media_ptr -> fx_media_driver_status);
            }
#endif

            /* Determine if this is the first write of this logical sector.  */
            if (cache_entry -> fx_cached_sector_buffer_dirty == FX_FALSE)
 800e0de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0e0:	7c1b      	ldrb	r3, [r3, #16]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d107      	bne.n	800e0f6 <_fx_utility_logical_sector_write+0x122>
            {

                /* Yes, increment the number of outstanding dirty sectors.  */
                media_ptr -> fx_media_sector_cache_dirty_count++;
 800e0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ea:	1c5a      	adds	r2, r3, #1
 800e0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ee:	625a      	str	r2, [r3, #36]	; 0x24

                /* Simply mark this entry as dirty.  */
                cache_entry -> fx_cached_sector_buffer_dirty =  FX_TRUE;
 800e0f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	741a      	strb	r2, [r3, #16]

            /* Don't bother updating the cache linked list since writes are
               preceded by reads anyway.  */

            /* Success, return to caller immediately!  */
            return(FX_SUCCESS);
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	e0cf      	b.n	800e29a <_fx_utility_logical_sector_write+0x2c6>

        /* Okay, so if we are here the request must be for the additional FAT writes, since this is the
           only time a write request is made without a preceding read request.  */

        /* Is the logical sector valid?  */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 800e0fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e0fe:	4313      	orrs	r3, r2
 800e100:	d004      	beq.n	800e10c <_fx_utility_logical_sector_write+0x138>
 800e102:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e106:	1c51      	adds	r1, r2, #1
 800e108:	430b      	orrs	r3, r1
 800e10a:	d101      	bne.n	800e110 <_fx_utility_logical_sector_write+0x13c>
        {
            return(FX_SECTOR_INVALID);
 800e10c:	2389      	movs	r3, #137	; 0x89
 800e10e:	e0c4      	b.n	800e29a <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= media_ptr -> fx_media_total_sectors)
 800e110:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e112:	2200      	movs	r2, #0
 800e114:	61bb      	str	r3, [r7, #24]
 800e116:	61fa      	str	r2, [r7, #28]
 800e118:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e11c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800e120:	4621      	mov	r1, r4
 800e122:	1889      	adds	r1, r1, r2
 800e124:	6139      	str	r1, [r7, #16]
 800e126:	4629      	mov	r1, r5
 800e128:	eb43 0101 	adc.w	r1, r3, r1
 800e12c:	6179      	str	r1, [r7, #20]
 800e12e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e132:	460b      	mov	r3, r1
 800e134:	f113 3aff 	adds.w	sl, r3, #4294967295
 800e138:	4613      	mov	r3, r2
 800e13a:	f143 3bff 	adc.w	fp, r3, #4294967295
 800e13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e140:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e144:	4592      	cmp	sl, r2
 800e146:	eb7b 0303 	sbcs.w	r3, fp, r3
 800e14a:	d301      	bcc.n	800e150 <_fx_utility_logical_sector_write+0x17c>
        {
            return(FX_SECTOR_INVALID);
 800e14c:	2389      	movs	r3, #137	; 0x89
 800e14e:	e0a4      	b.n	800e29a <_fx_utility_logical_sector_write+0x2c6>
        /* Just write the buffer to the media.  */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 800e150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e152:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800e156:	1c5a      	adds	r2, r3, #1
 800e158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e15a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

        /* Build write request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800e15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e160:	2201      	movs	r2, #1
 800e162:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800e166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e168:	2290      	movs	r2, #144	; 0x90
 800e16a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800e16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e170:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e172:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 800e176:	6a3a      	ldr	r2, [r7, #32]
 800e178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e17a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 800e17e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e180:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e182:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 800e186:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 800e18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e18c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 800e190:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800e194:	2b04      	cmp	r3, #4
 800e196:	d003      	beq.n	800e1a0 <_fx_utility_logical_sector_write+0x1cc>
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800e198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e19a:	2201      	movs	r2, #1
 800e19c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e1a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e1a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e1a8:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800e1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1ac:	2200      	movs	r2, #0
 800e1ae:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Check for successful completion.  */
        if (media_ptr -> fx_media_driver_status)
 800e1b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d003      	beq.n	800e1c4 <_fx_utility_logical_sector_write+0x1f0>
        {

            /* Error writing a internal sector out.  Return the
               error status.  */
            return(media_ptr -> fx_media_driver_status);
 800e1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e1c2:	e06a      	b.n	800e29a <_fx_utility_logical_sector_write+0x2c6>
        }

        /* At this point, we have a successful write.  */
        return(FX_SUCCESS);
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	e068      	b.n	800e29a <_fx_utility_logical_sector_write+0x2c6>

        /* Otherwise, the write request is being made directly from an application
           buffer. Determine if the logical sector is valid.  */

        /* Is the logical sector valid? */
        if ((logical_sector == 0) || (logical_sector == ((ULONG)0xFFFFFFFF)))
 800e1c8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e1cc:	4313      	orrs	r3, r2
 800e1ce:	d004      	beq.n	800e1da <_fx_utility_logical_sector_write+0x206>
 800e1d0:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e1d4:	1c51      	adds	r1, r2, #1
 800e1d6:	430b      	orrs	r3, r1
 800e1d8:	d101      	bne.n	800e1de <_fx_utility_logical_sector_write+0x20a>
        {
            return(FX_SECTOR_INVALID);
 800e1da:	2389      	movs	r3, #137	; 0x89
 800e1dc:	e05d      	b.n	800e29a <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Compare logical sector against total sectors to make sure it is valid.  */
        if ((logical_sector + sectors - 1) >= media_ptr -> fx_media_total_sectors)
 800e1de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	60bb      	str	r3, [r7, #8]
 800e1e4:	60fa      	str	r2, [r7, #12]
 800e1e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e1ea:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800e1ee:	4651      	mov	r1, sl
 800e1f0:	eb11 0802 	adds.w	r8, r1, r2
 800e1f4:	4659      	mov	r1, fp
 800e1f6:	eb41 0903 	adc.w	r9, r1, r3
 800e1fa:	f118 34ff 	adds.w	r4, r8, #4294967295
 800e1fe:	f149 35ff 	adc.w	r5, r9, #4294967295
 800e202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e204:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e208:	4294      	cmp	r4, r2
 800e20a:	eb75 0303 	sbcs.w	r3, r5, r3
 800e20e:	d301      	bcc.n	800e214 <_fx_utility_logical_sector_write+0x240>
        {
            return(FX_SECTOR_INVALID);
 800e210:	2389      	movs	r3, #137	; 0x89
 800e212:	e042      	b.n	800e29a <_fx_utility_logical_sector_write+0x2c6>
        }

        /* Flush and invalidate for any entries in the cache that are in this direct I/O read request range.  */
        _fx_utility_logical_sector_flush(media_ptr, logical_sector, (ULONG64) sectors, FX_TRUE);
 800e214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e216:	2200      	movs	r2, #0
 800e218:	603b      	str	r3, [r7, #0]
 800e21a:	607a      	str	r2, [r7, #4]
 800e21c:	2301      	movs	r3, #1
 800e21e:	9302      	str	r3, [sp, #8]
 800e220:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e224:	e9cd 3400 	strd	r3, r4, [sp]
 800e228:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e22c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e22e:	f7ff fa27 	bl	800d680 <_fx_utility_logical_sector_flush>
#endif /* FX_DISABLE_CACHE */

#ifndef FX_MEDIA_STATISTICS_DISABLE

        /* Increment the number of driver write sector(s) requests.  */
        media_ptr -> fx_media_driver_write_requests++;
 800e232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e234:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800e238:	1c5a      	adds	r2, r3, #1
 800e23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e23c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
#endif

        /* Build request to the driver.  */
        media_ptr -> fx_media_driver_request =          FX_DRIVER_WRITE;
 800e240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e242:	2201      	movs	r2, #1
 800e244:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        media_ptr -> fx_media_driver_status =           FX_IO_ERROR;
 800e248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e24a:	2290      	movs	r2, #144	; 0x90
 800e24c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        media_ptr -> fx_media_driver_buffer =           buffer_ptr;
 800e250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e252:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e254:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#ifdef FX_DRIVER_USE_64BIT_LBA
        media_ptr -> fx_media_driver_logical_sector =   logical_sector;
#else
        media_ptr -> fx_media_driver_logical_sector =   (ULONG)logical_sector;
 800e258:	6a3a      	ldr	r2, [r7, #32]
 800e25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e25c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#endif
        media_ptr -> fx_media_driver_sectors =          sectors;
 800e260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e262:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e264:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        media_ptr -> fx_media_driver_sector_type =      sector_type;
 800e268:	f897 2070 	ldrb.w	r2, [r7, #112]	; 0x70
 800e26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e26e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

        /* Determine if the system write flag needs to be set.  */
        if (sector_type != FX_DATA_SECTOR)
 800e272:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 800e276:	2b04      	cmp	r3, #4
 800e278:	d003      	beq.n	800e282 <_fx_utility_logical_sector_write+0x2ae>
        {

            /* Yes, a system sector write is present so set the flag.  The driver
               can use this flag to make extra safeguards in writing the sector
               out, yielding more fault tolerance.  */
            media_ptr -> fx_media_driver_system_write =  FX_TRUE;
 800e27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e27c:	2201      	movs	r2, #1
 800e27e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* If trace is enabled, insert this event into the trace buffer.  */
        FX_TRACE_IN_LINE_INSERT(FX_TRACE_INTERNAL_IO_DRIVER_WRITE, media_ptr, logical_sector, sectors, buffer_ptr, FX_TRACE_INTERNAL_EVENTS, 0, 0)

        /* Invoke the driver to write the sector(s).  */
        (media_ptr -> fx_media_driver_entry) (media_ptr);
 800e282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e284:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e288:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e28a:	4798      	blx	r3

        /* Clear the system write flag.  */
        media_ptr -> fx_media_driver_system_write =  FX_FALSE;
 800e28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e28e:	2200      	movs	r2, #0
 800e290:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

        /* Return driver status.  */
        return(media_ptr -> fx_media_driver_status);
 800e294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e296:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
    }
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3748      	adds	r7, #72	; 0x48
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e2a4 <_fx_utility_memory_copy>:
/*                                            memcpy usage,               */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _fx_utility_memory_copy(UCHAR *source_ptr, UCHAR *dest_ptr, ULONG size)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b084      	sub	sp, #16
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	60f8      	str	r0, [r7, #12]
 800e2ac:	60b9      	str	r1, [r7, #8]
 800e2ae:	607a      	str	r2, [r7, #4]

    /* Copy the memory.  */
    memcpy(dest_ptr, source_ptr, size); /* Use case of memcpy is verified. */
 800e2b0:	687a      	ldr	r2, [r7, #4]
 800e2b2:	68f9      	ldr	r1, [r7, #12]
 800e2b4:	68b8      	ldr	r0, [r7, #8]
 800e2b6:	f003 fb2d 	bl	8011914 <memcpy>
}
 800e2ba:	bf00      	nop
 800e2bc:	3710      	adds	r7, #16
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd80      	pop	{r7, pc}
	...

0800e2c4 <_fxe_media_close>:
/*  09-30-2020     William E. Lamie         Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_close(FX_MEDIA  *media_ptr)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b084      	sub	sp, #16
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	6078      	str	r0, [r7, #4]

UINT status;


    /* Check for a null media pointer.  */
    if (media_ptr == FX_NULL)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d101      	bne.n	800e2d6 <_fxe_media_close+0x12>
    {
        return(FX_PTR_ERROR);
 800e2d2:	2318      	movs	r3, #24
 800e2d4:	e018      	b.n	800e308 <_fxe_media_close+0x44>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e2d6:	f3ef 8305 	mrs	r3, IPSR
 800e2da:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 800e2dc:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 800e2de:	4b0c      	ldr	r3, [pc, #48]	; (800e310 <_fxe_media_close+0x4c>)
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	4313      	orrs	r3, r2
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d108      	bne.n	800e2fa <_fxe_media_close+0x36>
 800e2e8:	4b0a      	ldr	r3, [pc, #40]	; (800e314 <_fxe_media_close+0x50>)
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d004      	beq.n	800e2fa <_fxe_media_close+0x36>
 800e2f0:	4b08      	ldr	r3, [pc, #32]	; (800e314 <_fxe_media_close+0x50>)
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	4a08      	ldr	r2, [pc, #32]	; (800e318 <_fxe_media_close+0x54>)
 800e2f6:	4293      	cmp	r3, r2
 800e2f8:	d101      	bne.n	800e2fe <_fxe_media_close+0x3a>
 800e2fa:	2320      	movs	r3, #32
 800e2fc:	e004      	b.n	800e308 <_fxe_media_close+0x44>

    /* Call actual media close service.  */
    status =  _fx_media_close(media_ptr);
 800e2fe:	6878      	ldr	r0, [r7, #4]
 800e300:	f7fc fdfc 	bl	800aefc <_fx_media_close>
 800e304:	60f8      	str	r0, [r7, #12]

    /* Return status to the caller.  */
    return(status);
 800e306:	68fb      	ldr	r3, [r7, #12]
}
 800e308:	4618      	mov	r0, r3
 800e30a:	3710      	adds	r7, #16
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}
 800e310:	24000070 	.word	0x24000070
 800e314:	24014d3c 	.word	0x24014d3c
 800e318:	24014e84 	.word	0x24014e84

0800e31c <_fxe_media_open>:
/*                                                                        */
/**************************************************************************/
UINT  _fxe_media_open(FX_MEDIA *media_ptr, CHAR *media_name,
                      VOID (*media_driver)(FX_MEDIA *), VOID *driver_info_ptr,
                      VOID *memory_ptr, ULONG memory_size, UINT media_control_block_size)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b08e      	sub	sp, #56	; 0x38
 800e320:	af02      	add	r7, sp, #8
 800e322:	60f8      	str	r0, [r7, #12]
 800e324:	60b9      	str	r1, [r7, #8]
 800e326:	607a      	str	r2, [r7, #4]
 800e328:	603b      	str	r3, [r7, #0]
UINT       old_threshold;
#endif


    /* Check for invalid input pointers.  */
    if ((media_ptr == FX_NULL) || (media_driver == FX_NULL) || (memory_ptr == FX_NULL) || (media_control_block_size != sizeof(FX_MEDIA)))
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d00a      	beq.n	800e346 <_fxe_media_open+0x2a>
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d007      	beq.n	800e346 <_fxe_media_open+0x2a>
 800e336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d004      	beq.n	800e346 <_fxe_media_open+0x2a>
 800e33c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e33e:	f242 42b8 	movw	r2, #9400	; 0x24b8
 800e342:	4293      	cmp	r3, r2
 800e344:	d001      	beq.n	800e34a <_fxe_media_open+0x2e>
    {
        return(FX_PTR_ERROR);
 800e346:	2318      	movs	r3, #24
 800e348:	e071      	b.n	800e42e <_fxe_media_open+0x112>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e34a:	f3ef 8305 	mrs	r3, IPSR
 800e34e:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800e350:	69ba      	ldr	r2, [r7, #24]
    }

    /* Check for a valid caller.  */
    FX_CALLER_CHECKING_CODE
 800e352:	4b39      	ldr	r3, [pc, #228]	; (800e438 <_fxe_media_open+0x11c>)
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	4313      	orrs	r3, r2
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d108      	bne.n	800e36e <_fxe_media_open+0x52>
 800e35c:	4b37      	ldr	r3, [pc, #220]	; (800e43c <_fxe_media_open+0x120>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d004      	beq.n	800e36e <_fxe_media_open+0x52>
 800e364:	4b35      	ldr	r3, [pc, #212]	; (800e43c <_fxe_media_open+0x120>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	4a35      	ldr	r2, [pc, #212]	; (800e440 <_fxe_media_open+0x124>)
 800e36a:	4293      	cmp	r3, r2
 800e36c:	d101      	bne.n	800e372 <_fxe_media_open+0x56>
 800e36e:	2320      	movs	r3, #32
 800e370:	e05d      	b.n	800e42e <_fxe_media_open+0x112>

    /* Check for proper size of the logical sector cache.  */
    temp =  _fx_system_media_max_sector_cache;
 800e372:	4b34      	ldr	r3, [pc, #208]	; (800e444 <_fxe_media_open+0x128>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	627b      	str	r3, [r7, #36]	; 0x24

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 800e378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e37a:	425b      	negs	r3, r3
 800e37c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e37e:	4013      	ands	r3, r2
 800e380:	627b      	str	r3, [r7, #36]	; 0x24

    /* If FX_MAX_SECTOR_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_sector_cache))
 800e382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e384:	2b01      	cmp	r3, #1
 800e386:	d004      	beq.n	800e392 <_fxe_media_open+0x76>
 800e388:	4b2e      	ldr	r3, [pc, #184]	; (800e444 <_fxe_media_open+0x128>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e38e:	429a      	cmp	r2, r3
 800e390:	d001      	beq.n	800e396 <_fxe_media_open+0x7a>
    {

        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
 800e392:	2302      	movs	r3, #2
 800e394:	e04b      	b.n	800e42e <_fxe_media_open+0x112>
    }

    /* Check for proper size of the FAT cache.  */
    temp =  _fx_system_media_max_fat_cache;
 800e396:	4b2c      	ldr	r3, [pc, #176]	; (800e448 <_fxe_media_open+0x12c>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Isolate the lowest set bit.  */
    temp =  (temp & ((~temp) + ((ULONG) 1)));
 800e39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39e:	425b      	negs	r3, r3
 800e3a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3a2:	4013      	ands	r3, r2
 800e3a4:	627b      	str	r3, [r7, #36]	; 0x24

    /* If FX_MAX_FAT_CACHE is a power of 2, the value of temp should be unchanged.  */
    if ((temp == 1) || (temp != _fx_system_media_max_fat_cache))
 800e3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d004      	beq.n	800e3b6 <_fxe_media_open+0x9a>
 800e3ac:	4b26      	ldr	r3, [pc, #152]	; (800e448 <_fxe_media_open+0x12c>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3b2:	429a      	cmp	r2, r3
 800e3b4:	d001      	beq.n	800e3ba <_fxe_media_open+0x9e>
    {

        /* Not a power of 2, return an error.  */
        return(FX_MEDIA_INVALID);
 800e3b6:	2302      	movs	r3, #2
 800e3b8:	e039      	b.n	800e42e <_fxe_media_open+0x112>

#ifndef FX_SINGLE_THREAD

    /* Pickup current thread pointer. At this point we know the current thread pointer is non-null since 
       it was checked by code in FX_CALLER_CHECKING_CODE macro.  */
    current_thread =  tx_thread_identify();
 800e3ba:	f001 ffe5 	bl	8010388 <_tx_thread_identify>
 800e3be:	6238      	str	r0, [r7, #32]

    /* Disable preemption temporarily.  */
    tx_thread_preemption_change(current_thread, 0, &old_threshold);
 800e3c0:	f107 0314 	add.w	r3, r7, #20
 800e3c4:	461a      	mov	r2, r3
 800e3c6:	2100      	movs	r1, #0
 800e3c8:	6a38      	ldr	r0, [r7, #32]
 800e3ca:	f002 f837 	bl	801043c <_tx_thread_preemption_change>
#endif

    /* Loop to check for the media already opened.  */
    current_media =  _fx_system_media_opened_ptr;
 800e3ce:	4b1f      	ldr	r3, [pc, #124]	; (800e44c <_fxe_media_open+0x130>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    open_count =     _fx_system_media_opened_count;
 800e3d4:	4b1e      	ldr	r3, [pc, #120]	; (800e450 <_fxe_media_open+0x134>)
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	62bb      	str	r3, [r7, #40]	; 0x28
    while (open_count--)
 800e3da:	e010      	b.n	800e3fe <_fxe_media_open+0xe2>
    {

        /* Is the new media pointer already open?  */
        if (media_ptr == current_media)
 800e3dc:	68fa      	ldr	r2, [r7, #12]
 800e3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d108      	bne.n	800e3f6 <_fxe_media_open+0xda>
        {

#ifndef FX_SINGLE_THREAD

            /* Restore preemption.  */
            tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800e3e4:	697b      	ldr	r3, [r7, #20]
 800e3e6:	f107 0214 	add.w	r2, r7, #20
 800e3ea:	4619      	mov	r1, r3
 800e3ec:	6a38      	ldr	r0, [r7, #32]
 800e3ee:	f002 f825 	bl	801043c <_tx_thread_preemption_change>
#endif

            /* Duplicate media open, return an error!  */
            return(FX_PTR_ERROR);
 800e3f2:	2318      	movs	r3, #24
 800e3f4:	e01b      	b.n	800e42e <_fxe_media_open+0x112>
        }

        /* Move to next entry.  */
        current_media =  current_media -> fx_media_opened_next;
 800e3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f8:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800e3fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (open_count--)
 800e3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e400:	1e5a      	subs	r2, r3, #1
 800e402:	62ba      	str	r2, [r7, #40]	; 0x28
 800e404:	2b00      	cmp	r3, #0
 800e406:	d1e9      	bne.n	800e3dc <_fxe_media_open+0xc0>
    }

#ifndef FX_SINGLE_THREAD

    /* Restore preemption.  */
    tx_thread_preemption_change(current_thread, old_threshold, &old_threshold);
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	f107 0214 	add.w	r2, r7, #20
 800e40e:	4619      	mov	r1, r3
 800e410:	6a38      	ldr	r0, [r7, #32]
 800e412:	f002 f813 	bl	801043c <_tx_thread_preemption_change>
#endif

    /* Call actual media open service.  */
    status =  _fx_media_open(media_ptr, media_name, media_driver, driver_info_ptr,
 800e416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e418:	9301      	str	r3, [sp, #4]
 800e41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e41c:	9300      	str	r3, [sp, #0]
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	687a      	ldr	r2, [r7, #4]
 800e422:	68b9      	ldr	r1, [r7, #8]
 800e424:	68f8      	ldr	r0, [r7, #12]
 800e426:	f7fc ff41 	bl	800b2ac <_fx_media_open>
 800e42a:	61f8      	str	r0, [r7, #28]
                             memory_ptr, memory_size);

    /* Return status.  */
    return(status);
 800e42c:	69fb      	ldr	r3, [r7, #28]
}
 800e42e:	4618      	mov	r0, r3
 800e430:	3730      	adds	r7, #48	; 0x30
 800e432:	46bd      	mov	sp, r7
 800e434:	bd80      	pop	{r7, pc}
 800e436:	bf00      	nop
 800e438:	24000070 	.word	0x24000070
 800e43c:	24014d3c 	.word	0x24014d3c
 800e440:	24014e84 	.word	0x24014e84
 800e444:	24014ab0 	.word	0x24014ab0
 800e448:	24014ab4 	.word	0x24014ab4
 800e44c:	24014aa0 	.word	0x24014aa0
 800e450:	24014aa4 	.word	0x24014aa4

0800e454 <check_sd_status>:

static UINT is_initialized = 0;


static INT check_sd_status(uint32_t instance)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b084      	sub	sp, #16
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
  uint32_t start = FX_STM32_SD_CURRENT_TIME();
 800e45c:	f002 fc0e 	bl	8010c7c <_tx_time_get>
 800e460:	60f8      	str	r0, [r7, #12]

  while (FX_STM32_SD_CURRENT_TIME() - start < FX_STM32_SD_DEFAULT_TIMEOUT)
 800e462:	e007      	b.n	800e474 <check_sd_status+0x20>
  {
    if (fx_stm32_sd_get_status(instance) == 0)
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f7fb fd63 	bl	8009f30 <fx_stm32_sd_get_status>
 800e46a:	4603      	mov	r3, r0
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d101      	bne.n	800e474 <check_sd_status+0x20>
    {
      return 0;
 800e470:	2300      	movs	r3, #0
 800e472:	e008      	b.n	800e486 <check_sd_status+0x32>
  while (FX_STM32_SD_CURRENT_TIME() - start < FX_STM32_SD_DEFAULT_TIMEOUT)
 800e474:	f002 fc02 	bl	8010c7c <_tx_time_get>
 800e478:	4602      	mov	r2, r0
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	1ad3      	subs	r3, r2, r3
 800e47e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e482:	d3ef      	bcc.n	800e464 <check_sd_status+0x10>
    }
  }

  return 1;
 800e484:	2301      	movs	r3, #1
}
 800e486:	4618      	mov	r0, r3
 800e488:	3710      	adds	r7, #16
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
	...

0800e490 <fx_stm32_sd_driver>:
* It relies on the STM32 peripheral library from ST.
* @param media_ptr: FileX's Media Config Block
* @retval None
*/
VOID  fx_stm32_sd_driver(FX_MEDIA *media_ptr)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b086      	sub	sp, #24
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
  ULONG partition_start;
  ULONG partition_size;

#if (FX_STM32_SD_INIT == 0)
 /* the SD was initialized by the application */
  is_initialized = 1;
 800e498:	4b7e      	ldr	r3, [pc, #504]	; (800e694 <fx_stm32_sd_driver+0x204>)
 800e49a:	2201      	movs	r2, #1
 800e49c:	601a      	str	r2, [r3, #0]
#endif
  /* before performing any operation, check the status of the SD IP */
  if (is_initialized == 1)
 800e49e:	4b7d      	ldr	r3, [pc, #500]	; (800e694 <fx_stm32_sd_driver+0x204>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	2b01      	cmp	r3, #1
 800e4a4:	d10a      	bne.n	800e4bc <fx_stm32_sd_driver+0x2c>
  {
    if (check_sd_status(FX_STM32_SD_INSTANCE) != 0)
 800e4a6:	2000      	movs	r0, #0
 800e4a8:	f7ff ffd4 	bl	800e454 <check_sd_status>
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d004      	beq.n	800e4bc <fx_stm32_sd_driver+0x2c>
    {
      media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	2290      	movs	r2, #144	; 0x90
 800e4b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800e4ba:	e0e7      	b.n	800e68c <fx_stm32_sd_driver+0x1fc>
    }
  }

#if (FX_STM32_SD_DMA_API == 1)
  /* the SD DMA requires a 4-byte aligned buffers */
  unaligned_buffer = (UINT)(media_ptr->fx_media_driver_buffer) & 0x3;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4c2:	f003 0303 	and.w	r3, r3, #3
 800e4c6:	617b      	str	r3, [r7, #20]
#else
  /* if the DMA is not used there isn't any constraint on buffer alignment */
  unaligned_buffer = 0;
#endif
  /* Process the driver request specified in the media control block.  */
  switch(media_ptr->fx_media_driver_request)
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4ce:	2b08      	cmp	r3, #8
 800e4d0:	f200 80d2 	bhi.w	800e678 <fx_stm32_sd_driver+0x1e8>
 800e4d4:	a201      	add	r2, pc, #4	; (adr r2, 800e4dc <fx_stm32_sd_driver+0x4c>)
 800e4d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4da:	bf00      	nop
 800e4dc:	0800e54f 	.word	0x0800e54f
 800e4e0:	0800e583 	.word	0x0800e583
 800e4e4:	0800e5b5 	.word	0x0800e5b5
 800e4e8:	0800e5bf 	.word	0x0800e5bf
 800e4ec:	0800e501 	.word	0x0800e501
 800e4f0:	0800e5c9 	.word	0x0800e5c9
 800e4f4:	0800e679 	.word	0x0800e679
 800e4f8:	0800e65d 	.word	0x0800e65d
 800e4fc:	0800e539 	.word	0x0800e539
  {
  case FX_DRIVER_INIT:
    {
      media_ptr->fx_media_driver_status = FX_SUCCESS;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2200      	movs	r2, #0
 800e504:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      FX_STM32_SD_PRE_INIT(media_ptr);
 800e508:	231c      	movs	r3, #28
 800e50a:	2200      	movs	r2, #0
 800e50c:	4962      	ldr	r1, [pc, #392]	; (800e698 <fx_stm32_sd_driver+0x208>)
 800e50e:	4863      	ldr	r0, [pc, #396]	; (800e69c <fx_stm32_sd_driver+0x20c>)
 800e510:	f002 ff80 	bl	8011414 <_txe_semaphore_create>
 800e514:	4603      	mov	r3, r0
 800e516:	2b00      	cmp	r3, #0
 800e518:	d109      	bne.n	800e52e <fx_stm32_sd_driver+0x9e>
 800e51a:	231c      	movs	r3, #28
 800e51c:	2200      	movs	r2, #0
 800e51e:	4960      	ldr	r1, [pc, #384]	; (800e6a0 <fx_stm32_sd_driver+0x210>)
 800e520:	4860      	ldr	r0, [pc, #384]	; (800e6a4 <fx_stm32_sd_driver+0x214>)
 800e522:	f002 ff77 	bl	8011414 <_txe_semaphore_create>
 800e526:	4603      	mov	r3, r0
 800e528:	2b00      	cmp	r3, #0
 800e52a:	f000 80aa 	beq.w	800e682 <fx_stm32_sd_driver+0x1f2>
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2290      	movs	r2, #144	; 0x90
 800e532:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }
#endif
      /* call post init user macro */
      FX_STM32_SD_POST_INIT(media_ptr);
      break;
 800e536:	e0a4      	b.n	800e682 <fx_stm32_sd_driver+0x1f2>
    }

  case FX_DRIVER_UNINIT:
    {
      media_ptr->fx_media_driver_status = FX_SUCCESS;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2200      	movs	r2, #0
 800e53c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      {
        is_initialized = 0;
      }
#endif
      /* call post deinit processing  */
      FX_STM32_SD_POST_DEINIT(media_ptr);
 800e540:	4856      	ldr	r0, [pc, #344]	; (800e69c <fx_stm32_sd_driver+0x20c>)
 800e542:	f002 fffd 	bl	8011540 <_txe_semaphore_delete>
 800e546:	4857      	ldr	r0, [pc, #348]	; (800e6a4 <fx_stm32_sd_driver+0x214>)
 800e548:	f002 fffa 	bl	8011540 <_txe_semaphore_delete>

      break;
 800e54c:	e09e      	b.n	800e68c <fx_stm32_sd_driver+0x1fc>
    }

  case FX_DRIVER_READ:
    {
      media_ptr->fx_media_driver_status = FX_IO_ERROR;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2290      	movs	r2, #144	; 0x90
 800e552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      if (sd_read_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e560:	18d1      	adds	r1, r2, r3
                       media_ptr->fx_media_driver_sectors, unaligned_buffer) == FX_SUCCESS)
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
      if (sd_read_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 800e568:	697b      	ldr	r3, [r7, #20]
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f000 f89c 	bl	800e6a8 <sd_read_data>
 800e570:	4603      	mov	r3, r0
 800e572:	2b00      	cmp	r3, #0
 800e574:	f040 8087 	bne.w	800e686 <fx_stm32_sd_driver+0x1f6>
      {
        media_ptr->fx_media_driver_status = FX_SUCCESS;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2200      	movs	r2, #0
 800e57c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }

      break;
 800e580:	e081      	b.n	800e686 <fx_stm32_sd_driver+0x1f6>
    }

  case FX_DRIVER_WRITE:
    {
      media_ptr->fx_media_driver_status = FX_IO_ERROR;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2290      	movs	r2, #144	; 0x90
 800e586:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      if (sd_write_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e594:	18d1      	adds	r1, r2, r3
                        media_ptr->fx_media_driver_sectors, unaligned_buffer) == FX_SUCCESS)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
      if (sd_write_data(media_ptr, media_ptr->fx_media_driver_logical_sector + media_ptr->fx_media_hidden_sectors,
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f000 f940 	bl	800e824 <sd_write_data>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d16f      	bne.n	800e68a <fx_stm32_sd_driver+0x1fa>
      {
        media_ptr->fx_media_driver_status = FX_SUCCESS;
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }

      break;
 800e5b2:	e06a      	b.n	800e68a <fx_stm32_sd_driver+0x1fa>
    }

  case FX_DRIVER_FLUSH:
    {
      /* Return driver success.  */
      media_ptr->fx_media_driver_status =  FX_SUCCESS;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 800e5bc:	e066      	b.n	800e68c <fx_stm32_sd_driver+0x1fc>
    }

  case FX_DRIVER_ABORT:
    {
      /* Return driver success.  */
      media_ptr->fx_media_driver_status =  FX_SUCCESS;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      FX_STM32_SD_POST_ABORT(media_ptr);
      break;
 800e5c6:	e061      	b.n	800e68c <fx_stm32_sd_driver+0x1fc>
    }

  case FX_DRIVER_BOOT_READ:
    {
      /* the boot sector is the sector zero */
      status = sd_read_data(media_ptr, 0, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	2100      	movs	r1, #0
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f000 f868 	bl	800e6a8 <sd_read_data>
 800e5d8:	6138      	str	r0, [r7, #16]

      if (status != FX_SUCCESS)
 800e5da:	693b      	ldr	r3, [r7, #16]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d004      	beq.n	800e5ea <fx_stm32_sd_driver+0x15a>
      {
        media_ptr->fx_media_driver_status = status;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	693a      	ldr	r2, [r7, #16]
 800e5e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800e5e8:	e050      	b.n	800e68c <fx_stm32_sd_driver+0x1fc>

      /* Check if the sector 0 is the actual boot sector, otherwise calculate the offset into it.
      Please note that this should belong to higher level of MW to do this check and it is here
      as a temporary work solution */

      partition_start =  0;
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	60fb      	str	r3, [r7, #12]

      status =  _fx_partition_offset_calculate(media_ptr -> fx_media_driver_buffer, 0,
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800e5f4:	f107 0308 	add.w	r3, r7, #8
 800e5f8:	f107 020c 	add.w	r2, r7, #12
 800e5fc:	2100      	movs	r1, #0
 800e5fe:	f7fd fbcf 	bl	800bda0 <_fx_partition_offset_calculate>
 800e602:	6138      	str	r0, [r7, #16]
                                               &partition_start, &partition_size);

      /* Check partition read error.  */
      if (status)
 800e604:	693b      	ldr	r3, [r7, #16]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d004      	beq.n	800e614 <fx_stm32_sd_driver+0x184>
      {
        /* Unsuccessful driver request.  */
        media_ptr -> fx_media_driver_status =  FX_IO_ERROR;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2290      	movs	r2, #144	; 0x90
 800e60e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800e612:	e03b      	b.n	800e68c <fx_stm32_sd_driver+0x1fc>
      }

      /* Now determine if there is a partition...   */
      if (partition_start)
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d01b      	beq.n	800e652 <fx_stm32_sd_driver+0x1c2>
      {

        if (check_sd_status(FX_STM32_SD_INSTANCE) != 0)
 800e61a:	2000      	movs	r0, #0
 800e61c:	f7ff ff1a 	bl	800e454 <check_sd_status>
 800e620:	4603      	mov	r3, r0
 800e622:	2b00      	cmp	r3, #0
 800e624:	d004      	beq.n	800e630 <fx_stm32_sd_driver+0x1a0>
        {
          media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	2290      	movs	r2, #144	; 0x90
 800e62a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          break;
 800e62e:	e02d      	b.n	800e68c <fx_stm32_sd_driver+0x1fc>
        }

        /* Yes, now lets read the actual boot record.  */
        status = sd_read_data(media_ptr, partition_start, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 800e630:	68f9      	ldr	r1, [r7, #12]
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e638:	697b      	ldr	r3, [r7, #20]
 800e63a:	6878      	ldr	r0, [r7, #4]
 800e63c:	f000 f834 	bl	800e6a8 <sd_read_data>
 800e640:	6138      	str	r0, [r7, #16]

        if (status != FX_SUCCESS)
 800e642:	693b      	ldr	r3, [r7, #16]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d004      	beq.n	800e652 <fx_stm32_sd_driver+0x1c2>
        {
          media_ptr->fx_media_driver_status = status;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	693a      	ldr	r2, [r7, #16]
 800e64c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          break;
 800e650:	e01c      	b.n	800e68c <fx_stm32_sd_driver+0x1fc>
        }
      }

      /* Successful driver request.  */
      media_ptr -> fx_media_driver_status =  FX_SUCCESS;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	2200      	movs	r2, #0
 800e656:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 800e65a:	e017      	b.n	800e68c <fx_stm32_sd_driver+0x1fc>
    }

  case FX_DRIVER_BOOT_WRITE:
    {
      status = sd_write_data(media_ptr, 0, media_ptr->fx_media_driver_sectors, unaligned_buffer);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800e662:	697b      	ldr	r3, [r7, #20]
 800e664:	2100      	movs	r1, #0
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f000 f8dc 	bl	800e824 <sd_write_data>
 800e66c:	6138      	str	r0, [r7, #16]

      media_ptr->fx_media_driver_status = status;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	693a      	ldr	r2, [r7, #16]
 800e672:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      break;
 800e676:	e009      	b.n	800e68c <fx_stm32_sd_driver+0x1fc>
    }

  default:
    {
      media_ptr->fx_media_driver_status =  FX_IO_ERROR;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2290      	movs	r2, #144	; 0x90
 800e67c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      break;
 800e680:	e004      	b.n	800e68c <fx_stm32_sd_driver+0x1fc>
      break;
 800e682:	bf00      	nop
 800e684:	e002      	b.n	800e68c <fx_stm32_sd_driver+0x1fc>
      break;
 800e686:	bf00      	nop
 800e688:	e000      	b.n	800e68c <fx_stm32_sd_driver+0x1fc>
      break;
 800e68a:	bf00      	nop
    }
  }
}
 800e68c:	3718      	adds	r7, #24
 800e68e:	46bd      	mov	sp, r7
 800e690:	bd80      	pop	{r7, pc}
 800e692:	bf00      	nop
 800e694:	24014d00 	.word	0x24014d00
 800e698:	08012b48 	.word	0x08012b48
 800e69c:	24014a84 	.word	0x24014a84
 800e6a0:	08012b64 	.word	0x08012b64
 800e6a4:	24014a68 	.word	0x24014a68

0800e6a8 <sd_read_data>:
* @param UINT use_scratch_buffer to enable scratch buffer usage or not.
* @retval FX_SUCCESS on success FX_BUFFER_ERROR / FX_ACCESS_ERROR / FX_IO_ERROR otherwise
*/

static UINT sd_read_data(FX_MEDIA *media_ptr, ULONG start_sector, UINT num_sectors, UINT use_scratch_buffer)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b090      	sub	sp, #64	; 0x40
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	60f8      	str	r0, [r7, #12]
 800e6b0:	60b9      	str	r1, [r7, #8]
 800e6b2:	607a      	str	r2, [r7, #4]
 800e6b4:	603b      	str	r3, [r7, #0]
  INT i = 0;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  UCHAR *read_addr;

 /* perform the Pre read operations */
  FX_STM32_SD_PRE_READ_TRANSFER(media_ptr);

  if (use_scratch_buffer)
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d061      	beq.n	800e784 <sd_read_data+0xdc>
  {
    read_addr = media_ptr->fx_media_driver_buffer;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e6c6:	637b      	str	r3, [r7, #52]	; 0x34

    for (i = 0; i < num_sectors; i++)
 800e6c8:	2300      	movs	r3, #0
 800e6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e6cc:	e04c      	b.n	800e768 <sd_read_data+0xc0>
    {
      /* Start reading into the scratch buffer */
      status = fx_stm32_sd_read_blocks(FX_STM32_SD_INSTANCE, (UINT *)scratch, (UINT)start_sector++, 1);
 800e6ce:	68ba      	ldr	r2, [r7, #8]
 800e6d0:	1c53      	adds	r3, r2, #1
 800e6d2:	60bb      	str	r3, [r7, #8]
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	4950      	ldr	r1, [pc, #320]	; (800e818 <sd_read_data+0x170>)
 800e6d8:	2000      	movs	r0, #0
 800e6da:	f7fb fc3f 	bl	8009f5c <fx_stm32_sd_read_blocks>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	63bb      	str	r3, [r7, #56]	; 0x38

      if (status != 0)
 800e6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d001      	beq.n	800e6ec <sd_read_data+0x44>
      {
        /* read error occurred, call the error handler code then return immediately */
        FX_STM32_SD_READ_TRANSFER_ERROR(status);
        return FX_IO_ERROR;
 800e6e8:	2390      	movs	r3, #144	; 0x90
 800e6ea:	e090      	b.n	800e80e <sd_read_data+0x166>
      }

    /* wait for read transfer notification */
       FX_STM32_SD_READ_CPLT_NOTIFY();
 800e6ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e6f0:	484a      	ldr	r0, [pc, #296]	; (800e81c <sd_read_data+0x174>)
 800e6f2:	f002 ff63 	bl	80115bc <_txe_semaphore_get>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d001      	beq.n	800e700 <sd_read_data+0x58>
 800e6fc:	2390      	movs	r3, #144	; 0x90
 800e6fe:	e086      	b.n	800e80e <sd_read_data+0x166>
 800e700:	4b45      	ldr	r3, [pc, #276]	; (800e818 <sd_read_data+0x170>)
 800e702:	633b      	str	r3, [r7, #48]	; 0x30
 800e704:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e708:	62fb      	str	r3, [r7, #44]	; 0x2c
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800e70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	dd1d      	ble.n	800e74c <sd_read_data+0xa4>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800e710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e712:	f003 021f 	and.w	r2, r3, #31
 800e716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e718:	4413      	add	r3, r2
 800e71a:	62bb      	str	r3, [r7, #40]	; 0x28
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800e71c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e71e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800e720:	f3bf 8f4f 	dsb	sy
}
 800e724:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800e726:	4a3e      	ldr	r2, [pc, #248]	; (800e820 <sd_read_data+0x178>)
 800e728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e72a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800e72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e730:	3320      	adds	r3, #32
 800e732:	627b      	str	r3, [r7, #36]	; 0x24
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800e734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e736:	3b20      	subs	r3, #32
 800e738:	62bb      	str	r3, [r7, #40]	; 0x28
      } while ( op_size > 0 );
 800e73a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	dcf2      	bgt.n	800e726 <sd_read_data+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 800e740:	f3bf 8f4f 	dsb	sy
}
 800e744:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e746:	f3bf 8f6f 	isb	sy
}
 800e74a:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800e74c:	bf00      	nop

#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
      invalidate_cache_by_addr((uint32_t*)scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif

      _fx_utility_memory_copy(scratch, read_addr, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 800e74e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e752:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800e754:	4830      	ldr	r0, [pc, #192]	; (800e818 <sd_read_data+0x170>)
 800e756:	f7ff fda5 	bl	800e2a4 <_fx_utility_memory_copy>
      read_addr += FX_STM32_SD_DEFAULT_SECTOR_SIZE;
 800e75a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e75c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e760:	637b      	str	r3, [r7, #52]	; 0x34
    for (i = 0; i < num_sectors; i++)
 800e762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e764:	3301      	adds	r3, #1
 800e766:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e76a:	687a      	ldr	r2, [r7, #4]
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d8ae      	bhi.n	800e6ce <sd_read_data+0x26>
    }

    /* Check if all sectors were read */
    if (i == num_sectors)
 800e770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e772:	687a      	ldr	r2, [r7, #4]
 800e774:	429a      	cmp	r2, r3
 800e776:	d102      	bne.n	800e77e <sd_read_data+0xd6>
    {
      status = FX_SUCCESS;
 800e778:	2300      	movs	r3, #0
 800e77a:	63bb      	str	r3, [r7, #56]	; 0x38
 800e77c:	e046      	b.n	800e80c <sd_read_data+0x164>
    }
    else
    {
      status = FX_BUFFER_ERROR;
 800e77e:	2321      	movs	r3, #33	; 0x21
 800e780:	63bb      	str	r3, [r7, #56]	; 0x38
 800e782:	e043      	b.n	800e80c <sd_read_data+0x164>
    }
  }
  else
  {

    status = fx_stm32_sd_read_blocks(FX_STM32_SD_INSTANCE, (UINT *)media_ptr->fx_media_driver_buffer, (UINT)start_sector, num_sectors);
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	68ba      	ldr	r2, [r7, #8]
 800e78e:	2000      	movs	r0, #0
 800e790:	f7fb fbe4 	bl	8009f5c <fx_stm32_sd_read_blocks>
 800e794:	4603      	mov	r3, r0
 800e796:	63bb      	str	r3, [r7, #56]	; 0x38

    if (status != 0)
 800e798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d001      	beq.n	800e7a2 <sd_read_data+0xfa>
    {
      /* read error occurred, call the error handler code then return immediately */
      FX_STM32_SD_READ_TRANSFER_ERROR(status);

      return FX_IO_ERROR;
 800e79e:	2390      	movs	r3, #144	; 0x90
 800e7a0:	e035      	b.n	800e80e <sd_read_data+0x166>
    }

    /* wait for read transfer notification */
       FX_STM32_SD_READ_CPLT_NOTIFY();
 800e7a2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e7a6:	481d      	ldr	r0, [pc, #116]	; (800e81c <sd_read_data+0x174>)
 800e7a8:	f002 ff08 	bl	80115bc <_txe_semaphore_get>
 800e7ac:	4603      	mov	r3, r0
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d001      	beq.n	800e7b6 <sd_read_data+0x10e>
 800e7b2:	2390      	movs	r3, #144	; 0x90
 800e7b4:	e02b      	b.n	800e80e <sd_read_data+0x166>

#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
    invalidate_cache_by_addr((uint32_t*)media_ptr->fx_media_driver_buffer, num_sectors * FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	025b      	lsls	r3, r3, #9
 800e7c0:	623a      	str	r2, [r7, #32]
 800e7c2:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 800e7c4:	69fb      	ldr	r3, [r7, #28]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	dd1d      	ble.n	800e806 <sd_read_data+0x15e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800e7ca:	6a3b      	ldr	r3, [r7, #32]
 800e7cc:	f003 021f 	and.w	r2, r3, #31
 800e7d0:	69fb      	ldr	r3, [r7, #28]
 800e7d2:	4413      	add	r3, r2
 800e7d4:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800e7d6:	6a3b      	ldr	r3, [r7, #32]
 800e7d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800e7da:	f3bf 8f4f 	dsb	sy
}
 800e7de:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800e7e0:	4a0f      	ldr	r2, [pc, #60]	; (800e820 <sd_read_data+0x178>)
 800e7e2:	697b      	ldr	r3, [r7, #20]
 800e7e4:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	3320      	adds	r3, #32
 800e7ec:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800e7ee:	69bb      	ldr	r3, [r7, #24]
 800e7f0:	3b20      	subs	r3, #32
 800e7f2:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800e7f4:	69bb      	ldr	r3, [r7, #24]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	dcf2      	bgt.n	800e7e0 <sd_read_data+0x138>
  __ASM volatile ("dsb 0xF":::"memory");
 800e7fa:	f3bf 8f4f 	dsb	sy
}
 800e7fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e800:	f3bf 8f6f 	isb	sy
}
 800e804:	bf00      	nop
}
 800e806:	bf00      	nop
#endif

    status = FX_SUCCESS;
 800e808:	2300      	movs	r3, #0
 800e80a:	63bb      	str	r3, [r7, #56]	; 0x38
  }

  /* Operation finished, call the post read macro if defined */

  FX_STM32_SD_POST_READ_TRANSFER(media_ptr);
  return status;
 800e80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800e80e:	4618      	mov	r0, r3
 800e810:	3740      	adds	r7, #64	; 0x40
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}
 800e816:	bf00      	nop
 800e818:	24014b00 	.word	0x24014b00
 800e81c:	24014a84 	.word	0x24014a84
 800e820:	e000ed00 	.word	0xe000ed00

0800e824 <sd_write_data>:
* @param UINT use_scratch_buffer to enable scratch buffer usage or not.
* @retval FX_SUCCESS on success FX_BUFFER_ERROR / FX_ACCESS_ERROR / FX_IO_ERROR otherwise
*/

static UINT sd_write_data(FX_MEDIA *media_ptr, ULONG start_sector, UINT num_sectors, UINT use_scratch_buffer)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b090      	sub	sp, #64	; 0x40
 800e828:	af00      	add	r7, sp, #0
 800e82a:	60f8      	str	r0, [r7, #12]
 800e82c:	60b9      	str	r1, [r7, #8]
 800e82e:	607a      	str	r2, [r7, #4]
 800e830:	603b      	str	r3, [r7, #0]
  INT i = 0;
 800e832:	2300      	movs	r3, #0
 800e834:	63fb      	str	r3, [r7, #60]	; 0x3c
  UCHAR *write_addr;

  /* call Pre write operation macro */
  FX_STM32_SD_PRE_WRITE_TRANSFER(media_ptr);

  if (use_scratch_buffer)
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d061      	beq.n	800e900 <sd_write_data+0xdc>
  {
    write_addr = media_ptr->fx_media_driver_buffer;
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e842:	637b      	str	r3, [r7, #52]	; 0x34

    for (i = 0; i < num_sectors; i++)
 800e844:	2300      	movs	r3, #0
 800e846:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e848:	e04c      	b.n	800e8e4 <sd_write_data+0xc0>
    {
      _fx_utility_memory_copy(write_addr, scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 800e84a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e84e:	4951      	ldr	r1, [pc, #324]	; (800e994 <sd_write_data+0x170>)
 800e850:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e852:	f7ff fd27 	bl	800e2a4 <_fx_utility_memory_copy>
      write_addr += FX_STM32_SD_DEFAULT_SECTOR_SIZE;
 800e856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e858:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e85c:	637b      	str	r3, [r7, #52]	; 0x34
 800e85e:	4b4d      	ldr	r3, [pc, #308]	; (800e994 <sd_write_data+0x170>)
 800e860:	633b      	str	r3, [r7, #48]	; 0x30
 800e862:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e866:	62fb      	str	r3, [r7, #44]	; 0x2c
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800e868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	dd1d      	ble.n	800e8aa <sd_write_data+0x86>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800e86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e870:	f003 021f 	and.w	r2, r3, #31
 800e874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e876:	4413      	add	r3, r2
 800e878:	62bb      	str	r3, [r7, #40]	; 0x28
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800e87a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e87c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800e87e:	f3bf 8f4f 	dsb	sy
}
 800e882:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800e884:	4a44      	ldr	r2, [pc, #272]	; (800e998 <sd_write_data+0x174>)
 800e886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e888:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800e88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e88e:	3320      	adds	r3, #32
 800e890:	627b      	str	r3, [r7, #36]	; 0x24
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800e892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e894:	3b20      	subs	r3, #32
 800e896:	62bb      	str	r3, [r7, #40]	; 0x28
      } while ( op_size > 0 );
 800e898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	dcf2      	bgt.n	800e884 <sd_write_data+0x60>
  __ASM volatile ("dsb 0xF":::"memory");
 800e89e:	f3bf 8f4f 	dsb	sy
}
 800e8a2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e8a4:	f3bf 8f6f 	isb	sy
}
 800e8a8:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800e8aa:	bf00      	nop
#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
      /* Clean the DCache to make the SD DMA see the actual content of the scratch buffer */
      clean_cache_by_addr((uint32_t*)scratch, FX_STM32_SD_DEFAULT_SECTOR_SIZE);
#endif

      status = fx_stm32_sd_write_blocks(FX_STM32_SD_INSTANCE, (UINT *)scratch, (UINT)start_sector++, 1);
 800e8ac:	68ba      	ldr	r2, [r7, #8]
 800e8ae:	1c53      	adds	r3, r2, #1
 800e8b0:	60bb      	str	r3, [r7, #8]
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	4937      	ldr	r1, [pc, #220]	; (800e994 <sd_write_data+0x170>)
 800e8b6:	2000      	movs	r0, #0
 800e8b8:	f7fb fb6c 	bl	8009f94 <fx_stm32_sd_write_blocks>
 800e8bc:	4603      	mov	r3, r0
 800e8be:	63bb      	str	r3, [r7, #56]	; 0x38

      if (status != 0)
 800e8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d001      	beq.n	800e8ca <sd_write_data+0xa6>
      {
        /* in case of error call the error handling macro */
        FX_STM32_SD_WRITE_TRANSFER_ERROR(status);
        return FX_IO_ERROR;
 800e8c6:	2390      	movs	r3, #144	; 0x90
 800e8c8:	e05f      	b.n	800e98a <sd_write_data+0x166>
      }

      /*  */
       FX_STM32_SD_WRITE_CPLT_NOTIFY();
 800e8ca:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e8ce:	4833      	ldr	r0, [pc, #204]	; (800e99c <sd_write_data+0x178>)
 800e8d0:	f002 fe74 	bl	80115bc <_txe_semaphore_get>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d001      	beq.n	800e8de <sd_write_data+0xba>
 800e8da:	2390      	movs	r3, #144	; 0x90
 800e8dc:	e055      	b.n	800e98a <sd_write_data+0x166>
    for (i = 0; i < num_sectors; i++)
 800e8de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8e0:	3301      	adds	r3, #1
 800e8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e8e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8e6:	687a      	ldr	r2, [r7, #4]
 800e8e8:	429a      	cmp	r2, r3
 800e8ea:	d8ae      	bhi.n	800e84a <sd_write_data+0x26>
    }

    if (i == num_sectors)
 800e8ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8ee:	687a      	ldr	r2, [r7, #4]
 800e8f0:	429a      	cmp	r2, r3
 800e8f2:	d102      	bne.n	800e8fa <sd_write_data+0xd6>
    {
      status = FX_SUCCESS;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	63bb      	str	r3, [r7, #56]	; 0x38
 800e8f8:	e046      	b.n	800e988 <sd_write_data+0x164>
    }
    else
    {
      status = FX_BUFFER_ERROR;
 800e8fa:	2321      	movs	r3, #33	; 0x21
 800e8fc:	63bb      	str	r3, [r7, #56]	; 0x38
 800e8fe:	e043      	b.n	800e988 <sd_write_data+0x164>
    }
  }
  else
  {
#if (FX_STM32_SD_CACHE_MAINTENANCE == 1)
    clean_cache_by_addr((uint32_t*)media_ptr->fx_media_driver_buffer, num_sectors * FX_STM32_SD_DEFAULT_SECTOR_SIZE);
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	025b      	lsls	r3, r3, #9
 800e90a:	623a      	str	r2, [r7, #32]
 800e90c:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 800e90e:	69fb      	ldr	r3, [r7, #28]
 800e910:	2b00      	cmp	r3, #0
 800e912:	dd1d      	ble.n	800e950 <sd_write_data+0x12c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800e914:	6a3b      	ldr	r3, [r7, #32]
 800e916:	f003 021f 	and.w	r2, r3, #31
 800e91a:	69fb      	ldr	r3, [r7, #28]
 800e91c:	4413      	add	r3, r2
 800e91e:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800e920:	6a3b      	ldr	r3, [r7, #32]
 800e922:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800e924:	f3bf 8f4f 	dsb	sy
}
 800e928:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800e92a:	4a1b      	ldr	r2, [pc, #108]	; (800e998 <sd_write_data+0x174>)
 800e92c:	697b      	ldr	r3, [r7, #20]
 800e92e:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800e932:	697b      	ldr	r3, [r7, #20]
 800e934:	3320      	adds	r3, #32
 800e936:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800e938:	69bb      	ldr	r3, [r7, #24]
 800e93a:	3b20      	subs	r3, #32
 800e93c:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800e93e:	69bb      	ldr	r3, [r7, #24]
 800e940:	2b00      	cmp	r3, #0
 800e942:	dcf2      	bgt.n	800e92a <sd_write_data+0x106>
  __ASM volatile ("dsb 0xF":::"memory");
 800e944:	f3bf 8f4f 	dsb	sy
}
 800e948:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e94a:	f3bf 8f6f 	isb	sy
}
 800e94e:	bf00      	nop
}
 800e950:	bf00      	nop
#endif
    status = fx_stm32_sd_write_blocks(FX_STM32_SD_INSTANCE, (UINT *)media_ptr->fx_media_driver_buffer, (UINT)start_sector, num_sectors);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	68ba      	ldr	r2, [r7, #8]
 800e95c:	2000      	movs	r0, #0
 800e95e:	f7fb fb19 	bl	8009f94 <fx_stm32_sd_write_blocks>
 800e962:	4603      	mov	r3, r0
 800e964:	63bb      	str	r3, [r7, #56]	; 0x38

    if (status != 0)
 800e966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d001      	beq.n	800e970 <sd_write_data+0x14c>
    {
      FX_STM32_SD_WRITE_TRANSFER_ERROR(status);
      return FX_IO_ERROR;
 800e96c:	2390      	movs	r3, #144	; 0x90
 800e96e:	e00c      	b.n	800e98a <sd_write_data+0x166>
    }

    /* when defined, wait for the write notification */
     FX_STM32_SD_WRITE_CPLT_NOTIFY();
 800e970:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e974:	4809      	ldr	r0, [pc, #36]	; (800e99c <sd_write_data+0x178>)
 800e976:	f002 fe21 	bl	80115bc <_txe_semaphore_get>
 800e97a:	4603      	mov	r3, r0
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d001      	beq.n	800e984 <sd_write_data+0x160>
 800e980:	2390      	movs	r3, #144	; 0x90
 800e982:	e002      	b.n	800e98a <sd_write_data+0x166>

    status = FX_SUCCESS;
 800e984:	2300      	movs	r3, #0
 800e986:	63bb      	str	r3, [r7, #56]	; 0x38

  /* perform post write operations */
  FX_STM32_SD_POST_WRITE_TRANSFER(media_ptr);


  return status;
 800e988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	3740      	adds	r7, #64	; 0x40
 800e98e:	46bd      	mov	sp, r7
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop
 800e994:	24014b00 	.word	0x24014b00
 800e998:	e000ed00 	.word	0xe000ed00
 800e99c:	24014a68 	.word	0x24014a68

0800e9a0 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b096      	sub	sp, #88	; 0x58
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	60f8      	str	r0, [r7, #12]
 800e9a8:	60b9      	str	r1, [r7, #8]
 800e9aa:	607a      	str	r2, [r7, #4]
 800e9ac:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	3303      	adds	r3, #3
 800e9b2:	f023 0303 	bic.w	r3, r3, #3
 800e9b6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e9b8:	f3ef 8310 	mrs	r3, PRIMASK
 800e9bc:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800e9be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800e9c0:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800e9c2:	b672      	cpsid	i
    return(int_posture);
 800e9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800e9c6:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800e9c8:	4b55      	ldr	r3, [pc, #340]	; (800eb20 <_tx_byte_allocate+0x180>)
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e9d6:	621a      	str	r2, [r3, #32]
 800e9d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9da:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9de:	f383 8810 	msr	PRIMASK, r3
}
 800e9e2:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800e9e4:	6879      	ldr	r1, [r7, #4]
 800e9e6:	68f8      	ldr	r0, [r7, #12]
 800e9e8:	f000 f9b2 	bl	800ed50 <_tx_byte_pool_search>
 800e9ec:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e9ee:	f3ef 8310 	mrs	r3, PRIMASK
 800e9f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800e9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800e9f6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800e9f8:	b672      	cpsid	i
    return(int_posture);
 800e9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800e9fc:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800e9fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d002      	beq.n	800ea0a <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800ea04:	2301      	movs	r3, #1
 800ea06:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ea08:	e006      	b.n	800ea18 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	6a1b      	ldr	r3, [r3, #32]
 800ea0e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d101      	bne.n	800ea18 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800ea14:	2301      	movs	r3, #1
 800ea16:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800ea18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d0d9      	beq.n	800e9d2 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea22:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800ea24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d008      	beq.n	800ea3c <_tx_byte_allocate+0x9c>
 800ea2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea2c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ea2e:	6a3b      	ldr	r3, [r7, #32]
 800ea30:	f383 8810 	msr	PRIMASK, r3
}
 800ea34:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800ea36:	2300      	movs	r3, #0
 800ea38:	653b      	str	r3, [r7, #80]	; 0x50
 800ea3a:	e06c      	b.n	800eb16 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d061      	beq.n	800eb06 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800ea42:	4b38      	ldr	r3, [pc, #224]	; (800eb24 <_tx_byte_allocate+0x184>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d007      	beq.n	800ea5a <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800ea4a:	2310      	movs	r3, #16
 800ea4c:	653b      	str	r3, [r7, #80]	; 0x50
 800ea4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ea50:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ea52:	69fb      	ldr	r3, [r7, #28]
 800ea54:	f383 8810 	msr	PRIMASK, r3
}
 800ea58:	e05d      	b.n	800eb16 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800ea5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea5c:	4a32      	ldr	r2, [pc, #200]	; (800eb28 <_tx_byte_allocate+0x188>)
 800ea5e:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800ea60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea62:	68fa      	ldr	r2, [r7, #12]
 800ea64:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800ea66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea68:	68ba      	ldr	r2, [r7, #8]
 800ea6a:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800ea6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea6e:	687a      	ldr	r2, [r7, #4]
 800ea70:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800ea72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ea78:	1c5a      	adds	r2, r3, #1
 800ea7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea7c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea84:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea8a:	1c5a      	adds	r2, r3, #1
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800ea90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d109      	bne.n	800eaaa <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ea9a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800ea9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ea9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eaa0:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800eaa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eaa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eaa6:	675a      	str	r2, [r3, #116]	; 0x74
 800eaa8:	e011      	b.n	800eace <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaae:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800eab0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eab2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eab4:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800eab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eaba:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800eabc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eabe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eac0:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800eac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eac4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eac6:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800eac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eaca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eacc:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800eace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ead0:	2209      	movs	r2, #9
 800ead2:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ead4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ead6:	2201      	movs	r2, #1
 800ead8:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800eada:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eadc:	683a      	ldr	r2, [r7, #0]
 800eade:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800eae0:	4b10      	ldr	r3, [pc, #64]	; (800eb24 <_tx_byte_allocate+0x184>)
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	3301      	adds	r3, #1
 800eae6:	4a0f      	ldr	r2, [pc, #60]	; (800eb24 <_tx_byte_allocate+0x184>)
 800eae8:	6013      	str	r3, [r2, #0]
 800eaea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eaec:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800eaee:	69bb      	ldr	r3, [r7, #24]
 800eaf0:	f383 8810 	msr	PRIMASK, r3
}
 800eaf4:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800eaf6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800eaf8:	f001 ff1a 	bl	8010930 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800eafc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eafe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb02:	653b      	str	r3, [r7, #80]	; 0x50
 800eb04:	e007      	b.n	800eb16 <_tx_byte_allocate+0x176>
 800eb06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eb08:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	f383 8810 	msr	PRIMASK, r3
}
 800eb10:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800eb12:	2310      	movs	r3, #16
 800eb14:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800eb16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3758      	adds	r7, #88	; 0x58
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}
 800eb20:	24014d3c 	.word	0x24014d3c
 800eb24:	24014dd4 	.word	0x24014dd4
 800eb28:	0800eb2d 	.word	0x0800eb2d

0800eb2c <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b08e      	sub	sp, #56	; 0x38
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800eb36:	f3ef 8310 	mrs	r3, PRIMASK
 800eb3a:	623b      	str	r3, [r7, #32]
    return(posture);
 800eb3c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800eb3e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800eb40:	b672      	cpsid	i
    return(int_posture);
 800eb42:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800eb44:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb4a:	4a33      	ldr	r2, [pc, #204]	; (800ec18 <_tx_byte_pool_cleanup+0xec>)
 800eb4c:	4293      	cmp	r3, r2
 800eb4e:	d158      	bne.n	800ec02 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800eb56:	683a      	ldr	r2, [r7, #0]
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	d152      	bne.n	800ec02 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb60:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800eb62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d04c      	beq.n	800ec02 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800eb68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	4a2b      	ldr	r2, [pc, #172]	; (800ec1c <_tx_byte_pool_cleanup+0xf0>)
 800eb6e:	4293      	cmp	r3, r2
 800eb70:	d147      	bne.n	800ec02 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800eb72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d043      	beq.n	800ec02 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800eb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb84:	1e5a      	subs	r2, r3, #1
 800eb86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb88:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800eb8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb8e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800eb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d103      	bne.n	800eb9e <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800eb96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb98:	2200      	movs	r2, #0
 800eb9a:	625a      	str	r2, [r3, #36]	; 0x24
 800eb9c:	e013      	b.n	800ebc6 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eba2:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eba8:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800ebaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ebae:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800ebb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ebb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebb4:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800ebb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebba:	687a      	ldr	r2, [r7, #4]
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d102      	bne.n	800ebc6 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800ebc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ebc4:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebca:	2b09      	cmp	r3, #9
 800ebcc:	d119      	bne.n	800ec02 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2210      	movs	r2, #16
 800ebd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800ebd6:	4b12      	ldr	r3, [pc, #72]	; (800ec20 <_tx_byte_pool_cleanup+0xf4>)
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	3301      	adds	r3, #1
 800ebdc:	4a10      	ldr	r2, [pc, #64]	; (800ec20 <_tx_byte_pool_cleanup+0xf4>)
 800ebde:	6013      	str	r3, [r2, #0]
 800ebe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebe2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	f383 8810 	msr	PRIMASK, r3
}
 800ebea:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f001 fd9f 	bl	8010730 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ebf2:	f3ef 8310 	mrs	r3, PRIMASK
 800ebf6:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ebf8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ebfa:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ebfc:	b672      	cpsid	i
    return(int_posture);
 800ebfe:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800ec00:	637b      	str	r3, [r7, #52]	; 0x34
 800ec02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec04:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	f383 8810 	msr	PRIMASK, r3
}
 800ec0c:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800ec0e:	bf00      	nop
 800ec10:	3738      	adds	r7, #56	; 0x38
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}
 800ec16:	bf00      	nop
 800ec18:	0800eb2d 	.word	0x0800eb2d
 800ec1c:	42595445 	.word	0x42595445
 800ec20:	24014dd4 	.word	0x24014dd4

0800ec24 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b08e      	sub	sp, #56	; 0x38
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	60f8      	str	r0, [r7, #12]
 800ec2c:	60b9      	str	r1, [r7, #8]
 800ec2e:	607a      	str	r2, [r7, #4]
 800ec30:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800ec32:	2234      	movs	r2, #52	; 0x34
 800ec34:	2100      	movs	r1, #0
 800ec36:	68f8      	ldr	r0, [r7, #12]
 800ec38:	f002 fe7a 	bl	8011930 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	f023 0303 	bic.w	r3, r3, #3
 800ec42:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	68ba      	ldr	r2, [r7, #8]
 800ec48:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	687a      	ldr	r2, [r7, #4]
 800ec4e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	683a      	ldr	r2, [r7, #0]
 800ec54:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	687a      	ldr	r2, [r7, #4]
 800ec5a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	687a      	ldr	r2, [r7, #4]
 800ec60:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	f1a3 0208 	sub.w	r2, r3, #8
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	2202      	movs	r2, #2
 800ec70:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800ec76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ec78:	683b      	ldr	r3, [r7, #0]
 800ec7a:	4413      	add	r3, r2
 800ec7c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800ec7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec80:	3b04      	subs	r3, #4
 800ec82:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800ec88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800ec8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec90:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800ec92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec94:	3b04      	subs	r3, #4
 800ec96:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800ec98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ec9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec9e:	687a      	ldr	r2, [r7, #4]
 800eca0:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800eca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800ecaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ecae:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800ecb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecb6:	3304      	adds	r3, #4
 800ecb8:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800ecba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ecbc:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800ecbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecc0:	4a1f      	ldr	r2, [pc, #124]	; (800ed40 <_tx_byte_pool_create+0x11c>)
 800ecc2:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ecca:	f3ef 8310 	mrs	r3, PRIMASK
 800ecce:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ecd0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ecd2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ecd4:	b672      	cpsid	i
    return(int_posture);
 800ecd6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800ecd8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	4a19      	ldr	r2, [pc, #100]	; (800ed44 <_tx_byte_pool_create+0x120>)
 800ecde:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800ece0:	4b19      	ldr	r3, [pc, #100]	; (800ed48 <_tx_byte_pool_create+0x124>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d109      	bne.n	800ecfc <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800ece8:	4a18      	ldr	r2, [pc, #96]	; (800ed4c <_tx_byte_pool_create+0x128>)
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	68fa      	ldr	r2, [r7, #12]
 800ecf2:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	68fa      	ldr	r2, [r7, #12]
 800ecf8:	631a      	str	r2, [r3, #48]	; 0x30
 800ecfa:	e011      	b.n	800ed20 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800ecfc:	4b13      	ldr	r3, [pc, #76]	; (800ed4c <_tx_byte_pool_create+0x128>)
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800ed02:	6a3b      	ldr	r3, [r7, #32]
 800ed04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed06:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800ed08:	6a3b      	ldr	r3, [r7, #32]
 800ed0a:	68fa      	ldr	r2, [r7, #12]
 800ed0c:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800ed0e:	69fb      	ldr	r3, [r7, #28]
 800ed10:	68fa      	ldr	r2, [r7, #12]
 800ed12:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	69fa      	ldr	r2, [r7, #28]
 800ed18:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	6a3a      	ldr	r2, [r7, #32]
 800ed1e:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800ed20:	4b09      	ldr	r3, [pc, #36]	; (800ed48 <_tx_byte_pool_create+0x124>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	3301      	adds	r3, #1
 800ed26:	4a08      	ldr	r2, [pc, #32]	; (800ed48 <_tx_byte_pool_create+0x124>)
 800ed28:	6013      	str	r3, [r2, #0]
 800ed2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed2c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ed2e:	693b      	ldr	r3, [r7, #16]
 800ed30:	f383 8810 	msr	PRIMASK, r3
}
 800ed34:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800ed36:	2300      	movs	r3, #0
}
 800ed38:	4618      	mov	r0, r3
 800ed3a:	3738      	adds	r7, #56	; 0x38
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	bd80      	pop	{r7, pc}
 800ed40:	ffffeeee 	.word	0xffffeeee
 800ed44:	42595445 	.word	0x42595445
 800ed48:	24014d30 	.word	0x24014d30
 800ed4c:	24014d2c 	.word	0x24014d2c

0800ed50 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800ed50:	b480      	push	{r7}
 800ed52:	b097      	sub	sp, #92	; 0x5c
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
 800ed58:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ed5e:	f3ef 8310 	mrs	r3, PRIMASK
 800ed62:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800ed64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800ed66:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ed68:	b672      	cpsid	i
    return(int_posture);
 800ed6a:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800ed6c:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	689a      	ldr	r2, [r3, #8]
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	68db      	ldr	r3, [r3, #12]
 800ed76:	3b02      	subs	r3, #2
 800ed78:	00db      	lsls	r3, r3, #3
 800ed7a:	4413      	add	r3, r2
 800ed7c:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 800ed7e:	683a      	ldr	r2, [r7, #0]
 800ed80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d308      	bcc.n	800ed98 <_tx_byte_pool_search+0x48>
 800ed86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed88:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ed8a:	69fb      	ldr	r3, [r7, #28]
 800ed8c:	f383 8810 	msr	PRIMASK, r3
}
 800ed90:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800ed92:	2300      	movs	r3, #0
 800ed94:	653b      	str	r3, [r7, #80]	; 0x50
 800ed96:	e0dd      	b.n	800ef54 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800ed98:	4b72      	ldr	r3, [pc, #456]	; (800ef64 <_tx_byte_pool_search+0x214>)
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eda2:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	695b      	ldr	r3, [r3, #20]
 800eda8:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	68db      	ldr	r3, [r3, #12]
 800edae:	3301      	adds	r3, #1
 800edb0:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 800edb2:	2300      	movs	r3, #0
 800edb4:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800edb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edb8:	3304      	adds	r3, #4
 800edba:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800edbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edbe:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800edc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	4a68      	ldr	r2, [pc, #416]	; (800ef68 <_tx_byte_pool_search+0x218>)
 800edc6:	4293      	cmp	r3, r2
 800edc8:	d143      	bne.n	800ee52 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800edca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d104      	bne.n	800edda <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800edd4:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800edd6:	2301      	movs	r3, #1
 800edd8:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800edda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eddc:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 800edde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800ede4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ede6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ede8:	1ad3      	subs	r3, r2, r3
 800edea:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800edec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edee:	3b08      	subs	r3, #8
 800edf0:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800edf2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d257      	bcs.n	800eeaa <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800edfa:	2300      	movs	r3, #0
 800edfc:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800edfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee00:	3304      	adds	r3, #4
 800ee02:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800ee04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee06:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800ee08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	4a56      	ldr	r2, [pc, #344]	; (800ef68 <_tx_byte_pool_search+0x218>)
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d113      	bne.n	800ee3a <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800ee12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee14:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800ee16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee18:	681a      	ldr	r2, [r3, #0]
 800ee1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee1c:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	68db      	ldr	r3, [r3, #12]
 800ee22:	1e5a      	subs	r2, r3, #1
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	695b      	ldr	r3, [r3, #20]
 800ee2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee2e:	429a      	cmp	r2, r3
 800ee30:	d114      	bne.n	800ee5c <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ee36:	615a      	str	r2, [r3, #20]
 800ee38:	e010      	b.n	800ee5c <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800ee3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee3c:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 800ee3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800ee44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d008      	beq.n	800ee5c <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800ee4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee4c:	3b01      	subs	r3, #1
 800ee4e:	64bb      	str	r3, [r7, #72]	; 0x48
 800ee50:	e004      	b.n	800ee5c <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800ee52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee54:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 800ee56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800ee5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d002      	beq.n	800ee68 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800ee62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee64:	3b01      	subs	r3, #1
 800ee66:	64bb      	str	r3, [r7, #72]	; 0x48
 800ee68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee6a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ee6c:	693b      	ldr	r3, [r7, #16]
 800ee6e:	f383 8810 	msr	PRIMASK, r3
}
 800ee72:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ee74:	f3ef 8310 	mrs	r3, PRIMASK
 800ee78:	61bb      	str	r3, [r7, #24]
    return(posture);
 800ee7a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800ee7c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ee7e:	b672      	cpsid	i
    return(int_posture);
 800ee80:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800ee82:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	6a1b      	ldr	r3, [r3, #32]
 800ee88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ee8a:	429a      	cmp	r2, r3
 800ee8c:	d009      	beq.n	800eea2 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	695b      	ldr	r3, [r3, #20]
 800ee92:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	68db      	ldr	r3, [r3, #12]
 800ee98:	3301      	adds	r3, #1
 800ee9a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eea0:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800eea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d186      	bne.n	800edb6 <_tx_byte_pool_search+0x66>
 800eea8:	e000      	b.n	800eeac <_tx_byte_pool_search+0x15c>
                    break;
 800eeaa:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800eeac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d048      	beq.n	800ef44 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800eeb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	1ad3      	subs	r3, r2, r3
 800eeb8:	2b13      	cmp	r3, #19
 800eeba:	d91e      	bls.n	800eefa <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	3308      	adds	r3, #8
 800eec0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800eec2:	4413      	add	r3, r2
 800eec4:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800eec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eec8:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800eeca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eecc:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800eece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed0:	681a      	ldr	r2, [r3, #0]
 800eed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eed4:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800eed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eed8:	3304      	adds	r3, #4
 800eeda:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800eedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eede:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800eee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eee2:	4a21      	ldr	r2, [pc, #132]	; (800ef68 <_tx_byte_pool_search+0x218>)
 800eee4:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	68db      	ldr	r3, [r3, #12]
 800eeea:	1c5a      	adds	r2, r3, #1
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800eef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eef4:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800eefa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eefc:	3304      	adds	r3, #4
 800eefe:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800ef00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef02:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800ef04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef06:	687a      	ldr	r2, [r7, #4]
 800ef08:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	689a      	ldr	r2, [r3, #8]
 800ef0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef10:	1ad3      	subs	r3, r2, r3
 800ef12:	f1a3 0208 	sub.w	r2, r3, #8
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	695b      	ldr	r3, [r3, #20]
 800ef1e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ef20:	429a      	cmp	r2, r3
 800ef22:	d105      	bne.n	800ef30 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800ef24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef26:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800ef28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef2a:	681a      	ldr	r2, [r3, #0]
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	615a      	str	r2, [r3, #20]
 800ef30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef32:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	f383 8810 	msr	PRIMASK, r3
}
 800ef3a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800ef3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef3e:	3308      	adds	r3, #8
 800ef40:	653b      	str	r3, [r7, #80]	; 0x50
 800ef42:	e007      	b.n	800ef54 <_tx_byte_pool_search+0x204>
 800ef44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ef46:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	f383 8810 	msr	PRIMASK, r3
}
 800ef4e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800ef50:	2300      	movs	r3, #0
 800ef52:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800ef54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	375c      	adds	r7, #92	; 0x5c
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef60:	4770      	bx	lr
 800ef62:	bf00      	nop
 800ef64:	24014d3c 	.word	0x24014d3c
 800ef68:	ffffeeee 	.word	0xffffeeee

0800ef6c <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800ef6c:	b580      	push	{r7, lr}
 800ef6e:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800ef70:	f001 fa28 	bl	80103c4 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800ef74:	f001 ff26 	bl	8010dc4 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800ef78:	4b12      	ldr	r3, [pc, #72]	; (800efc4 <_tx_initialize_high_level+0x58>)
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	601a      	str	r2, [r3, #0]
 800ef7e:	4b12      	ldr	r3, [pc, #72]	; (800efc8 <_tx_initialize_high_level+0x5c>)
 800ef80:	2200      	movs	r2, #0
 800ef82:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800ef84:	4b11      	ldr	r3, [pc, #68]	; (800efcc <_tx_initialize_high_level+0x60>)
 800ef86:	2200      	movs	r2, #0
 800ef88:	601a      	str	r2, [r3, #0]
 800ef8a:	4b11      	ldr	r3, [pc, #68]	; (800efd0 <_tx_initialize_high_level+0x64>)
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800ef90:	4b10      	ldr	r3, [pc, #64]	; (800efd4 <_tx_initialize_high_level+0x68>)
 800ef92:	2200      	movs	r2, #0
 800ef94:	601a      	str	r2, [r3, #0]
 800ef96:	4b10      	ldr	r3, [pc, #64]	; (800efd8 <_tx_initialize_high_level+0x6c>)
 800ef98:	2200      	movs	r2, #0
 800ef9a:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800ef9c:	4b0f      	ldr	r3, [pc, #60]	; (800efdc <_tx_initialize_high_level+0x70>)
 800ef9e:	2200      	movs	r2, #0
 800efa0:	601a      	str	r2, [r3, #0]
 800efa2:	4b0f      	ldr	r3, [pc, #60]	; (800efe0 <_tx_initialize_high_level+0x74>)
 800efa4:	2200      	movs	r2, #0
 800efa6:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800efa8:	4b0e      	ldr	r3, [pc, #56]	; (800efe4 <_tx_initialize_high_level+0x78>)
 800efaa:	2200      	movs	r2, #0
 800efac:	601a      	str	r2, [r3, #0]
 800efae:	4b0e      	ldr	r3, [pc, #56]	; (800efe8 <_tx_initialize_high_level+0x7c>)
 800efb0:	2200      	movs	r2, #0
 800efb2:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800efb4:	4b0d      	ldr	r3, [pc, #52]	; (800efec <_tx_initialize_high_level+0x80>)
 800efb6:	2200      	movs	r2, #0
 800efb8:	601a      	str	r2, [r3, #0]
 800efba:	4b0d      	ldr	r3, [pc, #52]	; (800eff0 <_tx_initialize_high_level+0x84>)
 800efbc:	2200      	movs	r2, #0
 800efbe:	601a      	str	r2, [r3, #0]
#endif
}
 800efc0:	bf00      	nop
 800efc2:	bd80      	pop	{r7, pc}
 800efc4:	24014d04 	.word	0x24014d04
 800efc8:	24014d08 	.word	0x24014d08
 800efcc:	24014d0c 	.word	0x24014d0c
 800efd0:	24014d10 	.word	0x24014d10
 800efd4:	24014d14 	.word	0x24014d14
 800efd8:	24014d18 	.word	0x24014d18
 800efdc:	24014d24 	.word	0x24014d24
 800efe0:	24014d28 	.word	0x24014d28
 800efe4:	24014d2c 	.word	0x24014d2c
 800efe8:	24014d30 	.word	0x24014d30
 800efec:	24014d1c 	.word	0x24014d1c
 800eff0:	24014d20 	.word	0x24014d20

0800eff4 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800eff8:	4b10      	ldr	r3, [pc, #64]	; (800f03c <_tx_initialize_kernel_enter+0x48>)
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800f000:	d00c      	beq.n	800f01c <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800f002:	4b0e      	ldr	r3, [pc, #56]	; (800f03c <_tx_initialize_kernel_enter+0x48>)
 800f004:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800f008:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800f00a:	f7f1 f969 	bl	80002e0 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800f00e:	f7ff ffad 	bl	800ef6c <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800f012:	4b0b      	ldr	r3, [pc, #44]	; (800f040 <_tx_initialize_kernel_enter+0x4c>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	3301      	adds	r3, #1
 800f018:	4a09      	ldr	r2, [pc, #36]	; (800f040 <_tx_initialize_kernel_enter+0x4c>)
 800f01a:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800f01c:	4b07      	ldr	r3, [pc, #28]	; (800f03c <_tx_initialize_kernel_enter+0x48>)
 800f01e:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800f022:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800f024:	4b07      	ldr	r3, [pc, #28]	; (800f044 <_tx_initialize_kernel_enter+0x50>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	4618      	mov	r0, r3
 800f02a:	f7f1 fc4b 	bl	80008c4 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800f02e:	4b03      	ldr	r3, [pc, #12]	; (800f03c <_tx_initialize_kernel_enter+0x48>)
 800f030:	2200      	movs	r2, #0
 800f032:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800f034:	f7f1 f994 	bl	8000360 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800f038:	bf00      	nop
 800f03a:	bd80      	pop	{r7, pc}
 800f03c:	24000070 	.word	0x24000070
 800f040:	24014dd4 	.word	0x24014dd4
 800f044:	24014d34 	.word	0x24014d34

0800f048 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b08e      	sub	sp, #56	; 0x38
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
 800f050:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f052:	f3ef 8310 	mrs	r3, PRIMASK
 800f056:	623b      	str	r3, [r7, #32]
    return(posture);
 800f058:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800f05a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f05c:	b672      	cpsid	i
    return(int_posture);
 800f05e:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 800f060:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f066:	4a33      	ldr	r2, [pc, #204]	; (800f134 <_tx_mutex_cleanup+0xec>)
 800f068:	4293      	cmp	r3, r2
 800f06a:	d158      	bne.n	800f11e <_tx_mutex_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f072:	683a      	ldr	r2, [r7, #0]
 800f074:	429a      	cmp	r2, r3
 800f076:	d152      	bne.n	800f11e <_tx_mutex_cleanup+0xd6>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f07c:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 800f07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f080:	2b00      	cmp	r3, #0
 800f082:	d04c      	beq.n	800f11e <_tx_mutex_cleanup+0xd6>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 800f084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	4a2b      	ldr	r2, [pc, #172]	; (800f138 <_tx_mutex_cleanup+0xf0>)
 800f08a:	4293      	cmp	r3, r2
 800f08c:	d147      	bne.n	800f11e <_tx_mutex_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800f08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f090:	69db      	ldr	r3, [r3, #28]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d043      	beq.n	800f11e <_tx_mutex_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	2200      	movs	r2, #0
 800f09a:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 800f09c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f09e:	69db      	ldr	r3, [r3, #28]
 800f0a0:	1e5a      	subs	r2, r3, #1
 800f0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a4:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800f0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0a8:	69db      	ldr	r3, [r3, #28]
 800f0aa:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800f0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d103      	bne.n	800f0ba <_tx_mutex_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800f0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	619a      	str	r2, [r3, #24]
 800f0b8:	e013      	b.n	800f0e2 <_tx_mutex_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0be:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0c4:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800f0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0ca:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800f0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0d0:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 800f0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0d4:	699b      	ldr	r3, [r3, #24]
 800f0d6:	687a      	ldr	r2, [r7, #4]
 800f0d8:	429a      	cmp	r2, r3
 800f0da:	d102      	bne.n	800f0e2 <_tx_mutex_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 800f0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0e0:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0e6:	2b0d      	cmp	r3, #13
 800f0e8:	d119      	bne.n	800f11e <_tx_mutex_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	221d      	movs	r2, #29
 800f0ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800f0f2:	4b12      	ldr	r3, [pc, #72]	; (800f13c <_tx_mutex_cleanup+0xf4>)
 800f0f4:	681b      	ldr	r3, [r3, #0]
 800f0f6:	3301      	adds	r3, #1
 800f0f8:	4a10      	ldr	r2, [pc, #64]	; (800f13c <_tx_mutex_cleanup+0xf4>)
 800f0fa:	6013      	str	r3, [r2, #0]
 800f0fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f0fe:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f100:	693b      	ldr	r3, [r7, #16]
 800f102:	f383 8810 	msr	PRIMASK, r3
}
 800f106:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800f108:	6878      	ldr	r0, [r7, #4]
 800f10a:	f001 fb11 	bl	8010730 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f10e:	f3ef 8310 	mrs	r3, PRIMASK
 800f112:	61bb      	str	r3, [r7, #24]
    return(posture);
 800f114:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800f116:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f118:	b672      	cpsid	i
    return(int_posture);
 800f11a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800f11c:	637b      	str	r3, [r7, #52]	; 0x34
 800f11e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f120:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	f383 8810 	msr	PRIMASK, r3
}
 800f128:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800f12a:	bf00      	nop
 800f12c:	3738      	adds	r7, #56	; 0x38
 800f12e:	46bd      	mov	sp, r7
 800f130:	bd80      	pop	{r7, pc}
 800f132:	bf00      	nop
 800f134:	0800f049 	.word	0x0800f049
 800f138:	4d555445 	.word	0x4d555445
 800f13c:	24014dd4 	.word	0x24014dd4

0800f140 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b08a      	sub	sp, #40	; 0x28
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f148:	f3ef 8310 	mrs	r3, PRIMASK
 800f14c:	61fb      	str	r3, [r7, #28]
    return(posture);
 800f14e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800f150:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f152:	b672      	cpsid	i
    return(int_posture);
 800f154:	69bb      	ldr	r3, [r7, #24]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800f156:	627b      	str	r3, [r7, #36]	; 0x24

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800f158:	4b1a      	ldr	r3, [pc, #104]	; (800f1c4 <_tx_mutex_thread_release+0x84>)
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	3301      	adds	r3, #1
 800f15e:	4a19      	ldr	r2, [pc, #100]	; (800f1c4 <_tx_mutex_thread_release+0x84>)
 800f160:	6013      	str	r3, [r2, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f168:	623b      	str	r3, [r7, #32]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 800f16a:	6a3b      	ldr	r3, [r7, #32]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d017      	beq.n	800f1a0 <_tx_mutex_thread_release+0x60>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800f170:	6a3b      	ldr	r3, [r7, #32]
 800f172:	2201      	movs	r2, #1
 800f174:	609a      	str	r2, [r3, #8]
 800f176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f178:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	f383 8810 	msr	PRIMASK, r3
}
 800f180:	bf00      	nop
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 800f182:	6a38      	ldr	r0, [r7, #32]
 800f184:	f000 fb9c 	bl	800f8c0 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f188:	f3ef 8310 	mrs	r3, PRIMASK
 800f18c:	617b      	str	r3, [r7, #20]
    return(posture);
 800f18e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800f190:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f192:	b672      	cpsid	i
    return(int_posture);
 800f194:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 800f196:	627b      	str	r3, [r7, #36]	; 0x24

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f19e:	623b      	str	r3, [r7, #32]
        }
    } while (mutex_ptr != TX_NULL);
 800f1a0:	6a3b      	ldr	r3, [r7, #32]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d1dd      	bne.n	800f162 <_tx_mutex_thread_release+0x22>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 800f1a6:	4b07      	ldr	r3, [pc, #28]	; (800f1c4 <_tx_mutex_thread_release+0x84>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	3b01      	subs	r3, #1
 800f1ac:	4a05      	ldr	r2, [pc, #20]	; (800f1c4 <_tx_mutex_thread_release+0x84>)
 800f1ae:	6013      	str	r3, [r2, #0]
 800f1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f1b4:	68bb      	ldr	r3, [r7, #8]
 800f1b6:	f383 8810 	msr	PRIMASK, r3
}
 800f1ba:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE
}
 800f1bc:	bf00      	nop
 800f1be:	3728      	adds	r7, #40	; 0x28
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}
 800f1c4:	24014dd4 	.word	0x24014dd4

0800f1c8 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b08a      	sub	sp, #40	; 0x28
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	60f8      	str	r0, [r7, #12]
 800f1d0:	60b9      	str	r1, [r7, #8]
 800f1d2:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 800f1d4:	2234      	movs	r2, #52	; 0x34
 800f1d6:	2100      	movs	r1, #0
 800f1d8:	68f8      	ldr	r0, [r7, #12]
 800f1da:	f002 fba9 	bl	8011930 <memset>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	68ba      	ldr	r2, [r7, #8]
 800f1e2:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	687a      	ldr	r2, [r7, #4]
 800f1e8:	611a      	str	r2, [r3, #16]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f1ea:	f3ef 8310 	mrs	r3, PRIMASK
 800f1ee:	61bb      	str	r3, [r7, #24]
    return(posture);
 800f1f0:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800f1f2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f1f4:	b672      	cpsid	i
    return(int_posture);
 800f1f6:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 800f1f8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	4a1a      	ldr	r2, [pc, #104]	; (800f268 <_tx_mutex_create+0xa0>)
 800f1fe:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 800f200:	4b1a      	ldr	r3, [pc, #104]	; (800f26c <_tx_mutex_create+0xa4>)
 800f202:	4a1b      	ldr	r2, [pc, #108]	; (800f270 <_tx_mutex_create+0xa8>)
 800f204:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800f206:	4b1b      	ldr	r3, [pc, #108]	; (800f274 <_tx_mutex_create+0xac>)
 800f208:	681b      	ldr	r3, [r3, #0]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d109      	bne.n	800f222 <_tx_mutex_create+0x5a>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 800f20e:	4a1a      	ldr	r2, [pc, #104]	; (800f278 <_tx_mutex_create+0xb0>)
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	6013      	str	r3, [r2, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	68fa      	ldr	r2, [r7, #12]
 800f218:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	68fa      	ldr	r2, [r7, #12]
 800f21e:	625a      	str	r2, [r3, #36]	; 0x24
 800f220:	e011      	b.n	800f246 <_tx_mutex_create+0x7e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 800f222:	4b15      	ldr	r3, [pc, #84]	; (800f278 <_tx_mutex_create+0xb0>)
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 800f228:	6a3b      	ldr	r3, [r7, #32]
 800f22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f22c:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 800f22e:	6a3b      	ldr	r3, [r7, #32]
 800f230:	68fa      	ldr	r2, [r7, #12]
 800f232:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 800f234:	69fb      	ldr	r3, [r7, #28]
 800f236:	68fa      	ldr	r2, [r7, #12]
 800f238:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	69fa      	ldr	r2, [r7, #28]
 800f23e:	625a      	str	r2, [r3, #36]	; 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	6a3a      	ldr	r2, [r7, #32]
 800f244:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 800f246:	4b0b      	ldr	r3, [pc, #44]	; (800f274 <_tx_mutex_create+0xac>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	3301      	adds	r3, #1
 800f24c:	4a09      	ldr	r2, [pc, #36]	; (800f274 <_tx_mutex_create+0xac>)
 800f24e:	6013      	str	r3, [r2, #0]
 800f250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f252:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f254:	693b      	ldr	r3, [r7, #16]
 800f256:	f383 8810 	msr	PRIMASK, r3
}
 800f25a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800f25c:	2300      	movs	r3, #0
}
 800f25e:	4618      	mov	r0, r3
 800f260:	3728      	adds	r7, #40	; 0x28
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}
 800f266:	bf00      	nop
 800f268:	4d555445 	.word	0x4d555445
 800f26c:	24014dd8 	.word	0x24014dd8
 800f270:	0800f141 	.word	0x0800f141
 800f274:	24014d20 	.word	0x24014d20
 800f278:	24014d1c 	.word	0x24014d1c

0800f27c <_tx_mutex_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_delete(TX_MUTEX *mutex_ptr)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b096      	sub	sp, #88	; 0x58
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f284:	f3ef 8310 	mrs	r3, PRIMASK
 800f288:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800f28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800f28c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800f28e:	b672      	cpsid	i
    return(int_posture);
 800f290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
#ifdef TX_MISRA_ENABLE
UINT            status;
#endif

    /* Disable interrupts to remove the mutex from the created list.  */
    TX_DISABLE
 800f292:	657b      	str	r3, [r7, #84]	; 0x54

    /* Log this kernel call.  */
    TX_EL_MUTEX_DELETE_INSERT

    /* Clear the mutex ID to make it invalid.  */
    mutex_ptr -> tx_mutex_id =  TX_CLEAR_ID;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	2200      	movs	r2, #0
 800f298:	601a      	str	r2, [r3, #0]

    /* Decrement the created count.  */
    _tx_mutex_created_count--;
 800f29a:	4b4a      	ldr	r3, [pc, #296]	; (800f3c4 <_tx_mutex_delete+0x148>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	3b01      	subs	r3, #1
 800f2a0:	4a48      	ldr	r2, [pc, #288]	; (800f3c4 <_tx_mutex_delete+0x148>)
 800f2a2:	6013      	str	r3, [r2, #0]

    /* See if the mutex is the only one on the list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 800f2a4:	4b47      	ldr	r3, [pc, #284]	; (800f3c4 <_tx_mutex_delete+0x148>)
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d103      	bne.n	800f2b4 <_tx_mutex_delete+0x38>
    {

        /* Only created mutex, just set the created list to NULL.  */
        _tx_mutex_created_ptr =  TX_NULL;
 800f2ac:	4b46      	ldr	r3, [pc, #280]	; (800f3c8 <_tx_mutex_delete+0x14c>)
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	601a      	str	r2, [r3, #0]
 800f2b2:	e013      	b.n	800f2dc <_tx_mutex_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_mutex =                               mutex_ptr -> tx_mutex_created_next;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	6a1b      	ldr	r3, [r3, #32]
 800f2b8:	64bb      	str	r3, [r7, #72]	; 0x48
        previous_mutex =                           mutex_ptr -> tx_mutex_created_previous;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2be:	647b      	str	r3, [r7, #68]	; 0x44
        next_mutex -> tx_mutex_created_previous =  previous_mutex;
 800f2c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f2c4:	625a      	str	r2, [r3, #36]	; 0x24
        previous_mutex -> tx_mutex_created_next =  next_mutex;
 800f2c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f2ca:	621a      	str	r2, [r3, #32]

        /* See if we have to update the created list head pointer.  */
        if (_tx_mutex_created_ptr == mutex_ptr)
 800f2cc:	4b3e      	ldr	r3, [pc, #248]	; (800f3c8 <_tx_mutex_delete+0x14c>)
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	687a      	ldr	r2, [r7, #4]
 800f2d2:	429a      	cmp	r2, r3
 800f2d4:	d102      	bne.n	800f2dc <_tx_mutex_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_mutex_created_ptr =  next_mutex;
 800f2d6:	4a3c      	ldr	r2, [pc, #240]	; (800f3c8 <_tx_mutex_delete+0x14c>)
 800f2d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f2da:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800f2dc:	4b3b      	ldr	r3, [pc, #236]	; (800f3cc <_tx_mutex_delete+0x150>)
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	3301      	adds	r3, #1
 800f2e2:	4a3a      	ldr	r2, [pc, #232]	; (800f3cc <_tx_mutex_delete+0x150>)
 800f2e4:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                             mutex_ptr -> tx_mutex_suspension_list;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	699b      	ldr	r3, [r3, #24]
 800f2ea:	653b      	str	r3, [r7, #80]	; 0x50
    mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	619a      	str	r2, [r3, #24]
    suspended_count =                        mutex_ptr -> tx_mutex_suspended_count;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	69db      	ldr	r3, [r3, #28]
 800f2f6:	64fb      	str	r3, [r7, #76]	; 0x4c
    mutex_ptr -> tx_mutex_suspended_count =  TX_NO_SUSPENSIONS;
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	61da      	str	r2, [r3, #28]


    /* Determine if the mutex is currently on a thread's ownership list.  */

    /* Setup pointer to owner of mutex.  */
    owner_thread =  mutex_ptr -> tx_mutex_owner;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	68db      	ldr	r3, [r3, #12]
 800f302:	643b      	str	r3, [r7, #64]	; 0x40

    /* Determine if there is a valid thread pointer.  */
    if (owner_thread != TX_NULL)
 800f304:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f306:	2b00      	cmp	r3, #0
 800f308:	d013      	beq.n	800f332 <_tx_mutex_delete+0xb6>
    {

        /* Yes, remove this mutex from the owned list.  */

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	2201      	movs	r2, #1
 800f30e:	609a      	str	r2, [r3, #8]
 800f310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f312:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f316:	f383 8810 	msr	PRIMASK, r3
}
 800f31a:	bf00      	nop
        do
        {
            status =  _tx_mutex_put(mutex_ptr);
        } while (status != TX_SUCCESS);
#else
        _tx_mutex_put(mutex_ptr);
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	f000 facf 	bl	800f8c0 <_tx_mutex_put>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f322:	f3ef 8310 	mrs	r3, PRIMASK
 800f326:	633b      	str	r3, [r7, #48]	; 0x30
    return(posture);
 800f328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    int_posture = __get_interrupt_posture();
 800f32a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("CPSID i" : : : "memory");
 800f32c:	b672      	cpsid	i
    return(int_posture);
 800f32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
#endif

        /* Disable interrupts.  */
        TX_DISABLE
 800f330:	657b      	str	r3, [r7, #84]	; 0x54
 800f332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f334:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f338:	f383 8810 	msr	PRIMASK, r3
}
 800f33c:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the mutex list to resume any and all threads suspended
       on this mutex.  */
    while (suspended_count != ((ULONG) 0))
 800f33e:	e024      	b.n	800f38a <_tx_mutex_delete+0x10e>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 800f340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f342:	3b01      	subs	r3, #1
 800f344:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f346:	f3ef 8310 	mrs	r3, PRIMASK
 800f34a:	61fb      	str	r3, [r7, #28]
    return(posture);
 800f34c:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800f34e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f350:	b672      	cpsid	i
    return(int_posture);
 800f352:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 800f354:	657b      	str	r3, [r7, #84]	; 0x54

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f358:	2200      	movs	r2, #0
 800f35a:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 800f35c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f35e:	2201      	movs	r2, #1
 800f360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 800f364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f368:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800f36a:	4b18      	ldr	r3, [pc, #96]	; (800f3cc <_tx_mutex_delete+0x150>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	3301      	adds	r3, #1
 800f370:	4a16      	ldr	r2, [pc, #88]	; (800f3cc <_tx_mutex_delete+0x150>)
 800f372:	6013      	str	r3, [r2, #0]
 800f374:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f376:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f378:	6a3b      	ldr	r3, [r7, #32]
 800f37a:	f383 8810 	msr	PRIMASK, r3
}
 800f37e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800f380:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f382:	f001 f9d5 	bl	8010730 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 800f386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f388:	653b      	str	r3, [r7, #80]	; 0x50
    while (suspended_count != ((ULONG) 0))
 800f38a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d1d7      	bne.n	800f340 <_tx_mutex_delete+0xc4>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f390:	f3ef 8310 	mrs	r3, PRIMASK
 800f394:	613b      	str	r3, [r7, #16]
    return(posture);
 800f396:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800f398:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f39a:	b672      	cpsid	i
    return(int_posture);
 800f39c:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_MUTEX_DELETE_PORT_COMPLETION(mutex_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 800f39e:	657b      	str	r3, [r7, #84]	; 0x54

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800f3a0:	4b0a      	ldr	r3, [pc, #40]	; (800f3cc <_tx_mutex_delete+0x150>)
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	3b01      	subs	r3, #1
 800f3a6:	4a09      	ldr	r2, [pc, #36]	; (800f3cc <_tx_mutex_delete+0x150>)
 800f3a8:	6013      	str	r3, [r2, #0]
 800f3aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3ac:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	f383 8810 	msr	PRIMASK, r3
}
 800f3b4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800f3b6:	f001 f981 	bl	80106bc <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800f3ba:	2300      	movs	r3, #0
}
 800f3bc:	4618      	mov	r0, r3
 800f3be:	3758      	adds	r7, #88	; 0x58
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	bd80      	pop	{r7, pc}
 800f3c4:	24014d20 	.word	0x24014d20
 800f3c8:	24014d1c 	.word	0x24014d1c
 800f3cc:	24014dd4 	.word	0x24014dd4

0800f3d0 <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b092      	sub	sp, #72	; 0x48
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f3da:	f3ef 8310 	mrs	r3, PRIMASK
 800f3de:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800f3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800f3e2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f3e4:	b672      	cpsid	i
    return(int_posture);
 800f3e6:	6a3b      	ldr	r3, [r7, #32]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 800f3e8:	643b      	str	r3, [r7, #64]	; 0x40

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800f3ea:	4b7a      	ldr	r3, [pc, #488]	; (800f5d4 <_tx_mutex_get+0x204>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	689b      	ldr	r3, [r3, #8]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d144      	bne.n	800f482 <_tx_mutex_get+0xb2>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	2201      	movs	r2, #1
 800f3fc:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f402:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 800f404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f406:	2b00      	cmp	r3, #0
 800f408:	d032      	beq.n	800f470 <_tx_mutex_get+0xa0>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	691b      	ldr	r3, [r3, #16]
 800f40e:	2b01      	cmp	r3, #1
 800f410:	d106      	bne.n	800f420 <_tx_mutex_get+0x50>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800f412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f414:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	2220      	movs	r2, #32
 800f41e:	629a      	str	r2, [r3, #40]	; 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800f420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f422:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f426:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 800f428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d00f      	beq.n	800f44e <_tx_mutex_get+0x7e>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 800f42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f432:	62bb      	str	r3, [r7, #40]	; 0x28

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800f434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f436:	687a      	ldr	r2, [r7, #4]
 800f438:	631a      	str	r2, [r3, #48]	; 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800f43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f43c:	687a      	ldr	r2, [r7, #4]
 800f43e:	62da      	str	r2, [r3, #44]	; 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f444:	631a      	str	r2, [r3, #48]	; 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f44a:	62da      	str	r2, [r3, #44]	; 0x2c
 800f44c:	e009      	b.n	800f462 <_tx_mutex_get+0x92>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800f44e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f450:	687a      	ldr	r2, [r7, #4]
 800f452:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	687a      	ldr	r2, [r7, #4]
 800f45a:	62da      	str	r2, [r3, #44]	; 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	687a      	ldr	r2, [r7, #4]
 800f460:	631a      	str	r2, [r3, #48]	; 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 800f462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f464:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f468:	1c5a      	adds	r2, r3, #1
 800f46a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f46c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800f470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f472:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f474:	69fb      	ldr	r3, [r7, #28]
 800f476:	f383 8810 	msr	PRIMASK, r3
}
 800f47a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800f47c:	2300      	movs	r3, #0
 800f47e:	647b      	str	r3, [r7, #68]	; 0x44
 800f480:	e0a2      	b.n	800f5c8 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	68db      	ldr	r3, [r3, #12]
 800f486:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f488:	429a      	cmp	r2, r3
 800f48a:	d10d      	bne.n	800f4a8 <_tx_mutex_get+0xd8>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	689b      	ldr	r3, [r3, #8]
 800f490:	1c5a      	adds	r2, r3, #1
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	609a      	str	r2, [r3, #8]
 800f496:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f498:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f49a:	69bb      	ldr	r3, [r7, #24]
 800f49c:	f383 8810 	msr	PRIMASK, r3
}
 800f4a0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	647b      	str	r3, [r7, #68]	; 0x44
 800f4a6:	e08f      	b.n	800f5c8 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	f000 8084 	beq.w	800f5b8 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800f4b0:	4b49      	ldr	r3, [pc, #292]	; (800f5d8 <_tx_mutex_get+0x208>)
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d008      	beq.n	800f4ca <_tx_mutex_get+0xfa>
 800f4b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4ba:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f4bc:	697b      	ldr	r3, [r7, #20]
 800f4be:	f383 8810 	msr	PRIMASK, r3
}
 800f4c2:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 800f4c4:	231d      	movs	r3, #29
 800f4c6:	647b      	str	r3, [r7, #68]	; 0x44
 800f4c8:	e07e      	b.n	800f5c8 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	68db      	ldr	r3, [r3, #12]
 800f4ce:	63bb      	str	r3, [r7, #56]	; 0x38
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 800f4d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4d2:	4a42      	ldr	r2, [pc, #264]	; (800f5dc <_tx_mutex_get+0x20c>)
 800f4d4:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 800f4d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4d8:	687a      	ldr	r2, [r7, #4]
 800f4da:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800f4dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800f4e2:	1c5a      	adds	r2, r3, #1
 800f4e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4e6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	69db      	ldr	r3, [r3, #28]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d109      	bne.n	800f506 <_tx_mutex_get+0x136>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f4f6:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800f4f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f4fc:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800f4fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f500:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f502:	675a      	str	r2, [r3, #116]	; 0x74
 800f504:	e011      	b.n	800f52a <_tx_mutex_get+0x15a>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	699b      	ldr	r3, [r3, #24]
 800f50a:	637b      	str	r3, [r7, #52]	; 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800f50c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f50e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f510:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800f512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f516:	633b      	str	r3, [r7, #48]	; 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800f518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f51a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f51c:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800f51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f520:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f522:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800f524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f526:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f528:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	69db      	ldr	r3, [r3, #28]
 800f52e:	1c5a      	adds	r2, r3, #1
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 800f534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f536:	220d      	movs	r2, #13
 800f538:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800f53a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f53c:	2201      	movs	r2, #1
 800f53e:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800f540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f542:	683a      	ldr	r2, [r7, #0]
 800f544:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800f546:	4b24      	ldr	r3, [pc, #144]	; (800f5d8 <_tx_mutex_get+0x208>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	3301      	adds	r3, #1
 800f54c:	4a22      	ldr	r2, [pc, #136]	; (800f5d8 <_tx_mutex_get+0x208>)
 800f54e:	6013      	str	r3, [r2, #0]
 800f550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f552:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f554:	693b      	ldr	r3, [r7, #16]
 800f556:	f383 8810 	msr	PRIMASK, r3
}
 800f55a:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	691b      	ldr	r3, [r3, #16]
 800f560:	2b01      	cmp	r3, #1
 800f562:	d121      	bne.n	800f5a8 <_tx_mutex_get+0x1d8>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f56c:	429a      	cmp	r2, r3
 800f56e:	d903      	bls.n	800f578 <_tx_mutex_get+0x1a8>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 800f570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	629a      	str	r2, [r3, #40]	; 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 800f578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f57a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f57e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800f582:	429a      	cmp	r2, r3
 800f584:	d204      	bcs.n	800f590 <_tx_mutex_get+0x1c0>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 800f586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f58c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 800f590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f598:	429a      	cmp	r2, r3
 800f59a:	d905      	bls.n	800f5a8 <_tx_mutex_get+0x1d8>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 800f59c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5a0:	4619      	mov	r1, r3
 800f5a2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f5a4:	f000 f8ce 	bl	800f744 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800f5a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f5aa:	f001 f9c1 	bl	8010930 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800f5ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f5b4:	647b      	str	r3, [r7, #68]	; 0x44
 800f5b6:	e007      	b.n	800f5c8 <_tx_mutex_get+0x1f8>
 800f5b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f5ba:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	f383 8810 	msr	PRIMASK, r3
}
 800f5c2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 800f5c4:	231d      	movs	r3, #29
 800f5c6:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }

    /* Return completion status.  */
    return(status);
 800f5c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	3748      	adds	r7, #72	; 0x48
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}
 800f5d2:	bf00      	nop
 800f5d4:	24014d3c 	.word	0x24014d3c
 800f5d8:	24014dd4 	.word	0x24014dd4
 800f5dc:	0800f049 	.word	0x0800f049

0800f5e0 <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b092      	sub	sp, #72	; 0x48
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f5e8:	f3ef 8310 	mrs	r3, PRIMASK
 800f5ec:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800f5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800f5f0:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f5f2:	b672      	cpsid	i
    return(int_posture);
 800f5f4:	6a3b      	ldr	r3, [r7, #32]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 800f5f6:	647b      	str	r3, [r7, #68]	; 0x44

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	69db      	ldr	r3, [r3, #28]
 800f5fc:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 800f5fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f600:	2b01      	cmp	r3, #1
 800f602:	d805      	bhi.n	800f610 <_tx_mutex_prioritize+0x30>
 800f604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f606:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f608:	69fb      	ldr	r3, [r7, #28]
 800f60a:	f383 8810 	msr	PRIMASK, r3
}
 800f60e:	e092      	b.n	800f736 <_tx_mutex_prioritize+0x156>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 800f610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f612:	2b02      	cmp	r3, #2
 800f614:	d114      	bne.n	800f640 <_tx_mutex_prioritize+0x60>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	699b      	ldr	r3, [r3, #24]
 800f61a:	63bb      	str	r3, [r7, #56]	; 0x38
        next_thread =  head_ptr -> tx_thread_suspended_next;
 800f61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f61e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f620:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 800f622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f62a:	429a      	cmp	r2, r3
 800f62c:	d202      	bcs.n	800f634 <_tx_mutex_prioritize+0x54>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f632:	619a      	str	r2, [r3, #24]
 800f634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f636:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f638:	69bb      	ldr	r3, [r7, #24]
 800f63a:	f383 8810 	msr	PRIMASK, r3
}
 800f63e:	e07a      	b.n	800f736 <_tx_mutex_prioritize+0x156>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	699b      	ldr	r3, [r3, #24]
 800f644:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 800f646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f648:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800f64a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f64c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f64e:	643b      	str	r3, [r7, #64]	; 0x40

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 800f650:	4b3b      	ldr	r3, [pc, #236]	; (800f740 <_tx_mutex_prioritize+0x160>)
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	3301      	adds	r3, #1
 800f656:	4a3a      	ldr	r2, [pc, #232]	; (800f740 <_tx_mutex_prioritize+0x160>)
 800f658:	6013      	str	r3, [r2, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 800f65a:	2300      	movs	r3, #0
 800f65c:	633b      	str	r3, [r7, #48]	; 0x30
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 800f65e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f662:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f666:	429a      	cmp	r2, r3
 800f668:	d201      	bcs.n	800f66e <_tx_mutex_prioritize+0x8e>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 800f66a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f66c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f66e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f670:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	f383 8810 	msr	PRIMASK, r3
}
 800f678:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f67a:	f3ef 8310 	mrs	r3, PRIMASK
 800f67e:	617b      	str	r3, [r7, #20]
    return(posture);
 800f680:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800f682:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f684:	b672      	cpsid	i
    return(int_posture);
 800f686:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800f688:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	699b      	ldr	r3, [r3, #24]
 800f68e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f690:	429a      	cmp	r2, r3
 800f692:	d002      	beq.n	800f69a <_tx_mutex_prioritize+0xba>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 800f694:	2301      	movs	r3, #1
 800f696:	633b      	str	r3, [r7, #48]	; 0x30
 800f698:	e006      	b.n	800f6a8 <_tx_mutex_prioritize+0xc8>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	69db      	ldr	r3, [r3, #28]
 800f69e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f6a0:	429a      	cmp	r2, r3
 800f6a2:	d001      	beq.n	800f6a8 <_tx_mutex_prioritize+0xc8>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 800f6a4:	2301      	movs	r3, #1
 800f6a6:	633b      	str	r3, [r7, #48]	; 0x30
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 800f6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d103      	bne.n	800f6b6 <_tx_mutex_prioritize+0xd6>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800f6ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6b2:	643b      	str	r3, [r7, #64]	; 0x40
 800f6b4:	e00c      	b.n	800f6d0 <_tx_mutex_prioritize+0xf0>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	699b      	ldr	r3, [r3, #24]
 800f6ba:	63bb      	str	r3, [r7, #56]	; 0x38
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	69db      	ldr	r3, [r3, #28]
 800f6c0:	637b      	str	r3, [r7, #52]	; 0x34

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 800f6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6c4:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 800f6c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6ca:	643b      	str	r3, [r7, #64]	; 0x40

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	633b      	str	r3, [r7, #48]	; 0x30
            }

        } while (thread_ptr != head_ptr);
 800f6d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6d4:	429a      	cmp	r2, r3
 800f6d6:	d1c2      	bne.n	800f65e <_tx_mutex_prioritize+0x7e>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 800f6d8:	4b19      	ldr	r3, [pc, #100]	; (800f740 <_tx_mutex_prioritize+0x160>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	3b01      	subs	r3, #1
 800f6de:	4a18      	ldr	r2, [pc, #96]	; (800f740 <_tx_mutex_prioritize+0x160>)
 800f6e0:	6013      	str	r3, [r2, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 800f6e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e6:	429a      	cmp	r2, r3
 800f6e8:	d01d      	beq.n	800f726 <_tx_mutex_prioritize+0x146>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 800f6ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6ee:	62fb      	str	r3, [r7, #44]	; 0x2c
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 800f6f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6f4:	62bb      	str	r3, [r7, #40]	; 0x28
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 800f6f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f6fa:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 800f6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f700:	671a      	str	r2, [r3, #112]	; 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 800f702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f706:	62bb      	str	r3, [r7, #40]	; 0x28
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 800f708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f70a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f70c:	671a      	str	r2, [r3, #112]	; 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 800f70e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f710:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f712:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 800f714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f716:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f718:	671a      	str	r2, [r3, #112]	; 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 800f71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f71c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f71e:	675a      	str	r2, [r3, #116]	; 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f724:	619a      	str	r2, [r3, #24]
 800f726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f728:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	f383 8810 	msr	PRIMASK, r3
}
 800f730:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800f732:	f000 ffc3 	bl	80106bc <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 800f736:	2300      	movs	r3, #0
#endif
}
 800f738:	4618      	mov	r0, r3
 800f73a:	3748      	adds	r7, #72	; 0x48
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}
 800f740:	24014dd4 	.word	0x24014dd4

0800f744 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b090      	sub	sp, #64	; 0x40
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
 800f74c:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f74e:	f3ef 8310 	mrs	r3, PRIMASK
 800f752:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800f754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800f756:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800f758:	b672      	cpsid	i
    return(int_posture);
 800f75a:	6abb      	ldr	r3, [r7, #40]	; 0x28


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800f75c:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f762:	2b00      	cmp	r3, #0
 800f764:	d017      	beq.n	800f796 <_tx_mutex_priority_change+0x52>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	683a      	ldr	r2, [r7, #0]
 800f76a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f772:	683a      	ldr	r2, [r7, #0]
 800f774:	429a      	cmp	r2, r3
 800f776:	d905      	bls.n	800f784 <_tx_mutex_priority_change+0x40>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	63da      	str	r2, [r3, #60]	; 0x3c
 800f782:	e002      	b.n	800f78a <_tx_mutex_priority_change+0x46>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	683a      	ldr	r2, [r7, #0]
 800f788:	63da      	str	r2, [r3, #60]	; 0x3c
 800f78a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f78c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f790:	f383 8810 	msr	PRIMASK, r3
}
 800f794:	e089      	b.n	800f8aa <_tx_mutex_priority_change+0x166>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 800f796:	4b47      	ldr	r3, [pc, #284]	; (800f8b4 <_tx_mutex_priority_change+0x170>)
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7a0:	637b      	str	r3, [r7, #52]	; 0x34
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 800f7a2:	4b45      	ldr	r3, [pc, #276]	; (800f8b8 <_tx_mutex_priority_change+0x174>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	3302      	adds	r3, #2
 800f7a8:	4a43      	ldr	r2, [pc, #268]	; (800f8b8 <_tx_mutex_priority_change+0x174>)
 800f7aa:	6013      	str	r3, [r2, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	220e      	movs	r2, #14
 800f7b0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	2201      	movs	r2, #1
 800f7b6:	639a      	str	r2, [r3, #56]	; 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	64da      	str	r2, [r3, #76]	; 0x4c
 800f7be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7c0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f7c2:	69bb      	ldr	r3, [r7, #24]
 800f7c4:	f383 8810 	msr	PRIMASK, r3
}
 800f7c8:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 800f7ca:	6878      	ldr	r0, [r7, #4]
 800f7cc:	f001 f8b0 	bl	8010930 <_tx_thread_system_suspend>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f7d0:	f3ef 8310 	mrs	r3, PRIMASK
 800f7d4:	623b      	str	r3, [r7, #32]
    return(posture);
 800f7d6:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800f7d8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f7da:	b672      	cpsid	i
    return(int_posture);
 800f7dc:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 800f7de:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	683a      	ldr	r2, [r7, #0]
 800f7e4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f7ec:	683a      	ldr	r2, [r7, #0]
 800f7ee:	429a      	cmp	r2, r3
 800f7f0:	d905      	bls.n	800f7fe <_tx_mutex_priority_change+0xba>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	63da      	str	r2, [r3, #60]	; 0x3c
 800f7fc:	e002      	b.n	800f804 <_tx_mutex_priority_change+0xc0>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	683a      	ldr	r2, [r7, #0]
 800f802:	63da      	str	r2, [r3, #60]	; 0x3c
 800f804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f806:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	f383 8810 	msr	PRIMASK, r3
}
 800f80e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f000 ff8d 	bl	8010730 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f816:	f3ef 8310 	mrs	r3, PRIMASK
 800f81a:	617b      	str	r3, [r7, #20]
    return(posture);
 800f81c:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800f81e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800f820:	b672      	cpsid	i
    return(int_posture);
 800f822:	693b      	ldr	r3, [r7, #16]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 800f824:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 800f826:	4b23      	ldr	r3, [pc, #140]	; (800f8b4 <_tx_mutex_priority_change+0x170>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	633b      	str	r3, [r7, #48]	; 0x30

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 800f82c:	687a      	ldr	r2, [r7, #4]
 800f82e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f830:	429a      	cmp	r2, r3
 800f832:	d034      	beq.n	800f89e <_tx_mutex_priority_change+0x15a>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d130      	bne.n	800f89e <_tx_mutex_priority_change+0x15a>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f844:	429a      	cmp	r2, r3
 800f846:	d811      	bhi.n	800f86c <_tx_mutex_priority_change+0x128>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 800f848:	687a      	ldr	r2, [r7, #4]
 800f84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d126      	bne.n	800f89e <_tx_mutex_priority_change+0x15a>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 800f850:	4a18      	ldr	r2, [pc, #96]	; (800f8b4 <_tx_mutex_priority_change+0x170>)
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	6013      	str	r3, [r2, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 800f856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f858:	683b      	ldr	r3, [r7, #0]
 800f85a:	429a      	cmp	r2, r3
 800f85c:	d21f      	bcs.n	800f89e <_tx_mutex_priority_change+0x15a>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f862:	4916      	ldr	r1, [pc, #88]	; (800f8bc <_tx_mutex_priority_change+0x178>)
 800f864:	687a      	ldr	r2, [r7, #4]
 800f866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f86a:	e018      	b.n	800f89e <_tx_mutex_priority_change+0x15a>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f874:	429a      	cmp	r2, r3
 800f876:	d212      	bcs.n	800f89e <_tx_mutex_priority_change+0x15a>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f87e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f880:	429a      	cmp	r2, r3
 800f882:	d80c      	bhi.n	800f89e <_tx_mutex_priority_change+0x15a>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800f884:	4a0b      	ldr	r2, [pc, #44]	; (800f8b4 <_tx_mutex_priority_change+0x170>)
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	6013      	str	r3, [r2, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 800f88a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	429a      	cmp	r2, r3
 800f890:	d205      	bcs.n	800f89e <_tx_mutex_priority_change+0x15a>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f896:	4909      	ldr	r1, [pc, #36]	; (800f8bc <_tx_mutex_priority_change+0x178>)
 800f898:	687a      	ldr	r2, [r7, #4]
 800f89a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f89e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8a0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f8a2:	68bb      	ldr	r3, [r7, #8]
 800f8a4:	f383 8810 	msr	PRIMASK, r3
}
 800f8a8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800f8aa:	bf00      	nop
 800f8ac:	3740      	adds	r7, #64	; 0x40
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd80      	pop	{r7, pc}
 800f8b2:	bf00      	nop
 800f8b4:	24014d40 	.word	0x24014d40
 800f8b8:	24014dd4 	.word	0x24014dd4
 800f8bc:	24014d54 	.word	0x24014d54

0800f8c0 <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b0a6      	sub	sp, #152	; 0x98
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 800f8c8:	2320      	movs	r3, #32
 800f8ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800f8ce:	f3ef 8310 	mrs	r3, PRIMASK
 800f8d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    return(posture);
 800f8d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    int_posture = __get_interrupt_posture();
 800f8d6:	65bb      	str	r3, [r7, #88]	; 0x58
    __asm__ volatile ("CPSID i" : : : "memory");
 800f8d8:	b672      	cpsid	i
    return(int_posture);
 800f8da:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 800f8dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	689b      	ldr	r3, [r3, #8]
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	f000 81ff 	beq.w	800fce8 <_tx_mutex_put+0x428>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	68db      	ldr	r3, [r3, #12]
 800f8ee:	67fb      	str	r3, [r7, #124]	; 0x7c

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800f8f0:	4ba3      	ldr	r3, [pc, #652]	; (800fb80 <_tx_mutex_put+0x2c0>)
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	67bb      	str	r3, [r7, #120]	; 0x78

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	68db      	ldr	r3, [r3, #12]
 800f8fa:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	d00d      	beq.n	800f91c <_tx_mutex_put+0x5c>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 800f900:	4ba0      	ldr	r3, [pc, #640]	; (800fb84 <_tx_mutex_put+0x2c4>)
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d109      	bne.n	800f91c <_tx_mutex_put+0x5c>
 800f908:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f90c:	657b      	str	r3, [r7, #84]	; 0x54
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f90e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f910:	f383 8810 	msr	PRIMASK, r3
}
 800f914:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 800f916:	231e      	movs	r3, #30
 800f918:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 800f91c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f920:	2b20      	cmp	r3, #32
 800f922:	f040 81eb 	bne.w	800fcfc <_tx_mutex_put+0x43c>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	689b      	ldr	r3, [r3, #8]
 800f92a:	1e5a      	subs	r2, r3, #1
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	689b      	ldr	r3, [r3, #8]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d00a      	beq.n	800f94e <_tx_mutex_put+0x8e>
 800f938:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f93c:	653b      	str	r3, [r7, #80]	; 0x50
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f93e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f940:	f383 8810 	msr	PRIMASK, r3
}
 800f944:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 800f946:	2300      	movs	r3, #0
 800f948:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f94c:	e1d6      	b.n	800fcfc <_tx_mutex_put+0x43c>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 800f94e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f950:	2b00      	cmp	r3, #0
 800f952:	d10a      	bne.n	800f96a <_tx_mutex_put+0xaa>
 800f954:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f958:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f95a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f95c:	f383 8810 	msr	PRIMASK, r3
}
 800f960:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 800f962:	2300      	movs	r3, #0
 800f964:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f968:	e1c8      	b.n	800fcfc <_tx_mutex_put+0x43c>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 800f96a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f96c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f970:	1e5a      	subs	r2, r3, #1
 800f972:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f974:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 800f978:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f97a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d104      	bne.n	800f98c <_tx_mutex_put+0xcc>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 800f982:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f984:	2200      	movs	r2, #0
 800f986:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 800f98a:	e019      	b.n	800f9c0 <_tx_mutex_put+0x100>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f990:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f998:	677b      	str	r3, [r7, #116]	; 0x74
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 800f99a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f99e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800f9a0:	631a      	str	r2, [r3, #48]	; 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 800f9a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f9a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f9a8:	62da      	str	r2, [r3, #44]	; 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 800f9aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f9ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800f9b0:	687a      	ldr	r2, [r7, #4]
 800f9b2:	429a      	cmp	r2, r3
 800f9b4:	d104      	bne.n	800f9c0 <_tx_mutex_put+0x100>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 800f9b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f9b8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800f9bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	699b      	ldr	r3, [r3, #24]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d110      	bne.n	800f9ea <_tx_mutex_put+0x12a>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	691b      	ldr	r3, [r3, #16]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d10c      	bne.n	800f9ea <_tx_mutex_put+0x12a>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	60da      	str	r2, [r3, #12]
 800f9d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f9da:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800f9dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f9de:	f383 8810 	msr	PRIMASK, r3
}
 800f9e2:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 800f9ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f9ee:	2b20      	cmp	r3, #32
 800f9f0:	f040 8184 	bne.w	800fcfc <_tx_mutex_put+0x43c>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 800f9fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f9fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fa00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	691b      	ldr	r3, [r3, #16]
 800fa08:	2b01      	cmp	r3, #1
 800fa0a:	d155      	bne.n	800fab8 <_tx_mutex_put+0x1f8>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800fa0c:	4b5d      	ldr	r3, [pc, #372]	; (800fb84 <_tx_mutex_put+0x2c4>)
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	3301      	adds	r3, #1
 800fa12:	4a5c      	ldr	r2, [pc, #368]	; (800fb84 <_tx_mutex_put+0x2c4>)
 800fa14:	6013      	str	r3, [r2, #0]
 800fa16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fa1a:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fa1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa1e:	f383 8810 	msr	PRIMASK, r3
}
 800fa22:	bf00      	nop
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 800fa24:	2320      	movs	r3, #32
 800fa26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 800fa2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fa2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fa30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 800fa34:	e01f      	b.n	800fa76 <_tx_mutex_put+0x1b6>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 800fa36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fa3a:	691b      	ldr	r3, [r3, #16]
 800fa3c:	2b01      	cmp	r3, #1
 800fa3e:	d10b      	bne.n	800fa58 <_tx_mutex_put+0x198>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 800fa40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fa44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fa4a:	429a      	cmp	r2, r3
 800fa4c:	d904      	bls.n	800fa58 <_tx_mutex_put+0x198>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 800fa4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fa52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 800fa58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fa5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 800fa62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fa64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fa68:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	d102      	bne.n	800fa76 <_tx_mutex_put+0x1b6>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 800fa70:	2300      	movs	r3, #0
 800fa72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                            while (next_mutex != TX_NULL)
 800fa76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d1db      	bne.n	800fa36 <_tx_mutex_put+0x176>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fa7e:	f3ef 8310 	mrs	r3, PRIMASK
 800fa82:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800fa84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800fa86:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800fa88:	b672      	cpsid	i
    return(int_posture);
 800fa8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 800fa8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 800fa90:	4b3c      	ldr	r3, [pc, #240]	; (800fb84 <_tx_mutex_put+0x2c4>)
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	3b01      	subs	r3, #1
 800fa96:	4a3b      	ldr	r2, [pc, #236]	; (800fb84 <_tx_mutex_put+0x2c4>)
 800fa98:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 800fa9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fa9c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800faa0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 800faa4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800faa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800faac:	429a      	cmp	r2, r3
 800faae:	d203      	bcs.n	800fab8 <_tx_mutex_put+0x1f8>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 800fab0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fab4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	69db      	ldr	r3, [r3, #28]
 800fabc:	2b01      	cmp	r3, #1
 800fabe:	d920      	bls.n	800fb02 <_tx_mutex_put+0x242>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	691b      	ldr	r3, [r3, #16]
 800fac4:	2b01      	cmp	r3, #1
 800fac6:	d11c      	bne.n	800fb02 <_tx_mutex_put+0x242>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 800fac8:	4b2e      	ldr	r3, [pc, #184]	; (800fb84 <_tx_mutex_put+0x2c4>)
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	3301      	adds	r3, #1
 800face:	4a2d      	ldr	r2, [pc, #180]	; (800fb84 <_tx_mutex_put+0x2c4>)
 800fad0:	6013      	str	r3, [r2, #0]
 800fad2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fad6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fada:	f383 8810 	msr	PRIMASK, r3
}
 800fade:	bf00      	nop
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f7ff fd7d 	bl	800f5e0 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fae6:	f3ef 8310 	mrs	r3, PRIMASK
 800faea:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800faec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800faee:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800faf0:	b672      	cpsid	i
    return(int_posture);
 800faf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 800faf4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 800faf8:	4b22      	ldr	r3, [pc, #136]	; (800fb84 <_tx_mutex_put+0x2c4>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	3b01      	subs	r3, #1
 800fafe:	4a21      	ldr	r2, [pc, #132]	; (800fb84 <_tx_mutex_put+0x2c4>)
 800fb00:	6013      	str	r3, [r2, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	699b      	ldr	r3, [r3, #24]
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d13e      	bne.n	800fb88 <_tx_mutex_put+0x2c8>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800fb0a:	4b1e      	ldr	r3, [pc, #120]	; (800fb84 <_tx_mutex_put+0x2c4>)
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	3301      	adds	r3, #1
 800fb10:	4a1c      	ldr	r2, [pc, #112]	; (800fb84 <_tx_mutex_put+0x2c4>)
 800fb12:	6013      	str	r3, [r2, #0]
 800fb14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fb18:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fb1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb1c:	f383 8810 	msr	PRIMASK, r3
}
 800fb20:	bf00      	nop
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	2220      	movs	r2, #32
 800fb26:	629a      	str	r2, [r3, #40]	; 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	68db      	ldr	r3, [r3, #12]
 800fb2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb2e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800fb32:	429a      	cmp	r2, r3
 800fb34:	d006      	beq.n	800fb44 <_tx_mutex_put+0x284>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	68db      	ldr	r3, [r3, #12]
 800fb3a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800fb3e:	4618      	mov	r0, r3
 800fb40:	f7ff fe00 	bl	800f744 <_tx_mutex_priority_change>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fb44:	f3ef 8310 	mrs	r3, PRIMASK
 800fb48:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800fb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800fb4c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fb4e:	b672      	cpsid	i
    return(int_posture);
 800fb50:	6a3b      	ldr	r3, [r7, #32]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 800fb52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 800fb56:	4b0b      	ldr	r3, [pc, #44]	; (800fb84 <_tx_mutex_put+0x2c4>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	3b01      	subs	r3, #1
 800fb5c:	4a09      	ldr	r2, [pc, #36]	; (800fb84 <_tx_mutex_put+0x2c4>)
 800fb5e:	6013      	str	r3, [r2, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2200      	movs	r2, #0
 800fb64:	60da      	str	r2, [r3, #12]
 800fb66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fb6a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fb6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb6e:	f383 8810 	msr	PRIMASK, r3
}
 800fb72:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 800fb74:	f000 fda2 	bl	80106bc <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 800fb78:	2300      	movs	r3, #0
 800fb7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fb7e:	e0bd      	b.n	800fcfc <_tx_mutex_put+0x43c>
 800fb80:	24014d3c 	.word	0x24014d3c
 800fb84:	24014dd4 	.word	0x24014dd4
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	699b      	ldr	r3, [r3, #24]
 800fb8c:	67fb      	str	r3, [r7, #124]	; 0x7c

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	691b      	ldr	r3, [r3, #16]
 800fb92:	2b01      	cmp	r3, #1
 800fb94:	d10a      	bne.n	800fbac <_tx_mutex_put+0x2ec>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	68db      	ldr	r3, [r3, #12]
 800fb9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 800fb9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	2220      	movs	r2, #32
 800fbaa:	629a      	str	r2, [r3, #40]	; 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 800fbac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fbae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800fbb2:	673b      	str	r3, [r7, #112]	; 0x70

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 800fbb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d10a      	bne.n	800fbd0 <_tx_mutex_put+0x310>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 800fbba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fbbc:	687a      	ldr	r2, [r7, #4]
 800fbbe:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	687a      	ldr	r2, [r7, #4]
 800fbc6:	62da      	str	r2, [r3, #44]	; 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	687a      	ldr	r2, [r7, #4]
 800fbcc:	631a      	str	r2, [r3, #48]	; 0x30
 800fbce:	e016      	b.n	800fbfe <_tx_mutex_put+0x33e>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 800fbd0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fbd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800fbd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 800fbda:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fbde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbe0:	677b      	str	r3, [r7, #116]	; 0x74

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 800fbe2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fbe6:	687a      	ldr	r2, [r7, #4]
 800fbe8:	631a      	str	r2, [r3, #48]	; 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 800fbea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fbec:	687a      	ldr	r2, [r7, #4]
 800fbee:	62da      	str	r2, [r3, #44]	; 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800fbf4:	631a      	str	r2, [r3, #48]	; 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800fbfc:	62da      	str	r2, [r3, #44]	; 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 800fbfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fc00:	1c5a      	adds	r2, r3, #1
 800fc02:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fc04:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	2201      	movs	r2, #1
 800fc0c:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800fc12:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	69db      	ldr	r3, [r3, #28]
 800fc18:	1e5a      	subs	r2, r3, #1
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	69db      	ldr	r3, [r3, #28]
 800fc22:	66fb      	str	r3, [r7, #108]	; 0x6c

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800fc24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d103      	bne.n	800fc32 <_tx_mutex_put+0x372>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	619a      	str	r2, [r3, #24]
 800fc30:	e00e      	b.n	800fc50 <_tx_mutex_put+0x390>
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800fc32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fc34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fc36:	66bb      	str	r3, [r7, #104]	; 0x68
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fc3c:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800fc3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fc40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc42:	667b      	str	r3, [r7, #100]	; 0x64
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800fc44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc46:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fc48:	675a      	str	r2, [r3, #116]	; 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800fc4a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fc4c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fc4e:	671a      	str	r2, [r3, #112]	; 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800fc50:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fc52:	2200      	movs	r2, #0
 800fc54:	669a      	str	r2, [r3, #104]	; 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800fc56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fc58:	2200      	movs	r2, #0
 800fc5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800fc5e:	4b2a      	ldr	r3, [pc, #168]	; (800fd08 <_tx_mutex_put+0x448>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	3301      	adds	r3, #1
 800fc64:	4a28      	ldr	r2, [pc, #160]	; (800fd08 <_tx_mutex_put+0x448>)
 800fc66:	6013      	str	r3, [r2, #0]
 800fc68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fc6c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fc6e:	69fb      	ldr	r3, [r7, #28]
 800fc70:	f383 8810 	msr	PRIMASK, r3
}
 800fc74:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	691b      	ldr	r3, [r3, #16]
 800fc7a:	2b01      	cmp	r3, #1
 800fc7c:	d12d      	bne.n	800fcda <_tx_mutex_put+0x41a>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	69db      	ldr	r3, [r3, #28]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d01c      	beq.n	800fcc0 <_tx_mutex_put+0x400>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 800fc86:	6878      	ldr	r0, [r7, #4]
 800fc88:	f7ff fcaa 	bl	800f5e0 <_tx_mutex_prioritize>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fc8c:	f3ef 8310 	mrs	r3, PRIMASK
 800fc90:	61bb      	str	r3, [r7, #24]
    return(posture);
 800fc92:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800fc94:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fc96:	b672      	cpsid	i
    return(int_posture);
 800fc98:	697b      	ldr	r3, [r7, #20]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 800fc9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	699b      	ldr	r3, [r3, #24]
 800fca2:	663b      	str	r3, [r7, #96]	; 0x60
                                    if (suspended_thread != TX_NULL)
 800fca4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d003      	beq.n	800fcb2 <_tx_mutex_put+0x3f2>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 800fcaa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fcac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	629a      	str	r2, [r3, #40]	; 0x28
 800fcb2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fcb6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fcb8:	693b      	ldr	r3, [r7, #16]
 800fcba:	f383 8810 	msr	PRIMASK, r3
}
 800fcbe:	bf00      	nop

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 800fcc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fcc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcc6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800fcca:	429a      	cmp	r2, r3
 800fccc:	d005      	beq.n	800fcda <_tx_mutex_put+0x41a>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 800fcce:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800fcd2:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800fcd6:	f7ff fd35 	bl	800f744 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 800fcda:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800fcdc:	f000 fd28 	bl	8010730 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 800fce0:	2300      	movs	r3, #0
 800fce2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800fce6:	e009      	b.n	800fcfc <_tx_mutex_put+0x43c>
 800fce8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fcec:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	f383 8810 	msr	PRIMASK, r3
}
 800fcf4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 800fcf6:	231e      	movs	r3, #30
 800fcf8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    }

    /* Return the completion status.  */
    return(status);
 800fcfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 800fd00:	4618      	mov	r0, r3
 800fd02:	3798      	adds	r7, #152	; 0x98
 800fd04:	46bd      	mov	sp, r7
 800fd06:	bd80      	pop	{r7, pc}
 800fd08:	24014dd4 	.word	0x24014dd4

0800fd0c <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b08e      	sub	sp, #56	; 0x38
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
 800fd14:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fd16:	f3ef 8310 	mrs	r3, PRIMASK
 800fd1a:	623b      	str	r3, [r7, #32]
    return(posture);
 800fd1c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800fd1e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fd20:	b672      	cpsid	i
    return(int_posture);
 800fd22:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 800fd24:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fd2a:	4a33      	ldr	r2, [pc, #204]	; (800fdf8 <_tx_semaphore_cleanup+0xec>)
 800fd2c:	4293      	cmp	r3, r2
 800fd2e:	d158      	bne.n	800fde2 <_tx_semaphore_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800fd36:	683a      	ldr	r2, [r7, #0]
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	d152      	bne.n	800fde2 <_tx_semaphore_cleanup+0xd6>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd40:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 800fd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d04c      	beq.n	800fde2 <_tx_semaphore_cleanup+0xd6>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 800fd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	4a2b      	ldr	r2, [pc, #172]	; (800fdfc <_tx_semaphore_cleanup+0xf0>)
 800fd4e:	4293      	cmp	r3, r2
 800fd50:	d147      	bne.n	800fde2 <_tx_semaphore_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 800fd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd54:	691b      	ldr	r3, [r3, #16]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d043      	beq.n	800fde2 <_tx_semaphore_cleanup+0xd6>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 800fd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd62:	691b      	ldr	r3, [r3, #16]
 800fd64:	1e5a      	subs	r2, r3, #1
 800fd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd68:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 800fd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd6c:	691b      	ldr	r3, [r3, #16]
 800fd6e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800fd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d103      	bne.n	800fd7e <_tx_semaphore_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800fd76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd78:	2200      	movs	r2, #0
 800fd7a:	60da      	str	r2, [r3, #12]
 800fd7c:	e013      	b.n	800fda6 <_tx_semaphore_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd82:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd88:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800fd8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd8e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800fd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd94:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 800fd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd98:	68db      	ldr	r3, [r3, #12]
 800fd9a:	687a      	ldr	r2, [r7, #4]
 800fd9c:	429a      	cmp	r2, r3
 800fd9e:	d102      	bne.n	800fda6 <_tx_semaphore_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 800fda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fda4:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdaa:	2b06      	cmp	r3, #6
 800fdac:	d119      	bne.n	800fde2 <_tx_semaphore_cleanup+0xd6>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	220d      	movs	r2, #13
 800fdb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800fdb6:	4b12      	ldr	r3, [pc, #72]	; (800fe00 <_tx_semaphore_cleanup+0xf4>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	3301      	adds	r3, #1
 800fdbc:	4a10      	ldr	r2, [pc, #64]	; (800fe00 <_tx_semaphore_cleanup+0xf4>)
 800fdbe:	6013      	str	r3, [r2, #0]
 800fdc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdc2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fdc4:	693b      	ldr	r3, [r7, #16]
 800fdc6:	f383 8810 	msr	PRIMASK, r3
}
 800fdca:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f000 fcaf 	bl	8010730 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fdd2:	f3ef 8310 	mrs	r3, PRIMASK
 800fdd6:	61bb      	str	r3, [r7, #24]
    return(posture);
 800fdd8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800fdda:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fddc:	b672      	cpsid	i
    return(int_posture);
 800fdde:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800fde0:	637b      	str	r3, [r7, #52]	; 0x34
 800fde2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fde4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	f383 8810 	msr	PRIMASK, r3
}
 800fdec:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800fdee:	bf00      	nop
 800fdf0:	3738      	adds	r7, #56	; 0x38
 800fdf2:	46bd      	mov	sp, r7
 800fdf4:	bd80      	pop	{r7, pc}
 800fdf6:	bf00      	nop
 800fdf8:	0800fd0d 	.word	0x0800fd0d
 800fdfc:	53454d41 	.word	0x53454d41
 800fe00:	24014dd4 	.word	0x24014dd4

0800fe04 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b08a      	sub	sp, #40	; 0x28
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	60f8      	str	r0, [r7, #12]
 800fe0c:	60b9      	str	r1, [r7, #8]
 800fe0e:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 800fe10:	221c      	movs	r2, #28
 800fe12:	2100      	movs	r1, #0
 800fe14:	68f8      	ldr	r0, [r7, #12]
 800fe16:	f001 fd8b 	bl	8011930 <memset>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	68ba      	ldr	r2, [r7, #8]
 800fe1e:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	687a      	ldr	r2, [r7, #4]
 800fe24:	609a      	str	r2, [r3, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800fe26:	f3ef 8310 	mrs	r3, PRIMASK
 800fe2a:	61bb      	str	r3, [r7, #24]
    return(posture);
 800fe2c:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800fe2e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800fe30:	b672      	cpsid	i
    return(int_posture);
 800fe32:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 800fe34:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	4a18      	ldr	r2, [pc, #96]	; (800fe9c <_tx_semaphore_create+0x98>)
 800fe3a:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800fe3c:	4b18      	ldr	r3, [pc, #96]	; (800fea0 <_tx_semaphore_create+0x9c>)
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d109      	bne.n	800fe58 <_tx_semaphore_create+0x54>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 800fe44:	4a17      	ldr	r2, [pc, #92]	; (800fea4 <_tx_semaphore_create+0xa0>)
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	6013      	str	r3, [r2, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	68fa      	ldr	r2, [r7, #12]
 800fe4e:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	68fa      	ldr	r2, [r7, #12]
 800fe54:	619a      	str	r2, [r3, #24]
 800fe56:	e011      	b.n	800fe7c <_tx_semaphore_create+0x78>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 800fe58:	4b12      	ldr	r3, [pc, #72]	; (800fea4 <_tx_semaphore_create+0xa0>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 800fe5e:	6a3b      	ldr	r3, [r7, #32]
 800fe60:	699b      	ldr	r3, [r3, #24]
 800fe62:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 800fe64:	6a3b      	ldr	r3, [r7, #32]
 800fe66:	68fa      	ldr	r2, [r7, #12]
 800fe68:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 800fe6a:	69fb      	ldr	r3, [r7, #28]
 800fe6c:	68fa      	ldr	r2, [r7, #12]
 800fe6e:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	69fa      	ldr	r2, [r7, #28]
 800fe74:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	6a3a      	ldr	r2, [r7, #32]
 800fe7a:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 800fe7c:	4b08      	ldr	r3, [pc, #32]	; (800fea0 <_tx_semaphore_create+0x9c>)
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	3301      	adds	r3, #1
 800fe82:	4a07      	ldr	r2, [pc, #28]	; (800fea0 <_tx_semaphore_create+0x9c>)
 800fe84:	6013      	str	r3, [r2, #0]
 800fe86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe88:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fe8a:	693b      	ldr	r3, [r7, #16]
 800fe8c:	f383 8810 	msr	PRIMASK, r3
}
 800fe90:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800fe92:	2300      	movs	r3, #0
}
 800fe94:	4618      	mov	r0, r3
 800fe96:	3728      	adds	r7, #40	; 0x28
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}
 800fe9c:	53454d41 	.word	0x53454d41
 800fea0:	24014d08 	.word	0x24014d08
 800fea4:	24014d04 	.word	0x24014d04

0800fea8 <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 800fea8:	b580      	push	{r7, lr}
 800feaa:	b092      	sub	sp, #72	; 0x48
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800feb0:	f3ef 8310 	mrs	r3, PRIMASK
 800feb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800feb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800feb8:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800feba:	b672      	cpsid	i
    return(int_posture);
 800febc:	6abb      	ldr	r3, [r7, #40]	; 0x28
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 800febe:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	2200      	movs	r2, #0
 800fec4:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 800fec6:	4b3d      	ldr	r3, [pc, #244]	; (800ffbc <_tx_semaphore_delete+0x114>)
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	3b01      	subs	r3, #1
 800fecc:	4a3b      	ldr	r2, [pc, #236]	; (800ffbc <_tx_semaphore_delete+0x114>)
 800fece:	6013      	str	r3, [r2, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 800fed0:	4b3a      	ldr	r3, [pc, #232]	; (800ffbc <_tx_semaphore_delete+0x114>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d103      	bne.n	800fee0 <_tx_semaphore_delete+0x38>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 800fed8:	4b39      	ldr	r3, [pc, #228]	; (800ffc0 <_tx_semaphore_delete+0x118>)
 800feda:	2200      	movs	r2, #0
 800fedc:	601a      	str	r2, [r3, #0]
 800fede:	e013      	b.n	800ff08 <_tx_semaphore_delete+0x60>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	695b      	ldr	r3, [r3, #20]
 800fee4:	63bb      	str	r3, [r7, #56]	; 0x38
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	699b      	ldr	r3, [r3, #24]
 800feea:	637b      	str	r3, [r7, #52]	; 0x34
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 800feec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fef0:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 800fef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fef4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fef6:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 800fef8:	4b31      	ldr	r3, [pc, #196]	; (800ffc0 <_tx_semaphore_delete+0x118>)
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	687a      	ldr	r2, [r7, #4]
 800fefe:	429a      	cmp	r2, r3
 800ff00:	d102      	bne.n	800ff08 <_tx_semaphore_delete+0x60>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 800ff02:	4a2f      	ldr	r2, [pc, #188]	; (800ffc0 <_tx_semaphore_delete+0x118>)
 800ff04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff06:	6013      	str	r3, [r2, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800ff08:	4b2e      	ldr	r3, [pc, #184]	; (800ffc4 <_tx_semaphore_delete+0x11c>)
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	3301      	adds	r3, #1
 800ff0e:	4a2d      	ldr	r2, [pc, #180]	; (800ffc4 <_tx_semaphore_delete+0x11c>)
 800ff10:	6013      	str	r3, [r2, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	68db      	ldr	r3, [r3, #12]
 800ff16:	647b      	str	r3, [r7, #68]	; 0x44
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	691b      	ldr	r3, [r3, #16]
 800ff22:	643b      	str	r3, [r7, #64]	; 0x40
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2200      	movs	r2, #0
 800ff28:	611a      	str	r2, [r3, #16]
 800ff2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff2c:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ff2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff30:	f383 8810 	msr	PRIMASK, r3
}
 800ff34:	bf00      	nop
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 800ff36:	e024      	b.n	800ff82 <_tx_semaphore_delete+0xda>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 800ff38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff3a:	3b01      	subs	r3, #1
 800ff3c:	643b      	str	r3, [r7, #64]	; 0x40
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ff3e:	f3ef 8310 	mrs	r3, PRIMASK
 800ff42:	61fb      	str	r3, [r7, #28]
    return(posture);
 800ff44:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800ff46:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ff48:	b672      	cpsid	i
    return(int_posture);
 800ff4a:	69bb      	ldr	r3, [r7, #24]

        /* Lockout interrupts.  */
        TX_DISABLE
 800ff4c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800ff4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff50:	2200      	movs	r2, #0
 800ff52:	669a      	str	r2, [r3, #104]	; 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 800ff54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff56:	2201      	movs	r2, #1
 800ff58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 800ff5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff60:	633b      	str	r3, [r7, #48]	; 0x30
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800ff62:	4b18      	ldr	r3, [pc, #96]	; (800ffc4 <_tx_semaphore_delete+0x11c>)
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	3301      	adds	r3, #1
 800ff68:	4a16      	ldr	r2, [pc, #88]	; (800ffc4 <_tx_semaphore_delete+0x11c>)
 800ff6a:	6013      	str	r3, [r2, #0]
 800ff6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff6e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ff70:	6a3b      	ldr	r3, [r7, #32]
 800ff72:	f383 8810 	msr	PRIMASK, r3
}
 800ff76:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800ff78:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ff7a:	f000 fbd9 	bl	8010730 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 800ff7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff80:	647b      	str	r3, [r7, #68]	; 0x44
    while (suspended_count != TX_NO_SUSPENSIONS)
 800ff82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d1d7      	bne.n	800ff38 <_tx_semaphore_delete+0x90>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ff88:	f3ef 8310 	mrs	r3, PRIMASK
 800ff8c:	613b      	str	r3, [r7, #16]
    return(posture);
 800ff8e:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800ff90:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ff92:	b672      	cpsid	i
    return(int_posture);
 800ff94:	68fb      	ldr	r3, [r7, #12]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 800ff96:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800ff98:	4b0a      	ldr	r3, [pc, #40]	; (800ffc4 <_tx_semaphore_delete+0x11c>)
 800ff9a:	681b      	ldr	r3, [r3, #0]
 800ff9c:	3b01      	subs	r3, #1
 800ff9e:	4a09      	ldr	r2, [pc, #36]	; (800ffc4 <_tx_semaphore_delete+0x11c>)
 800ffa0:	6013      	str	r3, [r2, #0]
 800ffa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ffa4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ffa6:	697b      	ldr	r3, [r7, #20]
 800ffa8:	f383 8810 	msr	PRIMASK, r3
}
 800ffac:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800ffae:	f000 fb85 	bl	80106bc <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800ffb2:	2300      	movs	r3, #0
}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	3748      	adds	r7, #72	; 0x48
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}
 800ffbc:	24014d08 	.word	0x24014d08
 800ffc0:	24014d04 	.word	0x24014d04
 800ffc4:	24014dd4 	.word	0x24014dd4

0800ffc8 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 800ffc8:	b580      	push	{r7, lr}
 800ffca:	b08e      	sub	sp, #56	; 0x38
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
 800ffd0:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ffd6:	f3ef 8310 	mrs	r3, PRIMASK
 800ffda:	623b      	str	r3, [r7, #32]
    return(posture);
 800ffdc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800ffde:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ffe0:	b672      	cpsid	i
    return(int_posture);
 800ffe2:	69fb      	ldr	r3, [r7, #28]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 800ffe4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	689b      	ldr	r3, [r3, #8]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d00a      	beq.n	8010004 <_tx_semaphore_get+0x3c>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	689b      	ldr	r3, [r3, #8]
 800fff2:	1e5a      	subs	r2, r3, #1
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	609a      	str	r2, [r3, #8]
 800fff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fffa:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800fffc:	69bb      	ldr	r3, [r7, #24]
 800fffe:	f383 8810 	msr	PRIMASK, r3
}
 8010002:	e068      	b.n	80100d6 <_tx_semaphore_get+0x10e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d05d      	beq.n	80100c6 <_tx_semaphore_get+0xfe>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 801000a:	4b35      	ldr	r3, [pc, #212]	; (80100e0 <_tx_semaphore_get+0x118>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d008      	beq.n	8010024 <_tx_semaphore_get+0x5c>
 8010012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010014:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010016:	697b      	ldr	r3, [r7, #20]
 8010018:	f383 8810 	msr	PRIMASK, r3
}
 801001c:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 801001e:	230d      	movs	r3, #13
 8010020:	637b      	str	r3, [r7, #52]	; 0x34
 8010022:	e058      	b.n	80100d6 <_tx_semaphore_get+0x10e>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8010024:	4b2f      	ldr	r3, [pc, #188]	; (80100e4 <_tx_semaphore_get+0x11c>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	62fb      	str	r3, [r7, #44]	; 0x2c

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 801002a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801002c:	4a2e      	ldr	r2, [pc, #184]	; (80100e8 <_tx_semaphore_get+0x120>)
 801002e:	669a      	str	r2, [r3, #104]	; 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8010030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010032:	687a      	ldr	r2, [r7, #4]
 8010034:	66da      	str	r2, [r3, #108]	; 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8010036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010038:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801003c:	1c5a      	adds	r2, r3, #1
 801003e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010040:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	691b      	ldr	r3, [r3, #16]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d109      	bne.n	8010060 <_tx_semaphore_get+0x98>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010050:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 8010052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010056:	671a      	str	r2, [r3, #112]	; 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8010058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801005a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801005c:	675a      	str	r2, [r3, #116]	; 0x74
 801005e:	e011      	b.n	8010084 <_tx_semaphore_get+0xbc>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	68db      	ldr	r3, [r3, #12]
 8010064:	62bb      	str	r3, [r7, #40]	; 0x28
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8010066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010068:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801006a:	671a      	str	r2, [r3, #112]	; 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 801006c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801006e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010070:	627b      	str	r3, [r7, #36]	; 0x24
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8010072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010076:	675a      	str	r2, [r3, #116]	; 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8010078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801007a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801007c:	671a      	str	r2, [r3, #112]	; 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801007e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010082:	675a      	str	r2, [r3, #116]	; 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	691b      	ldr	r3, [r3, #16]
 8010088:	1c5a      	adds	r2, r3, #1
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 801008e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010090:	2206      	movs	r2, #6
 8010092:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010096:	2201      	movs	r2, #1
 8010098:	639a      	str	r2, [r3, #56]	; 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 801009a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801009c:	683a      	ldr	r2, [r7, #0]
 801009e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80100a0:	4b0f      	ldr	r3, [pc, #60]	; (80100e0 <_tx_semaphore_get+0x118>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	3301      	adds	r3, #1
 80100a6:	4a0e      	ldr	r2, [pc, #56]	; (80100e0 <_tx_semaphore_get+0x118>)
 80100a8:	6013      	str	r3, [r2, #0]
 80100aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ac:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80100ae:	693b      	ldr	r3, [r7, #16]
 80100b0:	f383 8810 	msr	PRIMASK, r3
}
 80100b4:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80100b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80100b8:	f000 fc3a 	bl	8010930 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80100bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80100c2:	637b      	str	r3, [r7, #52]	; 0x34
 80100c4:	e007      	b.n	80100d6 <_tx_semaphore_get+0x10e>
 80100c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100c8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	f383 8810 	msr	PRIMASK, r3
}
 80100d0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 80100d2:	230d      	movs	r3, #13
 80100d4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    /* Return completion status.  */
    return(status);
 80100d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80100d8:	4618      	mov	r0, r3
 80100da:	3738      	adds	r7, #56	; 0x38
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}
 80100e0:	24014dd4 	.word	0x24014dd4
 80100e4:	24014d3c 	.word	0x24014d3c
 80100e8:	0800fd0d 	.word	0x0800fd0d

080100ec <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b08c      	sub	sp, #48	; 0x30
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80100f4:	f3ef 8310 	mrs	r3, PRIMASK
 80100f8:	61bb      	str	r3, [r7, #24]
    return(posture);
 80100fa:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 80100fc:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 80100fe:	b672      	cpsid	i
    return(int_posture);
 8010100:	697b      	ldr	r3, [r7, #20]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 8010102:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	691b      	ldr	r3, [r3, #16]
 8010108:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 801010a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801010c:	2b00      	cmp	r3, #0
 801010e:	d10a      	bne.n	8010126 <_tx_semaphore_put+0x3a>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	689b      	ldr	r3, [r3, #8]
 8010114:	1c5a      	adds	r2, r3, #1
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	609a      	str	r2, [r3, #8]
 801011a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801011c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801011e:	693b      	ldr	r3, [r7, #16]
 8010120:	f383 8810 	msr	PRIMASK, r3
}
 8010124:	e033      	b.n	801018e <_tx_semaphore_put+0xa2>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	68db      	ldr	r3, [r3, #12]
 801012a:	627b      	str	r3, [r7, #36]	; 0x24

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 801012c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801012e:	3b01      	subs	r3, #1
 8010130:	62bb      	str	r3, [r7, #40]	; 0x28
        if (suspended_count == TX_NO_SUSPENSIONS)
 8010132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010134:	2b00      	cmp	r3, #0
 8010136:	d103      	bne.n	8010140 <_tx_semaphore_put+0x54>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	2200      	movs	r2, #0
 801013c:	60da      	str	r2, [r3, #12]
 801013e:	e00e      	b.n	801015e <_tx_semaphore_put+0x72>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8010140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010144:	623b      	str	r3, [r7, #32]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	6a3a      	ldr	r2, [r7, #32]
 801014a:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 801014c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801014e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010150:	61fb      	str	r3, [r7, #28]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8010152:	6a3b      	ldr	r3, [r7, #32]
 8010154:	69fa      	ldr	r2, [r7, #28]
 8010156:	675a      	str	r2, [r3, #116]	; 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8010158:	69fb      	ldr	r3, [r7, #28]
 801015a:	6a3a      	ldr	r2, [r7, #32]
 801015c:	671a      	str	r2, [r3, #112]	; 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010162:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010166:	2200      	movs	r2, #0
 8010168:	669a      	str	r2, [r3, #104]	; 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801016a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801016c:	2200      	movs	r2, #0
 801016e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8010172:	4b09      	ldr	r3, [pc, #36]	; (8010198 <_tx_semaphore_put+0xac>)
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	3301      	adds	r3, #1
 8010178:	4a07      	ldr	r2, [pc, #28]	; (8010198 <_tx_semaphore_put+0xac>)
 801017a:	6013      	str	r3, [r2, #0]
 801017c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801017e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	f383 8810 	msr	PRIMASK, r3
}
 8010186:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8010188:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801018a:	f000 fad1 	bl	8010730 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 801018e:	2300      	movs	r3, #0
}
 8010190:	4618      	mov	r0, r3
 8010192:	3730      	adds	r7, #48	; 0x30
 8010194:	46bd      	mov	sp, r7
 8010196:	bd80      	pop	{r7, pc}
 8010198:	24014dd4 	.word	0x24014dd4

0801019c <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b092      	sub	sp, #72	; 0x48
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	60f8      	str	r0, [r7, #12]
 80101a4:	60b9      	str	r1, [r7, #8]
 80101a6:	607a      	str	r2, [r7, #4]
 80101a8:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 80101aa:	2300      	movs	r3, #0
 80101ac:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 80101ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80101b0:	21ef      	movs	r1, #239	; 0xef
 80101b2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80101b4:	f001 fbbc 	bl	8011930 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 80101b8:	22b0      	movs	r2, #176	; 0xb0
 80101ba:	2100      	movs	r1, #0
 80101bc:	68f8      	ldr	r0, [r7, #12]
 80101be:	f001 fbb7 	bl	8011930 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	68ba      	ldr	r2, [r7, #8]
 80101c6:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	687a      	ldr	r2, [r7, #4]
 80101cc:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	683a      	ldr	r2, [r7, #0]
 80101d2:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80101d8:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80101de:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80101e4:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80101ea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80101f2:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80101f8:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	2220      	movs	r2, #32
 80101fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8010202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010204:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8010206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010208:	3b01      	subs	r3, #1
 801020a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801020c:	4413      	add	r3, r2
 801020e:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010214:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8010216:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801021a:	429a      	cmp	r2, r3
 801021c:	d007      	beq.n	801022e <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	2200      	movs	r2, #0
 8010222:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	2200      	movs	r2, #0
 8010228:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 801022c:	e006      	b.n	801023c <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010232:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010238:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	2203      	movs	r2, #3
 8010240:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	4a48      	ldr	r2, [pc, #288]	; (8010368 <_tx_thread_create+0x1cc>)
 8010246:	655a      	str	r2, [r3, #84]	; 0x54
 8010248:	68fa      	ldr	r2, [r7, #12]
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 801024e:	4947      	ldr	r1, [pc, #284]	; (801036c <_tx_thread_create+0x1d0>)
 8010250:	68f8      	ldr	r0, [r7, #12]
 8010252:	f7f0 f8e5 	bl	8000420 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010256:	f3ef 8310 	mrs	r3, PRIMASK
 801025a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 801025c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 801025e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8010260:	b672      	cpsid	i
    return(int_posture);
 8010262:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8010264:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	4a41      	ldr	r2, [pc, #260]	; (8010370 <_tx_thread_create+0x1d4>)
 801026a:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 801026c:	4b41      	ldr	r3, [pc, #260]	; (8010374 <_tx_thread_create+0x1d8>)
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d10b      	bne.n	801028c <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8010274:	4a40      	ldr	r2, [pc, #256]	; (8010378 <_tx_thread_create+0x1dc>)
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	68fa      	ldr	r2, [r7, #12]
 801027e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	68fa      	ldr	r2, [r7, #12]
 8010286:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 801028a:	e016      	b.n	80102ba <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 801028c:	4b3a      	ldr	r3, [pc, #232]	; (8010378 <_tx_thread_create+0x1dc>)
 801028e:	681b      	ldr	r3, [r3, #0]
 8010290:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8010292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010298:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 801029a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801029c:	68fa      	ldr	r2, [r7, #12]
 801029e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80102a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102a4:	68fa      	ldr	r2, [r7, #12]
 80102a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80102ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 80102ba:	4b2e      	ldr	r3, [pc, #184]	; (8010374 <_tx_thread_create+0x1d8>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	3301      	adds	r3, #1
 80102c0:	4a2c      	ldr	r2, [pc, #176]	; (8010374 <_tx_thread_create+0x1d8>)
 80102c2:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80102c4:	4b2d      	ldr	r3, [pc, #180]	; (801037c <_tx_thread_create+0x1e0>)
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	3301      	adds	r3, #1
 80102ca:	4a2c      	ldr	r2, [pc, #176]	; (801037c <_tx_thread_create+0x1e0>)
 80102cc:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 80102ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80102d0:	2b01      	cmp	r3, #1
 80102d2:	d129      	bne.n	8010328 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80102d4:	f3ef 8305 	mrs	r3, IPSR
 80102d8:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 80102da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80102dc:	4b28      	ldr	r3, [pc, #160]	; (8010380 <_tx_thread_create+0x1e4>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	4313      	orrs	r3, r2
 80102e2:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80102e6:	d30d      	bcc.n	8010304 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80102e8:	4b26      	ldr	r3, [pc, #152]	; (8010384 <_tx_thread_create+0x1e8>)
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80102ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d009      	beq.n	8010308 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80102f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102f8:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80102fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010300:	63da      	str	r2, [r3, #60]	; 0x3c
 8010302:	e001      	b.n	8010308 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8010304:	2300      	movs	r3, #0
 8010306:	647b      	str	r3, [r7, #68]	; 0x44
 8010308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801030a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801030c:	6a3b      	ldr	r3, [r7, #32]
 801030e:	f383 8810 	msr	PRIMASK, r3
}
 8010312:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8010314:	68f8      	ldr	r0, [r7, #12]
 8010316:	f000 fa0b 	bl	8010730 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 801031a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801031c:	2b00      	cmp	r3, #0
 801031e:	d01e      	beq.n	801035e <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8010320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010322:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010324:	63da      	str	r2, [r3, #60]	; 0x3c
 8010326:	e01a      	b.n	801035e <_tx_thread_create+0x1c2>
 8010328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801032a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801032c:	693b      	ldr	r3, [r7, #16]
 801032e:	f383 8810 	msr	PRIMASK, r3
}
 8010332:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010334:	f3ef 8310 	mrs	r3, PRIMASK
 8010338:	61bb      	str	r3, [r7, #24]
    return(posture);
 801033a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 801033c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 801033e:	b672      	cpsid	i
    return(int_posture);
 8010340:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8010342:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8010344:	4b0d      	ldr	r3, [pc, #52]	; (801037c <_tx_thread_create+0x1e0>)
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	3b01      	subs	r3, #1
 801034a:	4a0c      	ldr	r2, [pc, #48]	; (801037c <_tx_thread_create+0x1e0>)
 801034c:	6013      	str	r3, [r2, #0]
 801034e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010350:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010352:	69fb      	ldr	r3, [r7, #28]
 8010354:	f383 8810 	msr	PRIMASK, r3
}
 8010358:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801035a:	f000 f9af 	bl	80106bc <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 801035e:	2300      	movs	r3, #0
}
 8010360:	4618      	mov	r0, r3
 8010362:	3748      	adds	r7, #72	; 0x48
 8010364:	46bd      	mov	sp, r7
 8010366:	bd80      	pop	{r7, pc}
 8010368:	08010c05 	.word	0x08010c05
 801036c:	08010525 	.word	0x08010525
 8010370:	54485244 	.word	0x54485244
 8010374:	24014d48 	.word	0x24014d48
 8010378:	24014d44 	.word	0x24014d44
 801037c:	24014dd4 	.word	0x24014dd4
 8010380:	24000070 	.word	0x24000070
 8010384:	24014d40 	.word	0x24014d40

08010388 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 8010388:	b480      	push	{r7}
 801038a:	b087      	sub	sp, #28
 801038c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801038e:	f3ef 8310 	mrs	r3, PRIMASK
 8010392:	60bb      	str	r3, [r7, #8]
    return(posture);
 8010394:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8010396:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010398:	b672      	cpsid	i
    return(int_posture);
 801039a:	687b      	ldr	r3, [r7, #4]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 801039c:	617b      	str	r3, [r7, #20]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801039e:	4b08      	ldr	r3, [pc, #32]	; (80103c0 <_tx_thread_identify+0x38>)
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	613b      	str	r3, [r7, #16]
 80103a4:	697b      	ldr	r3, [r7, #20]
 80103a6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	f383 8810 	msr	PRIMASK, r3
}
 80103ae:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 80103b0:	693b      	ldr	r3, [r7, #16]
}
 80103b2:	4618      	mov	r0, r3
 80103b4:	371c      	adds	r7, #28
 80103b6:	46bd      	mov	sp, r7
 80103b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103bc:	4770      	bx	lr
 80103be:	bf00      	nop
 80103c0:	24014d3c 	.word	0x24014d3c

080103c4 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80103c8:	4b12      	ldr	r3, [pc, #72]	; (8010414 <_tx_thread_initialize+0x50>)
 80103ca:	2200      	movs	r2, #0
 80103cc:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80103ce:	4b12      	ldr	r3, [pc, #72]	; (8010418 <_tx_thread_initialize+0x54>)
 80103d0:	2200      	movs	r2, #0
 80103d2:	601a      	str	r2, [r3, #0]
 80103d4:	4b11      	ldr	r3, [pc, #68]	; (801041c <_tx_thread_initialize+0x58>)
 80103d6:	2200      	movs	r2, #0
 80103d8:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80103da:	4b11      	ldr	r3, [pc, #68]	; (8010420 <_tx_thread_initialize+0x5c>)
 80103dc:	2220      	movs	r2, #32
 80103de:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80103e0:	2280      	movs	r2, #128	; 0x80
 80103e2:	2100      	movs	r1, #0
 80103e4:	480f      	ldr	r0, [pc, #60]	; (8010424 <_tx_thread_initialize+0x60>)
 80103e6:	f001 faa3 	bl	8011930 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 80103ea:	4b0f      	ldr	r3, [pc, #60]	; (8010428 <_tx_thread_initialize+0x64>)
 80103ec:	2200      	movs	r2, #0
 80103ee:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 80103f0:	4b0e      	ldr	r3, [pc, #56]	; (801042c <_tx_thread_initialize+0x68>)
 80103f2:	2200      	movs	r2, #0
 80103f4:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 80103f6:	4b0e      	ldr	r3, [pc, #56]	; (8010430 <_tx_thread_initialize+0x6c>)
 80103f8:	2200      	movs	r2, #0
 80103fa:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 80103fc:	4b0d      	ldr	r3, [pc, #52]	; (8010434 <_tx_thread_initialize+0x70>)
 80103fe:	2200      	movs	r2, #0
 8010400:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8010402:	4b0d      	ldr	r3, [pc, #52]	; (8010438 <_tx_thread_initialize+0x74>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 801040a:	4a0b      	ldr	r2, [pc, #44]	; (8010438 <_tx_thread_initialize+0x74>)
 801040c:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 801040e:	bf00      	nop
 8010410:	bd80      	pop	{r7, pc}
 8010412:	bf00      	nop
 8010414:	24014d3c 	.word	0x24014d3c
 8010418:	24014d40 	.word	0x24014d40
 801041c:	24014d4c 	.word	0x24014d4c
 8010420:	24014d50 	.word	0x24014d50
 8010424:	24014d54 	.word	0x24014d54
 8010428:	24014d44 	.word	0x24014d44
 801042c:	24014d48 	.word	0x24014d48
 8010430:	24014dd4 	.word	0x24014dd4
 8010434:	24014dd8 	.word	0x24014dd8
 8010438:	24014ddc 	.word	0x24014ddc

0801043c <_tx_thread_preemption_change>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_preemption_change(TX_THREAD *thread_ptr, UINT new_threshold, UINT *old_threshold)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b08c      	sub	sp, #48	; 0x30
 8010440:	af00      	add	r7, sp, #0
 8010442:	60f8      	str	r0, [r7, #12]
 8010444:	60b9      	str	r1, [r7, #8]
 8010446:	607a      	str	r2, [r7, #4]
#endif
UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8010448:	2300      	movs	r3, #0
 801044a:	62bb      	str	r3, [r7, #40]	; 0x28
#ifdef TX_DISABLE_PREEMPTION_THRESHOLD

    /* Only allow 0 (disable all preemption) and returning preemption-threshold to the
       current thread priority if preemption-threshold is disabled. All other threshold
       values are converted to 0.  */
    if (thread_ptr -> tx_thread_user_priority != new_threshold)
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010452:	68ba      	ldr	r2, [r7, #8]
 8010454:	429a      	cmp	r2, r3
 8010456:	d004      	beq.n	8010462 <_tx_thread_preemption_change+0x26>
    {

        /* Is the new threshold zero?  */
        if (new_threshold != ((UINT) 0))
 8010458:	68bb      	ldr	r3, [r7, #8]
 801045a:	2b00      	cmp	r3, #0
 801045c:	d001      	beq.n	8010462 <_tx_thread_preemption_change+0x26>
        {

            /* Convert the new threshold to disable all preemption, since preemption-threshold is
               not supported.  */
            new_threshold =  ((UINT) 0);
 801045e:	2300      	movs	r3, #0
 8010460:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010462:	f3ef 8310 	mrs	r3, PRIMASK
 8010466:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8010468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 801046a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 801046c:	b672      	cpsid	i
    return(int_posture);
 801046e:	6a3b      	ldr	r3, [r7, #32]
        }
    }
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8010470:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Log this kernel call.  */
    TX_EL_THREAD_PREEMPTION_CHANGE_INSERT

    /* Determine if the new threshold is greater than the current user priority.  */
    if (new_threshold > thread_ptr -> tx_thread_user_priority)
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010478:	68ba      	ldr	r2, [r7, #8]
 801047a:	429a      	cmp	r2, r3
 801047c:	d902      	bls.n	8010484 <_tx_thread_preemption_change+0x48>
    {

        /* Return error.  */
        status =  TX_THRESH_ERROR;
 801047e:	2318      	movs	r3, #24
 8010480:	62bb      	str	r3, [r7, #40]	; 0x28
 8010482:	e03e      	b.n	8010502 <_tx_thread_preemption_change+0xc6>
            }
        }
#endif

        /* Return the user's preemption-threshold.   */
        *old_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8010484:	68fb      	ldr	r3, [r7, #12]
 8010486:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	601a      	str	r2, [r3, #0]

        /* Setup the new threshold.  */
        thread_ptr -> tx_thread_user_preempt_threshold =  new_threshold;
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	68ba      	ldr	r2, [r7, #8]
 8010492:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

        /* Determine if the new threshold represents a higher priority than the priority inheritance threshold.  */
        if (new_threshold < thread_ptr -> tx_thread_inherit_priority)
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801049c:	68ba      	ldr	r2, [r7, #8]
 801049e:	429a      	cmp	r2, r3
 80104a0:	d203      	bcs.n	80104aa <_tx_thread_preemption_change+0x6e>
        {

            /* Update the actual preemption-threshold with the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_threshold;
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	68ba      	ldr	r2, [r7, #8]
 80104a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80104a8:	e004      	b.n	80104b4 <_tx_thread_preemption_change+0x78>
        }
        else
        {

            /* Update the actual preemption-threshold with the priority inheritance.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_inherit_priority;
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	63da      	str	r2, [r3, #60]	; 0x3c
        }

        /* Is the thread priority less than the current highest priority?  If not, no preemption is required.  */
        if (_tx_thread_highest_priority < thread_ptr -> tx_thread_priority)
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104b8:	4b17      	ldr	r3, [pc, #92]	; (8010518 <_tx_thread_preemption_change+0xdc>)
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	429a      	cmp	r2, r3
 80104be:	d920      	bls.n	8010502 <_tx_thread_preemption_change+0xc6>
        {

            /* Is the new thread preemption-threshold less than the current highest priority?  If not, no preemption is required.  */
            if (_tx_thread_highest_priority < new_threshold)
 80104c0:	4b15      	ldr	r3, [pc, #84]	; (8010518 <_tx_thread_preemption_change+0xdc>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	68ba      	ldr	r2, [r7, #8]
 80104c6:	429a      	cmp	r2, r3
 80104c8:	d91b      	bls.n	8010502 <_tx_thread_preemption_change+0xc6>
            {

                /* If the current execute pointer is the same at this thread, preemption needs to take place.  */
                if (_tx_thread_execute_ptr == thread_ptr)
 80104ca:	4b14      	ldr	r3, [pc, #80]	; (801051c <_tx_thread_preemption_change+0xe0>)
 80104cc:	681b      	ldr	r3, [r3, #0]
 80104ce:	68fa      	ldr	r2, [r7, #12]
 80104d0:	429a      	cmp	r2, r3
 80104d2:	d116      	bne.n	8010502 <_tx_thread_preemption_change+0xc6>
                        _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
                    }
#endif

                    /* Setup the highest priority thread to execute.  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80104d4:	4b10      	ldr	r3, [pc, #64]	; (8010518 <_tx_thread_preemption_change+0xdc>)
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	4a11      	ldr	r2, [pc, #68]	; (8010520 <_tx_thread_preemption_change+0xe4>)
 80104da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104de:	4a0f      	ldr	r2, [pc, #60]	; (801051c <_tx_thread_preemption_change+0xe0>)
 80104e0:	6013      	str	r3, [r2, #0]
 80104e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104e4:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80104e6:	697b      	ldr	r3, [r7, #20]
 80104e8:	f383 8810 	msr	PRIMASK, r3
}
 80104ec:	bf00      	nop

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Check for preemption.  */
                    _tx_thread_system_preempt_check();
 80104ee:	f000 f8e5 	bl	80106bc <_tx_thread_system_preempt_check>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80104f2:	f3ef 8310 	mrs	r3, PRIMASK
 80104f6:	61fb      	str	r3, [r7, #28]
    return(posture);
 80104f8:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80104fa:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80104fc:	b672      	cpsid	i
    return(int_posture);
 80104fe:	69bb      	ldr	r3, [r7, #24]

                    /* Disable interrupts.  */
                    TX_DISABLE
 8010500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010504:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010506:	693b      	ldr	r3, [r7, #16]
 8010508:	f383 8810 	msr	PRIMASK, r3
}
 801050c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 801050e:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8010510:	4618      	mov	r0, r3
 8010512:	3730      	adds	r7, #48	; 0x30
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}
 8010518:	24014d50 	.word	0x24014d50
 801051c:	24014d40 	.word	0x24014d40
 8010520:	24014d54 	.word	0x24014d54

08010524 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b088      	sub	sp, #32
 8010528:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 801052a:	4b21      	ldr	r3, [pc, #132]	; (80105b0 <_tx_thread_shell_entry+0x8c>)
 801052c:	681b      	ldr	r3, [r3, #0]
 801052e:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8010530:	69fb      	ldr	r3, [r7, #28]
 8010532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010534:	69fa      	ldr	r2, [r7, #28]
 8010536:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8010538:	4610      	mov	r0, r2
 801053a:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 801053c:	4b1d      	ldr	r3, [pc, #116]	; (80105b4 <_tx_thread_shell_entry+0x90>)
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d003      	beq.n	801054c <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8010544:	4b1b      	ldr	r3, [pc, #108]	; (80105b4 <_tx_thread_shell_entry+0x90>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	69f8      	ldr	r0, [r7, #28]
 801054a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801054c:	f3ef 8310 	mrs	r3, PRIMASK
 8010550:	607b      	str	r3, [r7, #4]
    return(posture);
 8010552:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8010554:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010556:	b672      	cpsid	i
    return(int_posture);
 8010558:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 801055a:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 801055c:	69fb      	ldr	r3, [r7, #28]
 801055e:	2201      	movs	r2, #1
 8010560:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010562:	69fb      	ldr	r3, [r7, #28]
 8010564:	2201      	movs	r2, #1
 8010566:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8010568:	69fb      	ldr	r3, [r7, #28]
 801056a:	2200      	movs	r2, #0
 801056c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 801056e:	4b12      	ldr	r3, [pc, #72]	; (80105b8 <_tx_thread_shell_entry+0x94>)
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	3301      	adds	r3, #1
 8010574:	4a10      	ldr	r2, [pc, #64]	; (80105b8 <_tx_thread_shell_entry+0x94>)
 8010576:	6013      	str	r3, [r2, #0]
 8010578:	69bb      	ldr	r3, [r7, #24]
 801057a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801057c:	68bb      	ldr	r3, [r7, #8]
 801057e:	f383 8810 	msr	PRIMASK, r3
}
 8010582:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8010584:	f3ef 8314 	mrs	r3, CONTROL
 8010588:	60fb      	str	r3, [r7, #12]
    return(control_value);
 801058a:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 801058c:	617b      	str	r3, [r7, #20]
 801058e:	697b      	ldr	r3, [r7, #20]
 8010590:	f023 0304 	bic.w	r3, r3, #4
 8010594:	617b      	str	r3, [r7, #20]
 8010596:	697b      	ldr	r3, [r7, #20]
 8010598:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 801059a:	693b      	ldr	r3, [r7, #16]
 801059c:	f383 8814 	msr	CONTROL, r3
}
 80105a0:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80105a2:	69f8      	ldr	r0, [r7, #28]
 80105a4:	f000 f9c4 	bl	8010930 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80105a8:	bf00      	nop
 80105aa:	3720      	adds	r7, #32
 80105ac:	46bd      	mov	sp, r7
 80105ae:	bd80      	pop	{r7, pc}
 80105b0:	24014d3c 	.word	0x24014d3c
 80105b4:	24014dd8 	.word	0x24014dd8
 80105b8:	24014dd4 	.word	0x24014dd4

080105bc <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b08e      	sub	sp, #56	; 0x38
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80105c4:	f3ef 8310 	mrs	r3, PRIMASK
 80105c8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80105ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80105cc:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80105ce:	b672      	cpsid	i
    return(int_posture);
 80105d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80105d2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80105d4:	4b35      	ldr	r3, [pc, #212]	; (80106ac <_tx_thread_sleep+0xf0>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 80105da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d108      	bne.n	80105f2 <_tx_thread_sleep+0x36>
 80105e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e2:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80105e4:	6a3b      	ldr	r3, [r7, #32]
 80105e6:	f383 8810 	msr	PRIMASK, r3
}
 80105ea:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80105ec:	2313      	movs	r3, #19
 80105ee:	637b      	str	r3, [r7, #52]	; 0x34
 80105f0:	e056      	b.n	80106a0 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80105f2:	f3ef 8305 	mrs	r3, IPSR
 80105f6:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 80105f8:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80105fa:	4b2d      	ldr	r3, [pc, #180]	; (80106b0 <_tx_thread_sleep+0xf4>)
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	4313      	orrs	r3, r2
 8010600:	2b00      	cmp	r3, #0
 8010602:	d008      	beq.n	8010616 <_tx_thread_sleep+0x5a>
 8010604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010606:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010608:	69bb      	ldr	r3, [r7, #24]
 801060a:	f383 8810 	msr	PRIMASK, r3
}
 801060e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8010610:	2313      	movs	r3, #19
 8010612:	637b      	str	r3, [r7, #52]	; 0x34
 8010614:	e044      	b.n	80106a0 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8010616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010618:	4a26      	ldr	r2, [pc, #152]	; (80106b4 <_tx_thread_sleep+0xf8>)
 801061a:	4293      	cmp	r3, r2
 801061c:	d108      	bne.n	8010630 <_tx_thread_sleep+0x74>
 801061e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010620:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010622:	697b      	ldr	r3, [r7, #20]
 8010624:	f383 8810 	msr	PRIMASK, r3
}
 8010628:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 801062a:	2313      	movs	r3, #19
 801062c:	637b      	str	r3, [r7, #52]	; 0x34
 801062e:	e037      	b.n	80106a0 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2b00      	cmp	r3, #0
 8010634:	d108      	bne.n	8010648 <_tx_thread_sleep+0x8c>
 8010636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010638:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801063a:	693b      	ldr	r3, [r7, #16]
 801063c:	f383 8810 	msr	PRIMASK, r3
}
 8010640:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8010642:	2300      	movs	r3, #0
 8010644:	637b      	str	r3, [r7, #52]	; 0x34
 8010646:	e02b      	b.n	80106a0 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8010648:	4b1b      	ldr	r3, [pc, #108]	; (80106b8 <_tx_thread_sleep+0xfc>)
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d008      	beq.n	8010662 <_tx_thread_sleep+0xa6>
 8010650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010652:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	f383 8810 	msr	PRIMASK, r3
}
 801065a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 801065c:	2313      	movs	r3, #19
 801065e:	637b      	str	r3, [r7, #52]	; 0x34
 8010660:	e01e      	b.n	80106a0 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8010662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010664:	2204      	movs	r2, #4
 8010666:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801066a:	2201      	movs	r2, #1
 801066c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801066e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010670:	2200      	movs	r2, #0
 8010672:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8010676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010678:	687a      	ldr	r2, [r7, #4]
 801067a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 801067c:	4b0e      	ldr	r3, [pc, #56]	; (80106b8 <_tx_thread_sleep+0xfc>)
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	3301      	adds	r3, #1
 8010682:	4a0d      	ldr	r2, [pc, #52]	; (80106b8 <_tx_thread_sleep+0xfc>)
 8010684:	6013      	str	r3, [r2, #0]
 8010686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010688:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801068a:	68bb      	ldr	r3, [r7, #8]
 801068c:	f383 8810 	msr	PRIMASK, r3
}
 8010690:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8010692:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010694:	f000 f94c 	bl	8010930 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8010698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801069a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801069e:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 80106a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80106a2:	4618      	mov	r0, r3
 80106a4:	3738      	adds	r7, #56	; 0x38
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bd80      	pop	{r7, pc}
 80106aa:	bf00      	nop
 80106ac:	24014d3c 	.word	0x24014d3c
 80106b0:	24000070 	.word	0x24000070
 80106b4:	24014e84 	.word	0x24014e84
 80106b8:	24014dd4 	.word	0x24014dd4

080106bc <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80106bc:	b480      	push	{r7}
 80106be:	b089      	sub	sp, #36	; 0x24
 80106c0:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80106c2:	4b17      	ldr	r3, [pc, #92]	; (8010720 <_tx_thread_system_preempt_check+0x64>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80106c8:	69fb      	ldr	r3, [r7, #28]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d121      	bne.n	8010712 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80106ce:	4b15      	ldr	r3, [pc, #84]	; (8010724 <_tx_thread_system_preempt_check+0x68>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80106d4:	4b14      	ldr	r3, [pc, #80]	; (8010728 <_tx_thread_system_preempt_check+0x6c>)
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 80106da:	69ba      	ldr	r2, [r7, #24]
 80106dc:	697b      	ldr	r3, [r7, #20]
 80106de:	429a      	cmp	r2, r3
 80106e0:	d017      	beq.n	8010712 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80106e2:	4b12      	ldr	r3, [pc, #72]	; (801072c <_tx_thread_system_preempt_check+0x70>)
 80106e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106e8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80106ea:	f3ef 8305 	mrs	r3, IPSR
 80106ee:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80106f0:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d10c      	bne.n	8010710 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80106f6:	f3ef 8310 	mrs	r3, PRIMASK
 80106fa:	60fb      	str	r3, [r7, #12]
    return(posture);
 80106fc:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 80106fe:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8010700:	b662      	cpsie	i
}
 8010702:	bf00      	nop
 8010704:	68bb      	ldr	r3, [r7, #8]
 8010706:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	f383 8810 	msr	PRIMASK, r3
}
 801070e:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8010710:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8010712:	bf00      	nop
 8010714:	3724      	adds	r7, #36	; 0x24
 8010716:	46bd      	mov	sp, r7
 8010718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071c:	4770      	bx	lr
 801071e:	bf00      	nop
 8010720:	24014dd4 	.word	0x24014dd4
 8010724:	24014d3c 	.word	0x24014d3c
 8010728:	24014d40 	.word	0x24014d40
 801072c:	e000ed04 	.word	0xe000ed04

08010730 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b096      	sub	sp, #88	; 0x58
 8010734:	af00      	add	r7, sp, #0
 8010736:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010738:	f3ef 8310 	mrs	r3, PRIMASK
 801073c:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 801073e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 8010740:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8010742:	b672      	cpsid	i
    return(int_posture);
 8010744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8010746:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801074c:	2b00      	cmp	r3, #0
 801074e:	d005      	beq.n	801075c <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	334c      	adds	r3, #76	; 0x4c
 8010754:	4618      	mov	r0, r3
 8010756:	f000 fc13 	bl	8010f80 <_tx_timer_system_deactivate>
 801075a:	e002      	b.n	8010762 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2200      	movs	r2, #0
 8010760:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8010762:	4b6c      	ldr	r3, [pc, #432]	; (8010914 <_tx_thread_system_resume+0x1e4>)
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	3b01      	subs	r3, #1
 8010768:	4a6a      	ldr	r2, [pc, #424]	; (8010914 <_tx_thread_system_resume+0x1e4>)
 801076a:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010770:	2b00      	cmp	r3, #0
 8010772:	f040 8083 	bne.w	801087c <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801077a:	2b00      	cmp	r3, #0
 801077c:	f000 8097 	beq.w	80108ae <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010784:	2b00      	cmp	r3, #0
 8010786:	d172      	bne.n	801086e <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	2200      	movs	r2, #0
 801078c:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010792:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8010794:	4a60      	ldr	r2, [pc, #384]	; (8010918 <_tx_thread_system_resume+0x1e8>)
 8010796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801079c:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 801079e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d154      	bne.n	801084e <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80107a4:	495c      	ldr	r1, [pc, #368]	; (8010918 <_tx_thread_system_resume+0x1e8>)
 80107a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107a8:	687a      	ldr	r2, [r7, #4]
 80107aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	687a      	ldr	r2, [r7, #4]
 80107b2:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	687a      	ldr	r2, [r7, #4]
 80107b8:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80107ba:	2201      	movs	r2, #1
 80107bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107be:	fa02 f303 	lsl.w	r3, r2, r3
 80107c2:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80107c4:	4b55      	ldr	r3, [pc, #340]	; (801091c <_tx_thread_system_resume+0x1ec>)
 80107c6:	681a      	ldr	r2, [r3, #0]
 80107c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107ca:	4313      	orrs	r3, r2
 80107cc:	4a53      	ldr	r2, [pc, #332]	; (801091c <_tx_thread_system_resume+0x1ec>)
 80107ce:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 80107d0:	4b53      	ldr	r3, [pc, #332]	; (8010920 <_tx_thread_system_resume+0x1f0>)
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80107d6:	429a      	cmp	r2, r3
 80107d8:	d269      	bcs.n	80108ae <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 80107da:	4a51      	ldr	r2, [pc, #324]	; (8010920 <_tx_thread_system_resume+0x1f0>)
 80107dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107de:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 80107e0:	4b50      	ldr	r3, [pc, #320]	; (8010924 <_tx_thread_system_resume+0x1f4>)
 80107e2:	681b      	ldr	r3, [r3, #0]
 80107e4:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 80107e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d103      	bne.n	80107f4 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80107ec:	4a4d      	ldr	r2, [pc, #308]	; (8010924 <_tx_thread_system_resume+0x1f4>)
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	6013      	str	r3, [r2, #0]
 80107f2:	e05c      	b.n	80108ae <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80107f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80107f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80107f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80107fa:	429a      	cmp	r2, r3
 80107fc:	d257      	bcs.n	80108ae <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 80107fe:	4a49      	ldr	r2, [pc, #292]	; (8010924 <_tx_thread_system_resume+0x1f4>)
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6013      	str	r3, [r2, #0]
 8010804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010806:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801080a:	f383 8810 	msr	PRIMASK, r3
}
 801080e:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8010810:	4b40      	ldr	r3, [pc, #256]	; (8010914 <_tx_thread_system_resume+0x1e4>)
 8010812:	681b      	ldr	r3, [r3, #0]
 8010814:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 8010816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010818:	2b00      	cmp	r3, #0
 801081a:	d174      	bne.n	8010906 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801081c:	4b42      	ldr	r3, [pc, #264]	; (8010928 <_tx_thread_system_resume+0x1f8>)
 801081e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010822:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010824:	f3ef 8305 	mrs	r3, IPSR
 8010828:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 801082a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (__get_ipsr_value() == 0)
 801082c:	2b00      	cmp	r3, #0
 801082e:	d10c      	bne.n	801084a <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010830:	f3ef 8310 	mrs	r3, PRIMASK
 8010834:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 8010836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 8010838:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 801083a:	b662      	cpsie	i
}
 801083c:	bf00      	nop
 801083e:	6a3b      	ldr	r3, [r7, #32]
 8010840:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010842:	69fb      	ldr	r3, [r7, #28]
 8010844:	f383 8810 	msr	PRIMASK, r3
}
 8010848:	bf00      	nop
}
 801084a:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 801084c:	e05b      	b.n	8010906 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 801084e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010852:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8010854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010856:	687a      	ldr	r2, [r7, #4]
 8010858:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 801085a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801085c:	687a      	ldr	r2, [r7, #4]
 801085e:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010864:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801086a:	621a      	str	r2, [r3, #32]
 801086c:	e01f      	b.n	80108ae <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	2200      	movs	r2, #0
 8010872:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2203      	movs	r2, #3
 8010878:	631a      	str	r2, [r3, #48]	; 0x30
 801087a:	e018      	b.n	80108ae <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010880:	2b01      	cmp	r3, #1
 8010882:	d014      	beq.n	80108ae <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010888:	2b02      	cmp	r3, #2
 801088a:	d010      	beq.n	80108ae <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010890:	2b00      	cmp	r3, #0
 8010892:	d106      	bne.n	80108a2 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	2200      	movs	r2, #0
 8010898:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	2200      	movs	r2, #0
 801089e:	631a      	str	r2, [r3, #48]	; 0x30
 80108a0:	e005      	b.n	80108ae <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	2200      	movs	r2, #0
 80108a6:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	2203      	movs	r2, #3
 80108ac:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80108ae:	4b1f      	ldr	r3, [pc, #124]	; (801092c <_tx_thread_system_resume+0x1fc>)
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80108b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80108b6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80108b8:	69bb      	ldr	r3, [r7, #24]
 80108ba:	f383 8810 	msr	PRIMASK, r3
}
 80108be:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80108c0:	4b18      	ldr	r3, [pc, #96]	; (8010924 <_tx_thread_system_resume+0x1f4>)
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80108c6:	429a      	cmp	r2, r3
 80108c8:	d020      	beq.n	801090c <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80108ca:	4b12      	ldr	r3, [pc, #72]	; (8010914 <_tx_thread_system_resume+0x1e4>)
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 80108d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d11a      	bne.n	801090c <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80108d6:	4b14      	ldr	r3, [pc, #80]	; (8010928 <_tx_thread_system_resume+0x1f8>)
 80108d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108dc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80108de:	f3ef 8305 	mrs	r3, IPSR
 80108e2:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80108e4:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d10f      	bne.n	801090a <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80108ea:	f3ef 8310 	mrs	r3, PRIMASK
 80108ee:	613b      	str	r3, [r7, #16]
    return(posture);
 80108f0:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 80108f2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80108f4:	b662      	cpsie	i
}
 80108f6:	bf00      	nop
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	f383 8810 	msr	PRIMASK, r3
}
 8010902:	bf00      	nop
}
 8010904:	e001      	b.n	801090a <_tx_thread_system_resume+0x1da>
                                return;
 8010906:	bf00      	nop
 8010908:	e000      	b.n	801090c <_tx_thread_system_resume+0x1dc>
 801090a:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 801090c:	3758      	adds	r7, #88	; 0x58
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}
 8010912:	bf00      	nop
 8010914:	24014dd4 	.word	0x24014dd4
 8010918:	24014d54 	.word	0x24014d54
 801091c:	24014d4c 	.word	0x24014d4c
 8010920:	24014d50 	.word	0x24014d50
 8010924:	24014d40 	.word	0x24014d40
 8010928:	e000ed04 	.word	0xe000ed04
 801092c:	24014d3c 	.word	0x24014d3c

08010930 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b09e      	sub	sp, #120	; 0x78
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8010938:	4b81      	ldr	r3, [pc, #516]	; (8010b40 <_tx_thread_system_suspend+0x210>)
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801093e:	f3ef 8310 	mrs	r3, PRIMASK
 8010942:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 8010944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 8010946:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8010948:	b672      	cpsid	i
    return(int_posture);
 801094a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 801094c:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 801094e:	687a      	ldr	r2, [r7, #4]
 8010950:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010952:	429a      	cmp	r2, r3
 8010954:	d112      	bne.n	801097c <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801095a:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 801095c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801095e:	2b00      	cmp	r3, #0
 8010960:	d008      	beq.n	8010974 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8010962:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010968:	d004      	beq.n	8010974 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	334c      	adds	r3, #76	; 0x4c
 801096e:	4618      	mov	r0, r3
 8010970:	f000 faa4 	bl	8010ebc <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	69db      	ldr	r3, [r3, #28]
 8010978:	4a72      	ldr	r2, [pc, #456]	; (8010b44 <_tx_thread_system_suspend+0x214>)
 801097a:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 801097c:	4b72      	ldr	r3, [pc, #456]	; (8010b48 <_tx_thread_system_suspend+0x218>)
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	3b01      	subs	r3, #1
 8010982:	4a71      	ldr	r2, [pc, #452]	; (8010b48 <_tx_thread_system_suspend+0x218>)
 8010984:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801098a:	2b01      	cmp	r3, #1
 801098c:	f040 80a6 	bne.w	8010adc <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	2200      	movs	r2, #0
 8010994:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801099a:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	6a1b      	ldr	r3, [r3, #32]
 80109a0:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 80109a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	429a      	cmp	r2, r3
 80109a8:	d015      	beq.n	80109d6 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109ae:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 80109b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80109b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80109b4:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 80109b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80109b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80109ba:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 80109bc:	4a63      	ldr	r2, [pc, #396]	; (8010b4c <_tx_thread_system_suspend+0x21c>)
 80109be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80109c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80109c4:	687a      	ldr	r2, [r7, #4]
 80109c6:	429a      	cmp	r2, r3
 80109c8:	d157      	bne.n	8010a7a <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 80109ca:	4960      	ldr	r1, [pc, #384]	; (8010b4c <_tx_thread_system_suspend+0x21c>)
 80109cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80109ce:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80109d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80109d4:	e051      	b.n	8010a7a <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 80109d6:	4a5d      	ldr	r2, [pc, #372]	; (8010b4c <_tx_thread_system_suspend+0x21c>)
 80109d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80109da:	2100      	movs	r1, #0
 80109dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 80109e0:	2201      	movs	r2, #1
 80109e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80109e4:	fa02 f303 	lsl.w	r3, r2, r3
 80109e8:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 80109ea:	4b59      	ldr	r3, [pc, #356]	; (8010b50 <_tx_thread_system_suspend+0x220>)
 80109ec:	681a      	ldr	r2, [r3, #0]
 80109ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80109f0:	43db      	mvns	r3, r3
 80109f2:	4013      	ands	r3, r2
 80109f4:	4a56      	ldr	r2, [pc, #344]	; (8010b50 <_tx_thread_system_suspend+0x220>)
 80109f6:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 80109f8:	2300      	movs	r3, #0
 80109fa:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 80109fc:	4b54      	ldr	r3, [pc, #336]	; (8010b50 <_tx_thread_system_suspend+0x220>)
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8010a02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d12b      	bne.n	8010a60 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8010a08:	4b52      	ldr	r3, [pc, #328]	; (8010b54 <_tx_thread_system_suspend+0x224>)
 8010a0a:	2220      	movs	r2, #32
 8010a0c:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8010a0e:	4b52      	ldr	r3, [pc, #328]	; (8010b58 <_tx_thread_system_suspend+0x228>)
 8010a10:	2200      	movs	r2, #0
 8010a12:	601a      	str	r2, [r3, #0]
 8010a14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010a16:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a1a:	f383 8810 	msr	PRIMASK, r3
}
 8010a1e:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8010a20:	4b49      	ldr	r3, [pc, #292]	; (8010b48 <_tx_thread_system_suspend+0x218>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 8010a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	f040 8081 	bne.w	8010b30 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8010a2e:	4b4b      	ldr	r3, [pc, #300]	; (8010b5c <_tx_thread_system_suspend+0x22c>)
 8010a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a34:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010a36:	f3ef 8305 	mrs	r3, IPSR
 8010a3a:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 8010a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (__get_ipsr_value() == 0)
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d10c      	bne.n	8010a5c <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010a42:	f3ef 8310 	mrs	r3, PRIMASK
 8010a46:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 8010a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 8010a4a:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8010a4c:	b662      	cpsie	i
}
 8010a4e:	bf00      	nop
 8010a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a52:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a56:	f383 8810 	msr	PRIMASK, r3
}
 8010a5a:	bf00      	nop
}
 8010a5c:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8010a5e:	e067      	b.n	8010b30 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8010a60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010a62:	fa93 f3a3 	rbit	r3, r3
 8010a66:	65bb      	str	r3, [r7, #88]	; 0x58
 8010a68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010a6a:	fab3 f383 	clz	r3, r3
 8010a6e:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8010a70:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010a72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010a74:	4413      	add	r3, r2
 8010a76:	4a37      	ldr	r2, [pc, #220]	; (8010b54 <_tx_thread_system_suspend+0x224>)
 8010a78:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8010a7a:	4b37      	ldr	r3, [pc, #220]	; (8010b58 <_tx_thread_system_suspend+0x228>)
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	687a      	ldr	r2, [r7, #4]
 8010a80:	429a      	cmp	r2, r3
 8010a82:	d12b      	bne.n	8010adc <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8010a84:	4b33      	ldr	r3, [pc, #204]	; (8010b54 <_tx_thread_system_suspend+0x224>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	4a30      	ldr	r2, [pc, #192]	; (8010b4c <_tx_thread_system_suspend+0x21c>)
 8010a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a8e:	4a32      	ldr	r2, [pc, #200]	; (8010b58 <_tx_thread_system_suspend+0x228>)
 8010a90:	6013      	str	r3, [r2, #0]
 8010a92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010a94:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a98:	f383 8810 	msr	PRIMASK, r3
}
 8010a9c:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8010a9e:	4b2a      	ldr	r3, [pc, #168]	; (8010b48 <_tx_thread_system_suspend+0x218>)
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 8010aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d144      	bne.n	8010b34 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8010aaa:	4b2c      	ldr	r3, [pc, #176]	; (8010b5c <_tx_thread_system_suspend+0x22c>)
 8010aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ab0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010ab2:	f3ef 8305 	mrs	r3, IPSR
 8010ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 8010ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (__get_ipsr_value() == 0)
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d10c      	bne.n	8010ad8 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010abe:	f3ef 8310 	mrs	r3, PRIMASK
 8010ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8010ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 8010ac6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8010ac8:	b662      	cpsie	i
}
 8010aca:	bf00      	nop
 8010acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ace:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010ad0:	6a3b      	ldr	r3, [r7, #32]
 8010ad2:	f383 8810 	msr	PRIMASK, r3
}
 8010ad6:	bf00      	nop
}
 8010ad8:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8010ada:	e02b      	b.n	8010b34 <_tx_thread_system_suspend+0x204>
 8010adc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010ade:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010ae0:	69fb      	ldr	r3, [r7, #28]
 8010ae2:	f383 8810 	msr	PRIMASK, r3
}
 8010ae6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8010ae8:	4b1b      	ldr	r3, [pc, #108]	; (8010b58 <_tx_thread_system_suspend+0x228>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010aee:	429a      	cmp	r2, r3
 8010af0:	d022      	beq.n	8010b38 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8010af2:	4b15      	ldr	r3, [pc, #84]	; (8010b48 <_tx_thread_system_suspend+0x218>)
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 8010af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d11c      	bne.n	8010b38 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8010afe:	4b17      	ldr	r3, [pc, #92]	; (8010b5c <_tx_thread_system_suspend+0x22c>)
 8010b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b04:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8010b06:	f3ef 8305 	mrs	r3, IPSR
 8010b0a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8010b0c:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d10c      	bne.n	8010b2c <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010b12:	f3ef 8310 	mrs	r3, PRIMASK
 8010b16:	617b      	str	r3, [r7, #20]
    return(posture);
 8010b18:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8010b1a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8010b1c:	b662      	cpsie	i
}
 8010b1e:	bf00      	nop
 8010b20:	693b      	ldr	r3, [r7, #16]
 8010b22:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	f383 8810 	msr	PRIMASK, r3
}
 8010b2a:	bf00      	nop
}
 8010b2c:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8010b2e:	e003      	b.n	8010b38 <_tx_thread_system_suspend+0x208>
                return;
 8010b30:	bf00      	nop
 8010b32:	e002      	b.n	8010b3a <_tx_thread_system_suspend+0x20a>
            return;
 8010b34:	bf00      	nop
 8010b36:	e000      	b.n	8010b3a <_tx_thread_system_suspend+0x20a>
    return;
 8010b38:	bf00      	nop
}
 8010b3a:	3778      	adds	r7, #120	; 0x78
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}
 8010b40:	24014d3c 	.word	0x24014d3c
 8010b44:	24015340 	.word	0x24015340
 8010b48:	24014dd4 	.word	0x24014dd4
 8010b4c:	24014d54 	.word	0x24014d54
 8010b50:	24014d4c 	.word	0x24014d4c
 8010b54:	24014d50 	.word	0x24014d50
 8010b58:	24014d40 	.word	0x24014d40
 8010b5c:	e000ed04 	.word	0xe000ed04

08010b60 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8010b60:	b480      	push	{r7}
 8010b62:	b087      	sub	sp, #28
 8010b64:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8010b66:	4b21      	ldr	r3, [pc, #132]	; (8010bec <_tx_thread_time_slice+0x8c>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010b6c:	f3ef 8310 	mrs	r3, PRIMASK
 8010b70:	60fb      	str	r3, [r7, #12]
    return(posture);
 8010b72:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8010b74:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010b76:	b672      	cpsid	i
    return(int_posture);
 8010b78:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8010b7a:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8010b7c:	4b1c      	ldr	r3, [pc, #112]	; (8010bf0 <_tx_thread_time_slice+0x90>)
 8010b7e:	2200      	movs	r2, #0
 8010b80:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8010b82:	697b      	ldr	r3, [r7, #20]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d024      	beq.n	8010bd2 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8010b88:	697b      	ldr	r3, [r7, #20]
 8010b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d120      	bne.n	8010bd2 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8010b90:	697b      	ldr	r3, [r7, #20]
 8010b92:	69da      	ldr	r2, [r3, #28]
 8010b94:	697b      	ldr	r3, [r7, #20]
 8010b96:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8010b98:	697b      	ldr	r3, [r7, #20]
 8010b9a:	699b      	ldr	r3, [r3, #24]
 8010b9c:	4a15      	ldr	r2, [pc, #84]	; (8010bf4 <_tx_thread_time_slice+0x94>)
 8010b9e:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8010ba0:	697b      	ldr	r3, [r7, #20]
 8010ba2:	6a1b      	ldr	r3, [r3, #32]
 8010ba4:	697a      	ldr	r2, [r7, #20]
 8010ba6:	429a      	cmp	r2, r3
 8010ba8:	d013      	beq.n	8010bd2 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8010baa:	697b      	ldr	r3, [r7, #20]
 8010bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010bae:	697b      	ldr	r3, [r7, #20]
 8010bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bb2:	429a      	cmp	r2, r3
 8010bb4:	d10d      	bne.n	8010bd2 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8010bb6:	697b      	ldr	r3, [r7, #20]
 8010bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bba:	697a      	ldr	r2, [r7, #20]
 8010bbc:	6a12      	ldr	r2, [r2, #32]
 8010bbe:	490e      	ldr	r1, [pc, #56]	; (8010bf8 <_tx_thread_time_slice+0x98>)
 8010bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8010bc4:	4b0d      	ldr	r3, [pc, #52]	; (8010bfc <_tx_thread_time_slice+0x9c>)
 8010bc6:	681b      	ldr	r3, [r3, #0]
 8010bc8:	4a0b      	ldr	r2, [pc, #44]	; (8010bf8 <_tx_thread_time_slice+0x98>)
 8010bca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010bce:	4a0c      	ldr	r2, [pc, #48]	; (8010c00 <_tx_thread_time_slice+0xa0>)
 8010bd0:	6013      	str	r3, [r2, #0]
 8010bd2:	693b      	ldr	r3, [r7, #16]
 8010bd4:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	f383 8810 	msr	PRIMASK, r3
}
 8010bdc:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8010bde:	bf00      	nop
 8010be0:	371c      	adds	r7, #28
 8010be2:	46bd      	mov	sp, r7
 8010be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be8:	4770      	bx	lr
 8010bea:	bf00      	nop
 8010bec:	24014d3c 	.word	0x24014d3c
 8010bf0:	24014de4 	.word	0x24014de4
 8010bf4:	24015340 	.word	0x24015340
 8010bf8:	24014d54 	.word	0x24014d54
 8010bfc:	24014d50 	.word	0x24014d50
 8010c00:	24014d40 	.word	0x24014d40

08010c04 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8010c04:	b580      	push	{r7, lr}
 8010c06:	b08a      	sub	sp, #40	; 0x28
 8010c08:	af00      	add	r7, sp, #0
 8010c0a:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010c10:	f3ef 8310 	mrs	r3, PRIMASK
 8010c14:	617b      	str	r3, [r7, #20]
    return(posture);
 8010c16:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8010c18:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010c1a:	b672      	cpsid	i
    return(int_posture);
 8010c1c:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8010c1e:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8010c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c24:	2b04      	cmp	r3, #4
 8010c26:	d10e      	bne.n	8010c46 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8010c28:	4b13      	ldr	r3, [pc, #76]	; (8010c78 <_tx_thread_timeout+0x74>)
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	3301      	adds	r3, #1
 8010c2e:	4a12      	ldr	r2, [pc, #72]	; (8010c78 <_tx_thread_timeout+0x74>)
 8010c30:	6013      	str	r3, [r2, #0]
 8010c32:	6a3b      	ldr	r3, [r7, #32]
 8010c34:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	f383 8810 	msr	PRIMASK, r3
}
 8010c3c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8010c3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c40:	f7ff fd76 	bl	8010730 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8010c44:	e013      	b.n	8010c6e <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8010c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010c4a:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8010c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8010c52:	61bb      	str	r3, [r7, #24]
 8010c54:	6a3b      	ldr	r3, [r7, #32]
 8010c56:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010c58:	68bb      	ldr	r3, [r7, #8]
 8010c5a:	f383 8810 	msr	PRIMASK, r3
}
 8010c5e:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8010c60:	69fb      	ldr	r3, [r7, #28]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d003      	beq.n	8010c6e <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8010c66:	69fb      	ldr	r3, [r7, #28]
 8010c68:	69b9      	ldr	r1, [r7, #24]
 8010c6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010c6c:	4798      	blx	r3
}
 8010c6e:	bf00      	nop
 8010c70:	3728      	adds	r7, #40	; 0x28
 8010c72:	46bd      	mov	sp, r7
 8010c74:	bd80      	pop	{r7, pc}
 8010c76:	bf00      	nop
 8010c78:	24014dd4 	.word	0x24014dd4

08010c7c <_tx_time_get>:
/*  12-31-2020     Andres Mlinar            Modified comment(s),          */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
ULONG  _tx_time_get(VOID)
{
 8010c7c:	b480      	push	{r7}
 8010c7e:	b087      	sub	sp, #28
 8010c80:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010c82:	f3ef 8310 	mrs	r3, PRIMASK
 8010c86:	60bb      	str	r3, [r7, #8]
    return(posture);
 8010c88:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8010c8a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010c8c:	b672      	cpsid	i
    return(int_posture);
 8010c8e:	687b      	ldr	r3, [r7, #4]
#endif
ULONG   temp_time;


    /* Disable interrupts.  */
    TX_DISABLE
 8010c90:	617b      	str	r3, [r7, #20]

    /* Pickup the system clock time.  */
    temp_time =  _tx_timer_system_clock;
 8010c92:	4b08      	ldr	r3, [pc, #32]	; (8010cb4 <_tx_time_get+0x38>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	613b      	str	r3, [r7, #16]
 8010c98:	697b      	ldr	r3, [r7, #20]
 8010c9a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	f383 8810 	msr	PRIMASK, r3
}
 8010ca2:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the time.  */
    return(temp_time);
 8010ca4:	693b      	ldr	r3, [r7, #16]
}
 8010ca6:	4618      	mov	r0, r3
 8010ca8:	371c      	adds	r7, #28
 8010caa:	46bd      	mov	sp, r7
 8010cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb0:	4770      	bx	lr
 8010cb2:	bf00      	nop
 8010cb4:	24014de0 	.word	0x24014de0

08010cb8 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b08a      	sub	sp, #40	; 0x28
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	60f8      	str	r0, [r7, #12]
 8010cc0:	60b9      	str	r1, [r7, #8]
 8010cc2:	607a      	str	r2, [r7, #4]
 8010cc4:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 8010cc6:	222c      	movs	r2, #44	; 0x2c
 8010cc8:	2100      	movs	r1, #0
 8010cca:	68f8      	ldr	r0, [r7, #12]
 8010ccc:	f000 fe30 	bl	8011930 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	68ba      	ldr	r2, [r7, #8]
 8010cd4:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010cda:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 8010cdc:	68fb      	ldr	r3, [r7, #12]
 8010cde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010ce0:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	687a      	ldr	r2, [r7, #4]
 8010ce6:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	683a      	ldr	r2, [r7, #0]
 8010cec:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010cee:	f3ef 8310 	mrs	r3, PRIMASK
 8010cf2:	61bb      	str	r3, [r7, #24]
    return(posture);
 8010cf4:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8010cf6:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010cf8:	b672      	cpsid	i
    return(int_posture);
 8010cfa:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 8010cfc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	4a1c      	ldr	r2, [pc, #112]	; (8010d74 <_tx_timer_create+0xbc>)
 8010d02:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 8010d04:	4b1c      	ldr	r3, [pc, #112]	; (8010d78 <_tx_timer_create+0xc0>)
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d109      	bne.n	8010d20 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 8010d0c:	4a1b      	ldr	r2, [pc, #108]	; (8010d7c <_tx_timer_create+0xc4>)
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 8010d12:	68fb      	ldr	r3, [r7, #12]
 8010d14:	68fa      	ldr	r2, [r7, #12]
 8010d16:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	68fa      	ldr	r2, [r7, #12]
 8010d1c:	629a      	str	r2, [r3, #40]	; 0x28
 8010d1e:	e011      	b.n	8010d44 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 8010d20:	4b16      	ldr	r3, [pc, #88]	; (8010d7c <_tx_timer_create+0xc4>)
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 8010d26:	6a3b      	ldr	r3, [r7, #32]
 8010d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d2a:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 8010d2c:	6a3b      	ldr	r3, [r7, #32]
 8010d2e:	68fa      	ldr	r2, [r7, #12]
 8010d30:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 8010d32:	69fb      	ldr	r3, [r7, #28]
 8010d34:	68fa      	ldr	r2, [r7, #12]
 8010d36:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	69fa      	ldr	r2, [r7, #28]
 8010d3c:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	6a3a      	ldr	r2, [r7, #32]
 8010d42:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 8010d44:	4b0c      	ldr	r3, [pc, #48]	; (8010d78 <_tx_timer_create+0xc0>)
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	3301      	adds	r3, #1
 8010d4a:	4a0b      	ldr	r2, [pc, #44]	; (8010d78 <_tx_timer_create+0xc0>)
 8010d4c:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 8010d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d50:	2b01      	cmp	r3, #1
 8010d52:	d104      	bne.n	8010d5e <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 8010d54:	68fb      	ldr	r3, [r7, #12]
 8010d56:	3308      	adds	r3, #8
 8010d58:	4618      	mov	r0, r3
 8010d5a:	f000 f8af 	bl	8010ebc <_tx_timer_system_activate>
 8010d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d60:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010d62:	693b      	ldr	r3, [r7, #16]
 8010d64:	f383 8810 	msr	PRIMASK, r3
}
 8010d68:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 8010d6a:	2300      	movs	r3, #0
}
 8010d6c:	4618      	mov	r0, r3
 8010d6e:	3728      	adds	r7, #40	; 0x28
 8010d70:	46bd      	mov	sp, r7
 8010d72:	bd80      	pop	{r7, pc}
 8010d74:	4154494d 	.word	0x4154494d
 8010d78:	24014e7c 	.word	0x24014e7c
 8010d7c:	24014e78 	.word	0x24014e78

08010d80 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8010d80:	b580      	push	{r7, lr}
 8010d82:	b084      	sub	sp, #16
 8010d84:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8010d86:	f3ef 8310 	mrs	r3, PRIMASK
 8010d8a:	607b      	str	r3, [r7, #4]
    return(posture);
 8010d8c:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8010d8e:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8010d90:	b672      	cpsid	i
    return(int_posture);
 8010d92:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8010d94:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8010d96:	4b09      	ldr	r3, [pc, #36]	; (8010dbc <_tx_timer_expiration_process+0x3c>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	3301      	adds	r3, #1
 8010d9c:	4a07      	ldr	r2, [pc, #28]	; (8010dbc <_tx_timer_expiration_process+0x3c>)
 8010d9e:	6013      	str	r3, [r2, #0]
 8010da0:	68fb      	ldr	r3, [r7, #12]
 8010da2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8010da4:	68bb      	ldr	r3, [r7, #8]
 8010da6:	f383 8810 	msr	PRIMASK, r3
}
 8010daa:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8010dac:	4804      	ldr	r0, [pc, #16]	; (8010dc0 <_tx_timer_expiration_process+0x40>)
 8010dae:	f7ff fcbf 	bl	8010730 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8010db2:	bf00      	nop
 8010db4:	3710      	adds	r7, #16
 8010db6:	46bd      	mov	sp, r7
 8010db8:	bd80      	pop	{r7, pc}
 8010dba:	bf00      	nop
 8010dbc:	24014dd4 	.word	0x24014dd4
 8010dc0:	24014e84 	.word	0x24014e84

08010dc4 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8010dc4:	b590      	push	{r4, r7, lr}
 8010dc6:	b089      	sub	sp, #36	; 0x24
 8010dc8:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8010dca:	4b28      	ldr	r3, [pc, #160]	; (8010e6c <_tx_timer_initialize+0xa8>)
 8010dcc:	2200      	movs	r2, #0
 8010dce:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8010dd0:	4b27      	ldr	r3, [pc, #156]	; (8010e70 <_tx_timer_initialize+0xac>)
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8010dd6:	4b27      	ldr	r3, [pc, #156]	; (8010e74 <_tx_timer_initialize+0xb0>)
 8010dd8:	2200      	movs	r2, #0
 8010dda:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8010ddc:	4b26      	ldr	r3, [pc, #152]	; (8010e78 <_tx_timer_initialize+0xb4>)
 8010dde:	2200      	movs	r2, #0
 8010de0:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8010de2:	4b26      	ldr	r3, [pc, #152]	; (8010e7c <_tx_timer_initialize+0xb8>)
 8010de4:	2200      	movs	r2, #0
 8010de6:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8010de8:	2280      	movs	r2, #128	; 0x80
 8010dea:	2100      	movs	r1, #0
 8010dec:	4824      	ldr	r0, [pc, #144]	; (8010e80 <_tx_timer_initialize+0xbc>)
 8010dee:	f000 fd9f 	bl	8011930 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8010df2:	4b24      	ldr	r3, [pc, #144]	; (8010e84 <_tx_timer_initialize+0xc0>)
 8010df4:	4a22      	ldr	r2, [pc, #136]	; (8010e80 <_tx_timer_initialize+0xbc>)
 8010df6:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8010df8:	4b23      	ldr	r3, [pc, #140]	; (8010e88 <_tx_timer_initialize+0xc4>)
 8010dfa:	4a21      	ldr	r2, [pc, #132]	; (8010e80 <_tx_timer_initialize+0xbc>)
 8010dfc:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8010dfe:	4b23      	ldr	r3, [pc, #140]	; (8010e8c <_tx_timer_initialize+0xc8>)
 8010e00:	4a23      	ldr	r2, [pc, #140]	; (8010e90 <_tx_timer_initialize+0xcc>)
 8010e02:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8010e04:	4b21      	ldr	r3, [pc, #132]	; (8010e8c <_tx_timer_initialize+0xc8>)
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	3304      	adds	r3, #4
 8010e0a:	4a20      	ldr	r2, [pc, #128]	; (8010e8c <_tx_timer_initialize+0xc8>)
 8010e0c:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8010e0e:	4b21      	ldr	r3, [pc, #132]	; (8010e94 <_tx_timer_initialize+0xd0>)
 8010e10:	4a21      	ldr	r2, [pc, #132]	; (8010e98 <_tx_timer_initialize+0xd4>)
 8010e12:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8010e14:	4b21      	ldr	r3, [pc, #132]	; (8010e9c <_tx_timer_initialize+0xd8>)
 8010e16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8010e1a:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8010e1c:	4b20      	ldr	r3, [pc, #128]	; (8010ea0 <_tx_timer_initialize+0xdc>)
 8010e1e:	2200      	movs	r2, #0
 8010e20:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8010e22:	4b1c      	ldr	r3, [pc, #112]	; (8010e94 <_tx_timer_initialize+0xd0>)
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	4a1d      	ldr	r2, [pc, #116]	; (8010e9c <_tx_timer_initialize+0xd8>)
 8010e28:	6812      	ldr	r2, [r2, #0]
 8010e2a:	491d      	ldr	r1, [pc, #116]	; (8010ea0 <_tx_timer_initialize+0xdc>)
 8010e2c:	6809      	ldr	r1, [r1, #0]
 8010e2e:	481c      	ldr	r0, [pc, #112]	; (8010ea0 <_tx_timer_initialize+0xdc>)
 8010e30:	6800      	ldr	r0, [r0, #0]
 8010e32:	2400      	movs	r4, #0
 8010e34:	9405      	str	r4, [sp, #20]
 8010e36:	2400      	movs	r4, #0
 8010e38:	9404      	str	r4, [sp, #16]
 8010e3a:	9003      	str	r0, [sp, #12]
 8010e3c:	9102      	str	r1, [sp, #8]
 8010e3e:	9201      	str	r2, [sp, #4]
 8010e40:	9300      	str	r3, [sp, #0]
 8010e42:	4b18      	ldr	r3, [pc, #96]	; (8010ea4 <_tx_timer_initialize+0xe0>)
 8010e44:	4a18      	ldr	r2, [pc, #96]	; (8010ea8 <_tx_timer_initialize+0xe4>)
 8010e46:	4919      	ldr	r1, [pc, #100]	; (8010eac <_tx_timer_initialize+0xe8>)
 8010e48:	4819      	ldr	r0, [pc, #100]	; (8010eb0 <_tx_timer_initialize+0xec>)
 8010e4a:	f7ff f9a7 	bl	801019c <_tx_thread_create>
 8010e4e:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d1e5      	bne.n	8010e22 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8010e56:	4b17      	ldr	r3, [pc, #92]	; (8010eb4 <_tx_timer_initialize+0xf0>)
 8010e58:	2200      	movs	r2, #0
 8010e5a:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8010e5c:	4b16      	ldr	r3, [pc, #88]	; (8010eb8 <_tx_timer_initialize+0xf4>)
 8010e5e:	2200      	movs	r2, #0
 8010e60:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8010e62:	bf00      	nop
 8010e64:	370c      	adds	r7, #12
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd90      	pop	{r4, r7, pc}
 8010e6a:	bf00      	nop
 8010e6c:	24014de0 	.word	0x24014de0
 8010e70:	24015340 	.word	0x24015340
 8010e74:	24014de4 	.word	0x24014de4
 8010e78:	24014e74 	.word	0x24014e74
 8010e7c:	24014e80 	.word	0x24014e80
 8010e80:	24014de8 	.word	0x24014de8
 8010e84:	24014e68 	.word	0x24014e68
 8010e88:	24014e70 	.word	0x24014e70
 8010e8c:	24014e6c 	.word	0x24014e6c
 8010e90:	24014e64 	.word	0x24014e64
 8010e94:	24014f34 	.word	0x24014f34
 8010e98:	24014f40 	.word	0x24014f40
 8010e9c:	24014f38 	.word	0x24014f38
 8010ea0:	24014f3c 	.word	0x24014f3c
 8010ea4:	4154494d 	.word	0x4154494d
 8010ea8:	08010ff1 	.word	0x08010ff1
 8010eac:	08012b80 	.word	0x08012b80
 8010eb0:	24014e84 	.word	0x24014e84
 8010eb4:	24014e78 	.word	0x24014e78
 8010eb8:	24014e7c 	.word	0x24014e7c

08010ebc <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8010ebc:	b480      	push	{r7}
 8010ebe:	b089      	sub	sp, #36	; 0x24
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8010eca:	697b      	ldr	r3, [r7, #20]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d04a      	beq.n	8010f66 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8010ed0:	697b      	ldr	r3, [r7, #20]
 8010ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ed6:	d046      	beq.n	8010f66 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	699b      	ldr	r3, [r3, #24]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d142      	bne.n	8010f66 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8010ee0:	697b      	ldr	r3, [r7, #20]
 8010ee2:	2b20      	cmp	r3, #32
 8010ee4:	d902      	bls.n	8010eec <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8010ee6:	231f      	movs	r3, #31
 8010ee8:	61bb      	str	r3, [r7, #24]
 8010eea:	e002      	b.n	8010ef2 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8010eec:	697b      	ldr	r3, [r7, #20]
 8010eee:	3b01      	subs	r3, #1
 8010ef0:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8010ef2:	4b20      	ldr	r3, [pc, #128]	; (8010f74 <_tx_timer_system_activate+0xb8>)
 8010ef4:	681a      	ldr	r2, [r3, #0]
 8010ef6:	69bb      	ldr	r3, [r7, #24]
 8010ef8:	009b      	lsls	r3, r3, #2
 8010efa:	4413      	add	r3, r2
 8010efc:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8010efe:	4b1e      	ldr	r3, [pc, #120]	; (8010f78 <_tx_timer_system_activate+0xbc>)
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	69fa      	ldr	r2, [r7, #28]
 8010f04:	429a      	cmp	r2, r3
 8010f06:	d30b      	bcc.n	8010f20 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8010f08:	4b1b      	ldr	r3, [pc, #108]	; (8010f78 <_tx_timer_system_activate+0xbc>)
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	69fa      	ldr	r2, [r7, #28]
 8010f0e:	1ad3      	subs	r3, r2, r3
 8010f10:	109b      	asrs	r3, r3, #2
 8010f12:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8010f14:	4b19      	ldr	r3, [pc, #100]	; (8010f7c <_tx_timer_system_activate+0xc0>)
 8010f16:	681a      	ldr	r2, [r3, #0]
 8010f18:	693b      	ldr	r3, [r7, #16]
 8010f1a:	009b      	lsls	r3, r3, #2
 8010f1c:	4413      	add	r3, r2
 8010f1e:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8010f20:	69fb      	ldr	r3, [r7, #28]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d109      	bne.n	8010f3c <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	687a      	ldr	r2, [r7, #4]
 8010f2c:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	687a      	ldr	r2, [r7, #4]
 8010f32:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8010f34:	69fb      	ldr	r3, [r7, #28]
 8010f36:	687a      	ldr	r2, [r7, #4]
 8010f38:	601a      	str	r2, [r3, #0]
 8010f3a:	e011      	b.n	8010f60 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8010f3c:	69fb      	ldr	r3, [r7, #28]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	695b      	ldr	r3, [r3, #20]
 8010f46:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	687a      	ldr	r2, [r7, #4]
 8010f4c:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	687a      	ldr	r2, [r7, #4]
 8010f52:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	68fa      	ldr	r2, [r7, #12]
 8010f58:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	68ba      	ldr	r2, [r7, #8]
 8010f5e:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	69fa      	ldr	r2, [r7, #28]
 8010f64:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8010f66:	bf00      	nop
 8010f68:	3724      	adds	r7, #36	; 0x24
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f70:	4770      	bx	lr
 8010f72:	bf00      	nop
 8010f74:	24014e70 	.word	0x24014e70
 8010f78:	24014e6c 	.word	0x24014e6c
 8010f7c:	24014e68 	.word	0x24014e68

08010f80 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8010f80:	b480      	push	{r7}
 8010f82:	b087      	sub	sp, #28
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	699b      	ldr	r3, [r3, #24]
 8010f8c:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8010f8e:	697b      	ldr	r3, [r7, #20]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d026      	beq.n	8010fe2 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	691b      	ldr	r3, [r3, #16]
 8010f98:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8010f9a:	687a      	ldr	r2, [r7, #4]
 8010f9c:	693b      	ldr	r3, [r7, #16]
 8010f9e:	429a      	cmp	r2, r3
 8010fa0:	d108      	bne.n	8010fb4 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8010fa2:	697b      	ldr	r3, [r7, #20]
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	687a      	ldr	r2, [r7, #4]
 8010fa8:	429a      	cmp	r2, r3
 8010faa:	d117      	bne.n	8010fdc <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8010fac:	697b      	ldr	r3, [r7, #20]
 8010fae:	2200      	movs	r2, #0
 8010fb0:	601a      	str	r2, [r3, #0]
 8010fb2:	e013      	b.n	8010fdc <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	695b      	ldr	r3, [r3, #20]
 8010fb8:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	68fa      	ldr	r2, [r7, #12]
 8010fbe:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	693a      	ldr	r2, [r7, #16]
 8010fc4:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8010fc6:	697b      	ldr	r3, [r7, #20]
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	687a      	ldr	r2, [r7, #4]
 8010fcc:	429a      	cmp	r2, r3
 8010fce:	d105      	bne.n	8010fdc <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8010fd0:	693b      	ldr	r3, [r7, #16]
 8010fd2:	697a      	ldr	r2, [r7, #20]
 8010fd4:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8010fd6:	697b      	ldr	r3, [r7, #20]
 8010fd8:	693a      	ldr	r2, [r7, #16]
 8010fda:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	2200      	movs	r2, #0
 8010fe0:	619a      	str	r2, [r3, #24]
    }
}
 8010fe2:	bf00      	nop
 8010fe4:	371c      	adds	r7, #28
 8010fe6:	46bd      	mov	sp, r7
 8010fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fec:	4770      	bx	lr
	...

08010ff0 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	b098      	sub	sp, #96	; 0x60
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	4a73      	ldr	r2, [pc, #460]	; (80111cc <_tx_timer_thread_entry+0x1dc>)
 8011000:	4293      	cmp	r3, r2
 8011002:	f040 80de 	bne.w	80111c2 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011006:	f3ef 8310 	mrs	r3, PRIMASK
 801100a:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 801100c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 801100e:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8011010:	b672      	cpsid	i
    return(int_posture);
 8011012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8011014:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8011016:	4b6e      	ldr	r3, [pc, #440]	; (80111d0 <_tx_timer_thread_entry+0x1e0>)
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	2b00      	cmp	r3, #0
 8011022:	d003      	beq.n	801102c <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	f107 020c 	add.w	r2, r7, #12
 801102a:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 801102c:	4b68      	ldr	r3, [pc, #416]	; (80111d0 <_tx_timer_thread_entry+0x1e0>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	2200      	movs	r2, #0
 8011032:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8011034:	4b66      	ldr	r3, [pc, #408]	; (80111d0 <_tx_timer_thread_entry+0x1e0>)
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	3304      	adds	r3, #4
 801103a:	4a65      	ldr	r2, [pc, #404]	; (80111d0 <_tx_timer_thread_entry+0x1e0>)
 801103c:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 801103e:	4b64      	ldr	r3, [pc, #400]	; (80111d0 <_tx_timer_thread_entry+0x1e0>)
 8011040:	681a      	ldr	r2, [r3, #0]
 8011042:	4b64      	ldr	r3, [pc, #400]	; (80111d4 <_tx_timer_thread_entry+0x1e4>)
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	429a      	cmp	r2, r3
 8011048:	d103      	bne.n	8011052 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 801104a:	4b63      	ldr	r3, [pc, #396]	; (80111d8 <_tx_timer_thread_entry+0x1e8>)
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	4a60      	ldr	r2, [pc, #384]	; (80111d0 <_tx_timer_thread_entry+0x1e0>)
 8011050:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8011052:	4b62      	ldr	r3, [pc, #392]	; (80111dc <_tx_timer_thread_entry+0x1ec>)
 8011054:	2200      	movs	r2, #0
 8011056:	601a      	str	r2, [r3, #0]
 8011058:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801105a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801105c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801105e:	f383 8810 	msr	PRIMASK, r3
}
 8011062:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011064:	f3ef 8310 	mrs	r3, PRIMASK
 8011068:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 801106a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 801106c:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 801106e:	b672      	cpsid	i
    return(int_posture);
 8011070:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8011072:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8011074:	e07f      	b.n	8011176 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	691b      	ldr	r3, [r3, #16]
 801107e:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8011080:	2300      	movs	r3, #0
 8011082:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8011084:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011088:	429a      	cmp	r2, r3
 801108a:	d102      	bne.n	8011092 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 801108c:	2300      	movs	r3, #0
 801108e:	60fb      	str	r3, [r7, #12]
 8011090:	e00e      	b.n	80110b0 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8011092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011094:	695b      	ldr	r3, [r3, #20]
 8011096:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8011098:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801109a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801109c:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 801109e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80110a2:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 80110a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110a6:	f107 020c 	add.w	r2, r7, #12
 80110aa:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 80110ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110ae:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 80110b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	2b20      	cmp	r3, #32
 80110b6:	d911      	bls.n	80110dc <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 80110b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 80110c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110c2:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 80110c4:	2300      	movs	r3, #0
 80110c6:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80110c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110ca:	f107 0208 	add.w	r2, r7, #8
 80110ce:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 80110d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80110d4:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 80110d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110d8:	60bb      	str	r3, [r7, #8]
 80110da:	e01a      	b.n	8011112 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 80110dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110de:	689b      	ldr	r3, [r3, #8]
 80110e0:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 80110e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110e4:	68db      	ldr	r3, [r3, #12]
 80110e6:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 80110e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110ea:	685a      	ldr	r2, [r3, #4]
 80110ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110ee:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 80110f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	d009      	beq.n	801110c <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80110f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110fa:	f107 0208 	add.w	r2, r7, #8
 80110fe:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8011100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011102:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011104:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8011106:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011108:	60bb      	str	r3, [r7, #8]
 801110a:	e002      	b.n	8011112 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 801110c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801110e:	2200      	movs	r2, #0
 8011110:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8011112:	4a33      	ldr	r2, [pc, #204]	; (80111e0 <_tx_timer_thread_entry+0x1f0>)
 8011114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011116:	6013      	str	r3, [r2, #0]
 8011118:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801111a:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801111c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801111e:	f383 8810 	msr	PRIMASK, r3
}
 8011122:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8011124:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011126:	2b00      	cmp	r3, #0
 8011128:	d002      	beq.n	8011130 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 801112a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801112c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801112e:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011130:	f3ef 8310 	mrs	r3, PRIMASK
 8011134:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 8011136:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 8011138:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 801113a:	b672      	cpsid	i
    return(int_posture);
 801113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 801113e:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8011140:	4b27      	ldr	r3, [pc, #156]	; (80111e0 <_tx_timer_thread_entry+0x1f0>)
 8011142:	2200      	movs	r2, #0
 8011144:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8011146:	68bb      	ldr	r3, [r7, #8]
 8011148:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801114a:	429a      	cmp	r2, r3
 801114c:	d105      	bne.n	801115a <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 801114e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011150:	2200      	movs	r2, #0
 8011152:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8011154:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8011156:	f7ff feb1 	bl	8010ebc <_tx_timer_system_activate>
 801115a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801115c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801115e:	69bb      	ldr	r3, [r7, #24]
 8011160:	f383 8810 	msr	PRIMASK, r3
}
 8011164:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011166:	f3ef 8310 	mrs	r3, PRIMASK
 801116a:	623b      	str	r3, [r7, #32]
    return(posture);
 801116c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801116e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8011170:	b672      	cpsid	i
    return(int_posture);
 8011172:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8011174:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	2b00      	cmp	r3, #0
 801117a:	f47f af7c 	bne.w	8011076 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 801117e:	4b17      	ldr	r3, [pc, #92]	; (80111dc <_tx_timer_thread_entry+0x1ec>)
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d116      	bne.n	80111b4 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8011186:	4b17      	ldr	r3, [pc, #92]	; (80111e4 <_tx_timer_thread_entry+0x1f4>)
 8011188:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 801118a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801118c:	2203      	movs	r2, #3
 801118e:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011192:	2201      	movs	r2, #1
 8011194:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8011196:	4b14      	ldr	r3, [pc, #80]	; (80111e8 <_tx_timer_thread_entry+0x1f8>)
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	3301      	adds	r3, #1
 801119c:	4a12      	ldr	r2, [pc, #72]	; (80111e8 <_tx_timer_thread_entry+0x1f8>)
 801119e:	6013      	str	r3, [r2, #0]
 80111a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80111a2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80111a4:	697b      	ldr	r3, [r7, #20]
 80111a6:	f383 8810 	msr	PRIMASK, r3
}
 80111aa:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80111ac:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80111ae:	f7ff fbbf 	bl	8010930 <_tx_thread_system_suspend>
 80111b2:	e728      	b.n	8011006 <_tx_timer_thread_entry+0x16>
 80111b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80111b6:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80111b8:	693b      	ldr	r3, [r7, #16]
 80111ba:	f383 8810 	msr	PRIMASK, r3
}
 80111be:	bf00      	nop
            TX_DISABLE
 80111c0:	e721      	b.n	8011006 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 80111c2:	bf00      	nop
 80111c4:	3760      	adds	r7, #96	; 0x60
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}
 80111ca:	bf00      	nop
 80111cc:	4154494d 	.word	0x4154494d
 80111d0:	24014e70 	.word	0x24014e70
 80111d4:	24014e6c 	.word	0x24014e6c
 80111d8:	24014e68 	.word	0x24014e68
 80111dc:	24014e74 	.word	0x24014e74
 80111e0:	24014e80 	.word	0x24014e80
 80111e4:	24014e84 	.word	0x24014e84
 80111e8:	24014dd4 	.word	0x24014dd4

080111ec <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b08a      	sub	sp, #40	; 0x28
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	60f8      	str	r0, [r7, #12]
 80111f4:	60b9      	str	r1, [r7, #8]
 80111f6:	607a      	str	r2, [r7, #4]
 80111f8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80111fa:	2300      	movs	r3, #0
 80111fc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	2b00      	cmp	r3, #0
 8011202:	d102      	bne.n	801120a <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8011204:	2302      	movs	r3, #2
 8011206:	627b      	str	r3, [r7, #36]	; 0x24
 8011208:	e029      	b.n	801125e <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	4a2d      	ldr	r2, [pc, #180]	; (80112c4 <_txe_byte_allocate+0xd8>)
 8011210:	4293      	cmp	r3, r2
 8011212:	d002      	beq.n	801121a <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8011214:	2302      	movs	r3, #2
 8011216:	627b      	str	r3, [r7, #36]	; 0x24
 8011218:	e021      	b.n	801125e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 801121a:	68bb      	ldr	r3, [r7, #8]
 801121c:	2b00      	cmp	r3, #0
 801121e:	d102      	bne.n	8011226 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8011220:	2303      	movs	r3, #3
 8011222:	627b      	str	r3, [r7, #36]	; 0x24
 8011224:	e01b      	b.n	801125e <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d102      	bne.n	8011232 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 801122c:	2305      	movs	r3, #5
 801122e:	627b      	str	r3, [r7, #36]	; 0x24
 8011230:	e015      	b.n	801125e <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	69db      	ldr	r3, [r3, #28]
 8011236:	687a      	ldr	r2, [r7, #4]
 8011238:	429a      	cmp	r2, r3
 801123a:	d902      	bls.n	8011242 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 801123c:	2305      	movs	r3, #5
 801123e:	627b      	str	r3, [r7, #36]	; 0x24
 8011240:	e00d      	b.n	801125e <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8011242:	683b      	ldr	r3, [r7, #0]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d00a      	beq.n	801125e <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011248:	f3ef 8305 	mrs	r3, IPSR
 801124c:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 801124e:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011250:	4b1d      	ldr	r3, [pc, #116]	; (80112c8 <_txe_byte_allocate+0xdc>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	4313      	orrs	r3, r2
 8011256:	2b00      	cmp	r3, #0
 8011258:	d001      	beq.n	801125e <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 801125a:	2304      	movs	r3, #4
 801125c:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 801125e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011260:	2b00      	cmp	r3, #0
 8011262:	d108      	bne.n	8011276 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8011264:	4b19      	ldr	r3, [pc, #100]	; (80112cc <_txe_byte_allocate+0xe0>)
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 801126a:	6a3b      	ldr	r3, [r7, #32]
 801126c:	4a18      	ldr	r2, [pc, #96]	; (80112d0 <_txe_byte_allocate+0xe4>)
 801126e:	4293      	cmp	r3, r2
 8011270:	d101      	bne.n	8011276 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8011272:	2313      	movs	r3, #19
 8011274:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8011276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011278:	2b00      	cmp	r3, #0
 801127a:	d114      	bne.n	80112a6 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801127c:	f3ef 8305 	mrs	r3, IPSR
 8011280:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8011282:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011284:	4b10      	ldr	r3, [pc, #64]	; (80112c8 <_txe_byte_allocate+0xdc>)
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	4313      	orrs	r3, r2
 801128a:	2b00      	cmp	r3, #0
 801128c:	d00b      	beq.n	80112a6 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801128e:	f3ef 8305 	mrs	r3, IPSR
 8011292:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011294:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8011296:	4b0c      	ldr	r3, [pc, #48]	; (80112c8 <_txe_byte_allocate+0xdc>)
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	4313      	orrs	r3, r2
 801129c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80112a0:	d201      	bcs.n	80112a6 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80112a2:	2313      	movs	r3, #19
 80112a4:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80112a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d106      	bne.n	80112ba <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 80112ac:	683b      	ldr	r3, [r7, #0]
 80112ae:	687a      	ldr	r2, [r7, #4]
 80112b0:	68b9      	ldr	r1, [r7, #8]
 80112b2:	68f8      	ldr	r0, [r7, #12]
 80112b4:	f7fd fb74 	bl	800e9a0 <_tx_byte_allocate>
 80112b8:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 80112ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80112bc:	4618      	mov	r0, r3
 80112be:	3728      	adds	r7, #40	; 0x28
 80112c0:	46bd      	mov	sp, r7
 80112c2:	bd80      	pop	{r7, pc}
 80112c4:	42595445 	.word	0x42595445
 80112c8:	24000070 	.word	0x24000070
 80112cc:	24014d3c 	.word	0x24014d3c
 80112d0:	24014e84 	.word	0x24014e84

080112d4 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b092      	sub	sp, #72	; 0x48
 80112d8:	af00      	add	r7, sp, #0
 80112da:	60f8      	str	r0, [r7, #12]
 80112dc:	60b9      	str	r1, [r7, #8]
 80112de:	607a      	str	r2, [r7, #4]
 80112e0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80112e2:	2300      	movs	r3, #0
 80112e4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d102      	bne.n	80112f2 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80112ec:	2302      	movs	r3, #2
 80112ee:	647b      	str	r3, [r7, #68]	; 0x44
 80112f0:	e075      	b.n	80113de <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 80112f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112f4:	2b34      	cmp	r3, #52	; 0x34
 80112f6:	d002      	beq.n	80112fe <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80112f8:	2302      	movs	r3, #2
 80112fa:	647b      	str	r3, [r7, #68]	; 0x44
 80112fc:	e06f      	b.n	80113de <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80112fe:	f3ef 8310 	mrs	r3, PRIMASK
 8011302:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8011304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8011306:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8011308:	b672      	cpsid	i
    return(int_posture);
 801130a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 801130c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801130e:	4b3b      	ldr	r3, [pc, #236]	; (80113fc <_txe_byte_pool_create+0x128>)
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	3301      	adds	r3, #1
 8011314:	4a39      	ldr	r2, [pc, #228]	; (80113fc <_txe_byte_pool_create+0x128>)
 8011316:	6013      	str	r3, [r2, #0]
 8011318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801131a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801131c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801131e:	f383 8810 	msr	PRIMASK, r3
}
 8011322:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8011324:	4b36      	ldr	r3, [pc, #216]	; (8011400 <_txe_byte_pool_create+0x12c>)
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 801132a:	2300      	movs	r3, #0
 801132c:	643b      	str	r3, [r7, #64]	; 0x40
 801132e:	e009      	b.n	8011344 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8011330:	68fa      	ldr	r2, [r7, #12]
 8011332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011334:	429a      	cmp	r2, r3
 8011336:	d00b      	beq.n	8011350 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8011338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801133a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801133c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 801133e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011340:	3301      	adds	r3, #1
 8011342:	643b      	str	r3, [r7, #64]	; 0x40
 8011344:	4b2f      	ldr	r3, [pc, #188]	; (8011404 <_txe_byte_pool_create+0x130>)
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801134a:	429a      	cmp	r2, r3
 801134c:	d3f0      	bcc.n	8011330 <_txe_byte_pool_create+0x5c>
 801134e:	e000      	b.n	8011352 <_txe_byte_pool_create+0x7e>
                break;
 8011350:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011352:	f3ef 8310 	mrs	r3, PRIMASK
 8011356:	623b      	str	r3, [r7, #32]
    return(posture);
 8011358:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801135a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801135c:	b672      	cpsid	i
    return(int_posture);
 801135e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8011360:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8011362:	4b26      	ldr	r3, [pc, #152]	; (80113fc <_txe_byte_pool_create+0x128>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	3b01      	subs	r3, #1
 8011368:	4a24      	ldr	r2, [pc, #144]	; (80113fc <_txe_byte_pool_create+0x128>)
 801136a:	6013      	str	r3, [r2, #0]
 801136c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801136e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011372:	f383 8810 	msr	PRIMASK, r3
}
 8011376:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8011378:	f7ff f9a0 	bl	80106bc <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 801137c:	68fa      	ldr	r2, [r7, #12]
 801137e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011380:	429a      	cmp	r2, r3
 8011382:	d102      	bne.n	801138a <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8011384:	2302      	movs	r3, #2
 8011386:	647b      	str	r3, [r7, #68]	; 0x44
 8011388:	e029      	b.n	80113de <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d102      	bne.n	8011396 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8011390:	2303      	movs	r3, #3
 8011392:	647b      	str	r3, [r7, #68]	; 0x44
 8011394:	e023      	b.n	80113de <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8011396:	683b      	ldr	r3, [r7, #0]
 8011398:	2b63      	cmp	r3, #99	; 0x63
 801139a:	d802      	bhi.n	80113a2 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 801139c:	2305      	movs	r3, #5
 801139e:	647b      	str	r3, [r7, #68]	; 0x44
 80113a0:	e01d      	b.n	80113de <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80113a2:	4b19      	ldr	r3, [pc, #100]	; (8011408 <_txe_byte_pool_create+0x134>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80113a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113aa:	4a18      	ldr	r2, [pc, #96]	; (801140c <_txe_byte_pool_create+0x138>)
 80113ac:	4293      	cmp	r3, r2
 80113ae:	d101      	bne.n	80113b4 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80113b0:	2313      	movs	r3, #19
 80113b2:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80113b4:	f3ef 8305 	mrs	r3, IPSR
 80113b8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80113ba:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80113bc:	4b14      	ldr	r3, [pc, #80]	; (8011410 <_txe_byte_pool_create+0x13c>)
 80113be:	681b      	ldr	r3, [r3, #0]
 80113c0:	4313      	orrs	r3, r2
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d00b      	beq.n	80113de <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80113c6:	f3ef 8305 	mrs	r3, IPSR
 80113ca:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80113cc:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80113ce:	4b10      	ldr	r3, [pc, #64]	; (8011410 <_txe_byte_pool_create+0x13c>)
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	4313      	orrs	r3, r2
 80113d4:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 80113d8:	d201      	bcs.n	80113de <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80113da:	2313      	movs	r3, #19
 80113dc:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80113de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d106      	bne.n	80113f2 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 80113e4:	683b      	ldr	r3, [r7, #0]
 80113e6:	687a      	ldr	r2, [r7, #4]
 80113e8:	68b9      	ldr	r1, [r7, #8]
 80113ea:	68f8      	ldr	r0, [r7, #12]
 80113ec:	f7fd fc1a 	bl	800ec24 <_tx_byte_pool_create>
 80113f0:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 80113f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80113f4:	4618      	mov	r0, r3
 80113f6:	3748      	adds	r7, #72	; 0x48
 80113f8:	46bd      	mov	sp, r7
 80113fa:	bd80      	pop	{r7, pc}
 80113fc:	24014dd4 	.word	0x24014dd4
 8011400:	24014d2c 	.word	0x24014d2c
 8011404:	24014d30 	.word	0x24014d30
 8011408:	24014d3c 	.word	0x24014d3c
 801140c:	24014e84 	.word	0x24014e84
 8011410:	24000070 	.word	0x24000070

08011414 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8011414:	b580      	push	{r7, lr}
 8011416:	b092      	sub	sp, #72	; 0x48
 8011418:	af00      	add	r7, sp, #0
 801141a:	60f8      	str	r0, [r7, #12]
 801141c:	60b9      	str	r1, [r7, #8]
 801141e:	607a      	str	r2, [r7, #4]
 8011420:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011422:	2300      	movs	r3, #0
 8011424:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d102      	bne.n	8011432 <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801142c:	230c      	movs	r3, #12
 801142e:	647b      	str	r3, [r7, #68]	; 0x44
 8011430:	e054      	b.n	80114dc <_txe_semaphore_create+0xc8>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 8011432:	683b      	ldr	r3, [r7, #0]
 8011434:	2b1c      	cmp	r3, #28
 8011436:	d002      	beq.n	801143e <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8011438:	230c      	movs	r3, #12
 801143a:	647b      	str	r3, [r7, #68]	; 0x44
 801143c:	e04e      	b.n	80114dc <_txe_semaphore_create+0xc8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 801143e:	f3ef 8310 	mrs	r3, PRIMASK
 8011442:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 8011444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 8011446:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8011448:	b672      	cpsid	i
    return(int_posture);
 801144a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 801144c:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801144e:	4b36      	ldr	r3, [pc, #216]	; (8011528 <_txe_semaphore_create+0x114>)
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	3301      	adds	r3, #1
 8011454:	4a34      	ldr	r2, [pc, #208]	; (8011528 <_txe_semaphore_create+0x114>)
 8011456:	6013      	str	r3, [r2, #0]
 8011458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801145a:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 801145c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801145e:	f383 8810 	msr	PRIMASK, r3
}
 8011462:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 8011464:	4b31      	ldr	r3, [pc, #196]	; (801152c <_txe_semaphore_create+0x118>)
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 801146a:	2300      	movs	r3, #0
 801146c:	643b      	str	r3, [r7, #64]	; 0x40
 801146e:	e009      	b.n	8011484 <_txe_semaphore_create+0x70>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 8011470:	68fa      	ldr	r2, [r7, #12]
 8011472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011474:	429a      	cmp	r2, r3
 8011476:	d00b      	beq.n	8011490 <_txe_semaphore_create+0x7c>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 8011478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801147a:	695b      	ldr	r3, [r3, #20]
 801147c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 801147e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011480:	3301      	adds	r3, #1
 8011482:	643b      	str	r3, [r7, #64]	; 0x40
 8011484:	4b2a      	ldr	r3, [pc, #168]	; (8011530 <_txe_semaphore_create+0x11c>)
 8011486:	681b      	ldr	r3, [r3, #0]
 8011488:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801148a:	429a      	cmp	r2, r3
 801148c:	d3f0      	bcc.n	8011470 <_txe_semaphore_create+0x5c>
 801148e:	e000      	b.n	8011492 <_txe_semaphore_create+0x7e>
                break;
 8011490:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011492:	f3ef 8310 	mrs	r3, PRIMASK
 8011496:	623b      	str	r3, [r7, #32]
    return(posture);
 8011498:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 801149a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 801149c:	b672      	cpsid	i
    return(int_posture);
 801149e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80114a0:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80114a2:	4b21      	ldr	r3, [pc, #132]	; (8011528 <_txe_semaphore_create+0x114>)
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	3b01      	subs	r3, #1
 80114a8:	4a1f      	ldr	r2, [pc, #124]	; (8011528 <_txe_semaphore_create+0x114>)
 80114aa:	6013      	str	r3, [r2, #0]
 80114ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ae:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80114b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114b2:	f383 8810 	msr	PRIMASK, r3
}
 80114b6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80114b8:	f7ff f900 	bl	80106bc <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 80114bc:	68fa      	ldr	r2, [r7, #12]
 80114be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114c0:	429a      	cmp	r2, r3
 80114c2:	d102      	bne.n	80114ca <_txe_semaphore_create+0xb6>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 80114c4:	230c      	movs	r3, #12
 80114c6:	647b      	str	r3, [r7, #68]	; 0x44
 80114c8:	e008      	b.n	80114dc <_txe_semaphore_create+0xc8>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80114ca:	4b1a      	ldr	r3, [pc, #104]	; (8011534 <_txe_semaphore_create+0x120>)
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80114d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114d2:	4a19      	ldr	r2, [pc, #100]	; (8011538 <_txe_semaphore_create+0x124>)
 80114d4:	4293      	cmp	r3, r2
 80114d6:	d101      	bne.n	80114dc <_txe_semaphore_create+0xc8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80114d8:	2313      	movs	r3, #19
 80114da:	647b      	str	r3, [r7, #68]	; 0x44
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80114dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d114      	bne.n	801150c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80114e2:	f3ef 8305 	mrs	r3, IPSR
 80114e6:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80114e8:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80114ea:	4b14      	ldr	r3, [pc, #80]	; (801153c <_txe_semaphore_create+0x128>)
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	4313      	orrs	r3, r2
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d00b      	beq.n	801150c <_txe_semaphore_create+0xf8>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80114f4:	f3ef 8305 	mrs	r3, IPSR
 80114f8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80114fa:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80114fc:	4b0f      	ldr	r3, [pc, #60]	; (801153c <_txe_semaphore_create+0x128>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	4313      	orrs	r3, r2
 8011502:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 8011506:	d201      	bcs.n	801150c <_txe_semaphore_create+0xf8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8011508:	2313      	movs	r3, #19
 801150a:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801150c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801150e:	2b00      	cmp	r3, #0
 8011510:	d105      	bne.n	801151e <_txe_semaphore_create+0x10a>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 8011512:	687a      	ldr	r2, [r7, #4]
 8011514:	68b9      	ldr	r1, [r7, #8]
 8011516:	68f8      	ldr	r0, [r7, #12]
 8011518:	f7fe fc74 	bl	800fe04 <_tx_semaphore_create>
 801151c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 801151e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8011520:	4618      	mov	r0, r3
 8011522:	3748      	adds	r7, #72	; 0x48
 8011524:	46bd      	mov	sp, r7
 8011526:	bd80      	pop	{r7, pc}
 8011528:	24014dd4 	.word	0x24014dd4
 801152c:	24014d04 	.word	0x24014d04
 8011530:	24014d08 	.word	0x24014d08
 8011534:	24014d3c 	.word	0x24014d3c
 8011538:	24014e84 	.word	0x24014e84
 801153c:	24000070 	.word	0x24000070

08011540 <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b086      	sub	sp, #24
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8011548:	2300      	movs	r3, #0
 801154a:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d102      	bne.n	8011558 <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8011552:	230c      	movs	r3, #12
 8011554:	617b      	str	r3, [r7, #20]
 8011556:	e01c      	b.n	8011592 <_txe_semaphore_delete+0x52>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	4a13      	ldr	r2, [pc, #76]	; (80115ac <_txe_semaphore_delete+0x6c>)
 801155e:	4293      	cmp	r3, r2
 8011560:	d002      	beq.n	8011568 <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8011562:	230c      	movs	r3, #12
 8011564:	617b      	str	r3, [r7, #20]
 8011566:	e014      	b.n	8011592 <_txe_semaphore_delete+0x52>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011568:	f3ef 8305 	mrs	r3, IPSR
 801156c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 801156e:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011570:	4b0f      	ldr	r3, [pc, #60]	; (80115b0 <_txe_semaphore_delete+0x70>)
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	4313      	orrs	r3, r2
 8011576:	2b00      	cmp	r3, #0
 8011578:	d002      	beq.n	8011580 <_txe_semaphore_delete+0x40>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 801157a:	2313      	movs	r3, #19
 801157c:	617b      	str	r3, [r7, #20]
 801157e:	e008      	b.n	8011592 <_txe_semaphore_delete+0x52>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8011580:	4b0c      	ldr	r3, [pc, #48]	; (80115b4 <_txe_semaphore_delete+0x74>)
 8011582:	681b      	ldr	r3, [r3, #0]
 8011584:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 8011586:	693b      	ldr	r3, [r7, #16]
 8011588:	4a0b      	ldr	r2, [pc, #44]	; (80115b8 <_txe_semaphore_delete+0x78>)
 801158a:	4293      	cmp	r3, r2
 801158c:	d101      	bne.n	8011592 <_txe_semaphore_delete+0x52>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801158e:	2313      	movs	r3, #19
 8011590:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011592:	697b      	ldr	r3, [r7, #20]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d103      	bne.n	80115a0 <_txe_semaphore_delete+0x60>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 8011598:	6878      	ldr	r0, [r7, #4]
 801159a:	f7fe fc85 	bl	800fea8 <_tx_semaphore_delete>
 801159e:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 80115a0:	697b      	ldr	r3, [r7, #20]
}
 80115a2:	4618      	mov	r0, r3
 80115a4:	3718      	adds	r7, #24
 80115a6:	46bd      	mov	sp, r7
 80115a8:	bd80      	pop	{r7, pc}
 80115aa:	bf00      	nop
 80115ac:	53454d41 	.word	0x53454d41
 80115b0:	24000070 	.word	0x24000070
 80115b4:	24014d3c 	.word	0x24014d3c
 80115b8:	24014e84 	.word	0x24014e84

080115bc <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b086      	sub	sp, #24
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
 80115c4:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80115c6:	2300      	movs	r3, #0
 80115c8:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d102      	bne.n	80115d6 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80115d0:	230c      	movs	r3, #12
 80115d2:	617b      	str	r3, [r7, #20]
 80115d4:	e01f      	b.n	8011616 <_txe_semaphore_get+0x5a>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	4a15      	ldr	r2, [pc, #84]	; (8011630 <_txe_semaphore_get+0x74>)
 80115dc:	4293      	cmp	r3, r2
 80115de:	d002      	beq.n	80115e6 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80115e0:	230c      	movs	r3, #12
 80115e2:	617b      	str	r3, [r7, #20]
 80115e4:	e017      	b.n	8011616 <_txe_semaphore_get+0x5a>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80115e6:	683b      	ldr	r3, [r7, #0]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d014      	beq.n	8011616 <_txe_semaphore_get+0x5a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80115ec:	f3ef 8305 	mrs	r3, IPSR
 80115f0:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80115f2:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80115f4:	4b0f      	ldr	r3, [pc, #60]	; (8011634 <_txe_semaphore_get+0x78>)
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	4313      	orrs	r3, r2
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d002      	beq.n	8011604 <_txe_semaphore_get+0x48>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80115fe:	2304      	movs	r3, #4
 8011600:	617b      	str	r3, [r7, #20]
 8011602:	e008      	b.n	8011616 <_txe_semaphore_get+0x5a>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8011604:	4b0c      	ldr	r3, [pc, #48]	; (8011638 <_txe_semaphore_get+0x7c>)
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 801160a:	693b      	ldr	r3, [r7, #16]
 801160c:	4a0b      	ldr	r2, [pc, #44]	; (801163c <_txe_semaphore_get+0x80>)
 801160e:	4293      	cmp	r3, r2
 8011610:	d101      	bne.n	8011616 <_txe_semaphore_get+0x5a>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8011612:	2304      	movs	r3, #4
 8011614:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011616:	697b      	ldr	r3, [r7, #20]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d104      	bne.n	8011626 <_txe_semaphore_get+0x6a>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 801161c:	6839      	ldr	r1, [r7, #0]
 801161e:	6878      	ldr	r0, [r7, #4]
 8011620:	f7fe fcd2 	bl	800ffc8 <_tx_semaphore_get>
 8011624:	6178      	str	r0, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8011626:	697b      	ldr	r3, [r7, #20]
}
 8011628:	4618      	mov	r0, r3
 801162a:	3718      	adds	r7, #24
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}
 8011630:	53454d41 	.word	0x53454d41
 8011634:	24000070 	.word	0x24000070
 8011638:	24014d3c 	.word	0x24014d3c
 801163c:	24014e84 	.word	0x24014e84

08011640 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8011640:	b580      	push	{r7, lr}
 8011642:	b084      	sub	sp, #16
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d102      	bne.n	8011654 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801164e:	230c      	movs	r3, #12
 8011650:	60fb      	str	r3, [r7, #12]
 8011652:	e00b      	b.n	801166c <_txe_semaphore_put+0x2c>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	4a07      	ldr	r2, [pc, #28]	; (8011678 <_txe_semaphore_put+0x38>)
 801165a:	4293      	cmp	r3, r2
 801165c:	d002      	beq.n	8011664 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801165e:	230c      	movs	r3, #12
 8011660:	60fb      	str	r3, [r7, #12]
 8011662:	e003      	b.n	801166c <_txe_semaphore_put+0x2c>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 8011664:	6878      	ldr	r0, [r7, #4]
 8011666:	f7fe fd41 	bl	80100ec <_tx_semaphore_put>
 801166a:	60f8      	str	r0, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 801166c:	68fb      	ldr	r3, [r7, #12]
}
 801166e:	4618      	mov	r0, r3
 8011670:	3710      	adds	r7, #16
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}
 8011676:	bf00      	nop
 8011678:	53454d41 	.word	0x53454d41

0801167c <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 801167c:	b580      	push	{r7, lr}
 801167e:	b09a      	sub	sp, #104	; 0x68
 8011680:	af06      	add	r7, sp, #24
 8011682:	60f8      	str	r0, [r7, #12]
 8011684:	60b9      	str	r1, [r7, #8]
 8011686:	607a      	str	r2, [r7, #4]
 8011688:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801168a:	2300      	movs	r3, #0
 801168c:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	2b00      	cmp	r3, #0
 8011692:	d102      	bne.n	801169a <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8011694:	230e      	movs	r3, #14
 8011696:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011698:	e0bb      	b.n	8011812 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 801169a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801169c:	2bb0      	cmp	r3, #176	; 0xb0
 801169e:	d002      	beq.n	80116a6 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80116a0:	230e      	movs	r3, #14
 80116a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80116a4:	e0b5      	b.n	8011812 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80116a6:	f3ef 8310 	mrs	r3, PRIMASK
 80116aa:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 80116ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 80116ae:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80116b0:	b672      	cpsid	i
    return(int_posture);
 80116b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80116b4:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80116b6:	4b64      	ldr	r3, [pc, #400]	; (8011848 <_txe_thread_create+0x1cc>)
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	3301      	adds	r3, #1
 80116bc:	4a62      	ldr	r2, [pc, #392]	; (8011848 <_txe_thread_create+0x1cc>)
 80116be:	6013      	str	r3, [r2, #0]
 80116c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80116c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116c6:	f383 8810 	msr	PRIMASK, r3
}
 80116ca:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 80116cc:	2300      	movs	r3, #0
 80116ce:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 80116d0:	4b5e      	ldr	r3, [pc, #376]	; (801184c <_txe_thread_create+0x1d0>)
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80116d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80116d8:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 80116da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80116dc:	3b01      	subs	r3, #1
 80116de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80116e0:	4413      	add	r3, r2
 80116e2:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 80116e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116e6:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80116e8:	2300      	movs	r3, #0
 80116ea:	647b      	str	r3, [r7, #68]	; 0x44
 80116ec:	e02b      	b.n	8011746 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 80116ee:	68fa      	ldr	r2, [r7, #12]
 80116f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116f2:	429a      	cmp	r2, r3
 80116f4:	d101      	bne.n	80116fa <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 80116f6:	2301      	movs	r3, #1
 80116f8:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 80116fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80116fc:	2b01      	cmp	r3, #1
 80116fe:	d028      	beq.n	8011752 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8011700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011702:	68db      	ldr	r3, [r3, #12]
 8011704:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011706:	429a      	cmp	r2, r3
 8011708:	d308      	bcc.n	801171c <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 801170a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801170c:	691b      	ldr	r3, [r3, #16]
 801170e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011710:	429a      	cmp	r2, r3
 8011712:	d203      	bcs.n	801171c <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8011714:	2300      	movs	r3, #0
 8011716:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8011718:	2301      	movs	r3, #1
 801171a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 801171c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801171e:	68db      	ldr	r3, [r3, #12]
 8011720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011722:	429a      	cmp	r2, r3
 8011724:	d308      	bcc.n	8011738 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8011726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011728:	691b      	ldr	r3, [r3, #16]
 801172a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801172c:	429a      	cmp	r2, r3
 801172e:	d203      	bcs.n	8011738 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8011730:	2300      	movs	r3, #0
 8011732:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8011734:	2301      	movs	r3, #1
 8011736:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8011738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801173a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801173e:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8011740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011742:	3301      	adds	r3, #1
 8011744:	647b      	str	r3, [r7, #68]	; 0x44
 8011746:	4b42      	ldr	r3, [pc, #264]	; (8011850 <_txe_thread_create+0x1d4>)
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801174c:	429a      	cmp	r2, r3
 801174e:	d3ce      	bcc.n	80116ee <_txe_thread_create+0x72>
 8011750:	e000      	b.n	8011754 <_txe_thread_create+0xd8>
                break;
 8011752:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8011754:	f3ef 8310 	mrs	r3, PRIMASK
 8011758:	61fb      	str	r3, [r7, #28]
    return(posture);
 801175a:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 801175c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 801175e:	b672      	cpsid	i
    return(int_posture);
 8011760:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8011762:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8011764:	4b38      	ldr	r3, [pc, #224]	; (8011848 <_txe_thread_create+0x1cc>)
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	3b01      	subs	r3, #1
 801176a:	4a37      	ldr	r2, [pc, #220]	; (8011848 <_txe_thread_create+0x1cc>)
 801176c:	6013      	str	r3, [r2, #0]
 801176e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011770:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8011772:	6a3b      	ldr	r3, [r7, #32]
 8011774:	f383 8810 	msr	PRIMASK, r3
}
 8011778:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801177a:	f7fe ff9f 	bl	80106bc <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 801177e:	68fa      	ldr	r2, [r7, #12]
 8011780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011782:	429a      	cmp	r2, r3
 8011784:	d102      	bne.n	801178c <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8011786:	230e      	movs	r3, #14
 8011788:	64fb      	str	r3, [r7, #76]	; 0x4c
 801178a:	e042      	b.n	8011812 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 801178c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801178e:	2b00      	cmp	r3, #0
 8011790:	d102      	bne.n	8011798 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8011792:	2303      	movs	r3, #3
 8011794:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011796:	e03c      	b.n	8011812 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d102      	bne.n	80117a4 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 801179e:	2303      	movs	r3, #3
 80117a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80117a2:	e036      	b.n	8011812 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 80117a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80117a6:	2bc7      	cmp	r3, #199	; 0xc7
 80117a8:	d802      	bhi.n	80117b0 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 80117aa:	2305      	movs	r3, #5
 80117ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80117ae:	e030      	b.n	8011812 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 80117b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80117b2:	2b1f      	cmp	r3, #31
 80117b4:	d902      	bls.n	80117bc <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 80117b6:	230f      	movs	r3, #15
 80117b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80117ba:	e02a      	b.n	8011812 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 80117bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80117be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80117c0:	429a      	cmp	r2, r3
 80117c2:	d902      	bls.n	80117ca <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 80117c4:	2318      	movs	r3, #24
 80117c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80117c8:	e023      	b.n	8011812 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 80117ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80117cc:	2b01      	cmp	r3, #1
 80117ce:	d902      	bls.n	80117d6 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 80117d0:	2310      	movs	r3, #16
 80117d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80117d4:	e01d      	b.n	8011812 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 80117d6:	4b1f      	ldr	r3, [pc, #124]	; (8011854 <_txe_thread_create+0x1d8>)
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 80117dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117de:	4a1e      	ldr	r2, [pc, #120]	; (8011858 <_txe_thread_create+0x1dc>)
 80117e0:	4293      	cmp	r3, r2
 80117e2:	d101      	bne.n	80117e8 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80117e4:	2313      	movs	r3, #19
 80117e6:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80117e8:	f3ef 8305 	mrs	r3, IPSR
 80117ec:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80117ee:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80117f0:	4b1a      	ldr	r3, [pc, #104]	; (801185c <_txe_thread_create+0x1e0>)
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	4313      	orrs	r3, r2
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d00b      	beq.n	8011812 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80117fa:	f3ef 8305 	mrs	r3, IPSR
 80117fe:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8011800:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8011802:	4b16      	ldr	r3, [pc, #88]	; (801185c <_txe_thread_create+0x1e0>)
 8011804:	681b      	ldr	r3, [r3, #0]
 8011806:	4313      	orrs	r3, r2
 8011808:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 801180c:	d201      	bcs.n	8011812 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 801180e:	2313      	movs	r3, #19
 8011810:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8011812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011814:	2b00      	cmp	r3, #0
 8011816:	d112      	bne.n	801183e <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8011818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801181a:	9305      	str	r3, [sp, #20]
 801181c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801181e:	9304      	str	r3, [sp, #16]
 8011820:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011822:	9303      	str	r3, [sp, #12]
 8011824:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011826:	9302      	str	r3, [sp, #8]
 8011828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801182a:	9301      	str	r3, [sp, #4]
 801182c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801182e:	9300      	str	r3, [sp, #0]
 8011830:	683b      	ldr	r3, [r7, #0]
 8011832:	687a      	ldr	r2, [r7, #4]
 8011834:	68b9      	ldr	r1, [r7, #8]
 8011836:	68f8      	ldr	r0, [r7, #12]
 8011838:	f7fe fcb0 	bl	801019c <_tx_thread_create>
 801183c:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 801183e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8011840:	4618      	mov	r0, r3
 8011842:	3750      	adds	r7, #80	; 0x50
 8011844:	46bd      	mov	sp, r7
 8011846:	bd80      	pop	{r7, pc}
 8011848:	24014dd4 	.word	0x24014dd4
 801184c:	24014d44 	.word	0x24014d44
 8011850:	24014d48 	.word	0x24014d48
 8011854:	24014d3c 	.word	0x24014d3c
 8011858:	24014e84 	.word	0x24014e84
 801185c:	24000070 	.word	0x24000070

08011860 <__assert_func>:
 8011860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011862:	4614      	mov	r4, r2
 8011864:	461a      	mov	r2, r3
 8011866:	4b09      	ldr	r3, [pc, #36]	; (801188c <__assert_func+0x2c>)
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	4605      	mov	r5, r0
 801186c:	68d8      	ldr	r0, [r3, #12]
 801186e:	b14c      	cbz	r4, 8011884 <__assert_func+0x24>
 8011870:	4b07      	ldr	r3, [pc, #28]	; (8011890 <__assert_func+0x30>)
 8011872:	9100      	str	r1, [sp, #0]
 8011874:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011878:	4906      	ldr	r1, [pc, #24]	; (8011894 <__assert_func+0x34>)
 801187a:	462b      	mov	r3, r5
 801187c:	f000 f814 	bl	80118a8 <fiprintf>
 8011880:	f000 fc9a 	bl	80121b8 <abort>
 8011884:	4b04      	ldr	r3, [pc, #16]	; (8011898 <__assert_func+0x38>)
 8011886:	461c      	mov	r4, r3
 8011888:	e7f3      	b.n	8011872 <__assert_func+0x12>
 801188a:	bf00      	nop
 801188c:	24000074 	.word	0x24000074
 8011890:	08012be8 	.word	0x08012be8
 8011894:	08012bf5 	.word	0x08012bf5
 8011898:	08012c23 	.word	0x08012c23

0801189c <__errno>:
 801189c:	4b01      	ldr	r3, [pc, #4]	; (80118a4 <__errno+0x8>)
 801189e:	6818      	ldr	r0, [r3, #0]
 80118a0:	4770      	bx	lr
 80118a2:	bf00      	nop
 80118a4:	24000074 	.word	0x24000074

080118a8 <fiprintf>:
 80118a8:	b40e      	push	{r1, r2, r3}
 80118aa:	b503      	push	{r0, r1, lr}
 80118ac:	4601      	mov	r1, r0
 80118ae:	ab03      	add	r3, sp, #12
 80118b0:	4805      	ldr	r0, [pc, #20]	; (80118c8 <fiprintf+0x20>)
 80118b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80118b6:	6800      	ldr	r0, [r0, #0]
 80118b8:	9301      	str	r3, [sp, #4]
 80118ba:	f000 f86b 	bl	8011994 <_vfiprintf_r>
 80118be:	b002      	add	sp, #8
 80118c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80118c4:	b003      	add	sp, #12
 80118c6:	4770      	bx	lr
 80118c8:	24000074 	.word	0x24000074

080118cc <__libc_init_array>:
 80118cc:	b570      	push	{r4, r5, r6, lr}
 80118ce:	4d0d      	ldr	r5, [pc, #52]	; (8011904 <__libc_init_array+0x38>)
 80118d0:	4c0d      	ldr	r4, [pc, #52]	; (8011908 <__libc_init_array+0x3c>)
 80118d2:	1b64      	subs	r4, r4, r5
 80118d4:	10a4      	asrs	r4, r4, #2
 80118d6:	2600      	movs	r6, #0
 80118d8:	42a6      	cmp	r6, r4
 80118da:	d109      	bne.n	80118f0 <__libc_init_array+0x24>
 80118dc:	4d0b      	ldr	r5, [pc, #44]	; (801190c <__libc_init_array+0x40>)
 80118de:	4c0c      	ldr	r4, [pc, #48]	; (8011910 <__libc_init_array+0x44>)
 80118e0:	f001 f87e 	bl	80129e0 <_init>
 80118e4:	1b64      	subs	r4, r4, r5
 80118e6:	10a4      	asrs	r4, r4, #2
 80118e8:	2600      	movs	r6, #0
 80118ea:	42a6      	cmp	r6, r4
 80118ec:	d105      	bne.n	80118fa <__libc_init_array+0x2e>
 80118ee:	bd70      	pop	{r4, r5, r6, pc}
 80118f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80118f4:	4798      	blx	r3
 80118f6:	3601      	adds	r6, #1
 80118f8:	e7ee      	b.n	80118d8 <__libc_init_array+0xc>
 80118fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80118fe:	4798      	blx	r3
 8011900:	3601      	adds	r6, #1
 8011902:	e7f2      	b.n	80118ea <__libc_init_array+0x1e>
 8011904:	08012cc4 	.word	0x08012cc4
 8011908:	08012cc4 	.word	0x08012cc4
 801190c:	08012cc4 	.word	0x08012cc4
 8011910:	08012cc8 	.word	0x08012cc8

08011914 <memcpy>:
 8011914:	440a      	add	r2, r1
 8011916:	4291      	cmp	r1, r2
 8011918:	f100 33ff 	add.w	r3, r0, #4294967295
 801191c:	d100      	bne.n	8011920 <memcpy+0xc>
 801191e:	4770      	bx	lr
 8011920:	b510      	push	{r4, lr}
 8011922:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011926:	f803 4f01 	strb.w	r4, [r3, #1]!
 801192a:	4291      	cmp	r1, r2
 801192c:	d1f9      	bne.n	8011922 <memcpy+0xe>
 801192e:	bd10      	pop	{r4, pc}

08011930 <memset>:
 8011930:	4402      	add	r2, r0
 8011932:	4603      	mov	r3, r0
 8011934:	4293      	cmp	r3, r2
 8011936:	d100      	bne.n	801193a <memset+0xa>
 8011938:	4770      	bx	lr
 801193a:	f803 1b01 	strb.w	r1, [r3], #1
 801193e:	e7f9      	b.n	8011934 <memset+0x4>

08011940 <__sfputc_r>:
 8011940:	6893      	ldr	r3, [r2, #8]
 8011942:	3b01      	subs	r3, #1
 8011944:	2b00      	cmp	r3, #0
 8011946:	b410      	push	{r4}
 8011948:	6093      	str	r3, [r2, #8]
 801194a:	da08      	bge.n	801195e <__sfputc_r+0x1e>
 801194c:	6994      	ldr	r4, [r2, #24]
 801194e:	42a3      	cmp	r3, r4
 8011950:	db01      	blt.n	8011956 <__sfputc_r+0x16>
 8011952:	290a      	cmp	r1, #10
 8011954:	d103      	bne.n	801195e <__sfputc_r+0x1e>
 8011956:	f85d 4b04 	ldr.w	r4, [sp], #4
 801195a:	f000 bb6d 	b.w	8012038 <__swbuf_r>
 801195e:	6813      	ldr	r3, [r2, #0]
 8011960:	1c58      	adds	r0, r3, #1
 8011962:	6010      	str	r0, [r2, #0]
 8011964:	7019      	strb	r1, [r3, #0]
 8011966:	4608      	mov	r0, r1
 8011968:	f85d 4b04 	ldr.w	r4, [sp], #4
 801196c:	4770      	bx	lr

0801196e <__sfputs_r>:
 801196e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011970:	4606      	mov	r6, r0
 8011972:	460f      	mov	r7, r1
 8011974:	4614      	mov	r4, r2
 8011976:	18d5      	adds	r5, r2, r3
 8011978:	42ac      	cmp	r4, r5
 801197a:	d101      	bne.n	8011980 <__sfputs_r+0x12>
 801197c:	2000      	movs	r0, #0
 801197e:	e007      	b.n	8011990 <__sfputs_r+0x22>
 8011980:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011984:	463a      	mov	r2, r7
 8011986:	4630      	mov	r0, r6
 8011988:	f7ff ffda 	bl	8011940 <__sfputc_r>
 801198c:	1c43      	adds	r3, r0, #1
 801198e:	d1f3      	bne.n	8011978 <__sfputs_r+0xa>
 8011990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011994 <_vfiprintf_r>:
 8011994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011998:	460d      	mov	r5, r1
 801199a:	b09d      	sub	sp, #116	; 0x74
 801199c:	4614      	mov	r4, r2
 801199e:	4698      	mov	r8, r3
 80119a0:	4606      	mov	r6, r0
 80119a2:	b118      	cbz	r0, 80119ac <_vfiprintf_r+0x18>
 80119a4:	6983      	ldr	r3, [r0, #24]
 80119a6:	b90b      	cbnz	r3, 80119ac <_vfiprintf_r+0x18>
 80119a8:	f000 fd28 	bl	80123fc <__sinit>
 80119ac:	4b89      	ldr	r3, [pc, #548]	; (8011bd4 <_vfiprintf_r+0x240>)
 80119ae:	429d      	cmp	r5, r3
 80119b0:	d11b      	bne.n	80119ea <_vfiprintf_r+0x56>
 80119b2:	6875      	ldr	r5, [r6, #4]
 80119b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80119b6:	07d9      	lsls	r1, r3, #31
 80119b8:	d405      	bmi.n	80119c6 <_vfiprintf_r+0x32>
 80119ba:	89ab      	ldrh	r3, [r5, #12]
 80119bc:	059a      	lsls	r2, r3, #22
 80119be:	d402      	bmi.n	80119c6 <_vfiprintf_r+0x32>
 80119c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80119c2:	f000 fdb9 	bl	8012538 <__retarget_lock_acquire_recursive>
 80119c6:	89ab      	ldrh	r3, [r5, #12]
 80119c8:	071b      	lsls	r3, r3, #28
 80119ca:	d501      	bpl.n	80119d0 <_vfiprintf_r+0x3c>
 80119cc:	692b      	ldr	r3, [r5, #16]
 80119ce:	b9eb      	cbnz	r3, 8011a0c <_vfiprintf_r+0x78>
 80119d0:	4629      	mov	r1, r5
 80119d2:	4630      	mov	r0, r6
 80119d4:	f000 fb82 	bl	80120dc <__swsetup_r>
 80119d8:	b1c0      	cbz	r0, 8011a0c <_vfiprintf_r+0x78>
 80119da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80119dc:	07dc      	lsls	r4, r3, #31
 80119de:	d50e      	bpl.n	80119fe <_vfiprintf_r+0x6a>
 80119e0:	f04f 30ff 	mov.w	r0, #4294967295
 80119e4:	b01d      	add	sp, #116	; 0x74
 80119e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119ea:	4b7b      	ldr	r3, [pc, #492]	; (8011bd8 <_vfiprintf_r+0x244>)
 80119ec:	429d      	cmp	r5, r3
 80119ee:	d101      	bne.n	80119f4 <_vfiprintf_r+0x60>
 80119f0:	68b5      	ldr	r5, [r6, #8]
 80119f2:	e7df      	b.n	80119b4 <_vfiprintf_r+0x20>
 80119f4:	4b79      	ldr	r3, [pc, #484]	; (8011bdc <_vfiprintf_r+0x248>)
 80119f6:	429d      	cmp	r5, r3
 80119f8:	bf08      	it	eq
 80119fa:	68f5      	ldreq	r5, [r6, #12]
 80119fc:	e7da      	b.n	80119b4 <_vfiprintf_r+0x20>
 80119fe:	89ab      	ldrh	r3, [r5, #12]
 8011a00:	0598      	lsls	r0, r3, #22
 8011a02:	d4ed      	bmi.n	80119e0 <_vfiprintf_r+0x4c>
 8011a04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a06:	f000 fd98 	bl	801253a <__retarget_lock_release_recursive>
 8011a0a:	e7e9      	b.n	80119e0 <_vfiprintf_r+0x4c>
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8011a10:	2320      	movs	r3, #32
 8011a12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011a16:	f8cd 800c 	str.w	r8, [sp, #12]
 8011a1a:	2330      	movs	r3, #48	; 0x30
 8011a1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011be0 <_vfiprintf_r+0x24c>
 8011a20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011a24:	f04f 0901 	mov.w	r9, #1
 8011a28:	4623      	mov	r3, r4
 8011a2a:	469a      	mov	sl, r3
 8011a2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011a30:	b10a      	cbz	r2, 8011a36 <_vfiprintf_r+0xa2>
 8011a32:	2a25      	cmp	r2, #37	; 0x25
 8011a34:	d1f9      	bne.n	8011a2a <_vfiprintf_r+0x96>
 8011a36:	ebba 0b04 	subs.w	fp, sl, r4
 8011a3a:	d00b      	beq.n	8011a54 <_vfiprintf_r+0xc0>
 8011a3c:	465b      	mov	r3, fp
 8011a3e:	4622      	mov	r2, r4
 8011a40:	4629      	mov	r1, r5
 8011a42:	4630      	mov	r0, r6
 8011a44:	f7ff ff93 	bl	801196e <__sfputs_r>
 8011a48:	3001      	adds	r0, #1
 8011a4a:	f000 80aa 	beq.w	8011ba2 <_vfiprintf_r+0x20e>
 8011a4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011a50:	445a      	add	r2, fp
 8011a52:	9209      	str	r2, [sp, #36]	; 0x24
 8011a54:	f89a 3000 	ldrb.w	r3, [sl]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	f000 80a2 	beq.w	8011ba2 <_vfiprintf_r+0x20e>
 8011a5e:	2300      	movs	r3, #0
 8011a60:	f04f 32ff 	mov.w	r2, #4294967295
 8011a64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011a68:	f10a 0a01 	add.w	sl, sl, #1
 8011a6c:	9304      	str	r3, [sp, #16]
 8011a6e:	9307      	str	r3, [sp, #28]
 8011a70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011a74:	931a      	str	r3, [sp, #104]	; 0x68
 8011a76:	4654      	mov	r4, sl
 8011a78:	2205      	movs	r2, #5
 8011a7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011a7e:	4858      	ldr	r0, [pc, #352]	; (8011be0 <_vfiprintf_r+0x24c>)
 8011a80:	f7ee fd4e 	bl	8000520 <memchr>
 8011a84:	9a04      	ldr	r2, [sp, #16]
 8011a86:	b9d8      	cbnz	r0, 8011ac0 <_vfiprintf_r+0x12c>
 8011a88:	06d1      	lsls	r1, r2, #27
 8011a8a:	bf44      	itt	mi
 8011a8c:	2320      	movmi	r3, #32
 8011a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a92:	0713      	lsls	r3, r2, #28
 8011a94:	bf44      	itt	mi
 8011a96:	232b      	movmi	r3, #43	; 0x2b
 8011a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8011aa0:	2b2a      	cmp	r3, #42	; 0x2a
 8011aa2:	d015      	beq.n	8011ad0 <_vfiprintf_r+0x13c>
 8011aa4:	9a07      	ldr	r2, [sp, #28]
 8011aa6:	4654      	mov	r4, sl
 8011aa8:	2000      	movs	r0, #0
 8011aaa:	f04f 0c0a 	mov.w	ip, #10
 8011aae:	4621      	mov	r1, r4
 8011ab0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011ab4:	3b30      	subs	r3, #48	; 0x30
 8011ab6:	2b09      	cmp	r3, #9
 8011ab8:	d94e      	bls.n	8011b58 <_vfiprintf_r+0x1c4>
 8011aba:	b1b0      	cbz	r0, 8011aea <_vfiprintf_r+0x156>
 8011abc:	9207      	str	r2, [sp, #28]
 8011abe:	e014      	b.n	8011aea <_vfiprintf_r+0x156>
 8011ac0:	eba0 0308 	sub.w	r3, r0, r8
 8011ac4:	fa09 f303 	lsl.w	r3, r9, r3
 8011ac8:	4313      	orrs	r3, r2
 8011aca:	9304      	str	r3, [sp, #16]
 8011acc:	46a2      	mov	sl, r4
 8011ace:	e7d2      	b.n	8011a76 <_vfiprintf_r+0xe2>
 8011ad0:	9b03      	ldr	r3, [sp, #12]
 8011ad2:	1d19      	adds	r1, r3, #4
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	9103      	str	r1, [sp, #12]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	bfbb      	ittet	lt
 8011adc:	425b      	neglt	r3, r3
 8011ade:	f042 0202 	orrlt.w	r2, r2, #2
 8011ae2:	9307      	strge	r3, [sp, #28]
 8011ae4:	9307      	strlt	r3, [sp, #28]
 8011ae6:	bfb8      	it	lt
 8011ae8:	9204      	strlt	r2, [sp, #16]
 8011aea:	7823      	ldrb	r3, [r4, #0]
 8011aec:	2b2e      	cmp	r3, #46	; 0x2e
 8011aee:	d10c      	bne.n	8011b0a <_vfiprintf_r+0x176>
 8011af0:	7863      	ldrb	r3, [r4, #1]
 8011af2:	2b2a      	cmp	r3, #42	; 0x2a
 8011af4:	d135      	bne.n	8011b62 <_vfiprintf_r+0x1ce>
 8011af6:	9b03      	ldr	r3, [sp, #12]
 8011af8:	1d1a      	adds	r2, r3, #4
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	9203      	str	r2, [sp, #12]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	bfb8      	it	lt
 8011b02:	f04f 33ff 	movlt.w	r3, #4294967295
 8011b06:	3402      	adds	r4, #2
 8011b08:	9305      	str	r3, [sp, #20]
 8011b0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011bf0 <_vfiprintf_r+0x25c>
 8011b0e:	7821      	ldrb	r1, [r4, #0]
 8011b10:	2203      	movs	r2, #3
 8011b12:	4650      	mov	r0, sl
 8011b14:	f7ee fd04 	bl	8000520 <memchr>
 8011b18:	b140      	cbz	r0, 8011b2c <_vfiprintf_r+0x198>
 8011b1a:	2340      	movs	r3, #64	; 0x40
 8011b1c:	eba0 000a 	sub.w	r0, r0, sl
 8011b20:	fa03 f000 	lsl.w	r0, r3, r0
 8011b24:	9b04      	ldr	r3, [sp, #16]
 8011b26:	4303      	orrs	r3, r0
 8011b28:	3401      	adds	r4, #1
 8011b2a:	9304      	str	r3, [sp, #16]
 8011b2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b30:	482c      	ldr	r0, [pc, #176]	; (8011be4 <_vfiprintf_r+0x250>)
 8011b32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011b36:	2206      	movs	r2, #6
 8011b38:	f7ee fcf2 	bl	8000520 <memchr>
 8011b3c:	2800      	cmp	r0, #0
 8011b3e:	d03f      	beq.n	8011bc0 <_vfiprintf_r+0x22c>
 8011b40:	4b29      	ldr	r3, [pc, #164]	; (8011be8 <_vfiprintf_r+0x254>)
 8011b42:	bb1b      	cbnz	r3, 8011b8c <_vfiprintf_r+0x1f8>
 8011b44:	9b03      	ldr	r3, [sp, #12]
 8011b46:	3307      	adds	r3, #7
 8011b48:	f023 0307 	bic.w	r3, r3, #7
 8011b4c:	3308      	adds	r3, #8
 8011b4e:	9303      	str	r3, [sp, #12]
 8011b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b52:	443b      	add	r3, r7
 8011b54:	9309      	str	r3, [sp, #36]	; 0x24
 8011b56:	e767      	b.n	8011a28 <_vfiprintf_r+0x94>
 8011b58:	fb0c 3202 	mla	r2, ip, r2, r3
 8011b5c:	460c      	mov	r4, r1
 8011b5e:	2001      	movs	r0, #1
 8011b60:	e7a5      	b.n	8011aae <_vfiprintf_r+0x11a>
 8011b62:	2300      	movs	r3, #0
 8011b64:	3401      	adds	r4, #1
 8011b66:	9305      	str	r3, [sp, #20]
 8011b68:	4619      	mov	r1, r3
 8011b6a:	f04f 0c0a 	mov.w	ip, #10
 8011b6e:	4620      	mov	r0, r4
 8011b70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011b74:	3a30      	subs	r2, #48	; 0x30
 8011b76:	2a09      	cmp	r2, #9
 8011b78:	d903      	bls.n	8011b82 <_vfiprintf_r+0x1ee>
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d0c5      	beq.n	8011b0a <_vfiprintf_r+0x176>
 8011b7e:	9105      	str	r1, [sp, #20]
 8011b80:	e7c3      	b.n	8011b0a <_vfiprintf_r+0x176>
 8011b82:	fb0c 2101 	mla	r1, ip, r1, r2
 8011b86:	4604      	mov	r4, r0
 8011b88:	2301      	movs	r3, #1
 8011b8a:	e7f0      	b.n	8011b6e <_vfiprintf_r+0x1da>
 8011b8c:	ab03      	add	r3, sp, #12
 8011b8e:	9300      	str	r3, [sp, #0]
 8011b90:	462a      	mov	r2, r5
 8011b92:	4b16      	ldr	r3, [pc, #88]	; (8011bec <_vfiprintf_r+0x258>)
 8011b94:	a904      	add	r1, sp, #16
 8011b96:	4630      	mov	r0, r6
 8011b98:	f3af 8000 	nop.w
 8011b9c:	4607      	mov	r7, r0
 8011b9e:	1c78      	adds	r0, r7, #1
 8011ba0:	d1d6      	bne.n	8011b50 <_vfiprintf_r+0x1bc>
 8011ba2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011ba4:	07d9      	lsls	r1, r3, #31
 8011ba6:	d405      	bmi.n	8011bb4 <_vfiprintf_r+0x220>
 8011ba8:	89ab      	ldrh	r3, [r5, #12]
 8011baa:	059a      	lsls	r2, r3, #22
 8011bac:	d402      	bmi.n	8011bb4 <_vfiprintf_r+0x220>
 8011bae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011bb0:	f000 fcc3 	bl	801253a <__retarget_lock_release_recursive>
 8011bb4:	89ab      	ldrh	r3, [r5, #12]
 8011bb6:	065b      	lsls	r3, r3, #25
 8011bb8:	f53f af12 	bmi.w	80119e0 <_vfiprintf_r+0x4c>
 8011bbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011bbe:	e711      	b.n	80119e4 <_vfiprintf_r+0x50>
 8011bc0:	ab03      	add	r3, sp, #12
 8011bc2:	9300      	str	r3, [sp, #0]
 8011bc4:	462a      	mov	r2, r5
 8011bc6:	4b09      	ldr	r3, [pc, #36]	; (8011bec <_vfiprintf_r+0x258>)
 8011bc8:	a904      	add	r1, sp, #16
 8011bca:	4630      	mov	r0, r6
 8011bcc:	f000 f880 	bl	8011cd0 <_printf_i>
 8011bd0:	e7e4      	b.n	8011b9c <_vfiprintf_r+0x208>
 8011bd2:	bf00      	nop
 8011bd4:	08012c7c 	.word	0x08012c7c
 8011bd8:	08012c9c 	.word	0x08012c9c
 8011bdc:	08012c5c 	.word	0x08012c5c
 8011be0:	08012c28 	.word	0x08012c28
 8011be4:	08012c32 	.word	0x08012c32
 8011be8:	00000000 	.word	0x00000000
 8011bec:	0801196f 	.word	0x0801196f
 8011bf0:	08012c2e 	.word	0x08012c2e

08011bf4 <_printf_common>:
 8011bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011bf8:	4616      	mov	r6, r2
 8011bfa:	4699      	mov	r9, r3
 8011bfc:	688a      	ldr	r2, [r1, #8]
 8011bfe:	690b      	ldr	r3, [r1, #16]
 8011c00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011c04:	4293      	cmp	r3, r2
 8011c06:	bfb8      	it	lt
 8011c08:	4613      	movlt	r3, r2
 8011c0a:	6033      	str	r3, [r6, #0]
 8011c0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011c10:	4607      	mov	r7, r0
 8011c12:	460c      	mov	r4, r1
 8011c14:	b10a      	cbz	r2, 8011c1a <_printf_common+0x26>
 8011c16:	3301      	adds	r3, #1
 8011c18:	6033      	str	r3, [r6, #0]
 8011c1a:	6823      	ldr	r3, [r4, #0]
 8011c1c:	0699      	lsls	r1, r3, #26
 8011c1e:	bf42      	ittt	mi
 8011c20:	6833      	ldrmi	r3, [r6, #0]
 8011c22:	3302      	addmi	r3, #2
 8011c24:	6033      	strmi	r3, [r6, #0]
 8011c26:	6825      	ldr	r5, [r4, #0]
 8011c28:	f015 0506 	ands.w	r5, r5, #6
 8011c2c:	d106      	bne.n	8011c3c <_printf_common+0x48>
 8011c2e:	f104 0a19 	add.w	sl, r4, #25
 8011c32:	68e3      	ldr	r3, [r4, #12]
 8011c34:	6832      	ldr	r2, [r6, #0]
 8011c36:	1a9b      	subs	r3, r3, r2
 8011c38:	42ab      	cmp	r3, r5
 8011c3a:	dc26      	bgt.n	8011c8a <_printf_common+0x96>
 8011c3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011c40:	1e13      	subs	r3, r2, #0
 8011c42:	6822      	ldr	r2, [r4, #0]
 8011c44:	bf18      	it	ne
 8011c46:	2301      	movne	r3, #1
 8011c48:	0692      	lsls	r2, r2, #26
 8011c4a:	d42b      	bmi.n	8011ca4 <_printf_common+0xb0>
 8011c4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011c50:	4649      	mov	r1, r9
 8011c52:	4638      	mov	r0, r7
 8011c54:	47c0      	blx	r8
 8011c56:	3001      	adds	r0, #1
 8011c58:	d01e      	beq.n	8011c98 <_printf_common+0xa4>
 8011c5a:	6823      	ldr	r3, [r4, #0]
 8011c5c:	68e5      	ldr	r5, [r4, #12]
 8011c5e:	6832      	ldr	r2, [r6, #0]
 8011c60:	f003 0306 	and.w	r3, r3, #6
 8011c64:	2b04      	cmp	r3, #4
 8011c66:	bf08      	it	eq
 8011c68:	1aad      	subeq	r5, r5, r2
 8011c6a:	68a3      	ldr	r3, [r4, #8]
 8011c6c:	6922      	ldr	r2, [r4, #16]
 8011c6e:	bf0c      	ite	eq
 8011c70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011c74:	2500      	movne	r5, #0
 8011c76:	4293      	cmp	r3, r2
 8011c78:	bfc4      	itt	gt
 8011c7a:	1a9b      	subgt	r3, r3, r2
 8011c7c:	18ed      	addgt	r5, r5, r3
 8011c7e:	2600      	movs	r6, #0
 8011c80:	341a      	adds	r4, #26
 8011c82:	42b5      	cmp	r5, r6
 8011c84:	d11a      	bne.n	8011cbc <_printf_common+0xc8>
 8011c86:	2000      	movs	r0, #0
 8011c88:	e008      	b.n	8011c9c <_printf_common+0xa8>
 8011c8a:	2301      	movs	r3, #1
 8011c8c:	4652      	mov	r2, sl
 8011c8e:	4649      	mov	r1, r9
 8011c90:	4638      	mov	r0, r7
 8011c92:	47c0      	blx	r8
 8011c94:	3001      	adds	r0, #1
 8011c96:	d103      	bne.n	8011ca0 <_printf_common+0xac>
 8011c98:	f04f 30ff 	mov.w	r0, #4294967295
 8011c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ca0:	3501      	adds	r5, #1
 8011ca2:	e7c6      	b.n	8011c32 <_printf_common+0x3e>
 8011ca4:	18e1      	adds	r1, r4, r3
 8011ca6:	1c5a      	adds	r2, r3, #1
 8011ca8:	2030      	movs	r0, #48	; 0x30
 8011caa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011cae:	4422      	add	r2, r4
 8011cb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011cb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011cb8:	3302      	adds	r3, #2
 8011cba:	e7c7      	b.n	8011c4c <_printf_common+0x58>
 8011cbc:	2301      	movs	r3, #1
 8011cbe:	4622      	mov	r2, r4
 8011cc0:	4649      	mov	r1, r9
 8011cc2:	4638      	mov	r0, r7
 8011cc4:	47c0      	blx	r8
 8011cc6:	3001      	adds	r0, #1
 8011cc8:	d0e6      	beq.n	8011c98 <_printf_common+0xa4>
 8011cca:	3601      	adds	r6, #1
 8011ccc:	e7d9      	b.n	8011c82 <_printf_common+0x8e>
	...

08011cd0 <_printf_i>:
 8011cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011cd4:	7e0f      	ldrb	r7, [r1, #24]
 8011cd6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011cd8:	2f78      	cmp	r7, #120	; 0x78
 8011cda:	4691      	mov	r9, r2
 8011cdc:	4680      	mov	r8, r0
 8011cde:	460c      	mov	r4, r1
 8011ce0:	469a      	mov	sl, r3
 8011ce2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011ce6:	d807      	bhi.n	8011cf8 <_printf_i+0x28>
 8011ce8:	2f62      	cmp	r7, #98	; 0x62
 8011cea:	d80a      	bhi.n	8011d02 <_printf_i+0x32>
 8011cec:	2f00      	cmp	r7, #0
 8011cee:	f000 80d8 	beq.w	8011ea2 <_printf_i+0x1d2>
 8011cf2:	2f58      	cmp	r7, #88	; 0x58
 8011cf4:	f000 80a3 	beq.w	8011e3e <_printf_i+0x16e>
 8011cf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011cfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011d00:	e03a      	b.n	8011d78 <_printf_i+0xa8>
 8011d02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011d06:	2b15      	cmp	r3, #21
 8011d08:	d8f6      	bhi.n	8011cf8 <_printf_i+0x28>
 8011d0a:	a101      	add	r1, pc, #4	; (adr r1, 8011d10 <_printf_i+0x40>)
 8011d0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011d10:	08011d69 	.word	0x08011d69
 8011d14:	08011d7d 	.word	0x08011d7d
 8011d18:	08011cf9 	.word	0x08011cf9
 8011d1c:	08011cf9 	.word	0x08011cf9
 8011d20:	08011cf9 	.word	0x08011cf9
 8011d24:	08011cf9 	.word	0x08011cf9
 8011d28:	08011d7d 	.word	0x08011d7d
 8011d2c:	08011cf9 	.word	0x08011cf9
 8011d30:	08011cf9 	.word	0x08011cf9
 8011d34:	08011cf9 	.word	0x08011cf9
 8011d38:	08011cf9 	.word	0x08011cf9
 8011d3c:	08011e89 	.word	0x08011e89
 8011d40:	08011dad 	.word	0x08011dad
 8011d44:	08011e6b 	.word	0x08011e6b
 8011d48:	08011cf9 	.word	0x08011cf9
 8011d4c:	08011cf9 	.word	0x08011cf9
 8011d50:	08011eab 	.word	0x08011eab
 8011d54:	08011cf9 	.word	0x08011cf9
 8011d58:	08011dad 	.word	0x08011dad
 8011d5c:	08011cf9 	.word	0x08011cf9
 8011d60:	08011cf9 	.word	0x08011cf9
 8011d64:	08011e73 	.word	0x08011e73
 8011d68:	682b      	ldr	r3, [r5, #0]
 8011d6a:	1d1a      	adds	r2, r3, #4
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	602a      	str	r2, [r5, #0]
 8011d70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011d74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011d78:	2301      	movs	r3, #1
 8011d7a:	e0a3      	b.n	8011ec4 <_printf_i+0x1f4>
 8011d7c:	6820      	ldr	r0, [r4, #0]
 8011d7e:	6829      	ldr	r1, [r5, #0]
 8011d80:	0606      	lsls	r6, r0, #24
 8011d82:	f101 0304 	add.w	r3, r1, #4
 8011d86:	d50a      	bpl.n	8011d9e <_printf_i+0xce>
 8011d88:	680e      	ldr	r6, [r1, #0]
 8011d8a:	602b      	str	r3, [r5, #0]
 8011d8c:	2e00      	cmp	r6, #0
 8011d8e:	da03      	bge.n	8011d98 <_printf_i+0xc8>
 8011d90:	232d      	movs	r3, #45	; 0x2d
 8011d92:	4276      	negs	r6, r6
 8011d94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d98:	485e      	ldr	r0, [pc, #376]	; (8011f14 <_printf_i+0x244>)
 8011d9a:	230a      	movs	r3, #10
 8011d9c:	e019      	b.n	8011dd2 <_printf_i+0x102>
 8011d9e:	680e      	ldr	r6, [r1, #0]
 8011da0:	602b      	str	r3, [r5, #0]
 8011da2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011da6:	bf18      	it	ne
 8011da8:	b236      	sxthne	r6, r6
 8011daa:	e7ef      	b.n	8011d8c <_printf_i+0xbc>
 8011dac:	682b      	ldr	r3, [r5, #0]
 8011dae:	6820      	ldr	r0, [r4, #0]
 8011db0:	1d19      	adds	r1, r3, #4
 8011db2:	6029      	str	r1, [r5, #0]
 8011db4:	0601      	lsls	r1, r0, #24
 8011db6:	d501      	bpl.n	8011dbc <_printf_i+0xec>
 8011db8:	681e      	ldr	r6, [r3, #0]
 8011dba:	e002      	b.n	8011dc2 <_printf_i+0xf2>
 8011dbc:	0646      	lsls	r6, r0, #25
 8011dbe:	d5fb      	bpl.n	8011db8 <_printf_i+0xe8>
 8011dc0:	881e      	ldrh	r6, [r3, #0]
 8011dc2:	4854      	ldr	r0, [pc, #336]	; (8011f14 <_printf_i+0x244>)
 8011dc4:	2f6f      	cmp	r7, #111	; 0x6f
 8011dc6:	bf0c      	ite	eq
 8011dc8:	2308      	moveq	r3, #8
 8011dca:	230a      	movne	r3, #10
 8011dcc:	2100      	movs	r1, #0
 8011dce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011dd2:	6865      	ldr	r5, [r4, #4]
 8011dd4:	60a5      	str	r5, [r4, #8]
 8011dd6:	2d00      	cmp	r5, #0
 8011dd8:	bfa2      	ittt	ge
 8011dda:	6821      	ldrge	r1, [r4, #0]
 8011ddc:	f021 0104 	bicge.w	r1, r1, #4
 8011de0:	6021      	strge	r1, [r4, #0]
 8011de2:	b90e      	cbnz	r6, 8011de8 <_printf_i+0x118>
 8011de4:	2d00      	cmp	r5, #0
 8011de6:	d04d      	beq.n	8011e84 <_printf_i+0x1b4>
 8011de8:	4615      	mov	r5, r2
 8011dea:	fbb6 f1f3 	udiv	r1, r6, r3
 8011dee:	fb03 6711 	mls	r7, r3, r1, r6
 8011df2:	5dc7      	ldrb	r7, [r0, r7]
 8011df4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011df8:	4637      	mov	r7, r6
 8011dfa:	42bb      	cmp	r3, r7
 8011dfc:	460e      	mov	r6, r1
 8011dfe:	d9f4      	bls.n	8011dea <_printf_i+0x11a>
 8011e00:	2b08      	cmp	r3, #8
 8011e02:	d10b      	bne.n	8011e1c <_printf_i+0x14c>
 8011e04:	6823      	ldr	r3, [r4, #0]
 8011e06:	07de      	lsls	r6, r3, #31
 8011e08:	d508      	bpl.n	8011e1c <_printf_i+0x14c>
 8011e0a:	6923      	ldr	r3, [r4, #16]
 8011e0c:	6861      	ldr	r1, [r4, #4]
 8011e0e:	4299      	cmp	r1, r3
 8011e10:	bfde      	ittt	le
 8011e12:	2330      	movle	r3, #48	; 0x30
 8011e14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011e18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011e1c:	1b52      	subs	r2, r2, r5
 8011e1e:	6122      	str	r2, [r4, #16]
 8011e20:	f8cd a000 	str.w	sl, [sp]
 8011e24:	464b      	mov	r3, r9
 8011e26:	aa03      	add	r2, sp, #12
 8011e28:	4621      	mov	r1, r4
 8011e2a:	4640      	mov	r0, r8
 8011e2c:	f7ff fee2 	bl	8011bf4 <_printf_common>
 8011e30:	3001      	adds	r0, #1
 8011e32:	d14c      	bne.n	8011ece <_printf_i+0x1fe>
 8011e34:	f04f 30ff 	mov.w	r0, #4294967295
 8011e38:	b004      	add	sp, #16
 8011e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e3e:	4835      	ldr	r0, [pc, #212]	; (8011f14 <_printf_i+0x244>)
 8011e40:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8011e44:	6829      	ldr	r1, [r5, #0]
 8011e46:	6823      	ldr	r3, [r4, #0]
 8011e48:	f851 6b04 	ldr.w	r6, [r1], #4
 8011e4c:	6029      	str	r1, [r5, #0]
 8011e4e:	061d      	lsls	r5, r3, #24
 8011e50:	d514      	bpl.n	8011e7c <_printf_i+0x1ac>
 8011e52:	07df      	lsls	r7, r3, #31
 8011e54:	bf44      	itt	mi
 8011e56:	f043 0320 	orrmi.w	r3, r3, #32
 8011e5a:	6023      	strmi	r3, [r4, #0]
 8011e5c:	b91e      	cbnz	r6, 8011e66 <_printf_i+0x196>
 8011e5e:	6823      	ldr	r3, [r4, #0]
 8011e60:	f023 0320 	bic.w	r3, r3, #32
 8011e64:	6023      	str	r3, [r4, #0]
 8011e66:	2310      	movs	r3, #16
 8011e68:	e7b0      	b.n	8011dcc <_printf_i+0xfc>
 8011e6a:	6823      	ldr	r3, [r4, #0]
 8011e6c:	f043 0320 	orr.w	r3, r3, #32
 8011e70:	6023      	str	r3, [r4, #0]
 8011e72:	2378      	movs	r3, #120	; 0x78
 8011e74:	4828      	ldr	r0, [pc, #160]	; (8011f18 <_printf_i+0x248>)
 8011e76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011e7a:	e7e3      	b.n	8011e44 <_printf_i+0x174>
 8011e7c:	0659      	lsls	r1, r3, #25
 8011e7e:	bf48      	it	mi
 8011e80:	b2b6      	uxthmi	r6, r6
 8011e82:	e7e6      	b.n	8011e52 <_printf_i+0x182>
 8011e84:	4615      	mov	r5, r2
 8011e86:	e7bb      	b.n	8011e00 <_printf_i+0x130>
 8011e88:	682b      	ldr	r3, [r5, #0]
 8011e8a:	6826      	ldr	r6, [r4, #0]
 8011e8c:	6961      	ldr	r1, [r4, #20]
 8011e8e:	1d18      	adds	r0, r3, #4
 8011e90:	6028      	str	r0, [r5, #0]
 8011e92:	0635      	lsls	r5, r6, #24
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	d501      	bpl.n	8011e9c <_printf_i+0x1cc>
 8011e98:	6019      	str	r1, [r3, #0]
 8011e9a:	e002      	b.n	8011ea2 <_printf_i+0x1d2>
 8011e9c:	0670      	lsls	r0, r6, #25
 8011e9e:	d5fb      	bpl.n	8011e98 <_printf_i+0x1c8>
 8011ea0:	8019      	strh	r1, [r3, #0]
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	6123      	str	r3, [r4, #16]
 8011ea6:	4615      	mov	r5, r2
 8011ea8:	e7ba      	b.n	8011e20 <_printf_i+0x150>
 8011eaa:	682b      	ldr	r3, [r5, #0]
 8011eac:	1d1a      	adds	r2, r3, #4
 8011eae:	602a      	str	r2, [r5, #0]
 8011eb0:	681d      	ldr	r5, [r3, #0]
 8011eb2:	6862      	ldr	r2, [r4, #4]
 8011eb4:	2100      	movs	r1, #0
 8011eb6:	4628      	mov	r0, r5
 8011eb8:	f7ee fb32 	bl	8000520 <memchr>
 8011ebc:	b108      	cbz	r0, 8011ec2 <_printf_i+0x1f2>
 8011ebe:	1b40      	subs	r0, r0, r5
 8011ec0:	6060      	str	r0, [r4, #4]
 8011ec2:	6863      	ldr	r3, [r4, #4]
 8011ec4:	6123      	str	r3, [r4, #16]
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011ecc:	e7a8      	b.n	8011e20 <_printf_i+0x150>
 8011ece:	6923      	ldr	r3, [r4, #16]
 8011ed0:	462a      	mov	r2, r5
 8011ed2:	4649      	mov	r1, r9
 8011ed4:	4640      	mov	r0, r8
 8011ed6:	47d0      	blx	sl
 8011ed8:	3001      	adds	r0, #1
 8011eda:	d0ab      	beq.n	8011e34 <_printf_i+0x164>
 8011edc:	6823      	ldr	r3, [r4, #0]
 8011ede:	079b      	lsls	r3, r3, #30
 8011ee0:	d413      	bmi.n	8011f0a <_printf_i+0x23a>
 8011ee2:	68e0      	ldr	r0, [r4, #12]
 8011ee4:	9b03      	ldr	r3, [sp, #12]
 8011ee6:	4298      	cmp	r0, r3
 8011ee8:	bfb8      	it	lt
 8011eea:	4618      	movlt	r0, r3
 8011eec:	e7a4      	b.n	8011e38 <_printf_i+0x168>
 8011eee:	2301      	movs	r3, #1
 8011ef0:	4632      	mov	r2, r6
 8011ef2:	4649      	mov	r1, r9
 8011ef4:	4640      	mov	r0, r8
 8011ef6:	47d0      	blx	sl
 8011ef8:	3001      	adds	r0, #1
 8011efa:	d09b      	beq.n	8011e34 <_printf_i+0x164>
 8011efc:	3501      	adds	r5, #1
 8011efe:	68e3      	ldr	r3, [r4, #12]
 8011f00:	9903      	ldr	r1, [sp, #12]
 8011f02:	1a5b      	subs	r3, r3, r1
 8011f04:	42ab      	cmp	r3, r5
 8011f06:	dcf2      	bgt.n	8011eee <_printf_i+0x21e>
 8011f08:	e7eb      	b.n	8011ee2 <_printf_i+0x212>
 8011f0a:	2500      	movs	r5, #0
 8011f0c:	f104 0619 	add.w	r6, r4, #25
 8011f10:	e7f5      	b.n	8011efe <_printf_i+0x22e>
 8011f12:	bf00      	nop
 8011f14:	08012c39 	.word	0x08012c39
 8011f18:	08012c4a 	.word	0x08012c4a

08011f1c <iprintf>:
 8011f1c:	b40f      	push	{r0, r1, r2, r3}
 8011f1e:	4b0a      	ldr	r3, [pc, #40]	; (8011f48 <iprintf+0x2c>)
 8011f20:	b513      	push	{r0, r1, r4, lr}
 8011f22:	681c      	ldr	r4, [r3, #0]
 8011f24:	b124      	cbz	r4, 8011f30 <iprintf+0x14>
 8011f26:	69a3      	ldr	r3, [r4, #24]
 8011f28:	b913      	cbnz	r3, 8011f30 <iprintf+0x14>
 8011f2a:	4620      	mov	r0, r4
 8011f2c:	f000 fa66 	bl	80123fc <__sinit>
 8011f30:	ab05      	add	r3, sp, #20
 8011f32:	9a04      	ldr	r2, [sp, #16]
 8011f34:	68a1      	ldr	r1, [r4, #8]
 8011f36:	9301      	str	r3, [sp, #4]
 8011f38:	4620      	mov	r0, r4
 8011f3a:	f7ff fd2b 	bl	8011994 <_vfiprintf_r>
 8011f3e:	b002      	add	sp, #8
 8011f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f44:	b004      	add	sp, #16
 8011f46:	4770      	bx	lr
 8011f48:	24000074 	.word	0x24000074

08011f4c <_puts_r>:
 8011f4c:	b570      	push	{r4, r5, r6, lr}
 8011f4e:	460e      	mov	r6, r1
 8011f50:	4605      	mov	r5, r0
 8011f52:	b118      	cbz	r0, 8011f5c <_puts_r+0x10>
 8011f54:	6983      	ldr	r3, [r0, #24]
 8011f56:	b90b      	cbnz	r3, 8011f5c <_puts_r+0x10>
 8011f58:	f000 fa50 	bl	80123fc <__sinit>
 8011f5c:	69ab      	ldr	r3, [r5, #24]
 8011f5e:	68ac      	ldr	r4, [r5, #8]
 8011f60:	b913      	cbnz	r3, 8011f68 <_puts_r+0x1c>
 8011f62:	4628      	mov	r0, r5
 8011f64:	f000 fa4a 	bl	80123fc <__sinit>
 8011f68:	4b2c      	ldr	r3, [pc, #176]	; (801201c <_puts_r+0xd0>)
 8011f6a:	429c      	cmp	r4, r3
 8011f6c:	d120      	bne.n	8011fb0 <_puts_r+0x64>
 8011f6e:	686c      	ldr	r4, [r5, #4]
 8011f70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011f72:	07db      	lsls	r3, r3, #31
 8011f74:	d405      	bmi.n	8011f82 <_puts_r+0x36>
 8011f76:	89a3      	ldrh	r3, [r4, #12]
 8011f78:	0598      	lsls	r0, r3, #22
 8011f7a:	d402      	bmi.n	8011f82 <_puts_r+0x36>
 8011f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011f7e:	f000 fadb 	bl	8012538 <__retarget_lock_acquire_recursive>
 8011f82:	89a3      	ldrh	r3, [r4, #12]
 8011f84:	0719      	lsls	r1, r3, #28
 8011f86:	d51d      	bpl.n	8011fc4 <_puts_r+0x78>
 8011f88:	6923      	ldr	r3, [r4, #16]
 8011f8a:	b1db      	cbz	r3, 8011fc4 <_puts_r+0x78>
 8011f8c:	3e01      	subs	r6, #1
 8011f8e:	68a3      	ldr	r3, [r4, #8]
 8011f90:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011f94:	3b01      	subs	r3, #1
 8011f96:	60a3      	str	r3, [r4, #8]
 8011f98:	bb39      	cbnz	r1, 8011fea <_puts_r+0x9e>
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	da38      	bge.n	8012010 <_puts_r+0xc4>
 8011f9e:	4622      	mov	r2, r4
 8011fa0:	210a      	movs	r1, #10
 8011fa2:	4628      	mov	r0, r5
 8011fa4:	f000 f848 	bl	8012038 <__swbuf_r>
 8011fa8:	3001      	adds	r0, #1
 8011faa:	d011      	beq.n	8011fd0 <_puts_r+0x84>
 8011fac:	250a      	movs	r5, #10
 8011fae:	e011      	b.n	8011fd4 <_puts_r+0x88>
 8011fb0:	4b1b      	ldr	r3, [pc, #108]	; (8012020 <_puts_r+0xd4>)
 8011fb2:	429c      	cmp	r4, r3
 8011fb4:	d101      	bne.n	8011fba <_puts_r+0x6e>
 8011fb6:	68ac      	ldr	r4, [r5, #8]
 8011fb8:	e7da      	b.n	8011f70 <_puts_r+0x24>
 8011fba:	4b1a      	ldr	r3, [pc, #104]	; (8012024 <_puts_r+0xd8>)
 8011fbc:	429c      	cmp	r4, r3
 8011fbe:	bf08      	it	eq
 8011fc0:	68ec      	ldreq	r4, [r5, #12]
 8011fc2:	e7d5      	b.n	8011f70 <_puts_r+0x24>
 8011fc4:	4621      	mov	r1, r4
 8011fc6:	4628      	mov	r0, r5
 8011fc8:	f000 f888 	bl	80120dc <__swsetup_r>
 8011fcc:	2800      	cmp	r0, #0
 8011fce:	d0dd      	beq.n	8011f8c <_puts_r+0x40>
 8011fd0:	f04f 35ff 	mov.w	r5, #4294967295
 8011fd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011fd6:	07da      	lsls	r2, r3, #31
 8011fd8:	d405      	bmi.n	8011fe6 <_puts_r+0x9a>
 8011fda:	89a3      	ldrh	r3, [r4, #12]
 8011fdc:	059b      	lsls	r3, r3, #22
 8011fde:	d402      	bmi.n	8011fe6 <_puts_r+0x9a>
 8011fe0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011fe2:	f000 faaa 	bl	801253a <__retarget_lock_release_recursive>
 8011fe6:	4628      	mov	r0, r5
 8011fe8:	bd70      	pop	{r4, r5, r6, pc}
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	da04      	bge.n	8011ff8 <_puts_r+0xac>
 8011fee:	69a2      	ldr	r2, [r4, #24]
 8011ff0:	429a      	cmp	r2, r3
 8011ff2:	dc06      	bgt.n	8012002 <_puts_r+0xb6>
 8011ff4:	290a      	cmp	r1, #10
 8011ff6:	d004      	beq.n	8012002 <_puts_r+0xb6>
 8011ff8:	6823      	ldr	r3, [r4, #0]
 8011ffa:	1c5a      	adds	r2, r3, #1
 8011ffc:	6022      	str	r2, [r4, #0]
 8011ffe:	7019      	strb	r1, [r3, #0]
 8012000:	e7c5      	b.n	8011f8e <_puts_r+0x42>
 8012002:	4622      	mov	r2, r4
 8012004:	4628      	mov	r0, r5
 8012006:	f000 f817 	bl	8012038 <__swbuf_r>
 801200a:	3001      	adds	r0, #1
 801200c:	d1bf      	bne.n	8011f8e <_puts_r+0x42>
 801200e:	e7df      	b.n	8011fd0 <_puts_r+0x84>
 8012010:	6823      	ldr	r3, [r4, #0]
 8012012:	250a      	movs	r5, #10
 8012014:	1c5a      	adds	r2, r3, #1
 8012016:	6022      	str	r2, [r4, #0]
 8012018:	701d      	strb	r5, [r3, #0]
 801201a:	e7db      	b.n	8011fd4 <_puts_r+0x88>
 801201c:	08012c7c 	.word	0x08012c7c
 8012020:	08012c9c 	.word	0x08012c9c
 8012024:	08012c5c 	.word	0x08012c5c

08012028 <puts>:
 8012028:	4b02      	ldr	r3, [pc, #8]	; (8012034 <puts+0xc>)
 801202a:	4601      	mov	r1, r0
 801202c:	6818      	ldr	r0, [r3, #0]
 801202e:	f7ff bf8d 	b.w	8011f4c <_puts_r>
 8012032:	bf00      	nop
 8012034:	24000074 	.word	0x24000074

08012038 <__swbuf_r>:
 8012038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801203a:	460e      	mov	r6, r1
 801203c:	4614      	mov	r4, r2
 801203e:	4605      	mov	r5, r0
 8012040:	b118      	cbz	r0, 801204a <__swbuf_r+0x12>
 8012042:	6983      	ldr	r3, [r0, #24]
 8012044:	b90b      	cbnz	r3, 801204a <__swbuf_r+0x12>
 8012046:	f000 f9d9 	bl	80123fc <__sinit>
 801204a:	4b21      	ldr	r3, [pc, #132]	; (80120d0 <__swbuf_r+0x98>)
 801204c:	429c      	cmp	r4, r3
 801204e:	d12b      	bne.n	80120a8 <__swbuf_r+0x70>
 8012050:	686c      	ldr	r4, [r5, #4]
 8012052:	69a3      	ldr	r3, [r4, #24]
 8012054:	60a3      	str	r3, [r4, #8]
 8012056:	89a3      	ldrh	r3, [r4, #12]
 8012058:	071a      	lsls	r2, r3, #28
 801205a:	d52f      	bpl.n	80120bc <__swbuf_r+0x84>
 801205c:	6923      	ldr	r3, [r4, #16]
 801205e:	b36b      	cbz	r3, 80120bc <__swbuf_r+0x84>
 8012060:	6923      	ldr	r3, [r4, #16]
 8012062:	6820      	ldr	r0, [r4, #0]
 8012064:	1ac0      	subs	r0, r0, r3
 8012066:	6963      	ldr	r3, [r4, #20]
 8012068:	b2f6      	uxtb	r6, r6
 801206a:	4283      	cmp	r3, r0
 801206c:	4637      	mov	r7, r6
 801206e:	dc04      	bgt.n	801207a <__swbuf_r+0x42>
 8012070:	4621      	mov	r1, r4
 8012072:	4628      	mov	r0, r5
 8012074:	f000 f92e 	bl	80122d4 <_fflush_r>
 8012078:	bb30      	cbnz	r0, 80120c8 <__swbuf_r+0x90>
 801207a:	68a3      	ldr	r3, [r4, #8]
 801207c:	3b01      	subs	r3, #1
 801207e:	60a3      	str	r3, [r4, #8]
 8012080:	6823      	ldr	r3, [r4, #0]
 8012082:	1c5a      	adds	r2, r3, #1
 8012084:	6022      	str	r2, [r4, #0]
 8012086:	701e      	strb	r6, [r3, #0]
 8012088:	6963      	ldr	r3, [r4, #20]
 801208a:	3001      	adds	r0, #1
 801208c:	4283      	cmp	r3, r0
 801208e:	d004      	beq.n	801209a <__swbuf_r+0x62>
 8012090:	89a3      	ldrh	r3, [r4, #12]
 8012092:	07db      	lsls	r3, r3, #31
 8012094:	d506      	bpl.n	80120a4 <__swbuf_r+0x6c>
 8012096:	2e0a      	cmp	r6, #10
 8012098:	d104      	bne.n	80120a4 <__swbuf_r+0x6c>
 801209a:	4621      	mov	r1, r4
 801209c:	4628      	mov	r0, r5
 801209e:	f000 f919 	bl	80122d4 <_fflush_r>
 80120a2:	b988      	cbnz	r0, 80120c8 <__swbuf_r+0x90>
 80120a4:	4638      	mov	r0, r7
 80120a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80120a8:	4b0a      	ldr	r3, [pc, #40]	; (80120d4 <__swbuf_r+0x9c>)
 80120aa:	429c      	cmp	r4, r3
 80120ac:	d101      	bne.n	80120b2 <__swbuf_r+0x7a>
 80120ae:	68ac      	ldr	r4, [r5, #8]
 80120b0:	e7cf      	b.n	8012052 <__swbuf_r+0x1a>
 80120b2:	4b09      	ldr	r3, [pc, #36]	; (80120d8 <__swbuf_r+0xa0>)
 80120b4:	429c      	cmp	r4, r3
 80120b6:	bf08      	it	eq
 80120b8:	68ec      	ldreq	r4, [r5, #12]
 80120ba:	e7ca      	b.n	8012052 <__swbuf_r+0x1a>
 80120bc:	4621      	mov	r1, r4
 80120be:	4628      	mov	r0, r5
 80120c0:	f000 f80c 	bl	80120dc <__swsetup_r>
 80120c4:	2800      	cmp	r0, #0
 80120c6:	d0cb      	beq.n	8012060 <__swbuf_r+0x28>
 80120c8:	f04f 37ff 	mov.w	r7, #4294967295
 80120cc:	e7ea      	b.n	80120a4 <__swbuf_r+0x6c>
 80120ce:	bf00      	nop
 80120d0:	08012c7c 	.word	0x08012c7c
 80120d4:	08012c9c 	.word	0x08012c9c
 80120d8:	08012c5c 	.word	0x08012c5c

080120dc <__swsetup_r>:
 80120dc:	4b32      	ldr	r3, [pc, #200]	; (80121a8 <__swsetup_r+0xcc>)
 80120de:	b570      	push	{r4, r5, r6, lr}
 80120e0:	681d      	ldr	r5, [r3, #0]
 80120e2:	4606      	mov	r6, r0
 80120e4:	460c      	mov	r4, r1
 80120e6:	b125      	cbz	r5, 80120f2 <__swsetup_r+0x16>
 80120e8:	69ab      	ldr	r3, [r5, #24]
 80120ea:	b913      	cbnz	r3, 80120f2 <__swsetup_r+0x16>
 80120ec:	4628      	mov	r0, r5
 80120ee:	f000 f985 	bl	80123fc <__sinit>
 80120f2:	4b2e      	ldr	r3, [pc, #184]	; (80121ac <__swsetup_r+0xd0>)
 80120f4:	429c      	cmp	r4, r3
 80120f6:	d10f      	bne.n	8012118 <__swsetup_r+0x3c>
 80120f8:	686c      	ldr	r4, [r5, #4]
 80120fa:	89a3      	ldrh	r3, [r4, #12]
 80120fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012100:	0719      	lsls	r1, r3, #28
 8012102:	d42c      	bmi.n	801215e <__swsetup_r+0x82>
 8012104:	06dd      	lsls	r5, r3, #27
 8012106:	d411      	bmi.n	801212c <__swsetup_r+0x50>
 8012108:	2309      	movs	r3, #9
 801210a:	6033      	str	r3, [r6, #0]
 801210c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8012110:	81a3      	strh	r3, [r4, #12]
 8012112:	f04f 30ff 	mov.w	r0, #4294967295
 8012116:	e03e      	b.n	8012196 <__swsetup_r+0xba>
 8012118:	4b25      	ldr	r3, [pc, #148]	; (80121b0 <__swsetup_r+0xd4>)
 801211a:	429c      	cmp	r4, r3
 801211c:	d101      	bne.n	8012122 <__swsetup_r+0x46>
 801211e:	68ac      	ldr	r4, [r5, #8]
 8012120:	e7eb      	b.n	80120fa <__swsetup_r+0x1e>
 8012122:	4b24      	ldr	r3, [pc, #144]	; (80121b4 <__swsetup_r+0xd8>)
 8012124:	429c      	cmp	r4, r3
 8012126:	bf08      	it	eq
 8012128:	68ec      	ldreq	r4, [r5, #12]
 801212a:	e7e6      	b.n	80120fa <__swsetup_r+0x1e>
 801212c:	0758      	lsls	r0, r3, #29
 801212e:	d512      	bpl.n	8012156 <__swsetup_r+0x7a>
 8012130:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012132:	b141      	cbz	r1, 8012146 <__swsetup_r+0x6a>
 8012134:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012138:	4299      	cmp	r1, r3
 801213a:	d002      	beq.n	8012142 <__swsetup_r+0x66>
 801213c:	4630      	mov	r0, r6
 801213e:	f000 fa63 	bl	8012608 <_free_r>
 8012142:	2300      	movs	r3, #0
 8012144:	6363      	str	r3, [r4, #52]	; 0x34
 8012146:	89a3      	ldrh	r3, [r4, #12]
 8012148:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801214c:	81a3      	strh	r3, [r4, #12]
 801214e:	2300      	movs	r3, #0
 8012150:	6063      	str	r3, [r4, #4]
 8012152:	6923      	ldr	r3, [r4, #16]
 8012154:	6023      	str	r3, [r4, #0]
 8012156:	89a3      	ldrh	r3, [r4, #12]
 8012158:	f043 0308 	orr.w	r3, r3, #8
 801215c:	81a3      	strh	r3, [r4, #12]
 801215e:	6923      	ldr	r3, [r4, #16]
 8012160:	b94b      	cbnz	r3, 8012176 <__swsetup_r+0x9a>
 8012162:	89a3      	ldrh	r3, [r4, #12]
 8012164:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801216c:	d003      	beq.n	8012176 <__swsetup_r+0x9a>
 801216e:	4621      	mov	r1, r4
 8012170:	4630      	mov	r0, r6
 8012172:	f000 fa09 	bl	8012588 <__smakebuf_r>
 8012176:	89a0      	ldrh	r0, [r4, #12]
 8012178:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801217c:	f010 0301 	ands.w	r3, r0, #1
 8012180:	d00a      	beq.n	8012198 <__swsetup_r+0xbc>
 8012182:	2300      	movs	r3, #0
 8012184:	60a3      	str	r3, [r4, #8]
 8012186:	6963      	ldr	r3, [r4, #20]
 8012188:	425b      	negs	r3, r3
 801218a:	61a3      	str	r3, [r4, #24]
 801218c:	6923      	ldr	r3, [r4, #16]
 801218e:	b943      	cbnz	r3, 80121a2 <__swsetup_r+0xc6>
 8012190:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8012194:	d1ba      	bne.n	801210c <__swsetup_r+0x30>
 8012196:	bd70      	pop	{r4, r5, r6, pc}
 8012198:	0781      	lsls	r1, r0, #30
 801219a:	bf58      	it	pl
 801219c:	6963      	ldrpl	r3, [r4, #20]
 801219e:	60a3      	str	r3, [r4, #8]
 80121a0:	e7f4      	b.n	801218c <__swsetup_r+0xb0>
 80121a2:	2000      	movs	r0, #0
 80121a4:	e7f7      	b.n	8012196 <__swsetup_r+0xba>
 80121a6:	bf00      	nop
 80121a8:	24000074 	.word	0x24000074
 80121ac:	08012c7c 	.word	0x08012c7c
 80121b0:	08012c9c 	.word	0x08012c9c
 80121b4:	08012c5c 	.word	0x08012c5c

080121b8 <abort>:
 80121b8:	b508      	push	{r3, lr}
 80121ba:	2006      	movs	r0, #6
 80121bc:	f000 fb3c 	bl	8012838 <raise>
 80121c0:	2001      	movs	r0, #1
 80121c2:	f7ef fa43 	bl	800164c <_exit>
	...

080121c8 <__sflush_r>:
 80121c8:	898a      	ldrh	r2, [r1, #12]
 80121ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121ce:	4605      	mov	r5, r0
 80121d0:	0710      	lsls	r0, r2, #28
 80121d2:	460c      	mov	r4, r1
 80121d4:	d458      	bmi.n	8012288 <__sflush_r+0xc0>
 80121d6:	684b      	ldr	r3, [r1, #4]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	dc05      	bgt.n	80121e8 <__sflush_r+0x20>
 80121dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80121de:	2b00      	cmp	r3, #0
 80121e0:	dc02      	bgt.n	80121e8 <__sflush_r+0x20>
 80121e2:	2000      	movs	r0, #0
 80121e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80121e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80121ea:	2e00      	cmp	r6, #0
 80121ec:	d0f9      	beq.n	80121e2 <__sflush_r+0x1a>
 80121ee:	2300      	movs	r3, #0
 80121f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80121f4:	682f      	ldr	r7, [r5, #0]
 80121f6:	602b      	str	r3, [r5, #0]
 80121f8:	d032      	beq.n	8012260 <__sflush_r+0x98>
 80121fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80121fc:	89a3      	ldrh	r3, [r4, #12]
 80121fe:	075a      	lsls	r2, r3, #29
 8012200:	d505      	bpl.n	801220e <__sflush_r+0x46>
 8012202:	6863      	ldr	r3, [r4, #4]
 8012204:	1ac0      	subs	r0, r0, r3
 8012206:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012208:	b10b      	cbz	r3, 801220e <__sflush_r+0x46>
 801220a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801220c:	1ac0      	subs	r0, r0, r3
 801220e:	2300      	movs	r3, #0
 8012210:	4602      	mov	r2, r0
 8012212:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012214:	6a21      	ldr	r1, [r4, #32]
 8012216:	4628      	mov	r0, r5
 8012218:	47b0      	blx	r6
 801221a:	1c43      	adds	r3, r0, #1
 801221c:	89a3      	ldrh	r3, [r4, #12]
 801221e:	d106      	bne.n	801222e <__sflush_r+0x66>
 8012220:	6829      	ldr	r1, [r5, #0]
 8012222:	291d      	cmp	r1, #29
 8012224:	d82c      	bhi.n	8012280 <__sflush_r+0xb8>
 8012226:	4a2a      	ldr	r2, [pc, #168]	; (80122d0 <__sflush_r+0x108>)
 8012228:	40ca      	lsrs	r2, r1
 801222a:	07d6      	lsls	r6, r2, #31
 801222c:	d528      	bpl.n	8012280 <__sflush_r+0xb8>
 801222e:	2200      	movs	r2, #0
 8012230:	6062      	str	r2, [r4, #4]
 8012232:	04d9      	lsls	r1, r3, #19
 8012234:	6922      	ldr	r2, [r4, #16]
 8012236:	6022      	str	r2, [r4, #0]
 8012238:	d504      	bpl.n	8012244 <__sflush_r+0x7c>
 801223a:	1c42      	adds	r2, r0, #1
 801223c:	d101      	bne.n	8012242 <__sflush_r+0x7a>
 801223e:	682b      	ldr	r3, [r5, #0]
 8012240:	b903      	cbnz	r3, 8012244 <__sflush_r+0x7c>
 8012242:	6560      	str	r0, [r4, #84]	; 0x54
 8012244:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012246:	602f      	str	r7, [r5, #0]
 8012248:	2900      	cmp	r1, #0
 801224a:	d0ca      	beq.n	80121e2 <__sflush_r+0x1a>
 801224c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012250:	4299      	cmp	r1, r3
 8012252:	d002      	beq.n	801225a <__sflush_r+0x92>
 8012254:	4628      	mov	r0, r5
 8012256:	f000 f9d7 	bl	8012608 <_free_r>
 801225a:	2000      	movs	r0, #0
 801225c:	6360      	str	r0, [r4, #52]	; 0x34
 801225e:	e7c1      	b.n	80121e4 <__sflush_r+0x1c>
 8012260:	6a21      	ldr	r1, [r4, #32]
 8012262:	2301      	movs	r3, #1
 8012264:	4628      	mov	r0, r5
 8012266:	47b0      	blx	r6
 8012268:	1c41      	adds	r1, r0, #1
 801226a:	d1c7      	bne.n	80121fc <__sflush_r+0x34>
 801226c:	682b      	ldr	r3, [r5, #0]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d0c4      	beq.n	80121fc <__sflush_r+0x34>
 8012272:	2b1d      	cmp	r3, #29
 8012274:	d001      	beq.n	801227a <__sflush_r+0xb2>
 8012276:	2b16      	cmp	r3, #22
 8012278:	d101      	bne.n	801227e <__sflush_r+0xb6>
 801227a:	602f      	str	r7, [r5, #0]
 801227c:	e7b1      	b.n	80121e2 <__sflush_r+0x1a>
 801227e:	89a3      	ldrh	r3, [r4, #12]
 8012280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012284:	81a3      	strh	r3, [r4, #12]
 8012286:	e7ad      	b.n	80121e4 <__sflush_r+0x1c>
 8012288:	690f      	ldr	r7, [r1, #16]
 801228a:	2f00      	cmp	r7, #0
 801228c:	d0a9      	beq.n	80121e2 <__sflush_r+0x1a>
 801228e:	0793      	lsls	r3, r2, #30
 8012290:	680e      	ldr	r6, [r1, #0]
 8012292:	bf08      	it	eq
 8012294:	694b      	ldreq	r3, [r1, #20]
 8012296:	600f      	str	r7, [r1, #0]
 8012298:	bf18      	it	ne
 801229a:	2300      	movne	r3, #0
 801229c:	eba6 0807 	sub.w	r8, r6, r7
 80122a0:	608b      	str	r3, [r1, #8]
 80122a2:	f1b8 0f00 	cmp.w	r8, #0
 80122a6:	dd9c      	ble.n	80121e2 <__sflush_r+0x1a>
 80122a8:	6a21      	ldr	r1, [r4, #32]
 80122aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80122ac:	4643      	mov	r3, r8
 80122ae:	463a      	mov	r2, r7
 80122b0:	4628      	mov	r0, r5
 80122b2:	47b0      	blx	r6
 80122b4:	2800      	cmp	r0, #0
 80122b6:	dc06      	bgt.n	80122c6 <__sflush_r+0xfe>
 80122b8:	89a3      	ldrh	r3, [r4, #12]
 80122ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80122be:	81a3      	strh	r3, [r4, #12]
 80122c0:	f04f 30ff 	mov.w	r0, #4294967295
 80122c4:	e78e      	b.n	80121e4 <__sflush_r+0x1c>
 80122c6:	4407      	add	r7, r0
 80122c8:	eba8 0800 	sub.w	r8, r8, r0
 80122cc:	e7e9      	b.n	80122a2 <__sflush_r+0xda>
 80122ce:	bf00      	nop
 80122d0:	20400001 	.word	0x20400001

080122d4 <_fflush_r>:
 80122d4:	b538      	push	{r3, r4, r5, lr}
 80122d6:	690b      	ldr	r3, [r1, #16]
 80122d8:	4605      	mov	r5, r0
 80122da:	460c      	mov	r4, r1
 80122dc:	b913      	cbnz	r3, 80122e4 <_fflush_r+0x10>
 80122de:	2500      	movs	r5, #0
 80122e0:	4628      	mov	r0, r5
 80122e2:	bd38      	pop	{r3, r4, r5, pc}
 80122e4:	b118      	cbz	r0, 80122ee <_fflush_r+0x1a>
 80122e6:	6983      	ldr	r3, [r0, #24]
 80122e8:	b90b      	cbnz	r3, 80122ee <_fflush_r+0x1a>
 80122ea:	f000 f887 	bl	80123fc <__sinit>
 80122ee:	4b14      	ldr	r3, [pc, #80]	; (8012340 <_fflush_r+0x6c>)
 80122f0:	429c      	cmp	r4, r3
 80122f2:	d11b      	bne.n	801232c <_fflush_r+0x58>
 80122f4:	686c      	ldr	r4, [r5, #4]
 80122f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d0ef      	beq.n	80122de <_fflush_r+0xa>
 80122fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8012300:	07d0      	lsls	r0, r2, #31
 8012302:	d404      	bmi.n	801230e <_fflush_r+0x3a>
 8012304:	0599      	lsls	r1, r3, #22
 8012306:	d402      	bmi.n	801230e <_fflush_r+0x3a>
 8012308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801230a:	f000 f915 	bl	8012538 <__retarget_lock_acquire_recursive>
 801230e:	4628      	mov	r0, r5
 8012310:	4621      	mov	r1, r4
 8012312:	f7ff ff59 	bl	80121c8 <__sflush_r>
 8012316:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012318:	07da      	lsls	r2, r3, #31
 801231a:	4605      	mov	r5, r0
 801231c:	d4e0      	bmi.n	80122e0 <_fflush_r+0xc>
 801231e:	89a3      	ldrh	r3, [r4, #12]
 8012320:	059b      	lsls	r3, r3, #22
 8012322:	d4dd      	bmi.n	80122e0 <_fflush_r+0xc>
 8012324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8012326:	f000 f908 	bl	801253a <__retarget_lock_release_recursive>
 801232a:	e7d9      	b.n	80122e0 <_fflush_r+0xc>
 801232c:	4b05      	ldr	r3, [pc, #20]	; (8012344 <_fflush_r+0x70>)
 801232e:	429c      	cmp	r4, r3
 8012330:	d101      	bne.n	8012336 <_fflush_r+0x62>
 8012332:	68ac      	ldr	r4, [r5, #8]
 8012334:	e7df      	b.n	80122f6 <_fflush_r+0x22>
 8012336:	4b04      	ldr	r3, [pc, #16]	; (8012348 <_fflush_r+0x74>)
 8012338:	429c      	cmp	r4, r3
 801233a:	bf08      	it	eq
 801233c:	68ec      	ldreq	r4, [r5, #12]
 801233e:	e7da      	b.n	80122f6 <_fflush_r+0x22>
 8012340:	08012c7c 	.word	0x08012c7c
 8012344:	08012c9c 	.word	0x08012c9c
 8012348:	08012c5c 	.word	0x08012c5c

0801234c <std>:
 801234c:	2300      	movs	r3, #0
 801234e:	b510      	push	{r4, lr}
 8012350:	4604      	mov	r4, r0
 8012352:	e9c0 3300 	strd	r3, r3, [r0]
 8012356:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801235a:	6083      	str	r3, [r0, #8]
 801235c:	8181      	strh	r1, [r0, #12]
 801235e:	6643      	str	r3, [r0, #100]	; 0x64
 8012360:	81c2      	strh	r2, [r0, #14]
 8012362:	6183      	str	r3, [r0, #24]
 8012364:	4619      	mov	r1, r3
 8012366:	2208      	movs	r2, #8
 8012368:	305c      	adds	r0, #92	; 0x5c
 801236a:	f7ff fae1 	bl	8011930 <memset>
 801236e:	4b05      	ldr	r3, [pc, #20]	; (8012384 <std+0x38>)
 8012370:	6263      	str	r3, [r4, #36]	; 0x24
 8012372:	4b05      	ldr	r3, [pc, #20]	; (8012388 <std+0x3c>)
 8012374:	62a3      	str	r3, [r4, #40]	; 0x28
 8012376:	4b05      	ldr	r3, [pc, #20]	; (801238c <std+0x40>)
 8012378:	62e3      	str	r3, [r4, #44]	; 0x2c
 801237a:	4b05      	ldr	r3, [pc, #20]	; (8012390 <std+0x44>)
 801237c:	6224      	str	r4, [r4, #32]
 801237e:	6323      	str	r3, [r4, #48]	; 0x30
 8012380:	bd10      	pop	{r4, pc}
 8012382:	bf00      	nop
 8012384:	08012871 	.word	0x08012871
 8012388:	08012893 	.word	0x08012893
 801238c:	080128cb 	.word	0x080128cb
 8012390:	080128ef 	.word	0x080128ef

08012394 <_cleanup_r>:
 8012394:	4901      	ldr	r1, [pc, #4]	; (801239c <_cleanup_r+0x8>)
 8012396:	f000 b8af 	b.w	80124f8 <_fwalk_reent>
 801239a:	bf00      	nop
 801239c:	080122d5 	.word	0x080122d5

080123a0 <__sfmoreglue>:
 80123a0:	b570      	push	{r4, r5, r6, lr}
 80123a2:	2268      	movs	r2, #104	; 0x68
 80123a4:	1e4d      	subs	r5, r1, #1
 80123a6:	4355      	muls	r5, r2
 80123a8:	460e      	mov	r6, r1
 80123aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80123ae:	f000 f997 	bl	80126e0 <_malloc_r>
 80123b2:	4604      	mov	r4, r0
 80123b4:	b140      	cbz	r0, 80123c8 <__sfmoreglue+0x28>
 80123b6:	2100      	movs	r1, #0
 80123b8:	e9c0 1600 	strd	r1, r6, [r0]
 80123bc:	300c      	adds	r0, #12
 80123be:	60a0      	str	r0, [r4, #8]
 80123c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80123c4:	f7ff fab4 	bl	8011930 <memset>
 80123c8:	4620      	mov	r0, r4
 80123ca:	bd70      	pop	{r4, r5, r6, pc}

080123cc <__sfp_lock_acquire>:
 80123cc:	4801      	ldr	r0, [pc, #4]	; (80123d4 <__sfp_lock_acquire+0x8>)
 80123ce:	f000 b8b3 	b.w	8012538 <__retarget_lock_acquire_recursive>
 80123d2:	bf00      	nop
 80123d4:	24015345 	.word	0x24015345

080123d8 <__sfp_lock_release>:
 80123d8:	4801      	ldr	r0, [pc, #4]	; (80123e0 <__sfp_lock_release+0x8>)
 80123da:	f000 b8ae 	b.w	801253a <__retarget_lock_release_recursive>
 80123de:	bf00      	nop
 80123e0:	24015345 	.word	0x24015345

080123e4 <__sinit_lock_acquire>:
 80123e4:	4801      	ldr	r0, [pc, #4]	; (80123ec <__sinit_lock_acquire+0x8>)
 80123e6:	f000 b8a7 	b.w	8012538 <__retarget_lock_acquire_recursive>
 80123ea:	bf00      	nop
 80123ec:	24015346 	.word	0x24015346

080123f0 <__sinit_lock_release>:
 80123f0:	4801      	ldr	r0, [pc, #4]	; (80123f8 <__sinit_lock_release+0x8>)
 80123f2:	f000 b8a2 	b.w	801253a <__retarget_lock_release_recursive>
 80123f6:	bf00      	nop
 80123f8:	24015346 	.word	0x24015346

080123fc <__sinit>:
 80123fc:	b510      	push	{r4, lr}
 80123fe:	4604      	mov	r4, r0
 8012400:	f7ff fff0 	bl	80123e4 <__sinit_lock_acquire>
 8012404:	69a3      	ldr	r3, [r4, #24]
 8012406:	b11b      	cbz	r3, 8012410 <__sinit+0x14>
 8012408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801240c:	f7ff bff0 	b.w	80123f0 <__sinit_lock_release>
 8012410:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8012414:	6523      	str	r3, [r4, #80]	; 0x50
 8012416:	4b13      	ldr	r3, [pc, #76]	; (8012464 <__sinit+0x68>)
 8012418:	4a13      	ldr	r2, [pc, #76]	; (8012468 <__sinit+0x6c>)
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	62a2      	str	r2, [r4, #40]	; 0x28
 801241e:	42a3      	cmp	r3, r4
 8012420:	bf04      	itt	eq
 8012422:	2301      	moveq	r3, #1
 8012424:	61a3      	streq	r3, [r4, #24]
 8012426:	4620      	mov	r0, r4
 8012428:	f000 f820 	bl	801246c <__sfp>
 801242c:	6060      	str	r0, [r4, #4]
 801242e:	4620      	mov	r0, r4
 8012430:	f000 f81c 	bl	801246c <__sfp>
 8012434:	60a0      	str	r0, [r4, #8]
 8012436:	4620      	mov	r0, r4
 8012438:	f000 f818 	bl	801246c <__sfp>
 801243c:	2200      	movs	r2, #0
 801243e:	60e0      	str	r0, [r4, #12]
 8012440:	2104      	movs	r1, #4
 8012442:	6860      	ldr	r0, [r4, #4]
 8012444:	f7ff ff82 	bl	801234c <std>
 8012448:	68a0      	ldr	r0, [r4, #8]
 801244a:	2201      	movs	r2, #1
 801244c:	2109      	movs	r1, #9
 801244e:	f7ff ff7d 	bl	801234c <std>
 8012452:	68e0      	ldr	r0, [r4, #12]
 8012454:	2202      	movs	r2, #2
 8012456:	2112      	movs	r1, #18
 8012458:	f7ff ff78 	bl	801234c <std>
 801245c:	2301      	movs	r3, #1
 801245e:	61a3      	str	r3, [r4, #24]
 8012460:	e7d2      	b.n	8012408 <__sinit+0xc>
 8012462:	bf00      	nop
 8012464:	08012c24 	.word	0x08012c24
 8012468:	08012395 	.word	0x08012395

0801246c <__sfp>:
 801246c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801246e:	4607      	mov	r7, r0
 8012470:	f7ff ffac 	bl	80123cc <__sfp_lock_acquire>
 8012474:	4b1e      	ldr	r3, [pc, #120]	; (80124f0 <__sfp+0x84>)
 8012476:	681e      	ldr	r6, [r3, #0]
 8012478:	69b3      	ldr	r3, [r6, #24]
 801247a:	b913      	cbnz	r3, 8012482 <__sfp+0x16>
 801247c:	4630      	mov	r0, r6
 801247e:	f7ff ffbd 	bl	80123fc <__sinit>
 8012482:	3648      	adds	r6, #72	; 0x48
 8012484:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012488:	3b01      	subs	r3, #1
 801248a:	d503      	bpl.n	8012494 <__sfp+0x28>
 801248c:	6833      	ldr	r3, [r6, #0]
 801248e:	b30b      	cbz	r3, 80124d4 <__sfp+0x68>
 8012490:	6836      	ldr	r6, [r6, #0]
 8012492:	e7f7      	b.n	8012484 <__sfp+0x18>
 8012494:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012498:	b9d5      	cbnz	r5, 80124d0 <__sfp+0x64>
 801249a:	4b16      	ldr	r3, [pc, #88]	; (80124f4 <__sfp+0x88>)
 801249c:	60e3      	str	r3, [r4, #12]
 801249e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80124a2:	6665      	str	r5, [r4, #100]	; 0x64
 80124a4:	f000 f847 	bl	8012536 <__retarget_lock_init_recursive>
 80124a8:	f7ff ff96 	bl	80123d8 <__sfp_lock_release>
 80124ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80124b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80124b4:	6025      	str	r5, [r4, #0]
 80124b6:	61a5      	str	r5, [r4, #24]
 80124b8:	2208      	movs	r2, #8
 80124ba:	4629      	mov	r1, r5
 80124bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80124c0:	f7ff fa36 	bl	8011930 <memset>
 80124c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80124c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80124cc:	4620      	mov	r0, r4
 80124ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124d0:	3468      	adds	r4, #104	; 0x68
 80124d2:	e7d9      	b.n	8012488 <__sfp+0x1c>
 80124d4:	2104      	movs	r1, #4
 80124d6:	4638      	mov	r0, r7
 80124d8:	f7ff ff62 	bl	80123a0 <__sfmoreglue>
 80124dc:	4604      	mov	r4, r0
 80124de:	6030      	str	r0, [r6, #0]
 80124e0:	2800      	cmp	r0, #0
 80124e2:	d1d5      	bne.n	8012490 <__sfp+0x24>
 80124e4:	f7ff ff78 	bl	80123d8 <__sfp_lock_release>
 80124e8:	230c      	movs	r3, #12
 80124ea:	603b      	str	r3, [r7, #0]
 80124ec:	e7ee      	b.n	80124cc <__sfp+0x60>
 80124ee:	bf00      	nop
 80124f0:	08012c24 	.word	0x08012c24
 80124f4:	ffff0001 	.word	0xffff0001

080124f8 <_fwalk_reent>:
 80124f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80124fc:	4606      	mov	r6, r0
 80124fe:	4688      	mov	r8, r1
 8012500:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012504:	2700      	movs	r7, #0
 8012506:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801250a:	f1b9 0901 	subs.w	r9, r9, #1
 801250e:	d505      	bpl.n	801251c <_fwalk_reent+0x24>
 8012510:	6824      	ldr	r4, [r4, #0]
 8012512:	2c00      	cmp	r4, #0
 8012514:	d1f7      	bne.n	8012506 <_fwalk_reent+0xe>
 8012516:	4638      	mov	r0, r7
 8012518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801251c:	89ab      	ldrh	r3, [r5, #12]
 801251e:	2b01      	cmp	r3, #1
 8012520:	d907      	bls.n	8012532 <_fwalk_reent+0x3a>
 8012522:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012526:	3301      	adds	r3, #1
 8012528:	d003      	beq.n	8012532 <_fwalk_reent+0x3a>
 801252a:	4629      	mov	r1, r5
 801252c:	4630      	mov	r0, r6
 801252e:	47c0      	blx	r8
 8012530:	4307      	orrs	r7, r0
 8012532:	3568      	adds	r5, #104	; 0x68
 8012534:	e7e9      	b.n	801250a <_fwalk_reent+0x12>

08012536 <__retarget_lock_init_recursive>:
 8012536:	4770      	bx	lr

08012538 <__retarget_lock_acquire_recursive>:
 8012538:	4770      	bx	lr

0801253a <__retarget_lock_release_recursive>:
 801253a:	4770      	bx	lr

0801253c <__swhatbuf_r>:
 801253c:	b570      	push	{r4, r5, r6, lr}
 801253e:	460e      	mov	r6, r1
 8012540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012544:	2900      	cmp	r1, #0
 8012546:	b096      	sub	sp, #88	; 0x58
 8012548:	4614      	mov	r4, r2
 801254a:	461d      	mov	r5, r3
 801254c:	da08      	bge.n	8012560 <__swhatbuf_r+0x24>
 801254e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8012552:	2200      	movs	r2, #0
 8012554:	602a      	str	r2, [r5, #0]
 8012556:	061a      	lsls	r2, r3, #24
 8012558:	d410      	bmi.n	801257c <__swhatbuf_r+0x40>
 801255a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801255e:	e00e      	b.n	801257e <__swhatbuf_r+0x42>
 8012560:	466a      	mov	r2, sp
 8012562:	f000 f9eb 	bl	801293c <_fstat_r>
 8012566:	2800      	cmp	r0, #0
 8012568:	dbf1      	blt.n	801254e <__swhatbuf_r+0x12>
 801256a:	9a01      	ldr	r2, [sp, #4]
 801256c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012570:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8012574:	425a      	negs	r2, r3
 8012576:	415a      	adcs	r2, r3
 8012578:	602a      	str	r2, [r5, #0]
 801257a:	e7ee      	b.n	801255a <__swhatbuf_r+0x1e>
 801257c:	2340      	movs	r3, #64	; 0x40
 801257e:	2000      	movs	r0, #0
 8012580:	6023      	str	r3, [r4, #0]
 8012582:	b016      	add	sp, #88	; 0x58
 8012584:	bd70      	pop	{r4, r5, r6, pc}
	...

08012588 <__smakebuf_r>:
 8012588:	898b      	ldrh	r3, [r1, #12]
 801258a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801258c:	079d      	lsls	r5, r3, #30
 801258e:	4606      	mov	r6, r0
 8012590:	460c      	mov	r4, r1
 8012592:	d507      	bpl.n	80125a4 <__smakebuf_r+0x1c>
 8012594:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012598:	6023      	str	r3, [r4, #0]
 801259a:	6123      	str	r3, [r4, #16]
 801259c:	2301      	movs	r3, #1
 801259e:	6163      	str	r3, [r4, #20]
 80125a0:	b002      	add	sp, #8
 80125a2:	bd70      	pop	{r4, r5, r6, pc}
 80125a4:	ab01      	add	r3, sp, #4
 80125a6:	466a      	mov	r2, sp
 80125a8:	f7ff ffc8 	bl	801253c <__swhatbuf_r>
 80125ac:	9900      	ldr	r1, [sp, #0]
 80125ae:	4605      	mov	r5, r0
 80125b0:	4630      	mov	r0, r6
 80125b2:	f000 f895 	bl	80126e0 <_malloc_r>
 80125b6:	b948      	cbnz	r0, 80125cc <__smakebuf_r+0x44>
 80125b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80125bc:	059a      	lsls	r2, r3, #22
 80125be:	d4ef      	bmi.n	80125a0 <__smakebuf_r+0x18>
 80125c0:	f023 0303 	bic.w	r3, r3, #3
 80125c4:	f043 0302 	orr.w	r3, r3, #2
 80125c8:	81a3      	strh	r3, [r4, #12]
 80125ca:	e7e3      	b.n	8012594 <__smakebuf_r+0xc>
 80125cc:	4b0d      	ldr	r3, [pc, #52]	; (8012604 <__smakebuf_r+0x7c>)
 80125ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80125d0:	89a3      	ldrh	r3, [r4, #12]
 80125d2:	6020      	str	r0, [r4, #0]
 80125d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80125d8:	81a3      	strh	r3, [r4, #12]
 80125da:	9b00      	ldr	r3, [sp, #0]
 80125dc:	6163      	str	r3, [r4, #20]
 80125de:	9b01      	ldr	r3, [sp, #4]
 80125e0:	6120      	str	r0, [r4, #16]
 80125e2:	b15b      	cbz	r3, 80125fc <__smakebuf_r+0x74>
 80125e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80125e8:	4630      	mov	r0, r6
 80125ea:	f000 f9b9 	bl	8012960 <_isatty_r>
 80125ee:	b128      	cbz	r0, 80125fc <__smakebuf_r+0x74>
 80125f0:	89a3      	ldrh	r3, [r4, #12]
 80125f2:	f023 0303 	bic.w	r3, r3, #3
 80125f6:	f043 0301 	orr.w	r3, r3, #1
 80125fa:	81a3      	strh	r3, [r4, #12]
 80125fc:	89a0      	ldrh	r0, [r4, #12]
 80125fe:	4305      	orrs	r5, r0
 8012600:	81a5      	strh	r5, [r4, #12]
 8012602:	e7cd      	b.n	80125a0 <__smakebuf_r+0x18>
 8012604:	08012395 	.word	0x08012395

08012608 <_free_r>:
 8012608:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801260a:	2900      	cmp	r1, #0
 801260c:	d044      	beq.n	8012698 <_free_r+0x90>
 801260e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012612:	9001      	str	r0, [sp, #4]
 8012614:	2b00      	cmp	r3, #0
 8012616:	f1a1 0404 	sub.w	r4, r1, #4
 801261a:	bfb8      	it	lt
 801261c:	18e4      	addlt	r4, r4, r3
 801261e:	f000 f9c1 	bl	80129a4 <__malloc_lock>
 8012622:	4a1e      	ldr	r2, [pc, #120]	; (801269c <_free_r+0x94>)
 8012624:	9801      	ldr	r0, [sp, #4]
 8012626:	6813      	ldr	r3, [r2, #0]
 8012628:	b933      	cbnz	r3, 8012638 <_free_r+0x30>
 801262a:	6063      	str	r3, [r4, #4]
 801262c:	6014      	str	r4, [r2, #0]
 801262e:	b003      	add	sp, #12
 8012630:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012634:	f000 b9bc 	b.w	80129b0 <__malloc_unlock>
 8012638:	42a3      	cmp	r3, r4
 801263a:	d908      	bls.n	801264e <_free_r+0x46>
 801263c:	6825      	ldr	r5, [r4, #0]
 801263e:	1961      	adds	r1, r4, r5
 8012640:	428b      	cmp	r3, r1
 8012642:	bf01      	itttt	eq
 8012644:	6819      	ldreq	r1, [r3, #0]
 8012646:	685b      	ldreq	r3, [r3, #4]
 8012648:	1949      	addeq	r1, r1, r5
 801264a:	6021      	streq	r1, [r4, #0]
 801264c:	e7ed      	b.n	801262a <_free_r+0x22>
 801264e:	461a      	mov	r2, r3
 8012650:	685b      	ldr	r3, [r3, #4]
 8012652:	b10b      	cbz	r3, 8012658 <_free_r+0x50>
 8012654:	42a3      	cmp	r3, r4
 8012656:	d9fa      	bls.n	801264e <_free_r+0x46>
 8012658:	6811      	ldr	r1, [r2, #0]
 801265a:	1855      	adds	r5, r2, r1
 801265c:	42a5      	cmp	r5, r4
 801265e:	d10b      	bne.n	8012678 <_free_r+0x70>
 8012660:	6824      	ldr	r4, [r4, #0]
 8012662:	4421      	add	r1, r4
 8012664:	1854      	adds	r4, r2, r1
 8012666:	42a3      	cmp	r3, r4
 8012668:	6011      	str	r1, [r2, #0]
 801266a:	d1e0      	bne.n	801262e <_free_r+0x26>
 801266c:	681c      	ldr	r4, [r3, #0]
 801266e:	685b      	ldr	r3, [r3, #4]
 8012670:	6053      	str	r3, [r2, #4]
 8012672:	4421      	add	r1, r4
 8012674:	6011      	str	r1, [r2, #0]
 8012676:	e7da      	b.n	801262e <_free_r+0x26>
 8012678:	d902      	bls.n	8012680 <_free_r+0x78>
 801267a:	230c      	movs	r3, #12
 801267c:	6003      	str	r3, [r0, #0]
 801267e:	e7d6      	b.n	801262e <_free_r+0x26>
 8012680:	6825      	ldr	r5, [r4, #0]
 8012682:	1961      	adds	r1, r4, r5
 8012684:	428b      	cmp	r3, r1
 8012686:	bf04      	itt	eq
 8012688:	6819      	ldreq	r1, [r3, #0]
 801268a:	685b      	ldreq	r3, [r3, #4]
 801268c:	6063      	str	r3, [r4, #4]
 801268e:	bf04      	itt	eq
 8012690:	1949      	addeq	r1, r1, r5
 8012692:	6021      	streq	r1, [r4, #0]
 8012694:	6054      	str	r4, [r2, #4]
 8012696:	e7ca      	b.n	801262e <_free_r+0x26>
 8012698:	b003      	add	sp, #12
 801269a:	bd30      	pop	{r4, r5, pc}
 801269c:	24015348 	.word	0x24015348

080126a0 <sbrk_aligned>:
 80126a0:	b570      	push	{r4, r5, r6, lr}
 80126a2:	4e0e      	ldr	r6, [pc, #56]	; (80126dc <sbrk_aligned+0x3c>)
 80126a4:	460c      	mov	r4, r1
 80126a6:	6831      	ldr	r1, [r6, #0]
 80126a8:	4605      	mov	r5, r0
 80126aa:	b911      	cbnz	r1, 80126b2 <sbrk_aligned+0x12>
 80126ac:	f000 f88c 	bl	80127c8 <_sbrk_r>
 80126b0:	6030      	str	r0, [r6, #0]
 80126b2:	4621      	mov	r1, r4
 80126b4:	4628      	mov	r0, r5
 80126b6:	f000 f887 	bl	80127c8 <_sbrk_r>
 80126ba:	1c43      	adds	r3, r0, #1
 80126bc:	d00a      	beq.n	80126d4 <sbrk_aligned+0x34>
 80126be:	1cc4      	adds	r4, r0, #3
 80126c0:	f024 0403 	bic.w	r4, r4, #3
 80126c4:	42a0      	cmp	r0, r4
 80126c6:	d007      	beq.n	80126d8 <sbrk_aligned+0x38>
 80126c8:	1a21      	subs	r1, r4, r0
 80126ca:	4628      	mov	r0, r5
 80126cc:	f000 f87c 	bl	80127c8 <_sbrk_r>
 80126d0:	3001      	adds	r0, #1
 80126d2:	d101      	bne.n	80126d8 <sbrk_aligned+0x38>
 80126d4:	f04f 34ff 	mov.w	r4, #4294967295
 80126d8:	4620      	mov	r0, r4
 80126da:	bd70      	pop	{r4, r5, r6, pc}
 80126dc:	2401534c 	.word	0x2401534c

080126e0 <_malloc_r>:
 80126e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126e4:	1ccd      	adds	r5, r1, #3
 80126e6:	f025 0503 	bic.w	r5, r5, #3
 80126ea:	3508      	adds	r5, #8
 80126ec:	2d0c      	cmp	r5, #12
 80126ee:	bf38      	it	cc
 80126f0:	250c      	movcc	r5, #12
 80126f2:	2d00      	cmp	r5, #0
 80126f4:	4607      	mov	r7, r0
 80126f6:	db01      	blt.n	80126fc <_malloc_r+0x1c>
 80126f8:	42a9      	cmp	r1, r5
 80126fa:	d905      	bls.n	8012708 <_malloc_r+0x28>
 80126fc:	230c      	movs	r3, #12
 80126fe:	603b      	str	r3, [r7, #0]
 8012700:	2600      	movs	r6, #0
 8012702:	4630      	mov	r0, r6
 8012704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012708:	4e2e      	ldr	r6, [pc, #184]	; (80127c4 <_malloc_r+0xe4>)
 801270a:	f000 f94b 	bl	80129a4 <__malloc_lock>
 801270e:	6833      	ldr	r3, [r6, #0]
 8012710:	461c      	mov	r4, r3
 8012712:	bb34      	cbnz	r4, 8012762 <_malloc_r+0x82>
 8012714:	4629      	mov	r1, r5
 8012716:	4638      	mov	r0, r7
 8012718:	f7ff ffc2 	bl	80126a0 <sbrk_aligned>
 801271c:	1c43      	adds	r3, r0, #1
 801271e:	4604      	mov	r4, r0
 8012720:	d14d      	bne.n	80127be <_malloc_r+0xde>
 8012722:	6834      	ldr	r4, [r6, #0]
 8012724:	4626      	mov	r6, r4
 8012726:	2e00      	cmp	r6, #0
 8012728:	d140      	bne.n	80127ac <_malloc_r+0xcc>
 801272a:	6823      	ldr	r3, [r4, #0]
 801272c:	4631      	mov	r1, r6
 801272e:	4638      	mov	r0, r7
 8012730:	eb04 0803 	add.w	r8, r4, r3
 8012734:	f000 f848 	bl	80127c8 <_sbrk_r>
 8012738:	4580      	cmp	r8, r0
 801273a:	d13a      	bne.n	80127b2 <_malloc_r+0xd2>
 801273c:	6821      	ldr	r1, [r4, #0]
 801273e:	3503      	adds	r5, #3
 8012740:	1a6d      	subs	r5, r5, r1
 8012742:	f025 0503 	bic.w	r5, r5, #3
 8012746:	3508      	adds	r5, #8
 8012748:	2d0c      	cmp	r5, #12
 801274a:	bf38      	it	cc
 801274c:	250c      	movcc	r5, #12
 801274e:	4629      	mov	r1, r5
 8012750:	4638      	mov	r0, r7
 8012752:	f7ff ffa5 	bl	80126a0 <sbrk_aligned>
 8012756:	3001      	adds	r0, #1
 8012758:	d02b      	beq.n	80127b2 <_malloc_r+0xd2>
 801275a:	6823      	ldr	r3, [r4, #0]
 801275c:	442b      	add	r3, r5
 801275e:	6023      	str	r3, [r4, #0]
 8012760:	e00e      	b.n	8012780 <_malloc_r+0xa0>
 8012762:	6822      	ldr	r2, [r4, #0]
 8012764:	1b52      	subs	r2, r2, r5
 8012766:	d41e      	bmi.n	80127a6 <_malloc_r+0xc6>
 8012768:	2a0b      	cmp	r2, #11
 801276a:	d916      	bls.n	801279a <_malloc_r+0xba>
 801276c:	1961      	adds	r1, r4, r5
 801276e:	42a3      	cmp	r3, r4
 8012770:	6025      	str	r5, [r4, #0]
 8012772:	bf18      	it	ne
 8012774:	6059      	strne	r1, [r3, #4]
 8012776:	6863      	ldr	r3, [r4, #4]
 8012778:	bf08      	it	eq
 801277a:	6031      	streq	r1, [r6, #0]
 801277c:	5162      	str	r2, [r4, r5]
 801277e:	604b      	str	r3, [r1, #4]
 8012780:	4638      	mov	r0, r7
 8012782:	f104 060b 	add.w	r6, r4, #11
 8012786:	f000 f913 	bl	80129b0 <__malloc_unlock>
 801278a:	f026 0607 	bic.w	r6, r6, #7
 801278e:	1d23      	adds	r3, r4, #4
 8012790:	1af2      	subs	r2, r6, r3
 8012792:	d0b6      	beq.n	8012702 <_malloc_r+0x22>
 8012794:	1b9b      	subs	r3, r3, r6
 8012796:	50a3      	str	r3, [r4, r2]
 8012798:	e7b3      	b.n	8012702 <_malloc_r+0x22>
 801279a:	6862      	ldr	r2, [r4, #4]
 801279c:	42a3      	cmp	r3, r4
 801279e:	bf0c      	ite	eq
 80127a0:	6032      	streq	r2, [r6, #0]
 80127a2:	605a      	strne	r2, [r3, #4]
 80127a4:	e7ec      	b.n	8012780 <_malloc_r+0xa0>
 80127a6:	4623      	mov	r3, r4
 80127a8:	6864      	ldr	r4, [r4, #4]
 80127aa:	e7b2      	b.n	8012712 <_malloc_r+0x32>
 80127ac:	4634      	mov	r4, r6
 80127ae:	6876      	ldr	r6, [r6, #4]
 80127b0:	e7b9      	b.n	8012726 <_malloc_r+0x46>
 80127b2:	230c      	movs	r3, #12
 80127b4:	603b      	str	r3, [r7, #0]
 80127b6:	4638      	mov	r0, r7
 80127b8:	f000 f8fa 	bl	80129b0 <__malloc_unlock>
 80127bc:	e7a1      	b.n	8012702 <_malloc_r+0x22>
 80127be:	6025      	str	r5, [r4, #0]
 80127c0:	e7de      	b.n	8012780 <_malloc_r+0xa0>
 80127c2:	bf00      	nop
 80127c4:	24015348 	.word	0x24015348

080127c8 <_sbrk_r>:
 80127c8:	b538      	push	{r3, r4, r5, lr}
 80127ca:	4d06      	ldr	r5, [pc, #24]	; (80127e4 <_sbrk_r+0x1c>)
 80127cc:	2300      	movs	r3, #0
 80127ce:	4604      	mov	r4, r0
 80127d0:	4608      	mov	r0, r1
 80127d2:	602b      	str	r3, [r5, #0]
 80127d4:	f7ee ffb2 	bl	800173c <_sbrk>
 80127d8:	1c43      	adds	r3, r0, #1
 80127da:	d102      	bne.n	80127e2 <_sbrk_r+0x1a>
 80127dc:	682b      	ldr	r3, [r5, #0]
 80127de:	b103      	cbz	r3, 80127e2 <_sbrk_r+0x1a>
 80127e0:	6023      	str	r3, [r4, #0]
 80127e2:	bd38      	pop	{r3, r4, r5, pc}
 80127e4:	24015350 	.word	0x24015350

080127e8 <_raise_r>:
 80127e8:	291f      	cmp	r1, #31
 80127ea:	b538      	push	{r3, r4, r5, lr}
 80127ec:	4604      	mov	r4, r0
 80127ee:	460d      	mov	r5, r1
 80127f0:	d904      	bls.n	80127fc <_raise_r+0x14>
 80127f2:	2316      	movs	r3, #22
 80127f4:	6003      	str	r3, [r0, #0]
 80127f6:	f04f 30ff 	mov.w	r0, #4294967295
 80127fa:	bd38      	pop	{r3, r4, r5, pc}
 80127fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80127fe:	b112      	cbz	r2, 8012806 <_raise_r+0x1e>
 8012800:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012804:	b94b      	cbnz	r3, 801281a <_raise_r+0x32>
 8012806:	4620      	mov	r0, r4
 8012808:	f000 f830 	bl	801286c <_getpid_r>
 801280c:	462a      	mov	r2, r5
 801280e:	4601      	mov	r1, r0
 8012810:	4620      	mov	r0, r4
 8012812:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012816:	f000 b817 	b.w	8012848 <_kill_r>
 801281a:	2b01      	cmp	r3, #1
 801281c:	d00a      	beq.n	8012834 <_raise_r+0x4c>
 801281e:	1c59      	adds	r1, r3, #1
 8012820:	d103      	bne.n	801282a <_raise_r+0x42>
 8012822:	2316      	movs	r3, #22
 8012824:	6003      	str	r3, [r0, #0]
 8012826:	2001      	movs	r0, #1
 8012828:	e7e7      	b.n	80127fa <_raise_r+0x12>
 801282a:	2400      	movs	r4, #0
 801282c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012830:	4628      	mov	r0, r5
 8012832:	4798      	blx	r3
 8012834:	2000      	movs	r0, #0
 8012836:	e7e0      	b.n	80127fa <_raise_r+0x12>

08012838 <raise>:
 8012838:	4b02      	ldr	r3, [pc, #8]	; (8012844 <raise+0xc>)
 801283a:	4601      	mov	r1, r0
 801283c:	6818      	ldr	r0, [r3, #0]
 801283e:	f7ff bfd3 	b.w	80127e8 <_raise_r>
 8012842:	bf00      	nop
 8012844:	24000074 	.word	0x24000074

08012848 <_kill_r>:
 8012848:	b538      	push	{r3, r4, r5, lr}
 801284a:	4d07      	ldr	r5, [pc, #28]	; (8012868 <_kill_r+0x20>)
 801284c:	2300      	movs	r3, #0
 801284e:	4604      	mov	r4, r0
 8012850:	4608      	mov	r0, r1
 8012852:	4611      	mov	r1, r2
 8012854:	602b      	str	r3, [r5, #0]
 8012856:	f7ee fee9 	bl	800162c <_kill>
 801285a:	1c43      	adds	r3, r0, #1
 801285c:	d102      	bne.n	8012864 <_kill_r+0x1c>
 801285e:	682b      	ldr	r3, [r5, #0]
 8012860:	b103      	cbz	r3, 8012864 <_kill_r+0x1c>
 8012862:	6023      	str	r3, [r4, #0]
 8012864:	bd38      	pop	{r3, r4, r5, pc}
 8012866:	bf00      	nop
 8012868:	24015350 	.word	0x24015350

0801286c <_getpid_r>:
 801286c:	f7ee bed6 	b.w	800161c <_getpid>

08012870 <__sread>:
 8012870:	b510      	push	{r4, lr}
 8012872:	460c      	mov	r4, r1
 8012874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012878:	f000 f8a0 	bl	80129bc <_read_r>
 801287c:	2800      	cmp	r0, #0
 801287e:	bfab      	itete	ge
 8012880:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012882:	89a3      	ldrhlt	r3, [r4, #12]
 8012884:	181b      	addge	r3, r3, r0
 8012886:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801288a:	bfac      	ite	ge
 801288c:	6563      	strge	r3, [r4, #84]	; 0x54
 801288e:	81a3      	strhlt	r3, [r4, #12]
 8012890:	bd10      	pop	{r4, pc}

08012892 <__swrite>:
 8012892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012896:	461f      	mov	r7, r3
 8012898:	898b      	ldrh	r3, [r1, #12]
 801289a:	05db      	lsls	r3, r3, #23
 801289c:	4605      	mov	r5, r0
 801289e:	460c      	mov	r4, r1
 80128a0:	4616      	mov	r6, r2
 80128a2:	d505      	bpl.n	80128b0 <__swrite+0x1e>
 80128a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128a8:	2302      	movs	r3, #2
 80128aa:	2200      	movs	r2, #0
 80128ac:	f000 f868 	bl	8012980 <_lseek_r>
 80128b0:	89a3      	ldrh	r3, [r4, #12]
 80128b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80128b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80128ba:	81a3      	strh	r3, [r4, #12]
 80128bc:	4632      	mov	r2, r6
 80128be:	463b      	mov	r3, r7
 80128c0:	4628      	mov	r0, r5
 80128c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80128c6:	f000 b817 	b.w	80128f8 <_write_r>

080128ca <__sseek>:
 80128ca:	b510      	push	{r4, lr}
 80128cc:	460c      	mov	r4, r1
 80128ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128d2:	f000 f855 	bl	8012980 <_lseek_r>
 80128d6:	1c43      	adds	r3, r0, #1
 80128d8:	89a3      	ldrh	r3, [r4, #12]
 80128da:	bf15      	itete	ne
 80128dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80128de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80128e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80128e6:	81a3      	strheq	r3, [r4, #12]
 80128e8:	bf18      	it	ne
 80128ea:	81a3      	strhne	r3, [r4, #12]
 80128ec:	bd10      	pop	{r4, pc}

080128ee <__sclose>:
 80128ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128f2:	f000 b813 	b.w	801291c <_close_r>
	...

080128f8 <_write_r>:
 80128f8:	b538      	push	{r3, r4, r5, lr}
 80128fa:	4d07      	ldr	r5, [pc, #28]	; (8012918 <_write_r+0x20>)
 80128fc:	4604      	mov	r4, r0
 80128fe:	4608      	mov	r0, r1
 8012900:	4611      	mov	r1, r2
 8012902:	2200      	movs	r2, #0
 8012904:	602a      	str	r2, [r5, #0]
 8012906:	461a      	mov	r2, r3
 8012908:	f7ee fec7 	bl	800169a <_write>
 801290c:	1c43      	adds	r3, r0, #1
 801290e:	d102      	bne.n	8012916 <_write_r+0x1e>
 8012910:	682b      	ldr	r3, [r5, #0]
 8012912:	b103      	cbz	r3, 8012916 <_write_r+0x1e>
 8012914:	6023      	str	r3, [r4, #0]
 8012916:	bd38      	pop	{r3, r4, r5, pc}
 8012918:	24015350 	.word	0x24015350

0801291c <_close_r>:
 801291c:	b538      	push	{r3, r4, r5, lr}
 801291e:	4d06      	ldr	r5, [pc, #24]	; (8012938 <_close_r+0x1c>)
 8012920:	2300      	movs	r3, #0
 8012922:	4604      	mov	r4, r0
 8012924:	4608      	mov	r0, r1
 8012926:	602b      	str	r3, [r5, #0]
 8012928:	f7ee fed3 	bl	80016d2 <_close>
 801292c:	1c43      	adds	r3, r0, #1
 801292e:	d102      	bne.n	8012936 <_close_r+0x1a>
 8012930:	682b      	ldr	r3, [r5, #0]
 8012932:	b103      	cbz	r3, 8012936 <_close_r+0x1a>
 8012934:	6023      	str	r3, [r4, #0]
 8012936:	bd38      	pop	{r3, r4, r5, pc}
 8012938:	24015350 	.word	0x24015350

0801293c <_fstat_r>:
 801293c:	b538      	push	{r3, r4, r5, lr}
 801293e:	4d07      	ldr	r5, [pc, #28]	; (801295c <_fstat_r+0x20>)
 8012940:	2300      	movs	r3, #0
 8012942:	4604      	mov	r4, r0
 8012944:	4608      	mov	r0, r1
 8012946:	4611      	mov	r1, r2
 8012948:	602b      	str	r3, [r5, #0]
 801294a:	f7ee fece 	bl	80016ea <_fstat>
 801294e:	1c43      	adds	r3, r0, #1
 8012950:	d102      	bne.n	8012958 <_fstat_r+0x1c>
 8012952:	682b      	ldr	r3, [r5, #0]
 8012954:	b103      	cbz	r3, 8012958 <_fstat_r+0x1c>
 8012956:	6023      	str	r3, [r4, #0]
 8012958:	bd38      	pop	{r3, r4, r5, pc}
 801295a:	bf00      	nop
 801295c:	24015350 	.word	0x24015350

08012960 <_isatty_r>:
 8012960:	b538      	push	{r3, r4, r5, lr}
 8012962:	4d06      	ldr	r5, [pc, #24]	; (801297c <_isatty_r+0x1c>)
 8012964:	2300      	movs	r3, #0
 8012966:	4604      	mov	r4, r0
 8012968:	4608      	mov	r0, r1
 801296a:	602b      	str	r3, [r5, #0]
 801296c:	f7ee fecd 	bl	800170a <_isatty>
 8012970:	1c43      	adds	r3, r0, #1
 8012972:	d102      	bne.n	801297a <_isatty_r+0x1a>
 8012974:	682b      	ldr	r3, [r5, #0]
 8012976:	b103      	cbz	r3, 801297a <_isatty_r+0x1a>
 8012978:	6023      	str	r3, [r4, #0]
 801297a:	bd38      	pop	{r3, r4, r5, pc}
 801297c:	24015350 	.word	0x24015350

08012980 <_lseek_r>:
 8012980:	b538      	push	{r3, r4, r5, lr}
 8012982:	4d07      	ldr	r5, [pc, #28]	; (80129a0 <_lseek_r+0x20>)
 8012984:	4604      	mov	r4, r0
 8012986:	4608      	mov	r0, r1
 8012988:	4611      	mov	r1, r2
 801298a:	2200      	movs	r2, #0
 801298c:	602a      	str	r2, [r5, #0]
 801298e:	461a      	mov	r2, r3
 8012990:	f7ee fec6 	bl	8001720 <_lseek>
 8012994:	1c43      	adds	r3, r0, #1
 8012996:	d102      	bne.n	801299e <_lseek_r+0x1e>
 8012998:	682b      	ldr	r3, [r5, #0]
 801299a:	b103      	cbz	r3, 801299e <_lseek_r+0x1e>
 801299c:	6023      	str	r3, [r4, #0]
 801299e:	bd38      	pop	{r3, r4, r5, pc}
 80129a0:	24015350 	.word	0x24015350

080129a4 <__malloc_lock>:
 80129a4:	4801      	ldr	r0, [pc, #4]	; (80129ac <__malloc_lock+0x8>)
 80129a6:	f7ff bdc7 	b.w	8012538 <__retarget_lock_acquire_recursive>
 80129aa:	bf00      	nop
 80129ac:	24015344 	.word	0x24015344

080129b0 <__malloc_unlock>:
 80129b0:	4801      	ldr	r0, [pc, #4]	; (80129b8 <__malloc_unlock+0x8>)
 80129b2:	f7ff bdc2 	b.w	801253a <__retarget_lock_release_recursive>
 80129b6:	bf00      	nop
 80129b8:	24015344 	.word	0x24015344

080129bc <_read_r>:
 80129bc:	b538      	push	{r3, r4, r5, lr}
 80129be:	4d07      	ldr	r5, [pc, #28]	; (80129dc <_read_r+0x20>)
 80129c0:	4604      	mov	r4, r0
 80129c2:	4608      	mov	r0, r1
 80129c4:	4611      	mov	r1, r2
 80129c6:	2200      	movs	r2, #0
 80129c8:	602a      	str	r2, [r5, #0]
 80129ca:	461a      	mov	r2, r3
 80129cc:	f7ee fe48 	bl	8001660 <_read>
 80129d0:	1c43      	adds	r3, r0, #1
 80129d2:	d102      	bne.n	80129da <_read_r+0x1e>
 80129d4:	682b      	ldr	r3, [r5, #0]
 80129d6:	b103      	cbz	r3, 80129da <_read_r+0x1e>
 80129d8:	6023      	str	r3, [r4, #0]
 80129da:	bd38      	pop	{r3, r4, r5, pc}
 80129dc:	24015350 	.word	0x24015350

080129e0 <_init>:
 80129e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129e2:	bf00      	nop
 80129e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129e6:	bc08      	pop	{r3}
 80129e8:	469e      	mov	lr, r3
 80129ea:	4770      	bx	lr

080129ec <_fini>:
 80129ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129ee:	bf00      	nop
 80129f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129f2:	bc08      	pop	{r3}
 80129f4:	469e      	mov	lr, r3
 80129f6:	4770      	bx	lr
