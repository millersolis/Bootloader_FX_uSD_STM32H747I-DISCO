
sample_application_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005064  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080052fc  080052fc  000152fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005334  08005334  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005334  08005334  00015334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800533c  0800533c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800533c  0800533c  0001533c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005340  08005340  00015340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08005344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  24000010  08005354  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240000c4  08005354  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001038f  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d8a  00000000  00000000  000303cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  00032158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a48  00000000  00000000  00032c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e036  00000000  00000000  00033690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e8eb  00000000  00000000  000716c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001937a8  00000000  00000000  0007ffb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00213759  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cb4  00000000  00000000  002137ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080052e4 	.word	0x080052e4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080052e4 	.word	0x080052e4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b21      	ldr	r3, [pc, #132]	; (800079c <main+0x94>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
  if ( timeout < 0 )
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
  {
  Error_Handler();
 8000732:	f000 f967 	bl	8000a04 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fa43 	bl	8000bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f831 	bl	80007a0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <main+0x94>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a15      	ldr	r2, [pc, #84]	; (800079c <main+0x94>)
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <main+0x94>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800075c:	2000      	movs	r0, #0
 800075e:	f000 fd7b 	bl	8001258 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f000 fd91 	bl	800128c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000770:	bf00      	nop
 8000772:	4b0a      	ldr	r3, [pc, #40]	; (800079c <main+0x94>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x80>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dcf4      	bgt.n	8000772 <main+0x6a>
if ( timeout < 0 )
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da01      	bge.n	8000792 <main+0x8a>
{
Error_Handler();
 800078e:	f000 f939 	bl	8000a04 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 f8bf 	bl	8000914 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000796:	f000 f871 	bl	800087c <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800079a:	e7fe      	b.n	800079a <main+0x92>
 800079c:	58024400 	.word	0x58024400

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b09c      	sub	sp, #112	; 0x70
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007aa:	224c      	movs	r2, #76	; 0x4c
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f004 fd90 	bl	80052d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2220      	movs	r2, #32
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f004 fd8a 	bl	80052d4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007c0:	2004      	movs	r0, #4
 80007c2:	f000 fd77 	bl	80012b4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <SystemClock_Config+0xd4>)
 80007cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ce:	4a29      	ldr	r2, [pc, #164]	; (8000874 <SystemClock_Config+0xd4>)
 80007d0:	f023 0301 	bic.w	r3, r3, #1
 80007d4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007d6:	4b27      	ldr	r3, [pc, #156]	; (8000874 <SystemClock_Config+0xd4>)
 80007d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	4b25      	ldr	r3, [pc, #148]	; (8000878 <SystemClock_Config+0xd8>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	4a24      	ldr	r2, [pc, #144]	; (8000878 <SystemClock_Config+0xd8>)
 80007e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007ea:	6193      	str	r3, [r2, #24]
 80007ec:	4b22      	ldr	r3, [pc, #136]	; (8000878 <SystemClock_Config+0xd8>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007f8:	bf00      	nop
 80007fa:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <SystemClock_Config+0xd8>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000802:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000806:	d1f8      	bne.n	80007fa <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000808:	2302      	movs	r3, #2
 800080a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800080c:	2301      	movs	r3, #1
 800080e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000810:	2340      	movs	r3, #64	; 0x40
 8000812:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000814:	2300      	movs	r3, #0
 8000816:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000818:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081c:	4618      	mov	r0, r3
 800081e:	f000 fda3 	bl	8001368 <HAL_RCC_OscConfig>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000828:	f000 f8ec 	bl	8000a04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082c:	233f      	movs	r3, #63	; 0x3f
 800082e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000830:	2300      	movs	r3, #0
 8000832:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000838:	2300      	movs	r3, #0
 800083a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000844:	2300      	movs	r3, #0
 8000846:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000848:	2300      	movs	r3, #0
 800084a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f001 f9e3 	bl	8001c1c <HAL_RCC_ClockConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800085c:	f000 f8d2 	bl	8000a04 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000860:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000864:	2100      	movs	r1, #0
 8000866:	2000      	movs	r0, #0
 8000868:	f001 fb8e 	bl	8001f88 <HAL_RCC_MCOConfig>
}
 800086c:	bf00      	nop
 800086e:	3770      	adds	r7, #112	; 0x70
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	58000400 	.word	0x58000400
 8000878:	58024800 	.word	0x58024800

0800087c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000880:	4b22      	ldr	r3, [pc, #136]	; (800090c <MX_USART1_UART_Init+0x90>)
 8000882:	4a23      	ldr	r2, [pc, #140]	; (8000910 <MX_USART1_UART_Init+0x94>)
 8000884:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000886:	4b21      	ldr	r3, [pc, #132]	; (800090c <MX_USART1_UART_Init+0x90>)
 8000888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800088c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b1f      	ldr	r3, [pc, #124]	; (800090c <MX_USART1_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b1d      	ldr	r3, [pc, #116]	; (800090c <MX_USART1_UART_Init+0x90>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800089a:	4b1c      	ldr	r3, [pc, #112]	; (800090c <MX_USART1_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_USART1_UART_Init+0x90>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b19      	ldr	r3, [pc, #100]	; (800090c <MX_USART1_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <MX_USART1_UART_Init+0x90>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008b2:	4b16      	ldr	r3, [pc, #88]	; (800090c <MX_USART1_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008b8:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_USART1_UART_Init+0x90>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008be:	4b13      	ldr	r3, [pc, #76]	; (800090c <MX_USART1_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008c4:	4811      	ldr	r0, [pc, #68]	; (800090c <MX_USART1_UART_Init+0x90>)
 80008c6:	f003 fc0b 	bl	80040e0 <HAL_UART_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008d0:	f000 f898 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008d4:	2100      	movs	r1, #0
 80008d6:	480d      	ldr	r0, [pc, #52]	; (800090c <MX_USART1_UART_Init+0x90>)
 80008d8:	f004 fc0d 	bl	80050f6 <HAL_UARTEx_SetTxFifoThreshold>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008e2:	f000 f88f 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e6:	2100      	movs	r1, #0
 80008e8:	4808      	ldr	r0, [pc, #32]	; (800090c <MX_USART1_UART_Init+0x90>)
 80008ea:	f004 fc42 	bl	8005172 <HAL_UARTEx_SetRxFifoThreshold>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008f4:	f000 f886 	bl	8000a04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80008f8:	4804      	ldr	r0, [pc, #16]	; (800090c <MX_USART1_UART_Init+0x90>)
 80008fa:	f004 fbc3 	bl	8005084 <HAL_UARTEx_DisableFifoMode>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000904:	f000 f87e 	bl	8000a04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}
 800090c:	2400002c 	.word	0x2400002c
 8000910:	40011000 	.word	0x40011000

08000914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	4b33      	ldr	r3, [pc, #204]	; (80009f8 <MX_GPIO_Init+0xe4>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000930:	4a31      	ldr	r2, [pc, #196]	; (80009f8 <MX_GPIO_Init+0xe4>)
 8000932:	f043 0304 	orr.w	r3, r3, #4
 8000936:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800093a:	4b2f      	ldr	r3, [pc, #188]	; (80009f8 <MX_GPIO_Init+0xe4>)
 800093c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000940:	f003 0304 	and.w	r3, r3, #4
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000948:	4b2b      	ldr	r3, [pc, #172]	; (80009f8 <MX_GPIO_Init+0xe4>)
 800094a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094e:	4a2a      	ldr	r2, [pc, #168]	; (80009f8 <MX_GPIO_Init+0xe4>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000958:	4b27      	ldr	r3, [pc, #156]	; (80009f8 <MX_GPIO_Init+0xe4>)
 800095a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000966:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <MX_GPIO_Init+0xe4>)
 8000968:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800096c:	4a22      	ldr	r2, [pc, #136]	; (80009f8 <MX_GPIO_Init+0xe4>)
 800096e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000972:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000976:	4b20      	ldr	r3, [pc, #128]	; (80009f8 <MX_GPIO_Init+0xe4>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800097c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000980:	60bb      	str	r3, [r7, #8]
 8000982:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000984:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <MX_GPIO_Init+0xe4>)
 8000986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098a:	4a1b      	ldr	r2, [pc, #108]	; (80009f8 <MX_GPIO_Init+0xe4>)
 800098c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000990:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000994:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_GPIO_Init+0xe4>)
 8000996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800099a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80009a8:	4814      	ldr	r0, [pc, #80]	; (80009fc <MX_GPIO_Init+0xe8>)
 80009aa:	f000 fc3b 	bl	8001224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 80009ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	480d      	ldr	r0, [pc, #52]	; (8000a00 <MX_GPIO_Init+0xec>)
 80009cc:	f000 fa7a 	bl	8000ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 80009d0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80009d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009da:	2301      	movs	r3, #1
 80009dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <MX_GPIO_Init+0xe8>)
 80009ea:	f000 fa6b 	bl	8000ec4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ee:	bf00      	nop
 80009f0:	3728      	adds	r7, #40	; 0x28
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	58024400 	.word	0x58024400
 80009fc:	58022000 	.word	0x58022000
 8000a00:	58020000 	.word	0x58020000

08000a04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a08:	b672      	cpsid	i
}
 8000a0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <Error_Handler+0x8>
	...

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	4b0a      	ldr	r3, [pc, #40]	; (8000a40 <HAL_MspInit+0x30>)
 8000a18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a1c:	4a08      	ldr	r2, [pc, #32]	; (8000a40 <HAL_MspInit+0x30>)
 8000a1e:	f043 0302 	orr.w	r3, r3, #2
 8000a22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_MspInit+0x30>)
 8000a28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a2c:	f003 0302 	and.w	r3, r3, #2
 8000a30:	607b      	str	r3, [r7, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a34:	bf00      	nop
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr
 8000a40:	58024400 	.word	0x58024400

08000a44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b0bc      	sub	sp, #240	; 0xf0
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a4c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
 8000a54:	605a      	str	r2, [r3, #4]
 8000a56:	609a      	str	r2, [r3, #8]
 8000a58:	60da      	str	r2, [r3, #12]
 8000a5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a5c:	f107 0310 	add.w	r3, r7, #16
 8000a60:	22c8      	movs	r2, #200	; 0xc8
 8000a62:	2100      	movs	r1, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f004 fc35 	bl	80052d4 <memset>
  if(huart->Instance==USART1)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a27      	ldr	r2, [pc, #156]	; (8000b0c <HAL_UART_MspInit+0xc8>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d146      	bne.n	8000b02 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a74:	f04f 0201 	mov.w	r2, #1
 8000a78:	f04f 0300 	mov.w	r3, #0
 8000a7c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000a80:	2300      	movs	r3, #0
 8000a82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a86:	f107 0310 	add.w	r3, r7, #16
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f001 fcbc 	bl	8002408 <HAL_RCCEx_PeriphCLKConfig>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000a96:	f7ff ffb5 	bl	8000a04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a9a:	4b1d      	ldr	r3, [pc, #116]	; (8000b10 <HAL_UART_MspInit+0xcc>)
 8000a9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000aa0:	4a1b      	ldr	r2, [pc, #108]	; (8000b10 <HAL_UART_MspInit+0xcc>)
 8000aa2:	f043 0310 	orr.w	r3, r3, #16
 8000aa6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <HAL_UART_MspInit+0xcc>)
 8000aac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ab0:	f003 0310 	and.w	r3, r3, #16
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab8:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <HAL_UART_MspInit+0xcc>)
 8000aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000abe:	4a14      	ldr	r2, [pc, #80]	; (8000b10 <HAL_UART_MspInit+0xcc>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <HAL_UART_MspInit+0xcc>)
 8000aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000ad6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ada:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000af0:	2307      	movs	r3, #7
 8000af2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000afa:	4619      	mov	r1, r3
 8000afc:	4805      	ldr	r0, [pc, #20]	; (8000b14 <HAL_UART_MspInit+0xd0>)
 8000afe:	f000 f9e1 	bl	8000ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b02:	bf00      	nop
 8000b04:	37f0      	adds	r7, #240	; 0xf0
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40011000 	.word	0x40011000
 8000b10:	58024400 	.word	0x58024400
 8000b14:	58020000 	.word	0x58020000

08000b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <NMI_Handler+0x4>

08000b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <HardFault_Handler+0x4>

08000b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <MemManage_Handler+0x4>

08000b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <BusFault_Handler+0x4>

08000b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <UsageFault_Handler+0x4>

08000b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr

08000b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b64:	f000 f89e 	bl	8000ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b70:	f7ff fd34 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b74:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b76:	490d      	ldr	r1, [pc, #52]	; (8000bac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b78:	4a0d      	ldr	r2, [pc, #52]	; (8000bb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b7c:	e002      	b.n	8000b84 <LoopCopyDataInit>

08000b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b82:	3304      	adds	r3, #4

08000b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b88:	d3f9      	bcc.n	8000b7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b8c:	4c0a      	ldr	r4, [pc, #40]	; (8000bb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b90:	e001      	b.n	8000b96 <LoopFillZerobss>

08000b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b94:	3204      	adds	r2, #4

08000b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b98:	d3fb      	bcc.n	8000b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b9a:	f004 fb77 	bl	800528c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b9e:	f7ff fdb3 	bl	8000708 <main>
  bx  lr
 8000ba2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ba4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ba8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bac:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000bb0:	08005344 	.word	0x08005344
  ldr r2, =_sbss
 8000bb4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000bb8:	240000c4 	.word	0x240000c4

08000bbc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC3_IRQHandler>
	...

08000bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc6:	2003      	movs	r0, #3
 8000bc8:	f000 f94a 	bl	8000e60 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000bcc:	f001 fa46 	bl	800205c <HAL_RCC_GetSysClockFreq>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_Init+0x68>)
 8000bd4:	699b      	ldr	r3, [r3, #24]
 8000bd6:	0a1b      	lsrs	r3, r3, #8
 8000bd8:	f003 030f 	and.w	r3, r3, #15
 8000bdc:	4913      	ldr	r1, [pc, #76]	; (8000c2c <HAL_Init+0x6c>)
 8000bde:	5ccb      	ldrb	r3, [r1, r3]
 8000be0:	f003 031f 	and.w	r3, r3, #31
 8000be4:	fa22 f303 	lsr.w	r3, r2, r3
 8000be8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_Init+0x68>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	f003 030f 	and.w	r3, r3, #15
 8000bf2:	4a0e      	ldr	r2, [pc, #56]	; (8000c2c <HAL_Init+0x6c>)
 8000bf4:	5cd3      	ldrb	r3, [r2, r3]
 8000bf6:	f003 031f 	and.w	r3, r3, #31
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8000c00:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <HAL_Init+0x70>)
 8000c02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c04:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <HAL_Init+0x74>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c0a:	2000      	movs	r0, #0
 8000c0c:	f000 f814 	bl	8000c38 <HAL_InitTick>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e002      	b.n	8000c20 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c1a:	f7ff fef9 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c1e:	2300      	movs	r3, #0
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	58024400 	.word	0x58024400
 8000c2c:	080052fc 	.word	0x080052fc
 8000c30:	24000004 	.word	0x24000004
 8000c34:	24000000 	.word	0x24000000

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c40:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <HAL_InitTick+0x60>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d101      	bne.n	8000c4c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	e021      	b.n	8000c90 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c4c:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <HAL_InitTick+0x64>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <HAL_InitTick+0x60>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	4619      	mov	r1, r3
 8000c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f921 	bl	8000eaa <HAL_SYSTICK_Config>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00e      	b.n	8000c90 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	2b0f      	cmp	r3, #15
 8000c76:	d80a      	bhi.n	8000c8e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	6879      	ldr	r1, [r7, #4]
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c80:	f000 f8f9 	bl	8000e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c84:	4a06      	ldr	r2, [pc, #24]	; (8000ca0 <HAL_InitTick+0x68>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e000      	b.n	8000c90 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	2400000c 	.word	0x2400000c
 8000c9c:	24000000 	.word	0x24000000
 8000ca0:	24000008 	.word	0x24000008

08000ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x20>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	2400000c 	.word	0x2400000c
 8000cc8:	240000c0 	.word	0x240000c0

08000ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <HAL_GetTick+0x14>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	240000c0 	.word	0x240000c0

08000ce4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <HAL_GetREVID+0x14>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	0c1b      	lsrs	r3, r3, #16
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	5c001000 	.word	0x5c001000

08000cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <__NVIC_SetPriorityGrouping+0x40>)
 8000d0e:	68db      	ldr	r3, [r3, #12]
 8000d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d18:	4013      	ands	r3, r2
 8000d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	4313      	orrs	r3, r2
 8000d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <__NVIC_SetPriorityGrouping+0x40>)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	60d3      	str	r3, [r2, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00
 8000d40:	05fa0000 	.word	0x05fa0000

08000d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <__NVIC_GetPriorityGrouping+0x18>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	0a1b      	lsrs	r3, r3, #8
 8000d4e:	f003 0307 	and.w	r3, r3, #7
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	4603      	mov	r3, r0
 8000d68:	6039      	str	r1, [r7, #0]
 8000d6a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	db0a      	blt.n	8000d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	490c      	ldr	r1, [pc, #48]	; (8000dac <__NVIC_SetPriority+0x4c>)
 8000d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d7e:	0112      	lsls	r2, r2, #4
 8000d80:	b2d2      	uxtb	r2, r2
 8000d82:	440b      	add	r3, r1
 8000d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d88:	e00a      	b.n	8000da0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4908      	ldr	r1, [pc, #32]	; (8000db0 <__NVIC_SetPriority+0x50>)
 8000d90:	88fb      	ldrh	r3, [r7, #6]
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	3b04      	subs	r3, #4
 8000d98:	0112      	lsls	r2, r2, #4
 8000d9a:	b2d2      	uxtb	r2, r2
 8000d9c:	440b      	add	r3, r1
 8000d9e:	761a      	strb	r2, [r3, #24]
}
 8000da0:	bf00      	nop
 8000da2:	370c      	adds	r7, #12
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	e000e100 	.word	0xe000e100
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	f1c3 0307 	rsb	r3, r3, #7
 8000dce:	2b04      	cmp	r3, #4
 8000dd0:	bf28      	it	cs
 8000dd2:	2304      	movcs	r3, #4
 8000dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3304      	adds	r3, #4
 8000dda:	2b06      	cmp	r3, #6
 8000ddc:	d902      	bls.n	8000de4 <NVIC_EncodePriority+0x30>
 8000dde:	69fb      	ldr	r3, [r7, #28]
 8000de0:	3b03      	subs	r3, #3
 8000de2:	e000      	b.n	8000de6 <NVIC_EncodePriority+0x32>
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dec:	69bb      	ldr	r3, [r7, #24]
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	401a      	ands	r2, r3
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	fa01 f303 	lsl.w	r3, r1, r3
 8000e06:	43d9      	mvns	r1, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	4313      	orrs	r3, r2
         );
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3724      	adds	r7, #36	; 0x24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
	...

08000e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e2c:	d301      	bcc.n	8000e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e00f      	b.n	8000e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <SysTick_Config+0x40>)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3b01      	subs	r3, #1
 8000e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e3a:	210f      	movs	r1, #15
 8000e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e40:	f7ff ff8e 	bl	8000d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <SysTick_Config+0x40>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e4a:	4b04      	ldr	r3, [pc, #16]	; (8000e5c <SysTick_Config+0x40>)
 8000e4c:	2207      	movs	r2, #7
 8000e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	e000e010 	.word	0xe000e010

08000e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff ff47 	bl	8000cfc <__NVIC_SetPriorityGrouping>
}
 8000e6e:	bf00      	nop
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b086      	sub	sp, #24
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	60b9      	str	r1, [r7, #8]
 8000e80:	607a      	str	r2, [r7, #4]
 8000e82:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e84:	f7ff ff5e 	bl	8000d44 <__NVIC_GetPriorityGrouping>
 8000e88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	68b9      	ldr	r1, [r7, #8]
 8000e8e:	6978      	ldr	r0, [r7, #20]
 8000e90:	f7ff ff90 	bl	8000db4 <NVIC_EncodePriority>
 8000e94:	4602      	mov	r2, r0
 8000e96:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e9a:	4611      	mov	r1, r2
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff ff5f 	bl	8000d60 <__NVIC_SetPriority>
}
 8000ea2:	bf00      	nop
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b082      	sub	sp, #8
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ffb2 	bl	8000e1c <SysTick_Config>
 8000eb8:	4603      	mov	r3, r0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
	...

08000ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000ed2:	4b89      	ldr	r3, [pc, #548]	; (80010f8 <HAL_GPIO_Init+0x234>)
 8000ed4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ed6:	e194      	b.n	8001202 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	2101      	movs	r1, #1
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ee8:	693b      	ldr	r3, [r7, #16]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f000 8186 	beq.w	80011fc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f003 0303 	and.w	r3, r3, #3
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d005      	beq.n	8000f08 <HAL_GPIO_Init+0x44>
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d130      	bne.n	8000f6a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	68da      	ldr	r2, [r3, #12]
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f3e:	2201      	movs	r2, #1
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	091b      	lsrs	r3, r3, #4
 8000f54:	f003 0201 	and.w	r2, r3, #1
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 0303 	and.w	r3, r3, #3
 8000f72:	2b03      	cmp	r3, #3
 8000f74:	d017      	beq.n	8000fa6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	2203      	movs	r2, #3
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43db      	mvns	r3, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	689a      	ldr	r2, [r3, #8]
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d123      	bne.n	8000ffa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	08da      	lsrs	r2, r3, #3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3208      	adds	r2, #8
 8000fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	220f      	movs	r2, #15
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	691a      	ldr	r2, [r3, #16]
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	f003 0307 	and.w	r3, r3, #7
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	08da      	lsrs	r2, r3, #3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3208      	adds	r2, #8
 8000ff4:	69b9      	ldr	r1, [r7, #24]
 8000ff6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	2203      	movs	r2, #3
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	43db      	mvns	r3, r3
 800100c:	69ba      	ldr	r2, [r7, #24]
 800100e:	4013      	ands	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 0203 	and.w	r2, r3, #3
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	fa02 f303 	lsl.w	r3, r2, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 80e0 	beq.w	80011fc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103c:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <HAL_GPIO_Init+0x238>)
 800103e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001042:	4a2e      	ldr	r2, [pc, #184]	; (80010fc <HAL_GPIO_Init+0x238>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800104c:	4b2b      	ldr	r3, [pc, #172]	; (80010fc <HAL_GPIO_Init+0x238>)
 800104e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800105a:	4a29      	ldr	r2, [pc, #164]	; (8001100 <HAL_GPIO_Init+0x23c>)
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	089b      	lsrs	r3, r3, #2
 8001060:	3302      	adds	r3, #2
 8001062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f003 0303 	and.w	r3, r3, #3
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	220f      	movs	r2, #15
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a20      	ldr	r2, [pc, #128]	; (8001104 <HAL_GPIO_Init+0x240>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d052      	beq.n	800112c <HAL_GPIO_Init+0x268>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a1f      	ldr	r2, [pc, #124]	; (8001108 <HAL_GPIO_Init+0x244>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d031      	beq.n	80010f2 <HAL_GPIO_Init+0x22e>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a1e      	ldr	r2, [pc, #120]	; (800110c <HAL_GPIO_Init+0x248>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d02b      	beq.n	80010ee <HAL_GPIO_Init+0x22a>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a1d      	ldr	r2, [pc, #116]	; (8001110 <HAL_GPIO_Init+0x24c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d025      	beq.n	80010ea <HAL_GPIO_Init+0x226>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <HAL_GPIO_Init+0x250>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d01f      	beq.n	80010e6 <HAL_GPIO_Init+0x222>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a1b      	ldr	r2, [pc, #108]	; (8001118 <HAL_GPIO_Init+0x254>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d019      	beq.n	80010e2 <HAL_GPIO_Init+0x21e>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a1a      	ldr	r2, [pc, #104]	; (800111c <HAL_GPIO_Init+0x258>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d013      	beq.n	80010de <HAL_GPIO_Init+0x21a>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a19      	ldr	r2, [pc, #100]	; (8001120 <HAL_GPIO_Init+0x25c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d00d      	beq.n	80010da <HAL_GPIO_Init+0x216>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a18      	ldr	r2, [pc, #96]	; (8001124 <HAL_GPIO_Init+0x260>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d007      	beq.n	80010d6 <HAL_GPIO_Init+0x212>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a17      	ldr	r2, [pc, #92]	; (8001128 <HAL_GPIO_Init+0x264>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d101      	bne.n	80010d2 <HAL_GPIO_Init+0x20e>
 80010ce:	2309      	movs	r3, #9
 80010d0:	e02d      	b.n	800112e <HAL_GPIO_Init+0x26a>
 80010d2:	230a      	movs	r3, #10
 80010d4:	e02b      	b.n	800112e <HAL_GPIO_Init+0x26a>
 80010d6:	2308      	movs	r3, #8
 80010d8:	e029      	b.n	800112e <HAL_GPIO_Init+0x26a>
 80010da:	2307      	movs	r3, #7
 80010dc:	e027      	b.n	800112e <HAL_GPIO_Init+0x26a>
 80010de:	2306      	movs	r3, #6
 80010e0:	e025      	b.n	800112e <HAL_GPIO_Init+0x26a>
 80010e2:	2305      	movs	r3, #5
 80010e4:	e023      	b.n	800112e <HAL_GPIO_Init+0x26a>
 80010e6:	2304      	movs	r3, #4
 80010e8:	e021      	b.n	800112e <HAL_GPIO_Init+0x26a>
 80010ea:	2303      	movs	r3, #3
 80010ec:	e01f      	b.n	800112e <HAL_GPIO_Init+0x26a>
 80010ee:	2302      	movs	r3, #2
 80010f0:	e01d      	b.n	800112e <HAL_GPIO_Init+0x26a>
 80010f2:	2301      	movs	r3, #1
 80010f4:	e01b      	b.n	800112e <HAL_GPIO_Init+0x26a>
 80010f6:	bf00      	nop
 80010f8:	58000080 	.word	0x58000080
 80010fc:	58024400 	.word	0x58024400
 8001100:	58000400 	.word	0x58000400
 8001104:	58020000 	.word	0x58020000
 8001108:	58020400 	.word	0x58020400
 800110c:	58020800 	.word	0x58020800
 8001110:	58020c00 	.word	0x58020c00
 8001114:	58021000 	.word	0x58021000
 8001118:	58021400 	.word	0x58021400
 800111c:	58021800 	.word	0x58021800
 8001120:	58021c00 	.word	0x58021c00
 8001124:	58022000 	.word	0x58022000
 8001128:	58022400 	.word	0x58022400
 800112c:	2300      	movs	r3, #0
 800112e:	69fa      	ldr	r2, [r7, #28]
 8001130:	f002 0203 	and.w	r2, r2, #3
 8001134:	0092      	lsls	r2, r2, #2
 8001136:	4093      	lsls	r3, r2
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	4313      	orrs	r3, r2
 800113c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800113e:	4938      	ldr	r1, [pc, #224]	; (8001220 <HAL_GPIO_Init+0x35c>)
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	3302      	adds	r3, #2
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800114c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001172:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800117a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001194:	2b00      	cmp	r3, #0
 8001196:	d003      	beq.n	80011a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80011a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	3301      	adds	r3, #1
 8001200:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa22 f303 	lsr.w	r3, r2, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	f47f ae63 	bne.w	8000ed8 <HAL_GPIO_Init+0x14>
  }
}
 8001212:	bf00      	nop
 8001214:	bf00      	nop
 8001216:	3724      	adds	r7, #36	; 0x24
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	58000400 	.word	0x58000400

08001224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
 8001230:	4613      	mov	r3, r2
 8001232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001234:	787b      	ldrb	r3, [r7, #1]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800123a:	887a      	ldrh	r2, [r7, #2]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001240:	e003      	b.n	800124a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001242:	887b      	ldrh	r3, [r7, #2]
 8001244:	041a      	lsls	r2, r3, #16
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	619a      	str	r2, [r3, #24]
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
	...

08001258 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001260:	4a08      	ldr	r2, [pc, #32]	; (8001284 <HAL_HSEM_FastTake+0x2c>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	3320      	adds	r3, #32
 8001266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126a:	4a07      	ldr	r2, [pc, #28]	; (8001288 <HAL_HSEM_FastTake+0x30>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d101      	bne.n	8001274 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001270:	2300      	movs	r3, #0
 8001272:	e000      	b.n	8001276 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001274:	2301      	movs	r3, #1
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	58026400 	.word	0x58026400
 8001288:	80000300 	.word	0x80000300

0800128c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001296:	4906      	ldr	r1, [pc, #24]	; (80012b0 <HAL_HSEM_Release+0x24>)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80012a4:	bf00      	nop
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	58026400 	.word	0x58026400

080012b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80012bc:	4b29      	ldr	r3, [pc, #164]	; (8001364 <HAL_PWREx_ConfigSupply+0xb0>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	f003 0307 	and.w	r3, r3, #7
 80012c4:	2b06      	cmp	r3, #6
 80012c6:	d00a      	beq.n	80012de <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80012c8:	4b26      	ldr	r3, [pc, #152]	; (8001364 <HAL_PWREx_ConfigSupply+0xb0>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d001      	beq.n	80012da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e040      	b.n	800135c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	e03e      	b.n	800135c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80012de:	4b21      	ldr	r3, [pc, #132]	; (8001364 <HAL_PWREx_ConfigSupply+0xb0>)
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80012e6:	491f      	ldr	r1, [pc, #124]	; (8001364 <HAL_PWREx_ConfigSupply+0xb0>)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80012ee:	f7ff fced 	bl	8000ccc <HAL_GetTick>
 80012f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80012f4:	e009      	b.n	800130a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80012f6:	f7ff fce9 	bl	8000ccc <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001304:	d901      	bls.n	800130a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e028      	b.n	800135c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800130a:	4b16      	ldr	r3, [pc, #88]	; (8001364 <HAL_PWREx_ConfigSupply+0xb0>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001316:	d1ee      	bne.n	80012f6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2b1e      	cmp	r3, #30
 800131c:	d008      	beq.n	8001330 <HAL_PWREx_ConfigSupply+0x7c>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b2e      	cmp	r3, #46	; 0x2e
 8001322:	d005      	beq.n	8001330 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b1d      	cmp	r3, #29
 8001328:	d002      	beq.n	8001330 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b2d      	cmp	r3, #45	; 0x2d
 800132e:	d114      	bne.n	800135a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001330:	f7ff fccc 	bl	8000ccc <HAL_GetTick>
 8001334:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001336:	e009      	b.n	800134c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001338:	f7ff fcc8 	bl	8000ccc <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001346:	d901      	bls.n	800134c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e007      	b.n	800135c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <HAL_PWREx_ConfigSupply+0xb0>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001358:	d1ee      	bne.n	8001338 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	58024800 	.word	0x58024800

08001368 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b08c      	sub	sp, #48	; 0x30
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d102      	bne.n	800137c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	f000 bc48 	b.w	8001c0c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 8088 	beq.w	800149a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800138a:	4b99      	ldr	r3, [pc, #612]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 800138c:	691b      	ldr	r3, [r3, #16]
 800138e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001392:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001394:	4b96      	ldr	r3, [pc, #600]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 8001396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800139a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800139c:	2b10      	cmp	r3, #16
 800139e:	d007      	beq.n	80013b0 <HAL_RCC_OscConfig+0x48>
 80013a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a2:	2b18      	cmp	r3, #24
 80013a4:	d111      	bne.n	80013ca <HAL_RCC_OscConfig+0x62>
 80013a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d10c      	bne.n	80013ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b0:	4b8f      	ldr	r3, [pc, #572]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d06d      	beq.n	8001498 <HAL_RCC_OscConfig+0x130>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d169      	bne.n	8001498 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	f000 bc21 	b.w	8001c0c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d2:	d106      	bne.n	80013e2 <HAL_RCC_OscConfig+0x7a>
 80013d4:	4b86      	ldr	r3, [pc, #536]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a85      	ldr	r2, [pc, #532]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 80013da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	e02e      	b.n	8001440 <HAL_RCC_OscConfig+0xd8>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d10c      	bne.n	8001404 <HAL_RCC_OscConfig+0x9c>
 80013ea:	4b81      	ldr	r3, [pc, #516]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a80      	ldr	r2, [pc, #512]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 80013f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	4b7e      	ldr	r3, [pc, #504]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a7d      	ldr	r2, [pc, #500]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 80013fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	e01d      	b.n	8001440 <HAL_RCC_OscConfig+0xd8>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800140c:	d10c      	bne.n	8001428 <HAL_RCC_OscConfig+0xc0>
 800140e:	4b78      	ldr	r3, [pc, #480]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a77      	ldr	r2, [pc, #476]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 8001414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001418:	6013      	str	r3, [r2, #0]
 800141a:	4b75      	ldr	r3, [pc, #468]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a74      	ldr	r2, [pc, #464]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 8001420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001424:	6013      	str	r3, [r2, #0]
 8001426:	e00b      	b.n	8001440 <HAL_RCC_OscConfig+0xd8>
 8001428:	4b71      	ldr	r3, [pc, #452]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a70      	ldr	r2, [pc, #448]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 800142e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	4b6e      	ldr	r3, [pc, #440]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a6d      	ldr	r2, [pc, #436]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 800143a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800143e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d013      	beq.n	8001470 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001448:	f7ff fc40 	bl	8000ccc <HAL_GetTick>
 800144c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001450:	f7ff fc3c 	bl	8000ccc <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b64      	cmp	r3, #100	; 0x64
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e3d4      	b.n	8001c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001462:	4b63      	ldr	r3, [pc, #396]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0f0      	beq.n	8001450 <HAL_RCC_OscConfig+0xe8>
 800146e:	e014      	b.n	800149a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001470:	f7ff fc2c 	bl	8000ccc <HAL_GetTick>
 8001474:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001478:	f7ff fc28 	bl	8000ccc <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b64      	cmp	r3, #100	; 0x64
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e3c0      	b.n	8001c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800148a:	4b59      	ldr	r3, [pc, #356]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x110>
 8001496:	e000      	b.n	800149a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f000 80ca 	beq.w	800163c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014a8:	4b51      	ldr	r3, [pc, #324]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014b2:	4b4f      	ldr	r3, [pc, #316]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 80014b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80014b8:	6a3b      	ldr	r3, [r7, #32]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d007      	beq.n	80014ce <HAL_RCC_OscConfig+0x166>
 80014be:	6a3b      	ldr	r3, [r7, #32]
 80014c0:	2b18      	cmp	r3, #24
 80014c2:	d156      	bne.n	8001572 <HAL_RCC_OscConfig+0x20a>
 80014c4:	69fb      	ldr	r3, [r7, #28]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d151      	bne.n	8001572 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014ce:	4b48      	ldr	r3, [pc, #288]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0304 	and.w	r3, r3, #4
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d005      	beq.n	80014e6 <HAL_RCC_OscConfig+0x17e>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e392      	b.n	8001c0c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80014e6:	4b42      	ldr	r3, [pc, #264]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f023 0219 	bic.w	r2, r3, #25
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	493f      	ldr	r1, [pc, #252]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f8:	f7ff fbe8 	bl	8000ccc <HAL_GetTick>
 80014fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001500:	f7ff fbe4 	bl	8000ccc <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e37c      	b.n	8001c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001512:	4b37      	ldr	r3, [pc, #220]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151e:	f7ff fbe1 	bl	8000ce4 <HAL_GetREVID>
 8001522:	4603      	mov	r3, r0
 8001524:	f241 0203 	movw	r2, #4099	; 0x1003
 8001528:	4293      	cmp	r3, r2
 800152a:	d817      	bhi.n	800155c <HAL_RCC_OscConfig+0x1f4>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	691b      	ldr	r3, [r3, #16]
 8001530:	2b40      	cmp	r3, #64	; 0x40
 8001532:	d108      	bne.n	8001546 <HAL_RCC_OscConfig+0x1de>
 8001534:	4b2e      	ldr	r3, [pc, #184]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800153c:	4a2c      	ldr	r2, [pc, #176]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 800153e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001542:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001544:	e07a      	b.n	800163c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001546:	4b2a      	ldr	r3, [pc, #168]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	031b      	lsls	r3, r3, #12
 8001554:	4926      	ldr	r1, [pc, #152]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 8001556:	4313      	orrs	r3, r2
 8001558:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800155a:	e06f      	b.n	800163c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155c:	4b24      	ldr	r3, [pc, #144]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	061b      	lsls	r3, r3, #24
 800156a:	4921      	ldr	r1, [pc, #132]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001570:	e064      	b.n	800163c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d047      	beq.n	800160a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800157a:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 0219 	bic.w	r2, r3, #25
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	491a      	ldr	r1, [pc, #104]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 8001588:	4313      	orrs	r3, r2
 800158a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158c:	f7ff fb9e 	bl	8000ccc <HAL_GetTick>
 8001590:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001594:	f7ff fb9a 	bl	8000ccc <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e332      	b.n	8001c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015a6:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b2:	f7ff fb97 	bl	8000ce4 <HAL_GetREVID>
 80015b6:	4603      	mov	r3, r0
 80015b8:	f241 0203 	movw	r2, #4099	; 0x1003
 80015bc:	4293      	cmp	r3, r2
 80015be:	d819      	bhi.n	80015f4 <HAL_RCC_OscConfig+0x28c>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	2b40      	cmp	r3, #64	; 0x40
 80015c6:	d108      	bne.n	80015da <HAL_RCC_OscConfig+0x272>
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80015d0:	4a07      	ldr	r2, [pc, #28]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 80015d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d6:	6053      	str	r3, [r2, #4]
 80015d8:	e030      	b.n	800163c <HAL_RCC_OscConfig+0x2d4>
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	031b      	lsls	r3, r3, #12
 80015e8:	4901      	ldr	r1, [pc, #4]	; (80015f0 <HAL_RCC_OscConfig+0x288>)
 80015ea:	4313      	orrs	r3, r2
 80015ec:	604b      	str	r3, [r1, #4]
 80015ee:	e025      	b.n	800163c <HAL_RCC_OscConfig+0x2d4>
 80015f0:	58024400 	.word	0x58024400
 80015f4:	4b9a      	ldr	r3, [pc, #616]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	061b      	lsls	r3, r3, #24
 8001602:	4997      	ldr	r1, [pc, #604]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 8001604:	4313      	orrs	r3, r2
 8001606:	604b      	str	r3, [r1, #4]
 8001608:	e018      	b.n	800163c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800160a:	4b95      	ldr	r3, [pc, #596]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a94      	ldr	r2, [pc, #592]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 8001610:	f023 0301 	bic.w	r3, r3, #1
 8001614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001616:	f7ff fb59 	bl	8000ccc <HAL_GetTick>
 800161a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800161c:	e008      	b.n	8001630 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800161e:	f7ff fb55 	bl	8000ccc <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d901      	bls.n	8001630 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e2ed      	b.n	8001c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001630:	4b8b      	ldr	r3, [pc, #556]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0304 	and.w	r3, r3, #4
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1f0      	bne.n	800161e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0310 	and.w	r3, r3, #16
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 80a9 	beq.w	800179c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800164a:	4b85      	ldr	r3, [pc, #532]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 800164c:	691b      	ldr	r3, [r3, #16]
 800164e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001652:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001654:	4b82      	ldr	r3, [pc, #520]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 8001656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001658:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800165a:	69bb      	ldr	r3, [r7, #24]
 800165c:	2b08      	cmp	r3, #8
 800165e:	d007      	beq.n	8001670 <HAL_RCC_OscConfig+0x308>
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2b18      	cmp	r3, #24
 8001664:	d13a      	bne.n	80016dc <HAL_RCC_OscConfig+0x374>
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	2b01      	cmp	r3, #1
 800166e:	d135      	bne.n	80016dc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001670:	4b7b      	ldr	r3, [pc, #492]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001678:	2b00      	cmp	r3, #0
 800167a:	d005      	beq.n	8001688 <HAL_RCC_OscConfig+0x320>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69db      	ldr	r3, [r3, #28]
 8001680:	2b80      	cmp	r3, #128	; 0x80
 8001682:	d001      	beq.n	8001688 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e2c1      	b.n	8001c0c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001688:	f7ff fb2c 	bl	8000ce4 <HAL_GetREVID>
 800168c:	4603      	mov	r3, r0
 800168e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001692:	4293      	cmp	r3, r2
 8001694:	d817      	bhi.n	80016c6 <HAL_RCC_OscConfig+0x35e>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	2b20      	cmp	r3, #32
 800169c:	d108      	bne.n	80016b0 <HAL_RCC_OscConfig+0x348>
 800169e:	4b70      	ldr	r3, [pc, #448]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80016a6:	4a6e      	ldr	r2, [pc, #440]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 80016a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80016ac:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016ae:	e075      	b.n	800179c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016b0:	4b6b      	ldr	r3, [pc, #428]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	069b      	lsls	r3, r3, #26
 80016be:	4968      	ldr	r1, [pc, #416]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016c4:	e06a      	b.n	800179c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016c6:	4b66      	ldr	r3, [pc, #408]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	061b      	lsls	r3, r3, #24
 80016d4:	4962      	ldr	r1, [pc, #392]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016da:	e05f      	b.n	800179c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d042      	beq.n	800176a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80016e4:	4b5e      	ldr	r3, [pc, #376]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a5d      	ldr	r2, [pc, #372]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 80016ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f0:	f7ff faec 	bl	8000ccc <HAL_GetTick>
 80016f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80016f8:	f7ff fae8 	bl	8000ccc <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e280      	b.n	8001c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800170a:	4b55      	ldr	r3, [pc, #340]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001712:	2b00      	cmp	r3, #0
 8001714:	d0f0      	beq.n	80016f8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001716:	f7ff fae5 	bl	8000ce4 <HAL_GetREVID>
 800171a:	4603      	mov	r3, r0
 800171c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001720:	4293      	cmp	r3, r2
 8001722:	d817      	bhi.n	8001754 <HAL_RCC_OscConfig+0x3ec>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a1b      	ldr	r3, [r3, #32]
 8001728:	2b20      	cmp	r3, #32
 800172a:	d108      	bne.n	800173e <HAL_RCC_OscConfig+0x3d6>
 800172c:	4b4c      	ldr	r3, [pc, #304]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001734:	4a4a      	ldr	r2, [pc, #296]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 8001736:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800173a:	6053      	str	r3, [r2, #4]
 800173c:	e02e      	b.n	800179c <HAL_RCC_OscConfig+0x434>
 800173e:	4b48      	ldr	r3, [pc, #288]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	069b      	lsls	r3, r3, #26
 800174c:	4944      	ldr	r1, [pc, #272]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 800174e:	4313      	orrs	r3, r2
 8001750:	604b      	str	r3, [r1, #4]
 8001752:	e023      	b.n	800179c <HAL_RCC_OscConfig+0x434>
 8001754:	4b42      	ldr	r3, [pc, #264]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	061b      	lsls	r3, r3, #24
 8001762:	493f      	ldr	r1, [pc, #252]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 8001764:	4313      	orrs	r3, r2
 8001766:	60cb      	str	r3, [r1, #12]
 8001768:	e018      	b.n	800179c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800176a:	4b3d      	ldr	r3, [pc, #244]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a3c      	ldr	r2, [pc, #240]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 8001770:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001776:	f7ff faa9 	bl	8000ccc <HAL_GetTick>
 800177a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800177e:	f7ff faa5 	bl	8000ccc <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e23d      	b.n	8001c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001790:	4b33      	ldr	r3, [pc, #204]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1f0      	bne.n	800177e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d036      	beq.n	8001816 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	695b      	ldr	r3, [r3, #20]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d019      	beq.n	80017e4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b0:	4b2b      	ldr	r3, [pc, #172]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 80017b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b4:	4a2a      	ldr	r2, [pc, #168]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 80017b6:	f043 0301 	orr.w	r3, r3, #1
 80017ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017bc:	f7ff fa86 	bl	8000ccc <HAL_GetTick>
 80017c0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c4:	f7ff fa82 	bl	8000ccc <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b02      	cmp	r3, #2
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e21a      	b.n	8001c0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017d6:	4b22      	ldr	r3, [pc, #136]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 80017d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0x45c>
 80017e2:	e018      	b.n	8001816 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e4:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 80017e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017e8:	4a1d      	ldr	r2, [pc, #116]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 80017ea:	f023 0301 	bic.w	r3, r3, #1
 80017ee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f0:	f7ff fa6c 	bl	8000ccc <HAL_GetTick>
 80017f4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f8:	f7ff fa68 	bl	8000ccc <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e200      	b.n	8001c0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 800180c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0320 	and.w	r3, r3, #32
 800181e:	2b00      	cmp	r3, #0
 8001820:	d039      	beq.n	8001896 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d01c      	beq.n	8001864 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800182a:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a0c      	ldr	r2, [pc, #48]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 8001830:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001834:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001836:	f7ff fa49 	bl	8000ccc <HAL_GetTick>
 800183a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800183e:	f7ff fa45 	bl	8000ccc <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e1dd      	b.n	8001c0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001850:	4b03      	ldr	r3, [pc, #12]	; (8001860 <HAL_RCC_OscConfig+0x4f8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x4d6>
 800185c:	e01b      	b.n	8001896 <HAL_RCC_OscConfig+0x52e>
 800185e:	bf00      	nop
 8001860:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001864:	4b9b      	ldr	r3, [pc, #620]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a9a      	ldr	r2, [pc, #616]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 800186a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800186e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001870:	f7ff fa2c 	bl	8000ccc <HAL_GetTick>
 8001874:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001878:	f7ff fa28 	bl	8000ccc <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e1c0      	b.n	8001c0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800188a:	4b92      	ldr	r3, [pc, #584]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 8081 	beq.w	80019a6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80018a4:	4b8c      	ldr	r3, [pc, #560]	; (8001ad8 <HAL_RCC_OscConfig+0x770>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a8b      	ldr	r2, [pc, #556]	; (8001ad8 <HAL_RCC_OscConfig+0x770>)
 80018aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80018b0:	f7ff fa0c 	bl	8000ccc <HAL_GetTick>
 80018b4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018b6:	e008      	b.n	80018ca <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b8:	f7ff fa08 	bl	8000ccc <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	2b64      	cmp	r3, #100	; 0x64
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e1a0      	b.n	8001c0c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018ca:	4b83      	ldr	r3, [pc, #524]	; (8001ad8 <HAL_RCC_OscConfig+0x770>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d0f0      	beq.n	80018b8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d106      	bne.n	80018ec <HAL_RCC_OscConfig+0x584>
 80018de:	4b7d      	ldr	r3, [pc, #500]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 80018e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018e2:	4a7c      	ldr	r2, [pc, #496]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ea:	e02d      	b.n	8001948 <HAL_RCC_OscConfig+0x5e0>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d10c      	bne.n	800190e <HAL_RCC_OscConfig+0x5a6>
 80018f4:	4b77      	ldr	r3, [pc, #476]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 80018f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f8:	4a76      	ldr	r2, [pc, #472]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 80018fa:	f023 0301 	bic.w	r3, r3, #1
 80018fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001900:	4b74      	ldr	r3, [pc, #464]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001904:	4a73      	ldr	r2, [pc, #460]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001906:	f023 0304 	bic.w	r3, r3, #4
 800190a:	6713      	str	r3, [r2, #112]	; 0x70
 800190c:	e01c      	b.n	8001948 <HAL_RCC_OscConfig+0x5e0>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	2b05      	cmp	r3, #5
 8001914:	d10c      	bne.n	8001930 <HAL_RCC_OscConfig+0x5c8>
 8001916:	4b6f      	ldr	r3, [pc, #444]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191a:	4a6e      	ldr	r2, [pc, #440]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 800191c:	f043 0304 	orr.w	r3, r3, #4
 8001920:	6713      	str	r3, [r2, #112]	; 0x70
 8001922:	4b6c      	ldr	r3, [pc, #432]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001926:	4a6b      	ldr	r2, [pc, #428]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6713      	str	r3, [r2, #112]	; 0x70
 800192e:	e00b      	b.n	8001948 <HAL_RCC_OscConfig+0x5e0>
 8001930:	4b68      	ldr	r3, [pc, #416]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001934:	4a67      	ldr	r2, [pc, #412]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001936:	f023 0301 	bic.w	r3, r3, #1
 800193a:	6713      	str	r3, [r2, #112]	; 0x70
 800193c:	4b65      	ldr	r3, [pc, #404]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 800193e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001940:	4a64      	ldr	r2, [pc, #400]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001942:	f023 0304 	bic.w	r3, r3, #4
 8001946:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d015      	beq.n	800197c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001950:	f7ff f9bc 	bl	8000ccc <HAL_GetTick>
 8001954:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001956:	e00a      	b.n	800196e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001958:	f7ff f9b8 	bl	8000ccc <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	f241 3288 	movw	r2, #5000	; 0x1388
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e14e      	b.n	8001c0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800196e:	4b59      	ldr	r3, [pc, #356]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0ee      	beq.n	8001958 <HAL_RCC_OscConfig+0x5f0>
 800197a:	e014      	b.n	80019a6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197c:	f7ff f9a6 	bl	8000ccc <HAL_GetTick>
 8001980:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001982:	e00a      	b.n	800199a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001984:	f7ff f9a2 	bl	8000ccc <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001992:	4293      	cmp	r3, r2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e138      	b.n	8001c0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800199a:	4b4e      	ldr	r3, [pc, #312]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 800199c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1ee      	bne.n	8001984 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	f000 812d 	beq.w	8001c0a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80019b0:	4b48      	ldr	r3, [pc, #288]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019b8:	2b18      	cmp	r3, #24
 80019ba:	f000 80bd 	beq.w	8001b38 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	f040 809e 	bne.w	8001b04 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c8:	4b42      	ldr	r3, [pc, #264]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a41      	ldr	r2, [pc, #260]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 80019ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7ff f97a 	bl	8000ccc <HAL_GetTick>
 80019d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019da:	e008      	b.n	80019ee <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019dc:	f7ff f976 	bl	8000ccc <HAL_GetTick>
 80019e0:	4602      	mov	r2, r0
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	1ad3      	subs	r3, r2, r3
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e10e      	b.n	8001c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019ee:	4b39      	ldr	r3, [pc, #228]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d1f0      	bne.n	80019dc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019fa:	4b36      	ldr	r3, [pc, #216]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 80019fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019fe:	4b37      	ldr	r3, [pc, #220]	; (8001adc <HAL_RCC_OscConfig+0x774>)
 8001a00:	4013      	ands	r3, r2
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a0a:	0112      	lsls	r2, r2, #4
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	4931      	ldr	r1, [pc, #196]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	628b      	str	r3, [r1, #40]	; 0x28
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a22:	3b01      	subs	r3, #1
 8001a24:	025b      	lsls	r3, r3, #9
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	041b      	lsls	r3, r3, #16
 8001a32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	061b      	lsls	r3, r3, #24
 8001a40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001a44:	4923      	ldr	r1, [pc, #140]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001a4a:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a4e:	4a21      	ldr	r2, [pc, #132]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001a50:	f023 0301 	bic.w	r3, r3, #1
 8001a54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a56:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a5a:	4b21      	ldr	r3, [pc, #132]	; (8001ae0 <HAL_RCC_OscConfig+0x778>)
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a62:	00d2      	lsls	r2, r2, #3
 8001a64:	491b      	ldr	r1, [pc, #108]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6e:	f023 020c 	bic.w	r2, r3, #12
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	4917      	ldr	r1, [pc, #92]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001a7c:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a80:	f023 0202 	bic.w	r2, r3, #2
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a88:	4912      	ldr	r1, [pc, #72]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a92:	4a10      	ldr	r2, [pc, #64]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a98:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9e:	4a0d      	ldr	r2, [pc, #52]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001aac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ab0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab6:	4a07      	ldr	r2, [pc, #28]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001abe:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <HAL_RCC_OscConfig+0x76c>)
 8001ac4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aca:	f7ff f8ff 	bl	8000ccc <HAL_GetTick>
 8001ace:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ad0:	e011      	b.n	8001af6 <HAL_RCC_OscConfig+0x78e>
 8001ad2:	bf00      	nop
 8001ad4:	58024400 	.word	0x58024400
 8001ad8:	58024800 	.word	0x58024800
 8001adc:	fffffc0c 	.word	0xfffffc0c
 8001ae0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae4:	f7ff f8f2 	bl	8000ccc <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e08a      	b.n	8001c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001af6:	4b47      	ldr	r3, [pc, #284]	; (8001c14 <HAL_RCC_OscConfig+0x8ac>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x77c>
 8001b02:	e082      	b.n	8001c0a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b04:	4b43      	ldr	r3, [pc, #268]	; (8001c14 <HAL_RCC_OscConfig+0x8ac>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a42      	ldr	r2, [pc, #264]	; (8001c14 <HAL_RCC_OscConfig+0x8ac>)
 8001b0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b10:	f7ff f8dc 	bl	8000ccc <HAL_GetTick>
 8001b14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b18:	f7ff f8d8 	bl	8000ccc <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e070      	b.n	8001c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b2a:	4b3a      	ldr	r3, [pc, #232]	; (8001c14 <HAL_RCC_OscConfig+0x8ac>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x7b0>
 8001b36:	e068      	b.n	8001c0a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b38:	4b36      	ldr	r3, [pc, #216]	; (8001c14 <HAL_RCC_OscConfig+0x8ac>)
 8001b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b3e:	4b35      	ldr	r3, [pc, #212]	; (8001c14 <HAL_RCC_OscConfig+0x8ac>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d031      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	f003 0203 	and.w	r2, r3, #3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d12a      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	091b      	lsrs	r3, r3, #4
 8001b5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d122      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d11a      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	0a5b      	lsrs	r3, r3, #9
 8001b7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b86:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d111      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	0c1b      	lsrs	r3, r3, #16
 8001b90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b98:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d108      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	0e1b      	lsrs	r3, r3, #24
 8001ba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001baa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d001      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e02b      	b.n	8001c0c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001bb4:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <HAL_RCC_OscConfig+0x8ac>)
 8001bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb8:	08db      	lsrs	r3, r3, #3
 8001bba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001bbe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d01f      	beq.n	8001c0a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_RCC_OscConfig+0x8ac>)
 8001bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bce:	4a11      	ldr	r2, [pc, #68]	; (8001c14 <HAL_RCC_OscConfig+0x8ac>)
 8001bd0:	f023 0301 	bic.w	r3, r3, #1
 8001bd4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bd6:	f7ff f879 	bl	8000ccc <HAL_GetTick>
 8001bda:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001bdc:	bf00      	nop
 8001bde:	f7ff f875 	bl	8000ccc <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d0f9      	beq.n	8001bde <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001bea:	4b0a      	ldr	r3, [pc, #40]	; (8001c14 <HAL_RCC_OscConfig+0x8ac>)
 8001bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bee:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <HAL_RCC_OscConfig+0x8b0>)
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bf6:	00d2      	lsls	r2, r2, #3
 8001bf8:	4906      	ldr	r1, [pc, #24]	; (8001c14 <HAL_RCC_OscConfig+0x8ac>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001bfe:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_RCC_OscConfig+0x8ac>)
 8001c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c02:	4a04      	ldr	r2, [pc, #16]	; (8001c14 <HAL_RCC_OscConfig+0x8ac>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3730      	adds	r7, #48	; 0x30
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	58024400 	.word	0x58024400
 8001c18:	ffff0007 	.word	0xffff0007

08001c1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e19c      	b.n	8001f6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c30:	4b8a      	ldr	r3, [pc, #552]	; (8001e5c <HAL_RCC_ClockConfig+0x240>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 030f 	and.w	r3, r3, #15
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d910      	bls.n	8001c60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3e:	4b87      	ldr	r3, [pc, #540]	; (8001e5c <HAL_RCC_ClockConfig+0x240>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 020f 	bic.w	r2, r3, #15
 8001c46:	4985      	ldr	r1, [pc, #532]	; (8001e5c <HAL_RCC_ClockConfig+0x240>)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4e:	4b83      	ldr	r3, [pc, #524]	; (8001e5c <HAL_RCC_ClockConfig+0x240>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d001      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e184      	b.n	8001f6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0304 	and.w	r3, r3, #4
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d010      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	4b7b      	ldr	r3, [pc, #492]	; (8001e60 <HAL_RCC_ClockConfig+0x244>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d908      	bls.n	8001c8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c7c:	4b78      	ldr	r3, [pc, #480]	; (8001e60 <HAL_RCC_ClockConfig+0x244>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	4975      	ldr	r1, [pc, #468]	; (8001e60 <HAL_RCC_ClockConfig+0x244>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d010      	beq.n	8001cbc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695a      	ldr	r2, [r3, #20]
 8001c9e:	4b70      	ldr	r3, [pc, #448]	; (8001e60 <HAL_RCC_ClockConfig+0x244>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d908      	bls.n	8001cbc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001caa:	4b6d      	ldr	r3, [pc, #436]	; (8001e60 <HAL_RCC_ClockConfig+0x244>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	496a      	ldr	r1, [pc, #424]	; (8001e60 <HAL_RCC_ClockConfig+0x244>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0310 	and.w	r3, r3, #16
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d010      	beq.n	8001cea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	699a      	ldr	r2, [r3, #24]
 8001ccc:	4b64      	ldr	r3, [pc, #400]	; (8001e60 <HAL_RCC_ClockConfig+0x244>)
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d908      	bls.n	8001cea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001cd8:	4b61      	ldr	r3, [pc, #388]	; (8001e60 <HAL_RCC_ClockConfig+0x244>)
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	495e      	ldr	r1, [pc, #376]	; (8001e60 <HAL_RCC_ClockConfig+0x244>)
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0320 	and.w	r3, r3, #32
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d010      	beq.n	8001d18 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69da      	ldr	r2, [r3, #28]
 8001cfa:	4b59      	ldr	r3, [pc, #356]	; (8001e60 <HAL_RCC_ClockConfig+0x244>)
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d908      	bls.n	8001d18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d06:	4b56      	ldr	r3, [pc, #344]	; (8001e60 <HAL_RCC_ClockConfig+0x244>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	4953      	ldr	r1, [pc, #332]	; (8001e60 <HAL_RCC_ClockConfig+0x244>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d010      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	4b4d      	ldr	r3, [pc, #308]	; (8001e60 <HAL_RCC_ClockConfig+0x244>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	f003 030f 	and.w	r3, r3, #15
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d908      	bls.n	8001d46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d34:	4b4a      	ldr	r3, [pc, #296]	; (8001e60 <HAL_RCC_ClockConfig+0x244>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f023 020f 	bic.w	r2, r3, #15
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	4947      	ldr	r1, [pc, #284]	; (8001e60 <HAL_RCC_ClockConfig+0x244>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d055      	beq.n	8001dfe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001d52:	4b43      	ldr	r3, [pc, #268]	; (8001e60 <HAL_RCC_ClockConfig+0x244>)
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	4940      	ldr	r1, [pc, #256]	; (8001e60 <HAL_RCC_ClockConfig+0x244>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d107      	bne.n	8001d7c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d6c:	4b3c      	ldr	r3, [pc, #240]	; (8001e60 <HAL_RCC_ClockConfig+0x244>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d121      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e0f6      	b.n	8001f6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b03      	cmp	r3, #3
 8001d82:	d107      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d84:	4b36      	ldr	r3, [pc, #216]	; (8001e60 <HAL_RCC_ClockConfig+0x244>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d115      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0ea      	b.n	8001f6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d107      	bne.n	8001dac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d9c:	4b30      	ldr	r3, [pc, #192]	; (8001e60 <HAL_RCC_ClockConfig+0x244>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d109      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e0de      	b.n	8001f6a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001dac:	4b2c      	ldr	r3, [pc, #176]	; (8001e60 <HAL_RCC_ClockConfig+0x244>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e0d6      	b.n	8001f6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dbc:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <HAL_RCC_ClockConfig+0x244>)
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	f023 0207 	bic.w	r2, r3, #7
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	4925      	ldr	r1, [pc, #148]	; (8001e60 <HAL_RCC_ClockConfig+0x244>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dce:	f7fe ff7d 	bl	8000ccc <HAL_GetTick>
 8001dd2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd4:	e00a      	b.n	8001dec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dd6:	f7fe ff79 	bl	8000ccc <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e0be      	b.n	8001f6a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dec:	4b1c      	ldr	r3, [pc, #112]	; (8001e60 <HAL_RCC_ClockConfig+0x244>)
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d1eb      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d010      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68da      	ldr	r2, [r3, #12]
 8001e0e:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <HAL_RCC_ClockConfig+0x244>)
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d208      	bcs.n	8001e2c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e1a:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <HAL_RCC_ClockConfig+0x244>)
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	f023 020f 	bic.w	r2, r3, #15
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	490e      	ldr	r1, [pc, #56]	; (8001e60 <HAL_RCC_ClockConfig+0x244>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_RCC_ClockConfig+0x240>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 030f 	and.w	r3, r3, #15
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d214      	bcs.n	8001e64 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3a:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <HAL_RCC_ClockConfig+0x240>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f023 020f 	bic.w	r2, r3, #15
 8001e42:	4906      	ldr	r1, [pc, #24]	; (8001e5c <HAL_RCC_ClockConfig+0x240>)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e4a:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <HAL_RCC_ClockConfig+0x240>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d005      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e086      	b.n	8001f6a <HAL_RCC_ClockConfig+0x34e>
 8001e5c:	52002000 	.word	0x52002000
 8001e60:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0304 	and.w	r3, r3, #4
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d010      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691a      	ldr	r2, [r3, #16]
 8001e74:	4b3f      	ldr	r3, [pc, #252]	; (8001f74 <HAL_RCC_ClockConfig+0x358>)
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d208      	bcs.n	8001e92 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e80:	4b3c      	ldr	r3, [pc, #240]	; (8001f74 <HAL_RCC_ClockConfig+0x358>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	4939      	ldr	r1, [pc, #228]	; (8001f74 <HAL_RCC_ClockConfig+0x358>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d010      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695a      	ldr	r2, [r3, #20]
 8001ea2:	4b34      	ldr	r3, [pc, #208]	; (8001f74 <HAL_RCC_ClockConfig+0x358>)
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d208      	bcs.n	8001ec0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001eae:	4b31      	ldr	r3, [pc, #196]	; (8001f74 <HAL_RCC_ClockConfig+0x358>)
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	492e      	ldr	r1, [pc, #184]	; (8001f74 <HAL_RCC_ClockConfig+0x358>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0310 	and.w	r3, r3, #16
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d010      	beq.n	8001eee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	699a      	ldr	r2, [r3, #24]
 8001ed0:	4b28      	ldr	r3, [pc, #160]	; (8001f74 <HAL_RCC_ClockConfig+0x358>)
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d208      	bcs.n	8001eee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001edc:	4b25      	ldr	r3, [pc, #148]	; (8001f74 <HAL_RCC_ClockConfig+0x358>)
 8001ede:	69db      	ldr	r3, [r3, #28]
 8001ee0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	4922      	ldr	r1, [pc, #136]	; (8001f74 <HAL_RCC_ClockConfig+0x358>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0320 	and.w	r3, r3, #32
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d010      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69da      	ldr	r2, [r3, #28]
 8001efe:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <HAL_RCC_ClockConfig+0x358>)
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d208      	bcs.n	8001f1c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f0a:	4b1a      	ldr	r3, [pc, #104]	; (8001f74 <HAL_RCC_ClockConfig+0x358>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	4917      	ldr	r1, [pc, #92]	; (8001f74 <HAL_RCC_ClockConfig+0x358>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f1c:	f000 f89e 	bl	800205c <HAL_RCC_GetSysClockFreq>
 8001f20:	4602      	mov	r2, r0
 8001f22:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <HAL_RCC_ClockConfig+0x358>)
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	0a1b      	lsrs	r3, r3, #8
 8001f28:	f003 030f 	and.w	r3, r3, #15
 8001f2c:	4912      	ldr	r1, [pc, #72]	; (8001f78 <HAL_RCC_ClockConfig+0x35c>)
 8001f2e:	5ccb      	ldrb	r3, [r1, r3]
 8001f30:	f003 031f 	and.w	r3, r3, #31
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
 8001f38:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <HAL_RCC_ClockConfig+0x358>)
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	f003 030f 	and.w	r3, r3, #15
 8001f42:	4a0d      	ldr	r2, [pc, #52]	; (8001f78 <HAL_RCC_ClockConfig+0x35c>)
 8001f44:	5cd3      	ldrb	r3, [r2, r3]
 8001f46:	f003 031f 	and.w	r3, r3, #31
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f50:	4a0a      	ldr	r2, [pc, #40]	; (8001f7c <HAL_RCC_ClockConfig+0x360>)
 8001f52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f54:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <HAL_RCC_ClockConfig+0x364>)
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HAL_RCC_ClockConfig+0x368>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fe6a 	bl	8000c38 <HAL_InitTick>
 8001f64:	4603      	mov	r3, r0
 8001f66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	58024400 	.word	0x58024400
 8001f78:	080052fc 	.word	0x080052fc
 8001f7c:	24000004 	.word	0x24000004
 8001f80:	24000000 	.word	0x24000000
 8001f84:	24000008 	.word	0x24000008

08001f88 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08c      	sub	sp, #48	; 0x30
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d12a      	bne.n	8001ff0 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8001f9a:	4b2d      	ldr	r3, [pc, #180]	; (8002050 <HAL_RCC_MCOConfig+0xc8>)
 8001f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa0:	4a2b      	ldr	r2, [pc, #172]	; (8002050 <HAL_RCC_MCOConfig+0xc8>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001faa:	4b29      	ldr	r3, [pc, #164]	; (8002050 <HAL_RCC_MCOConfig+0xc8>)
 8001fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	61bb      	str	r3, [r7, #24]
 8001fb6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8001fb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001fce:	f107 031c 	add.w	r3, r7, #28
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	481f      	ldr	r0, [pc, #124]	; (8002054 <HAL_RCC_MCOConfig+0xcc>)
 8001fd6:	f7fe ff75 	bl	8000ec4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8001fda:	4b1d      	ldr	r3, [pc, #116]	; (8002050 <HAL_RCC_MCOConfig+0xc8>)
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8001fe2:	68b9      	ldr	r1, [r7, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	430b      	orrs	r3, r1
 8001fe8:	4919      	ldr	r1, [pc, #100]	; (8002050 <HAL_RCC_MCOConfig+0xc8>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8001fee:	e02a      	b.n	8002046 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8001ff0:	4b17      	ldr	r3, [pc, #92]	; (8002050 <HAL_RCC_MCOConfig+0xc8>)
 8001ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff6:	4a16      	ldr	r2, [pc, #88]	; (8002050 <HAL_RCC_MCOConfig+0xc8>)
 8001ff8:	f043 0304 	orr.w	r3, r3, #4
 8001ffc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <HAL_RCC_MCOConfig+0xc8>)
 8002002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800200e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002018:	2303      	movs	r3, #3
 800201a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002020:	2300      	movs	r3, #0
 8002022:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002024:	f107 031c 	add.w	r3, r7, #28
 8002028:	4619      	mov	r1, r3
 800202a:	480b      	ldr	r0, [pc, #44]	; (8002058 <HAL_RCC_MCOConfig+0xd0>)
 800202c:	f7fe ff4a 	bl	8000ec4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8002030:	4b07      	ldr	r3, [pc, #28]	; (8002050 <HAL_RCC_MCOConfig+0xc8>)
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	01d9      	lsls	r1, r3, #7
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	430b      	orrs	r3, r1
 8002040:	4903      	ldr	r1, [pc, #12]	; (8002050 <HAL_RCC_MCOConfig+0xc8>)
 8002042:	4313      	orrs	r3, r2
 8002044:	610b      	str	r3, [r1, #16]
}
 8002046:	bf00      	nop
 8002048:	3730      	adds	r7, #48	; 0x30
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	58024400 	.word	0x58024400
 8002054:	58020000 	.word	0x58020000
 8002058:	58020800 	.word	0x58020800

0800205c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800205c:	b480      	push	{r7}
 800205e:	b089      	sub	sp, #36	; 0x24
 8002060:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002062:	4bb3      	ldr	r3, [pc, #716]	; (8002330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800206a:	2b18      	cmp	r3, #24
 800206c:	f200 8155 	bhi.w	800231a <HAL_RCC_GetSysClockFreq+0x2be>
 8002070:	a201      	add	r2, pc, #4	; (adr r2, 8002078 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002076:	bf00      	nop
 8002078:	080020dd 	.word	0x080020dd
 800207c:	0800231b 	.word	0x0800231b
 8002080:	0800231b 	.word	0x0800231b
 8002084:	0800231b 	.word	0x0800231b
 8002088:	0800231b 	.word	0x0800231b
 800208c:	0800231b 	.word	0x0800231b
 8002090:	0800231b 	.word	0x0800231b
 8002094:	0800231b 	.word	0x0800231b
 8002098:	08002103 	.word	0x08002103
 800209c:	0800231b 	.word	0x0800231b
 80020a0:	0800231b 	.word	0x0800231b
 80020a4:	0800231b 	.word	0x0800231b
 80020a8:	0800231b 	.word	0x0800231b
 80020ac:	0800231b 	.word	0x0800231b
 80020b0:	0800231b 	.word	0x0800231b
 80020b4:	0800231b 	.word	0x0800231b
 80020b8:	08002109 	.word	0x08002109
 80020bc:	0800231b 	.word	0x0800231b
 80020c0:	0800231b 	.word	0x0800231b
 80020c4:	0800231b 	.word	0x0800231b
 80020c8:	0800231b 	.word	0x0800231b
 80020cc:	0800231b 	.word	0x0800231b
 80020d0:	0800231b 	.word	0x0800231b
 80020d4:	0800231b 	.word	0x0800231b
 80020d8:	0800210f 	.word	0x0800210f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020dc:	4b94      	ldr	r3, [pc, #592]	; (8002330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0320 	and.w	r3, r3, #32
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d009      	beq.n	80020fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80020e8:	4b91      	ldr	r3, [pc, #580]	; (8002330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	08db      	lsrs	r3, r3, #3
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	4a90      	ldr	r2, [pc, #576]	; (8002334 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
 80020f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80020fa:	e111      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80020fc:	4b8d      	ldr	r3, [pc, #564]	; (8002334 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020fe:	61bb      	str	r3, [r7, #24]
      break;
 8002100:	e10e      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002102:	4b8d      	ldr	r3, [pc, #564]	; (8002338 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002104:	61bb      	str	r3, [r7, #24]
      break;
 8002106:	e10b      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002108:	4b8c      	ldr	r3, [pc, #560]	; (800233c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800210a:	61bb      	str	r3, [r7, #24]
      break;
 800210c:	e108      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800210e:	4b88      	ldr	r3, [pc, #544]	; (8002330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002118:	4b85      	ldr	r3, [pc, #532]	; (8002330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800211a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800211c:	091b      	lsrs	r3, r3, #4
 800211e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002122:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002124:	4b82      	ldr	r3, [pc, #520]	; (8002330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800212e:	4b80      	ldr	r3, [pc, #512]	; (8002330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002132:	08db      	lsrs	r3, r3, #3
 8002134:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	fb02 f303 	mul.w	r3, r2, r3
 800213e:	ee07 3a90 	vmov	s15, r3
 8002142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002146:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 80e1 	beq.w	8002314 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	2b02      	cmp	r3, #2
 8002156:	f000 8083 	beq.w	8002260 <HAL_RCC_GetSysClockFreq+0x204>
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2b02      	cmp	r3, #2
 800215e:	f200 80a1 	bhi.w	80022a4 <HAL_RCC_GetSysClockFreq+0x248>
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_RCC_GetSysClockFreq+0x114>
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d056      	beq.n	800221c <HAL_RCC_GetSysClockFreq+0x1c0>
 800216e:	e099      	b.n	80022a4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002170:	4b6f      	ldr	r3, [pc, #444]	; (8002330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0320 	and.w	r3, r3, #32
 8002178:	2b00      	cmp	r3, #0
 800217a:	d02d      	beq.n	80021d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800217c:	4b6c      	ldr	r3, [pc, #432]	; (8002330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	08db      	lsrs	r3, r3, #3
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	4a6b      	ldr	r2, [pc, #428]	; (8002334 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002188:	fa22 f303 	lsr.w	r3, r2, r3
 800218c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	ee07 3a90 	vmov	s15, r3
 8002194:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	ee07 3a90 	vmov	s15, r3
 800219e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021a6:	4b62      	ldr	r3, [pc, #392]	; (8002330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ae:	ee07 3a90 	vmov	s15, r3
 80021b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80021ba:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002340 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80021d6:	e087      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	ee07 3a90 	vmov	s15, r3
 80021de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021e2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002344 <HAL_RCC_GetSysClockFreq+0x2e8>
 80021e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021ea:	4b51      	ldr	r3, [pc, #324]	; (8002330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021f2:	ee07 3a90 	vmov	s15, r3
 80021f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80021fe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002340 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800220a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800220e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002216:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800221a:	e065      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	ee07 3a90 	vmov	s15, r3
 8002222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002226:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002348 <HAL_RCC_GetSysClockFreq+0x2ec>
 800222a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800222e:	4b40      	ldr	r3, [pc, #256]	; (8002330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002236:	ee07 3a90 	vmov	s15, r3
 800223a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800223e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002242:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002340 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800224a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800224e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800225a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800225e:	e043      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	ee07 3a90 	vmov	s15, r3
 8002266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800226a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800234c <HAL_RCC_GetSysClockFreq+0x2f0>
 800226e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002272:	4b2f      	ldr	r3, [pc, #188]	; (8002330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800227a:	ee07 3a90 	vmov	s15, r3
 800227e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002282:	ed97 6a02 	vldr	s12, [r7, #8]
 8002286:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002340 <HAL_RCC_GetSysClockFreq+0x2e4>
 800228a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800228e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800229a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800229e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022a2:	e021      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	ee07 3a90 	vmov	s15, r3
 80022aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ae:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002348 <HAL_RCC_GetSysClockFreq+0x2ec>
 80022b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022b6:	4b1e      	ldr	r3, [pc, #120]	; (8002330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022be:	ee07 3a90 	vmov	s15, r3
 80022c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80022ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002340 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80022da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80022e8:	4b11      	ldr	r3, [pc, #68]	; (8002330 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	0a5b      	lsrs	r3, r3, #9
 80022ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022f2:	3301      	adds	r3, #1
 80022f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	ee07 3a90 	vmov	s15, r3
 80022fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002300:	edd7 6a07 	vldr	s13, [r7, #28]
 8002304:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002308:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800230c:	ee17 3a90 	vmov	r3, s15
 8002310:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002312:	e005      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002314:	2300      	movs	r3, #0
 8002316:	61bb      	str	r3, [r7, #24]
      break;
 8002318:	e002      	b.n	8002320 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800231a:	4b07      	ldr	r3, [pc, #28]	; (8002338 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800231c:	61bb      	str	r3, [r7, #24]
      break;
 800231e:	bf00      	nop
  }

  return sysclockfreq;
 8002320:	69bb      	ldr	r3, [r7, #24]
}
 8002322:	4618      	mov	r0, r3
 8002324:	3724      	adds	r7, #36	; 0x24
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	58024400 	.word	0x58024400
 8002334:	03d09000 	.word	0x03d09000
 8002338:	003d0900 	.word	0x003d0900
 800233c:	017d7840 	.word	0x017d7840
 8002340:	46000000 	.word	0x46000000
 8002344:	4c742400 	.word	0x4c742400
 8002348:	4a742400 	.word	0x4a742400
 800234c:	4bbebc20 	.word	0x4bbebc20

08002350 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002356:	f7ff fe81 	bl	800205c <HAL_RCC_GetSysClockFreq>
 800235a:	4602      	mov	r2, r0
 800235c:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	0a1b      	lsrs	r3, r3, #8
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	490f      	ldr	r1, [pc, #60]	; (80023a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8002368:	5ccb      	ldrb	r3, [r1, r3]
 800236a:	f003 031f 	and.w	r3, r3, #31
 800236e:	fa22 f303 	lsr.w	r3, r2, r3
 8002372:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002374:	4b0a      	ldr	r3, [pc, #40]	; (80023a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	f003 030f 	and.w	r3, r3, #15
 800237c:	4a09      	ldr	r2, [pc, #36]	; (80023a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800237e:	5cd3      	ldrb	r3, [r2, r3]
 8002380:	f003 031f 	and.w	r3, r3, #31
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	fa22 f303 	lsr.w	r3, r2, r3
 800238a:	4a07      	ldr	r2, [pc, #28]	; (80023a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800238c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800238e:	4a07      	ldr	r2, [pc, #28]	; (80023ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002394:	4b04      	ldr	r3, [pc, #16]	; (80023a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8002396:	681b      	ldr	r3, [r3, #0]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	58024400 	.word	0x58024400
 80023a4:	080052fc 	.word	0x080052fc
 80023a8:	24000004 	.word	0x24000004
 80023ac:	24000000 	.word	0x24000000

080023b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80023b4:	f7ff ffcc 	bl	8002350 <HAL_RCC_GetHCLKFreq>
 80023b8:	4602      	mov	r2, r0
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023bc:	69db      	ldr	r3, [r3, #28]
 80023be:	091b      	lsrs	r3, r3, #4
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	4904      	ldr	r1, [pc, #16]	; (80023d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023c6:	5ccb      	ldrb	r3, [r1, r3]
 80023c8:	f003 031f 	and.w	r3, r3, #31
 80023cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	58024400 	.word	0x58024400
 80023d8:	080052fc 	.word	0x080052fc

080023dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80023e0:	f7ff ffb6 	bl	8002350 <HAL_RCC_GetHCLKFreq>
 80023e4:	4602      	mov	r2, r0
 80023e6:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	0a1b      	lsrs	r3, r3, #8
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	4904      	ldr	r1, [pc, #16]	; (8002404 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023f2:	5ccb      	ldrb	r3, [r1, r3]
 80023f4:	f003 031f 	and.w	r3, r3, #31
 80023f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	58024400 	.word	0x58024400
 8002404:	080052fc 	.word	0x080052fc

08002408 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800240c:	b0cc      	sub	sp, #304	; 0x130
 800240e:	af00      	add	r7, sp, #0
 8002410:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002414:	2300      	movs	r3, #0
 8002416:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800241a:	2300      	movs	r3, #0
 800241c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002420:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800242c:	2500      	movs	r5, #0
 800242e:	ea54 0305 	orrs.w	r3, r4, r5
 8002432:	d049      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002434:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800243a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800243e:	d02f      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002440:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002444:	d828      	bhi.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002446:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800244a:	d01a      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800244c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002450:	d822      	bhi.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002456:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800245a:	d007      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800245c:	e01c      	b.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800245e:	4bb8      	ldr	r3, [pc, #736]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002462:	4ab7      	ldr	r2, [pc, #732]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002468:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800246a:	e01a      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800246c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002470:	3308      	adds	r3, #8
 8002472:	2102      	movs	r1, #2
 8002474:	4618      	mov	r0, r3
 8002476:	f001 fccf 	bl	8003e18 <RCCEx_PLL2_Config>
 800247a:	4603      	mov	r3, r0
 800247c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002480:	e00f      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002482:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002486:	3328      	adds	r3, #40	; 0x28
 8002488:	2102      	movs	r1, #2
 800248a:	4618      	mov	r0, r3
 800248c:	f001 fd76 	bl	8003f7c <RCCEx_PLL3_Config>
 8002490:	4603      	mov	r3, r0
 8002492:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002496:	e004      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800249e:	e000      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80024a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024a2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10a      	bne.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80024aa:	4ba5      	ldr	r3, [pc, #660]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ae:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80024b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80024b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024b8:	4aa1      	ldr	r2, [pc, #644]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024ba:	430b      	orrs	r3, r1
 80024bc:	6513      	str	r3, [r2, #80]	; 0x50
 80024be:	e003      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024c0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80024c4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80024cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80024d4:	f04f 0900 	mov.w	r9, #0
 80024d8:	ea58 0309 	orrs.w	r3, r8, r9
 80024dc:	d047      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80024de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80024e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d82a      	bhi.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80024e8:	a201      	add	r2, pc, #4	; (adr r2, 80024f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80024ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ee:	bf00      	nop
 80024f0:	08002505 	.word	0x08002505
 80024f4:	08002513 	.word	0x08002513
 80024f8:	08002529 	.word	0x08002529
 80024fc:	08002547 	.word	0x08002547
 8002500:	08002547 	.word	0x08002547
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002504:	4b8e      	ldr	r3, [pc, #568]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002508:	4a8d      	ldr	r2, [pc, #564]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800250a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800250e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002510:	e01a      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002512:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002516:	3308      	adds	r3, #8
 8002518:	2100      	movs	r1, #0
 800251a:	4618      	mov	r0, r3
 800251c:	f001 fc7c 	bl	8003e18 <RCCEx_PLL2_Config>
 8002520:	4603      	mov	r3, r0
 8002522:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002526:	e00f      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002528:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800252c:	3328      	adds	r3, #40	; 0x28
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f001 fd23 	bl	8003f7c <RCCEx_PLL3_Config>
 8002536:	4603      	mov	r3, r0
 8002538:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800253c:	e004      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002544:	e000      	b.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002546:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002548:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10a      	bne.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002550:	4b7b      	ldr	r3, [pc, #492]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002554:	f023 0107 	bic.w	r1, r3, #7
 8002558:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800255c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255e:	4a78      	ldr	r2, [pc, #480]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002560:	430b      	orrs	r3, r1
 8002562:	6513      	str	r3, [r2, #80]	; 0x50
 8002564:	e003      	b.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002566:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800256a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800256e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002576:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800257a:	f04f 0b00 	mov.w	fp, #0
 800257e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002582:	d04c      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002584:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800258a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800258e:	d030      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002590:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002594:	d829      	bhi.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002596:	2bc0      	cmp	r3, #192	; 0xc0
 8002598:	d02d      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800259a:	2bc0      	cmp	r3, #192	; 0xc0
 800259c:	d825      	bhi.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800259e:	2b80      	cmp	r3, #128	; 0x80
 80025a0:	d018      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80025a2:	2b80      	cmp	r3, #128	; 0x80
 80025a4:	d821      	bhi.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80025aa:	2b40      	cmp	r3, #64	; 0x40
 80025ac:	d007      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80025ae:	e01c      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025b0:	4b63      	ldr	r3, [pc, #396]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b4:	4a62      	ldr	r2, [pc, #392]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80025bc:	e01c      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80025be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80025c2:	3308      	adds	r3, #8
 80025c4:	2100      	movs	r1, #0
 80025c6:	4618      	mov	r0, r3
 80025c8:	f001 fc26 	bl	8003e18 <RCCEx_PLL2_Config>
 80025cc:	4603      	mov	r3, r0
 80025ce:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80025d2:	e011      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80025d8:	3328      	adds	r3, #40	; 0x28
 80025da:	2100      	movs	r1, #0
 80025dc:	4618      	mov	r0, r3
 80025de:	f001 fccd 	bl	8003f7c <RCCEx_PLL3_Config>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80025e8:	e006      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80025f0:	e002      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80025f2:	bf00      	nop
 80025f4:	e000      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80025f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025f8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10a      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002600:	4b4f      	ldr	r3, [pc, #316]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002604:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002608:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800260c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800260e:	4a4c      	ldr	r2, [pc, #304]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002610:	430b      	orrs	r3, r1
 8002612:	6513      	str	r3, [r2, #80]	; 0x50
 8002614:	e003      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002616:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800261a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800261e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002626:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800262a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800262e:	2300      	movs	r3, #0
 8002630:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002634:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8002638:	460b      	mov	r3, r1
 800263a:	4313      	orrs	r3, r2
 800263c:	d053      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800263e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002642:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002646:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800264a:	d035      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800264c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002650:	d82e      	bhi.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002652:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002656:	d031      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002658:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800265c:	d828      	bhi.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800265e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002662:	d01a      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002664:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002668:	d822      	bhi.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800266e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002672:	d007      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002674:	e01c      	b.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002676:	4b32      	ldr	r3, [pc, #200]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267a:	4a31      	ldr	r2, [pc, #196]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800267c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002680:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002682:	e01c      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002684:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002688:	3308      	adds	r3, #8
 800268a:	2100      	movs	r1, #0
 800268c:	4618      	mov	r0, r3
 800268e:	f001 fbc3 	bl	8003e18 <RCCEx_PLL2_Config>
 8002692:	4603      	mov	r3, r0
 8002694:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002698:	e011      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800269a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800269e:	3328      	adds	r3, #40	; 0x28
 80026a0:	2100      	movs	r1, #0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f001 fc6a 	bl	8003f7c <RCCEx_PLL3_Config>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026ae:	e006      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80026b6:	e002      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80026b8:	bf00      	nop
 80026ba:	e000      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80026bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026be:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d10b      	bne.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80026c6:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ca:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80026ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80026d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80026d6:	4a1a      	ldr	r2, [pc, #104]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026d8:	430b      	orrs	r3, r1
 80026da:	6593      	str	r3, [r2, #88]	; 0x58
 80026dc:	e003      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026de:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80026e2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80026e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80026ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ee:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80026f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80026f6:	2300      	movs	r3, #0
 80026f8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80026fc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002700:	460b      	mov	r3, r1
 8002702:	4313      	orrs	r3, r2
 8002704:	d056      	beq.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002706:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800270a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800270e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002712:	d038      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002714:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002718:	d831      	bhi.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800271a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800271e:	d034      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002720:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002724:	d82b      	bhi.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002726:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800272a:	d01d      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800272c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002730:	d825      	bhi.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002732:	2b00      	cmp	r3, #0
 8002734:	d006      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002736:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800273a:	d00a      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800273c:	e01f      	b.n	800277e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800273e:	bf00      	nop
 8002740:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002744:	4ba2      	ldr	r3, [pc, #648]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002748:	4aa1      	ldr	r2, [pc, #644]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800274a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800274e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002750:	e01c      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002752:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002756:	3308      	adds	r3, #8
 8002758:	2100      	movs	r1, #0
 800275a:	4618      	mov	r0, r3
 800275c:	f001 fb5c 	bl	8003e18 <RCCEx_PLL2_Config>
 8002760:	4603      	mov	r3, r0
 8002762:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002766:	e011      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002768:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800276c:	3328      	adds	r3, #40	; 0x28
 800276e:	2100      	movs	r1, #0
 8002770:	4618      	mov	r0, r3
 8002772:	f001 fc03 	bl	8003f7c <RCCEx_PLL3_Config>
 8002776:	4603      	mov	r3, r0
 8002778:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800277c:	e006      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002784:	e002      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002786:	bf00      	nop
 8002788:	e000      	b.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800278a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800278c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10b      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002794:	4b8e      	ldr	r3, [pc, #568]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002798:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800279c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80027a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80027a4:	4a8a      	ldr	r2, [pc, #552]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027a6:	430b      	orrs	r3, r1
 80027a8:	6593      	str	r3, [r2, #88]	; 0x58
 80027aa:	e003      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ac:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80027b0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80027b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80027b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027bc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80027c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80027c4:	2300      	movs	r3, #0
 80027c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80027ca:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80027ce:	460b      	mov	r3, r1
 80027d0:	4313      	orrs	r3, r2
 80027d2:	d03a      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80027d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80027d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027da:	2b30      	cmp	r3, #48	; 0x30
 80027dc:	d01f      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80027de:	2b30      	cmp	r3, #48	; 0x30
 80027e0:	d819      	bhi.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80027e2:	2b20      	cmp	r3, #32
 80027e4:	d00c      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80027e6:	2b20      	cmp	r3, #32
 80027e8:	d815      	bhi.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d019      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80027ee:	2b10      	cmp	r3, #16
 80027f0:	d111      	bne.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027f2:	4b77      	ldr	r3, [pc, #476]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f6:	4a76      	ldr	r2, [pc, #472]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80027fe:	e011      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002800:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002804:	3308      	adds	r3, #8
 8002806:	2102      	movs	r1, #2
 8002808:	4618      	mov	r0, r3
 800280a:	f001 fb05 	bl	8003e18 <RCCEx_PLL2_Config>
 800280e:	4603      	mov	r3, r0
 8002810:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002814:	e006      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800281c:	e002      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800281e:	bf00      	nop
 8002820:	e000      	b.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002822:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002824:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002828:	2b00      	cmp	r3, #0
 800282a:	d10a      	bne.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800282c:	4b68      	ldr	r3, [pc, #416]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800282e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002830:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002834:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283a:	4a65      	ldr	r2, [pc, #404]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800283c:	430b      	orrs	r3, r1
 800283e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002840:	e003      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002842:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002846:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800284a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800284e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002852:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002856:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800285a:	2300      	movs	r3, #0
 800285c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002860:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002864:	460b      	mov	r3, r1
 8002866:	4313      	orrs	r3, r2
 8002868:	d051      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800286a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800286e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002870:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002874:	d035      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002876:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800287a:	d82e      	bhi.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800287c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002880:	d031      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002882:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002886:	d828      	bhi.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800288c:	d01a      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800288e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002892:	d822      	bhi.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002894:	2b00      	cmp	r3, #0
 8002896:	d003      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800289c:	d007      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800289e:	e01c      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028a0:	4b4b      	ldr	r3, [pc, #300]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	4a4a      	ldr	r2, [pc, #296]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80028ac:	e01c      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80028ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80028b2:	3308      	adds	r3, #8
 80028b4:	2100      	movs	r1, #0
 80028b6:	4618      	mov	r0, r3
 80028b8:	f001 faae 	bl	8003e18 <RCCEx_PLL2_Config>
 80028bc:	4603      	mov	r3, r0
 80028be:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80028c2:	e011      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80028c8:	3328      	adds	r3, #40	; 0x28
 80028ca:	2100      	movs	r1, #0
 80028cc:	4618      	mov	r0, r3
 80028ce:	f001 fb55 	bl	8003f7c <RCCEx_PLL3_Config>
 80028d2:	4603      	mov	r3, r0
 80028d4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80028d8:	e006      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80028e0:	e002      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80028e2:	bf00      	nop
 80028e4:	e000      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80028e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028e8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10a      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80028f0:	4b37      	ldr	r3, [pc, #220]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80028f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80028fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028fe:	4a34      	ldr	r2, [pc, #208]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002900:	430b      	orrs	r3, r1
 8002902:	6513      	str	r3, [r2, #80]	; 0x50
 8002904:	e003      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002906:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800290a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800290e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002916:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800291a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800291e:	2300      	movs	r3, #0
 8002920:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002924:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002928:	460b      	mov	r3, r1
 800292a:	4313      	orrs	r3, r2
 800292c:	d056      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800292e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002938:	d033      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800293a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800293e:	d82c      	bhi.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002940:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002944:	d02f      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002946:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800294a:	d826      	bhi.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800294c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002950:	d02b      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002952:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002956:	d820      	bhi.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002958:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800295c:	d012      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800295e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002962:	d81a      	bhi.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002964:	2b00      	cmp	r3, #0
 8002966:	d022      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800296c:	d115      	bne.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800296e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002972:	3308      	adds	r3, #8
 8002974:	2101      	movs	r1, #1
 8002976:	4618      	mov	r0, r3
 8002978:	f001 fa4e 	bl	8003e18 <RCCEx_PLL2_Config>
 800297c:	4603      	mov	r3, r0
 800297e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002982:	e015      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002984:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002988:	3328      	adds	r3, #40	; 0x28
 800298a:	2101      	movs	r1, #1
 800298c:	4618      	mov	r0, r3
 800298e:	f001 faf5 	bl	8003f7c <RCCEx_PLL3_Config>
 8002992:	4603      	mov	r3, r0
 8002994:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002998:	e00a      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80029a0:	e006      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80029a2:	bf00      	nop
 80029a4:	e004      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80029a6:	bf00      	nop
 80029a8:	e002      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80029aa:	bf00      	nop
 80029ac:	e000      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80029ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029b0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10d      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80029b8:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029bc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80029c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029c6:	4a02      	ldr	r2, [pc, #8]	; (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029c8:	430b      	orrs	r3, r1
 80029ca:	6513      	str	r3, [r2, #80]	; 0x50
 80029cc:	e006      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80029ce:	bf00      	nop
 80029d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80029d8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80029dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80029e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80029e8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80029ec:	2300      	movs	r3, #0
 80029ee:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80029f2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80029f6:	460b      	mov	r3, r1
 80029f8:	4313      	orrs	r3, r2
 80029fa:	d055      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80029fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002a04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a08:	d033      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002a0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a0e:	d82c      	bhi.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a14:	d02f      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a1a:	d826      	bhi.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002a1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a20:	d02b      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002a22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002a26:	d820      	bhi.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002a28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a2c:	d012      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002a2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a32:	d81a      	bhi.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d022      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002a38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a3c:	d115      	bne.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a42:	3308      	adds	r3, #8
 8002a44:	2101      	movs	r1, #1
 8002a46:	4618      	mov	r0, r3
 8002a48:	f001 f9e6 	bl	8003e18 <RCCEx_PLL2_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002a52:	e015      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a58:	3328      	adds	r3, #40	; 0x28
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f001 fa8d 	bl	8003f7c <RCCEx_PLL3_Config>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002a68:	e00a      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002a70:	e006      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002a72:	bf00      	nop
 8002a74:	e004      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002a76:	bf00      	nop
 8002a78:	e002      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002a7a:	bf00      	nop
 8002a7c:	e000      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002a7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a80:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10b      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002a88:	4bb6      	ldr	r3, [pc, #728]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a8c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002a90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002a94:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002a98:	4ab2      	ldr	r2, [pc, #712]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002a9a:	430b      	orrs	r3, r1
 8002a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8002a9e:	e003      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002aa4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002aa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab0:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8002ab4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002ab8:	2300      	movs	r3, #0
 8002aba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002abe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	d02a      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8002ac8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d011      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad6:	d10a      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ad8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002adc:	3308      	adds	r3, #8
 8002ade:	2101      	movs	r1, #1
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f001 f999 	bl	8003e18 <RCCEx_PLL2_Config>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8002aec:	e004      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002af4:	e000      	b.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8002af6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002af8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d10a      	bne.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002b00:	4b98      	ldr	r3, [pc, #608]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b04:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8002b08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b0e:	4a95      	ldr	r2, [pc, #596]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b10:	430b      	orrs	r3, r1
 8002b12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b14:	e003      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b16:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002b1a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b26:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002b2a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002b34:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	d037      	beq.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002b3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b48:	d00e      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8002b4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b4e:	d816      	bhi.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x776>
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d018      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002b54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b58:	d111      	bne.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b5a:	4b82      	ldr	r3, [pc, #520]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5e:	4a81      	ldr	r2, [pc, #516]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002b66:	e00f      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b6c:	3308      	adds	r3, #8
 8002b6e:	2101      	movs	r1, #1
 8002b70:	4618      	mov	r0, r3
 8002b72:	f001 f951 	bl	8003e18 <RCCEx_PLL2_Config>
 8002b76:	4603      	mov	r3, r0
 8002b78:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002b7c:	e004      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002b84:	e000      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8002b86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b88:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d10a      	bne.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b90:	4b74      	ldr	r3, [pc, #464]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b94:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002b98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b9e:	4a71      	ldr	r2, [pc, #452]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	6513      	str	r3, [r2, #80]	; 0x50
 8002ba4:	e003      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002baa:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002bae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb6:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002bba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002bc4:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	d03a      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002bce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002bd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bd4:	2b03      	cmp	r3, #3
 8002bd6:	d81d      	bhi.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8002bd8:	a201      	add	r2, pc, #4	; (adr r2, 8002be0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bde:	bf00      	nop
 8002be0:	08002c1d 	.word	0x08002c1d
 8002be4:	08002bf1 	.word	0x08002bf1
 8002be8:	08002bff 	.word	0x08002bff
 8002bec:	08002c1d 	.word	0x08002c1d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bf0:	4b5c      	ldr	r3, [pc, #368]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf4:	4a5b      	ldr	r2, [pc, #364]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002bfc:	e00f      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002bfe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c02:	3308      	adds	r3, #8
 8002c04:	2102      	movs	r1, #2
 8002c06:	4618      	mov	r0, r3
 8002c08:	f001 f906 	bl	8003e18 <RCCEx_PLL2_Config>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002c12:	e004      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002c1a:	e000      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8002c1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c1e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10a      	bne.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002c26:	4b4f      	ldr	r3, [pc, #316]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2a:	f023 0103 	bic.w	r1, r3, #3
 8002c2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c34:	4a4b      	ldr	r2, [pc, #300]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c36:	430b      	orrs	r3, r1
 8002c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002c3a:	e003      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c3c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002c40:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c44:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002c50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c54:	2300      	movs	r3, #0
 8002c56:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002c5a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002c5e:	460b      	mov	r3, r1
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f000 80a0 	beq.w	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c66:	4b40      	ldr	r3, [pc, #256]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a3f      	ldr	r2, [pc, #252]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c72:	f7fe f82b 	bl	8000ccc <HAL_GetTick>
 8002c76:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c7a:	e00b      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c7c:	f7fe f826 	bl	8000ccc <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b64      	cmp	r3, #100	; 0x64
 8002c8a:	d903      	bls.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002c92:	e005      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c94:	4b34      	ldr	r3, [pc, #208]	; (8002d68 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0ed      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8002ca0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d17a      	bne.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002ca8:	4b2e      	ldr	r3, [pc, #184]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002caa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002cb0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002cb4:	4053      	eors	r3, r2
 8002cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d015      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cbe:	4b29      	ldr	r3, [pc, #164]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cc6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cca:	4b26      	ldr	r3, [pc, #152]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cce:	4a25      	ldr	r2, [pc, #148]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cd6:	4b23      	ldr	r3, [pc, #140]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cda:	4a22      	ldr	r2, [pc, #136]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002ce2:	4a20      	ldr	r2, [pc, #128]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ce4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002ce8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002cea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002cee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002cf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cf6:	d118      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf8:	f7fd ffe8 	bl	8000ccc <HAL_GetTick>
 8002cfc:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d00:	e00d      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d02:	f7fd ffe3 	bl	8000ccc <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002d0c:	1ad2      	subs	r2, r2, r3
 8002d0e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d903      	bls.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8002d1c:	e005      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d1e:	4b11      	ldr	r3, [pc, #68]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0eb      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8002d2a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d130      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d36:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002d3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d42:	d115      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8002d44:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002d4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d50:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002d54:	091a      	lsrs	r2, r3, #4
 8002d56:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	4a02      	ldr	r2, [pc, #8]	; (8002d64 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d5c:	430b      	orrs	r3, r1
 8002d5e:	6113      	str	r3, [r2, #16]
 8002d60:	e00c      	b.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x974>
 8002d62:	bf00      	nop
 8002d64:	58024400 	.word	0x58024400
 8002d68:	58024800 	.word	0x58024800
 8002d6c:	00ffffcf 	.word	0x00ffffcf
 8002d70:	4bd4      	ldr	r3, [pc, #848]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	4ad3      	ldr	r2, [pc, #844]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002d76:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002d7a:	6113      	str	r3, [r2, #16]
 8002d7c:	4bd1      	ldr	r3, [pc, #836]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002d7e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8002d80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002d84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d8c:	4acd      	ldr	r2, [pc, #820]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002d8e:	430b      	orrs	r3, r1
 8002d90:	6713      	str	r3, [r2, #112]	; 0x70
 8002d92:	e008      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d94:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002d98:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8002d9c:	e003      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d9e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002da2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002da6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dae:	f002 0301 	and.w	r3, r2, #1
 8002db2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002db6:	2300      	movs	r3, #0
 8002db8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002dbc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f000 808b 	beq.w	8002ede <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002dc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dd0:	2b28      	cmp	r3, #40	; 0x28
 8002dd2:	d86b      	bhi.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002dd4:	a201      	add	r2, pc, #4	; (adr r2, 8002ddc <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8002dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dda:	bf00      	nop
 8002ddc:	08002eb5 	.word	0x08002eb5
 8002de0:	08002ead 	.word	0x08002ead
 8002de4:	08002ead 	.word	0x08002ead
 8002de8:	08002ead 	.word	0x08002ead
 8002dec:	08002ead 	.word	0x08002ead
 8002df0:	08002ead 	.word	0x08002ead
 8002df4:	08002ead 	.word	0x08002ead
 8002df8:	08002ead 	.word	0x08002ead
 8002dfc:	08002e81 	.word	0x08002e81
 8002e00:	08002ead 	.word	0x08002ead
 8002e04:	08002ead 	.word	0x08002ead
 8002e08:	08002ead 	.word	0x08002ead
 8002e0c:	08002ead 	.word	0x08002ead
 8002e10:	08002ead 	.word	0x08002ead
 8002e14:	08002ead 	.word	0x08002ead
 8002e18:	08002ead 	.word	0x08002ead
 8002e1c:	08002e97 	.word	0x08002e97
 8002e20:	08002ead 	.word	0x08002ead
 8002e24:	08002ead 	.word	0x08002ead
 8002e28:	08002ead 	.word	0x08002ead
 8002e2c:	08002ead 	.word	0x08002ead
 8002e30:	08002ead 	.word	0x08002ead
 8002e34:	08002ead 	.word	0x08002ead
 8002e38:	08002ead 	.word	0x08002ead
 8002e3c:	08002eb5 	.word	0x08002eb5
 8002e40:	08002ead 	.word	0x08002ead
 8002e44:	08002ead 	.word	0x08002ead
 8002e48:	08002ead 	.word	0x08002ead
 8002e4c:	08002ead 	.word	0x08002ead
 8002e50:	08002ead 	.word	0x08002ead
 8002e54:	08002ead 	.word	0x08002ead
 8002e58:	08002ead 	.word	0x08002ead
 8002e5c:	08002eb5 	.word	0x08002eb5
 8002e60:	08002ead 	.word	0x08002ead
 8002e64:	08002ead 	.word	0x08002ead
 8002e68:	08002ead 	.word	0x08002ead
 8002e6c:	08002ead 	.word	0x08002ead
 8002e70:	08002ead 	.word	0x08002ead
 8002e74:	08002ead 	.word	0x08002ead
 8002e78:	08002ead 	.word	0x08002ead
 8002e7c:	08002eb5 	.word	0x08002eb5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e84:	3308      	adds	r3, #8
 8002e86:	2101      	movs	r1, #1
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f000 ffc5 	bl	8003e18 <RCCEx_PLL2_Config>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002e94:	e00f      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002e9a:	3328      	adds	r3, #40	; 0x28
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f001 f86c 	bl	8003f7c <RCCEx_PLL3_Config>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002eaa:	e004      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002eb2:	e000      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8002eb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eb6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10b      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002ebe:	4b81      	ldr	r3, [pc, #516]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8002ec6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ece:	4a7d      	ldr	r2, [pc, #500]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002ed0:	430b      	orrs	r3, r1
 8002ed2:	6553      	str	r3, [r2, #84]	; 0x54
 8002ed4:	e003      	b.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002eda:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002ede:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee6:	f002 0302 	and.w	r3, r2, #2
 8002eea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002ef4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4313      	orrs	r3, r2
 8002efc:	d042      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002efe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f04:	2b05      	cmp	r3, #5
 8002f06:	d825      	bhi.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8002f08:	a201      	add	r2, pc, #4	; (adr r2, 8002f10 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8002f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0e:	bf00      	nop
 8002f10:	08002f5d 	.word	0x08002f5d
 8002f14:	08002f29 	.word	0x08002f29
 8002f18:	08002f3f 	.word	0x08002f3f
 8002f1c:	08002f5d 	.word	0x08002f5d
 8002f20:	08002f5d 	.word	0x08002f5d
 8002f24:	08002f5d 	.word	0x08002f5d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f2c:	3308      	adds	r3, #8
 8002f2e:	2101      	movs	r1, #1
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 ff71 	bl	8003e18 <RCCEx_PLL2_Config>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002f3c:	e00f      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f42:	3328      	adds	r3, #40	; 0x28
 8002f44:	2101      	movs	r1, #1
 8002f46:	4618      	mov	r0, r3
 8002f48:	f001 f818 	bl	8003f7c <RCCEx_PLL3_Config>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002f52:	e004      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8002f5a:	e000      	b.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8002f5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f5e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10a      	bne.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002f66:	4b57      	ldr	r3, [pc, #348]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6a:	f023 0107 	bic.w	r1, r3, #7
 8002f6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f74:	4a53      	ldr	r2, [pc, #332]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002f76:	430b      	orrs	r3, r1
 8002f78:	6553      	str	r3, [r2, #84]	; 0x54
 8002f7a:	e003      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f7c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8002f80:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f8c:	f002 0304 	and.w	r3, r2, #4
 8002f90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f94:	2300      	movs	r3, #0
 8002f96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f9a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	d044      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002fa4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fac:	2b05      	cmp	r3, #5
 8002fae:	d825      	bhi.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8002fb0:	a201      	add	r2, pc, #4	; (adr r2, 8002fb8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8002fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb6:	bf00      	nop
 8002fb8:	08003005 	.word	0x08003005
 8002fbc:	08002fd1 	.word	0x08002fd1
 8002fc0:	08002fe7 	.word	0x08002fe7
 8002fc4:	08003005 	.word	0x08003005
 8002fc8:	08003005 	.word	0x08003005
 8002fcc:	08003005 	.word	0x08003005
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fd4:	3308      	adds	r3, #8
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 ff1d 	bl	8003e18 <RCCEx_PLL2_Config>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002fe4:	e00f      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002fe6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002fea:	3328      	adds	r3, #40	; 0x28
 8002fec:	2101      	movs	r1, #1
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 ffc4 	bl	8003f7c <RCCEx_PLL3_Config>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002ffa:	e004      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003002:	e000      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8003004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003006:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10b      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800300e:	4b2d      	ldr	r3, [pc, #180]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003012:	f023 0107 	bic.w	r1, r3, #7
 8003016:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800301a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800301e:	4a29      	ldr	r2, [pc, #164]	; (80030c4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003020:	430b      	orrs	r3, r1
 8003022:	6593      	str	r3, [r2, #88]	; 0x58
 8003024:	e003      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003026:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800302a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800302e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003036:	f002 0320 	and.w	r3, r2, #32
 800303a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800303e:	2300      	movs	r3, #0
 8003040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003044:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003048:	460b      	mov	r3, r1
 800304a:	4313      	orrs	r3, r2
 800304c:	d057      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800304e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003056:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800305a:	d035      	beq.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 800305c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003060:	d82c      	bhi.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003066:	d031      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8003068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800306c:	d826      	bhi.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800306e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003072:	d02d      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8003074:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003078:	d820      	bhi.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800307a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800307e:	d012      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8003080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003084:	d81a      	bhi.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003086:	2b00      	cmp	r3, #0
 8003088:	d024      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 800308a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800308e:	d115      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003090:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003094:	3308      	adds	r3, #8
 8003096:	2100      	movs	r1, #0
 8003098:	4618      	mov	r0, r3
 800309a:	f000 febd 	bl	8003e18 <RCCEx_PLL2_Config>
 800309e:	4603      	mov	r3, r0
 80030a0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80030a4:	e017      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030aa:	3328      	adds	r3, #40	; 0x28
 80030ac:	2102      	movs	r1, #2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 ff64 	bl	8003f7c <RCCEx_PLL3_Config>
 80030b4:	4603      	mov	r3, r0
 80030b6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80030ba:	e00c      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80030c2:	e008      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80030c4:	58024400 	.word	0x58024400
        break;
 80030c8:	bf00      	nop
 80030ca:	e004      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80030cc:	bf00      	nop
 80030ce:	e002      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80030d0:	bf00      	nop
 80030d2:	e000      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80030d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030d6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10b      	bne.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80030de:	4bc2      	ldr	r3, [pc, #776]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80030e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80030ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ee:	4abe      	ldr	r2, [pc, #760]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030f0:	430b      	orrs	r3, r1
 80030f2:	6553      	str	r3, [r2, #84]	; 0x54
 80030f4:	e003      	b.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030f6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80030fa:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80030fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003106:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800310a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800310e:	2300      	movs	r3, #0
 8003110:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003114:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003118:	460b      	mov	r3, r1
 800311a:	4313      	orrs	r3, r2
 800311c:	d055      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800311e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003122:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003126:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800312a:	d033      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 800312c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003130:	d82c      	bhi.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003136:	d02f      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8003138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800313c:	d826      	bhi.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800313e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003142:	d02b      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8003144:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003148:	d820      	bhi.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800314a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800314e:	d012      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8003150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003154:	d81a      	bhi.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003156:	2b00      	cmp	r3, #0
 8003158:	d022      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 800315a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315e:	d115      	bne.n	800318c <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003160:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003164:	3308      	adds	r3, #8
 8003166:	2100      	movs	r1, #0
 8003168:	4618      	mov	r0, r3
 800316a:	f000 fe55 	bl	8003e18 <RCCEx_PLL2_Config>
 800316e:	4603      	mov	r3, r0
 8003170:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003174:	e015      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003176:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800317a:	3328      	adds	r3, #40	; 0x28
 800317c:	2102      	movs	r1, #2
 800317e:	4618      	mov	r0, r3
 8003180:	f000 fefc 	bl	8003f7c <RCCEx_PLL3_Config>
 8003184:	4603      	mov	r3, r0
 8003186:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800318a:	e00a      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003192:	e006      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003194:	bf00      	nop
 8003196:	e004      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003198:	bf00      	nop
 800319a:	e002      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800319c:	bf00      	nop
 800319e:	e000      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80031a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031a2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10b      	bne.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031aa:	4b8f      	ldr	r3, [pc, #572]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ae:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80031b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80031ba:	4a8b      	ldr	r2, [pc, #556]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031bc:	430b      	orrs	r3, r1
 80031be:	6593      	str	r3, [r2, #88]	; 0x58
 80031c0:	e003      	b.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80031c6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80031ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d2:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80031d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80031da:	2300      	movs	r3, #0
 80031dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80031e0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80031e4:	460b      	mov	r3, r1
 80031e6:	4313      	orrs	r3, r2
 80031e8:	d055      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80031ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80031ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80031f2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80031f6:	d033      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80031f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80031fc:	d82c      	bhi.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80031fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003202:	d02f      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003208:	d826      	bhi.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800320a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800320e:	d02b      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003210:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003214:	d820      	bhi.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003216:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800321a:	d012      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 800321c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003220:	d81a      	bhi.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003222:	2b00      	cmp	r3, #0
 8003224:	d022      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8003226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800322a:	d115      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800322c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003230:	3308      	adds	r3, #8
 8003232:	2100      	movs	r1, #0
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fdef 	bl	8003e18 <RCCEx_PLL2_Config>
 800323a:	4603      	mov	r3, r0
 800323c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003240:	e015      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003242:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003246:	3328      	adds	r3, #40	; 0x28
 8003248:	2102      	movs	r1, #2
 800324a:	4618      	mov	r0, r3
 800324c:	f000 fe96 	bl	8003f7c <RCCEx_PLL3_Config>
 8003250:	4603      	mov	r3, r0
 8003252:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003256:	e00a      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800325e:	e006      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003260:	bf00      	nop
 8003262:	e004      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003264:	bf00      	nop
 8003266:	e002      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003268:	bf00      	nop
 800326a:	e000      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800326c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800326e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003272:	2b00      	cmp	r3, #0
 8003274:	d10b      	bne.n	800328e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003276:	4b5c      	ldr	r3, [pc, #368]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327a:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800327e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003282:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003286:	4a58      	ldr	r2, [pc, #352]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003288:	430b      	orrs	r3, r1
 800328a:	6593      	str	r3, [r2, #88]	; 0x58
 800328c:	e003      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800328e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003292:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003296:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800329a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329e:	f002 0308 	and.w	r3, r2, #8
 80032a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032a6:	2300      	movs	r3, #0
 80032a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80032ac:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80032b0:	460b      	mov	r3, r1
 80032b2:	4313      	orrs	r3, r2
 80032b4:	d01e      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80032b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032c2:	d10c      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80032c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032c8:	3328      	adds	r3, #40	; 0x28
 80032ca:	2102      	movs	r1, #2
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 fe55 	bl	8003f7c <RCCEx_PLL3_Config>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d002      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80032de:	4b42      	ldr	r3, [pc, #264]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ee:	4a3e      	ldr	r2, [pc, #248]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032f0:	430b      	orrs	r3, r1
 80032f2:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80032f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80032f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fc:	f002 0310 	and.w	r3, r2, #16
 8003300:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003304:	2300      	movs	r3, #0
 8003306:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800330a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800330e:	460b      	mov	r3, r1
 8003310:	4313      	orrs	r3, r2
 8003312:	d01e      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003314:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003318:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800331c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003320:	d10c      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003322:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003326:	3328      	adds	r3, #40	; 0x28
 8003328:	2102      	movs	r1, #2
 800332a:	4618      	mov	r0, r3
 800332c:	f000 fe26 	bl	8003f7c <RCCEx_PLL3_Config>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d002      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800333c:	4b2a      	ldr	r3, [pc, #168]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800333e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003340:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003344:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003348:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800334c:	4a26      	ldr	r2, [pc, #152]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800334e:	430b      	orrs	r3, r1
 8003350:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003352:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800335e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003362:	2300      	movs	r3, #0
 8003364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003368:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800336c:	460b      	mov	r3, r1
 800336e:	4313      	orrs	r3, r2
 8003370:	d040      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003372:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003376:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800337a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800337e:	d022      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8003380:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003384:	d81b      	bhi.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003386:	2b00      	cmp	r3, #0
 8003388:	d003      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800338a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800338e:	d00b      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8003390:	e015      	b.n	80033be <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003392:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003396:	3308      	adds	r3, #8
 8003398:	2100      	movs	r1, #0
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fd3c 	bl	8003e18 <RCCEx_PLL2_Config>
 80033a0:	4603      	mov	r3, r0
 80033a2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80033a6:	e00f      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033ac:	3328      	adds	r3, #40	; 0x28
 80033ae:	2102      	movs	r1, #2
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 fde3 	bl	8003f7c <RCCEx_PLL3_Config>
 80033b6:	4603      	mov	r3, r0
 80033b8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80033bc:	e004      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80033c4:	e000      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80033c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033c8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10d      	bne.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033d0:	4b05      	ldr	r3, [pc, #20]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d4:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80033d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033dc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80033e0:	4a01      	ldr	r2, [pc, #4]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033e2:	430b      	orrs	r3, r1
 80033e4:	6593      	str	r3, [r2, #88]	; 0x58
 80033e6:	e005      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80033e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ec:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80033f0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80033f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fc:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003400:	67bb      	str	r3, [r7, #120]	; 0x78
 8003402:	2300      	movs	r3, #0
 8003404:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003406:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800340a:	460b      	mov	r3, r1
 800340c:	4313      	orrs	r3, r2
 800340e:	d03b      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003410:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003418:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800341c:	d01f      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x1056>
 800341e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003422:	d818      	bhi.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8003424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003428:	d003      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 800342a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800342e:	d007      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8003430:	e011      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003432:	4b64      	ldr	r3, [pc, #400]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	4a63      	ldr	r2, [pc, #396]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800343c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800343e:	e00f      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003440:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003444:	3328      	adds	r3, #40	; 0x28
 8003446:	2101      	movs	r1, #1
 8003448:	4618      	mov	r0, r3
 800344a:	f000 fd97 	bl	8003f7c <RCCEx_PLL3_Config>
 800344e:	4603      	mov	r3, r0
 8003450:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003454:	e004      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800345c:	e000      	b.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800345e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003460:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003464:	2b00      	cmp	r3, #0
 8003466:	d10b      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003468:	4b56      	ldr	r3, [pc, #344]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800346a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003470:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003478:	4a52      	ldr	r2, [pc, #328]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800347a:	430b      	orrs	r3, r1
 800347c:	6553      	str	r3, [r2, #84]	; 0x54
 800347e:	e003      	b.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003480:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003484:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003488:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800348c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003490:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003494:	673b      	str	r3, [r7, #112]	; 0x70
 8003496:	2300      	movs	r3, #0
 8003498:	677b      	str	r3, [r7, #116]	; 0x74
 800349a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800349e:	460b      	mov	r3, r1
 80034a0:	4313      	orrs	r3, r2
 80034a2:	d031      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80034a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d003      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80034ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b2:	d007      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80034b4:	e011      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034b6:	4b43      	ldr	r3, [pc, #268]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80034b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ba:	4a42      	ldr	r2, [pc, #264]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80034bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80034c2:	e00e      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034c8:	3308      	adds	r3, #8
 80034ca:	2102      	movs	r1, #2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 fca3 	bl	8003e18 <RCCEx_PLL2_Config>
 80034d2:	4603      	mov	r3, r0
 80034d4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80034d8:	e003      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80034e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034e2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10a      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80034ea:	4b36      	ldr	r3, [pc, #216]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80034ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ee:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f8:	4a32      	ldr	r2, [pc, #200]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80034fa:	430b      	orrs	r3, r1
 80034fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034fe:	e003      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003500:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003504:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003508:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800350c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003510:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003514:	66bb      	str	r3, [r7, #104]	; 0x68
 8003516:	2300      	movs	r3, #0
 8003518:	66fb      	str	r3, [r7, #108]	; 0x6c
 800351a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800351e:	460b      	mov	r3, r1
 8003520:	4313      	orrs	r3, r2
 8003522:	d00c      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003524:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003528:	3328      	adds	r3, #40	; 0x28
 800352a:	2102      	movs	r1, #2
 800352c:	4618      	mov	r0, r3
 800352e:	f000 fd25 	bl	8003f7c <RCCEx_PLL3_Config>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d002      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800353e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003546:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800354a:	663b      	str	r3, [r7, #96]	; 0x60
 800354c:	2300      	movs	r3, #0
 800354e:	667b      	str	r3, [r7, #100]	; 0x64
 8003550:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003554:	460b      	mov	r3, r1
 8003556:	4313      	orrs	r3, r2
 8003558:	d03a      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800355a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800355e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003566:	d018      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8003568:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800356c:	d811      	bhi.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800356e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003572:	d014      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8003574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003578:	d80b      	bhi.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800357a:	2b00      	cmp	r3, #0
 800357c:	d011      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800357e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003582:	d106      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003584:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	4a0e      	ldr	r2, [pc, #56]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800358a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800358e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003590:	e008      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8003598:	e004      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800359a:	bf00      	nop
 800359c:	e002      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800359e:	bf00      	nop
 80035a0:	e000      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80035a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035a4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10d      	bne.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035ac:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80035ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035bc:	4a01      	ldr	r2, [pc, #4]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80035be:	430b      	orrs	r3, r1
 80035c0:	6553      	str	r3, [r2, #84]	; 0x54
 80035c2:	e005      	b.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80035c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80035cc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80035dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80035de:	2300      	movs	r3, #0
 80035e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035e2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80035e6:	460b      	mov	r3, r1
 80035e8:	4313      	orrs	r3, r2
 80035ea:	d009      	beq.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035ec:	4baa      	ldr	r3, [pc, #680]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80035ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035f0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80035f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80035f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80035fa:	4aa7      	ldr	r2, [pc, #668]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80035fc:	430b      	orrs	r3, r1
 80035fe:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003600:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003608:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800360c:	653b      	str	r3, [r7, #80]	; 0x50
 800360e:	2300      	movs	r3, #0
 8003610:	657b      	str	r3, [r7, #84]	; 0x54
 8003612:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003616:	460b      	mov	r3, r1
 8003618:	4313      	orrs	r3, r2
 800361a:	d00a      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800361c:	4b9e      	ldr	r3, [pc, #632]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003624:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003628:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800362c:	4a9a      	ldr	r2, [pc, #616]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800362e:	430b      	orrs	r3, r1
 8003630:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003632:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800363e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003640:	2300      	movs	r3, #0
 8003642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003644:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003648:	460b      	mov	r3, r1
 800364a:	4313      	orrs	r3, r2
 800364c:	d009      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800364e:	4b92      	ldr	r3, [pc, #584]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003652:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003656:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800365a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365c:	4a8e      	ldr	r2, [pc, #568]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800365e:	430b      	orrs	r3, r1
 8003660:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003662:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366a:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800366e:	643b      	str	r3, [r7, #64]	; 0x40
 8003670:	2300      	movs	r3, #0
 8003672:	647b      	str	r3, [r7, #68]	; 0x44
 8003674:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003678:	460b      	mov	r3, r1
 800367a:	4313      	orrs	r3, r2
 800367c:	d00e      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800367e:	4b86      	ldr	r3, [pc, #536]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	4a85      	ldr	r2, [pc, #532]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003684:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003688:	6113      	str	r3, [r2, #16]
 800368a:	4b83      	ldr	r3, [pc, #524]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800368c:	6919      	ldr	r1, [r3, #16]
 800368e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003692:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003696:	4a80      	ldr	r2, [pc, #512]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003698:	430b      	orrs	r3, r1
 800369a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800369c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80036a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80036aa:	2300      	movs	r3, #0
 80036ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ae:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80036b2:	460b      	mov	r3, r1
 80036b4:	4313      	orrs	r3, r2
 80036b6:	d009      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80036b8:	4b77      	ldr	r3, [pc, #476]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80036ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036bc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80036c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c6:	4a74      	ldr	r2, [pc, #464]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80036c8:	430b      	orrs	r3, r1
 80036ca:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d4:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80036d8:	633b      	str	r3, [r7, #48]	; 0x30
 80036da:	2300      	movs	r3, #0
 80036dc:	637b      	str	r3, [r7, #52]	; 0x34
 80036de:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80036e2:	460b      	mov	r3, r1
 80036e4:	4313      	orrs	r3, r2
 80036e6:	d00a      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036e8:	4b6b      	ldr	r3, [pc, #428]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80036ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ec:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80036f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80036f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f8:	4a67      	ldr	r2, [pc, #412]	; (8003898 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80036fa:	430b      	orrs	r3, r1
 80036fc:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80036fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003706:	2100      	movs	r1, #0
 8003708:	62b9      	str	r1, [r7, #40]	; 0x28
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003710:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003714:	460b      	mov	r3, r1
 8003716:	4313      	orrs	r3, r2
 8003718:	d011      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800371a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800371e:	3308      	adds	r3, #8
 8003720:	2100      	movs	r1, #0
 8003722:	4618      	mov	r0, r3
 8003724:	f000 fb78 	bl	8003e18 <RCCEx_PLL2_Config>
 8003728:	4603      	mov	r3, r0
 800372a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800372e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003736:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800373a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800373e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003746:	2100      	movs	r1, #0
 8003748:	6239      	str	r1, [r7, #32]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
 8003750:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003754:	460b      	mov	r3, r1
 8003756:	4313      	orrs	r3, r2
 8003758:	d011      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800375a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800375e:	3308      	adds	r3, #8
 8003760:	2101      	movs	r1, #1
 8003762:	4618      	mov	r0, r3
 8003764:	f000 fb58 	bl	8003e18 <RCCEx_PLL2_Config>
 8003768:	4603      	mov	r3, r0
 800376a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800376e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003776:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800377a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800377e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003786:	2100      	movs	r1, #0
 8003788:	61b9      	str	r1, [r7, #24]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	61fb      	str	r3, [r7, #28]
 8003790:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003794:	460b      	mov	r3, r1
 8003796:	4313      	orrs	r3, r2
 8003798:	d011      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800379a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800379e:	3308      	adds	r3, #8
 80037a0:	2102      	movs	r1, #2
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 fb38 	bl	8003e18 <RCCEx_PLL2_Config>
 80037a8:	4603      	mov	r3, r0
 80037aa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80037ae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d003      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80037ba:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80037be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c6:	2100      	movs	r1, #0
 80037c8:	6139      	str	r1, [r7, #16]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80037d4:	460b      	mov	r3, r1
 80037d6:	4313      	orrs	r3, r2
 80037d8:	d011      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80037de:	3328      	adds	r3, #40	; 0x28
 80037e0:	2100      	movs	r1, #0
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 fbca 	bl	8003f7c <RCCEx_PLL3_Config>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 80037ee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d003      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80037fa:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80037fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003806:	2100      	movs	r1, #0
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	f003 0310 	and.w	r3, r3, #16
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003814:	460b      	mov	r3, r1
 8003816:	4313      	orrs	r3, r2
 8003818:	d011      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800381a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800381e:	3328      	adds	r3, #40	; 0x28
 8003820:	2101      	movs	r1, #1
 8003822:	4618      	mov	r0, r3
 8003824:	f000 fbaa 	bl	8003f7c <RCCEx_PLL3_Config>
 8003828:	4603      	mov	r3, r0
 800382a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800382e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003836:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800383a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800383e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003846:	2100      	movs	r1, #0
 8003848:	6039      	str	r1, [r7, #0]
 800384a:	f003 0320 	and.w	r3, r3, #32
 800384e:	607b      	str	r3, [r7, #4]
 8003850:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003854:	460b      	mov	r3, r1
 8003856:	4313      	orrs	r3, r2
 8003858:	d011      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800385a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800385e:	3328      	adds	r3, #40	; 0x28
 8003860:	2102      	movs	r1, #2
 8003862:	4618      	mov	r0, r3
 8003864:	f000 fb8a 	bl	8003f7c <RCCEx_PLL3_Config>
 8003868:	4603      	mov	r3, r0
 800386a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 800386e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003876:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800387a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 800387e:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	e000      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
}
 800388c:	4618      	mov	r0, r3
 800388e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003892:	46bd      	mov	sp, r7
 8003894:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003898:	58024400 	.word	0x58024400

0800389c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80038a0:	f7fe fd56 	bl	8002350 <HAL_RCC_GetHCLKFreq>
 80038a4:	4602      	mov	r2, r0
 80038a6:	4b06      	ldr	r3, [pc, #24]	; (80038c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	091b      	lsrs	r3, r3, #4
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	4904      	ldr	r1, [pc, #16]	; (80038c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80038b2:	5ccb      	ldrb	r3, [r1, r3]
 80038b4:	f003 031f 	and.w	r3, r3, #31
 80038b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80038bc:	4618      	mov	r0, r3
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	58024400 	.word	0x58024400
 80038c4:	080052fc 	.word	0x080052fc

080038c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b089      	sub	sp, #36	; 0x24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038d0:	4ba1      	ldr	r3, [pc, #644]	; (8003b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d4:	f003 0303 	and.w	r3, r3, #3
 80038d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80038da:	4b9f      	ldr	r3, [pc, #636]	; (8003b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038de:	0b1b      	lsrs	r3, r3, #12
 80038e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80038e6:	4b9c      	ldr	r3, [pc, #624]	; (8003b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ea:	091b      	lsrs	r3, r3, #4
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80038f2:	4b99      	ldr	r3, [pc, #612]	; (8003b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f6:	08db      	lsrs	r3, r3, #3
 80038f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	fb02 f303 	mul.w	r3, r2, r3
 8003902:	ee07 3a90 	vmov	s15, r3
 8003906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800390a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 8111 	beq.w	8003b38 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	2b02      	cmp	r3, #2
 800391a:	f000 8083 	beq.w	8003a24 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	2b02      	cmp	r3, #2
 8003922:	f200 80a1 	bhi.w	8003a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d003      	beq.n	8003934 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d056      	beq.n	80039e0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003932:	e099      	b.n	8003a68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003934:	4b88      	ldr	r3, [pc, #544]	; (8003b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0320 	and.w	r3, r3, #32
 800393c:	2b00      	cmp	r3, #0
 800393e:	d02d      	beq.n	800399c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003940:	4b85      	ldr	r3, [pc, #532]	; (8003b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	08db      	lsrs	r3, r3, #3
 8003946:	f003 0303 	and.w	r3, r3, #3
 800394a:	4a84      	ldr	r2, [pc, #528]	; (8003b5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800394c:	fa22 f303 	lsr.w	r3, r2, r3
 8003950:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	ee07 3a90 	vmov	s15, r3
 8003958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	ee07 3a90 	vmov	s15, r3
 8003962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800396a:	4b7b      	ldr	r3, [pc, #492]	; (8003b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800396c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800396e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003972:	ee07 3a90 	vmov	s15, r3
 8003976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800397a:	ed97 6a03 	vldr	s12, [r7, #12]
 800397e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003b60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800398a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800398e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003996:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800399a:	e087      	b.n	8003aac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	ee07 3a90 	vmov	s15, r3
 80039a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003b64 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80039aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ae:	4b6a      	ldr	r3, [pc, #424]	; (8003b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039b6:	ee07 3a90 	vmov	s15, r3
 80039ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039be:	ed97 6a03 	vldr	s12, [r7, #12]
 80039c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003b60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039de:	e065      	b.n	8003aac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	ee07 3a90 	vmov	s15, r3
 80039e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003b68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80039ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039f2:	4b59      	ldr	r3, [pc, #356]	; (8003b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039fa:	ee07 3a90 	vmov	s15, r3
 80039fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a06:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003b60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a22:	e043      	b.n	8003aac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	ee07 3a90 	vmov	s15, r3
 8003a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a2e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003b6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a36:	4b48      	ldr	r3, [pc, #288]	; (8003b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a3e:	ee07 3a90 	vmov	s15, r3
 8003a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a4a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003b60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a66:	e021      	b.n	8003aac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	ee07 3a90 	vmov	s15, r3
 8003a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a72:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003b68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a7a:	4b37      	ldr	r3, [pc, #220]	; (8003b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a82:	ee07 3a90 	vmov	s15, r3
 8003a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a8e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003b60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003aaa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003aac:	4b2a      	ldr	r3, [pc, #168]	; (8003b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab0:	0a5b      	lsrs	r3, r3, #9
 8003ab2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ab6:	ee07 3a90 	vmov	s15, r3
 8003aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003abe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ac2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ac6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003aca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ace:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ad2:	ee17 2a90 	vmov	r2, s15
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003ada:	4b1f      	ldr	r3, [pc, #124]	; (8003b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ade:	0c1b      	lsrs	r3, r3, #16
 8003ae0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ae4:	ee07 3a90 	vmov	s15, r3
 8003ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003af0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003af4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003af8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b00:	ee17 2a90 	vmov	r2, s15
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003b08:	4b13      	ldr	r3, [pc, #76]	; (8003b58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b0c:	0e1b      	lsrs	r3, r3, #24
 8003b0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b12:	ee07 3a90 	vmov	s15, r3
 8003b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b22:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b2e:	ee17 2a90 	vmov	r2, s15
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003b36:	e008      	b.n	8003b4a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	609a      	str	r2, [r3, #8]
}
 8003b4a:	bf00      	nop
 8003b4c:	3724      	adds	r7, #36	; 0x24
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	58024400 	.word	0x58024400
 8003b5c:	03d09000 	.word	0x03d09000
 8003b60:	46000000 	.word	0x46000000
 8003b64:	4c742400 	.word	0x4c742400
 8003b68:	4a742400 	.word	0x4a742400
 8003b6c:	4bbebc20 	.word	0x4bbebc20

08003b70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b089      	sub	sp, #36	; 0x24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b78:	4ba1      	ldr	r3, [pc, #644]	; (8003e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003b82:	4b9f      	ldr	r3, [pc, #636]	; (8003e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b86:	0d1b      	lsrs	r3, r3, #20
 8003b88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003b8e:	4b9c      	ldr	r3, [pc, #624]	; (8003e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b92:	0a1b      	lsrs	r3, r3, #8
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003b9a:	4b99      	ldr	r3, [pc, #612]	; (8003e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9e:	08db      	lsrs	r3, r3, #3
 8003ba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	fb02 f303 	mul.w	r3, r2, r3
 8003baa:	ee07 3a90 	vmov	s15, r3
 8003bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 8111 	beq.w	8003de0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	f000 8083 	beq.w	8003ccc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	f200 80a1 	bhi.w	8003d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d056      	beq.n	8003c88 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003bda:	e099      	b.n	8003d10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bdc:	4b88      	ldr	r3, [pc, #544]	; (8003e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0320 	and.w	r3, r3, #32
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d02d      	beq.n	8003c44 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003be8:	4b85      	ldr	r3, [pc, #532]	; (8003e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	08db      	lsrs	r3, r3, #3
 8003bee:	f003 0303 	and.w	r3, r3, #3
 8003bf2:	4a84      	ldr	r2, [pc, #528]	; (8003e04 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	ee07 3a90 	vmov	s15, r3
 8003c00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	ee07 3a90 	vmov	s15, r3
 8003c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c12:	4b7b      	ldr	r3, [pc, #492]	; (8003e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c26:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003e08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003c42:	e087      	b.n	8003d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	ee07 3a90 	vmov	s15, r3
 8003c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c4e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003e0c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c56:	4b6a      	ldr	r3, [pc, #424]	; (8003e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c5e:	ee07 3a90 	vmov	s15, r3
 8003c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c6a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003e08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c86:	e065      	b.n	8003d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	ee07 3a90 	vmov	s15, r3
 8003c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c92:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c9a:	4b59      	ldr	r3, [pc, #356]	; (8003e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca2:	ee07 3a90 	vmov	s15, r3
 8003ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cae:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003e08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cca:	e043      	b.n	8003d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	ee07 3a90 	vmov	s15, r3
 8003cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cd6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003e14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cde:	4b48      	ldr	r3, [pc, #288]	; (8003e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce6:	ee07 3a90 	vmov	s15, r3
 8003cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cf2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003e08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cfe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d0e:	e021      	b.n	8003d54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	ee07 3a90 	vmov	s15, r3
 8003d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d1a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003e10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d22:	4b37      	ldr	r3, [pc, #220]	; (8003e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d2a:	ee07 3a90 	vmov	s15, r3
 8003d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d32:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d36:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003e08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003d54:	4b2a      	ldr	r3, [pc, #168]	; (8003e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	0a5b      	lsrs	r3, r3, #9
 8003d5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d5e:	ee07 3a90 	vmov	s15, r3
 8003d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d7a:	ee17 2a90 	vmov	r2, s15
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003d82:	4b1f      	ldr	r3, [pc, #124]	; (8003e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	0c1b      	lsrs	r3, r3, #16
 8003d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d8c:	ee07 3a90 	vmov	s15, r3
 8003d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003da4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003da8:	ee17 2a90 	vmov	r2, s15
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003db0:	4b13      	ldr	r3, [pc, #76]	; (8003e00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db4:	0e1b      	lsrs	r3, r3, #24
 8003db6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dba:	ee07 3a90 	vmov	s15, r3
 8003dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dc2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dca:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dd6:	ee17 2a90 	vmov	r2, s15
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003dde:	e008      	b.n	8003df2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	609a      	str	r2, [r3, #8]
}
 8003df2:	bf00      	nop
 8003df4:	3724      	adds	r7, #36	; 0x24
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	58024400 	.word	0x58024400
 8003e04:	03d09000 	.word	0x03d09000
 8003e08:	46000000 	.word	0x46000000
 8003e0c:	4c742400 	.word	0x4c742400
 8003e10:	4a742400 	.word	0x4a742400
 8003e14:	4bbebc20 	.word	0x4bbebc20

08003e18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e26:	4b53      	ldr	r3, [pc, #332]	; (8003f74 <RCCEx_PLL2_Config+0x15c>)
 8003e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	2b03      	cmp	r3, #3
 8003e30:	d101      	bne.n	8003e36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e099      	b.n	8003f6a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003e36:	4b4f      	ldr	r3, [pc, #316]	; (8003f74 <RCCEx_PLL2_Config+0x15c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a4e      	ldr	r2, [pc, #312]	; (8003f74 <RCCEx_PLL2_Config+0x15c>)
 8003e3c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e42:	f7fc ff43 	bl	8000ccc <HAL_GetTick>
 8003e46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e48:	e008      	b.n	8003e5c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e4a:	f7fc ff3f 	bl	8000ccc <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d901      	bls.n	8003e5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e086      	b.n	8003f6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e5c:	4b45      	ldr	r3, [pc, #276]	; (8003f74 <RCCEx_PLL2_Config+0x15c>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1f0      	bne.n	8003e4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003e68:	4b42      	ldr	r3, [pc, #264]	; (8003f74 <RCCEx_PLL2_Config+0x15c>)
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	031b      	lsls	r3, r3, #12
 8003e76:	493f      	ldr	r1, [pc, #252]	; (8003f74 <RCCEx_PLL2_Config+0x15c>)
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	628b      	str	r3, [r1, #40]	; 0x28
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	3b01      	subs	r3, #1
 8003e82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	025b      	lsls	r3, r3, #9
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	431a      	orrs	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	041b      	lsls	r3, r3, #16
 8003e9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	061b      	lsls	r3, r3, #24
 8003ea8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003eac:	4931      	ldr	r1, [pc, #196]	; (8003f74 <RCCEx_PLL2_Config+0x15c>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003eb2:	4b30      	ldr	r3, [pc, #192]	; (8003f74 <RCCEx_PLL2_Config+0x15c>)
 8003eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	492d      	ldr	r1, [pc, #180]	; (8003f74 <RCCEx_PLL2_Config+0x15c>)
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003ec4:	4b2b      	ldr	r3, [pc, #172]	; (8003f74 <RCCEx_PLL2_Config+0x15c>)
 8003ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec8:	f023 0220 	bic.w	r2, r3, #32
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	4928      	ldr	r1, [pc, #160]	; (8003f74 <RCCEx_PLL2_Config+0x15c>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003ed6:	4b27      	ldr	r3, [pc, #156]	; (8003f74 <RCCEx_PLL2_Config+0x15c>)
 8003ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eda:	4a26      	ldr	r2, [pc, #152]	; (8003f74 <RCCEx_PLL2_Config+0x15c>)
 8003edc:	f023 0310 	bic.w	r3, r3, #16
 8003ee0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003ee2:	4b24      	ldr	r3, [pc, #144]	; (8003f74 <RCCEx_PLL2_Config+0x15c>)
 8003ee4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ee6:	4b24      	ldr	r3, [pc, #144]	; (8003f78 <RCCEx_PLL2_Config+0x160>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	69d2      	ldr	r2, [r2, #28]
 8003eee:	00d2      	lsls	r2, r2, #3
 8003ef0:	4920      	ldr	r1, [pc, #128]	; (8003f74 <RCCEx_PLL2_Config+0x15c>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003ef6:	4b1f      	ldr	r3, [pc, #124]	; (8003f74 <RCCEx_PLL2_Config+0x15c>)
 8003ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003efa:	4a1e      	ldr	r2, [pc, #120]	; (8003f74 <RCCEx_PLL2_Config+0x15c>)
 8003efc:	f043 0310 	orr.w	r3, r3, #16
 8003f00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d106      	bne.n	8003f16 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003f08:	4b1a      	ldr	r3, [pc, #104]	; (8003f74 <RCCEx_PLL2_Config+0x15c>)
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	4a19      	ldr	r2, [pc, #100]	; (8003f74 <RCCEx_PLL2_Config+0x15c>)
 8003f0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f12:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f14:	e00f      	b.n	8003f36 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d106      	bne.n	8003f2a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003f1c:	4b15      	ldr	r3, [pc, #84]	; (8003f74 <RCCEx_PLL2_Config+0x15c>)
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	4a14      	ldr	r2, [pc, #80]	; (8003f74 <RCCEx_PLL2_Config+0x15c>)
 8003f22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f26:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003f28:	e005      	b.n	8003f36 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003f2a:	4b12      	ldr	r3, [pc, #72]	; (8003f74 <RCCEx_PLL2_Config+0x15c>)
 8003f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2e:	4a11      	ldr	r2, [pc, #68]	; (8003f74 <RCCEx_PLL2_Config+0x15c>)
 8003f30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f34:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003f36:	4b0f      	ldr	r3, [pc, #60]	; (8003f74 <RCCEx_PLL2_Config+0x15c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a0e      	ldr	r2, [pc, #56]	; (8003f74 <RCCEx_PLL2_Config+0x15c>)
 8003f3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f42:	f7fc fec3 	bl	8000ccc <HAL_GetTick>
 8003f46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f48:	e008      	b.n	8003f5c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f4a:	f7fc febf 	bl	8000ccc <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d901      	bls.n	8003f5c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e006      	b.n	8003f6a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f5c:	4b05      	ldr	r3, [pc, #20]	; (8003f74 <RCCEx_PLL2_Config+0x15c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d0f0      	beq.n	8003f4a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	58024400 	.word	0x58024400
 8003f78:	ffff0007 	.word	0xffff0007

08003f7c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f8a:	4b53      	ldr	r3, [pc, #332]	; (80040d8 <RCCEx_PLL3_Config+0x15c>)
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	f003 0303 	and.w	r3, r3, #3
 8003f92:	2b03      	cmp	r3, #3
 8003f94:	d101      	bne.n	8003f9a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e099      	b.n	80040ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003f9a:	4b4f      	ldr	r3, [pc, #316]	; (80040d8 <RCCEx_PLL3_Config+0x15c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a4e      	ldr	r2, [pc, #312]	; (80040d8 <RCCEx_PLL3_Config+0x15c>)
 8003fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fa6:	f7fc fe91 	bl	8000ccc <HAL_GetTick>
 8003faa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003fac:	e008      	b.n	8003fc0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003fae:	f7fc fe8d 	bl	8000ccc <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e086      	b.n	80040ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003fc0:	4b45      	ldr	r3, [pc, #276]	; (80040d8 <RCCEx_PLL3_Config+0x15c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1f0      	bne.n	8003fae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003fcc:	4b42      	ldr	r3, [pc, #264]	; (80040d8 <RCCEx_PLL3_Config+0x15c>)
 8003fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fd0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	051b      	lsls	r3, r3, #20
 8003fda:	493f      	ldr	r1, [pc, #252]	; (80040d8 <RCCEx_PLL3_Config+0x15c>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	628b      	str	r3, [r1, #40]	; 0x28
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	025b      	lsls	r3, r3, #9
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	431a      	orrs	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	041b      	lsls	r3, r3, #16
 8003ffe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004002:	431a      	orrs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	3b01      	subs	r3, #1
 800400a:	061b      	lsls	r3, r3, #24
 800400c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004010:	4931      	ldr	r1, [pc, #196]	; (80040d8 <RCCEx_PLL3_Config+0x15c>)
 8004012:	4313      	orrs	r3, r2
 8004014:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004016:	4b30      	ldr	r3, [pc, #192]	; (80040d8 <RCCEx_PLL3_Config+0x15c>)
 8004018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	492d      	ldr	r1, [pc, #180]	; (80040d8 <RCCEx_PLL3_Config+0x15c>)
 8004024:	4313      	orrs	r3, r2
 8004026:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004028:	4b2b      	ldr	r3, [pc, #172]	; (80040d8 <RCCEx_PLL3_Config+0x15c>)
 800402a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	4928      	ldr	r1, [pc, #160]	; (80040d8 <RCCEx_PLL3_Config+0x15c>)
 8004036:	4313      	orrs	r3, r2
 8004038:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800403a:	4b27      	ldr	r3, [pc, #156]	; (80040d8 <RCCEx_PLL3_Config+0x15c>)
 800403c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403e:	4a26      	ldr	r2, [pc, #152]	; (80040d8 <RCCEx_PLL3_Config+0x15c>)
 8004040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004044:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004046:	4b24      	ldr	r3, [pc, #144]	; (80040d8 <RCCEx_PLL3_Config+0x15c>)
 8004048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800404a:	4b24      	ldr	r3, [pc, #144]	; (80040dc <RCCEx_PLL3_Config+0x160>)
 800404c:	4013      	ands	r3, r2
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	69d2      	ldr	r2, [r2, #28]
 8004052:	00d2      	lsls	r2, r2, #3
 8004054:	4920      	ldr	r1, [pc, #128]	; (80040d8 <RCCEx_PLL3_Config+0x15c>)
 8004056:	4313      	orrs	r3, r2
 8004058:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800405a:	4b1f      	ldr	r3, [pc, #124]	; (80040d8 <RCCEx_PLL3_Config+0x15c>)
 800405c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405e:	4a1e      	ldr	r2, [pc, #120]	; (80040d8 <RCCEx_PLL3_Config+0x15c>)
 8004060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004064:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d106      	bne.n	800407a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800406c:	4b1a      	ldr	r3, [pc, #104]	; (80040d8 <RCCEx_PLL3_Config+0x15c>)
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	4a19      	ldr	r2, [pc, #100]	; (80040d8 <RCCEx_PLL3_Config+0x15c>)
 8004072:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004076:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004078:	e00f      	b.n	800409a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d106      	bne.n	800408e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004080:	4b15      	ldr	r3, [pc, #84]	; (80040d8 <RCCEx_PLL3_Config+0x15c>)
 8004082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004084:	4a14      	ldr	r2, [pc, #80]	; (80040d8 <RCCEx_PLL3_Config+0x15c>)
 8004086:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800408a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800408c:	e005      	b.n	800409a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800408e:	4b12      	ldr	r3, [pc, #72]	; (80040d8 <RCCEx_PLL3_Config+0x15c>)
 8004090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004092:	4a11      	ldr	r2, [pc, #68]	; (80040d8 <RCCEx_PLL3_Config+0x15c>)
 8004094:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004098:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800409a:	4b0f      	ldr	r3, [pc, #60]	; (80040d8 <RCCEx_PLL3_Config+0x15c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a0e      	ldr	r2, [pc, #56]	; (80040d8 <RCCEx_PLL3_Config+0x15c>)
 80040a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040a6:	f7fc fe11 	bl	8000ccc <HAL_GetTick>
 80040aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80040ac:	e008      	b.n	80040c0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80040ae:	f7fc fe0d 	bl	8000ccc <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e006      	b.n	80040ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80040c0:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <RCCEx_PLL3_Config+0x15c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0f0      	beq.n	80040ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	58024400 	.word	0x58024400
 80040dc:	ffff0007 	.word	0xffff0007

080040e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e042      	b.n	8004178 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d106      	bne.n	800410a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7fc fc9d 	bl	8000a44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2224      	movs	r2, #36	; 0x24
 800410e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f022 0201 	bic.w	r2, r2, #1
 8004120:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f82c 	bl	8004180 <UART_SetConfig>
 8004128:	4603      	mov	r3, r0
 800412a:	2b01      	cmp	r3, #1
 800412c:	d101      	bne.n	8004132 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e022      	b.n	8004178 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 fd88 	bl	8004c50 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800414e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	689a      	ldr	r2, [r3, #8]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800415e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 fe0f 	bl	8004d94 <UART_CheckIdleState>
 8004176:	4603      	mov	r3, r0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004184:	b092      	sub	sp, #72	; 0x48
 8004186:	af00      	add	r7, sp, #0
 8004188:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800418a:	2300      	movs	r3, #0
 800418c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	689a      	ldr	r2, [r3, #8]
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	431a      	orrs	r2, r3
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	695b      	ldr	r3, [r3, #20]
 800419e:	431a      	orrs	r2, r3
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	4bbe      	ldr	r3, [pc, #760]	; (80044a8 <UART_SetConfig+0x328>)
 80041b0:	4013      	ands	r3, r2
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041b8:	430b      	orrs	r3, r1
 80041ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	68da      	ldr	r2, [r3, #12]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	430a      	orrs	r2, r1
 80041d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4ab3      	ldr	r2, [pc, #716]	; (80044ac <UART_SetConfig+0x32c>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d004      	beq.n	80041ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041e8:	4313      	orrs	r3, r2
 80041ea:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	4baf      	ldr	r3, [pc, #700]	; (80044b0 <UART_SetConfig+0x330>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	6812      	ldr	r2, [r2, #0]
 80041fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041fc:	430b      	orrs	r3, r1
 80041fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004206:	f023 010f 	bic.w	r1, r3, #15
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4aa6      	ldr	r2, [pc, #664]	; (80044b4 <UART_SetConfig+0x334>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d177      	bne.n	8004310 <UART_SetConfig+0x190>
 8004220:	4ba5      	ldr	r3, [pc, #660]	; (80044b8 <UART_SetConfig+0x338>)
 8004222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004224:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004228:	2b28      	cmp	r3, #40	; 0x28
 800422a:	d86d      	bhi.n	8004308 <UART_SetConfig+0x188>
 800422c:	a201      	add	r2, pc, #4	; (adr r2, 8004234 <UART_SetConfig+0xb4>)
 800422e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004232:	bf00      	nop
 8004234:	080042d9 	.word	0x080042d9
 8004238:	08004309 	.word	0x08004309
 800423c:	08004309 	.word	0x08004309
 8004240:	08004309 	.word	0x08004309
 8004244:	08004309 	.word	0x08004309
 8004248:	08004309 	.word	0x08004309
 800424c:	08004309 	.word	0x08004309
 8004250:	08004309 	.word	0x08004309
 8004254:	080042e1 	.word	0x080042e1
 8004258:	08004309 	.word	0x08004309
 800425c:	08004309 	.word	0x08004309
 8004260:	08004309 	.word	0x08004309
 8004264:	08004309 	.word	0x08004309
 8004268:	08004309 	.word	0x08004309
 800426c:	08004309 	.word	0x08004309
 8004270:	08004309 	.word	0x08004309
 8004274:	080042e9 	.word	0x080042e9
 8004278:	08004309 	.word	0x08004309
 800427c:	08004309 	.word	0x08004309
 8004280:	08004309 	.word	0x08004309
 8004284:	08004309 	.word	0x08004309
 8004288:	08004309 	.word	0x08004309
 800428c:	08004309 	.word	0x08004309
 8004290:	08004309 	.word	0x08004309
 8004294:	080042f1 	.word	0x080042f1
 8004298:	08004309 	.word	0x08004309
 800429c:	08004309 	.word	0x08004309
 80042a0:	08004309 	.word	0x08004309
 80042a4:	08004309 	.word	0x08004309
 80042a8:	08004309 	.word	0x08004309
 80042ac:	08004309 	.word	0x08004309
 80042b0:	08004309 	.word	0x08004309
 80042b4:	080042f9 	.word	0x080042f9
 80042b8:	08004309 	.word	0x08004309
 80042bc:	08004309 	.word	0x08004309
 80042c0:	08004309 	.word	0x08004309
 80042c4:	08004309 	.word	0x08004309
 80042c8:	08004309 	.word	0x08004309
 80042cc:	08004309 	.word	0x08004309
 80042d0:	08004309 	.word	0x08004309
 80042d4:	08004301 	.word	0x08004301
 80042d8:	2301      	movs	r3, #1
 80042da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042de:	e222      	b.n	8004726 <UART_SetConfig+0x5a6>
 80042e0:	2304      	movs	r3, #4
 80042e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042e6:	e21e      	b.n	8004726 <UART_SetConfig+0x5a6>
 80042e8:	2308      	movs	r3, #8
 80042ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042ee:	e21a      	b.n	8004726 <UART_SetConfig+0x5a6>
 80042f0:	2310      	movs	r3, #16
 80042f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042f6:	e216      	b.n	8004726 <UART_SetConfig+0x5a6>
 80042f8:	2320      	movs	r3, #32
 80042fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80042fe:	e212      	b.n	8004726 <UART_SetConfig+0x5a6>
 8004300:	2340      	movs	r3, #64	; 0x40
 8004302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004306:	e20e      	b.n	8004726 <UART_SetConfig+0x5a6>
 8004308:	2380      	movs	r3, #128	; 0x80
 800430a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800430e:	e20a      	b.n	8004726 <UART_SetConfig+0x5a6>
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a69      	ldr	r2, [pc, #420]	; (80044bc <UART_SetConfig+0x33c>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d130      	bne.n	800437c <UART_SetConfig+0x1fc>
 800431a:	4b67      	ldr	r3, [pc, #412]	; (80044b8 <UART_SetConfig+0x338>)
 800431c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	2b05      	cmp	r3, #5
 8004324:	d826      	bhi.n	8004374 <UART_SetConfig+0x1f4>
 8004326:	a201      	add	r2, pc, #4	; (adr r2, 800432c <UART_SetConfig+0x1ac>)
 8004328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432c:	08004345 	.word	0x08004345
 8004330:	0800434d 	.word	0x0800434d
 8004334:	08004355 	.word	0x08004355
 8004338:	0800435d 	.word	0x0800435d
 800433c:	08004365 	.word	0x08004365
 8004340:	0800436d 	.word	0x0800436d
 8004344:	2300      	movs	r3, #0
 8004346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800434a:	e1ec      	b.n	8004726 <UART_SetConfig+0x5a6>
 800434c:	2304      	movs	r3, #4
 800434e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004352:	e1e8      	b.n	8004726 <UART_SetConfig+0x5a6>
 8004354:	2308      	movs	r3, #8
 8004356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800435a:	e1e4      	b.n	8004726 <UART_SetConfig+0x5a6>
 800435c:	2310      	movs	r3, #16
 800435e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004362:	e1e0      	b.n	8004726 <UART_SetConfig+0x5a6>
 8004364:	2320      	movs	r3, #32
 8004366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800436a:	e1dc      	b.n	8004726 <UART_SetConfig+0x5a6>
 800436c:	2340      	movs	r3, #64	; 0x40
 800436e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004372:	e1d8      	b.n	8004726 <UART_SetConfig+0x5a6>
 8004374:	2380      	movs	r3, #128	; 0x80
 8004376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800437a:	e1d4      	b.n	8004726 <UART_SetConfig+0x5a6>
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a4f      	ldr	r2, [pc, #316]	; (80044c0 <UART_SetConfig+0x340>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d130      	bne.n	80043e8 <UART_SetConfig+0x268>
 8004386:	4b4c      	ldr	r3, [pc, #304]	; (80044b8 <UART_SetConfig+0x338>)
 8004388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	2b05      	cmp	r3, #5
 8004390:	d826      	bhi.n	80043e0 <UART_SetConfig+0x260>
 8004392:	a201      	add	r2, pc, #4	; (adr r2, 8004398 <UART_SetConfig+0x218>)
 8004394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004398:	080043b1 	.word	0x080043b1
 800439c:	080043b9 	.word	0x080043b9
 80043a0:	080043c1 	.word	0x080043c1
 80043a4:	080043c9 	.word	0x080043c9
 80043a8:	080043d1 	.word	0x080043d1
 80043ac:	080043d9 	.word	0x080043d9
 80043b0:	2300      	movs	r3, #0
 80043b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043b6:	e1b6      	b.n	8004726 <UART_SetConfig+0x5a6>
 80043b8:	2304      	movs	r3, #4
 80043ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043be:	e1b2      	b.n	8004726 <UART_SetConfig+0x5a6>
 80043c0:	2308      	movs	r3, #8
 80043c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043c6:	e1ae      	b.n	8004726 <UART_SetConfig+0x5a6>
 80043c8:	2310      	movs	r3, #16
 80043ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ce:	e1aa      	b.n	8004726 <UART_SetConfig+0x5a6>
 80043d0:	2320      	movs	r3, #32
 80043d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043d6:	e1a6      	b.n	8004726 <UART_SetConfig+0x5a6>
 80043d8:	2340      	movs	r3, #64	; 0x40
 80043da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043de:	e1a2      	b.n	8004726 <UART_SetConfig+0x5a6>
 80043e0:	2380      	movs	r3, #128	; 0x80
 80043e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043e6:	e19e      	b.n	8004726 <UART_SetConfig+0x5a6>
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a35      	ldr	r2, [pc, #212]	; (80044c4 <UART_SetConfig+0x344>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d130      	bne.n	8004454 <UART_SetConfig+0x2d4>
 80043f2:	4b31      	ldr	r3, [pc, #196]	; (80044b8 <UART_SetConfig+0x338>)
 80043f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	2b05      	cmp	r3, #5
 80043fc:	d826      	bhi.n	800444c <UART_SetConfig+0x2cc>
 80043fe:	a201      	add	r2, pc, #4	; (adr r2, 8004404 <UART_SetConfig+0x284>)
 8004400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004404:	0800441d 	.word	0x0800441d
 8004408:	08004425 	.word	0x08004425
 800440c:	0800442d 	.word	0x0800442d
 8004410:	08004435 	.word	0x08004435
 8004414:	0800443d 	.word	0x0800443d
 8004418:	08004445 	.word	0x08004445
 800441c:	2300      	movs	r3, #0
 800441e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004422:	e180      	b.n	8004726 <UART_SetConfig+0x5a6>
 8004424:	2304      	movs	r3, #4
 8004426:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800442a:	e17c      	b.n	8004726 <UART_SetConfig+0x5a6>
 800442c:	2308      	movs	r3, #8
 800442e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004432:	e178      	b.n	8004726 <UART_SetConfig+0x5a6>
 8004434:	2310      	movs	r3, #16
 8004436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800443a:	e174      	b.n	8004726 <UART_SetConfig+0x5a6>
 800443c:	2320      	movs	r3, #32
 800443e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004442:	e170      	b.n	8004726 <UART_SetConfig+0x5a6>
 8004444:	2340      	movs	r3, #64	; 0x40
 8004446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800444a:	e16c      	b.n	8004726 <UART_SetConfig+0x5a6>
 800444c:	2380      	movs	r3, #128	; 0x80
 800444e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004452:	e168      	b.n	8004726 <UART_SetConfig+0x5a6>
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a1b      	ldr	r2, [pc, #108]	; (80044c8 <UART_SetConfig+0x348>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d142      	bne.n	80044e4 <UART_SetConfig+0x364>
 800445e:	4b16      	ldr	r3, [pc, #88]	; (80044b8 <UART_SetConfig+0x338>)
 8004460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	2b05      	cmp	r3, #5
 8004468:	d838      	bhi.n	80044dc <UART_SetConfig+0x35c>
 800446a:	a201      	add	r2, pc, #4	; (adr r2, 8004470 <UART_SetConfig+0x2f0>)
 800446c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004470:	08004489 	.word	0x08004489
 8004474:	08004491 	.word	0x08004491
 8004478:	08004499 	.word	0x08004499
 800447c:	080044a1 	.word	0x080044a1
 8004480:	080044cd 	.word	0x080044cd
 8004484:	080044d5 	.word	0x080044d5
 8004488:	2300      	movs	r3, #0
 800448a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800448e:	e14a      	b.n	8004726 <UART_SetConfig+0x5a6>
 8004490:	2304      	movs	r3, #4
 8004492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004496:	e146      	b.n	8004726 <UART_SetConfig+0x5a6>
 8004498:	2308      	movs	r3, #8
 800449a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800449e:	e142      	b.n	8004726 <UART_SetConfig+0x5a6>
 80044a0:	2310      	movs	r3, #16
 80044a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044a6:	e13e      	b.n	8004726 <UART_SetConfig+0x5a6>
 80044a8:	cfff69f3 	.word	0xcfff69f3
 80044ac:	58000c00 	.word	0x58000c00
 80044b0:	11fff4ff 	.word	0x11fff4ff
 80044b4:	40011000 	.word	0x40011000
 80044b8:	58024400 	.word	0x58024400
 80044bc:	40004400 	.word	0x40004400
 80044c0:	40004800 	.word	0x40004800
 80044c4:	40004c00 	.word	0x40004c00
 80044c8:	40005000 	.word	0x40005000
 80044cc:	2320      	movs	r3, #32
 80044ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044d2:	e128      	b.n	8004726 <UART_SetConfig+0x5a6>
 80044d4:	2340      	movs	r3, #64	; 0x40
 80044d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044da:	e124      	b.n	8004726 <UART_SetConfig+0x5a6>
 80044dc:	2380      	movs	r3, #128	; 0x80
 80044de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80044e2:	e120      	b.n	8004726 <UART_SetConfig+0x5a6>
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4acb      	ldr	r2, [pc, #812]	; (8004818 <UART_SetConfig+0x698>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d176      	bne.n	80045dc <UART_SetConfig+0x45c>
 80044ee:	4bcb      	ldr	r3, [pc, #812]	; (800481c <UART_SetConfig+0x69c>)
 80044f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044f6:	2b28      	cmp	r3, #40	; 0x28
 80044f8:	d86c      	bhi.n	80045d4 <UART_SetConfig+0x454>
 80044fa:	a201      	add	r2, pc, #4	; (adr r2, 8004500 <UART_SetConfig+0x380>)
 80044fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004500:	080045a5 	.word	0x080045a5
 8004504:	080045d5 	.word	0x080045d5
 8004508:	080045d5 	.word	0x080045d5
 800450c:	080045d5 	.word	0x080045d5
 8004510:	080045d5 	.word	0x080045d5
 8004514:	080045d5 	.word	0x080045d5
 8004518:	080045d5 	.word	0x080045d5
 800451c:	080045d5 	.word	0x080045d5
 8004520:	080045ad 	.word	0x080045ad
 8004524:	080045d5 	.word	0x080045d5
 8004528:	080045d5 	.word	0x080045d5
 800452c:	080045d5 	.word	0x080045d5
 8004530:	080045d5 	.word	0x080045d5
 8004534:	080045d5 	.word	0x080045d5
 8004538:	080045d5 	.word	0x080045d5
 800453c:	080045d5 	.word	0x080045d5
 8004540:	080045b5 	.word	0x080045b5
 8004544:	080045d5 	.word	0x080045d5
 8004548:	080045d5 	.word	0x080045d5
 800454c:	080045d5 	.word	0x080045d5
 8004550:	080045d5 	.word	0x080045d5
 8004554:	080045d5 	.word	0x080045d5
 8004558:	080045d5 	.word	0x080045d5
 800455c:	080045d5 	.word	0x080045d5
 8004560:	080045bd 	.word	0x080045bd
 8004564:	080045d5 	.word	0x080045d5
 8004568:	080045d5 	.word	0x080045d5
 800456c:	080045d5 	.word	0x080045d5
 8004570:	080045d5 	.word	0x080045d5
 8004574:	080045d5 	.word	0x080045d5
 8004578:	080045d5 	.word	0x080045d5
 800457c:	080045d5 	.word	0x080045d5
 8004580:	080045c5 	.word	0x080045c5
 8004584:	080045d5 	.word	0x080045d5
 8004588:	080045d5 	.word	0x080045d5
 800458c:	080045d5 	.word	0x080045d5
 8004590:	080045d5 	.word	0x080045d5
 8004594:	080045d5 	.word	0x080045d5
 8004598:	080045d5 	.word	0x080045d5
 800459c:	080045d5 	.word	0x080045d5
 80045a0:	080045cd 	.word	0x080045cd
 80045a4:	2301      	movs	r3, #1
 80045a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045aa:	e0bc      	b.n	8004726 <UART_SetConfig+0x5a6>
 80045ac:	2304      	movs	r3, #4
 80045ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045b2:	e0b8      	b.n	8004726 <UART_SetConfig+0x5a6>
 80045b4:	2308      	movs	r3, #8
 80045b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ba:	e0b4      	b.n	8004726 <UART_SetConfig+0x5a6>
 80045bc:	2310      	movs	r3, #16
 80045be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045c2:	e0b0      	b.n	8004726 <UART_SetConfig+0x5a6>
 80045c4:	2320      	movs	r3, #32
 80045c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045ca:	e0ac      	b.n	8004726 <UART_SetConfig+0x5a6>
 80045cc:	2340      	movs	r3, #64	; 0x40
 80045ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045d2:	e0a8      	b.n	8004726 <UART_SetConfig+0x5a6>
 80045d4:	2380      	movs	r3, #128	; 0x80
 80045d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80045da:	e0a4      	b.n	8004726 <UART_SetConfig+0x5a6>
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a8f      	ldr	r2, [pc, #572]	; (8004820 <UART_SetConfig+0x6a0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d130      	bne.n	8004648 <UART_SetConfig+0x4c8>
 80045e6:	4b8d      	ldr	r3, [pc, #564]	; (800481c <UART_SetConfig+0x69c>)
 80045e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	2b05      	cmp	r3, #5
 80045f0:	d826      	bhi.n	8004640 <UART_SetConfig+0x4c0>
 80045f2:	a201      	add	r2, pc, #4	; (adr r2, 80045f8 <UART_SetConfig+0x478>)
 80045f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f8:	08004611 	.word	0x08004611
 80045fc:	08004619 	.word	0x08004619
 8004600:	08004621 	.word	0x08004621
 8004604:	08004629 	.word	0x08004629
 8004608:	08004631 	.word	0x08004631
 800460c:	08004639 	.word	0x08004639
 8004610:	2300      	movs	r3, #0
 8004612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004616:	e086      	b.n	8004726 <UART_SetConfig+0x5a6>
 8004618:	2304      	movs	r3, #4
 800461a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800461e:	e082      	b.n	8004726 <UART_SetConfig+0x5a6>
 8004620:	2308      	movs	r3, #8
 8004622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004626:	e07e      	b.n	8004726 <UART_SetConfig+0x5a6>
 8004628:	2310      	movs	r3, #16
 800462a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800462e:	e07a      	b.n	8004726 <UART_SetConfig+0x5a6>
 8004630:	2320      	movs	r3, #32
 8004632:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004636:	e076      	b.n	8004726 <UART_SetConfig+0x5a6>
 8004638:	2340      	movs	r3, #64	; 0x40
 800463a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800463e:	e072      	b.n	8004726 <UART_SetConfig+0x5a6>
 8004640:	2380      	movs	r3, #128	; 0x80
 8004642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004646:	e06e      	b.n	8004726 <UART_SetConfig+0x5a6>
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a75      	ldr	r2, [pc, #468]	; (8004824 <UART_SetConfig+0x6a4>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d130      	bne.n	80046b4 <UART_SetConfig+0x534>
 8004652:	4b72      	ldr	r3, [pc, #456]	; (800481c <UART_SetConfig+0x69c>)
 8004654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	2b05      	cmp	r3, #5
 800465c:	d826      	bhi.n	80046ac <UART_SetConfig+0x52c>
 800465e:	a201      	add	r2, pc, #4	; (adr r2, 8004664 <UART_SetConfig+0x4e4>)
 8004660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004664:	0800467d 	.word	0x0800467d
 8004668:	08004685 	.word	0x08004685
 800466c:	0800468d 	.word	0x0800468d
 8004670:	08004695 	.word	0x08004695
 8004674:	0800469d 	.word	0x0800469d
 8004678:	080046a5 	.word	0x080046a5
 800467c:	2300      	movs	r3, #0
 800467e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004682:	e050      	b.n	8004726 <UART_SetConfig+0x5a6>
 8004684:	2304      	movs	r3, #4
 8004686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800468a:	e04c      	b.n	8004726 <UART_SetConfig+0x5a6>
 800468c:	2308      	movs	r3, #8
 800468e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004692:	e048      	b.n	8004726 <UART_SetConfig+0x5a6>
 8004694:	2310      	movs	r3, #16
 8004696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800469a:	e044      	b.n	8004726 <UART_SetConfig+0x5a6>
 800469c:	2320      	movs	r3, #32
 800469e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046a2:	e040      	b.n	8004726 <UART_SetConfig+0x5a6>
 80046a4:	2340      	movs	r3, #64	; 0x40
 80046a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046aa:	e03c      	b.n	8004726 <UART_SetConfig+0x5a6>
 80046ac:	2380      	movs	r3, #128	; 0x80
 80046ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046b2:	e038      	b.n	8004726 <UART_SetConfig+0x5a6>
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a5b      	ldr	r2, [pc, #364]	; (8004828 <UART_SetConfig+0x6a8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d130      	bne.n	8004720 <UART_SetConfig+0x5a0>
 80046be:	4b57      	ldr	r3, [pc, #348]	; (800481c <UART_SetConfig+0x69c>)
 80046c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	2b05      	cmp	r3, #5
 80046c8:	d826      	bhi.n	8004718 <UART_SetConfig+0x598>
 80046ca:	a201      	add	r2, pc, #4	; (adr r2, 80046d0 <UART_SetConfig+0x550>)
 80046cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d0:	080046e9 	.word	0x080046e9
 80046d4:	080046f1 	.word	0x080046f1
 80046d8:	080046f9 	.word	0x080046f9
 80046dc:	08004701 	.word	0x08004701
 80046e0:	08004709 	.word	0x08004709
 80046e4:	08004711 	.word	0x08004711
 80046e8:	2302      	movs	r3, #2
 80046ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ee:	e01a      	b.n	8004726 <UART_SetConfig+0x5a6>
 80046f0:	2304      	movs	r3, #4
 80046f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046f6:	e016      	b.n	8004726 <UART_SetConfig+0x5a6>
 80046f8:	2308      	movs	r3, #8
 80046fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046fe:	e012      	b.n	8004726 <UART_SetConfig+0x5a6>
 8004700:	2310      	movs	r3, #16
 8004702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004706:	e00e      	b.n	8004726 <UART_SetConfig+0x5a6>
 8004708:	2320      	movs	r3, #32
 800470a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800470e:	e00a      	b.n	8004726 <UART_SetConfig+0x5a6>
 8004710:	2340      	movs	r3, #64	; 0x40
 8004712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004716:	e006      	b.n	8004726 <UART_SetConfig+0x5a6>
 8004718:	2380      	movs	r3, #128	; 0x80
 800471a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800471e:	e002      	b.n	8004726 <UART_SetConfig+0x5a6>
 8004720:	2380      	movs	r3, #128	; 0x80
 8004722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a3f      	ldr	r2, [pc, #252]	; (8004828 <UART_SetConfig+0x6a8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	f040 80f8 	bne.w	8004922 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004732:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004736:	2b20      	cmp	r3, #32
 8004738:	dc46      	bgt.n	80047c8 <UART_SetConfig+0x648>
 800473a:	2b02      	cmp	r3, #2
 800473c:	f2c0 8082 	blt.w	8004844 <UART_SetConfig+0x6c4>
 8004740:	3b02      	subs	r3, #2
 8004742:	2b1e      	cmp	r3, #30
 8004744:	d87e      	bhi.n	8004844 <UART_SetConfig+0x6c4>
 8004746:	a201      	add	r2, pc, #4	; (adr r2, 800474c <UART_SetConfig+0x5cc>)
 8004748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800474c:	080047cf 	.word	0x080047cf
 8004750:	08004845 	.word	0x08004845
 8004754:	080047d7 	.word	0x080047d7
 8004758:	08004845 	.word	0x08004845
 800475c:	08004845 	.word	0x08004845
 8004760:	08004845 	.word	0x08004845
 8004764:	080047e7 	.word	0x080047e7
 8004768:	08004845 	.word	0x08004845
 800476c:	08004845 	.word	0x08004845
 8004770:	08004845 	.word	0x08004845
 8004774:	08004845 	.word	0x08004845
 8004778:	08004845 	.word	0x08004845
 800477c:	08004845 	.word	0x08004845
 8004780:	08004845 	.word	0x08004845
 8004784:	080047f7 	.word	0x080047f7
 8004788:	08004845 	.word	0x08004845
 800478c:	08004845 	.word	0x08004845
 8004790:	08004845 	.word	0x08004845
 8004794:	08004845 	.word	0x08004845
 8004798:	08004845 	.word	0x08004845
 800479c:	08004845 	.word	0x08004845
 80047a0:	08004845 	.word	0x08004845
 80047a4:	08004845 	.word	0x08004845
 80047a8:	08004845 	.word	0x08004845
 80047ac:	08004845 	.word	0x08004845
 80047b0:	08004845 	.word	0x08004845
 80047b4:	08004845 	.word	0x08004845
 80047b8:	08004845 	.word	0x08004845
 80047bc:	08004845 	.word	0x08004845
 80047c0:	08004845 	.word	0x08004845
 80047c4:	08004837 	.word	0x08004837
 80047c8:	2b40      	cmp	r3, #64	; 0x40
 80047ca:	d037      	beq.n	800483c <UART_SetConfig+0x6bc>
 80047cc:	e03a      	b.n	8004844 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80047ce:	f7ff f865 	bl	800389c <HAL_RCCEx_GetD3PCLK1Freq>
 80047d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80047d4:	e03c      	b.n	8004850 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80047d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff f874 	bl	80038c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80047e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047e4:	e034      	b.n	8004850 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047e6:	f107 0318 	add.w	r3, r7, #24
 80047ea:	4618      	mov	r0, r3
 80047ec:	f7ff f9c0 	bl	8003b70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047f4:	e02c      	b.n	8004850 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047f6:	4b09      	ldr	r3, [pc, #36]	; (800481c <UART_SetConfig+0x69c>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d016      	beq.n	8004830 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004802:	4b06      	ldr	r3, [pc, #24]	; (800481c <UART_SetConfig+0x69c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	08db      	lsrs	r3, r3, #3
 8004808:	f003 0303 	and.w	r3, r3, #3
 800480c:	4a07      	ldr	r2, [pc, #28]	; (800482c <UART_SetConfig+0x6ac>)
 800480e:	fa22 f303 	lsr.w	r3, r2, r3
 8004812:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004814:	e01c      	b.n	8004850 <UART_SetConfig+0x6d0>
 8004816:	bf00      	nop
 8004818:	40011400 	.word	0x40011400
 800481c:	58024400 	.word	0x58024400
 8004820:	40007800 	.word	0x40007800
 8004824:	40007c00 	.word	0x40007c00
 8004828:	58000c00 	.word	0x58000c00
 800482c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004830:	4b9d      	ldr	r3, [pc, #628]	; (8004aa8 <UART_SetConfig+0x928>)
 8004832:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004834:	e00c      	b.n	8004850 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004836:	4b9d      	ldr	r3, [pc, #628]	; (8004aac <UART_SetConfig+0x92c>)
 8004838:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800483a:	e009      	b.n	8004850 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800483c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004840:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004842:	e005      	b.n	8004850 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004844:	2300      	movs	r3, #0
 8004846:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800484e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 81de 	beq.w	8004c14 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485c:	4a94      	ldr	r2, [pc, #592]	; (8004ab0 <UART_SetConfig+0x930>)
 800485e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004862:	461a      	mov	r2, r3
 8004864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004866:	fbb3 f3f2 	udiv	r3, r3, r2
 800486a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	4613      	mov	r3, r2
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	4413      	add	r3, r2
 8004876:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004878:	429a      	cmp	r2, r3
 800487a:	d305      	bcc.n	8004888 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004882:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004884:	429a      	cmp	r2, r3
 8004886:	d903      	bls.n	8004890 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800488e:	e1c1      	b.n	8004c14 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004892:	2200      	movs	r2, #0
 8004894:	60bb      	str	r3, [r7, #8]
 8004896:	60fa      	str	r2, [r7, #12]
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489c:	4a84      	ldr	r2, [pc, #528]	; (8004ab0 <UART_SetConfig+0x930>)
 800489e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	2200      	movs	r2, #0
 80048a6:	603b      	str	r3, [r7, #0]
 80048a8:	607a      	str	r2, [r7, #4]
 80048aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048b2:	f7fb fd11 	bl	80002d8 <__aeabi_uldivmod>
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	4610      	mov	r0, r2
 80048bc:	4619      	mov	r1, r3
 80048be:	f04f 0200 	mov.w	r2, #0
 80048c2:	f04f 0300 	mov.w	r3, #0
 80048c6:	020b      	lsls	r3, r1, #8
 80048c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80048cc:	0202      	lsls	r2, r0, #8
 80048ce:	6979      	ldr	r1, [r7, #20]
 80048d0:	6849      	ldr	r1, [r1, #4]
 80048d2:	0849      	lsrs	r1, r1, #1
 80048d4:	2000      	movs	r0, #0
 80048d6:	460c      	mov	r4, r1
 80048d8:	4605      	mov	r5, r0
 80048da:	eb12 0804 	adds.w	r8, r2, r4
 80048de:	eb43 0905 	adc.w	r9, r3, r5
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	469a      	mov	sl, r3
 80048ea:	4693      	mov	fp, r2
 80048ec:	4652      	mov	r2, sl
 80048ee:	465b      	mov	r3, fp
 80048f0:	4640      	mov	r0, r8
 80048f2:	4649      	mov	r1, r9
 80048f4:	f7fb fcf0 	bl	80002d8 <__aeabi_uldivmod>
 80048f8:	4602      	mov	r2, r0
 80048fa:	460b      	mov	r3, r1
 80048fc:	4613      	mov	r3, r2
 80048fe:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004902:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004906:	d308      	bcc.n	800491a <UART_SetConfig+0x79a>
 8004908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800490e:	d204      	bcs.n	800491a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004916:	60da      	str	r2, [r3, #12]
 8004918:	e17c      	b.n	8004c14 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004920:	e178      	b.n	8004c14 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800492a:	f040 80c5 	bne.w	8004ab8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800492e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004932:	2b20      	cmp	r3, #32
 8004934:	dc48      	bgt.n	80049c8 <UART_SetConfig+0x848>
 8004936:	2b00      	cmp	r3, #0
 8004938:	db7b      	blt.n	8004a32 <UART_SetConfig+0x8b2>
 800493a:	2b20      	cmp	r3, #32
 800493c:	d879      	bhi.n	8004a32 <UART_SetConfig+0x8b2>
 800493e:	a201      	add	r2, pc, #4	; (adr r2, 8004944 <UART_SetConfig+0x7c4>)
 8004940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004944:	080049cf 	.word	0x080049cf
 8004948:	080049d7 	.word	0x080049d7
 800494c:	08004a33 	.word	0x08004a33
 8004950:	08004a33 	.word	0x08004a33
 8004954:	080049df 	.word	0x080049df
 8004958:	08004a33 	.word	0x08004a33
 800495c:	08004a33 	.word	0x08004a33
 8004960:	08004a33 	.word	0x08004a33
 8004964:	080049ef 	.word	0x080049ef
 8004968:	08004a33 	.word	0x08004a33
 800496c:	08004a33 	.word	0x08004a33
 8004970:	08004a33 	.word	0x08004a33
 8004974:	08004a33 	.word	0x08004a33
 8004978:	08004a33 	.word	0x08004a33
 800497c:	08004a33 	.word	0x08004a33
 8004980:	08004a33 	.word	0x08004a33
 8004984:	080049ff 	.word	0x080049ff
 8004988:	08004a33 	.word	0x08004a33
 800498c:	08004a33 	.word	0x08004a33
 8004990:	08004a33 	.word	0x08004a33
 8004994:	08004a33 	.word	0x08004a33
 8004998:	08004a33 	.word	0x08004a33
 800499c:	08004a33 	.word	0x08004a33
 80049a0:	08004a33 	.word	0x08004a33
 80049a4:	08004a33 	.word	0x08004a33
 80049a8:	08004a33 	.word	0x08004a33
 80049ac:	08004a33 	.word	0x08004a33
 80049b0:	08004a33 	.word	0x08004a33
 80049b4:	08004a33 	.word	0x08004a33
 80049b8:	08004a33 	.word	0x08004a33
 80049bc:	08004a33 	.word	0x08004a33
 80049c0:	08004a33 	.word	0x08004a33
 80049c4:	08004a25 	.word	0x08004a25
 80049c8:	2b40      	cmp	r3, #64	; 0x40
 80049ca:	d02e      	beq.n	8004a2a <UART_SetConfig+0x8aa>
 80049cc:	e031      	b.n	8004a32 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049ce:	f7fd fcef 	bl	80023b0 <HAL_RCC_GetPCLK1Freq>
 80049d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80049d4:	e033      	b.n	8004a3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049d6:	f7fd fd01 	bl	80023dc <HAL_RCC_GetPCLK2Freq>
 80049da:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80049dc:	e02f      	b.n	8004a3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80049de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fe ff70 	bl	80038c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80049e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049ec:	e027      	b.n	8004a3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80049ee:	f107 0318 	add.w	r3, r7, #24
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7ff f8bc 	bl	8003b70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80049fc:	e01f      	b.n	8004a3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80049fe:	4b2d      	ldr	r3, [pc, #180]	; (8004ab4 <UART_SetConfig+0x934>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f003 0320 	and.w	r3, r3, #32
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d009      	beq.n	8004a1e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a0a:	4b2a      	ldr	r3, [pc, #168]	; (8004ab4 <UART_SetConfig+0x934>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	08db      	lsrs	r3, r3, #3
 8004a10:	f003 0303 	and.w	r3, r3, #3
 8004a14:	4a24      	ldr	r2, [pc, #144]	; (8004aa8 <UART_SetConfig+0x928>)
 8004a16:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a1c:	e00f      	b.n	8004a3e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004a1e:	4b22      	ldr	r3, [pc, #136]	; (8004aa8 <UART_SetConfig+0x928>)
 8004a20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a22:	e00c      	b.n	8004a3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004a24:	4b21      	ldr	r3, [pc, #132]	; (8004aac <UART_SetConfig+0x92c>)
 8004a26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a28:	e009      	b.n	8004a3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004a30:	e005      	b.n	8004a3e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004a3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	f000 80e7 	beq.w	8004c14 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	4a19      	ldr	r2, [pc, #100]	; (8004ab0 <UART_SetConfig+0x930>)
 8004a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a50:	461a      	mov	r2, r3
 8004a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a58:	005a      	lsls	r2, r3, #1
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	085b      	lsrs	r3, r3, #1
 8004a60:	441a      	add	r2, r3
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6e:	2b0f      	cmp	r3, #15
 8004a70:	d916      	bls.n	8004aa0 <UART_SetConfig+0x920>
 8004a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a78:	d212      	bcs.n	8004aa0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	f023 030f 	bic.w	r3, r3, #15
 8004a82:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a86:	085b      	lsrs	r3, r3, #1
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a92:	4313      	orrs	r3, r2
 8004a94:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004a9c:	60da      	str	r2, [r3, #12]
 8004a9e:	e0b9      	b.n	8004c14 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004aa6:	e0b5      	b.n	8004c14 <UART_SetConfig+0xa94>
 8004aa8:	03d09000 	.word	0x03d09000
 8004aac:	003d0900 	.word	0x003d0900
 8004ab0:	0800530c 	.word	0x0800530c
 8004ab4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ab8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004abc:	2b20      	cmp	r3, #32
 8004abe:	dc49      	bgt.n	8004b54 <UART_SetConfig+0x9d4>
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	db7c      	blt.n	8004bbe <UART_SetConfig+0xa3e>
 8004ac4:	2b20      	cmp	r3, #32
 8004ac6:	d87a      	bhi.n	8004bbe <UART_SetConfig+0xa3e>
 8004ac8:	a201      	add	r2, pc, #4	; (adr r2, 8004ad0 <UART_SetConfig+0x950>)
 8004aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ace:	bf00      	nop
 8004ad0:	08004b5b 	.word	0x08004b5b
 8004ad4:	08004b63 	.word	0x08004b63
 8004ad8:	08004bbf 	.word	0x08004bbf
 8004adc:	08004bbf 	.word	0x08004bbf
 8004ae0:	08004b6b 	.word	0x08004b6b
 8004ae4:	08004bbf 	.word	0x08004bbf
 8004ae8:	08004bbf 	.word	0x08004bbf
 8004aec:	08004bbf 	.word	0x08004bbf
 8004af0:	08004b7b 	.word	0x08004b7b
 8004af4:	08004bbf 	.word	0x08004bbf
 8004af8:	08004bbf 	.word	0x08004bbf
 8004afc:	08004bbf 	.word	0x08004bbf
 8004b00:	08004bbf 	.word	0x08004bbf
 8004b04:	08004bbf 	.word	0x08004bbf
 8004b08:	08004bbf 	.word	0x08004bbf
 8004b0c:	08004bbf 	.word	0x08004bbf
 8004b10:	08004b8b 	.word	0x08004b8b
 8004b14:	08004bbf 	.word	0x08004bbf
 8004b18:	08004bbf 	.word	0x08004bbf
 8004b1c:	08004bbf 	.word	0x08004bbf
 8004b20:	08004bbf 	.word	0x08004bbf
 8004b24:	08004bbf 	.word	0x08004bbf
 8004b28:	08004bbf 	.word	0x08004bbf
 8004b2c:	08004bbf 	.word	0x08004bbf
 8004b30:	08004bbf 	.word	0x08004bbf
 8004b34:	08004bbf 	.word	0x08004bbf
 8004b38:	08004bbf 	.word	0x08004bbf
 8004b3c:	08004bbf 	.word	0x08004bbf
 8004b40:	08004bbf 	.word	0x08004bbf
 8004b44:	08004bbf 	.word	0x08004bbf
 8004b48:	08004bbf 	.word	0x08004bbf
 8004b4c:	08004bbf 	.word	0x08004bbf
 8004b50:	08004bb1 	.word	0x08004bb1
 8004b54:	2b40      	cmp	r3, #64	; 0x40
 8004b56:	d02e      	beq.n	8004bb6 <UART_SetConfig+0xa36>
 8004b58:	e031      	b.n	8004bbe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b5a:	f7fd fc29 	bl	80023b0 <HAL_RCC_GetPCLK1Freq>
 8004b5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004b60:	e033      	b.n	8004bca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b62:	f7fd fc3b 	bl	80023dc <HAL_RCC_GetPCLK2Freq>
 8004b66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004b68:	e02f      	b.n	8004bca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fe feaa 	bl	80038c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b78:	e027      	b.n	8004bca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b7a:	f107 0318 	add.w	r3, r7, #24
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fe fff6 	bl	8003b70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b88:	e01f      	b.n	8004bca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b8a:	4b2d      	ldr	r3, [pc, #180]	; (8004c40 <UART_SetConfig+0xac0>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0320 	and.w	r3, r3, #32
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d009      	beq.n	8004baa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004b96:	4b2a      	ldr	r3, [pc, #168]	; (8004c40 <UART_SetConfig+0xac0>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	08db      	lsrs	r3, r3, #3
 8004b9c:	f003 0303 	and.w	r3, r3, #3
 8004ba0:	4a28      	ldr	r2, [pc, #160]	; (8004c44 <UART_SetConfig+0xac4>)
 8004ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004ba8:	e00f      	b.n	8004bca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004baa:	4b26      	ldr	r3, [pc, #152]	; (8004c44 <UART_SetConfig+0xac4>)
 8004bac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bae:	e00c      	b.n	8004bca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004bb0:	4b25      	ldr	r3, [pc, #148]	; (8004c48 <UART_SetConfig+0xac8>)
 8004bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bb4:	e009      	b.n	8004bca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bbc:	e005      	b.n	8004bca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004bc8:	bf00      	nop
    }

    if (pclk != 0U)
 8004bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d021      	beq.n	8004c14 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd4:	4a1d      	ldr	r2, [pc, #116]	; (8004c4c <UART_SetConfig+0xacc>)
 8004bd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bde:	fbb3 f2f2 	udiv	r2, r3, r2
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	085b      	lsrs	r3, r3, #1
 8004be8:	441a      	add	r2, r3
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bf2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf6:	2b0f      	cmp	r3, #15
 8004bf8:	d909      	bls.n	8004c0e <UART_SetConfig+0xa8e>
 8004bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c00:	d205      	bcs.n	8004c0e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	60da      	str	r2, [r3, #12]
 8004c0c:	e002      	b.n	8004c14 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	2200      	movs	r2, #0
 8004c28:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004c30:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3748      	adds	r7, #72	; 0x48
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c3e:	bf00      	nop
 8004c40:	58024400 	.word	0x58024400
 8004c44:	03d09000 	.word	0x03d09000
 8004c48:	003d0900 	.word	0x003d0900
 8004c4c:	0800530c 	.word	0x0800530c

08004c50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00a      	beq.n	8004c7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca0:	f003 0304 	and.w	r3, r3, #4
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce4:	f003 0310 	and.w	r3, r3, #16
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00a      	beq.n	8004d02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d06:	f003 0320 	and.w	r3, r3, #32
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d01a      	beq.n	8004d66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d4e:	d10a      	bne.n	8004d66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00a      	beq.n	8004d88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	605a      	str	r2, [r3, #4]
  }
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b098      	sub	sp, #96	; 0x60
 8004d98:	af02      	add	r7, sp, #8
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004da4:	f7fb ff92 	bl	8000ccc <HAL_GetTick>
 8004da8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d12f      	bne.n	8004e18 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004db8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f88e 	bl	8004ee8 <UART_WaitOnFlagUntilTimeout>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d022      	beq.n	8004e18 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dda:	e853 3f00 	ldrex	r3, [r3]
 8004dde:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004de0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004de2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004de6:	653b      	str	r3, [r7, #80]	; 0x50
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	461a      	mov	r2, r3
 8004dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004df0:	647b      	str	r3, [r7, #68]	; 0x44
 8004df2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004df6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004df8:	e841 2300 	strex	r3, r2, [r1]
 8004dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1e6      	bne.n	8004dd2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e063      	b.n	8004ee0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0304 	and.w	r3, r3, #4
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d149      	bne.n	8004eba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e26:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e2a:	9300      	str	r3, [sp, #0]
 8004e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f857 	bl	8004ee8 <UART_WaitOnFlagUntilTimeout>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d03c      	beq.n	8004eba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	e853 3f00 	ldrex	r3, [r3]
 8004e4c:	623b      	str	r3, [r7, #32]
   return(result);
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e5e:	633b      	str	r3, [r7, #48]	; 0x30
 8004e60:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e66:	e841 2300 	strex	r3, r2, [r1]
 8004e6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1e6      	bne.n	8004e40 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	3308      	adds	r3, #8
 8004e78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	e853 3f00 	ldrex	r3, [r3]
 8004e80:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f023 0301 	bic.w	r3, r3, #1
 8004e88:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3308      	adds	r3, #8
 8004e90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e92:	61fa      	str	r2, [r7, #28]
 8004e94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	69b9      	ldr	r1, [r7, #24]
 8004e98:	69fa      	ldr	r2, [r7, #28]
 8004e9a:	e841 2300 	strex	r3, r2, [r1]
 8004e9e:	617b      	str	r3, [r7, #20]
   return(result);
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e5      	bne.n	8004e72 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2220      	movs	r2, #32
 8004eaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e012      	b.n	8004ee0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3758      	adds	r7, #88	; 0x58
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	603b      	str	r3, [r7, #0]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ef8:	e049      	b.n	8004f8e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f00:	d045      	beq.n	8004f8e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f02:	f7fb fee3 	bl	8000ccc <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	d302      	bcc.n	8004f18 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e048      	b.n	8004fae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0304 	and.w	r3, r3, #4
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d031      	beq.n	8004f8e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	f003 0308 	and.w	r3, r3, #8
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d110      	bne.n	8004f5a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2208      	movs	r2, #8
 8004f3e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 f839 	bl	8004fb8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2208      	movs	r2, #8
 8004f4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e029      	b.n	8004fae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	69db      	ldr	r3, [r3, #28]
 8004f60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f68:	d111      	bne.n	8004f8e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 f81f 	bl	8004fb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e00f      	b.n	8004fae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69da      	ldr	r2, [r3, #28]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	4013      	ands	r3, r2
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	bf0c      	ite	eq
 8004f9e:	2301      	moveq	r3, #1
 8004fa0:	2300      	movne	r3, #0
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	79fb      	ldrb	r3, [r7, #7]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d0a6      	beq.n	8004efa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
	...

08004fb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b095      	sub	sp, #84	; 0x54
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc8:	e853 3f00 	ldrex	r3, [r3]
 8004fcc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fde:	643b      	str	r3, [r7, #64]	; 0x40
 8004fe0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fe4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fe6:	e841 2300 	strex	r3, r2, [r1]
 8004fea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1e6      	bne.n	8004fc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	3308      	adds	r3, #8
 8004ff8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffa:	6a3b      	ldr	r3, [r7, #32]
 8004ffc:	e853 3f00 	ldrex	r3, [r3]
 8005000:	61fb      	str	r3, [r7, #28]
   return(result);
 8005002:	69fa      	ldr	r2, [r7, #28]
 8005004:	4b1e      	ldr	r3, [pc, #120]	; (8005080 <UART_EndRxTransfer+0xc8>)
 8005006:	4013      	ands	r3, r2
 8005008:	64bb      	str	r3, [r7, #72]	; 0x48
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	3308      	adds	r3, #8
 8005010:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005012:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005014:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005016:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800501a:	e841 2300 	strex	r3, r2, [r1]
 800501e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1e5      	bne.n	8004ff2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800502a:	2b01      	cmp	r3, #1
 800502c:	d118      	bne.n	8005060 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	e853 3f00 	ldrex	r3, [r3]
 800503a:	60bb      	str	r3, [r7, #8]
   return(result);
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	f023 0310 	bic.w	r3, r3, #16
 8005042:	647b      	str	r3, [r7, #68]	; 0x44
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	461a      	mov	r2, r3
 800504a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800504c:	61bb      	str	r3, [r7, #24]
 800504e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005050:	6979      	ldr	r1, [r7, #20]
 8005052:	69ba      	ldr	r2, [r7, #24]
 8005054:	e841 2300 	strex	r3, r2, [r1]
 8005058:	613b      	str	r3, [r7, #16]
   return(result);
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1e6      	bne.n	800502e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2220      	movs	r2, #32
 8005064:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005074:	bf00      	nop
 8005076:	3754      	adds	r7, #84	; 0x54
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	effffffe 	.word	0xeffffffe

08005084 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005092:	2b01      	cmp	r3, #1
 8005094:	d101      	bne.n	800509a <HAL_UARTEx_DisableFifoMode+0x16>
 8005096:	2302      	movs	r3, #2
 8005098:	e027      	b.n	80050ea <HAL_UARTEx_DisableFifoMode+0x66>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2224      	movs	r2, #36	; 0x24
 80050a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0201 	bic.w	r2, r2, #1
 80050c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80050c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2220      	movs	r2, #32
 80050dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b084      	sub	sp, #16
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
 80050fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005106:	2b01      	cmp	r3, #1
 8005108:	d101      	bne.n	800510e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800510a:	2302      	movs	r3, #2
 800510c:	e02d      	b.n	800516a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2224      	movs	r2, #36	; 0x24
 800511a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 0201 	bic.w	r2, r2, #1
 8005134:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 f850 	bl	80051f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2220      	movs	r2, #32
 800515c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005168:	2300      	movs	r3, #0
}
 800516a:	4618      	mov	r0, r3
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}

08005172 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	b084      	sub	sp, #16
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005182:	2b01      	cmp	r3, #1
 8005184:	d101      	bne.n	800518a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005186:	2302      	movs	r3, #2
 8005188:	e02d      	b.n	80051e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2224      	movs	r2, #36	; 0x24
 8005196:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 0201 	bic.w	r2, r2, #1
 80051b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f812 	bl	80051f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2220      	movs	r2, #32
 80051d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
	...

080051f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d108      	bne.n	8005212 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005210:	e031      	b.n	8005276 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005212:	2310      	movs	r3, #16
 8005214:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005216:	2310      	movs	r3, #16
 8005218:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	0e5b      	lsrs	r3, r3, #25
 8005222:	b2db      	uxtb	r3, r3
 8005224:	f003 0307 	and.w	r3, r3, #7
 8005228:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	0f5b      	lsrs	r3, r3, #29
 8005232:	b2db      	uxtb	r3, r3
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800523a:	7bbb      	ldrb	r3, [r7, #14]
 800523c:	7b3a      	ldrb	r2, [r7, #12]
 800523e:	4911      	ldr	r1, [pc, #68]	; (8005284 <UARTEx_SetNbDataToProcess+0x94>)
 8005240:	5c8a      	ldrb	r2, [r1, r2]
 8005242:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005246:	7b3a      	ldrb	r2, [r7, #12]
 8005248:	490f      	ldr	r1, [pc, #60]	; (8005288 <UARTEx_SetNbDataToProcess+0x98>)
 800524a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800524c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005250:	b29a      	uxth	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005258:	7bfb      	ldrb	r3, [r7, #15]
 800525a:	7b7a      	ldrb	r2, [r7, #13]
 800525c:	4909      	ldr	r1, [pc, #36]	; (8005284 <UARTEx_SetNbDataToProcess+0x94>)
 800525e:	5c8a      	ldrb	r2, [r1, r2]
 8005260:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005264:	7b7a      	ldrb	r2, [r7, #13]
 8005266:	4908      	ldr	r1, [pc, #32]	; (8005288 <UARTEx_SetNbDataToProcess+0x98>)
 8005268:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800526a:	fb93 f3f2 	sdiv	r3, r3, r2
 800526e:	b29a      	uxth	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005276:	bf00      	nop
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	08005324 	.word	0x08005324
 8005288:	0800532c 	.word	0x0800532c

0800528c <__libc_init_array>:
 800528c:	b570      	push	{r4, r5, r6, lr}
 800528e:	4d0d      	ldr	r5, [pc, #52]	; (80052c4 <__libc_init_array+0x38>)
 8005290:	4c0d      	ldr	r4, [pc, #52]	; (80052c8 <__libc_init_array+0x3c>)
 8005292:	1b64      	subs	r4, r4, r5
 8005294:	10a4      	asrs	r4, r4, #2
 8005296:	2600      	movs	r6, #0
 8005298:	42a6      	cmp	r6, r4
 800529a:	d109      	bne.n	80052b0 <__libc_init_array+0x24>
 800529c:	4d0b      	ldr	r5, [pc, #44]	; (80052cc <__libc_init_array+0x40>)
 800529e:	4c0c      	ldr	r4, [pc, #48]	; (80052d0 <__libc_init_array+0x44>)
 80052a0:	f000 f820 	bl	80052e4 <_init>
 80052a4:	1b64      	subs	r4, r4, r5
 80052a6:	10a4      	asrs	r4, r4, #2
 80052a8:	2600      	movs	r6, #0
 80052aa:	42a6      	cmp	r6, r4
 80052ac:	d105      	bne.n	80052ba <__libc_init_array+0x2e>
 80052ae:	bd70      	pop	{r4, r5, r6, pc}
 80052b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052b4:	4798      	blx	r3
 80052b6:	3601      	adds	r6, #1
 80052b8:	e7ee      	b.n	8005298 <__libc_init_array+0xc>
 80052ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80052be:	4798      	blx	r3
 80052c0:	3601      	adds	r6, #1
 80052c2:	e7f2      	b.n	80052aa <__libc_init_array+0x1e>
 80052c4:	0800533c 	.word	0x0800533c
 80052c8:	0800533c 	.word	0x0800533c
 80052cc:	0800533c 	.word	0x0800533c
 80052d0:	08005340 	.word	0x08005340

080052d4 <memset>:
 80052d4:	4402      	add	r2, r0
 80052d6:	4603      	mov	r3, r0
 80052d8:	4293      	cmp	r3, r2
 80052da:	d100      	bne.n	80052de <memset+0xa>
 80052dc:	4770      	bx	lr
 80052de:	f803 1b01 	strb.w	r1, [r3], #1
 80052e2:	e7f9      	b.n	80052d8 <memset+0x4>

080052e4 <_init>:
 80052e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052e6:	bf00      	nop
 80052e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052ea:	bc08      	pop	{r3}
 80052ec:	469e      	mov	lr, r3
 80052ee:	4770      	bx	lr

080052f0 <_fini>:
 80052f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f2:	bf00      	nop
 80052f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052f6:	bc08      	pop	{r3}
 80052f8:	469e      	mov	lr, r3
 80052fa:	4770      	bx	lr
