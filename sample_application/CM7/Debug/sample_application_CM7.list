
sample_application_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006448  080402a0  080402a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  080466e8  080466e8  000166e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080467f4  080467f4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080467f4  080467f4  000167f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080467fc  080467fc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080467fc  080467fc  000167fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08046800  08046800  00016800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08046804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  24000074  08046878  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400013c  08046878  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c69  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002034  00000000  00000000  00030d0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  00032d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af8  00000000  00000000  00033900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f272  00000000  00000000  000343f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f696  00000000  00000000  0007366a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00195f97  00000000  00000000  00082d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00218c97  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037d0  00000000  00000000  00218ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080402a0 <__do_global_dtors_aux>:
 80402a0:	b510      	push	{r4, lr}
 80402a2:	4c05      	ldr	r4, [pc, #20]	; (80402b8 <__do_global_dtors_aux+0x18>)
 80402a4:	7823      	ldrb	r3, [r4, #0]
 80402a6:	b933      	cbnz	r3, 80402b6 <__do_global_dtors_aux+0x16>
 80402a8:	4b04      	ldr	r3, [pc, #16]	; (80402bc <__do_global_dtors_aux+0x1c>)
 80402aa:	b113      	cbz	r3, 80402b2 <__do_global_dtors_aux+0x12>
 80402ac:	4804      	ldr	r0, [pc, #16]	; (80402c0 <__do_global_dtors_aux+0x20>)
 80402ae:	f3af 8000 	nop.w
 80402b2:	2301      	movs	r3, #1
 80402b4:	7023      	strb	r3, [r4, #0]
 80402b6:	bd10      	pop	{r4, pc}
 80402b8:	24000074 	.word	0x24000074
 80402bc:	00000000 	.word	0x00000000
 80402c0:	080466d0 	.word	0x080466d0

080402c4 <frame_dummy>:
 80402c4:	b508      	push	{r3, lr}
 80402c6:	4b03      	ldr	r3, [pc, #12]	; (80402d4 <frame_dummy+0x10>)
 80402c8:	b11b      	cbz	r3, 80402d2 <frame_dummy+0xe>
 80402ca:	4903      	ldr	r1, [pc, #12]	; (80402d8 <frame_dummy+0x14>)
 80402cc:	4803      	ldr	r0, [pc, #12]	; (80402dc <frame_dummy+0x18>)
 80402ce:	f3af 8000 	nop.w
 80402d2:	bd08      	pop	{r3, pc}
 80402d4:	00000000 	.word	0x00000000
 80402d8:	24000078 	.word	0x24000078
 80402dc:	080466d0 	.word	0x080466d0

080402e0 <memchr>:
 80402e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80402e4:	2a10      	cmp	r2, #16
 80402e6:	db2b      	blt.n	8040340 <memchr+0x60>
 80402e8:	f010 0f07 	tst.w	r0, #7
 80402ec:	d008      	beq.n	8040300 <memchr+0x20>
 80402ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80402f2:	3a01      	subs	r2, #1
 80402f4:	428b      	cmp	r3, r1
 80402f6:	d02d      	beq.n	8040354 <memchr+0x74>
 80402f8:	f010 0f07 	tst.w	r0, #7
 80402fc:	b342      	cbz	r2, 8040350 <memchr+0x70>
 80402fe:	d1f6      	bne.n	80402ee <memchr+0xe>
 8040300:	b4f0      	push	{r4, r5, r6, r7}
 8040302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804030a:	f022 0407 	bic.w	r4, r2, #7
 804030e:	f07f 0700 	mvns.w	r7, #0
 8040312:	2300      	movs	r3, #0
 8040314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040318:	3c08      	subs	r4, #8
 804031a:	ea85 0501 	eor.w	r5, r5, r1
 804031e:	ea86 0601 	eor.w	r6, r6, r1
 8040322:	fa85 f547 	uadd8	r5, r5, r7
 8040326:	faa3 f587 	sel	r5, r3, r7
 804032a:	fa86 f647 	uadd8	r6, r6, r7
 804032e:	faa5 f687 	sel	r6, r5, r7
 8040332:	b98e      	cbnz	r6, 8040358 <memchr+0x78>
 8040334:	d1ee      	bne.n	8040314 <memchr+0x34>
 8040336:	bcf0      	pop	{r4, r5, r6, r7}
 8040338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804033c:	f002 0207 	and.w	r2, r2, #7
 8040340:	b132      	cbz	r2, 8040350 <memchr+0x70>
 8040342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040346:	3a01      	subs	r2, #1
 8040348:	ea83 0301 	eor.w	r3, r3, r1
 804034c:	b113      	cbz	r3, 8040354 <memchr+0x74>
 804034e:	d1f8      	bne.n	8040342 <memchr+0x62>
 8040350:	2000      	movs	r0, #0
 8040352:	4770      	bx	lr
 8040354:	3801      	subs	r0, #1
 8040356:	4770      	bx	lr
 8040358:	2d00      	cmp	r5, #0
 804035a:	bf06      	itte	eq
 804035c:	4635      	moveq	r5, r6
 804035e:	3803      	subeq	r0, #3
 8040360:	3807      	subne	r0, #7
 8040362:	f015 0f01 	tst.w	r5, #1
 8040366:	d107      	bne.n	8040378 <memchr+0x98>
 8040368:	3001      	adds	r0, #1
 804036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 804036e:	bf02      	ittt	eq
 8040370:	3001      	addeq	r0, #1
 8040372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8040376:	3001      	addeq	r0, #1
 8040378:	bcf0      	pop	{r4, r5, r6, r7}
 804037a:	3801      	subs	r0, #1
 804037c:	4770      	bx	lr
 804037e:	bf00      	nop

08040380 <__aeabi_uldivmod>:
 8040380:	b953      	cbnz	r3, 8040398 <__aeabi_uldivmod+0x18>
 8040382:	b94a      	cbnz	r2, 8040398 <__aeabi_uldivmod+0x18>
 8040384:	2900      	cmp	r1, #0
 8040386:	bf08      	it	eq
 8040388:	2800      	cmpeq	r0, #0
 804038a:	bf1c      	itt	ne
 804038c:	f04f 31ff 	movne.w	r1, #4294967295
 8040390:	f04f 30ff 	movne.w	r0, #4294967295
 8040394:	f000 b974 	b.w	8040680 <__aeabi_idiv0>
 8040398:	f1ad 0c08 	sub.w	ip, sp, #8
 804039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80403a0:	f000 f806 	bl	80403b0 <__udivmoddi4>
 80403a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80403a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80403ac:	b004      	add	sp, #16
 80403ae:	4770      	bx	lr

080403b0 <__udivmoddi4>:
 80403b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80403b4:	9d08      	ldr	r5, [sp, #32]
 80403b6:	4604      	mov	r4, r0
 80403b8:	468e      	mov	lr, r1
 80403ba:	2b00      	cmp	r3, #0
 80403bc:	d14d      	bne.n	804045a <__udivmoddi4+0xaa>
 80403be:	428a      	cmp	r2, r1
 80403c0:	4694      	mov	ip, r2
 80403c2:	d969      	bls.n	8040498 <__udivmoddi4+0xe8>
 80403c4:	fab2 f282 	clz	r2, r2
 80403c8:	b152      	cbz	r2, 80403e0 <__udivmoddi4+0x30>
 80403ca:	fa01 f302 	lsl.w	r3, r1, r2
 80403ce:	f1c2 0120 	rsb	r1, r2, #32
 80403d2:	fa20 f101 	lsr.w	r1, r0, r1
 80403d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80403da:	ea41 0e03 	orr.w	lr, r1, r3
 80403de:	4094      	lsls	r4, r2
 80403e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80403e4:	0c21      	lsrs	r1, r4, #16
 80403e6:	fbbe f6f8 	udiv	r6, lr, r8
 80403ea:	fa1f f78c 	uxth.w	r7, ip
 80403ee:	fb08 e316 	mls	r3, r8, r6, lr
 80403f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80403f6:	fb06 f107 	mul.w	r1, r6, r7
 80403fa:	4299      	cmp	r1, r3
 80403fc:	d90a      	bls.n	8040414 <__udivmoddi4+0x64>
 80403fe:	eb1c 0303 	adds.w	r3, ip, r3
 8040402:	f106 30ff 	add.w	r0, r6, #4294967295
 8040406:	f080 811f 	bcs.w	8040648 <__udivmoddi4+0x298>
 804040a:	4299      	cmp	r1, r3
 804040c:	f240 811c 	bls.w	8040648 <__udivmoddi4+0x298>
 8040410:	3e02      	subs	r6, #2
 8040412:	4463      	add	r3, ip
 8040414:	1a5b      	subs	r3, r3, r1
 8040416:	b2a4      	uxth	r4, r4
 8040418:	fbb3 f0f8 	udiv	r0, r3, r8
 804041c:	fb08 3310 	mls	r3, r8, r0, r3
 8040420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040424:	fb00 f707 	mul.w	r7, r0, r7
 8040428:	42a7      	cmp	r7, r4
 804042a:	d90a      	bls.n	8040442 <__udivmoddi4+0x92>
 804042c:	eb1c 0404 	adds.w	r4, ip, r4
 8040430:	f100 33ff 	add.w	r3, r0, #4294967295
 8040434:	f080 810a 	bcs.w	804064c <__udivmoddi4+0x29c>
 8040438:	42a7      	cmp	r7, r4
 804043a:	f240 8107 	bls.w	804064c <__udivmoddi4+0x29c>
 804043e:	4464      	add	r4, ip
 8040440:	3802      	subs	r0, #2
 8040442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8040446:	1be4      	subs	r4, r4, r7
 8040448:	2600      	movs	r6, #0
 804044a:	b11d      	cbz	r5, 8040454 <__udivmoddi4+0xa4>
 804044c:	40d4      	lsrs	r4, r2
 804044e:	2300      	movs	r3, #0
 8040450:	e9c5 4300 	strd	r4, r3, [r5]
 8040454:	4631      	mov	r1, r6
 8040456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804045a:	428b      	cmp	r3, r1
 804045c:	d909      	bls.n	8040472 <__udivmoddi4+0xc2>
 804045e:	2d00      	cmp	r5, #0
 8040460:	f000 80ef 	beq.w	8040642 <__udivmoddi4+0x292>
 8040464:	2600      	movs	r6, #0
 8040466:	e9c5 0100 	strd	r0, r1, [r5]
 804046a:	4630      	mov	r0, r6
 804046c:	4631      	mov	r1, r6
 804046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040472:	fab3 f683 	clz	r6, r3
 8040476:	2e00      	cmp	r6, #0
 8040478:	d14a      	bne.n	8040510 <__udivmoddi4+0x160>
 804047a:	428b      	cmp	r3, r1
 804047c:	d302      	bcc.n	8040484 <__udivmoddi4+0xd4>
 804047e:	4282      	cmp	r2, r0
 8040480:	f200 80f9 	bhi.w	8040676 <__udivmoddi4+0x2c6>
 8040484:	1a84      	subs	r4, r0, r2
 8040486:	eb61 0303 	sbc.w	r3, r1, r3
 804048a:	2001      	movs	r0, #1
 804048c:	469e      	mov	lr, r3
 804048e:	2d00      	cmp	r5, #0
 8040490:	d0e0      	beq.n	8040454 <__udivmoddi4+0xa4>
 8040492:	e9c5 4e00 	strd	r4, lr, [r5]
 8040496:	e7dd      	b.n	8040454 <__udivmoddi4+0xa4>
 8040498:	b902      	cbnz	r2, 804049c <__udivmoddi4+0xec>
 804049a:	deff      	udf	#255	; 0xff
 804049c:	fab2 f282 	clz	r2, r2
 80404a0:	2a00      	cmp	r2, #0
 80404a2:	f040 8092 	bne.w	80405ca <__udivmoddi4+0x21a>
 80404a6:	eba1 010c 	sub.w	r1, r1, ip
 80404aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80404ae:	fa1f fe8c 	uxth.w	lr, ip
 80404b2:	2601      	movs	r6, #1
 80404b4:	0c20      	lsrs	r0, r4, #16
 80404b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80404ba:	fb07 1113 	mls	r1, r7, r3, r1
 80404be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80404c2:	fb0e f003 	mul.w	r0, lr, r3
 80404c6:	4288      	cmp	r0, r1
 80404c8:	d908      	bls.n	80404dc <__udivmoddi4+0x12c>
 80404ca:	eb1c 0101 	adds.w	r1, ip, r1
 80404ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80404d2:	d202      	bcs.n	80404da <__udivmoddi4+0x12a>
 80404d4:	4288      	cmp	r0, r1
 80404d6:	f200 80cb 	bhi.w	8040670 <__udivmoddi4+0x2c0>
 80404da:	4643      	mov	r3, r8
 80404dc:	1a09      	subs	r1, r1, r0
 80404de:	b2a4      	uxth	r4, r4
 80404e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80404e4:	fb07 1110 	mls	r1, r7, r0, r1
 80404e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80404ec:	fb0e fe00 	mul.w	lr, lr, r0
 80404f0:	45a6      	cmp	lr, r4
 80404f2:	d908      	bls.n	8040506 <__udivmoddi4+0x156>
 80404f4:	eb1c 0404 	adds.w	r4, ip, r4
 80404f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80404fc:	d202      	bcs.n	8040504 <__udivmoddi4+0x154>
 80404fe:	45a6      	cmp	lr, r4
 8040500:	f200 80bb 	bhi.w	804067a <__udivmoddi4+0x2ca>
 8040504:	4608      	mov	r0, r1
 8040506:	eba4 040e 	sub.w	r4, r4, lr
 804050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 804050e:	e79c      	b.n	804044a <__udivmoddi4+0x9a>
 8040510:	f1c6 0720 	rsb	r7, r6, #32
 8040514:	40b3      	lsls	r3, r6
 8040516:	fa22 fc07 	lsr.w	ip, r2, r7
 804051a:	ea4c 0c03 	orr.w	ip, ip, r3
 804051e:	fa20 f407 	lsr.w	r4, r0, r7
 8040522:	fa01 f306 	lsl.w	r3, r1, r6
 8040526:	431c      	orrs	r4, r3
 8040528:	40f9      	lsrs	r1, r7
 804052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 804052e:	fa00 f306 	lsl.w	r3, r0, r6
 8040532:	fbb1 f8f9 	udiv	r8, r1, r9
 8040536:	0c20      	lsrs	r0, r4, #16
 8040538:	fa1f fe8c 	uxth.w	lr, ip
 804053c:	fb09 1118 	mls	r1, r9, r8, r1
 8040540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040544:	fb08 f00e 	mul.w	r0, r8, lr
 8040548:	4288      	cmp	r0, r1
 804054a:	fa02 f206 	lsl.w	r2, r2, r6
 804054e:	d90b      	bls.n	8040568 <__udivmoddi4+0x1b8>
 8040550:	eb1c 0101 	adds.w	r1, ip, r1
 8040554:	f108 3aff 	add.w	sl, r8, #4294967295
 8040558:	f080 8088 	bcs.w	804066c <__udivmoddi4+0x2bc>
 804055c:	4288      	cmp	r0, r1
 804055e:	f240 8085 	bls.w	804066c <__udivmoddi4+0x2bc>
 8040562:	f1a8 0802 	sub.w	r8, r8, #2
 8040566:	4461      	add	r1, ip
 8040568:	1a09      	subs	r1, r1, r0
 804056a:	b2a4      	uxth	r4, r4
 804056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8040570:	fb09 1110 	mls	r1, r9, r0, r1
 8040574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8040578:	fb00 fe0e 	mul.w	lr, r0, lr
 804057c:	458e      	cmp	lr, r1
 804057e:	d908      	bls.n	8040592 <__udivmoddi4+0x1e2>
 8040580:	eb1c 0101 	adds.w	r1, ip, r1
 8040584:	f100 34ff 	add.w	r4, r0, #4294967295
 8040588:	d26c      	bcs.n	8040664 <__udivmoddi4+0x2b4>
 804058a:	458e      	cmp	lr, r1
 804058c:	d96a      	bls.n	8040664 <__udivmoddi4+0x2b4>
 804058e:	3802      	subs	r0, #2
 8040590:	4461      	add	r1, ip
 8040592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8040596:	fba0 9402 	umull	r9, r4, r0, r2
 804059a:	eba1 010e 	sub.w	r1, r1, lr
 804059e:	42a1      	cmp	r1, r4
 80405a0:	46c8      	mov	r8, r9
 80405a2:	46a6      	mov	lr, r4
 80405a4:	d356      	bcc.n	8040654 <__udivmoddi4+0x2a4>
 80405a6:	d053      	beq.n	8040650 <__udivmoddi4+0x2a0>
 80405a8:	b15d      	cbz	r5, 80405c2 <__udivmoddi4+0x212>
 80405aa:	ebb3 0208 	subs.w	r2, r3, r8
 80405ae:	eb61 010e 	sbc.w	r1, r1, lr
 80405b2:	fa01 f707 	lsl.w	r7, r1, r7
 80405b6:	fa22 f306 	lsr.w	r3, r2, r6
 80405ba:	40f1      	lsrs	r1, r6
 80405bc:	431f      	orrs	r7, r3
 80405be:	e9c5 7100 	strd	r7, r1, [r5]
 80405c2:	2600      	movs	r6, #0
 80405c4:	4631      	mov	r1, r6
 80405c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80405ca:	f1c2 0320 	rsb	r3, r2, #32
 80405ce:	40d8      	lsrs	r0, r3
 80405d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80405d4:	fa21 f303 	lsr.w	r3, r1, r3
 80405d8:	4091      	lsls	r1, r2
 80405da:	4301      	orrs	r1, r0
 80405dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80405e0:	fa1f fe8c 	uxth.w	lr, ip
 80405e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80405e8:	fb07 3610 	mls	r6, r7, r0, r3
 80405ec:	0c0b      	lsrs	r3, r1, #16
 80405ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80405f2:	fb00 f60e 	mul.w	r6, r0, lr
 80405f6:	429e      	cmp	r6, r3
 80405f8:	fa04 f402 	lsl.w	r4, r4, r2
 80405fc:	d908      	bls.n	8040610 <__udivmoddi4+0x260>
 80405fe:	eb1c 0303 	adds.w	r3, ip, r3
 8040602:	f100 38ff 	add.w	r8, r0, #4294967295
 8040606:	d22f      	bcs.n	8040668 <__udivmoddi4+0x2b8>
 8040608:	429e      	cmp	r6, r3
 804060a:	d92d      	bls.n	8040668 <__udivmoddi4+0x2b8>
 804060c:	3802      	subs	r0, #2
 804060e:	4463      	add	r3, ip
 8040610:	1b9b      	subs	r3, r3, r6
 8040612:	b289      	uxth	r1, r1
 8040614:	fbb3 f6f7 	udiv	r6, r3, r7
 8040618:	fb07 3316 	mls	r3, r7, r6, r3
 804061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8040620:	fb06 f30e 	mul.w	r3, r6, lr
 8040624:	428b      	cmp	r3, r1
 8040626:	d908      	bls.n	804063a <__udivmoddi4+0x28a>
 8040628:	eb1c 0101 	adds.w	r1, ip, r1
 804062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8040630:	d216      	bcs.n	8040660 <__udivmoddi4+0x2b0>
 8040632:	428b      	cmp	r3, r1
 8040634:	d914      	bls.n	8040660 <__udivmoddi4+0x2b0>
 8040636:	3e02      	subs	r6, #2
 8040638:	4461      	add	r1, ip
 804063a:	1ac9      	subs	r1, r1, r3
 804063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8040640:	e738      	b.n	80404b4 <__udivmoddi4+0x104>
 8040642:	462e      	mov	r6, r5
 8040644:	4628      	mov	r0, r5
 8040646:	e705      	b.n	8040454 <__udivmoddi4+0xa4>
 8040648:	4606      	mov	r6, r0
 804064a:	e6e3      	b.n	8040414 <__udivmoddi4+0x64>
 804064c:	4618      	mov	r0, r3
 804064e:	e6f8      	b.n	8040442 <__udivmoddi4+0x92>
 8040650:	454b      	cmp	r3, r9
 8040652:	d2a9      	bcs.n	80405a8 <__udivmoddi4+0x1f8>
 8040654:	ebb9 0802 	subs.w	r8, r9, r2
 8040658:	eb64 0e0c 	sbc.w	lr, r4, ip
 804065c:	3801      	subs	r0, #1
 804065e:	e7a3      	b.n	80405a8 <__udivmoddi4+0x1f8>
 8040660:	4646      	mov	r6, r8
 8040662:	e7ea      	b.n	804063a <__udivmoddi4+0x28a>
 8040664:	4620      	mov	r0, r4
 8040666:	e794      	b.n	8040592 <__udivmoddi4+0x1e2>
 8040668:	4640      	mov	r0, r8
 804066a:	e7d1      	b.n	8040610 <__udivmoddi4+0x260>
 804066c:	46d0      	mov	r8, sl
 804066e:	e77b      	b.n	8040568 <__udivmoddi4+0x1b8>
 8040670:	3b02      	subs	r3, #2
 8040672:	4461      	add	r1, ip
 8040674:	e732      	b.n	80404dc <__udivmoddi4+0x12c>
 8040676:	4630      	mov	r0, r6
 8040678:	e709      	b.n	804048e <__udivmoddi4+0xde>
 804067a:	4464      	add	r4, ip
 804067c:	3802      	subs	r0, #2
 804067e:	e742      	b.n	8040506 <__udivmoddi4+0x156>

08040680 <__aeabi_idiv0>:
 8040680:	4770      	bx	lr
 8040682:	bf00      	nop

08040684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8040684:	b480      	push	{r7}
 8040686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8040688:	4b3f      	ldr	r3, [pc, #252]	; (8040788 <SystemInit+0x104>)
 804068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804068e:	4a3e      	ldr	r2, [pc, #248]	; (8040788 <SystemInit+0x104>)
 8040690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8040694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8040698:	4b3b      	ldr	r3, [pc, #236]	; (8040788 <SystemInit+0x104>)
 804069a:	691b      	ldr	r3, [r3, #16]
 804069c:	4a3a      	ldr	r2, [pc, #232]	; (8040788 <SystemInit+0x104>)
 804069e:	f043 0310 	orr.w	r3, r3, #16
 80406a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80406a4:	4b39      	ldr	r3, [pc, #228]	; (804078c <SystemInit+0x108>)
 80406a6:	681b      	ldr	r3, [r3, #0]
 80406a8:	f003 030f 	and.w	r3, r3, #15
 80406ac:	2b06      	cmp	r3, #6
 80406ae:	d807      	bhi.n	80406c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80406b0:	4b36      	ldr	r3, [pc, #216]	; (804078c <SystemInit+0x108>)
 80406b2:	681b      	ldr	r3, [r3, #0]
 80406b4:	f023 030f 	bic.w	r3, r3, #15
 80406b8:	4a34      	ldr	r2, [pc, #208]	; (804078c <SystemInit+0x108>)
 80406ba:	f043 0307 	orr.w	r3, r3, #7
 80406be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80406c0:	4b33      	ldr	r3, [pc, #204]	; (8040790 <SystemInit+0x10c>)
 80406c2:	681b      	ldr	r3, [r3, #0]
 80406c4:	4a32      	ldr	r2, [pc, #200]	; (8040790 <SystemInit+0x10c>)
 80406c6:	f043 0301 	orr.w	r3, r3, #1
 80406ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80406cc:	4b30      	ldr	r3, [pc, #192]	; (8040790 <SystemInit+0x10c>)
 80406ce:	2200      	movs	r2, #0
 80406d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80406d2:	4b2f      	ldr	r3, [pc, #188]	; (8040790 <SystemInit+0x10c>)
 80406d4:	681a      	ldr	r2, [r3, #0]
 80406d6:	492e      	ldr	r1, [pc, #184]	; (8040790 <SystemInit+0x10c>)
 80406d8:	4b2e      	ldr	r3, [pc, #184]	; (8040794 <SystemInit+0x110>)
 80406da:	4013      	ands	r3, r2
 80406dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80406de:	4b2b      	ldr	r3, [pc, #172]	; (804078c <SystemInit+0x108>)
 80406e0:	681b      	ldr	r3, [r3, #0]
 80406e2:	f003 0308 	and.w	r3, r3, #8
 80406e6:	2b00      	cmp	r3, #0
 80406e8:	d007      	beq.n	80406fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80406ea:	4b28      	ldr	r3, [pc, #160]	; (804078c <SystemInit+0x108>)
 80406ec:	681b      	ldr	r3, [r3, #0]
 80406ee:	f023 030f 	bic.w	r3, r3, #15
 80406f2:	4a26      	ldr	r2, [pc, #152]	; (804078c <SystemInit+0x108>)
 80406f4:	f043 0307 	orr.w	r3, r3, #7
 80406f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80406fa:	4b25      	ldr	r3, [pc, #148]	; (8040790 <SystemInit+0x10c>)
 80406fc:	2200      	movs	r2, #0
 80406fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8040700:	4b23      	ldr	r3, [pc, #140]	; (8040790 <SystemInit+0x10c>)
 8040702:	2200      	movs	r2, #0
 8040704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8040706:	4b22      	ldr	r3, [pc, #136]	; (8040790 <SystemInit+0x10c>)
 8040708:	2200      	movs	r2, #0
 804070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 804070c:	4b20      	ldr	r3, [pc, #128]	; (8040790 <SystemInit+0x10c>)
 804070e:	4a22      	ldr	r2, [pc, #136]	; (8040798 <SystemInit+0x114>)
 8040710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8040712:	4b1f      	ldr	r3, [pc, #124]	; (8040790 <SystemInit+0x10c>)
 8040714:	4a21      	ldr	r2, [pc, #132]	; (804079c <SystemInit+0x118>)
 8040716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8040718:	4b1d      	ldr	r3, [pc, #116]	; (8040790 <SystemInit+0x10c>)
 804071a:	4a21      	ldr	r2, [pc, #132]	; (80407a0 <SystemInit+0x11c>)
 804071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 804071e:	4b1c      	ldr	r3, [pc, #112]	; (8040790 <SystemInit+0x10c>)
 8040720:	2200      	movs	r2, #0
 8040722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8040724:	4b1a      	ldr	r3, [pc, #104]	; (8040790 <SystemInit+0x10c>)
 8040726:	4a1e      	ldr	r2, [pc, #120]	; (80407a0 <SystemInit+0x11c>)
 8040728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 804072a:	4b19      	ldr	r3, [pc, #100]	; (8040790 <SystemInit+0x10c>)
 804072c:	2200      	movs	r2, #0
 804072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8040730:	4b17      	ldr	r3, [pc, #92]	; (8040790 <SystemInit+0x10c>)
 8040732:	4a1b      	ldr	r2, [pc, #108]	; (80407a0 <SystemInit+0x11c>)
 8040734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8040736:	4b16      	ldr	r3, [pc, #88]	; (8040790 <SystemInit+0x10c>)
 8040738:	2200      	movs	r2, #0
 804073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 804073c:	4b14      	ldr	r3, [pc, #80]	; (8040790 <SystemInit+0x10c>)
 804073e:	681b      	ldr	r3, [r3, #0]
 8040740:	4a13      	ldr	r2, [pc, #76]	; (8040790 <SystemInit+0x10c>)
 8040742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8040746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8040748:	4b11      	ldr	r3, [pc, #68]	; (8040790 <SystemInit+0x10c>)
 804074a:	2200      	movs	r2, #0
 804074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 804074e:	4b15      	ldr	r3, [pc, #84]	; (80407a4 <SystemInit+0x120>)
 8040750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040752:	4a14      	ldr	r2, [pc, #80]	; (80407a4 <SystemInit+0x120>)
 8040754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 804075a:	4b13      	ldr	r3, [pc, #76]	; (80407a8 <SystemInit+0x124>)
 804075c:	681a      	ldr	r2, [r3, #0]
 804075e:	4b13      	ldr	r3, [pc, #76]	; (80407ac <SystemInit+0x128>)
 8040760:	4013      	ands	r3, r2
 8040762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8040766:	d202      	bcs.n	804076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8040768:	4b11      	ldr	r3, [pc, #68]	; (80407b0 <SystemInit+0x12c>)
 804076a:	2201      	movs	r2, #1
 804076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 804076e:	4b11      	ldr	r3, [pc, #68]	; (80407b4 <SystemInit+0x130>)
 8040770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8040774:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 8040776:	4b04      	ldr	r3, [pc, #16]	; (8040788 <SystemInit+0x104>)
 8040778:	4a0f      	ldr	r2, [pc, #60]	; (80407b8 <SystemInit+0x134>)
 804077a:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 804077c:	bf00      	nop
 804077e:	46bd      	mov	sp, r7
 8040780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040784:	4770      	bx	lr
 8040786:	bf00      	nop
 8040788:	e000ed00 	.word	0xe000ed00
 804078c:	52002000 	.word	0x52002000
 8040790:	58024400 	.word	0x58024400
 8040794:	eaf6ed7f 	.word	0xeaf6ed7f
 8040798:	02020200 	.word	0x02020200
 804079c:	01ff0000 	.word	0x01ff0000
 80407a0:	01010280 	.word	0x01010280
 80407a4:	580000c0 	.word	0x580000c0
 80407a8:	5c001000 	.word	0x5c001000
 80407ac:	ffff0000 	.word	0xffff0000
 80407b0:	51008108 	.word	0x51008108
 80407b4:	52004000 	.word	0x52004000
 80407b8:	08040000 	.word	0x08040000

080407bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80407bc:	b580      	push	{r7, lr}
 80407be:	b082      	sub	sp, #8
 80407c0:	af00      	add	r7, sp, #0
//  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80407c2:	f000 fb1d 	bl	8040e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80407c6:	f000 f855 	bl	8040874 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80407ca:	4b26      	ldr	r3, [pc, #152]	; (8040864 <main+0xa8>)
 80407cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80407d0:	4a24      	ldr	r2, [pc, #144]	; (8040864 <main+0xa8>)
 80407d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80407d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80407da:	4b22      	ldr	r3, [pc, #136]	; (8040864 <main+0xa8>)
 80407dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80407e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80407e4:	607b      	str	r3, [r7, #4]
 80407e6:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80407e8:	2000      	movs	r0, #0
 80407ea:	f000 fe93 	bl	8041514 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80407ee:	2100      	movs	r1, #0
 80407f0:	2000      	movs	r0, #0
 80407f2:	f000 fea9 	bl	8041548 <HAL_HSEM_Release>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80407f6:	f000 f8f7 	bl	80409e8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80407fa:	f000 f8a9 	bl	8040950 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Application v%d.%d (CM7)\r\n",application_ver[0], application_ver[1]);
 80407fe:	2300      	movs	r3, #0
 8040800:	2201      	movs	r2, #1
 8040802:	4619      	mov	r1, r3
 8040804:	4818      	ldr	r0, [pc, #96]	; (8040868 <main+0xac>)
 8040806:	f004 ff5f 	bl	80456c8 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 804080a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 804080e:	4817      	ldr	r0, [pc, #92]	; (804086c <main+0xb0>)
 8040810:	f000 fe65 	bl	80414de <HAL_GPIO_TogglePin>
	  HAL_Delay(300);
 8040814:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8040818:	f000 fb84 	bl	8040f24 <HAL_Delay>

	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 804081c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8040820:	4812      	ldr	r0, [pc, #72]	; (804086c <main+0xb0>)
 8040822:	f000 fe5c 	bl	80414de <HAL_GPIO_TogglePin>
	  HAL_Delay(300);
 8040826:	f44f 7096 	mov.w	r0, #300	; 0x12c
 804082a:	f000 fb7b 	bl	8040f24 <HAL_Delay>

	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 804082e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8040832:	480e      	ldr	r0, [pc, #56]	; (804086c <main+0xb0>)
 8040834:	f000 fe53 	bl	80414de <HAL_GPIO_TogglePin>
	  HAL_Delay(300);
 8040838:	f44f 7096 	mov.w	r0, #300	; 0x12c
 804083c:	f000 fb72 	bl	8040f24 <HAL_Delay>

	  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8040840:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8040844:	4809      	ldr	r0, [pc, #36]	; (804086c <main+0xb0>)
 8040846:	f000 fe4a 	bl	80414de <HAL_GPIO_TogglePin>
	  HAL_Delay(300);
 804084a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 804084e:	f000 fb69 	bl	8040f24 <HAL_Delay>

	  printf("Application running...\r\n");
 8040852:	4807      	ldr	r0, [pc, #28]	; (8040870 <main+0xb4>)
 8040854:	f004 ffbe 	bl	80457d4 <puts>
	  HAL_Delay(600);
 8040858:	f44f 7016 	mov.w	r0, #600	; 0x258
 804085c:	f000 fb62 	bl	8040f24 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8040860:	e7d3      	b.n	804080a <main+0x4e>
 8040862:	bf00      	nop
 8040864:	58024400 	.word	0x58024400
 8040868:	080466e8 	.word	0x080466e8
 804086c:	58022000 	.word	0x58022000
 8040870:	0804670c 	.word	0x0804670c

08040874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8040874:	b580      	push	{r7, lr}
 8040876:	b09c      	sub	sp, #112	; 0x70
 8040878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 804087a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 804087e:	224c      	movs	r2, #76	; 0x4c
 8040880:	2100      	movs	r1, #0
 8040882:	4618      	mov	r0, r3
 8040884:	f004 ff18 	bl	80456b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8040888:	1d3b      	adds	r3, r7, #4
 804088a:	2220      	movs	r2, #32
 804088c:	2100      	movs	r1, #0
 804088e:	4618      	mov	r0, r3
 8040890:	f004 ff12 	bl	80456b8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8040894:	2004      	movs	r0, #4
 8040896:	f000 fe6b 	bl	8041570 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 804089a:	2300      	movs	r3, #0
 804089c:	603b      	str	r3, [r7, #0]
 804089e:	4b2a      	ldr	r3, [pc, #168]	; (8040948 <SystemClock_Config+0xd4>)
 80408a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80408a2:	4a29      	ldr	r2, [pc, #164]	; (8040948 <SystemClock_Config+0xd4>)
 80408a4:	f023 0301 	bic.w	r3, r3, #1
 80408a8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80408aa:	4b27      	ldr	r3, [pc, #156]	; (8040948 <SystemClock_Config+0xd4>)
 80408ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80408ae:	f003 0301 	and.w	r3, r3, #1
 80408b2:	603b      	str	r3, [r7, #0]
 80408b4:	4b25      	ldr	r3, [pc, #148]	; (804094c <SystemClock_Config+0xd8>)
 80408b6:	699b      	ldr	r3, [r3, #24]
 80408b8:	4a24      	ldr	r2, [pc, #144]	; (804094c <SystemClock_Config+0xd8>)
 80408ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80408be:	6193      	str	r3, [r2, #24]
 80408c0:	4b22      	ldr	r3, [pc, #136]	; (804094c <SystemClock_Config+0xd8>)
 80408c2:	699b      	ldr	r3, [r3, #24]
 80408c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80408c8:	603b      	str	r3, [r7, #0]
 80408ca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80408cc:	bf00      	nop
 80408ce:	4b1f      	ldr	r3, [pc, #124]	; (804094c <SystemClock_Config+0xd8>)
 80408d0:	699b      	ldr	r3, [r3, #24]
 80408d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80408d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80408da:	d1f8      	bne.n	80408ce <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80408dc:	2302      	movs	r3, #2
 80408de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80408e0:	2301      	movs	r3, #1
 80408e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80408e4:	2340      	movs	r3, #64	; 0x40
 80408e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80408e8:	2300      	movs	r3, #0
 80408ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80408ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80408f0:	4618      	mov	r0, r3
 80408f2:	f000 fe97 	bl	8041624 <HAL_RCC_OscConfig>
 80408f6:	4603      	mov	r3, r0
 80408f8:	2b00      	cmp	r3, #0
 80408fa:	d001      	beq.n	8040900 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80408fc:	f000 f8fe 	bl	8040afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8040900:	233f      	movs	r3, #63	; 0x3f
 8040902:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8040904:	2300      	movs	r3, #0
 8040906:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8040908:	2300      	movs	r3, #0
 804090a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 804090c:	2300      	movs	r3, #0
 804090e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8040910:	2300      	movs	r3, #0
 8040912:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8040914:	2300      	movs	r3, #0
 8040916:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8040918:	2300      	movs	r3, #0
 804091a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 804091c:	2300      	movs	r3, #0
 804091e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8040920:	1d3b      	adds	r3, r7, #4
 8040922:	2100      	movs	r1, #0
 8040924:	4618      	mov	r0, r3
 8040926:	f001 fad7 	bl	8041ed8 <HAL_RCC_ClockConfig>
 804092a:	4603      	mov	r3, r0
 804092c:	2b00      	cmp	r3, #0
 804092e:	d001      	beq.n	8040934 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8040930:	f000 f8e4 	bl	8040afc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8040934:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8040938:	2100      	movs	r1, #0
 804093a:	2000      	movs	r0, #0
 804093c:	f001 fc82 	bl	8042244 <HAL_RCC_MCOConfig>
}
 8040940:	bf00      	nop
 8040942:	3770      	adds	r7, #112	; 0x70
 8040944:	46bd      	mov	sp, r7
 8040946:	bd80      	pop	{r7, pc}
 8040948:	58000400 	.word	0x58000400
 804094c:	58024800 	.word	0x58024800

08040950 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8040950:	b580      	push	{r7, lr}
 8040952:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8040954:	4b22      	ldr	r3, [pc, #136]	; (80409e0 <MX_USART1_UART_Init+0x90>)
 8040956:	4a23      	ldr	r2, [pc, #140]	; (80409e4 <MX_USART1_UART_Init+0x94>)
 8040958:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 804095a:	4b21      	ldr	r3, [pc, #132]	; (80409e0 <MX_USART1_UART_Init+0x90>)
 804095c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8040960:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8040962:	4b1f      	ldr	r3, [pc, #124]	; (80409e0 <MX_USART1_UART_Init+0x90>)
 8040964:	2200      	movs	r2, #0
 8040966:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8040968:	4b1d      	ldr	r3, [pc, #116]	; (80409e0 <MX_USART1_UART_Init+0x90>)
 804096a:	2200      	movs	r2, #0
 804096c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 804096e:	4b1c      	ldr	r3, [pc, #112]	; (80409e0 <MX_USART1_UART_Init+0x90>)
 8040970:	2200      	movs	r2, #0
 8040972:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8040974:	4b1a      	ldr	r3, [pc, #104]	; (80409e0 <MX_USART1_UART_Init+0x90>)
 8040976:	220c      	movs	r2, #12
 8040978:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 804097a:	4b19      	ldr	r3, [pc, #100]	; (80409e0 <MX_USART1_UART_Init+0x90>)
 804097c:	2200      	movs	r2, #0
 804097e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8040980:	4b17      	ldr	r3, [pc, #92]	; (80409e0 <MX_USART1_UART_Init+0x90>)
 8040982:	2200      	movs	r2, #0
 8040984:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8040986:	4b16      	ldr	r3, [pc, #88]	; (80409e0 <MX_USART1_UART_Init+0x90>)
 8040988:	2200      	movs	r2, #0
 804098a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 804098c:	4b14      	ldr	r3, [pc, #80]	; (80409e0 <MX_USART1_UART_Init+0x90>)
 804098e:	2200      	movs	r2, #0
 8040990:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8040992:	4b13      	ldr	r3, [pc, #76]	; (80409e0 <MX_USART1_UART_Init+0x90>)
 8040994:	2200      	movs	r2, #0
 8040996:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8040998:	4811      	ldr	r0, [pc, #68]	; (80409e0 <MX_USART1_UART_Init+0x90>)
 804099a:	f003 fcff 	bl	804439c <HAL_UART_Init>
 804099e:	4603      	mov	r3, r0
 80409a0:	2b00      	cmp	r3, #0
 80409a2:	d001      	beq.n	80409a8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80409a4:	f000 f8aa 	bl	8040afc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80409a8:	2100      	movs	r1, #0
 80409aa:	480d      	ldr	r0, [pc, #52]	; (80409e0 <MX_USART1_UART_Init+0x90>)
 80409ac:	f004 fd8f 	bl	80454ce <HAL_UARTEx_SetTxFifoThreshold>
 80409b0:	4603      	mov	r3, r0
 80409b2:	2b00      	cmp	r3, #0
 80409b4:	d001      	beq.n	80409ba <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80409b6:	f000 f8a1 	bl	8040afc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80409ba:	2100      	movs	r1, #0
 80409bc:	4808      	ldr	r0, [pc, #32]	; (80409e0 <MX_USART1_UART_Init+0x90>)
 80409be:	f004 fdc4 	bl	804554a <HAL_UARTEx_SetRxFifoThreshold>
 80409c2:	4603      	mov	r3, r0
 80409c4:	2b00      	cmp	r3, #0
 80409c6:	d001      	beq.n	80409cc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80409c8:	f000 f898 	bl	8040afc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80409cc:	4804      	ldr	r0, [pc, #16]	; (80409e0 <MX_USART1_UART_Init+0x90>)
 80409ce:	f004 fd45 	bl	804545c <HAL_UARTEx_DisableFifoMode>
 80409d2:	4603      	mov	r3, r0
 80409d4:	2b00      	cmp	r3, #0
 80409d6:	d001      	beq.n	80409dc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80409d8:	f000 f890 	bl	8040afc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80409dc:	bf00      	nop
 80409de:	bd80      	pop	{r7, pc}
 80409e0:	24000090 	.word	0x24000090
 80409e4:	40011000 	.word	0x40011000

080409e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80409e8:	b580      	push	{r7, lr}
 80409ea:	b08a      	sub	sp, #40	; 0x28
 80409ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80409ee:	f107 0314 	add.w	r3, r7, #20
 80409f2:	2200      	movs	r2, #0
 80409f4:	601a      	str	r2, [r3, #0]
 80409f6:	605a      	str	r2, [r3, #4]
 80409f8:	609a      	str	r2, [r3, #8]
 80409fa:	60da      	str	r2, [r3, #12]
 80409fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80409fe:	4b33      	ldr	r3, [pc, #204]	; (8040acc <MX_GPIO_Init+0xe4>)
 8040a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040a04:	4a31      	ldr	r2, [pc, #196]	; (8040acc <MX_GPIO_Init+0xe4>)
 8040a06:	f043 0304 	orr.w	r3, r3, #4
 8040a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8040a0e:	4b2f      	ldr	r3, [pc, #188]	; (8040acc <MX_GPIO_Init+0xe4>)
 8040a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040a14:	f003 0304 	and.w	r3, r3, #4
 8040a18:	613b      	str	r3, [r7, #16]
 8040a1a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8040a1c:	4b2b      	ldr	r3, [pc, #172]	; (8040acc <MX_GPIO_Init+0xe4>)
 8040a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040a22:	4a2a      	ldr	r2, [pc, #168]	; (8040acc <MX_GPIO_Init+0xe4>)
 8040a24:	f043 0301 	orr.w	r3, r3, #1
 8040a28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8040a2c:	4b27      	ldr	r3, [pc, #156]	; (8040acc <MX_GPIO_Init+0xe4>)
 8040a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040a32:	f003 0301 	and.w	r3, r3, #1
 8040a36:	60fb      	str	r3, [r7, #12]
 8040a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8040a3a:	4b24      	ldr	r3, [pc, #144]	; (8040acc <MX_GPIO_Init+0xe4>)
 8040a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040a40:	4a22      	ldr	r2, [pc, #136]	; (8040acc <MX_GPIO_Init+0xe4>)
 8040a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8040a46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8040a4a:	4b20      	ldr	r3, [pc, #128]	; (8040acc <MX_GPIO_Init+0xe4>)
 8040a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8040a54:	60bb      	str	r3, [r7, #8]
 8040a56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8040a58:	4b1c      	ldr	r3, [pc, #112]	; (8040acc <MX_GPIO_Init+0xe4>)
 8040a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040a5e:	4a1b      	ldr	r2, [pc, #108]	; (8040acc <MX_GPIO_Init+0xe4>)
 8040a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8040a64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8040a68:	4b18      	ldr	r3, [pc, #96]	; (8040acc <MX_GPIO_Init+0xe4>)
 8040a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8040a72:	607b      	str	r3, [r7, #4]
 8040a74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8040a76:	2200      	movs	r2, #0
 8040a78:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8040a7c:	4814      	ldr	r0, [pc, #80]	; (8040ad0 <MX_GPIO_Init+0xe8>)
 8040a7e:	f000 fd15 	bl	80414ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8040a82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8040a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040a88:	2302      	movs	r3, #2
 8040a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040a8c:	2300      	movs	r3, #0
 8040a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040a90:	2300      	movs	r3, #0
 8040a92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8040a94:	2300      	movs	r3, #0
 8040a96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8040a98:	f107 0314 	add.w	r3, r7, #20
 8040a9c:	4619      	mov	r1, r3
 8040a9e:	480d      	ldr	r0, [pc, #52]	; (8040ad4 <MX_GPIO_Init+0xec>)
 8040aa0:	f000 fb54 	bl	804114c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8040aa4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8040aa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040aaa:	2301      	movs	r3, #1
 8040aac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8040aae:	2301      	movs	r3, #1
 8040ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040ab2:	2300      	movs	r3, #0
 8040ab4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8040ab6:	f107 0314 	add.w	r3, r7, #20
 8040aba:	4619      	mov	r1, r3
 8040abc:	4804      	ldr	r0, [pc, #16]	; (8040ad0 <MX_GPIO_Init+0xe8>)
 8040abe:	f000 fb45 	bl	804114c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8040ac2:	bf00      	nop
 8040ac4:	3728      	adds	r7, #40	; 0x28
 8040ac6:	46bd      	mov	sp, r7
 8040ac8:	bd80      	pop	{r7, pc}
 8040aca:	bf00      	nop
 8040acc:	58024400 	.word	0x58024400
 8040ad0:	58022000 	.word	0x58022000
 8040ad4:	58020000 	.word	0x58020000

08040ad8 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8040ad8:	b580      	push	{r7, lr}
 8040ada:	b082      	sub	sp, #8
 8040adc:	af00      	add	r7, sp, #0
 8040ade:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8040ae0:	1d39      	adds	r1, r7, #4
 8040ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8040ae6:	2201      	movs	r2, #1
 8040ae8:	4803      	ldr	r0, [pc, #12]	; (8040af8 <__io_putchar+0x20>)
 8040aea:	f003 fca7 	bl	804443c <HAL_UART_Transmit>

  return ch;
 8040aee:	687b      	ldr	r3, [r7, #4]
}
 8040af0:	4618      	mov	r0, r3
 8040af2:	3708      	adds	r7, #8
 8040af4:	46bd      	mov	sp, r7
 8040af6:	bd80      	pop	{r7, pc}
 8040af8:	24000090 	.word	0x24000090

08040afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040afc:	b480      	push	{r7}
 8040afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040b00:	b672      	cpsid	i
}
 8040b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040b04:	e7fe      	b.n	8040b04 <Error_Handler+0x8>
	...

08040b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040b08:	b480      	push	{r7}
 8040b0a:	b083      	sub	sp, #12
 8040b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040b0e:	4b0a      	ldr	r3, [pc, #40]	; (8040b38 <HAL_MspInit+0x30>)
 8040b10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8040b14:	4a08      	ldr	r2, [pc, #32]	; (8040b38 <HAL_MspInit+0x30>)
 8040b16:	f043 0302 	orr.w	r3, r3, #2
 8040b1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8040b1e:	4b06      	ldr	r3, [pc, #24]	; (8040b38 <HAL_MspInit+0x30>)
 8040b20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8040b24:	f003 0302 	and.w	r3, r3, #2
 8040b28:	607b      	str	r3, [r7, #4]
 8040b2a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040b2c:	bf00      	nop
 8040b2e:	370c      	adds	r7, #12
 8040b30:	46bd      	mov	sp, r7
 8040b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b36:	4770      	bx	lr
 8040b38:	58024400 	.word	0x58024400

08040b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8040b3c:	b580      	push	{r7, lr}
 8040b3e:	b0bc      	sub	sp, #240	; 0xf0
 8040b40:	af00      	add	r7, sp, #0
 8040b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040b44:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8040b48:	2200      	movs	r2, #0
 8040b4a:	601a      	str	r2, [r3, #0]
 8040b4c:	605a      	str	r2, [r3, #4]
 8040b4e:	609a      	str	r2, [r3, #8]
 8040b50:	60da      	str	r2, [r3, #12]
 8040b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8040b54:	f107 0310 	add.w	r3, r7, #16
 8040b58:	22c8      	movs	r2, #200	; 0xc8
 8040b5a:	2100      	movs	r1, #0
 8040b5c:	4618      	mov	r0, r3
 8040b5e:	f004 fdab 	bl	80456b8 <memset>
  if(huart->Instance==USART1)
 8040b62:	687b      	ldr	r3, [r7, #4]
 8040b64:	681b      	ldr	r3, [r3, #0]
 8040b66:	4a27      	ldr	r2, [pc, #156]	; (8040c04 <HAL_UART_MspInit+0xc8>)
 8040b68:	4293      	cmp	r3, r2
 8040b6a:	d146      	bne.n	8040bfa <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8040b6c:	f04f 0201 	mov.w	r2, #1
 8040b70:	f04f 0300 	mov.w	r3, #0
 8040b74:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8040b78:	2300      	movs	r3, #0
 8040b7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8040b7e:	f107 0310 	add.w	r3, r7, #16
 8040b82:	4618      	mov	r0, r3
 8040b84:	f001 fd9e 	bl	80426c4 <HAL_RCCEx_PeriphCLKConfig>
 8040b88:	4603      	mov	r3, r0
 8040b8a:	2b00      	cmp	r3, #0
 8040b8c:	d001      	beq.n	8040b92 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8040b8e:	f7ff ffb5 	bl	8040afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8040b92:	4b1d      	ldr	r3, [pc, #116]	; (8040c08 <HAL_UART_MspInit+0xcc>)
 8040b94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8040b98:	4a1b      	ldr	r2, [pc, #108]	; (8040c08 <HAL_UART_MspInit+0xcc>)
 8040b9a:	f043 0310 	orr.w	r3, r3, #16
 8040b9e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8040ba2:	4b19      	ldr	r3, [pc, #100]	; (8040c08 <HAL_UART_MspInit+0xcc>)
 8040ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8040ba8:	f003 0310 	and.w	r3, r3, #16
 8040bac:	60fb      	str	r3, [r7, #12]
 8040bae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8040bb0:	4b15      	ldr	r3, [pc, #84]	; (8040c08 <HAL_UART_MspInit+0xcc>)
 8040bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040bb6:	4a14      	ldr	r2, [pc, #80]	; (8040c08 <HAL_UART_MspInit+0xcc>)
 8040bb8:	f043 0301 	orr.w	r3, r3, #1
 8040bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8040bc0:	4b11      	ldr	r3, [pc, #68]	; (8040c08 <HAL_UART_MspInit+0xcc>)
 8040bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040bc6:	f003 0301 	and.w	r3, r3, #1
 8040bca:	60bb      	str	r3, [r7, #8]
 8040bcc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8040bce:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8040bd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040bd6:	2302      	movs	r3, #2
 8040bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040bdc:	2300      	movs	r3, #0
 8040bde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040be2:	2300      	movs	r3, #0
 8040be4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8040be8:	2307      	movs	r3, #7
 8040bea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040bee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8040bf2:	4619      	mov	r1, r3
 8040bf4:	4805      	ldr	r0, [pc, #20]	; (8040c0c <HAL_UART_MspInit+0xd0>)
 8040bf6:	f000 faa9 	bl	804114c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8040bfa:	bf00      	nop
 8040bfc:	37f0      	adds	r7, #240	; 0xf0
 8040bfe:	46bd      	mov	sp, r7
 8040c00:	bd80      	pop	{r7, pc}
 8040c02:	bf00      	nop
 8040c04:	40011000 	.word	0x40011000
 8040c08:	58024400 	.word	0x58024400
 8040c0c:	58020000 	.word	0x58020000

08040c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8040c10:	b480      	push	{r7}
 8040c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8040c14:	e7fe      	b.n	8040c14 <NMI_Handler+0x4>

08040c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8040c16:	b480      	push	{r7}
 8040c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8040c1a:	e7fe      	b.n	8040c1a <HardFault_Handler+0x4>

08040c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040c1c:	b480      	push	{r7}
 8040c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040c20:	e7fe      	b.n	8040c20 <MemManage_Handler+0x4>

08040c22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8040c22:	b480      	push	{r7}
 8040c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8040c26:	e7fe      	b.n	8040c26 <BusFault_Handler+0x4>

08040c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040c28:	b480      	push	{r7}
 8040c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040c2c:	e7fe      	b.n	8040c2c <UsageFault_Handler+0x4>

08040c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8040c2e:	b480      	push	{r7}
 8040c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8040c32:	bf00      	nop
 8040c34:	46bd      	mov	sp, r7
 8040c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c3a:	4770      	bx	lr

08040c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8040c3c:	b480      	push	{r7}
 8040c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8040c40:	bf00      	nop
 8040c42:	46bd      	mov	sp, r7
 8040c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c48:	4770      	bx	lr

08040c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040c4a:	b480      	push	{r7}
 8040c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8040c4e:	bf00      	nop
 8040c50:	46bd      	mov	sp, r7
 8040c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c56:	4770      	bx	lr

08040c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040c58:	b580      	push	{r7, lr}
 8040c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8040c5c:	f000 f942 	bl	8040ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8040c60:	bf00      	nop
 8040c62:	bd80      	pop	{r7, pc}

08040c64 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8040c64:	b580      	push	{r7, lr}
 8040c66:	b086      	sub	sp, #24
 8040c68:	af00      	add	r7, sp, #0
 8040c6a:	60f8      	str	r0, [r7, #12]
 8040c6c:	60b9      	str	r1, [r7, #8]
 8040c6e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040c70:	2300      	movs	r3, #0
 8040c72:	617b      	str	r3, [r7, #20]
 8040c74:	e00a      	b.n	8040c8c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8040c76:	f3af 8000 	nop.w
 8040c7a:	4601      	mov	r1, r0
 8040c7c:	68bb      	ldr	r3, [r7, #8]
 8040c7e:	1c5a      	adds	r2, r3, #1
 8040c80:	60ba      	str	r2, [r7, #8]
 8040c82:	b2ca      	uxtb	r2, r1
 8040c84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040c86:	697b      	ldr	r3, [r7, #20]
 8040c88:	3301      	adds	r3, #1
 8040c8a:	617b      	str	r3, [r7, #20]
 8040c8c:	697a      	ldr	r2, [r7, #20]
 8040c8e:	687b      	ldr	r3, [r7, #4]
 8040c90:	429a      	cmp	r2, r3
 8040c92:	dbf0      	blt.n	8040c76 <_read+0x12>
  }

  return len;
 8040c94:	687b      	ldr	r3, [r7, #4]
}
 8040c96:	4618      	mov	r0, r3
 8040c98:	3718      	adds	r7, #24
 8040c9a:	46bd      	mov	sp, r7
 8040c9c:	bd80      	pop	{r7, pc}

08040c9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8040c9e:	b580      	push	{r7, lr}
 8040ca0:	b086      	sub	sp, #24
 8040ca2:	af00      	add	r7, sp, #0
 8040ca4:	60f8      	str	r0, [r7, #12]
 8040ca6:	60b9      	str	r1, [r7, #8]
 8040ca8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040caa:	2300      	movs	r3, #0
 8040cac:	617b      	str	r3, [r7, #20]
 8040cae:	e009      	b.n	8040cc4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8040cb0:	68bb      	ldr	r3, [r7, #8]
 8040cb2:	1c5a      	adds	r2, r3, #1
 8040cb4:	60ba      	str	r2, [r7, #8]
 8040cb6:	781b      	ldrb	r3, [r3, #0]
 8040cb8:	4618      	mov	r0, r3
 8040cba:	f7ff ff0d 	bl	8040ad8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040cbe:	697b      	ldr	r3, [r7, #20]
 8040cc0:	3301      	adds	r3, #1
 8040cc2:	617b      	str	r3, [r7, #20]
 8040cc4:	697a      	ldr	r2, [r7, #20]
 8040cc6:	687b      	ldr	r3, [r7, #4]
 8040cc8:	429a      	cmp	r2, r3
 8040cca:	dbf1      	blt.n	8040cb0 <_write+0x12>
  }
  return len;
 8040ccc:	687b      	ldr	r3, [r7, #4]
}
 8040cce:	4618      	mov	r0, r3
 8040cd0:	3718      	adds	r7, #24
 8040cd2:	46bd      	mov	sp, r7
 8040cd4:	bd80      	pop	{r7, pc}

08040cd6 <_close>:

int _close(int file)
{
 8040cd6:	b480      	push	{r7}
 8040cd8:	b083      	sub	sp, #12
 8040cda:	af00      	add	r7, sp, #0
 8040cdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8040cde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8040ce2:	4618      	mov	r0, r3
 8040ce4:	370c      	adds	r7, #12
 8040ce6:	46bd      	mov	sp, r7
 8040ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040cec:	4770      	bx	lr

08040cee <_fstat>:


int _fstat(int file, struct stat *st)
{
 8040cee:	b480      	push	{r7}
 8040cf0:	b083      	sub	sp, #12
 8040cf2:	af00      	add	r7, sp, #0
 8040cf4:	6078      	str	r0, [r7, #4]
 8040cf6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8040cf8:	683b      	ldr	r3, [r7, #0]
 8040cfa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8040cfe:	605a      	str	r2, [r3, #4]
  return 0;
 8040d00:	2300      	movs	r3, #0
}
 8040d02:	4618      	mov	r0, r3
 8040d04:	370c      	adds	r7, #12
 8040d06:	46bd      	mov	sp, r7
 8040d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d0c:	4770      	bx	lr

08040d0e <_isatty>:

int _isatty(int file)
{
 8040d0e:	b480      	push	{r7}
 8040d10:	b083      	sub	sp, #12
 8040d12:	af00      	add	r7, sp, #0
 8040d14:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8040d16:	2301      	movs	r3, #1
}
 8040d18:	4618      	mov	r0, r3
 8040d1a:	370c      	adds	r7, #12
 8040d1c:	46bd      	mov	sp, r7
 8040d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d22:	4770      	bx	lr

08040d24 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8040d24:	b480      	push	{r7}
 8040d26:	b085      	sub	sp, #20
 8040d28:	af00      	add	r7, sp, #0
 8040d2a:	60f8      	str	r0, [r7, #12]
 8040d2c:	60b9      	str	r1, [r7, #8]
 8040d2e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8040d30:	2300      	movs	r3, #0
}
 8040d32:	4618      	mov	r0, r3
 8040d34:	3714      	adds	r7, #20
 8040d36:	46bd      	mov	sp, r7
 8040d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d3c:	4770      	bx	lr
	...

08040d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8040d40:	b580      	push	{r7, lr}
 8040d42:	b086      	sub	sp, #24
 8040d44:	af00      	add	r7, sp, #0
 8040d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8040d48:	4a14      	ldr	r2, [pc, #80]	; (8040d9c <_sbrk+0x5c>)
 8040d4a:	4b15      	ldr	r3, [pc, #84]	; (8040da0 <_sbrk+0x60>)
 8040d4c:	1ad3      	subs	r3, r2, r3
 8040d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8040d50:	697b      	ldr	r3, [r7, #20]
 8040d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8040d54:	4b13      	ldr	r3, [pc, #76]	; (8040da4 <_sbrk+0x64>)
 8040d56:	681b      	ldr	r3, [r3, #0]
 8040d58:	2b00      	cmp	r3, #0
 8040d5a:	d102      	bne.n	8040d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8040d5c:	4b11      	ldr	r3, [pc, #68]	; (8040da4 <_sbrk+0x64>)
 8040d5e:	4a12      	ldr	r2, [pc, #72]	; (8040da8 <_sbrk+0x68>)
 8040d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8040d62:	4b10      	ldr	r3, [pc, #64]	; (8040da4 <_sbrk+0x64>)
 8040d64:	681a      	ldr	r2, [r3, #0]
 8040d66:	687b      	ldr	r3, [r7, #4]
 8040d68:	4413      	add	r3, r2
 8040d6a:	693a      	ldr	r2, [r7, #16]
 8040d6c:	429a      	cmp	r2, r3
 8040d6e:	d207      	bcs.n	8040d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8040d70:	f004 fc78 	bl	8045664 <__errno>
 8040d74:	4603      	mov	r3, r0
 8040d76:	220c      	movs	r2, #12
 8040d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8040d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8040d7e:	e009      	b.n	8040d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8040d80:	4b08      	ldr	r3, [pc, #32]	; (8040da4 <_sbrk+0x64>)
 8040d82:	681b      	ldr	r3, [r3, #0]
 8040d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8040d86:	4b07      	ldr	r3, [pc, #28]	; (8040da4 <_sbrk+0x64>)
 8040d88:	681a      	ldr	r2, [r3, #0]
 8040d8a:	687b      	ldr	r3, [r7, #4]
 8040d8c:	4413      	add	r3, r2
 8040d8e:	4a05      	ldr	r2, [pc, #20]	; (8040da4 <_sbrk+0x64>)
 8040d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8040d92:	68fb      	ldr	r3, [r7, #12]
}
 8040d94:	4618      	mov	r0, r3
 8040d96:	3718      	adds	r7, #24
 8040d98:	46bd      	mov	sp, r7
 8040d9a:	bd80      	pop	{r7, pc}
 8040d9c:	24080000 	.word	0x24080000
 8040da0:	00000400 	.word	0x00000400
 8040da4:	24000124 	.word	0x24000124
 8040da8:	24000140 	.word	0x24000140

08040dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8040dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8040de4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8040db0:	f7ff fc68 	bl	8040684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8040db4:	480c      	ldr	r0, [pc, #48]	; (8040de8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8040db6:	490d      	ldr	r1, [pc, #52]	; (8040dec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8040db8:	4a0d      	ldr	r2, [pc, #52]	; (8040df0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8040dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8040dbc:	e002      	b.n	8040dc4 <LoopCopyDataInit>

08040dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8040dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8040dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8040dc2:	3304      	adds	r3, #4

08040dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8040dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8040dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8040dc8:	d3f9      	bcc.n	8040dbe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8040dca:	4a0a      	ldr	r2, [pc, #40]	; (8040df4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8040dcc:	4c0a      	ldr	r4, [pc, #40]	; (8040df8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8040dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8040dd0:	e001      	b.n	8040dd6 <LoopFillZerobss>

08040dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8040dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8040dd4:	3204      	adds	r2, #4

08040dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8040dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8040dd8:	d3fb      	bcc.n	8040dd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8040dda:	f004 fc49 	bl	8045670 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8040dde:	f7ff fced 	bl	80407bc <main>
  bx  lr
 8040de2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8040de4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8040de8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8040dec:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8040df0:	08046804 	.word	0x08046804
  ldr r2, =_sbss
 8040df4:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8040df8:	2400013c 	.word	0x2400013c

08040dfc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8040dfc:	e7fe      	b.n	8040dfc <ADC3_IRQHandler>
	...

08040e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040e00:	b580      	push	{r7, lr}
 8040e02:	b082      	sub	sp, #8
 8040e04:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8040e06:	2003      	movs	r0, #3
 8040e08:	f000 f96e 	bl	80410e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8040e0c:	f001 fa84 	bl	8042318 <HAL_RCC_GetSysClockFreq>
 8040e10:	4602      	mov	r2, r0
 8040e12:	4b15      	ldr	r3, [pc, #84]	; (8040e68 <HAL_Init+0x68>)
 8040e14:	699b      	ldr	r3, [r3, #24]
 8040e16:	0a1b      	lsrs	r3, r3, #8
 8040e18:	f003 030f 	and.w	r3, r3, #15
 8040e1c:	4913      	ldr	r1, [pc, #76]	; (8040e6c <HAL_Init+0x6c>)
 8040e1e:	5ccb      	ldrb	r3, [r1, r3]
 8040e20:	f003 031f 	and.w	r3, r3, #31
 8040e24:	fa22 f303 	lsr.w	r3, r2, r3
 8040e28:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8040e2a:	4b0f      	ldr	r3, [pc, #60]	; (8040e68 <HAL_Init+0x68>)
 8040e2c:	699b      	ldr	r3, [r3, #24]
 8040e2e:	f003 030f 	and.w	r3, r3, #15
 8040e32:	4a0e      	ldr	r2, [pc, #56]	; (8040e6c <HAL_Init+0x6c>)
 8040e34:	5cd3      	ldrb	r3, [r2, r3]
 8040e36:	f003 031f 	and.w	r3, r3, #31
 8040e3a:	687a      	ldr	r2, [r7, #4]
 8040e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8040e40:	4a0b      	ldr	r2, [pc, #44]	; (8040e70 <HAL_Init+0x70>)
 8040e42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8040e44:	4a0b      	ldr	r2, [pc, #44]	; (8040e74 <HAL_Init+0x74>)
 8040e46:	687b      	ldr	r3, [r7, #4]
 8040e48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8040e4a:	2000      	movs	r0, #0
 8040e4c:	f000 f814 	bl	8040e78 <HAL_InitTick>
 8040e50:	4603      	mov	r3, r0
 8040e52:	2b00      	cmp	r3, #0
 8040e54:	d001      	beq.n	8040e5a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8040e56:	2301      	movs	r3, #1
 8040e58:	e002      	b.n	8040e60 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8040e5a:	f7ff fe55 	bl	8040b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8040e5e:	2300      	movs	r3, #0
}
 8040e60:	4618      	mov	r0, r3
 8040e62:	3708      	adds	r7, #8
 8040e64:	46bd      	mov	sp, r7
 8040e66:	bd80      	pop	{r7, pc}
 8040e68:	58024400 	.word	0x58024400
 8040e6c:	08046724 	.word	0x08046724
 8040e70:	24000004 	.word	0x24000004
 8040e74:	24000000 	.word	0x24000000

08040e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040e78:	b580      	push	{r7, lr}
 8040e7a:	b082      	sub	sp, #8
 8040e7c:	af00      	add	r7, sp, #0
 8040e7e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8040e80:	4b15      	ldr	r3, [pc, #84]	; (8040ed8 <HAL_InitTick+0x60>)
 8040e82:	781b      	ldrb	r3, [r3, #0]
 8040e84:	2b00      	cmp	r3, #0
 8040e86:	d101      	bne.n	8040e8c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8040e88:	2301      	movs	r3, #1
 8040e8a:	e021      	b.n	8040ed0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8040e8c:	4b13      	ldr	r3, [pc, #76]	; (8040edc <HAL_InitTick+0x64>)
 8040e8e:	681a      	ldr	r2, [r3, #0]
 8040e90:	4b11      	ldr	r3, [pc, #68]	; (8040ed8 <HAL_InitTick+0x60>)
 8040e92:	781b      	ldrb	r3, [r3, #0]
 8040e94:	4619      	mov	r1, r3
 8040e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8040e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8040e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8040ea2:	4618      	mov	r0, r3
 8040ea4:	f000 f945 	bl	8041132 <HAL_SYSTICK_Config>
 8040ea8:	4603      	mov	r3, r0
 8040eaa:	2b00      	cmp	r3, #0
 8040eac:	d001      	beq.n	8040eb2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8040eae:	2301      	movs	r3, #1
 8040eb0:	e00e      	b.n	8040ed0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040eb2:	687b      	ldr	r3, [r7, #4]
 8040eb4:	2b0f      	cmp	r3, #15
 8040eb6:	d80a      	bhi.n	8040ece <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8040eb8:	2200      	movs	r2, #0
 8040eba:	6879      	ldr	r1, [r7, #4]
 8040ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8040ec0:	f000 f91d 	bl	80410fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8040ec4:	4a06      	ldr	r2, [pc, #24]	; (8040ee0 <HAL_InitTick+0x68>)
 8040ec6:	687b      	ldr	r3, [r7, #4]
 8040ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8040eca:	2300      	movs	r3, #0
 8040ecc:	e000      	b.n	8040ed0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8040ece:	2301      	movs	r3, #1
}
 8040ed0:	4618      	mov	r0, r3
 8040ed2:	3708      	adds	r7, #8
 8040ed4:	46bd      	mov	sp, r7
 8040ed6:	bd80      	pop	{r7, pc}
 8040ed8:	2400000c 	.word	0x2400000c
 8040edc:	24000000 	.word	0x24000000
 8040ee0:	24000008 	.word	0x24000008

08040ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040ee4:	b480      	push	{r7}
 8040ee6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8040ee8:	4b06      	ldr	r3, [pc, #24]	; (8040f04 <HAL_IncTick+0x20>)
 8040eea:	781b      	ldrb	r3, [r3, #0]
 8040eec:	461a      	mov	r2, r3
 8040eee:	4b06      	ldr	r3, [pc, #24]	; (8040f08 <HAL_IncTick+0x24>)
 8040ef0:	681b      	ldr	r3, [r3, #0]
 8040ef2:	4413      	add	r3, r2
 8040ef4:	4a04      	ldr	r2, [pc, #16]	; (8040f08 <HAL_IncTick+0x24>)
 8040ef6:	6013      	str	r3, [r2, #0]
}
 8040ef8:	bf00      	nop
 8040efa:	46bd      	mov	sp, r7
 8040efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f00:	4770      	bx	lr
 8040f02:	bf00      	nop
 8040f04:	2400000c 	.word	0x2400000c
 8040f08:	24000128 	.word	0x24000128

08040f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040f0c:	b480      	push	{r7}
 8040f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8040f10:	4b03      	ldr	r3, [pc, #12]	; (8040f20 <HAL_GetTick+0x14>)
 8040f12:	681b      	ldr	r3, [r3, #0]
}
 8040f14:	4618      	mov	r0, r3
 8040f16:	46bd      	mov	sp, r7
 8040f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f1c:	4770      	bx	lr
 8040f1e:	bf00      	nop
 8040f20:	24000128 	.word	0x24000128

08040f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8040f24:	b580      	push	{r7, lr}
 8040f26:	b084      	sub	sp, #16
 8040f28:	af00      	add	r7, sp, #0
 8040f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8040f2c:	f7ff ffee 	bl	8040f0c <HAL_GetTick>
 8040f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8040f32:	687b      	ldr	r3, [r7, #4]
 8040f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8040f36:	68fb      	ldr	r3, [r7, #12]
 8040f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8040f3c:	d005      	beq.n	8040f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8040f3e:	4b0a      	ldr	r3, [pc, #40]	; (8040f68 <HAL_Delay+0x44>)
 8040f40:	781b      	ldrb	r3, [r3, #0]
 8040f42:	461a      	mov	r2, r3
 8040f44:	68fb      	ldr	r3, [r7, #12]
 8040f46:	4413      	add	r3, r2
 8040f48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8040f4a:	bf00      	nop
 8040f4c:	f7ff ffde 	bl	8040f0c <HAL_GetTick>
 8040f50:	4602      	mov	r2, r0
 8040f52:	68bb      	ldr	r3, [r7, #8]
 8040f54:	1ad3      	subs	r3, r2, r3
 8040f56:	68fa      	ldr	r2, [r7, #12]
 8040f58:	429a      	cmp	r2, r3
 8040f5a:	d8f7      	bhi.n	8040f4c <HAL_Delay+0x28>
  {
  }
}
 8040f5c:	bf00      	nop
 8040f5e:	bf00      	nop
 8040f60:	3710      	adds	r7, #16
 8040f62:	46bd      	mov	sp, r7
 8040f64:	bd80      	pop	{r7, pc}
 8040f66:	bf00      	nop
 8040f68:	2400000c 	.word	0x2400000c

08040f6c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8040f6c:	b480      	push	{r7}
 8040f6e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8040f70:	4b03      	ldr	r3, [pc, #12]	; (8040f80 <HAL_GetREVID+0x14>)
 8040f72:	681b      	ldr	r3, [r3, #0]
 8040f74:	0c1b      	lsrs	r3, r3, #16
}
 8040f76:	4618      	mov	r0, r3
 8040f78:	46bd      	mov	sp, r7
 8040f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f7e:	4770      	bx	lr
 8040f80:	5c001000 	.word	0x5c001000

08040f84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040f84:	b480      	push	{r7}
 8040f86:	b085      	sub	sp, #20
 8040f88:	af00      	add	r7, sp, #0
 8040f8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040f8c:	687b      	ldr	r3, [r7, #4]
 8040f8e:	f003 0307 	and.w	r3, r3, #7
 8040f92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040f94:	4b0b      	ldr	r3, [pc, #44]	; (8040fc4 <__NVIC_SetPriorityGrouping+0x40>)
 8040f96:	68db      	ldr	r3, [r3, #12]
 8040f98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040f9a:	68ba      	ldr	r2, [r7, #8]
 8040f9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8040fa0:	4013      	ands	r3, r2
 8040fa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040fa4:	68fb      	ldr	r3, [r7, #12]
 8040fa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040fa8:	68bb      	ldr	r3, [r7, #8]
 8040faa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8040fac:	4b06      	ldr	r3, [pc, #24]	; (8040fc8 <__NVIC_SetPriorityGrouping+0x44>)
 8040fae:	4313      	orrs	r3, r2
 8040fb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040fb2:	4a04      	ldr	r2, [pc, #16]	; (8040fc4 <__NVIC_SetPriorityGrouping+0x40>)
 8040fb4:	68bb      	ldr	r3, [r7, #8]
 8040fb6:	60d3      	str	r3, [r2, #12]
}
 8040fb8:	bf00      	nop
 8040fba:	3714      	adds	r7, #20
 8040fbc:	46bd      	mov	sp, r7
 8040fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040fc2:	4770      	bx	lr
 8040fc4:	e000ed00 	.word	0xe000ed00
 8040fc8:	05fa0000 	.word	0x05fa0000

08040fcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040fcc:	b480      	push	{r7}
 8040fce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040fd0:	4b04      	ldr	r3, [pc, #16]	; (8040fe4 <__NVIC_GetPriorityGrouping+0x18>)
 8040fd2:	68db      	ldr	r3, [r3, #12]
 8040fd4:	0a1b      	lsrs	r3, r3, #8
 8040fd6:	f003 0307 	and.w	r3, r3, #7
}
 8040fda:	4618      	mov	r0, r3
 8040fdc:	46bd      	mov	sp, r7
 8040fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040fe2:	4770      	bx	lr
 8040fe4:	e000ed00 	.word	0xe000ed00

08040fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040fe8:	b480      	push	{r7}
 8040fea:	b083      	sub	sp, #12
 8040fec:	af00      	add	r7, sp, #0
 8040fee:	4603      	mov	r3, r0
 8040ff0:	6039      	str	r1, [r7, #0]
 8040ff2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8040ff4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8040ff8:	2b00      	cmp	r3, #0
 8040ffa:	db0a      	blt.n	8041012 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040ffc:	683b      	ldr	r3, [r7, #0]
 8040ffe:	b2da      	uxtb	r2, r3
 8041000:	490c      	ldr	r1, [pc, #48]	; (8041034 <__NVIC_SetPriority+0x4c>)
 8041002:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8041006:	0112      	lsls	r2, r2, #4
 8041008:	b2d2      	uxtb	r2, r2
 804100a:	440b      	add	r3, r1
 804100c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8041010:	e00a      	b.n	8041028 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8041012:	683b      	ldr	r3, [r7, #0]
 8041014:	b2da      	uxtb	r2, r3
 8041016:	4908      	ldr	r1, [pc, #32]	; (8041038 <__NVIC_SetPriority+0x50>)
 8041018:	88fb      	ldrh	r3, [r7, #6]
 804101a:	f003 030f 	and.w	r3, r3, #15
 804101e:	3b04      	subs	r3, #4
 8041020:	0112      	lsls	r2, r2, #4
 8041022:	b2d2      	uxtb	r2, r2
 8041024:	440b      	add	r3, r1
 8041026:	761a      	strb	r2, [r3, #24]
}
 8041028:	bf00      	nop
 804102a:	370c      	adds	r7, #12
 804102c:	46bd      	mov	sp, r7
 804102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041032:	4770      	bx	lr
 8041034:	e000e100 	.word	0xe000e100
 8041038:	e000ed00 	.word	0xe000ed00

0804103c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 804103c:	b480      	push	{r7}
 804103e:	b089      	sub	sp, #36	; 0x24
 8041040:	af00      	add	r7, sp, #0
 8041042:	60f8      	str	r0, [r7, #12]
 8041044:	60b9      	str	r1, [r7, #8]
 8041046:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8041048:	68fb      	ldr	r3, [r7, #12]
 804104a:	f003 0307 	and.w	r3, r3, #7
 804104e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8041050:	69fb      	ldr	r3, [r7, #28]
 8041052:	f1c3 0307 	rsb	r3, r3, #7
 8041056:	2b04      	cmp	r3, #4
 8041058:	bf28      	it	cs
 804105a:	2304      	movcs	r3, #4
 804105c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 804105e:	69fb      	ldr	r3, [r7, #28]
 8041060:	3304      	adds	r3, #4
 8041062:	2b06      	cmp	r3, #6
 8041064:	d902      	bls.n	804106c <NVIC_EncodePriority+0x30>
 8041066:	69fb      	ldr	r3, [r7, #28]
 8041068:	3b03      	subs	r3, #3
 804106a:	e000      	b.n	804106e <NVIC_EncodePriority+0x32>
 804106c:	2300      	movs	r3, #0
 804106e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8041070:	f04f 32ff 	mov.w	r2, #4294967295
 8041074:	69bb      	ldr	r3, [r7, #24]
 8041076:	fa02 f303 	lsl.w	r3, r2, r3
 804107a:	43da      	mvns	r2, r3
 804107c:	68bb      	ldr	r3, [r7, #8]
 804107e:	401a      	ands	r2, r3
 8041080:	697b      	ldr	r3, [r7, #20]
 8041082:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8041084:	f04f 31ff 	mov.w	r1, #4294967295
 8041088:	697b      	ldr	r3, [r7, #20]
 804108a:	fa01 f303 	lsl.w	r3, r1, r3
 804108e:	43d9      	mvns	r1, r3
 8041090:	687b      	ldr	r3, [r7, #4]
 8041092:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8041094:	4313      	orrs	r3, r2
         );
}
 8041096:	4618      	mov	r0, r3
 8041098:	3724      	adds	r7, #36	; 0x24
 804109a:	46bd      	mov	sp, r7
 804109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80410a0:	4770      	bx	lr
	...

080410a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80410a4:	b580      	push	{r7, lr}
 80410a6:	b082      	sub	sp, #8
 80410a8:	af00      	add	r7, sp, #0
 80410aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80410ac:	687b      	ldr	r3, [r7, #4]
 80410ae:	3b01      	subs	r3, #1
 80410b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80410b4:	d301      	bcc.n	80410ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80410b6:	2301      	movs	r3, #1
 80410b8:	e00f      	b.n	80410da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80410ba:	4a0a      	ldr	r2, [pc, #40]	; (80410e4 <SysTick_Config+0x40>)
 80410bc:	687b      	ldr	r3, [r7, #4]
 80410be:	3b01      	subs	r3, #1
 80410c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80410c2:	210f      	movs	r1, #15
 80410c4:	f04f 30ff 	mov.w	r0, #4294967295
 80410c8:	f7ff ff8e 	bl	8040fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80410cc:	4b05      	ldr	r3, [pc, #20]	; (80410e4 <SysTick_Config+0x40>)
 80410ce:	2200      	movs	r2, #0
 80410d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80410d2:	4b04      	ldr	r3, [pc, #16]	; (80410e4 <SysTick_Config+0x40>)
 80410d4:	2207      	movs	r2, #7
 80410d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80410d8:	2300      	movs	r3, #0
}
 80410da:	4618      	mov	r0, r3
 80410dc:	3708      	adds	r7, #8
 80410de:	46bd      	mov	sp, r7
 80410e0:	bd80      	pop	{r7, pc}
 80410e2:	bf00      	nop
 80410e4:	e000e010 	.word	0xe000e010

080410e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80410e8:	b580      	push	{r7, lr}
 80410ea:	b082      	sub	sp, #8
 80410ec:	af00      	add	r7, sp, #0
 80410ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80410f0:	6878      	ldr	r0, [r7, #4]
 80410f2:	f7ff ff47 	bl	8040f84 <__NVIC_SetPriorityGrouping>
}
 80410f6:	bf00      	nop
 80410f8:	3708      	adds	r7, #8
 80410fa:	46bd      	mov	sp, r7
 80410fc:	bd80      	pop	{r7, pc}

080410fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80410fe:	b580      	push	{r7, lr}
 8041100:	b086      	sub	sp, #24
 8041102:	af00      	add	r7, sp, #0
 8041104:	4603      	mov	r3, r0
 8041106:	60b9      	str	r1, [r7, #8]
 8041108:	607a      	str	r2, [r7, #4]
 804110a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 804110c:	f7ff ff5e 	bl	8040fcc <__NVIC_GetPriorityGrouping>
 8041110:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8041112:	687a      	ldr	r2, [r7, #4]
 8041114:	68b9      	ldr	r1, [r7, #8]
 8041116:	6978      	ldr	r0, [r7, #20]
 8041118:	f7ff ff90 	bl	804103c <NVIC_EncodePriority>
 804111c:	4602      	mov	r2, r0
 804111e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8041122:	4611      	mov	r1, r2
 8041124:	4618      	mov	r0, r3
 8041126:	f7ff ff5f 	bl	8040fe8 <__NVIC_SetPriority>
}
 804112a:	bf00      	nop
 804112c:	3718      	adds	r7, #24
 804112e:	46bd      	mov	sp, r7
 8041130:	bd80      	pop	{r7, pc}

08041132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8041132:	b580      	push	{r7, lr}
 8041134:	b082      	sub	sp, #8
 8041136:	af00      	add	r7, sp, #0
 8041138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 804113a:	6878      	ldr	r0, [r7, #4]
 804113c:	f7ff ffb2 	bl	80410a4 <SysTick_Config>
 8041140:	4603      	mov	r3, r0
}
 8041142:	4618      	mov	r0, r3
 8041144:	3708      	adds	r7, #8
 8041146:	46bd      	mov	sp, r7
 8041148:	bd80      	pop	{r7, pc}
	...

0804114c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 804114c:	b480      	push	{r7}
 804114e:	b089      	sub	sp, #36	; 0x24
 8041150:	af00      	add	r7, sp, #0
 8041152:	6078      	str	r0, [r7, #4]
 8041154:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8041156:	2300      	movs	r3, #0
 8041158:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 804115a:	4b89      	ldr	r3, [pc, #548]	; (8041380 <HAL_GPIO_Init+0x234>)
 804115c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 804115e:	e194      	b.n	804148a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8041160:	683b      	ldr	r3, [r7, #0]
 8041162:	681a      	ldr	r2, [r3, #0]
 8041164:	2101      	movs	r1, #1
 8041166:	69fb      	ldr	r3, [r7, #28]
 8041168:	fa01 f303 	lsl.w	r3, r1, r3
 804116c:	4013      	ands	r3, r2
 804116e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8041170:	693b      	ldr	r3, [r7, #16]
 8041172:	2b00      	cmp	r3, #0
 8041174:	f000 8186 	beq.w	8041484 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8041178:	683b      	ldr	r3, [r7, #0]
 804117a:	685b      	ldr	r3, [r3, #4]
 804117c:	f003 0303 	and.w	r3, r3, #3
 8041180:	2b01      	cmp	r3, #1
 8041182:	d005      	beq.n	8041190 <HAL_GPIO_Init+0x44>
 8041184:	683b      	ldr	r3, [r7, #0]
 8041186:	685b      	ldr	r3, [r3, #4]
 8041188:	f003 0303 	and.w	r3, r3, #3
 804118c:	2b02      	cmp	r3, #2
 804118e:	d130      	bne.n	80411f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8041190:	687b      	ldr	r3, [r7, #4]
 8041192:	689b      	ldr	r3, [r3, #8]
 8041194:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8041196:	69fb      	ldr	r3, [r7, #28]
 8041198:	005b      	lsls	r3, r3, #1
 804119a:	2203      	movs	r2, #3
 804119c:	fa02 f303 	lsl.w	r3, r2, r3
 80411a0:	43db      	mvns	r3, r3
 80411a2:	69ba      	ldr	r2, [r7, #24]
 80411a4:	4013      	ands	r3, r2
 80411a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80411a8:	683b      	ldr	r3, [r7, #0]
 80411aa:	68da      	ldr	r2, [r3, #12]
 80411ac:	69fb      	ldr	r3, [r7, #28]
 80411ae:	005b      	lsls	r3, r3, #1
 80411b0:	fa02 f303 	lsl.w	r3, r2, r3
 80411b4:	69ba      	ldr	r2, [r7, #24]
 80411b6:	4313      	orrs	r3, r2
 80411b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80411ba:	687b      	ldr	r3, [r7, #4]
 80411bc:	69ba      	ldr	r2, [r7, #24]
 80411be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80411c0:	687b      	ldr	r3, [r7, #4]
 80411c2:	685b      	ldr	r3, [r3, #4]
 80411c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80411c6:	2201      	movs	r2, #1
 80411c8:	69fb      	ldr	r3, [r7, #28]
 80411ca:	fa02 f303 	lsl.w	r3, r2, r3
 80411ce:	43db      	mvns	r3, r3
 80411d0:	69ba      	ldr	r2, [r7, #24]
 80411d2:	4013      	ands	r3, r2
 80411d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80411d6:	683b      	ldr	r3, [r7, #0]
 80411d8:	685b      	ldr	r3, [r3, #4]
 80411da:	091b      	lsrs	r3, r3, #4
 80411dc:	f003 0201 	and.w	r2, r3, #1
 80411e0:	69fb      	ldr	r3, [r7, #28]
 80411e2:	fa02 f303 	lsl.w	r3, r2, r3
 80411e6:	69ba      	ldr	r2, [r7, #24]
 80411e8:	4313      	orrs	r3, r2
 80411ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80411ec:	687b      	ldr	r3, [r7, #4]
 80411ee:	69ba      	ldr	r2, [r7, #24]
 80411f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80411f2:	683b      	ldr	r3, [r7, #0]
 80411f4:	685b      	ldr	r3, [r3, #4]
 80411f6:	f003 0303 	and.w	r3, r3, #3
 80411fa:	2b03      	cmp	r3, #3
 80411fc:	d017      	beq.n	804122e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80411fe:	687b      	ldr	r3, [r7, #4]
 8041200:	68db      	ldr	r3, [r3, #12]
 8041202:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8041204:	69fb      	ldr	r3, [r7, #28]
 8041206:	005b      	lsls	r3, r3, #1
 8041208:	2203      	movs	r2, #3
 804120a:	fa02 f303 	lsl.w	r3, r2, r3
 804120e:	43db      	mvns	r3, r3
 8041210:	69ba      	ldr	r2, [r7, #24]
 8041212:	4013      	ands	r3, r2
 8041214:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8041216:	683b      	ldr	r3, [r7, #0]
 8041218:	689a      	ldr	r2, [r3, #8]
 804121a:	69fb      	ldr	r3, [r7, #28]
 804121c:	005b      	lsls	r3, r3, #1
 804121e:	fa02 f303 	lsl.w	r3, r2, r3
 8041222:	69ba      	ldr	r2, [r7, #24]
 8041224:	4313      	orrs	r3, r2
 8041226:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8041228:	687b      	ldr	r3, [r7, #4]
 804122a:	69ba      	ldr	r2, [r7, #24]
 804122c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 804122e:	683b      	ldr	r3, [r7, #0]
 8041230:	685b      	ldr	r3, [r3, #4]
 8041232:	f003 0303 	and.w	r3, r3, #3
 8041236:	2b02      	cmp	r3, #2
 8041238:	d123      	bne.n	8041282 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 804123a:	69fb      	ldr	r3, [r7, #28]
 804123c:	08da      	lsrs	r2, r3, #3
 804123e:	687b      	ldr	r3, [r7, #4]
 8041240:	3208      	adds	r2, #8
 8041242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8041246:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8041248:	69fb      	ldr	r3, [r7, #28]
 804124a:	f003 0307 	and.w	r3, r3, #7
 804124e:	009b      	lsls	r3, r3, #2
 8041250:	220f      	movs	r2, #15
 8041252:	fa02 f303 	lsl.w	r3, r2, r3
 8041256:	43db      	mvns	r3, r3
 8041258:	69ba      	ldr	r2, [r7, #24]
 804125a:	4013      	ands	r3, r2
 804125c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 804125e:	683b      	ldr	r3, [r7, #0]
 8041260:	691a      	ldr	r2, [r3, #16]
 8041262:	69fb      	ldr	r3, [r7, #28]
 8041264:	f003 0307 	and.w	r3, r3, #7
 8041268:	009b      	lsls	r3, r3, #2
 804126a:	fa02 f303 	lsl.w	r3, r2, r3
 804126e:	69ba      	ldr	r2, [r7, #24]
 8041270:	4313      	orrs	r3, r2
 8041272:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8041274:	69fb      	ldr	r3, [r7, #28]
 8041276:	08da      	lsrs	r2, r3, #3
 8041278:	687b      	ldr	r3, [r7, #4]
 804127a:	3208      	adds	r2, #8
 804127c:	69b9      	ldr	r1, [r7, #24]
 804127e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8041282:	687b      	ldr	r3, [r7, #4]
 8041284:	681b      	ldr	r3, [r3, #0]
 8041286:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8041288:	69fb      	ldr	r3, [r7, #28]
 804128a:	005b      	lsls	r3, r3, #1
 804128c:	2203      	movs	r2, #3
 804128e:	fa02 f303 	lsl.w	r3, r2, r3
 8041292:	43db      	mvns	r3, r3
 8041294:	69ba      	ldr	r2, [r7, #24]
 8041296:	4013      	ands	r3, r2
 8041298:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 804129a:	683b      	ldr	r3, [r7, #0]
 804129c:	685b      	ldr	r3, [r3, #4]
 804129e:	f003 0203 	and.w	r2, r3, #3
 80412a2:	69fb      	ldr	r3, [r7, #28]
 80412a4:	005b      	lsls	r3, r3, #1
 80412a6:	fa02 f303 	lsl.w	r3, r2, r3
 80412aa:	69ba      	ldr	r2, [r7, #24]
 80412ac:	4313      	orrs	r3, r2
 80412ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80412b0:	687b      	ldr	r3, [r7, #4]
 80412b2:	69ba      	ldr	r2, [r7, #24]
 80412b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80412b6:	683b      	ldr	r3, [r7, #0]
 80412b8:	685b      	ldr	r3, [r3, #4]
 80412ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80412be:	2b00      	cmp	r3, #0
 80412c0:	f000 80e0 	beq.w	8041484 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80412c4:	4b2f      	ldr	r3, [pc, #188]	; (8041384 <HAL_GPIO_Init+0x238>)
 80412c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80412ca:	4a2e      	ldr	r2, [pc, #184]	; (8041384 <HAL_GPIO_Init+0x238>)
 80412cc:	f043 0302 	orr.w	r3, r3, #2
 80412d0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80412d4:	4b2b      	ldr	r3, [pc, #172]	; (8041384 <HAL_GPIO_Init+0x238>)
 80412d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80412da:	f003 0302 	and.w	r3, r3, #2
 80412de:	60fb      	str	r3, [r7, #12]
 80412e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80412e2:	4a29      	ldr	r2, [pc, #164]	; (8041388 <HAL_GPIO_Init+0x23c>)
 80412e4:	69fb      	ldr	r3, [r7, #28]
 80412e6:	089b      	lsrs	r3, r3, #2
 80412e8:	3302      	adds	r3, #2
 80412ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80412ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80412f0:	69fb      	ldr	r3, [r7, #28]
 80412f2:	f003 0303 	and.w	r3, r3, #3
 80412f6:	009b      	lsls	r3, r3, #2
 80412f8:	220f      	movs	r2, #15
 80412fa:	fa02 f303 	lsl.w	r3, r2, r3
 80412fe:	43db      	mvns	r3, r3
 8041300:	69ba      	ldr	r2, [r7, #24]
 8041302:	4013      	ands	r3, r2
 8041304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8041306:	687b      	ldr	r3, [r7, #4]
 8041308:	4a20      	ldr	r2, [pc, #128]	; (804138c <HAL_GPIO_Init+0x240>)
 804130a:	4293      	cmp	r3, r2
 804130c:	d052      	beq.n	80413b4 <HAL_GPIO_Init+0x268>
 804130e:	687b      	ldr	r3, [r7, #4]
 8041310:	4a1f      	ldr	r2, [pc, #124]	; (8041390 <HAL_GPIO_Init+0x244>)
 8041312:	4293      	cmp	r3, r2
 8041314:	d031      	beq.n	804137a <HAL_GPIO_Init+0x22e>
 8041316:	687b      	ldr	r3, [r7, #4]
 8041318:	4a1e      	ldr	r2, [pc, #120]	; (8041394 <HAL_GPIO_Init+0x248>)
 804131a:	4293      	cmp	r3, r2
 804131c:	d02b      	beq.n	8041376 <HAL_GPIO_Init+0x22a>
 804131e:	687b      	ldr	r3, [r7, #4]
 8041320:	4a1d      	ldr	r2, [pc, #116]	; (8041398 <HAL_GPIO_Init+0x24c>)
 8041322:	4293      	cmp	r3, r2
 8041324:	d025      	beq.n	8041372 <HAL_GPIO_Init+0x226>
 8041326:	687b      	ldr	r3, [r7, #4]
 8041328:	4a1c      	ldr	r2, [pc, #112]	; (804139c <HAL_GPIO_Init+0x250>)
 804132a:	4293      	cmp	r3, r2
 804132c:	d01f      	beq.n	804136e <HAL_GPIO_Init+0x222>
 804132e:	687b      	ldr	r3, [r7, #4]
 8041330:	4a1b      	ldr	r2, [pc, #108]	; (80413a0 <HAL_GPIO_Init+0x254>)
 8041332:	4293      	cmp	r3, r2
 8041334:	d019      	beq.n	804136a <HAL_GPIO_Init+0x21e>
 8041336:	687b      	ldr	r3, [r7, #4]
 8041338:	4a1a      	ldr	r2, [pc, #104]	; (80413a4 <HAL_GPIO_Init+0x258>)
 804133a:	4293      	cmp	r3, r2
 804133c:	d013      	beq.n	8041366 <HAL_GPIO_Init+0x21a>
 804133e:	687b      	ldr	r3, [r7, #4]
 8041340:	4a19      	ldr	r2, [pc, #100]	; (80413a8 <HAL_GPIO_Init+0x25c>)
 8041342:	4293      	cmp	r3, r2
 8041344:	d00d      	beq.n	8041362 <HAL_GPIO_Init+0x216>
 8041346:	687b      	ldr	r3, [r7, #4]
 8041348:	4a18      	ldr	r2, [pc, #96]	; (80413ac <HAL_GPIO_Init+0x260>)
 804134a:	4293      	cmp	r3, r2
 804134c:	d007      	beq.n	804135e <HAL_GPIO_Init+0x212>
 804134e:	687b      	ldr	r3, [r7, #4]
 8041350:	4a17      	ldr	r2, [pc, #92]	; (80413b0 <HAL_GPIO_Init+0x264>)
 8041352:	4293      	cmp	r3, r2
 8041354:	d101      	bne.n	804135a <HAL_GPIO_Init+0x20e>
 8041356:	2309      	movs	r3, #9
 8041358:	e02d      	b.n	80413b6 <HAL_GPIO_Init+0x26a>
 804135a:	230a      	movs	r3, #10
 804135c:	e02b      	b.n	80413b6 <HAL_GPIO_Init+0x26a>
 804135e:	2308      	movs	r3, #8
 8041360:	e029      	b.n	80413b6 <HAL_GPIO_Init+0x26a>
 8041362:	2307      	movs	r3, #7
 8041364:	e027      	b.n	80413b6 <HAL_GPIO_Init+0x26a>
 8041366:	2306      	movs	r3, #6
 8041368:	e025      	b.n	80413b6 <HAL_GPIO_Init+0x26a>
 804136a:	2305      	movs	r3, #5
 804136c:	e023      	b.n	80413b6 <HAL_GPIO_Init+0x26a>
 804136e:	2304      	movs	r3, #4
 8041370:	e021      	b.n	80413b6 <HAL_GPIO_Init+0x26a>
 8041372:	2303      	movs	r3, #3
 8041374:	e01f      	b.n	80413b6 <HAL_GPIO_Init+0x26a>
 8041376:	2302      	movs	r3, #2
 8041378:	e01d      	b.n	80413b6 <HAL_GPIO_Init+0x26a>
 804137a:	2301      	movs	r3, #1
 804137c:	e01b      	b.n	80413b6 <HAL_GPIO_Init+0x26a>
 804137e:	bf00      	nop
 8041380:	58000080 	.word	0x58000080
 8041384:	58024400 	.word	0x58024400
 8041388:	58000400 	.word	0x58000400
 804138c:	58020000 	.word	0x58020000
 8041390:	58020400 	.word	0x58020400
 8041394:	58020800 	.word	0x58020800
 8041398:	58020c00 	.word	0x58020c00
 804139c:	58021000 	.word	0x58021000
 80413a0:	58021400 	.word	0x58021400
 80413a4:	58021800 	.word	0x58021800
 80413a8:	58021c00 	.word	0x58021c00
 80413ac:	58022000 	.word	0x58022000
 80413b0:	58022400 	.word	0x58022400
 80413b4:	2300      	movs	r3, #0
 80413b6:	69fa      	ldr	r2, [r7, #28]
 80413b8:	f002 0203 	and.w	r2, r2, #3
 80413bc:	0092      	lsls	r2, r2, #2
 80413be:	4093      	lsls	r3, r2
 80413c0:	69ba      	ldr	r2, [r7, #24]
 80413c2:	4313      	orrs	r3, r2
 80413c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80413c6:	4938      	ldr	r1, [pc, #224]	; (80414a8 <HAL_GPIO_Init+0x35c>)
 80413c8:	69fb      	ldr	r3, [r7, #28]
 80413ca:	089b      	lsrs	r3, r3, #2
 80413cc:	3302      	adds	r3, #2
 80413ce:	69ba      	ldr	r2, [r7, #24]
 80413d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80413d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80413d8:	681b      	ldr	r3, [r3, #0]
 80413da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80413dc:	693b      	ldr	r3, [r7, #16]
 80413de:	43db      	mvns	r3, r3
 80413e0:	69ba      	ldr	r2, [r7, #24]
 80413e2:	4013      	ands	r3, r2
 80413e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80413e6:	683b      	ldr	r3, [r7, #0]
 80413e8:	685b      	ldr	r3, [r3, #4]
 80413ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80413ee:	2b00      	cmp	r3, #0
 80413f0:	d003      	beq.n	80413fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80413f2:	69ba      	ldr	r2, [r7, #24]
 80413f4:	693b      	ldr	r3, [r7, #16]
 80413f6:	4313      	orrs	r3, r2
 80413f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80413fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80413fe:	69bb      	ldr	r3, [r7, #24]
 8041400:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8041402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8041406:	685b      	ldr	r3, [r3, #4]
 8041408:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 804140a:	693b      	ldr	r3, [r7, #16]
 804140c:	43db      	mvns	r3, r3
 804140e:	69ba      	ldr	r2, [r7, #24]
 8041410:	4013      	ands	r3, r2
 8041412:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8041414:	683b      	ldr	r3, [r7, #0]
 8041416:	685b      	ldr	r3, [r3, #4]
 8041418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 804141c:	2b00      	cmp	r3, #0
 804141e:	d003      	beq.n	8041428 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8041420:	69ba      	ldr	r2, [r7, #24]
 8041422:	693b      	ldr	r3, [r7, #16]
 8041424:	4313      	orrs	r3, r2
 8041426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8041428:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 804142c:	69bb      	ldr	r3, [r7, #24]
 804142e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8041430:	697b      	ldr	r3, [r7, #20]
 8041432:	685b      	ldr	r3, [r3, #4]
 8041434:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8041436:	693b      	ldr	r3, [r7, #16]
 8041438:	43db      	mvns	r3, r3
 804143a:	69ba      	ldr	r2, [r7, #24]
 804143c:	4013      	ands	r3, r2
 804143e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8041440:	683b      	ldr	r3, [r7, #0]
 8041442:	685b      	ldr	r3, [r3, #4]
 8041444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041448:	2b00      	cmp	r3, #0
 804144a:	d003      	beq.n	8041454 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 804144c:	69ba      	ldr	r2, [r7, #24]
 804144e:	693b      	ldr	r3, [r7, #16]
 8041450:	4313      	orrs	r3, r2
 8041452:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8041454:	697b      	ldr	r3, [r7, #20]
 8041456:	69ba      	ldr	r2, [r7, #24]
 8041458:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 804145a:	697b      	ldr	r3, [r7, #20]
 804145c:	681b      	ldr	r3, [r3, #0]
 804145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8041460:	693b      	ldr	r3, [r7, #16]
 8041462:	43db      	mvns	r3, r3
 8041464:	69ba      	ldr	r2, [r7, #24]
 8041466:	4013      	ands	r3, r2
 8041468:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 804146a:	683b      	ldr	r3, [r7, #0]
 804146c:	685b      	ldr	r3, [r3, #4]
 804146e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041472:	2b00      	cmp	r3, #0
 8041474:	d003      	beq.n	804147e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8041476:	69ba      	ldr	r2, [r7, #24]
 8041478:	693b      	ldr	r3, [r7, #16]
 804147a:	4313      	orrs	r3, r2
 804147c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 804147e:	697b      	ldr	r3, [r7, #20]
 8041480:	69ba      	ldr	r2, [r7, #24]
 8041482:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8041484:	69fb      	ldr	r3, [r7, #28]
 8041486:	3301      	adds	r3, #1
 8041488:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 804148a:	683b      	ldr	r3, [r7, #0]
 804148c:	681a      	ldr	r2, [r3, #0]
 804148e:	69fb      	ldr	r3, [r7, #28]
 8041490:	fa22 f303 	lsr.w	r3, r2, r3
 8041494:	2b00      	cmp	r3, #0
 8041496:	f47f ae63 	bne.w	8041160 <HAL_GPIO_Init+0x14>
  }
}
 804149a:	bf00      	nop
 804149c:	bf00      	nop
 804149e:	3724      	adds	r7, #36	; 0x24
 80414a0:	46bd      	mov	sp, r7
 80414a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80414a6:	4770      	bx	lr
 80414a8:	58000400 	.word	0x58000400

080414ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80414ac:	b480      	push	{r7}
 80414ae:	b083      	sub	sp, #12
 80414b0:	af00      	add	r7, sp, #0
 80414b2:	6078      	str	r0, [r7, #4]
 80414b4:	460b      	mov	r3, r1
 80414b6:	807b      	strh	r3, [r7, #2]
 80414b8:	4613      	mov	r3, r2
 80414ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80414bc:	787b      	ldrb	r3, [r7, #1]
 80414be:	2b00      	cmp	r3, #0
 80414c0:	d003      	beq.n	80414ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80414c2:	887a      	ldrh	r2, [r7, #2]
 80414c4:	687b      	ldr	r3, [r7, #4]
 80414c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80414c8:	e003      	b.n	80414d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80414ca:	887b      	ldrh	r3, [r7, #2]
 80414cc:	041a      	lsls	r2, r3, #16
 80414ce:	687b      	ldr	r3, [r7, #4]
 80414d0:	619a      	str	r2, [r3, #24]
}
 80414d2:	bf00      	nop
 80414d4:	370c      	adds	r7, #12
 80414d6:	46bd      	mov	sp, r7
 80414d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80414dc:	4770      	bx	lr

080414de <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80414de:	b480      	push	{r7}
 80414e0:	b085      	sub	sp, #20
 80414e2:	af00      	add	r7, sp, #0
 80414e4:	6078      	str	r0, [r7, #4]
 80414e6:	460b      	mov	r3, r1
 80414e8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80414ea:	687b      	ldr	r3, [r7, #4]
 80414ec:	695b      	ldr	r3, [r3, #20]
 80414ee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80414f0:	887a      	ldrh	r2, [r7, #2]
 80414f2:	68fb      	ldr	r3, [r7, #12]
 80414f4:	4013      	ands	r3, r2
 80414f6:	041a      	lsls	r2, r3, #16
 80414f8:	68fb      	ldr	r3, [r7, #12]
 80414fa:	43d9      	mvns	r1, r3
 80414fc:	887b      	ldrh	r3, [r7, #2]
 80414fe:	400b      	ands	r3, r1
 8041500:	431a      	orrs	r2, r3
 8041502:	687b      	ldr	r3, [r7, #4]
 8041504:	619a      	str	r2, [r3, #24]
}
 8041506:	bf00      	nop
 8041508:	3714      	adds	r7, #20
 804150a:	46bd      	mov	sp, r7
 804150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041510:	4770      	bx	lr
	...

08041514 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8041514:	b480      	push	{r7}
 8041516:	b083      	sub	sp, #12
 8041518:	af00      	add	r7, sp, #0
 804151a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 804151c:	4a08      	ldr	r2, [pc, #32]	; (8041540 <HAL_HSEM_FastTake+0x2c>)
 804151e:	687b      	ldr	r3, [r7, #4]
 8041520:	3320      	adds	r3, #32
 8041522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041526:	4a07      	ldr	r2, [pc, #28]	; (8041544 <HAL_HSEM_FastTake+0x30>)
 8041528:	4293      	cmp	r3, r2
 804152a:	d101      	bne.n	8041530 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 804152c:	2300      	movs	r3, #0
 804152e:	e000      	b.n	8041532 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8041530:	2301      	movs	r3, #1
}
 8041532:	4618      	mov	r0, r3
 8041534:	370c      	adds	r7, #12
 8041536:	46bd      	mov	sp, r7
 8041538:	f85d 7b04 	ldr.w	r7, [sp], #4
 804153c:	4770      	bx	lr
 804153e:	bf00      	nop
 8041540:	58026400 	.word	0x58026400
 8041544:	80000300 	.word	0x80000300

08041548 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8041548:	b480      	push	{r7}
 804154a:	b083      	sub	sp, #12
 804154c:	af00      	add	r7, sp, #0
 804154e:	6078      	str	r0, [r7, #4]
 8041550:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8041552:	4906      	ldr	r1, [pc, #24]	; (804156c <HAL_HSEM_Release+0x24>)
 8041554:	683b      	ldr	r3, [r7, #0]
 8041556:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 804155a:	687b      	ldr	r3, [r7, #4]
 804155c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8041560:	bf00      	nop
 8041562:	370c      	adds	r7, #12
 8041564:	46bd      	mov	sp, r7
 8041566:	f85d 7b04 	ldr.w	r7, [sp], #4
 804156a:	4770      	bx	lr
 804156c:	58026400 	.word	0x58026400

08041570 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8041570:	b580      	push	{r7, lr}
 8041572:	b084      	sub	sp, #16
 8041574:	af00      	add	r7, sp, #0
 8041576:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8041578:	4b29      	ldr	r3, [pc, #164]	; (8041620 <HAL_PWREx_ConfigSupply+0xb0>)
 804157a:	68db      	ldr	r3, [r3, #12]
 804157c:	f003 0307 	and.w	r3, r3, #7
 8041580:	2b06      	cmp	r3, #6
 8041582:	d00a      	beq.n	804159a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8041584:	4b26      	ldr	r3, [pc, #152]	; (8041620 <HAL_PWREx_ConfigSupply+0xb0>)
 8041586:	68db      	ldr	r3, [r3, #12]
 8041588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 804158c:	687a      	ldr	r2, [r7, #4]
 804158e:	429a      	cmp	r2, r3
 8041590:	d001      	beq.n	8041596 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8041592:	2301      	movs	r3, #1
 8041594:	e040      	b.n	8041618 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8041596:	2300      	movs	r3, #0
 8041598:	e03e      	b.n	8041618 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 804159a:	4b21      	ldr	r3, [pc, #132]	; (8041620 <HAL_PWREx_ConfigSupply+0xb0>)
 804159c:	68db      	ldr	r3, [r3, #12]
 804159e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80415a2:	491f      	ldr	r1, [pc, #124]	; (8041620 <HAL_PWREx_ConfigSupply+0xb0>)
 80415a4:	687b      	ldr	r3, [r7, #4]
 80415a6:	4313      	orrs	r3, r2
 80415a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80415aa:	f7ff fcaf 	bl	8040f0c <HAL_GetTick>
 80415ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80415b0:	e009      	b.n	80415c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80415b2:	f7ff fcab 	bl	8040f0c <HAL_GetTick>
 80415b6:	4602      	mov	r2, r0
 80415b8:	68fb      	ldr	r3, [r7, #12]
 80415ba:	1ad3      	subs	r3, r2, r3
 80415bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80415c0:	d901      	bls.n	80415c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80415c2:	2301      	movs	r3, #1
 80415c4:	e028      	b.n	8041618 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80415c6:	4b16      	ldr	r3, [pc, #88]	; (8041620 <HAL_PWREx_ConfigSupply+0xb0>)
 80415c8:	685b      	ldr	r3, [r3, #4]
 80415ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80415ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80415d2:	d1ee      	bne.n	80415b2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80415d4:	687b      	ldr	r3, [r7, #4]
 80415d6:	2b1e      	cmp	r3, #30
 80415d8:	d008      	beq.n	80415ec <HAL_PWREx_ConfigSupply+0x7c>
 80415da:	687b      	ldr	r3, [r7, #4]
 80415dc:	2b2e      	cmp	r3, #46	; 0x2e
 80415de:	d005      	beq.n	80415ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80415e0:	687b      	ldr	r3, [r7, #4]
 80415e2:	2b1d      	cmp	r3, #29
 80415e4:	d002      	beq.n	80415ec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80415e6:	687b      	ldr	r3, [r7, #4]
 80415e8:	2b2d      	cmp	r3, #45	; 0x2d
 80415ea:	d114      	bne.n	8041616 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80415ec:	f7ff fc8e 	bl	8040f0c <HAL_GetTick>
 80415f0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80415f2:	e009      	b.n	8041608 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80415f4:	f7ff fc8a 	bl	8040f0c <HAL_GetTick>
 80415f8:	4602      	mov	r2, r0
 80415fa:	68fb      	ldr	r3, [r7, #12]
 80415fc:	1ad3      	subs	r3, r2, r3
 80415fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8041602:	d901      	bls.n	8041608 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8041604:	2301      	movs	r3, #1
 8041606:	e007      	b.n	8041618 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8041608:	4b05      	ldr	r3, [pc, #20]	; (8041620 <HAL_PWREx_ConfigSupply+0xb0>)
 804160a:	68db      	ldr	r3, [r3, #12]
 804160c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8041614:	d1ee      	bne.n	80415f4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8041616:	2300      	movs	r3, #0
}
 8041618:	4618      	mov	r0, r3
 804161a:	3710      	adds	r7, #16
 804161c:	46bd      	mov	sp, r7
 804161e:	bd80      	pop	{r7, pc}
 8041620:	58024800 	.word	0x58024800

08041624 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8041624:	b580      	push	{r7, lr}
 8041626:	b08c      	sub	sp, #48	; 0x30
 8041628:	af00      	add	r7, sp, #0
 804162a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 804162c:	687b      	ldr	r3, [r7, #4]
 804162e:	2b00      	cmp	r3, #0
 8041630:	d102      	bne.n	8041638 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8041632:	2301      	movs	r3, #1
 8041634:	f000 bc48 	b.w	8041ec8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8041638:	687b      	ldr	r3, [r7, #4]
 804163a:	681b      	ldr	r3, [r3, #0]
 804163c:	f003 0301 	and.w	r3, r3, #1
 8041640:	2b00      	cmp	r3, #0
 8041642:	f000 8088 	beq.w	8041756 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8041646:	4b99      	ldr	r3, [pc, #612]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 8041648:	691b      	ldr	r3, [r3, #16]
 804164a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 804164e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8041650:	4b96      	ldr	r3, [pc, #600]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 8041652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041654:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8041656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8041658:	2b10      	cmp	r3, #16
 804165a:	d007      	beq.n	804166c <HAL_RCC_OscConfig+0x48>
 804165c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804165e:	2b18      	cmp	r3, #24
 8041660:	d111      	bne.n	8041686 <HAL_RCC_OscConfig+0x62>
 8041662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8041664:	f003 0303 	and.w	r3, r3, #3
 8041668:	2b02      	cmp	r3, #2
 804166a:	d10c      	bne.n	8041686 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 804166c:	4b8f      	ldr	r3, [pc, #572]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 804166e:	681b      	ldr	r3, [r3, #0]
 8041670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041674:	2b00      	cmp	r3, #0
 8041676:	d06d      	beq.n	8041754 <HAL_RCC_OscConfig+0x130>
 8041678:	687b      	ldr	r3, [r7, #4]
 804167a:	685b      	ldr	r3, [r3, #4]
 804167c:	2b00      	cmp	r3, #0
 804167e:	d169      	bne.n	8041754 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8041680:	2301      	movs	r3, #1
 8041682:	f000 bc21 	b.w	8041ec8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8041686:	687b      	ldr	r3, [r7, #4]
 8041688:	685b      	ldr	r3, [r3, #4]
 804168a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804168e:	d106      	bne.n	804169e <HAL_RCC_OscConfig+0x7a>
 8041690:	4b86      	ldr	r3, [pc, #536]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 8041692:	681b      	ldr	r3, [r3, #0]
 8041694:	4a85      	ldr	r2, [pc, #532]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 8041696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804169a:	6013      	str	r3, [r2, #0]
 804169c:	e02e      	b.n	80416fc <HAL_RCC_OscConfig+0xd8>
 804169e:	687b      	ldr	r3, [r7, #4]
 80416a0:	685b      	ldr	r3, [r3, #4]
 80416a2:	2b00      	cmp	r3, #0
 80416a4:	d10c      	bne.n	80416c0 <HAL_RCC_OscConfig+0x9c>
 80416a6:	4b81      	ldr	r3, [pc, #516]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 80416a8:	681b      	ldr	r3, [r3, #0]
 80416aa:	4a80      	ldr	r2, [pc, #512]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 80416ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80416b0:	6013      	str	r3, [r2, #0]
 80416b2:	4b7e      	ldr	r3, [pc, #504]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 80416b4:	681b      	ldr	r3, [r3, #0]
 80416b6:	4a7d      	ldr	r2, [pc, #500]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 80416b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80416bc:	6013      	str	r3, [r2, #0]
 80416be:	e01d      	b.n	80416fc <HAL_RCC_OscConfig+0xd8>
 80416c0:	687b      	ldr	r3, [r7, #4]
 80416c2:	685b      	ldr	r3, [r3, #4]
 80416c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80416c8:	d10c      	bne.n	80416e4 <HAL_RCC_OscConfig+0xc0>
 80416ca:	4b78      	ldr	r3, [pc, #480]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 80416cc:	681b      	ldr	r3, [r3, #0]
 80416ce:	4a77      	ldr	r2, [pc, #476]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 80416d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80416d4:	6013      	str	r3, [r2, #0]
 80416d6:	4b75      	ldr	r3, [pc, #468]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 80416d8:	681b      	ldr	r3, [r3, #0]
 80416da:	4a74      	ldr	r2, [pc, #464]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 80416dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80416e0:	6013      	str	r3, [r2, #0]
 80416e2:	e00b      	b.n	80416fc <HAL_RCC_OscConfig+0xd8>
 80416e4:	4b71      	ldr	r3, [pc, #452]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 80416e6:	681b      	ldr	r3, [r3, #0]
 80416e8:	4a70      	ldr	r2, [pc, #448]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 80416ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80416ee:	6013      	str	r3, [r2, #0]
 80416f0:	4b6e      	ldr	r3, [pc, #440]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 80416f2:	681b      	ldr	r3, [r3, #0]
 80416f4:	4a6d      	ldr	r2, [pc, #436]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 80416f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80416fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80416fc:	687b      	ldr	r3, [r7, #4]
 80416fe:	685b      	ldr	r3, [r3, #4]
 8041700:	2b00      	cmp	r3, #0
 8041702:	d013      	beq.n	804172c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041704:	f7ff fc02 	bl	8040f0c <HAL_GetTick>
 8041708:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 804170a:	e008      	b.n	804171e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 804170c:	f7ff fbfe 	bl	8040f0c <HAL_GetTick>
 8041710:	4602      	mov	r2, r0
 8041712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041714:	1ad3      	subs	r3, r2, r3
 8041716:	2b64      	cmp	r3, #100	; 0x64
 8041718:	d901      	bls.n	804171e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 804171a:	2303      	movs	r3, #3
 804171c:	e3d4      	b.n	8041ec8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 804171e:	4b63      	ldr	r3, [pc, #396]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 8041720:	681b      	ldr	r3, [r3, #0]
 8041722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041726:	2b00      	cmp	r3, #0
 8041728:	d0f0      	beq.n	804170c <HAL_RCC_OscConfig+0xe8>
 804172a:	e014      	b.n	8041756 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804172c:	f7ff fbee 	bl	8040f0c <HAL_GetTick>
 8041730:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8041732:	e008      	b.n	8041746 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8041734:	f7ff fbea 	bl	8040f0c <HAL_GetTick>
 8041738:	4602      	mov	r2, r0
 804173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804173c:	1ad3      	subs	r3, r2, r3
 804173e:	2b64      	cmp	r3, #100	; 0x64
 8041740:	d901      	bls.n	8041746 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8041742:	2303      	movs	r3, #3
 8041744:	e3c0      	b.n	8041ec8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8041746:	4b59      	ldr	r3, [pc, #356]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 8041748:	681b      	ldr	r3, [r3, #0]
 804174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804174e:	2b00      	cmp	r3, #0
 8041750:	d1f0      	bne.n	8041734 <HAL_RCC_OscConfig+0x110>
 8041752:	e000      	b.n	8041756 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8041754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8041756:	687b      	ldr	r3, [r7, #4]
 8041758:	681b      	ldr	r3, [r3, #0]
 804175a:	f003 0302 	and.w	r3, r3, #2
 804175e:	2b00      	cmp	r3, #0
 8041760:	f000 80ca 	beq.w	80418f8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8041764:	4b51      	ldr	r3, [pc, #324]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 8041766:	691b      	ldr	r3, [r3, #16]
 8041768:	f003 0338 	and.w	r3, r3, #56	; 0x38
 804176c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 804176e:	4b4f      	ldr	r3, [pc, #316]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 8041770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041772:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8041774:	6a3b      	ldr	r3, [r7, #32]
 8041776:	2b00      	cmp	r3, #0
 8041778:	d007      	beq.n	804178a <HAL_RCC_OscConfig+0x166>
 804177a:	6a3b      	ldr	r3, [r7, #32]
 804177c:	2b18      	cmp	r3, #24
 804177e:	d156      	bne.n	804182e <HAL_RCC_OscConfig+0x20a>
 8041780:	69fb      	ldr	r3, [r7, #28]
 8041782:	f003 0303 	and.w	r3, r3, #3
 8041786:	2b00      	cmp	r3, #0
 8041788:	d151      	bne.n	804182e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 804178a:	4b48      	ldr	r3, [pc, #288]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 804178c:	681b      	ldr	r3, [r3, #0]
 804178e:	f003 0304 	and.w	r3, r3, #4
 8041792:	2b00      	cmp	r3, #0
 8041794:	d005      	beq.n	80417a2 <HAL_RCC_OscConfig+0x17e>
 8041796:	687b      	ldr	r3, [r7, #4]
 8041798:	68db      	ldr	r3, [r3, #12]
 804179a:	2b00      	cmp	r3, #0
 804179c:	d101      	bne.n	80417a2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 804179e:	2301      	movs	r3, #1
 80417a0:	e392      	b.n	8041ec8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80417a2:	4b42      	ldr	r3, [pc, #264]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 80417a4:	681b      	ldr	r3, [r3, #0]
 80417a6:	f023 0219 	bic.w	r2, r3, #25
 80417aa:	687b      	ldr	r3, [r7, #4]
 80417ac:	68db      	ldr	r3, [r3, #12]
 80417ae:	493f      	ldr	r1, [pc, #252]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 80417b0:	4313      	orrs	r3, r2
 80417b2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80417b4:	f7ff fbaa 	bl	8040f0c <HAL_GetTick>
 80417b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80417ba:	e008      	b.n	80417ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80417bc:	f7ff fba6 	bl	8040f0c <HAL_GetTick>
 80417c0:	4602      	mov	r2, r0
 80417c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80417c4:	1ad3      	subs	r3, r2, r3
 80417c6:	2b02      	cmp	r3, #2
 80417c8:	d901      	bls.n	80417ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80417ca:	2303      	movs	r3, #3
 80417cc:	e37c      	b.n	8041ec8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80417ce:	4b37      	ldr	r3, [pc, #220]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 80417d0:	681b      	ldr	r3, [r3, #0]
 80417d2:	f003 0304 	and.w	r3, r3, #4
 80417d6:	2b00      	cmp	r3, #0
 80417d8:	d0f0      	beq.n	80417bc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80417da:	f7ff fbc7 	bl	8040f6c <HAL_GetREVID>
 80417de:	4603      	mov	r3, r0
 80417e0:	f241 0203 	movw	r2, #4099	; 0x1003
 80417e4:	4293      	cmp	r3, r2
 80417e6:	d817      	bhi.n	8041818 <HAL_RCC_OscConfig+0x1f4>
 80417e8:	687b      	ldr	r3, [r7, #4]
 80417ea:	691b      	ldr	r3, [r3, #16]
 80417ec:	2b40      	cmp	r3, #64	; 0x40
 80417ee:	d108      	bne.n	8041802 <HAL_RCC_OscConfig+0x1de>
 80417f0:	4b2e      	ldr	r3, [pc, #184]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 80417f2:	685b      	ldr	r3, [r3, #4]
 80417f4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80417f8:	4a2c      	ldr	r2, [pc, #176]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 80417fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80417fe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8041800:	e07a      	b.n	80418f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041802:	4b2a      	ldr	r3, [pc, #168]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 8041804:	685b      	ldr	r3, [r3, #4]
 8041806:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 804180a:	687b      	ldr	r3, [r7, #4]
 804180c:	691b      	ldr	r3, [r3, #16]
 804180e:	031b      	lsls	r3, r3, #12
 8041810:	4926      	ldr	r1, [pc, #152]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 8041812:	4313      	orrs	r3, r2
 8041814:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8041816:	e06f      	b.n	80418f8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041818:	4b24      	ldr	r3, [pc, #144]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 804181a:	685b      	ldr	r3, [r3, #4]
 804181c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8041820:	687b      	ldr	r3, [r7, #4]
 8041822:	691b      	ldr	r3, [r3, #16]
 8041824:	061b      	lsls	r3, r3, #24
 8041826:	4921      	ldr	r1, [pc, #132]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 8041828:	4313      	orrs	r3, r2
 804182a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 804182c:	e064      	b.n	80418f8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 804182e:	687b      	ldr	r3, [r7, #4]
 8041830:	68db      	ldr	r3, [r3, #12]
 8041832:	2b00      	cmp	r3, #0
 8041834:	d047      	beq.n	80418c6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8041836:	4b1d      	ldr	r3, [pc, #116]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 8041838:	681b      	ldr	r3, [r3, #0]
 804183a:	f023 0219 	bic.w	r2, r3, #25
 804183e:	687b      	ldr	r3, [r7, #4]
 8041840:	68db      	ldr	r3, [r3, #12]
 8041842:	491a      	ldr	r1, [pc, #104]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 8041844:	4313      	orrs	r3, r2
 8041846:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041848:	f7ff fb60 	bl	8040f0c <HAL_GetTick>
 804184c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 804184e:	e008      	b.n	8041862 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8041850:	f7ff fb5c 	bl	8040f0c <HAL_GetTick>
 8041854:	4602      	mov	r2, r0
 8041856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041858:	1ad3      	subs	r3, r2, r3
 804185a:	2b02      	cmp	r3, #2
 804185c:	d901      	bls.n	8041862 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 804185e:	2303      	movs	r3, #3
 8041860:	e332      	b.n	8041ec8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8041862:	4b12      	ldr	r3, [pc, #72]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 8041864:	681b      	ldr	r3, [r3, #0]
 8041866:	f003 0304 	and.w	r3, r3, #4
 804186a:	2b00      	cmp	r3, #0
 804186c:	d0f0      	beq.n	8041850 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 804186e:	f7ff fb7d 	bl	8040f6c <HAL_GetREVID>
 8041872:	4603      	mov	r3, r0
 8041874:	f241 0203 	movw	r2, #4099	; 0x1003
 8041878:	4293      	cmp	r3, r2
 804187a:	d819      	bhi.n	80418b0 <HAL_RCC_OscConfig+0x28c>
 804187c:	687b      	ldr	r3, [r7, #4]
 804187e:	691b      	ldr	r3, [r3, #16]
 8041880:	2b40      	cmp	r3, #64	; 0x40
 8041882:	d108      	bne.n	8041896 <HAL_RCC_OscConfig+0x272>
 8041884:	4b09      	ldr	r3, [pc, #36]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 8041886:	685b      	ldr	r3, [r3, #4]
 8041888:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 804188c:	4a07      	ldr	r2, [pc, #28]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 804188e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8041892:	6053      	str	r3, [r2, #4]
 8041894:	e030      	b.n	80418f8 <HAL_RCC_OscConfig+0x2d4>
 8041896:	4b05      	ldr	r3, [pc, #20]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 8041898:	685b      	ldr	r3, [r3, #4]
 804189a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 804189e:	687b      	ldr	r3, [r7, #4]
 80418a0:	691b      	ldr	r3, [r3, #16]
 80418a2:	031b      	lsls	r3, r3, #12
 80418a4:	4901      	ldr	r1, [pc, #4]	; (80418ac <HAL_RCC_OscConfig+0x288>)
 80418a6:	4313      	orrs	r3, r2
 80418a8:	604b      	str	r3, [r1, #4]
 80418aa:	e025      	b.n	80418f8 <HAL_RCC_OscConfig+0x2d4>
 80418ac:	58024400 	.word	0x58024400
 80418b0:	4b9a      	ldr	r3, [pc, #616]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 80418b2:	685b      	ldr	r3, [r3, #4]
 80418b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80418b8:	687b      	ldr	r3, [r7, #4]
 80418ba:	691b      	ldr	r3, [r3, #16]
 80418bc:	061b      	lsls	r3, r3, #24
 80418be:	4997      	ldr	r1, [pc, #604]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 80418c0:	4313      	orrs	r3, r2
 80418c2:	604b      	str	r3, [r1, #4]
 80418c4:	e018      	b.n	80418f8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80418c6:	4b95      	ldr	r3, [pc, #596]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 80418c8:	681b      	ldr	r3, [r3, #0]
 80418ca:	4a94      	ldr	r2, [pc, #592]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 80418cc:	f023 0301 	bic.w	r3, r3, #1
 80418d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80418d2:	f7ff fb1b 	bl	8040f0c <HAL_GetTick>
 80418d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80418d8:	e008      	b.n	80418ec <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80418da:	f7ff fb17 	bl	8040f0c <HAL_GetTick>
 80418de:	4602      	mov	r2, r0
 80418e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80418e2:	1ad3      	subs	r3, r2, r3
 80418e4:	2b02      	cmp	r3, #2
 80418e6:	d901      	bls.n	80418ec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80418e8:	2303      	movs	r3, #3
 80418ea:	e2ed      	b.n	8041ec8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80418ec:	4b8b      	ldr	r3, [pc, #556]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 80418ee:	681b      	ldr	r3, [r3, #0]
 80418f0:	f003 0304 	and.w	r3, r3, #4
 80418f4:	2b00      	cmp	r3, #0
 80418f6:	d1f0      	bne.n	80418da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80418f8:	687b      	ldr	r3, [r7, #4]
 80418fa:	681b      	ldr	r3, [r3, #0]
 80418fc:	f003 0310 	and.w	r3, r3, #16
 8041900:	2b00      	cmp	r3, #0
 8041902:	f000 80a9 	beq.w	8041a58 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8041906:	4b85      	ldr	r3, [pc, #532]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 8041908:	691b      	ldr	r3, [r3, #16]
 804190a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 804190e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8041910:	4b82      	ldr	r3, [pc, #520]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 8041912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041914:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8041916:	69bb      	ldr	r3, [r7, #24]
 8041918:	2b08      	cmp	r3, #8
 804191a:	d007      	beq.n	804192c <HAL_RCC_OscConfig+0x308>
 804191c:	69bb      	ldr	r3, [r7, #24]
 804191e:	2b18      	cmp	r3, #24
 8041920:	d13a      	bne.n	8041998 <HAL_RCC_OscConfig+0x374>
 8041922:	697b      	ldr	r3, [r7, #20]
 8041924:	f003 0303 	and.w	r3, r3, #3
 8041928:	2b01      	cmp	r3, #1
 804192a:	d135      	bne.n	8041998 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 804192c:	4b7b      	ldr	r3, [pc, #492]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 804192e:	681b      	ldr	r3, [r3, #0]
 8041930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041934:	2b00      	cmp	r3, #0
 8041936:	d005      	beq.n	8041944 <HAL_RCC_OscConfig+0x320>
 8041938:	687b      	ldr	r3, [r7, #4]
 804193a:	69db      	ldr	r3, [r3, #28]
 804193c:	2b80      	cmp	r3, #128	; 0x80
 804193e:	d001      	beq.n	8041944 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8041940:	2301      	movs	r3, #1
 8041942:	e2c1      	b.n	8041ec8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8041944:	f7ff fb12 	bl	8040f6c <HAL_GetREVID>
 8041948:	4603      	mov	r3, r0
 804194a:	f241 0203 	movw	r2, #4099	; 0x1003
 804194e:	4293      	cmp	r3, r2
 8041950:	d817      	bhi.n	8041982 <HAL_RCC_OscConfig+0x35e>
 8041952:	687b      	ldr	r3, [r7, #4]
 8041954:	6a1b      	ldr	r3, [r3, #32]
 8041956:	2b20      	cmp	r3, #32
 8041958:	d108      	bne.n	804196c <HAL_RCC_OscConfig+0x348>
 804195a:	4b70      	ldr	r3, [pc, #448]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 804195c:	685b      	ldr	r3, [r3, #4]
 804195e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8041962:	4a6e      	ldr	r2, [pc, #440]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 8041964:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8041968:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 804196a:	e075      	b.n	8041a58 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 804196c:	4b6b      	ldr	r3, [pc, #428]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 804196e:	685b      	ldr	r3, [r3, #4]
 8041970:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8041974:	687b      	ldr	r3, [r7, #4]
 8041976:	6a1b      	ldr	r3, [r3, #32]
 8041978:	069b      	lsls	r3, r3, #26
 804197a:	4968      	ldr	r1, [pc, #416]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 804197c:	4313      	orrs	r3, r2
 804197e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8041980:	e06a      	b.n	8041a58 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8041982:	4b66      	ldr	r3, [pc, #408]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 8041984:	68db      	ldr	r3, [r3, #12]
 8041986:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 804198a:	687b      	ldr	r3, [r7, #4]
 804198c:	6a1b      	ldr	r3, [r3, #32]
 804198e:	061b      	lsls	r3, r3, #24
 8041990:	4962      	ldr	r1, [pc, #392]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 8041992:	4313      	orrs	r3, r2
 8041994:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8041996:	e05f      	b.n	8041a58 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8041998:	687b      	ldr	r3, [r7, #4]
 804199a:	69db      	ldr	r3, [r3, #28]
 804199c:	2b00      	cmp	r3, #0
 804199e:	d042      	beq.n	8041a26 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80419a0:	4b5e      	ldr	r3, [pc, #376]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 80419a2:	681b      	ldr	r3, [r3, #0]
 80419a4:	4a5d      	ldr	r2, [pc, #372]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 80419a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80419aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80419ac:	f7ff faae 	bl	8040f0c <HAL_GetTick>
 80419b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80419b2:	e008      	b.n	80419c6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80419b4:	f7ff faaa 	bl	8040f0c <HAL_GetTick>
 80419b8:	4602      	mov	r2, r0
 80419ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80419bc:	1ad3      	subs	r3, r2, r3
 80419be:	2b02      	cmp	r3, #2
 80419c0:	d901      	bls.n	80419c6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80419c2:	2303      	movs	r3, #3
 80419c4:	e280      	b.n	8041ec8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80419c6:	4b55      	ldr	r3, [pc, #340]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 80419c8:	681b      	ldr	r3, [r3, #0]
 80419ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80419ce:	2b00      	cmp	r3, #0
 80419d0:	d0f0      	beq.n	80419b4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80419d2:	f7ff facb 	bl	8040f6c <HAL_GetREVID>
 80419d6:	4603      	mov	r3, r0
 80419d8:	f241 0203 	movw	r2, #4099	; 0x1003
 80419dc:	4293      	cmp	r3, r2
 80419de:	d817      	bhi.n	8041a10 <HAL_RCC_OscConfig+0x3ec>
 80419e0:	687b      	ldr	r3, [r7, #4]
 80419e2:	6a1b      	ldr	r3, [r3, #32]
 80419e4:	2b20      	cmp	r3, #32
 80419e6:	d108      	bne.n	80419fa <HAL_RCC_OscConfig+0x3d6>
 80419e8:	4b4c      	ldr	r3, [pc, #304]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 80419ea:	685b      	ldr	r3, [r3, #4]
 80419ec:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80419f0:	4a4a      	ldr	r2, [pc, #296]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 80419f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80419f6:	6053      	str	r3, [r2, #4]
 80419f8:	e02e      	b.n	8041a58 <HAL_RCC_OscConfig+0x434>
 80419fa:	4b48      	ldr	r3, [pc, #288]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 80419fc:	685b      	ldr	r3, [r3, #4]
 80419fe:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8041a02:	687b      	ldr	r3, [r7, #4]
 8041a04:	6a1b      	ldr	r3, [r3, #32]
 8041a06:	069b      	lsls	r3, r3, #26
 8041a08:	4944      	ldr	r1, [pc, #272]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 8041a0a:	4313      	orrs	r3, r2
 8041a0c:	604b      	str	r3, [r1, #4]
 8041a0e:	e023      	b.n	8041a58 <HAL_RCC_OscConfig+0x434>
 8041a10:	4b42      	ldr	r3, [pc, #264]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 8041a12:	68db      	ldr	r3, [r3, #12]
 8041a14:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8041a18:	687b      	ldr	r3, [r7, #4]
 8041a1a:	6a1b      	ldr	r3, [r3, #32]
 8041a1c:	061b      	lsls	r3, r3, #24
 8041a1e:	493f      	ldr	r1, [pc, #252]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 8041a20:	4313      	orrs	r3, r2
 8041a22:	60cb      	str	r3, [r1, #12]
 8041a24:	e018      	b.n	8041a58 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8041a26:	4b3d      	ldr	r3, [pc, #244]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 8041a28:	681b      	ldr	r3, [r3, #0]
 8041a2a:	4a3c      	ldr	r2, [pc, #240]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 8041a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8041a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041a32:	f7ff fa6b 	bl	8040f0c <HAL_GetTick>
 8041a36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8041a38:	e008      	b.n	8041a4c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8041a3a:	f7ff fa67 	bl	8040f0c <HAL_GetTick>
 8041a3e:	4602      	mov	r2, r0
 8041a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041a42:	1ad3      	subs	r3, r2, r3
 8041a44:	2b02      	cmp	r3, #2
 8041a46:	d901      	bls.n	8041a4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8041a48:	2303      	movs	r3, #3
 8041a4a:	e23d      	b.n	8041ec8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8041a4c:	4b33      	ldr	r3, [pc, #204]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 8041a4e:	681b      	ldr	r3, [r3, #0]
 8041a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041a54:	2b00      	cmp	r3, #0
 8041a56:	d1f0      	bne.n	8041a3a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8041a58:	687b      	ldr	r3, [r7, #4]
 8041a5a:	681b      	ldr	r3, [r3, #0]
 8041a5c:	f003 0308 	and.w	r3, r3, #8
 8041a60:	2b00      	cmp	r3, #0
 8041a62:	d036      	beq.n	8041ad2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8041a64:	687b      	ldr	r3, [r7, #4]
 8041a66:	695b      	ldr	r3, [r3, #20]
 8041a68:	2b00      	cmp	r3, #0
 8041a6a:	d019      	beq.n	8041aa0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8041a6c:	4b2b      	ldr	r3, [pc, #172]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 8041a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8041a70:	4a2a      	ldr	r2, [pc, #168]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 8041a72:	f043 0301 	orr.w	r3, r3, #1
 8041a76:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041a78:	f7ff fa48 	bl	8040f0c <HAL_GetTick>
 8041a7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8041a7e:	e008      	b.n	8041a92 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8041a80:	f7ff fa44 	bl	8040f0c <HAL_GetTick>
 8041a84:	4602      	mov	r2, r0
 8041a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041a88:	1ad3      	subs	r3, r2, r3
 8041a8a:	2b02      	cmp	r3, #2
 8041a8c:	d901      	bls.n	8041a92 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8041a8e:	2303      	movs	r3, #3
 8041a90:	e21a      	b.n	8041ec8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8041a92:	4b22      	ldr	r3, [pc, #136]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 8041a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8041a96:	f003 0302 	and.w	r3, r3, #2
 8041a9a:	2b00      	cmp	r3, #0
 8041a9c:	d0f0      	beq.n	8041a80 <HAL_RCC_OscConfig+0x45c>
 8041a9e:	e018      	b.n	8041ad2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8041aa0:	4b1e      	ldr	r3, [pc, #120]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 8041aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8041aa4:	4a1d      	ldr	r2, [pc, #116]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 8041aa6:	f023 0301 	bic.w	r3, r3, #1
 8041aaa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041aac:	f7ff fa2e 	bl	8040f0c <HAL_GetTick>
 8041ab0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8041ab2:	e008      	b.n	8041ac6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8041ab4:	f7ff fa2a 	bl	8040f0c <HAL_GetTick>
 8041ab8:	4602      	mov	r2, r0
 8041aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041abc:	1ad3      	subs	r3, r2, r3
 8041abe:	2b02      	cmp	r3, #2
 8041ac0:	d901      	bls.n	8041ac6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8041ac2:	2303      	movs	r3, #3
 8041ac4:	e200      	b.n	8041ec8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8041ac6:	4b15      	ldr	r3, [pc, #84]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 8041ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8041aca:	f003 0302 	and.w	r3, r3, #2
 8041ace:	2b00      	cmp	r3, #0
 8041ad0:	d1f0      	bne.n	8041ab4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8041ad2:	687b      	ldr	r3, [r7, #4]
 8041ad4:	681b      	ldr	r3, [r3, #0]
 8041ad6:	f003 0320 	and.w	r3, r3, #32
 8041ada:	2b00      	cmp	r3, #0
 8041adc:	d039      	beq.n	8041b52 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8041ade:	687b      	ldr	r3, [r7, #4]
 8041ae0:	699b      	ldr	r3, [r3, #24]
 8041ae2:	2b00      	cmp	r3, #0
 8041ae4:	d01c      	beq.n	8041b20 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8041ae6:	4b0d      	ldr	r3, [pc, #52]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 8041ae8:	681b      	ldr	r3, [r3, #0]
 8041aea:	4a0c      	ldr	r2, [pc, #48]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 8041aec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8041af0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8041af2:	f7ff fa0b 	bl	8040f0c <HAL_GetTick>
 8041af6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8041af8:	e008      	b.n	8041b0c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8041afa:	f7ff fa07 	bl	8040f0c <HAL_GetTick>
 8041afe:	4602      	mov	r2, r0
 8041b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041b02:	1ad3      	subs	r3, r2, r3
 8041b04:	2b02      	cmp	r3, #2
 8041b06:	d901      	bls.n	8041b0c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8041b08:	2303      	movs	r3, #3
 8041b0a:	e1dd      	b.n	8041ec8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8041b0c:	4b03      	ldr	r3, [pc, #12]	; (8041b1c <HAL_RCC_OscConfig+0x4f8>)
 8041b0e:	681b      	ldr	r3, [r3, #0]
 8041b10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8041b14:	2b00      	cmp	r3, #0
 8041b16:	d0f0      	beq.n	8041afa <HAL_RCC_OscConfig+0x4d6>
 8041b18:	e01b      	b.n	8041b52 <HAL_RCC_OscConfig+0x52e>
 8041b1a:	bf00      	nop
 8041b1c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8041b20:	4b9b      	ldr	r3, [pc, #620]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041b22:	681b      	ldr	r3, [r3, #0]
 8041b24:	4a9a      	ldr	r2, [pc, #616]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041b26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8041b2a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8041b2c:	f7ff f9ee 	bl	8040f0c <HAL_GetTick>
 8041b30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8041b32:	e008      	b.n	8041b46 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8041b34:	f7ff f9ea 	bl	8040f0c <HAL_GetTick>
 8041b38:	4602      	mov	r2, r0
 8041b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041b3c:	1ad3      	subs	r3, r2, r3
 8041b3e:	2b02      	cmp	r3, #2
 8041b40:	d901      	bls.n	8041b46 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8041b42:	2303      	movs	r3, #3
 8041b44:	e1c0      	b.n	8041ec8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8041b46:	4b92      	ldr	r3, [pc, #584]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041b48:	681b      	ldr	r3, [r3, #0]
 8041b4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8041b4e:	2b00      	cmp	r3, #0
 8041b50:	d1f0      	bne.n	8041b34 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8041b52:	687b      	ldr	r3, [r7, #4]
 8041b54:	681b      	ldr	r3, [r3, #0]
 8041b56:	f003 0304 	and.w	r3, r3, #4
 8041b5a:	2b00      	cmp	r3, #0
 8041b5c:	f000 8081 	beq.w	8041c62 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8041b60:	4b8c      	ldr	r3, [pc, #560]	; (8041d94 <HAL_RCC_OscConfig+0x770>)
 8041b62:	681b      	ldr	r3, [r3, #0]
 8041b64:	4a8b      	ldr	r2, [pc, #556]	; (8041d94 <HAL_RCC_OscConfig+0x770>)
 8041b66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041b6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8041b6c:	f7ff f9ce 	bl	8040f0c <HAL_GetTick>
 8041b70:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8041b72:	e008      	b.n	8041b86 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8041b74:	f7ff f9ca 	bl	8040f0c <HAL_GetTick>
 8041b78:	4602      	mov	r2, r0
 8041b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041b7c:	1ad3      	subs	r3, r2, r3
 8041b7e:	2b64      	cmp	r3, #100	; 0x64
 8041b80:	d901      	bls.n	8041b86 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8041b82:	2303      	movs	r3, #3
 8041b84:	e1a0      	b.n	8041ec8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8041b86:	4b83      	ldr	r3, [pc, #524]	; (8041d94 <HAL_RCC_OscConfig+0x770>)
 8041b88:	681b      	ldr	r3, [r3, #0]
 8041b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041b8e:	2b00      	cmp	r3, #0
 8041b90:	d0f0      	beq.n	8041b74 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8041b92:	687b      	ldr	r3, [r7, #4]
 8041b94:	689b      	ldr	r3, [r3, #8]
 8041b96:	2b01      	cmp	r3, #1
 8041b98:	d106      	bne.n	8041ba8 <HAL_RCC_OscConfig+0x584>
 8041b9a:	4b7d      	ldr	r3, [pc, #500]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041b9e:	4a7c      	ldr	r2, [pc, #496]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041ba0:	f043 0301 	orr.w	r3, r3, #1
 8041ba4:	6713      	str	r3, [r2, #112]	; 0x70
 8041ba6:	e02d      	b.n	8041c04 <HAL_RCC_OscConfig+0x5e0>
 8041ba8:	687b      	ldr	r3, [r7, #4]
 8041baa:	689b      	ldr	r3, [r3, #8]
 8041bac:	2b00      	cmp	r3, #0
 8041bae:	d10c      	bne.n	8041bca <HAL_RCC_OscConfig+0x5a6>
 8041bb0:	4b77      	ldr	r3, [pc, #476]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041bb4:	4a76      	ldr	r2, [pc, #472]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041bb6:	f023 0301 	bic.w	r3, r3, #1
 8041bba:	6713      	str	r3, [r2, #112]	; 0x70
 8041bbc:	4b74      	ldr	r3, [pc, #464]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041bc0:	4a73      	ldr	r2, [pc, #460]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041bc2:	f023 0304 	bic.w	r3, r3, #4
 8041bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8041bc8:	e01c      	b.n	8041c04 <HAL_RCC_OscConfig+0x5e0>
 8041bca:	687b      	ldr	r3, [r7, #4]
 8041bcc:	689b      	ldr	r3, [r3, #8]
 8041bce:	2b05      	cmp	r3, #5
 8041bd0:	d10c      	bne.n	8041bec <HAL_RCC_OscConfig+0x5c8>
 8041bd2:	4b6f      	ldr	r3, [pc, #444]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041bd6:	4a6e      	ldr	r2, [pc, #440]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041bd8:	f043 0304 	orr.w	r3, r3, #4
 8041bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8041bde:	4b6c      	ldr	r3, [pc, #432]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041be2:	4a6b      	ldr	r2, [pc, #428]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041be4:	f043 0301 	orr.w	r3, r3, #1
 8041be8:	6713      	str	r3, [r2, #112]	; 0x70
 8041bea:	e00b      	b.n	8041c04 <HAL_RCC_OscConfig+0x5e0>
 8041bec:	4b68      	ldr	r3, [pc, #416]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041bf0:	4a67      	ldr	r2, [pc, #412]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041bf2:	f023 0301 	bic.w	r3, r3, #1
 8041bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8041bf8:	4b65      	ldr	r3, [pc, #404]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041bfc:	4a64      	ldr	r2, [pc, #400]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041bfe:	f023 0304 	bic.w	r3, r3, #4
 8041c02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8041c04:	687b      	ldr	r3, [r7, #4]
 8041c06:	689b      	ldr	r3, [r3, #8]
 8041c08:	2b00      	cmp	r3, #0
 8041c0a:	d015      	beq.n	8041c38 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041c0c:	f7ff f97e 	bl	8040f0c <HAL_GetTick>
 8041c10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8041c12:	e00a      	b.n	8041c2a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041c14:	f7ff f97a 	bl	8040f0c <HAL_GetTick>
 8041c18:	4602      	mov	r2, r0
 8041c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041c1c:	1ad3      	subs	r3, r2, r3
 8041c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8041c22:	4293      	cmp	r3, r2
 8041c24:	d901      	bls.n	8041c2a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8041c26:	2303      	movs	r3, #3
 8041c28:	e14e      	b.n	8041ec8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8041c2a:	4b59      	ldr	r3, [pc, #356]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041c2e:	f003 0302 	and.w	r3, r3, #2
 8041c32:	2b00      	cmp	r3, #0
 8041c34:	d0ee      	beq.n	8041c14 <HAL_RCC_OscConfig+0x5f0>
 8041c36:	e014      	b.n	8041c62 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041c38:	f7ff f968 	bl	8040f0c <HAL_GetTick>
 8041c3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8041c3e:	e00a      	b.n	8041c56 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041c40:	f7ff f964 	bl	8040f0c <HAL_GetTick>
 8041c44:	4602      	mov	r2, r0
 8041c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041c48:	1ad3      	subs	r3, r2, r3
 8041c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8041c4e:	4293      	cmp	r3, r2
 8041c50:	d901      	bls.n	8041c56 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8041c52:	2303      	movs	r3, #3
 8041c54:	e138      	b.n	8041ec8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8041c56:	4b4e      	ldr	r3, [pc, #312]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041c5a:	f003 0302 	and.w	r3, r3, #2
 8041c5e:	2b00      	cmp	r3, #0
 8041c60:	d1ee      	bne.n	8041c40 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8041c62:	687b      	ldr	r3, [r7, #4]
 8041c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041c66:	2b00      	cmp	r3, #0
 8041c68:	f000 812d 	beq.w	8041ec6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8041c6c:	4b48      	ldr	r3, [pc, #288]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041c6e:	691b      	ldr	r3, [r3, #16]
 8041c70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8041c74:	2b18      	cmp	r3, #24
 8041c76:	f000 80bd 	beq.w	8041df4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8041c7a:	687b      	ldr	r3, [r7, #4]
 8041c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041c7e:	2b02      	cmp	r3, #2
 8041c80:	f040 809e 	bne.w	8041dc0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041c84:	4b42      	ldr	r3, [pc, #264]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041c86:	681b      	ldr	r3, [r3, #0]
 8041c88:	4a41      	ldr	r2, [pc, #260]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041c8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8041c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041c90:	f7ff f93c 	bl	8040f0c <HAL_GetTick>
 8041c94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8041c96:	e008      	b.n	8041caa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041c98:	f7ff f938 	bl	8040f0c <HAL_GetTick>
 8041c9c:	4602      	mov	r2, r0
 8041c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041ca0:	1ad3      	subs	r3, r2, r3
 8041ca2:	2b02      	cmp	r3, #2
 8041ca4:	d901      	bls.n	8041caa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8041ca6:	2303      	movs	r3, #3
 8041ca8:	e10e      	b.n	8041ec8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8041caa:	4b39      	ldr	r3, [pc, #228]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041cac:	681b      	ldr	r3, [r3, #0]
 8041cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041cb2:	2b00      	cmp	r3, #0
 8041cb4:	d1f0      	bne.n	8041c98 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8041cb6:	4b36      	ldr	r3, [pc, #216]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041cb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8041cba:	4b37      	ldr	r3, [pc, #220]	; (8041d98 <HAL_RCC_OscConfig+0x774>)
 8041cbc:	4013      	ands	r3, r2
 8041cbe:	687a      	ldr	r2, [r7, #4]
 8041cc0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8041cc2:	687a      	ldr	r2, [r7, #4]
 8041cc4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8041cc6:	0112      	lsls	r2, r2, #4
 8041cc8:	430a      	orrs	r2, r1
 8041cca:	4931      	ldr	r1, [pc, #196]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041ccc:	4313      	orrs	r3, r2
 8041cce:	628b      	str	r3, [r1, #40]	; 0x28
 8041cd0:	687b      	ldr	r3, [r7, #4]
 8041cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041cd4:	3b01      	subs	r3, #1
 8041cd6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8041cda:	687b      	ldr	r3, [r7, #4]
 8041cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8041cde:	3b01      	subs	r3, #1
 8041ce0:	025b      	lsls	r3, r3, #9
 8041ce2:	b29b      	uxth	r3, r3
 8041ce4:	431a      	orrs	r2, r3
 8041ce6:	687b      	ldr	r3, [r7, #4]
 8041ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8041cea:	3b01      	subs	r3, #1
 8041cec:	041b      	lsls	r3, r3, #16
 8041cee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8041cf2:	431a      	orrs	r2, r3
 8041cf4:	687b      	ldr	r3, [r7, #4]
 8041cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041cf8:	3b01      	subs	r3, #1
 8041cfa:	061b      	lsls	r3, r3, #24
 8041cfc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8041d00:	4923      	ldr	r1, [pc, #140]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041d02:	4313      	orrs	r3, r2
 8041d04:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8041d06:	4b22      	ldr	r3, [pc, #136]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041d0a:	4a21      	ldr	r2, [pc, #132]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041d0c:	f023 0301 	bic.w	r3, r3, #1
 8041d10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8041d12:	4b1f      	ldr	r3, [pc, #124]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041d14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8041d16:	4b21      	ldr	r3, [pc, #132]	; (8041d9c <HAL_RCC_OscConfig+0x778>)
 8041d18:	4013      	ands	r3, r2
 8041d1a:	687a      	ldr	r2, [r7, #4]
 8041d1c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8041d1e:	00d2      	lsls	r2, r2, #3
 8041d20:	491b      	ldr	r1, [pc, #108]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041d22:	4313      	orrs	r3, r2
 8041d24:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8041d26:	4b1a      	ldr	r3, [pc, #104]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041d2a:	f023 020c 	bic.w	r2, r3, #12
 8041d2e:	687b      	ldr	r3, [r7, #4]
 8041d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041d32:	4917      	ldr	r1, [pc, #92]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041d34:	4313      	orrs	r3, r2
 8041d36:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8041d38:	4b15      	ldr	r3, [pc, #84]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041d3c:	f023 0202 	bic.w	r2, r3, #2
 8041d40:	687b      	ldr	r3, [r7, #4]
 8041d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041d44:	4912      	ldr	r1, [pc, #72]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041d46:	4313      	orrs	r3, r2
 8041d48:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8041d4a:	4b11      	ldr	r3, [pc, #68]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041d4e:	4a10      	ldr	r2, [pc, #64]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041d54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8041d56:	4b0e      	ldr	r3, [pc, #56]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041d5a:	4a0d      	ldr	r2, [pc, #52]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8041d60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8041d62:	4b0b      	ldr	r3, [pc, #44]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041d66:	4a0a      	ldr	r2, [pc, #40]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8041d6c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8041d6e:	4b08      	ldr	r3, [pc, #32]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041d72:	4a07      	ldr	r2, [pc, #28]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041d74:	f043 0301 	orr.w	r3, r3, #1
 8041d78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8041d7a:	4b05      	ldr	r3, [pc, #20]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041d7c:	681b      	ldr	r3, [r3, #0]
 8041d7e:	4a04      	ldr	r2, [pc, #16]	; (8041d90 <HAL_RCC_OscConfig+0x76c>)
 8041d80:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8041d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041d86:	f7ff f8c1 	bl	8040f0c <HAL_GetTick>
 8041d8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8041d8c:	e011      	b.n	8041db2 <HAL_RCC_OscConfig+0x78e>
 8041d8e:	bf00      	nop
 8041d90:	58024400 	.word	0x58024400
 8041d94:	58024800 	.word	0x58024800
 8041d98:	fffffc0c 	.word	0xfffffc0c
 8041d9c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041da0:	f7ff f8b4 	bl	8040f0c <HAL_GetTick>
 8041da4:	4602      	mov	r2, r0
 8041da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041da8:	1ad3      	subs	r3, r2, r3
 8041daa:	2b02      	cmp	r3, #2
 8041dac:	d901      	bls.n	8041db2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8041dae:	2303      	movs	r3, #3
 8041db0:	e08a      	b.n	8041ec8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8041db2:	4b47      	ldr	r3, [pc, #284]	; (8041ed0 <HAL_RCC_OscConfig+0x8ac>)
 8041db4:	681b      	ldr	r3, [r3, #0]
 8041db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041dba:	2b00      	cmp	r3, #0
 8041dbc:	d0f0      	beq.n	8041da0 <HAL_RCC_OscConfig+0x77c>
 8041dbe:	e082      	b.n	8041ec6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041dc0:	4b43      	ldr	r3, [pc, #268]	; (8041ed0 <HAL_RCC_OscConfig+0x8ac>)
 8041dc2:	681b      	ldr	r3, [r3, #0]
 8041dc4:	4a42      	ldr	r2, [pc, #264]	; (8041ed0 <HAL_RCC_OscConfig+0x8ac>)
 8041dc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8041dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041dcc:	f7ff f89e 	bl	8040f0c <HAL_GetTick>
 8041dd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8041dd2:	e008      	b.n	8041de6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041dd4:	f7ff f89a 	bl	8040f0c <HAL_GetTick>
 8041dd8:	4602      	mov	r2, r0
 8041dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041ddc:	1ad3      	subs	r3, r2, r3
 8041dde:	2b02      	cmp	r3, #2
 8041de0:	d901      	bls.n	8041de6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8041de2:	2303      	movs	r3, #3
 8041de4:	e070      	b.n	8041ec8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8041de6:	4b3a      	ldr	r3, [pc, #232]	; (8041ed0 <HAL_RCC_OscConfig+0x8ac>)
 8041de8:	681b      	ldr	r3, [r3, #0]
 8041dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041dee:	2b00      	cmp	r3, #0
 8041df0:	d1f0      	bne.n	8041dd4 <HAL_RCC_OscConfig+0x7b0>
 8041df2:	e068      	b.n	8041ec6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8041df4:	4b36      	ldr	r3, [pc, #216]	; (8041ed0 <HAL_RCC_OscConfig+0x8ac>)
 8041df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041df8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8041dfa:	4b35      	ldr	r3, [pc, #212]	; (8041ed0 <HAL_RCC_OscConfig+0x8ac>)
 8041dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041dfe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8041e00:	687b      	ldr	r3, [r7, #4]
 8041e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041e04:	2b01      	cmp	r3, #1
 8041e06:	d031      	beq.n	8041e6c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8041e08:	693b      	ldr	r3, [r7, #16]
 8041e0a:	f003 0203 	and.w	r2, r3, #3
 8041e0e:	687b      	ldr	r3, [r7, #4]
 8041e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8041e12:	429a      	cmp	r2, r3
 8041e14:	d12a      	bne.n	8041e6c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8041e16:	693b      	ldr	r3, [r7, #16]
 8041e18:	091b      	lsrs	r3, r3, #4
 8041e1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8041e1e:	687b      	ldr	r3, [r7, #4]
 8041e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8041e22:	429a      	cmp	r2, r3
 8041e24:	d122      	bne.n	8041e6c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8041e26:	68fb      	ldr	r3, [r7, #12]
 8041e28:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8041e2c:	687b      	ldr	r3, [r7, #4]
 8041e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041e30:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8041e32:	429a      	cmp	r2, r3
 8041e34:	d11a      	bne.n	8041e6c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8041e36:	68fb      	ldr	r3, [r7, #12]
 8041e38:	0a5b      	lsrs	r3, r3, #9
 8041e3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8041e3e:	687b      	ldr	r3, [r7, #4]
 8041e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8041e42:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8041e44:	429a      	cmp	r2, r3
 8041e46:	d111      	bne.n	8041e6c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8041e48:	68fb      	ldr	r3, [r7, #12]
 8041e4a:	0c1b      	lsrs	r3, r3, #16
 8041e4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8041e50:	687b      	ldr	r3, [r7, #4]
 8041e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8041e54:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8041e56:	429a      	cmp	r2, r3
 8041e58:	d108      	bne.n	8041e6c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8041e5a:	68fb      	ldr	r3, [r7, #12]
 8041e5c:	0e1b      	lsrs	r3, r3, #24
 8041e5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8041e62:	687b      	ldr	r3, [r7, #4]
 8041e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041e66:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8041e68:	429a      	cmp	r2, r3
 8041e6a:	d001      	beq.n	8041e70 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8041e6c:	2301      	movs	r3, #1
 8041e6e:	e02b      	b.n	8041ec8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8041e70:	4b17      	ldr	r3, [pc, #92]	; (8041ed0 <HAL_RCC_OscConfig+0x8ac>)
 8041e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8041e74:	08db      	lsrs	r3, r3, #3
 8041e76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8041e7a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8041e7c:	687b      	ldr	r3, [r7, #4]
 8041e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8041e80:	693a      	ldr	r2, [r7, #16]
 8041e82:	429a      	cmp	r2, r3
 8041e84:	d01f      	beq.n	8041ec6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8041e86:	4b12      	ldr	r3, [pc, #72]	; (8041ed0 <HAL_RCC_OscConfig+0x8ac>)
 8041e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041e8a:	4a11      	ldr	r2, [pc, #68]	; (8041ed0 <HAL_RCC_OscConfig+0x8ac>)
 8041e8c:	f023 0301 	bic.w	r3, r3, #1
 8041e90:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8041e92:	f7ff f83b 	bl	8040f0c <HAL_GetTick>
 8041e96:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8041e98:	bf00      	nop
 8041e9a:	f7ff f837 	bl	8040f0c <HAL_GetTick>
 8041e9e:	4602      	mov	r2, r0
 8041ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041ea2:	4293      	cmp	r3, r2
 8041ea4:	d0f9      	beq.n	8041e9a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8041ea6:	4b0a      	ldr	r3, [pc, #40]	; (8041ed0 <HAL_RCC_OscConfig+0x8ac>)
 8041ea8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8041eaa:	4b0a      	ldr	r3, [pc, #40]	; (8041ed4 <HAL_RCC_OscConfig+0x8b0>)
 8041eac:	4013      	ands	r3, r2
 8041eae:	687a      	ldr	r2, [r7, #4]
 8041eb0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8041eb2:	00d2      	lsls	r2, r2, #3
 8041eb4:	4906      	ldr	r1, [pc, #24]	; (8041ed0 <HAL_RCC_OscConfig+0x8ac>)
 8041eb6:	4313      	orrs	r3, r2
 8041eb8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8041eba:	4b05      	ldr	r3, [pc, #20]	; (8041ed0 <HAL_RCC_OscConfig+0x8ac>)
 8041ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041ebe:	4a04      	ldr	r2, [pc, #16]	; (8041ed0 <HAL_RCC_OscConfig+0x8ac>)
 8041ec0:	f043 0301 	orr.w	r3, r3, #1
 8041ec4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8041ec6:	2300      	movs	r3, #0
}
 8041ec8:	4618      	mov	r0, r3
 8041eca:	3730      	adds	r7, #48	; 0x30
 8041ecc:	46bd      	mov	sp, r7
 8041ece:	bd80      	pop	{r7, pc}
 8041ed0:	58024400 	.word	0x58024400
 8041ed4:	ffff0007 	.word	0xffff0007

08041ed8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8041ed8:	b580      	push	{r7, lr}
 8041eda:	b086      	sub	sp, #24
 8041edc:	af00      	add	r7, sp, #0
 8041ede:	6078      	str	r0, [r7, #4]
 8041ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8041ee2:	687b      	ldr	r3, [r7, #4]
 8041ee4:	2b00      	cmp	r3, #0
 8041ee6:	d101      	bne.n	8041eec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8041ee8:	2301      	movs	r3, #1
 8041eea:	e19c      	b.n	8042226 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8041eec:	4b8a      	ldr	r3, [pc, #552]	; (8042118 <HAL_RCC_ClockConfig+0x240>)
 8041eee:	681b      	ldr	r3, [r3, #0]
 8041ef0:	f003 030f 	and.w	r3, r3, #15
 8041ef4:	683a      	ldr	r2, [r7, #0]
 8041ef6:	429a      	cmp	r2, r3
 8041ef8:	d910      	bls.n	8041f1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041efa:	4b87      	ldr	r3, [pc, #540]	; (8042118 <HAL_RCC_ClockConfig+0x240>)
 8041efc:	681b      	ldr	r3, [r3, #0]
 8041efe:	f023 020f 	bic.w	r2, r3, #15
 8041f02:	4985      	ldr	r1, [pc, #532]	; (8042118 <HAL_RCC_ClockConfig+0x240>)
 8041f04:	683b      	ldr	r3, [r7, #0]
 8041f06:	4313      	orrs	r3, r2
 8041f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8041f0a:	4b83      	ldr	r3, [pc, #524]	; (8042118 <HAL_RCC_ClockConfig+0x240>)
 8041f0c:	681b      	ldr	r3, [r3, #0]
 8041f0e:	f003 030f 	and.w	r3, r3, #15
 8041f12:	683a      	ldr	r2, [r7, #0]
 8041f14:	429a      	cmp	r2, r3
 8041f16:	d001      	beq.n	8041f1c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8041f18:	2301      	movs	r3, #1
 8041f1a:	e184      	b.n	8042226 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8041f1c:	687b      	ldr	r3, [r7, #4]
 8041f1e:	681b      	ldr	r3, [r3, #0]
 8041f20:	f003 0304 	and.w	r3, r3, #4
 8041f24:	2b00      	cmp	r3, #0
 8041f26:	d010      	beq.n	8041f4a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8041f28:	687b      	ldr	r3, [r7, #4]
 8041f2a:	691a      	ldr	r2, [r3, #16]
 8041f2c:	4b7b      	ldr	r3, [pc, #492]	; (804211c <HAL_RCC_ClockConfig+0x244>)
 8041f2e:	699b      	ldr	r3, [r3, #24]
 8041f30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8041f34:	429a      	cmp	r2, r3
 8041f36:	d908      	bls.n	8041f4a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8041f38:	4b78      	ldr	r3, [pc, #480]	; (804211c <HAL_RCC_ClockConfig+0x244>)
 8041f3a:	699b      	ldr	r3, [r3, #24]
 8041f3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8041f40:	687b      	ldr	r3, [r7, #4]
 8041f42:	691b      	ldr	r3, [r3, #16]
 8041f44:	4975      	ldr	r1, [pc, #468]	; (804211c <HAL_RCC_ClockConfig+0x244>)
 8041f46:	4313      	orrs	r3, r2
 8041f48:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8041f4a:	687b      	ldr	r3, [r7, #4]
 8041f4c:	681b      	ldr	r3, [r3, #0]
 8041f4e:	f003 0308 	and.w	r3, r3, #8
 8041f52:	2b00      	cmp	r3, #0
 8041f54:	d010      	beq.n	8041f78 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8041f56:	687b      	ldr	r3, [r7, #4]
 8041f58:	695a      	ldr	r2, [r3, #20]
 8041f5a:	4b70      	ldr	r3, [pc, #448]	; (804211c <HAL_RCC_ClockConfig+0x244>)
 8041f5c:	69db      	ldr	r3, [r3, #28]
 8041f5e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8041f62:	429a      	cmp	r2, r3
 8041f64:	d908      	bls.n	8041f78 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8041f66:	4b6d      	ldr	r3, [pc, #436]	; (804211c <HAL_RCC_ClockConfig+0x244>)
 8041f68:	69db      	ldr	r3, [r3, #28]
 8041f6a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8041f6e:	687b      	ldr	r3, [r7, #4]
 8041f70:	695b      	ldr	r3, [r3, #20]
 8041f72:	496a      	ldr	r1, [pc, #424]	; (804211c <HAL_RCC_ClockConfig+0x244>)
 8041f74:	4313      	orrs	r3, r2
 8041f76:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8041f78:	687b      	ldr	r3, [r7, #4]
 8041f7a:	681b      	ldr	r3, [r3, #0]
 8041f7c:	f003 0310 	and.w	r3, r3, #16
 8041f80:	2b00      	cmp	r3, #0
 8041f82:	d010      	beq.n	8041fa6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8041f84:	687b      	ldr	r3, [r7, #4]
 8041f86:	699a      	ldr	r2, [r3, #24]
 8041f88:	4b64      	ldr	r3, [pc, #400]	; (804211c <HAL_RCC_ClockConfig+0x244>)
 8041f8a:	69db      	ldr	r3, [r3, #28]
 8041f8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8041f90:	429a      	cmp	r2, r3
 8041f92:	d908      	bls.n	8041fa6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8041f94:	4b61      	ldr	r3, [pc, #388]	; (804211c <HAL_RCC_ClockConfig+0x244>)
 8041f96:	69db      	ldr	r3, [r3, #28]
 8041f98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8041f9c:	687b      	ldr	r3, [r7, #4]
 8041f9e:	699b      	ldr	r3, [r3, #24]
 8041fa0:	495e      	ldr	r1, [pc, #376]	; (804211c <HAL_RCC_ClockConfig+0x244>)
 8041fa2:	4313      	orrs	r3, r2
 8041fa4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8041fa6:	687b      	ldr	r3, [r7, #4]
 8041fa8:	681b      	ldr	r3, [r3, #0]
 8041faa:	f003 0320 	and.w	r3, r3, #32
 8041fae:	2b00      	cmp	r3, #0
 8041fb0:	d010      	beq.n	8041fd4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8041fb2:	687b      	ldr	r3, [r7, #4]
 8041fb4:	69da      	ldr	r2, [r3, #28]
 8041fb6:	4b59      	ldr	r3, [pc, #356]	; (804211c <HAL_RCC_ClockConfig+0x244>)
 8041fb8:	6a1b      	ldr	r3, [r3, #32]
 8041fba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8041fbe:	429a      	cmp	r2, r3
 8041fc0:	d908      	bls.n	8041fd4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8041fc2:	4b56      	ldr	r3, [pc, #344]	; (804211c <HAL_RCC_ClockConfig+0x244>)
 8041fc4:	6a1b      	ldr	r3, [r3, #32]
 8041fc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8041fca:	687b      	ldr	r3, [r7, #4]
 8041fcc:	69db      	ldr	r3, [r3, #28]
 8041fce:	4953      	ldr	r1, [pc, #332]	; (804211c <HAL_RCC_ClockConfig+0x244>)
 8041fd0:	4313      	orrs	r3, r2
 8041fd2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8041fd4:	687b      	ldr	r3, [r7, #4]
 8041fd6:	681b      	ldr	r3, [r3, #0]
 8041fd8:	f003 0302 	and.w	r3, r3, #2
 8041fdc:	2b00      	cmp	r3, #0
 8041fde:	d010      	beq.n	8042002 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8041fe0:	687b      	ldr	r3, [r7, #4]
 8041fe2:	68da      	ldr	r2, [r3, #12]
 8041fe4:	4b4d      	ldr	r3, [pc, #308]	; (804211c <HAL_RCC_ClockConfig+0x244>)
 8041fe6:	699b      	ldr	r3, [r3, #24]
 8041fe8:	f003 030f 	and.w	r3, r3, #15
 8041fec:	429a      	cmp	r2, r3
 8041fee:	d908      	bls.n	8042002 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8041ff0:	4b4a      	ldr	r3, [pc, #296]	; (804211c <HAL_RCC_ClockConfig+0x244>)
 8041ff2:	699b      	ldr	r3, [r3, #24]
 8041ff4:	f023 020f 	bic.w	r2, r3, #15
 8041ff8:	687b      	ldr	r3, [r7, #4]
 8041ffa:	68db      	ldr	r3, [r3, #12]
 8041ffc:	4947      	ldr	r1, [pc, #284]	; (804211c <HAL_RCC_ClockConfig+0x244>)
 8041ffe:	4313      	orrs	r3, r2
 8042000:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8042002:	687b      	ldr	r3, [r7, #4]
 8042004:	681b      	ldr	r3, [r3, #0]
 8042006:	f003 0301 	and.w	r3, r3, #1
 804200a:	2b00      	cmp	r3, #0
 804200c:	d055      	beq.n	80420ba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 804200e:	4b43      	ldr	r3, [pc, #268]	; (804211c <HAL_RCC_ClockConfig+0x244>)
 8042010:	699b      	ldr	r3, [r3, #24]
 8042012:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8042016:	687b      	ldr	r3, [r7, #4]
 8042018:	689b      	ldr	r3, [r3, #8]
 804201a:	4940      	ldr	r1, [pc, #256]	; (804211c <HAL_RCC_ClockConfig+0x244>)
 804201c:	4313      	orrs	r3, r2
 804201e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8042020:	687b      	ldr	r3, [r7, #4]
 8042022:	685b      	ldr	r3, [r3, #4]
 8042024:	2b02      	cmp	r3, #2
 8042026:	d107      	bne.n	8042038 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8042028:	4b3c      	ldr	r3, [pc, #240]	; (804211c <HAL_RCC_ClockConfig+0x244>)
 804202a:	681b      	ldr	r3, [r3, #0]
 804202c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8042030:	2b00      	cmp	r3, #0
 8042032:	d121      	bne.n	8042078 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8042034:	2301      	movs	r3, #1
 8042036:	e0f6      	b.n	8042226 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8042038:	687b      	ldr	r3, [r7, #4]
 804203a:	685b      	ldr	r3, [r3, #4]
 804203c:	2b03      	cmp	r3, #3
 804203e:	d107      	bne.n	8042050 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8042040:	4b36      	ldr	r3, [pc, #216]	; (804211c <HAL_RCC_ClockConfig+0x244>)
 8042042:	681b      	ldr	r3, [r3, #0]
 8042044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8042048:	2b00      	cmp	r3, #0
 804204a:	d115      	bne.n	8042078 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 804204c:	2301      	movs	r3, #1
 804204e:	e0ea      	b.n	8042226 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8042050:	687b      	ldr	r3, [r7, #4]
 8042052:	685b      	ldr	r3, [r3, #4]
 8042054:	2b01      	cmp	r3, #1
 8042056:	d107      	bne.n	8042068 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8042058:	4b30      	ldr	r3, [pc, #192]	; (804211c <HAL_RCC_ClockConfig+0x244>)
 804205a:	681b      	ldr	r3, [r3, #0]
 804205c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042060:	2b00      	cmp	r3, #0
 8042062:	d109      	bne.n	8042078 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8042064:	2301      	movs	r3, #1
 8042066:	e0de      	b.n	8042226 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8042068:	4b2c      	ldr	r3, [pc, #176]	; (804211c <HAL_RCC_ClockConfig+0x244>)
 804206a:	681b      	ldr	r3, [r3, #0]
 804206c:	f003 0304 	and.w	r3, r3, #4
 8042070:	2b00      	cmp	r3, #0
 8042072:	d101      	bne.n	8042078 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8042074:	2301      	movs	r3, #1
 8042076:	e0d6      	b.n	8042226 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8042078:	4b28      	ldr	r3, [pc, #160]	; (804211c <HAL_RCC_ClockConfig+0x244>)
 804207a:	691b      	ldr	r3, [r3, #16]
 804207c:	f023 0207 	bic.w	r2, r3, #7
 8042080:	687b      	ldr	r3, [r7, #4]
 8042082:	685b      	ldr	r3, [r3, #4]
 8042084:	4925      	ldr	r1, [pc, #148]	; (804211c <HAL_RCC_ClockConfig+0x244>)
 8042086:	4313      	orrs	r3, r2
 8042088:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 804208a:	f7fe ff3f 	bl	8040f0c <HAL_GetTick>
 804208e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8042090:	e00a      	b.n	80420a8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8042092:	f7fe ff3b 	bl	8040f0c <HAL_GetTick>
 8042096:	4602      	mov	r2, r0
 8042098:	697b      	ldr	r3, [r7, #20]
 804209a:	1ad3      	subs	r3, r2, r3
 804209c:	f241 3288 	movw	r2, #5000	; 0x1388
 80420a0:	4293      	cmp	r3, r2
 80420a2:	d901      	bls.n	80420a8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80420a4:	2303      	movs	r3, #3
 80420a6:	e0be      	b.n	8042226 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80420a8:	4b1c      	ldr	r3, [pc, #112]	; (804211c <HAL_RCC_ClockConfig+0x244>)
 80420aa:	691b      	ldr	r3, [r3, #16]
 80420ac:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80420b0:	687b      	ldr	r3, [r7, #4]
 80420b2:	685b      	ldr	r3, [r3, #4]
 80420b4:	00db      	lsls	r3, r3, #3
 80420b6:	429a      	cmp	r2, r3
 80420b8:	d1eb      	bne.n	8042092 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80420ba:	687b      	ldr	r3, [r7, #4]
 80420bc:	681b      	ldr	r3, [r3, #0]
 80420be:	f003 0302 	and.w	r3, r3, #2
 80420c2:	2b00      	cmp	r3, #0
 80420c4:	d010      	beq.n	80420e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80420c6:	687b      	ldr	r3, [r7, #4]
 80420c8:	68da      	ldr	r2, [r3, #12]
 80420ca:	4b14      	ldr	r3, [pc, #80]	; (804211c <HAL_RCC_ClockConfig+0x244>)
 80420cc:	699b      	ldr	r3, [r3, #24]
 80420ce:	f003 030f 	and.w	r3, r3, #15
 80420d2:	429a      	cmp	r2, r3
 80420d4:	d208      	bcs.n	80420e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80420d6:	4b11      	ldr	r3, [pc, #68]	; (804211c <HAL_RCC_ClockConfig+0x244>)
 80420d8:	699b      	ldr	r3, [r3, #24]
 80420da:	f023 020f 	bic.w	r2, r3, #15
 80420de:	687b      	ldr	r3, [r7, #4]
 80420e0:	68db      	ldr	r3, [r3, #12]
 80420e2:	490e      	ldr	r1, [pc, #56]	; (804211c <HAL_RCC_ClockConfig+0x244>)
 80420e4:	4313      	orrs	r3, r2
 80420e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80420e8:	4b0b      	ldr	r3, [pc, #44]	; (8042118 <HAL_RCC_ClockConfig+0x240>)
 80420ea:	681b      	ldr	r3, [r3, #0]
 80420ec:	f003 030f 	and.w	r3, r3, #15
 80420f0:	683a      	ldr	r2, [r7, #0]
 80420f2:	429a      	cmp	r2, r3
 80420f4:	d214      	bcs.n	8042120 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80420f6:	4b08      	ldr	r3, [pc, #32]	; (8042118 <HAL_RCC_ClockConfig+0x240>)
 80420f8:	681b      	ldr	r3, [r3, #0]
 80420fa:	f023 020f 	bic.w	r2, r3, #15
 80420fe:	4906      	ldr	r1, [pc, #24]	; (8042118 <HAL_RCC_ClockConfig+0x240>)
 8042100:	683b      	ldr	r3, [r7, #0]
 8042102:	4313      	orrs	r3, r2
 8042104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8042106:	4b04      	ldr	r3, [pc, #16]	; (8042118 <HAL_RCC_ClockConfig+0x240>)
 8042108:	681b      	ldr	r3, [r3, #0]
 804210a:	f003 030f 	and.w	r3, r3, #15
 804210e:	683a      	ldr	r2, [r7, #0]
 8042110:	429a      	cmp	r2, r3
 8042112:	d005      	beq.n	8042120 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8042114:	2301      	movs	r3, #1
 8042116:	e086      	b.n	8042226 <HAL_RCC_ClockConfig+0x34e>
 8042118:	52002000 	.word	0x52002000
 804211c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8042120:	687b      	ldr	r3, [r7, #4]
 8042122:	681b      	ldr	r3, [r3, #0]
 8042124:	f003 0304 	and.w	r3, r3, #4
 8042128:	2b00      	cmp	r3, #0
 804212a:	d010      	beq.n	804214e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 804212c:	687b      	ldr	r3, [r7, #4]
 804212e:	691a      	ldr	r2, [r3, #16]
 8042130:	4b3f      	ldr	r3, [pc, #252]	; (8042230 <HAL_RCC_ClockConfig+0x358>)
 8042132:	699b      	ldr	r3, [r3, #24]
 8042134:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8042138:	429a      	cmp	r2, r3
 804213a:	d208      	bcs.n	804214e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 804213c:	4b3c      	ldr	r3, [pc, #240]	; (8042230 <HAL_RCC_ClockConfig+0x358>)
 804213e:	699b      	ldr	r3, [r3, #24]
 8042140:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8042144:	687b      	ldr	r3, [r7, #4]
 8042146:	691b      	ldr	r3, [r3, #16]
 8042148:	4939      	ldr	r1, [pc, #228]	; (8042230 <HAL_RCC_ClockConfig+0x358>)
 804214a:	4313      	orrs	r3, r2
 804214c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 804214e:	687b      	ldr	r3, [r7, #4]
 8042150:	681b      	ldr	r3, [r3, #0]
 8042152:	f003 0308 	and.w	r3, r3, #8
 8042156:	2b00      	cmp	r3, #0
 8042158:	d010      	beq.n	804217c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 804215a:	687b      	ldr	r3, [r7, #4]
 804215c:	695a      	ldr	r2, [r3, #20]
 804215e:	4b34      	ldr	r3, [pc, #208]	; (8042230 <HAL_RCC_ClockConfig+0x358>)
 8042160:	69db      	ldr	r3, [r3, #28]
 8042162:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8042166:	429a      	cmp	r2, r3
 8042168:	d208      	bcs.n	804217c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 804216a:	4b31      	ldr	r3, [pc, #196]	; (8042230 <HAL_RCC_ClockConfig+0x358>)
 804216c:	69db      	ldr	r3, [r3, #28]
 804216e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8042172:	687b      	ldr	r3, [r7, #4]
 8042174:	695b      	ldr	r3, [r3, #20]
 8042176:	492e      	ldr	r1, [pc, #184]	; (8042230 <HAL_RCC_ClockConfig+0x358>)
 8042178:	4313      	orrs	r3, r2
 804217a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 804217c:	687b      	ldr	r3, [r7, #4]
 804217e:	681b      	ldr	r3, [r3, #0]
 8042180:	f003 0310 	and.w	r3, r3, #16
 8042184:	2b00      	cmp	r3, #0
 8042186:	d010      	beq.n	80421aa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8042188:	687b      	ldr	r3, [r7, #4]
 804218a:	699a      	ldr	r2, [r3, #24]
 804218c:	4b28      	ldr	r3, [pc, #160]	; (8042230 <HAL_RCC_ClockConfig+0x358>)
 804218e:	69db      	ldr	r3, [r3, #28]
 8042190:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8042194:	429a      	cmp	r2, r3
 8042196:	d208      	bcs.n	80421aa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8042198:	4b25      	ldr	r3, [pc, #148]	; (8042230 <HAL_RCC_ClockConfig+0x358>)
 804219a:	69db      	ldr	r3, [r3, #28]
 804219c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80421a0:	687b      	ldr	r3, [r7, #4]
 80421a2:	699b      	ldr	r3, [r3, #24]
 80421a4:	4922      	ldr	r1, [pc, #136]	; (8042230 <HAL_RCC_ClockConfig+0x358>)
 80421a6:	4313      	orrs	r3, r2
 80421a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80421aa:	687b      	ldr	r3, [r7, #4]
 80421ac:	681b      	ldr	r3, [r3, #0]
 80421ae:	f003 0320 	and.w	r3, r3, #32
 80421b2:	2b00      	cmp	r3, #0
 80421b4:	d010      	beq.n	80421d8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80421b6:	687b      	ldr	r3, [r7, #4]
 80421b8:	69da      	ldr	r2, [r3, #28]
 80421ba:	4b1d      	ldr	r3, [pc, #116]	; (8042230 <HAL_RCC_ClockConfig+0x358>)
 80421bc:	6a1b      	ldr	r3, [r3, #32]
 80421be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80421c2:	429a      	cmp	r2, r3
 80421c4:	d208      	bcs.n	80421d8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80421c6:	4b1a      	ldr	r3, [pc, #104]	; (8042230 <HAL_RCC_ClockConfig+0x358>)
 80421c8:	6a1b      	ldr	r3, [r3, #32]
 80421ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80421ce:	687b      	ldr	r3, [r7, #4]
 80421d0:	69db      	ldr	r3, [r3, #28]
 80421d2:	4917      	ldr	r1, [pc, #92]	; (8042230 <HAL_RCC_ClockConfig+0x358>)
 80421d4:	4313      	orrs	r3, r2
 80421d6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80421d8:	f000 f89e 	bl	8042318 <HAL_RCC_GetSysClockFreq>
 80421dc:	4602      	mov	r2, r0
 80421de:	4b14      	ldr	r3, [pc, #80]	; (8042230 <HAL_RCC_ClockConfig+0x358>)
 80421e0:	699b      	ldr	r3, [r3, #24]
 80421e2:	0a1b      	lsrs	r3, r3, #8
 80421e4:	f003 030f 	and.w	r3, r3, #15
 80421e8:	4912      	ldr	r1, [pc, #72]	; (8042234 <HAL_RCC_ClockConfig+0x35c>)
 80421ea:	5ccb      	ldrb	r3, [r1, r3]
 80421ec:	f003 031f 	and.w	r3, r3, #31
 80421f0:	fa22 f303 	lsr.w	r3, r2, r3
 80421f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80421f6:	4b0e      	ldr	r3, [pc, #56]	; (8042230 <HAL_RCC_ClockConfig+0x358>)
 80421f8:	699b      	ldr	r3, [r3, #24]
 80421fa:	f003 030f 	and.w	r3, r3, #15
 80421fe:	4a0d      	ldr	r2, [pc, #52]	; (8042234 <HAL_RCC_ClockConfig+0x35c>)
 8042200:	5cd3      	ldrb	r3, [r2, r3]
 8042202:	f003 031f 	and.w	r3, r3, #31
 8042206:	693a      	ldr	r2, [r7, #16]
 8042208:	fa22 f303 	lsr.w	r3, r2, r3
 804220c:	4a0a      	ldr	r2, [pc, #40]	; (8042238 <HAL_RCC_ClockConfig+0x360>)
 804220e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8042210:	4a0a      	ldr	r2, [pc, #40]	; (804223c <HAL_RCC_ClockConfig+0x364>)
 8042212:	693b      	ldr	r3, [r7, #16]
 8042214:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8042216:	4b0a      	ldr	r3, [pc, #40]	; (8042240 <HAL_RCC_ClockConfig+0x368>)
 8042218:	681b      	ldr	r3, [r3, #0]
 804221a:	4618      	mov	r0, r3
 804221c:	f7fe fe2c 	bl	8040e78 <HAL_InitTick>
 8042220:	4603      	mov	r3, r0
 8042222:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8042224:	7bfb      	ldrb	r3, [r7, #15]
}
 8042226:	4618      	mov	r0, r3
 8042228:	3718      	adds	r7, #24
 804222a:	46bd      	mov	sp, r7
 804222c:	bd80      	pop	{r7, pc}
 804222e:	bf00      	nop
 8042230:	58024400 	.word	0x58024400
 8042234:	08046724 	.word	0x08046724
 8042238:	24000004 	.word	0x24000004
 804223c:	24000000 	.word	0x24000000
 8042240:	24000008 	.word	0x24000008

08042244 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8042244:	b580      	push	{r7, lr}
 8042246:	b08c      	sub	sp, #48	; 0x30
 8042248:	af00      	add	r7, sp, #0
 804224a:	60f8      	str	r0, [r7, #12]
 804224c:	60b9      	str	r1, [r7, #8]
 804224e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8042250:	68fb      	ldr	r3, [r7, #12]
 8042252:	2b00      	cmp	r3, #0
 8042254:	d12a      	bne.n	80422ac <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8042256:	4b2d      	ldr	r3, [pc, #180]	; (804230c <HAL_RCC_MCOConfig+0xc8>)
 8042258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 804225c:	4a2b      	ldr	r2, [pc, #172]	; (804230c <HAL_RCC_MCOConfig+0xc8>)
 804225e:	f043 0301 	orr.w	r3, r3, #1
 8042262:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8042266:	4b29      	ldr	r3, [pc, #164]	; (804230c <HAL_RCC_MCOConfig+0xc8>)
 8042268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 804226c:	f003 0301 	and.w	r3, r3, #1
 8042270:	61bb      	str	r3, [r7, #24]
 8042272:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8042274:	f44f 7380 	mov.w	r3, #256	; 0x100
 8042278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804227a:	2302      	movs	r3, #2
 804227c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804227e:	2303      	movs	r3, #3
 8042280:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8042282:	2300      	movs	r3, #0
 8042284:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8042286:	2300      	movs	r3, #0
 8042288:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 804228a:	f107 031c 	add.w	r3, r7, #28
 804228e:	4619      	mov	r1, r3
 8042290:	481f      	ldr	r0, [pc, #124]	; (8042310 <HAL_RCC_MCOConfig+0xcc>)
 8042292:	f7fe ff5b 	bl	804114c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8042296:	4b1d      	ldr	r3, [pc, #116]	; (804230c <HAL_RCC_MCOConfig+0xc8>)
 8042298:	691b      	ldr	r3, [r3, #16]
 804229a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 804229e:	68b9      	ldr	r1, [r7, #8]
 80422a0:	687b      	ldr	r3, [r7, #4]
 80422a2:	430b      	orrs	r3, r1
 80422a4:	4919      	ldr	r1, [pc, #100]	; (804230c <HAL_RCC_MCOConfig+0xc8>)
 80422a6:	4313      	orrs	r3, r2
 80422a8:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80422aa:	e02a      	b.n	8042302 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80422ac:	4b17      	ldr	r3, [pc, #92]	; (804230c <HAL_RCC_MCOConfig+0xc8>)
 80422ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80422b2:	4a16      	ldr	r2, [pc, #88]	; (804230c <HAL_RCC_MCOConfig+0xc8>)
 80422b4:	f043 0304 	orr.w	r3, r3, #4
 80422b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80422bc:	4b13      	ldr	r3, [pc, #76]	; (804230c <HAL_RCC_MCOConfig+0xc8>)
 80422be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80422c2:	f003 0304 	and.w	r3, r3, #4
 80422c6:	617b      	str	r3, [r7, #20]
 80422c8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80422ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80422ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80422d0:	2302      	movs	r3, #2
 80422d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80422d4:	2303      	movs	r3, #3
 80422d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80422d8:	2300      	movs	r3, #0
 80422da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80422dc:	2300      	movs	r3, #0
 80422de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80422e0:	f107 031c 	add.w	r3, r7, #28
 80422e4:	4619      	mov	r1, r3
 80422e6:	480b      	ldr	r0, [pc, #44]	; (8042314 <HAL_RCC_MCOConfig+0xd0>)
 80422e8:	f7fe ff30 	bl	804114c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 80422ec:	4b07      	ldr	r3, [pc, #28]	; (804230c <HAL_RCC_MCOConfig+0xc8>)
 80422ee:	691b      	ldr	r3, [r3, #16]
 80422f0:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 80422f4:	687b      	ldr	r3, [r7, #4]
 80422f6:	01d9      	lsls	r1, r3, #7
 80422f8:	68bb      	ldr	r3, [r7, #8]
 80422fa:	430b      	orrs	r3, r1
 80422fc:	4903      	ldr	r1, [pc, #12]	; (804230c <HAL_RCC_MCOConfig+0xc8>)
 80422fe:	4313      	orrs	r3, r2
 8042300:	610b      	str	r3, [r1, #16]
}
 8042302:	bf00      	nop
 8042304:	3730      	adds	r7, #48	; 0x30
 8042306:	46bd      	mov	sp, r7
 8042308:	bd80      	pop	{r7, pc}
 804230a:	bf00      	nop
 804230c:	58024400 	.word	0x58024400
 8042310:	58020000 	.word	0x58020000
 8042314:	58020800 	.word	0x58020800

08042318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8042318:	b480      	push	{r7}
 804231a:	b089      	sub	sp, #36	; 0x24
 804231c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 804231e:	4bb3      	ldr	r3, [pc, #716]	; (80425ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042320:	691b      	ldr	r3, [r3, #16]
 8042322:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8042326:	2b18      	cmp	r3, #24
 8042328:	f200 8155 	bhi.w	80425d6 <HAL_RCC_GetSysClockFreq+0x2be>
 804232c:	a201      	add	r2, pc, #4	; (adr r2, 8042334 <HAL_RCC_GetSysClockFreq+0x1c>)
 804232e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042332:	bf00      	nop
 8042334:	08042399 	.word	0x08042399
 8042338:	080425d7 	.word	0x080425d7
 804233c:	080425d7 	.word	0x080425d7
 8042340:	080425d7 	.word	0x080425d7
 8042344:	080425d7 	.word	0x080425d7
 8042348:	080425d7 	.word	0x080425d7
 804234c:	080425d7 	.word	0x080425d7
 8042350:	080425d7 	.word	0x080425d7
 8042354:	080423bf 	.word	0x080423bf
 8042358:	080425d7 	.word	0x080425d7
 804235c:	080425d7 	.word	0x080425d7
 8042360:	080425d7 	.word	0x080425d7
 8042364:	080425d7 	.word	0x080425d7
 8042368:	080425d7 	.word	0x080425d7
 804236c:	080425d7 	.word	0x080425d7
 8042370:	080425d7 	.word	0x080425d7
 8042374:	080423c5 	.word	0x080423c5
 8042378:	080425d7 	.word	0x080425d7
 804237c:	080425d7 	.word	0x080425d7
 8042380:	080425d7 	.word	0x080425d7
 8042384:	080425d7 	.word	0x080425d7
 8042388:	080425d7 	.word	0x080425d7
 804238c:	080425d7 	.word	0x080425d7
 8042390:	080425d7 	.word	0x080425d7
 8042394:	080423cb 	.word	0x080423cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8042398:	4b94      	ldr	r3, [pc, #592]	; (80425ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 804239a:	681b      	ldr	r3, [r3, #0]
 804239c:	f003 0320 	and.w	r3, r3, #32
 80423a0:	2b00      	cmp	r3, #0
 80423a2:	d009      	beq.n	80423b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80423a4:	4b91      	ldr	r3, [pc, #580]	; (80425ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80423a6:	681b      	ldr	r3, [r3, #0]
 80423a8:	08db      	lsrs	r3, r3, #3
 80423aa:	f003 0303 	and.w	r3, r3, #3
 80423ae:	4a90      	ldr	r2, [pc, #576]	; (80425f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80423b0:	fa22 f303 	lsr.w	r3, r2, r3
 80423b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80423b6:	e111      	b.n	80425dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80423b8:	4b8d      	ldr	r3, [pc, #564]	; (80425f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80423ba:	61bb      	str	r3, [r7, #24]
      break;
 80423bc:	e10e      	b.n	80425dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80423be:	4b8d      	ldr	r3, [pc, #564]	; (80425f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80423c0:	61bb      	str	r3, [r7, #24]
      break;
 80423c2:	e10b      	b.n	80425dc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80423c4:	4b8c      	ldr	r3, [pc, #560]	; (80425f8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80423c6:	61bb      	str	r3, [r7, #24]
      break;
 80423c8:	e108      	b.n	80425dc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80423ca:	4b88      	ldr	r3, [pc, #544]	; (80425ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80423cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80423ce:	f003 0303 	and.w	r3, r3, #3
 80423d2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80423d4:	4b85      	ldr	r3, [pc, #532]	; (80425ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80423d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80423d8:	091b      	lsrs	r3, r3, #4
 80423da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80423de:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80423e0:	4b82      	ldr	r3, [pc, #520]	; (80425ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80423e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80423e4:	f003 0301 	and.w	r3, r3, #1
 80423e8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80423ea:	4b80      	ldr	r3, [pc, #512]	; (80425ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80423ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80423ee:	08db      	lsrs	r3, r3, #3
 80423f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80423f4:	68fa      	ldr	r2, [r7, #12]
 80423f6:	fb02 f303 	mul.w	r3, r2, r3
 80423fa:	ee07 3a90 	vmov	s15, r3
 80423fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8042402:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8042406:	693b      	ldr	r3, [r7, #16]
 8042408:	2b00      	cmp	r3, #0
 804240a:	f000 80e1 	beq.w	80425d0 <HAL_RCC_GetSysClockFreq+0x2b8>
 804240e:	697b      	ldr	r3, [r7, #20]
 8042410:	2b02      	cmp	r3, #2
 8042412:	f000 8083 	beq.w	804251c <HAL_RCC_GetSysClockFreq+0x204>
 8042416:	697b      	ldr	r3, [r7, #20]
 8042418:	2b02      	cmp	r3, #2
 804241a:	f200 80a1 	bhi.w	8042560 <HAL_RCC_GetSysClockFreq+0x248>
 804241e:	697b      	ldr	r3, [r7, #20]
 8042420:	2b00      	cmp	r3, #0
 8042422:	d003      	beq.n	804242c <HAL_RCC_GetSysClockFreq+0x114>
 8042424:	697b      	ldr	r3, [r7, #20]
 8042426:	2b01      	cmp	r3, #1
 8042428:	d056      	beq.n	80424d8 <HAL_RCC_GetSysClockFreq+0x1c0>
 804242a:	e099      	b.n	8042560 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 804242c:	4b6f      	ldr	r3, [pc, #444]	; (80425ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 804242e:	681b      	ldr	r3, [r3, #0]
 8042430:	f003 0320 	and.w	r3, r3, #32
 8042434:	2b00      	cmp	r3, #0
 8042436:	d02d      	beq.n	8042494 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8042438:	4b6c      	ldr	r3, [pc, #432]	; (80425ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 804243a:	681b      	ldr	r3, [r3, #0]
 804243c:	08db      	lsrs	r3, r3, #3
 804243e:	f003 0303 	and.w	r3, r3, #3
 8042442:	4a6b      	ldr	r2, [pc, #428]	; (80425f0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8042444:	fa22 f303 	lsr.w	r3, r2, r3
 8042448:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 804244a:	687b      	ldr	r3, [r7, #4]
 804244c:	ee07 3a90 	vmov	s15, r3
 8042450:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8042454:	693b      	ldr	r3, [r7, #16]
 8042456:	ee07 3a90 	vmov	s15, r3
 804245a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804245e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8042462:	4b62      	ldr	r3, [pc, #392]	; (80425ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804246a:	ee07 3a90 	vmov	s15, r3
 804246e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8042472:	ed97 6a02 	vldr	s12, [r7, #8]
 8042476:	eddf 5a61 	vldr	s11, [pc, #388]	; 80425fc <HAL_RCC_GetSysClockFreq+0x2e4>
 804247a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 804247e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8042482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8042486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 804248a:	ee67 7a27 	vmul.f32	s15, s14, s15
 804248e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8042492:	e087      	b.n	80425a4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8042494:	693b      	ldr	r3, [r7, #16]
 8042496:	ee07 3a90 	vmov	s15, r3
 804249a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804249e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8042600 <HAL_RCC_GetSysClockFreq+0x2e8>
 80424a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80424a6:	4b51      	ldr	r3, [pc, #324]	; (80425ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80424a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80424aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80424ae:	ee07 3a90 	vmov	s15, r3
 80424b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80424b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80424ba:	eddf 5a50 	vldr	s11, [pc, #320]	; 80425fc <HAL_RCC_GetSysClockFreq+0x2e4>
 80424be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80424c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80424c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80424ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80424ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80424d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80424d6:	e065      	b.n	80425a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80424d8:	693b      	ldr	r3, [r7, #16]
 80424da:	ee07 3a90 	vmov	s15, r3
 80424de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80424e2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8042604 <HAL_RCC_GetSysClockFreq+0x2ec>
 80424e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80424ea:	4b40      	ldr	r3, [pc, #256]	; (80425ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80424ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80424ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80424f2:	ee07 3a90 	vmov	s15, r3
 80424f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80424fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80424fe:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80425fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8042502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8042506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804250a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 804250e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8042512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8042516:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 804251a:	e043      	b.n	80425a4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 804251c:	693b      	ldr	r3, [r7, #16]
 804251e:	ee07 3a90 	vmov	s15, r3
 8042522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8042526:	eddf 6a38 	vldr	s13, [pc, #224]	; 8042608 <HAL_RCC_GetSysClockFreq+0x2f0>
 804252a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 804252e:	4b2f      	ldr	r3, [pc, #188]	; (80425ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8042536:	ee07 3a90 	vmov	s15, r3
 804253a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804253e:	ed97 6a02 	vldr	s12, [r7, #8]
 8042542:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80425fc <HAL_RCC_GetSysClockFreq+0x2e4>
 8042546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 804254a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804254e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8042552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8042556:	ee67 7a27 	vmul.f32	s15, s14, s15
 804255a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 804255e:	e021      	b.n	80425a4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8042560:	693b      	ldr	r3, [r7, #16]
 8042562:	ee07 3a90 	vmov	s15, r3
 8042566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804256a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8042604 <HAL_RCC_GetSysClockFreq+0x2ec>
 804256e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8042572:	4b1e      	ldr	r3, [pc, #120]	; (80425ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 804257a:	ee07 3a90 	vmov	s15, r3
 804257e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8042582:	ed97 6a02 	vldr	s12, [r7, #8]
 8042586:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80425fc <HAL_RCC_GetSysClockFreq+0x2e4>
 804258a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 804258e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8042592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8042596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 804259a:	ee67 7a27 	vmul.f32	s15, s14, s15
 804259e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80425a2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80425a4:	4b11      	ldr	r3, [pc, #68]	; (80425ec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80425a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80425a8:	0a5b      	lsrs	r3, r3, #9
 80425aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80425ae:	3301      	adds	r3, #1
 80425b0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80425b2:	683b      	ldr	r3, [r7, #0]
 80425b4:	ee07 3a90 	vmov	s15, r3
 80425b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80425bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80425c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80425c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80425c8:	ee17 3a90 	vmov	r3, s15
 80425cc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80425ce:	e005      	b.n	80425dc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80425d0:	2300      	movs	r3, #0
 80425d2:	61bb      	str	r3, [r7, #24]
      break;
 80425d4:	e002      	b.n	80425dc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80425d6:	4b07      	ldr	r3, [pc, #28]	; (80425f4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80425d8:	61bb      	str	r3, [r7, #24]
      break;
 80425da:	bf00      	nop
  }

  return sysclockfreq;
 80425dc:	69bb      	ldr	r3, [r7, #24]
}
 80425de:	4618      	mov	r0, r3
 80425e0:	3724      	adds	r7, #36	; 0x24
 80425e2:	46bd      	mov	sp, r7
 80425e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80425e8:	4770      	bx	lr
 80425ea:	bf00      	nop
 80425ec:	58024400 	.word	0x58024400
 80425f0:	03d09000 	.word	0x03d09000
 80425f4:	003d0900 	.word	0x003d0900
 80425f8:	017d7840 	.word	0x017d7840
 80425fc:	46000000 	.word	0x46000000
 8042600:	4c742400 	.word	0x4c742400
 8042604:	4a742400 	.word	0x4a742400
 8042608:	4bbebc20 	.word	0x4bbebc20

0804260c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 804260c:	b580      	push	{r7, lr}
 804260e:	b082      	sub	sp, #8
 8042610:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8042612:	f7ff fe81 	bl	8042318 <HAL_RCC_GetSysClockFreq>
 8042616:	4602      	mov	r2, r0
 8042618:	4b10      	ldr	r3, [pc, #64]	; (804265c <HAL_RCC_GetHCLKFreq+0x50>)
 804261a:	699b      	ldr	r3, [r3, #24]
 804261c:	0a1b      	lsrs	r3, r3, #8
 804261e:	f003 030f 	and.w	r3, r3, #15
 8042622:	490f      	ldr	r1, [pc, #60]	; (8042660 <HAL_RCC_GetHCLKFreq+0x54>)
 8042624:	5ccb      	ldrb	r3, [r1, r3]
 8042626:	f003 031f 	and.w	r3, r3, #31
 804262a:	fa22 f303 	lsr.w	r3, r2, r3
 804262e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8042630:	4b0a      	ldr	r3, [pc, #40]	; (804265c <HAL_RCC_GetHCLKFreq+0x50>)
 8042632:	699b      	ldr	r3, [r3, #24]
 8042634:	f003 030f 	and.w	r3, r3, #15
 8042638:	4a09      	ldr	r2, [pc, #36]	; (8042660 <HAL_RCC_GetHCLKFreq+0x54>)
 804263a:	5cd3      	ldrb	r3, [r2, r3]
 804263c:	f003 031f 	and.w	r3, r3, #31
 8042640:	687a      	ldr	r2, [r7, #4]
 8042642:	fa22 f303 	lsr.w	r3, r2, r3
 8042646:	4a07      	ldr	r2, [pc, #28]	; (8042664 <HAL_RCC_GetHCLKFreq+0x58>)
 8042648:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 804264a:	4a07      	ldr	r2, [pc, #28]	; (8042668 <HAL_RCC_GetHCLKFreq+0x5c>)
 804264c:	687b      	ldr	r3, [r7, #4]
 804264e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8042650:	4b04      	ldr	r3, [pc, #16]	; (8042664 <HAL_RCC_GetHCLKFreq+0x58>)
 8042652:	681b      	ldr	r3, [r3, #0]
}
 8042654:	4618      	mov	r0, r3
 8042656:	3708      	adds	r7, #8
 8042658:	46bd      	mov	sp, r7
 804265a:	bd80      	pop	{r7, pc}
 804265c:	58024400 	.word	0x58024400
 8042660:	08046724 	.word	0x08046724
 8042664:	24000004 	.word	0x24000004
 8042668:	24000000 	.word	0x24000000

0804266c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 804266c:	b580      	push	{r7, lr}
 804266e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8042670:	f7ff ffcc 	bl	804260c <HAL_RCC_GetHCLKFreq>
 8042674:	4602      	mov	r2, r0
 8042676:	4b06      	ldr	r3, [pc, #24]	; (8042690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8042678:	69db      	ldr	r3, [r3, #28]
 804267a:	091b      	lsrs	r3, r3, #4
 804267c:	f003 0307 	and.w	r3, r3, #7
 8042680:	4904      	ldr	r1, [pc, #16]	; (8042694 <HAL_RCC_GetPCLK1Freq+0x28>)
 8042682:	5ccb      	ldrb	r3, [r1, r3]
 8042684:	f003 031f 	and.w	r3, r3, #31
 8042688:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 804268c:	4618      	mov	r0, r3
 804268e:	bd80      	pop	{r7, pc}
 8042690:	58024400 	.word	0x58024400
 8042694:	08046724 	.word	0x08046724

08042698 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8042698:	b580      	push	{r7, lr}
 804269a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 804269c:	f7ff ffb6 	bl	804260c <HAL_RCC_GetHCLKFreq>
 80426a0:	4602      	mov	r2, r0
 80426a2:	4b06      	ldr	r3, [pc, #24]	; (80426bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80426a4:	69db      	ldr	r3, [r3, #28]
 80426a6:	0a1b      	lsrs	r3, r3, #8
 80426a8:	f003 0307 	and.w	r3, r3, #7
 80426ac:	4904      	ldr	r1, [pc, #16]	; (80426c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80426ae:	5ccb      	ldrb	r3, [r1, r3]
 80426b0:	f003 031f 	and.w	r3, r3, #31
 80426b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80426b8:	4618      	mov	r0, r3
 80426ba:	bd80      	pop	{r7, pc}
 80426bc:	58024400 	.word	0x58024400
 80426c0:	08046724 	.word	0x08046724

080426c4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80426c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80426c8:	b0cc      	sub	sp, #304	; 0x130
 80426ca:	af00      	add	r7, sp, #0
 80426cc:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80426d0:	2300      	movs	r3, #0
 80426d2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80426d6:	2300      	movs	r3, #0
 80426d8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80426dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80426e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80426e4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80426e8:	2500      	movs	r5, #0
 80426ea:	ea54 0305 	orrs.w	r3, r4, r5
 80426ee:	d049      	beq.n	8042784 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80426f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80426f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80426f6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80426fa:	d02f      	beq.n	804275c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80426fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8042700:	d828      	bhi.n	8042754 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8042702:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8042706:	d01a      	beq.n	804273e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8042708:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 804270c:	d822      	bhi.n	8042754 <HAL_RCCEx_PeriphCLKConfig+0x90>
 804270e:	2b00      	cmp	r3, #0
 8042710:	d003      	beq.n	804271a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8042712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8042716:	d007      	beq.n	8042728 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8042718:	e01c      	b.n	8042754 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804271a:	4bb8      	ldr	r3, [pc, #736]	; (80429fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 804271c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804271e:	4ab7      	ldr	r2, [pc, #732]	; (80429fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8042720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8042724:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8042726:	e01a      	b.n	804275e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8042728:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804272c:	3308      	adds	r3, #8
 804272e:	2102      	movs	r1, #2
 8042730:	4618      	mov	r0, r3
 8042732:	f001 fccf 	bl	80440d4 <RCCEx_PLL2_Config>
 8042736:	4603      	mov	r3, r0
 8042738:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 804273c:	e00f      	b.n	804275e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 804273e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042742:	3328      	adds	r3, #40	; 0x28
 8042744:	2102      	movs	r1, #2
 8042746:	4618      	mov	r0, r3
 8042748:	f001 fd76 	bl	8044238 <RCCEx_PLL3_Config>
 804274c:	4603      	mov	r3, r0
 804274e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8042752:	e004      	b.n	804275e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8042754:	2301      	movs	r3, #1
 8042756:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 804275a:	e000      	b.n	804275e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 804275c:	bf00      	nop
    }

    if (ret == HAL_OK)
 804275e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042762:	2b00      	cmp	r3, #0
 8042764:	d10a      	bne.n	804277c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8042766:	4ba5      	ldr	r3, [pc, #660]	; (80429fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8042768:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804276a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 804276e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042772:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8042774:	4aa1      	ldr	r2, [pc, #644]	; (80429fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8042776:	430b      	orrs	r3, r1
 8042778:	6513      	str	r3, [r2, #80]	; 0x50
 804277a:	e003      	b.n	8042784 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804277c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042780:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8042784:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042788:	e9d3 2300 	ldrd	r2, r3, [r3]
 804278c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8042790:	f04f 0900 	mov.w	r9, #0
 8042794:	ea58 0309 	orrs.w	r3, r8, r9
 8042798:	d047      	beq.n	804282a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 804279a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804279e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80427a0:	2b04      	cmp	r3, #4
 80427a2:	d82a      	bhi.n	80427fa <HAL_RCCEx_PeriphCLKConfig+0x136>
 80427a4:	a201      	add	r2, pc, #4	; (adr r2, 80427ac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80427a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80427aa:	bf00      	nop
 80427ac:	080427c1 	.word	0x080427c1
 80427b0:	080427cf 	.word	0x080427cf
 80427b4:	080427e5 	.word	0x080427e5
 80427b8:	08042803 	.word	0x08042803
 80427bc:	08042803 	.word	0x08042803
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80427c0:	4b8e      	ldr	r3, [pc, #568]	; (80429fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80427c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80427c4:	4a8d      	ldr	r2, [pc, #564]	; (80429fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80427c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80427ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80427cc:	e01a      	b.n	8042804 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80427ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80427d2:	3308      	adds	r3, #8
 80427d4:	2100      	movs	r1, #0
 80427d6:	4618      	mov	r0, r3
 80427d8:	f001 fc7c 	bl	80440d4 <RCCEx_PLL2_Config>
 80427dc:	4603      	mov	r3, r0
 80427de:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80427e2:	e00f      	b.n	8042804 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80427e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80427e8:	3328      	adds	r3, #40	; 0x28
 80427ea:	2100      	movs	r1, #0
 80427ec:	4618      	mov	r0, r3
 80427ee:	f001 fd23 	bl	8044238 <RCCEx_PLL3_Config>
 80427f2:	4603      	mov	r3, r0
 80427f4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80427f8:	e004      	b.n	8042804 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80427fa:	2301      	movs	r3, #1
 80427fc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8042800:	e000      	b.n	8042804 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8042802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042804:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042808:	2b00      	cmp	r3, #0
 804280a:	d10a      	bne.n	8042822 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 804280c:	4b7b      	ldr	r3, [pc, #492]	; (80429fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 804280e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042810:	f023 0107 	bic.w	r1, r3, #7
 8042814:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804281a:	4a78      	ldr	r2, [pc, #480]	; (80429fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 804281c:	430b      	orrs	r3, r1
 804281e:	6513      	str	r3, [r2, #80]	; 0x50
 8042820:	e003      	b.n	804282a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042822:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042826:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 804282a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804282e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042832:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8042836:	f04f 0b00 	mov.w	fp, #0
 804283a:	ea5a 030b 	orrs.w	r3, sl, fp
 804283e:	d04c      	beq.n	80428da <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8042840:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8042846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804284a:	d030      	beq.n	80428ae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 804284c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8042850:	d829      	bhi.n	80428a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8042852:	2bc0      	cmp	r3, #192	; 0xc0
 8042854:	d02d      	beq.n	80428b2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8042856:	2bc0      	cmp	r3, #192	; 0xc0
 8042858:	d825      	bhi.n	80428a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 804285a:	2b80      	cmp	r3, #128	; 0x80
 804285c:	d018      	beq.n	8042890 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 804285e:	2b80      	cmp	r3, #128	; 0x80
 8042860:	d821      	bhi.n	80428a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8042862:	2b00      	cmp	r3, #0
 8042864:	d002      	beq.n	804286c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8042866:	2b40      	cmp	r3, #64	; 0x40
 8042868:	d007      	beq.n	804287a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 804286a:	e01c      	b.n	80428a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804286c:	4b63      	ldr	r3, [pc, #396]	; (80429fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 804286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042870:	4a62      	ldr	r2, [pc, #392]	; (80429fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8042872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8042876:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8042878:	e01c      	b.n	80428b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 804287a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804287e:	3308      	adds	r3, #8
 8042880:	2100      	movs	r1, #0
 8042882:	4618      	mov	r0, r3
 8042884:	f001 fc26 	bl	80440d4 <RCCEx_PLL2_Config>
 8042888:	4603      	mov	r3, r0
 804288a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 804288e:	e011      	b.n	80428b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8042890:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042894:	3328      	adds	r3, #40	; 0x28
 8042896:	2100      	movs	r1, #0
 8042898:	4618      	mov	r0, r3
 804289a:	f001 fccd 	bl	8044238 <RCCEx_PLL3_Config>
 804289e:	4603      	mov	r3, r0
 80428a0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80428a4:	e006      	b.n	80428b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80428a6:	2301      	movs	r3, #1
 80428a8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80428ac:	e002      	b.n	80428b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80428ae:	bf00      	nop
 80428b0:	e000      	b.n	80428b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80428b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80428b4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80428b8:	2b00      	cmp	r3, #0
 80428ba:	d10a      	bne.n	80428d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80428bc:	4b4f      	ldr	r3, [pc, #316]	; (80429fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80428be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80428c0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80428c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80428c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80428ca:	4a4c      	ldr	r2, [pc, #304]	; (80429fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80428cc:	430b      	orrs	r3, r1
 80428ce:	6513      	str	r3, [r2, #80]	; 0x50
 80428d0:	e003      	b.n	80428da <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80428d2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80428d6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80428da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80428de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80428e2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80428e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80428ea:	2300      	movs	r3, #0
 80428ec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80428f0:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 80428f4:	460b      	mov	r3, r1
 80428f6:	4313      	orrs	r3, r2
 80428f8:	d053      	beq.n	80429a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80428fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80428fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8042902:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8042906:	d035      	beq.n	8042974 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8042908:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 804290c:	d82e      	bhi.n	804296c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 804290e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8042912:	d031      	beq.n	8042978 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8042914:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8042918:	d828      	bhi.n	804296c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 804291a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 804291e:	d01a      	beq.n	8042956 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8042920:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8042924:	d822      	bhi.n	804296c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8042926:	2b00      	cmp	r3, #0
 8042928:	d003      	beq.n	8042932 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 804292a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 804292e:	d007      	beq.n	8042940 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8042930:	e01c      	b.n	804296c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8042932:	4b32      	ldr	r3, [pc, #200]	; (80429fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8042934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042936:	4a31      	ldr	r2, [pc, #196]	; (80429fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8042938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804293c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 804293e:	e01c      	b.n	804297a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8042940:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042944:	3308      	adds	r3, #8
 8042946:	2100      	movs	r1, #0
 8042948:	4618      	mov	r0, r3
 804294a:	f001 fbc3 	bl	80440d4 <RCCEx_PLL2_Config>
 804294e:	4603      	mov	r3, r0
 8042950:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8042954:	e011      	b.n	804297a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8042956:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804295a:	3328      	adds	r3, #40	; 0x28
 804295c:	2100      	movs	r1, #0
 804295e:	4618      	mov	r0, r3
 8042960:	f001 fc6a 	bl	8044238 <RCCEx_PLL3_Config>
 8042964:	4603      	mov	r3, r0
 8042966:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 804296a:	e006      	b.n	804297a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 804296c:	2301      	movs	r3, #1
 804296e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8042972:	e002      	b.n	804297a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8042974:	bf00      	nop
 8042976:	e000      	b.n	804297a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8042978:	bf00      	nop
    }

    if (ret == HAL_OK)
 804297a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 804297e:	2b00      	cmp	r3, #0
 8042980:	d10b      	bne.n	804299a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8042982:	4b1e      	ldr	r3, [pc, #120]	; (80429fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8042984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042986:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 804298a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804298e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8042992:	4a1a      	ldr	r2, [pc, #104]	; (80429fc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8042994:	430b      	orrs	r3, r1
 8042996:	6593      	str	r3, [r2, #88]	; 0x58
 8042998:	e003      	b.n	80429a2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804299a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 804299e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80429a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80429a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80429aa:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80429ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80429b2:	2300      	movs	r3, #0
 80429b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80429b8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 80429bc:	460b      	mov	r3, r1
 80429be:	4313      	orrs	r3, r2
 80429c0:	d056      	beq.n	8042a70 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80429c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80429c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80429ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80429ce:	d038      	beq.n	8042a42 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80429d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80429d4:	d831      	bhi.n	8042a3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80429d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80429da:	d034      	beq.n	8042a46 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80429dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80429e0:	d82b      	bhi.n	8042a3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80429e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80429e6:	d01d      	beq.n	8042a24 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80429e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80429ec:	d825      	bhi.n	8042a3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80429ee:	2b00      	cmp	r3, #0
 80429f0:	d006      	beq.n	8042a00 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80429f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80429f6:	d00a      	beq.n	8042a0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80429f8:	e01f      	b.n	8042a3a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80429fa:	bf00      	nop
 80429fc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8042a00:	4ba2      	ldr	r3, [pc, #648]	; (8042c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042a04:	4aa1      	ldr	r2, [pc, #644]	; (8042c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042a06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8042a0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8042a0c:	e01c      	b.n	8042a48 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8042a0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042a12:	3308      	adds	r3, #8
 8042a14:	2100      	movs	r1, #0
 8042a16:	4618      	mov	r0, r3
 8042a18:	f001 fb5c 	bl	80440d4 <RCCEx_PLL2_Config>
 8042a1c:	4603      	mov	r3, r0
 8042a1e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8042a22:	e011      	b.n	8042a48 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8042a24:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042a28:	3328      	adds	r3, #40	; 0x28
 8042a2a:	2100      	movs	r1, #0
 8042a2c:	4618      	mov	r0, r3
 8042a2e:	f001 fc03 	bl	8044238 <RCCEx_PLL3_Config>
 8042a32:	4603      	mov	r3, r0
 8042a34:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8042a38:	e006      	b.n	8042a48 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8042a3a:	2301      	movs	r3, #1
 8042a3c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8042a40:	e002      	b.n	8042a48 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8042a42:	bf00      	nop
 8042a44:	e000      	b.n	8042a48 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8042a46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042a48:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042a4c:	2b00      	cmp	r3, #0
 8042a4e:	d10b      	bne.n	8042a68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8042a50:	4b8e      	ldr	r3, [pc, #568]	; (8042c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042a54:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8042a58:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042a5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8042a60:	4a8a      	ldr	r2, [pc, #552]	; (8042c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042a62:	430b      	orrs	r3, r1
 8042a64:	6593      	str	r3, [r2, #88]	; 0x58
 8042a66:	e003      	b.n	8042a70 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042a68:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042a6c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8042a70:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042a78:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8042a7c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8042a80:	2300      	movs	r3, #0
 8042a82:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8042a86:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8042a8a:	460b      	mov	r3, r1
 8042a8c:	4313      	orrs	r3, r2
 8042a8e:	d03a      	beq.n	8042b06 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8042a90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042a96:	2b30      	cmp	r3, #48	; 0x30
 8042a98:	d01f      	beq.n	8042ada <HAL_RCCEx_PeriphCLKConfig+0x416>
 8042a9a:	2b30      	cmp	r3, #48	; 0x30
 8042a9c:	d819      	bhi.n	8042ad2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8042a9e:	2b20      	cmp	r3, #32
 8042aa0:	d00c      	beq.n	8042abc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8042aa2:	2b20      	cmp	r3, #32
 8042aa4:	d815      	bhi.n	8042ad2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8042aa6:	2b00      	cmp	r3, #0
 8042aa8:	d019      	beq.n	8042ade <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8042aaa:	2b10      	cmp	r3, #16
 8042aac:	d111      	bne.n	8042ad2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8042aae:	4b77      	ldr	r3, [pc, #476]	; (8042c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042ab2:	4a76      	ldr	r2, [pc, #472]	; (8042c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8042ab8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8042aba:	e011      	b.n	8042ae0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8042abc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042ac0:	3308      	adds	r3, #8
 8042ac2:	2102      	movs	r1, #2
 8042ac4:	4618      	mov	r0, r3
 8042ac6:	f001 fb05 	bl	80440d4 <RCCEx_PLL2_Config>
 8042aca:	4603      	mov	r3, r0
 8042acc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8042ad0:	e006      	b.n	8042ae0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8042ad2:	2301      	movs	r3, #1
 8042ad4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8042ad8:	e002      	b.n	8042ae0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8042ada:	bf00      	nop
 8042adc:	e000      	b.n	8042ae0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8042ade:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042ae0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042ae4:	2b00      	cmp	r3, #0
 8042ae6:	d10a      	bne.n	8042afe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8042ae8:	4b68      	ldr	r3, [pc, #416]	; (8042c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042aec:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8042af0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042af6:	4a65      	ldr	r2, [pc, #404]	; (8042c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042af8:	430b      	orrs	r3, r1
 8042afa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8042afc:	e003      	b.n	8042b06 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042afe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042b02:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8042b06:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042b0e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8042b12:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8042b16:	2300      	movs	r3, #0
 8042b18:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8042b1c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8042b20:	460b      	mov	r3, r1
 8042b22:	4313      	orrs	r3, r2
 8042b24:	d051      	beq.n	8042bca <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8042b26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042b2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8042b2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8042b30:	d035      	beq.n	8042b9e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8042b32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8042b36:	d82e      	bhi.n	8042b96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8042b38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8042b3c:	d031      	beq.n	8042ba2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8042b3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8042b42:	d828      	bhi.n	8042b96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8042b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8042b48:	d01a      	beq.n	8042b80 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8042b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8042b4e:	d822      	bhi.n	8042b96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8042b50:	2b00      	cmp	r3, #0
 8042b52:	d003      	beq.n	8042b5c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8042b54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8042b58:	d007      	beq.n	8042b6a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8042b5a:	e01c      	b.n	8042b96 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8042b5c:	4b4b      	ldr	r3, [pc, #300]	; (8042c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042b60:	4a4a      	ldr	r2, [pc, #296]	; (8042c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8042b66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8042b68:	e01c      	b.n	8042ba4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8042b6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042b6e:	3308      	adds	r3, #8
 8042b70:	2100      	movs	r1, #0
 8042b72:	4618      	mov	r0, r3
 8042b74:	f001 faae 	bl	80440d4 <RCCEx_PLL2_Config>
 8042b78:	4603      	mov	r3, r0
 8042b7a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8042b7e:	e011      	b.n	8042ba4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8042b80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042b84:	3328      	adds	r3, #40	; 0x28
 8042b86:	2100      	movs	r1, #0
 8042b88:	4618      	mov	r0, r3
 8042b8a:	f001 fb55 	bl	8044238 <RCCEx_PLL3_Config>
 8042b8e:	4603      	mov	r3, r0
 8042b90:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8042b94:	e006      	b.n	8042ba4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8042b96:	2301      	movs	r3, #1
 8042b98:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8042b9c:	e002      	b.n	8042ba4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8042b9e:	bf00      	nop
 8042ba0:	e000      	b.n	8042ba4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8042ba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042ba4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042ba8:	2b00      	cmp	r3, #0
 8042baa:	d10a      	bne.n	8042bc2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8042bac:	4b37      	ldr	r3, [pc, #220]	; (8042c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042bb0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8042bb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042bb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8042bba:	4a34      	ldr	r2, [pc, #208]	; (8042c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042bbc:	430b      	orrs	r3, r1
 8042bbe:	6513      	str	r3, [r2, #80]	; 0x50
 8042bc0:	e003      	b.n	8042bca <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042bc2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042bc6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8042bca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042bd2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8042bd6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8042bda:	2300      	movs	r3, #0
 8042bdc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8042be0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8042be4:	460b      	mov	r3, r1
 8042be6:	4313      	orrs	r3, r2
 8042be8:	d056      	beq.n	8042c98 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8042bea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042bee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8042bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8042bf4:	d033      	beq.n	8042c5e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8042bf6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8042bfa:	d82c      	bhi.n	8042c56 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8042bfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8042c00:	d02f      	beq.n	8042c62 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8042c02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8042c06:	d826      	bhi.n	8042c56 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8042c08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8042c0c:	d02b      	beq.n	8042c66 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8042c0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8042c12:	d820      	bhi.n	8042c56 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8042c14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8042c18:	d012      	beq.n	8042c40 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8042c1a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8042c1e:	d81a      	bhi.n	8042c56 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8042c20:	2b00      	cmp	r3, #0
 8042c22:	d022      	beq.n	8042c6a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8042c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8042c28:	d115      	bne.n	8042c56 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8042c2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042c2e:	3308      	adds	r3, #8
 8042c30:	2101      	movs	r1, #1
 8042c32:	4618      	mov	r0, r3
 8042c34:	f001 fa4e 	bl	80440d4 <RCCEx_PLL2_Config>
 8042c38:	4603      	mov	r3, r0
 8042c3a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8042c3e:	e015      	b.n	8042c6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8042c40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042c44:	3328      	adds	r3, #40	; 0x28
 8042c46:	2101      	movs	r1, #1
 8042c48:	4618      	mov	r0, r3
 8042c4a:	f001 faf5 	bl	8044238 <RCCEx_PLL3_Config>
 8042c4e:	4603      	mov	r3, r0
 8042c50:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8042c54:	e00a      	b.n	8042c6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8042c56:	2301      	movs	r3, #1
 8042c58:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8042c5c:	e006      	b.n	8042c6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8042c5e:	bf00      	nop
 8042c60:	e004      	b.n	8042c6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8042c62:	bf00      	nop
 8042c64:	e002      	b.n	8042c6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8042c66:	bf00      	nop
 8042c68:	e000      	b.n	8042c6c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8042c6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042c6c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042c70:	2b00      	cmp	r3, #0
 8042c72:	d10d      	bne.n	8042c90 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8042c74:	4b05      	ldr	r3, [pc, #20]	; (8042c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042c78:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8042c7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042c80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8042c82:	4a02      	ldr	r2, [pc, #8]	; (8042c8c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042c84:	430b      	orrs	r3, r1
 8042c86:	6513      	str	r3, [r2, #80]	; 0x50
 8042c88:	e006      	b.n	8042c98 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8042c8a:	bf00      	nop
 8042c8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042c90:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042c94:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8042c98:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042ca0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8042ca4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8042ca8:	2300      	movs	r3, #0
 8042caa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8042cae:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8042cb2:	460b      	mov	r3, r1
 8042cb4:	4313      	orrs	r3, r2
 8042cb6:	d055      	beq.n	8042d64 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8042cb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042cbc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8042cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8042cc4:	d033      	beq.n	8042d2e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8042cc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8042cca:	d82c      	bhi.n	8042d26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8042ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8042cd0:	d02f      	beq.n	8042d32 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8042cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8042cd6:	d826      	bhi.n	8042d26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8042cd8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8042cdc:	d02b      	beq.n	8042d36 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8042cde:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8042ce2:	d820      	bhi.n	8042d26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8042ce4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8042ce8:	d012      	beq.n	8042d10 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8042cea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8042cee:	d81a      	bhi.n	8042d26 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8042cf0:	2b00      	cmp	r3, #0
 8042cf2:	d022      	beq.n	8042d3a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8042cf4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8042cf8:	d115      	bne.n	8042d26 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8042cfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042cfe:	3308      	adds	r3, #8
 8042d00:	2101      	movs	r1, #1
 8042d02:	4618      	mov	r0, r3
 8042d04:	f001 f9e6 	bl	80440d4 <RCCEx_PLL2_Config>
 8042d08:	4603      	mov	r3, r0
 8042d0a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8042d0e:	e015      	b.n	8042d3c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8042d10:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042d14:	3328      	adds	r3, #40	; 0x28
 8042d16:	2101      	movs	r1, #1
 8042d18:	4618      	mov	r0, r3
 8042d1a:	f001 fa8d 	bl	8044238 <RCCEx_PLL3_Config>
 8042d1e:	4603      	mov	r3, r0
 8042d20:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8042d24:	e00a      	b.n	8042d3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8042d26:	2301      	movs	r3, #1
 8042d28:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8042d2c:	e006      	b.n	8042d3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8042d2e:	bf00      	nop
 8042d30:	e004      	b.n	8042d3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8042d32:	bf00      	nop
 8042d34:	e002      	b.n	8042d3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8042d36:	bf00      	nop
 8042d38:	e000      	b.n	8042d3c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8042d3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042d3c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042d40:	2b00      	cmp	r3, #0
 8042d42:	d10b      	bne.n	8042d5c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8042d44:	4bb6      	ldr	r3, [pc, #728]	; (8043020 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042d48:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8042d4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042d50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8042d54:	4ab2      	ldr	r2, [pc, #712]	; (8043020 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042d56:	430b      	orrs	r3, r1
 8042d58:	6593      	str	r3, [r2, #88]	; 0x58
 8042d5a:	e003      	b.n	8042d64 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042d5c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042d60:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8042d64:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042d6c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8042d70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8042d74:	2300      	movs	r3, #0
 8042d76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8042d7a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8042d7e:	460b      	mov	r3, r1
 8042d80:	4313      	orrs	r3, r2
 8042d82:	d02a      	beq.n	8042dda <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8042d84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042d8a:	2b00      	cmp	r3, #0
 8042d8c:	d011      	beq.n	8042db2 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8042d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8042d92:	d10a      	bne.n	8042daa <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8042d94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042d98:	3308      	adds	r3, #8
 8042d9a:	2101      	movs	r1, #1
 8042d9c:	4618      	mov	r0, r3
 8042d9e:	f001 f999 	bl	80440d4 <RCCEx_PLL2_Config>
 8042da2:	4603      	mov	r3, r0
 8042da4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8042da8:	e004      	b.n	8042db4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8042daa:	2301      	movs	r3, #1
 8042dac:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8042db0:	e000      	b.n	8042db4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8042db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042db4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042db8:	2b00      	cmp	r3, #0
 8042dba:	d10a      	bne.n	8042dd2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8042dbc:	4b98      	ldr	r3, [pc, #608]	; (8043020 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042dc0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8042dc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042dca:	4a95      	ldr	r2, [pc, #596]	; (8043020 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042dcc:	430b      	orrs	r3, r1
 8042dce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8042dd0:	e003      	b.n	8042dda <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042dd2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042dd6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8042dda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042de2:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8042de6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8042dea:	2300      	movs	r3, #0
 8042dec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8042df0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8042df4:	460b      	mov	r3, r1
 8042df6:	4313      	orrs	r3, r2
 8042df8:	d037      	beq.n	8042e6a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8042dfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8042e00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8042e04:	d00e      	beq.n	8042e24 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8042e06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8042e0a:	d816      	bhi.n	8042e3a <HAL_RCCEx_PeriphCLKConfig+0x776>
 8042e0c:	2b00      	cmp	r3, #0
 8042e0e:	d018      	beq.n	8042e42 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8042e10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8042e14:	d111      	bne.n	8042e3a <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8042e16:	4b82      	ldr	r3, [pc, #520]	; (8043020 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042e1a:	4a81      	ldr	r2, [pc, #516]	; (8043020 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8042e20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8042e22:	e00f      	b.n	8042e44 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8042e24:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042e28:	3308      	adds	r3, #8
 8042e2a:	2101      	movs	r1, #1
 8042e2c:	4618      	mov	r0, r3
 8042e2e:	f001 f951 	bl	80440d4 <RCCEx_PLL2_Config>
 8042e32:	4603      	mov	r3, r0
 8042e34:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8042e38:	e004      	b.n	8042e44 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8042e3a:	2301      	movs	r3, #1
 8042e3c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8042e40:	e000      	b.n	8042e44 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8042e42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042e44:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042e48:	2b00      	cmp	r3, #0
 8042e4a:	d10a      	bne.n	8042e62 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8042e4c:	4b74      	ldr	r3, [pc, #464]	; (8043020 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042e50:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8042e54:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8042e5a:	4a71      	ldr	r2, [pc, #452]	; (8043020 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042e5c:	430b      	orrs	r3, r1
 8042e5e:	6513      	str	r3, [r2, #80]	; 0x50
 8042e60:	e003      	b.n	8042e6a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042e62:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042e66:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8042e6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042e72:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8042e76:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8042e7a:	2300      	movs	r3, #0
 8042e7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8042e80:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8042e84:	460b      	mov	r3, r1
 8042e86:	4313      	orrs	r3, r2
 8042e88:	d03a      	beq.n	8042f00 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8042e8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042e8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8042e90:	2b03      	cmp	r3, #3
 8042e92:	d81d      	bhi.n	8042ed0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8042e94:	a201      	add	r2, pc, #4	; (adr r2, 8042e9c <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8042e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042e9a:	bf00      	nop
 8042e9c:	08042ed9 	.word	0x08042ed9
 8042ea0:	08042ead 	.word	0x08042ead
 8042ea4:	08042ebb 	.word	0x08042ebb
 8042ea8:	08042ed9 	.word	0x08042ed9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8042eac:	4b5c      	ldr	r3, [pc, #368]	; (8043020 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042eb0:	4a5b      	ldr	r2, [pc, #364]	; (8043020 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8042eb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8042eb8:	e00f      	b.n	8042eda <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8042eba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042ebe:	3308      	adds	r3, #8
 8042ec0:	2102      	movs	r1, #2
 8042ec2:	4618      	mov	r0, r3
 8042ec4:	f001 f906 	bl	80440d4 <RCCEx_PLL2_Config>
 8042ec8:	4603      	mov	r3, r0
 8042eca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8042ece:	e004      	b.n	8042eda <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8042ed0:	2301      	movs	r3, #1
 8042ed2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8042ed6:	e000      	b.n	8042eda <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8042ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042eda:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042ede:	2b00      	cmp	r3, #0
 8042ee0:	d10a      	bne.n	8042ef8 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8042ee2:	4b4f      	ldr	r3, [pc, #316]	; (8043020 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042ee6:	f023 0103 	bic.w	r1, r3, #3
 8042eea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8042ef0:	4a4b      	ldr	r2, [pc, #300]	; (8043020 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042ef2:	430b      	orrs	r3, r1
 8042ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8042ef6:	e003      	b.n	8042f00 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042ef8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042efc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8042f00:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042f08:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8042f0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8042f10:	2300      	movs	r3, #0
 8042f12:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8042f16:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8042f1a:	460b      	mov	r3, r1
 8042f1c:	4313      	orrs	r3, r2
 8042f1e:	f000 80a0 	beq.w	8043062 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8042f22:	4b40      	ldr	r3, [pc, #256]	; (8043024 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8042f24:	681b      	ldr	r3, [r3, #0]
 8042f26:	4a3f      	ldr	r2, [pc, #252]	; (8043024 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8042f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8042f2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8042f2e:	f7fd ffed 	bl	8040f0c <HAL_GetTick>
 8042f32:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8042f36:	e00b      	b.n	8042f50 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8042f38:	f7fd ffe8 	bl	8040f0c <HAL_GetTick>
 8042f3c:	4602      	mov	r2, r0
 8042f3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8042f42:	1ad3      	subs	r3, r2, r3
 8042f44:	2b64      	cmp	r3, #100	; 0x64
 8042f46:	d903      	bls.n	8042f50 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8042f48:	2303      	movs	r3, #3
 8042f4a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8042f4e:	e005      	b.n	8042f5c <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8042f50:	4b34      	ldr	r3, [pc, #208]	; (8043024 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8042f52:	681b      	ldr	r3, [r3, #0]
 8042f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042f58:	2b00      	cmp	r3, #0
 8042f5a:	d0ed      	beq.n	8042f38 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8042f5c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042f60:	2b00      	cmp	r3, #0
 8042f62:	d17a      	bne.n	804305a <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8042f64:	4b2e      	ldr	r3, [pc, #184]	; (8043020 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042f66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8042f68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042f6c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8042f70:	4053      	eors	r3, r2
 8042f72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8042f76:	2b00      	cmp	r3, #0
 8042f78:	d015      	beq.n	8042fa6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8042f7a:	4b29      	ldr	r3, [pc, #164]	; (8043020 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8042f82:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8042f86:	4b26      	ldr	r3, [pc, #152]	; (8043020 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042f8a:	4a25      	ldr	r2, [pc, #148]	; (8043020 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8042f90:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8042f92:	4b23      	ldr	r3, [pc, #140]	; (8043020 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042f96:	4a22      	ldr	r2, [pc, #136]	; (8043020 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8042f9c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8042f9e:	4a20      	ldr	r2, [pc, #128]	; (8043020 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042fa0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8042fa4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8042fa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042faa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8042fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8042fb2:	d118      	bne.n	8042fe6 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8042fb4:	f7fd ffaa 	bl	8040f0c <HAL_GetTick>
 8042fb8:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8042fbc:	e00d      	b.n	8042fda <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8042fbe:	f7fd ffa5 	bl	8040f0c <HAL_GetTick>
 8042fc2:	4602      	mov	r2, r0
 8042fc4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8042fc8:	1ad2      	subs	r2, r2, r3
 8042fca:	f241 3388 	movw	r3, #5000	; 0x1388
 8042fce:	429a      	cmp	r2, r3
 8042fd0:	d903      	bls.n	8042fda <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8042fd2:	2303      	movs	r3, #3
 8042fd4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8042fd8:	e005      	b.n	8042fe6 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8042fda:	4b11      	ldr	r3, [pc, #68]	; (8043020 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042fde:	f003 0302 	and.w	r3, r3, #2
 8042fe2:	2b00      	cmp	r3, #0
 8042fe4:	d0eb      	beq.n	8042fbe <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8042fe6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042fea:	2b00      	cmp	r3, #0
 8042fec:	d130      	bne.n	8043050 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8042fee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042ff2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8042ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8042ffa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8042ffe:	d115      	bne.n	804302c <HAL_RCCEx_PeriphCLKConfig+0x968>
 8043000:	4b07      	ldr	r3, [pc, #28]	; (8043020 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8043002:	691b      	ldr	r3, [r3, #16]
 8043004:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8043008:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804300c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8043010:	091a      	lsrs	r2, r3, #4
 8043012:	4b05      	ldr	r3, [pc, #20]	; (8043028 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8043014:	4013      	ands	r3, r2
 8043016:	4a02      	ldr	r2, [pc, #8]	; (8043020 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8043018:	430b      	orrs	r3, r1
 804301a:	6113      	str	r3, [r2, #16]
 804301c:	e00c      	b.n	8043038 <HAL_RCCEx_PeriphCLKConfig+0x974>
 804301e:	bf00      	nop
 8043020:	58024400 	.word	0x58024400
 8043024:	58024800 	.word	0x58024800
 8043028:	00ffffcf 	.word	0x00ffffcf
 804302c:	4bd4      	ldr	r3, [pc, #848]	; (8043380 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 804302e:	691b      	ldr	r3, [r3, #16]
 8043030:	4ad3      	ldr	r2, [pc, #844]	; (8043380 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8043032:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8043036:	6113      	str	r3, [r2, #16]
 8043038:	4bd1      	ldr	r3, [pc, #836]	; (8043380 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 804303a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 804303c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043040:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8043044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8043048:	4acd      	ldr	r2, [pc, #820]	; (8043380 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 804304a:	430b      	orrs	r3, r1
 804304c:	6713      	str	r3, [r2, #112]	; 0x70
 804304e:	e008      	b.n	8043062 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8043050:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043054:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8043058:	e003      	b.n	8043062 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 804305a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 804305e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8043062:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043066:	e9d3 2300 	ldrd	r2, r3, [r3]
 804306a:	f002 0301 	and.w	r3, r2, #1
 804306e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8043072:	2300      	movs	r3, #0
 8043074:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8043078:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 804307c:	460b      	mov	r3, r1
 804307e:	4313      	orrs	r3, r2
 8043080:	f000 808b 	beq.w	804319a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8043084:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 804308c:	2b28      	cmp	r3, #40	; 0x28
 804308e:	d86b      	bhi.n	8043168 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8043090:	a201      	add	r2, pc, #4	; (adr r2, 8043098 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8043092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043096:	bf00      	nop
 8043098:	08043171 	.word	0x08043171
 804309c:	08043169 	.word	0x08043169
 80430a0:	08043169 	.word	0x08043169
 80430a4:	08043169 	.word	0x08043169
 80430a8:	08043169 	.word	0x08043169
 80430ac:	08043169 	.word	0x08043169
 80430b0:	08043169 	.word	0x08043169
 80430b4:	08043169 	.word	0x08043169
 80430b8:	0804313d 	.word	0x0804313d
 80430bc:	08043169 	.word	0x08043169
 80430c0:	08043169 	.word	0x08043169
 80430c4:	08043169 	.word	0x08043169
 80430c8:	08043169 	.word	0x08043169
 80430cc:	08043169 	.word	0x08043169
 80430d0:	08043169 	.word	0x08043169
 80430d4:	08043169 	.word	0x08043169
 80430d8:	08043153 	.word	0x08043153
 80430dc:	08043169 	.word	0x08043169
 80430e0:	08043169 	.word	0x08043169
 80430e4:	08043169 	.word	0x08043169
 80430e8:	08043169 	.word	0x08043169
 80430ec:	08043169 	.word	0x08043169
 80430f0:	08043169 	.word	0x08043169
 80430f4:	08043169 	.word	0x08043169
 80430f8:	08043171 	.word	0x08043171
 80430fc:	08043169 	.word	0x08043169
 8043100:	08043169 	.word	0x08043169
 8043104:	08043169 	.word	0x08043169
 8043108:	08043169 	.word	0x08043169
 804310c:	08043169 	.word	0x08043169
 8043110:	08043169 	.word	0x08043169
 8043114:	08043169 	.word	0x08043169
 8043118:	08043171 	.word	0x08043171
 804311c:	08043169 	.word	0x08043169
 8043120:	08043169 	.word	0x08043169
 8043124:	08043169 	.word	0x08043169
 8043128:	08043169 	.word	0x08043169
 804312c:	08043169 	.word	0x08043169
 8043130:	08043169 	.word	0x08043169
 8043134:	08043169 	.word	0x08043169
 8043138:	08043171 	.word	0x08043171
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 804313c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043140:	3308      	adds	r3, #8
 8043142:	2101      	movs	r1, #1
 8043144:	4618      	mov	r0, r3
 8043146:	f000 ffc5 	bl	80440d4 <RCCEx_PLL2_Config>
 804314a:	4603      	mov	r3, r0
 804314c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8043150:	e00f      	b.n	8043172 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8043152:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043156:	3328      	adds	r3, #40	; 0x28
 8043158:	2101      	movs	r1, #1
 804315a:	4618      	mov	r0, r3
 804315c:	f001 f86c 	bl	8044238 <RCCEx_PLL3_Config>
 8043160:	4603      	mov	r3, r0
 8043162:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8043166:	e004      	b.n	8043172 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8043168:	2301      	movs	r3, #1
 804316a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 804316e:	e000      	b.n	8043172 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8043170:	bf00      	nop
    }

    if (ret == HAL_OK)
 8043172:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043176:	2b00      	cmp	r3, #0
 8043178:	d10b      	bne.n	8043192 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 804317a:	4b81      	ldr	r3, [pc, #516]	; (8043380 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 804317c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804317e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8043182:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 804318a:	4a7d      	ldr	r2, [pc, #500]	; (8043380 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 804318c:	430b      	orrs	r3, r1
 804318e:	6553      	str	r3, [r2, #84]	; 0x54
 8043190:	e003      	b.n	804319a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043192:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043196:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 804319a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804319e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80431a2:	f002 0302 	and.w	r3, r2, #2
 80431a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80431aa:	2300      	movs	r3, #0
 80431ac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80431b0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80431b4:	460b      	mov	r3, r1
 80431b6:	4313      	orrs	r3, r2
 80431b8:	d042      	beq.n	8043240 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80431ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80431be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80431c0:	2b05      	cmp	r3, #5
 80431c2:	d825      	bhi.n	8043210 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 80431c4:	a201      	add	r2, pc, #4	; (adr r2, 80431cc <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 80431c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80431ca:	bf00      	nop
 80431cc:	08043219 	.word	0x08043219
 80431d0:	080431e5 	.word	0x080431e5
 80431d4:	080431fb 	.word	0x080431fb
 80431d8:	08043219 	.word	0x08043219
 80431dc:	08043219 	.word	0x08043219
 80431e0:	08043219 	.word	0x08043219
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80431e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80431e8:	3308      	adds	r3, #8
 80431ea:	2101      	movs	r1, #1
 80431ec:	4618      	mov	r0, r3
 80431ee:	f000 ff71 	bl	80440d4 <RCCEx_PLL2_Config>
 80431f2:	4603      	mov	r3, r0
 80431f4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80431f8:	e00f      	b.n	804321a <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80431fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80431fe:	3328      	adds	r3, #40	; 0x28
 8043200:	2101      	movs	r1, #1
 8043202:	4618      	mov	r0, r3
 8043204:	f001 f818 	bl	8044238 <RCCEx_PLL3_Config>
 8043208:	4603      	mov	r3, r0
 804320a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 804320e:	e004      	b.n	804321a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8043210:	2301      	movs	r3, #1
 8043212:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8043216:	e000      	b.n	804321a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8043218:	bf00      	nop
    }

    if (ret == HAL_OK)
 804321a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 804321e:	2b00      	cmp	r3, #0
 8043220:	d10a      	bne.n	8043238 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8043222:	4b57      	ldr	r3, [pc, #348]	; (8043380 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8043224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8043226:	f023 0107 	bic.w	r1, r3, #7
 804322a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804322e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8043230:	4a53      	ldr	r2, [pc, #332]	; (8043380 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8043232:	430b      	orrs	r3, r1
 8043234:	6553      	str	r3, [r2, #84]	; 0x54
 8043236:	e003      	b.n	8043240 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043238:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 804323c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8043240:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043248:	f002 0304 	and.w	r3, r2, #4
 804324c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8043250:	2300      	movs	r3, #0
 8043252:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8043256:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 804325a:	460b      	mov	r3, r1
 804325c:	4313      	orrs	r3, r2
 804325e:	d044      	beq.n	80432ea <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8043260:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043264:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8043268:	2b05      	cmp	r3, #5
 804326a:	d825      	bhi.n	80432b8 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 804326c:	a201      	add	r2, pc, #4	; (adr r2, 8043274 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 804326e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043272:	bf00      	nop
 8043274:	080432c1 	.word	0x080432c1
 8043278:	0804328d 	.word	0x0804328d
 804327c:	080432a3 	.word	0x080432a3
 8043280:	080432c1 	.word	0x080432c1
 8043284:	080432c1 	.word	0x080432c1
 8043288:	080432c1 	.word	0x080432c1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 804328c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043290:	3308      	adds	r3, #8
 8043292:	2101      	movs	r1, #1
 8043294:	4618      	mov	r0, r3
 8043296:	f000 ff1d 	bl	80440d4 <RCCEx_PLL2_Config>
 804329a:	4603      	mov	r3, r0
 804329c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80432a0:	e00f      	b.n	80432c2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80432a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80432a6:	3328      	adds	r3, #40	; 0x28
 80432a8:	2101      	movs	r1, #1
 80432aa:	4618      	mov	r0, r3
 80432ac:	f000 ffc4 	bl	8044238 <RCCEx_PLL3_Config>
 80432b0:	4603      	mov	r3, r0
 80432b2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80432b6:	e004      	b.n	80432c2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80432b8:	2301      	movs	r3, #1
 80432ba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80432be:	e000      	b.n	80432c2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 80432c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80432c2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80432c6:	2b00      	cmp	r3, #0
 80432c8:	d10b      	bne.n	80432e2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80432ca:	4b2d      	ldr	r3, [pc, #180]	; (8043380 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80432cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80432ce:	f023 0107 	bic.w	r1, r3, #7
 80432d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80432d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80432da:	4a29      	ldr	r2, [pc, #164]	; (8043380 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80432dc:	430b      	orrs	r3, r1
 80432de:	6593      	str	r3, [r2, #88]	; 0x58
 80432e0:	e003      	b.n	80432ea <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80432e2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80432e6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80432ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80432ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80432f2:	f002 0320 	and.w	r3, r2, #32
 80432f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80432fa:	2300      	movs	r3, #0
 80432fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8043300:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8043304:	460b      	mov	r3, r1
 8043306:	4313      	orrs	r3, r2
 8043308:	d057      	beq.n	80433ba <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 804330a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804330e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8043312:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8043316:	d035      	beq.n	8043384 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8043318:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 804331c:	d82c      	bhi.n	8043378 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 804331e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8043322:	d031      	beq.n	8043388 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8043324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8043328:	d826      	bhi.n	8043378 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 804332a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 804332e:	d02d      	beq.n	804338c <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8043330:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8043334:	d820      	bhi.n	8043378 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8043336:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 804333a:	d012      	beq.n	8043362 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 804333c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8043340:	d81a      	bhi.n	8043378 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8043342:	2b00      	cmp	r3, #0
 8043344:	d024      	beq.n	8043390 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8043346:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 804334a:	d115      	bne.n	8043378 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 804334c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043350:	3308      	adds	r3, #8
 8043352:	2100      	movs	r1, #0
 8043354:	4618      	mov	r0, r3
 8043356:	f000 febd 	bl	80440d4 <RCCEx_PLL2_Config>
 804335a:	4603      	mov	r3, r0
 804335c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8043360:	e017      	b.n	8043392 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8043362:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043366:	3328      	adds	r3, #40	; 0x28
 8043368:	2102      	movs	r1, #2
 804336a:	4618      	mov	r0, r3
 804336c:	f000 ff64 	bl	8044238 <RCCEx_PLL3_Config>
 8043370:	4603      	mov	r3, r0
 8043372:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8043376:	e00c      	b.n	8043392 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8043378:	2301      	movs	r3, #1
 804337a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 804337e:	e008      	b.n	8043392 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8043380:	58024400 	.word	0x58024400
        break;
 8043384:	bf00      	nop
 8043386:	e004      	b.n	8043392 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8043388:	bf00      	nop
 804338a:	e002      	b.n	8043392 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 804338c:	bf00      	nop
 804338e:	e000      	b.n	8043392 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8043390:	bf00      	nop
    }

    if (ret == HAL_OK)
 8043392:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043396:	2b00      	cmp	r3, #0
 8043398:	d10b      	bne.n	80433b2 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 804339a:	4bc2      	ldr	r3, [pc, #776]	; (80436a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 804339c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804339e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80433a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80433a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80433aa:	4abe      	ldr	r2, [pc, #760]	; (80436a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80433ac:	430b      	orrs	r3, r1
 80433ae:	6553      	str	r3, [r2, #84]	; 0x54
 80433b0:	e003      	b.n	80433ba <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80433b2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80433b6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80433ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80433be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80433c2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80433c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80433ca:	2300      	movs	r3, #0
 80433cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80433d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80433d4:	460b      	mov	r3, r1
 80433d6:	4313      	orrs	r3, r2
 80433d8:	d055      	beq.n	8043486 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80433da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80433de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80433e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80433e6:	d033      	beq.n	8043450 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 80433e8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80433ec:	d82c      	bhi.n	8043448 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80433ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80433f2:	d02f      	beq.n	8043454 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 80433f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80433f8:	d826      	bhi.n	8043448 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 80433fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80433fe:	d02b      	beq.n	8043458 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8043400:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8043404:	d820      	bhi.n	8043448 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8043406:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 804340a:	d012      	beq.n	8043432 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 804340c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8043410:	d81a      	bhi.n	8043448 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8043412:	2b00      	cmp	r3, #0
 8043414:	d022      	beq.n	804345c <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8043416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804341a:	d115      	bne.n	8043448 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 804341c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043420:	3308      	adds	r3, #8
 8043422:	2100      	movs	r1, #0
 8043424:	4618      	mov	r0, r3
 8043426:	f000 fe55 	bl	80440d4 <RCCEx_PLL2_Config>
 804342a:	4603      	mov	r3, r0
 804342c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8043430:	e015      	b.n	804345e <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8043432:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043436:	3328      	adds	r3, #40	; 0x28
 8043438:	2102      	movs	r1, #2
 804343a:	4618      	mov	r0, r3
 804343c:	f000 fefc 	bl	8044238 <RCCEx_PLL3_Config>
 8043440:	4603      	mov	r3, r0
 8043442:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8043446:	e00a      	b.n	804345e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8043448:	2301      	movs	r3, #1
 804344a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 804344e:	e006      	b.n	804345e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8043450:	bf00      	nop
 8043452:	e004      	b.n	804345e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8043454:	bf00      	nop
 8043456:	e002      	b.n	804345e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8043458:	bf00      	nop
 804345a:	e000      	b.n	804345e <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 804345c:	bf00      	nop
    }

    if (ret == HAL_OK)
 804345e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043462:	2b00      	cmp	r3, #0
 8043464:	d10b      	bne.n	804347e <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8043466:	4b8f      	ldr	r3, [pc, #572]	; (80436a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8043468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804346a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 804346e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043472:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8043476:	4a8b      	ldr	r2, [pc, #556]	; (80436a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8043478:	430b      	orrs	r3, r1
 804347a:	6593      	str	r3, [r2, #88]	; 0x58
 804347c:	e003      	b.n	8043486 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804347e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043482:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8043486:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804348a:	e9d3 2300 	ldrd	r2, r3, [r3]
 804348e:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8043492:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8043496:	2300      	movs	r3, #0
 8043498:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 804349c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80434a0:	460b      	mov	r3, r1
 80434a2:	4313      	orrs	r3, r2
 80434a4:	d055      	beq.n	8043552 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80434a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80434aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80434ae:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80434b2:	d033      	beq.n	804351c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80434b4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80434b8:	d82c      	bhi.n	8043514 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80434ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80434be:	d02f      	beq.n	8043520 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80434c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80434c4:	d826      	bhi.n	8043514 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80434c6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80434ca:	d02b      	beq.n	8043524 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80434cc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80434d0:	d820      	bhi.n	8043514 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80434d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80434d6:	d012      	beq.n	80434fe <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 80434d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80434dc:	d81a      	bhi.n	8043514 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80434de:	2b00      	cmp	r3, #0
 80434e0:	d022      	beq.n	8043528 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 80434e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80434e6:	d115      	bne.n	8043514 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80434e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80434ec:	3308      	adds	r3, #8
 80434ee:	2100      	movs	r1, #0
 80434f0:	4618      	mov	r0, r3
 80434f2:	f000 fdef 	bl	80440d4 <RCCEx_PLL2_Config>
 80434f6:	4603      	mov	r3, r0
 80434f8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80434fc:	e015      	b.n	804352a <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80434fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043502:	3328      	adds	r3, #40	; 0x28
 8043504:	2102      	movs	r1, #2
 8043506:	4618      	mov	r0, r3
 8043508:	f000 fe96 	bl	8044238 <RCCEx_PLL3_Config>
 804350c:	4603      	mov	r3, r0
 804350e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8043512:	e00a      	b.n	804352a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8043514:	2301      	movs	r3, #1
 8043516:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 804351a:	e006      	b.n	804352a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 804351c:	bf00      	nop
 804351e:	e004      	b.n	804352a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8043520:	bf00      	nop
 8043522:	e002      	b.n	804352a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8043524:	bf00      	nop
 8043526:	e000      	b.n	804352a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8043528:	bf00      	nop
    }

    if (ret == HAL_OK)
 804352a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 804352e:	2b00      	cmp	r3, #0
 8043530:	d10b      	bne.n	804354a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8043532:	4b5c      	ldr	r3, [pc, #368]	; (80436a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8043534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8043536:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 804353a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804353e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8043542:	4a58      	ldr	r2, [pc, #352]	; (80436a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8043544:	430b      	orrs	r3, r1
 8043546:	6593      	str	r3, [r2, #88]	; 0x58
 8043548:	e003      	b.n	8043552 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804354a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 804354e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8043552:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043556:	e9d3 2300 	ldrd	r2, r3, [r3]
 804355a:	f002 0308 	and.w	r3, r2, #8
 804355e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8043562:	2300      	movs	r3, #0
 8043564:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8043568:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 804356c:	460b      	mov	r3, r1
 804356e:	4313      	orrs	r3, r2
 8043570:	d01e      	beq.n	80435b0 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8043572:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804357a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 804357e:	d10c      	bne.n	804359a <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8043580:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043584:	3328      	adds	r3, #40	; 0x28
 8043586:	2102      	movs	r1, #2
 8043588:	4618      	mov	r0, r3
 804358a:	f000 fe55 	bl	8044238 <RCCEx_PLL3_Config>
 804358e:	4603      	mov	r3, r0
 8043590:	2b00      	cmp	r3, #0
 8043592:	d002      	beq.n	804359a <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8043594:	2301      	movs	r3, #1
 8043596:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 804359a:	4b42      	ldr	r3, [pc, #264]	; (80436a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 804359c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804359e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80435a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80435a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80435aa:	4a3e      	ldr	r2, [pc, #248]	; (80436a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80435ac:	430b      	orrs	r3, r1
 80435ae:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80435b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80435b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80435b8:	f002 0310 	and.w	r3, r2, #16
 80435bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80435c0:	2300      	movs	r3, #0
 80435c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80435c6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80435ca:	460b      	mov	r3, r1
 80435cc:	4313      	orrs	r3, r2
 80435ce:	d01e      	beq.n	804360e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80435d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80435d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80435d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80435dc:	d10c      	bne.n	80435f8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80435de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80435e2:	3328      	adds	r3, #40	; 0x28
 80435e4:	2102      	movs	r1, #2
 80435e6:	4618      	mov	r0, r3
 80435e8:	f000 fe26 	bl	8044238 <RCCEx_PLL3_Config>
 80435ec:	4603      	mov	r3, r0
 80435ee:	2b00      	cmp	r3, #0
 80435f0:	d002      	beq.n	80435f8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 80435f2:	2301      	movs	r3, #1
 80435f4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80435f8:	4b2a      	ldr	r3, [pc, #168]	; (80436a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80435fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80435fc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8043600:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043604:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8043608:	4a26      	ldr	r2, [pc, #152]	; (80436a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 804360a:	430b      	orrs	r3, r1
 804360c:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 804360e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043616:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 804361a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 804361e:	2300      	movs	r3, #0
 8043620:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8043624:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8043628:	460b      	mov	r3, r1
 804362a:	4313      	orrs	r3, r2
 804362c:	d040      	beq.n	80436b0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 804362e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043632:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8043636:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 804363a:	d022      	beq.n	8043682 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 804363c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8043640:	d81b      	bhi.n	804367a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8043642:	2b00      	cmp	r3, #0
 8043644:	d003      	beq.n	804364e <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8043646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804364a:	d00b      	beq.n	8043664 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 804364c:	e015      	b.n	804367a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 804364e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043652:	3308      	adds	r3, #8
 8043654:	2100      	movs	r1, #0
 8043656:	4618      	mov	r0, r3
 8043658:	f000 fd3c 	bl	80440d4 <RCCEx_PLL2_Config>
 804365c:	4603      	mov	r3, r0
 804365e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8043662:	e00f      	b.n	8043684 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8043664:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043668:	3328      	adds	r3, #40	; 0x28
 804366a:	2102      	movs	r1, #2
 804366c:	4618      	mov	r0, r3
 804366e:	f000 fde3 	bl	8044238 <RCCEx_PLL3_Config>
 8043672:	4603      	mov	r3, r0
 8043674:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8043678:	e004      	b.n	8043684 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 804367a:	2301      	movs	r3, #1
 804367c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8043680:	e000      	b.n	8043684 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8043682:	bf00      	nop
    }

    if (ret == HAL_OK)
 8043684:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043688:	2b00      	cmp	r3, #0
 804368a:	d10d      	bne.n	80436a8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 804368c:	4b05      	ldr	r3, [pc, #20]	; (80436a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 804368e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8043690:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8043694:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043698:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 804369c:	4a01      	ldr	r2, [pc, #4]	; (80436a4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 804369e:	430b      	orrs	r3, r1
 80436a0:	6593      	str	r3, [r2, #88]	; 0x58
 80436a2:	e005      	b.n	80436b0 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80436a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80436a8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80436ac:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80436b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80436b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80436b8:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80436bc:	67bb      	str	r3, [r7, #120]	; 0x78
 80436be:	2300      	movs	r3, #0
 80436c0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80436c2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80436c6:	460b      	mov	r3, r1
 80436c8:	4313      	orrs	r3, r2
 80436ca:	d03b      	beq.n	8043744 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80436cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80436d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80436d4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80436d8:	d01f      	beq.n	804371a <HAL_RCCEx_PeriphCLKConfig+0x1056>
 80436da:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80436de:	d818      	bhi.n	8043712 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 80436e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80436e4:	d003      	beq.n	80436ee <HAL_RCCEx_PeriphCLKConfig+0x102a>
 80436e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80436ea:	d007      	beq.n	80436fc <HAL_RCCEx_PeriphCLKConfig+0x1038>
 80436ec:	e011      	b.n	8043712 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80436ee:	4b64      	ldr	r3, [pc, #400]	; (8043880 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80436f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80436f2:	4a63      	ldr	r2, [pc, #396]	; (8043880 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80436f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80436f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80436fa:	e00f      	b.n	804371c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80436fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043700:	3328      	adds	r3, #40	; 0x28
 8043702:	2101      	movs	r1, #1
 8043704:	4618      	mov	r0, r3
 8043706:	f000 fd97 	bl	8044238 <RCCEx_PLL3_Config>
 804370a:	4603      	mov	r3, r0
 804370c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8043710:	e004      	b.n	804371c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8043712:	2301      	movs	r3, #1
 8043714:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8043718:	e000      	b.n	804371c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 804371a:	bf00      	nop
    }

    if (ret == HAL_OK)
 804371c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043720:	2b00      	cmp	r3, #0
 8043722:	d10b      	bne.n	804373c <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8043724:	4b56      	ldr	r3, [pc, #344]	; (8043880 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8043726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8043728:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 804372c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8043734:	4a52      	ldr	r2, [pc, #328]	; (8043880 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8043736:	430b      	orrs	r3, r1
 8043738:	6553      	str	r3, [r2, #84]	; 0x54
 804373a:	e003      	b.n	8043744 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804373c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043740:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8043744:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043748:	e9d3 2300 	ldrd	r2, r3, [r3]
 804374c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8043750:	673b      	str	r3, [r7, #112]	; 0x70
 8043752:	2300      	movs	r3, #0
 8043754:	677b      	str	r3, [r7, #116]	; 0x74
 8043756:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 804375a:	460b      	mov	r3, r1
 804375c:	4313      	orrs	r3, r2
 804375e:	d031      	beq.n	80437c4 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8043760:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8043766:	2b00      	cmp	r3, #0
 8043768:	d003      	beq.n	8043772 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 804376a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804376e:	d007      	beq.n	8043780 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8043770:	e011      	b.n	8043796 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8043772:	4b43      	ldr	r3, [pc, #268]	; (8043880 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8043774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043776:	4a42      	ldr	r2, [pc, #264]	; (8043880 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8043778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804377c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 804377e:	e00e      	b.n	804379e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8043780:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043784:	3308      	adds	r3, #8
 8043786:	2102      	movs	r1, #2
 8043788:	4618      	mov	r0, r3
 804378a:	f000 fca3 	bl	80440d4 <RCCEx_PLL2_Config>
 804378e:	4603      	mov	r3, r0
 8043790:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8043794:	e003      	b.n	804379e <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8043796:	2301      	movs	r3, #1
 8043798:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 804379c:	bf00      	nop
    }

    if (ret == HAL_OK)
 804379e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80437a2:	2b00      	cmp	r3, #0
 80437a4:	d10a      	bne.n	80437bc <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80437a6:	4b36      	ldr	r3, [pc, #216]	; (8043880 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80437a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80437aa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80437ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80437b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80437b4:	4a32      	ldr	r2, [pc, #200]	; (8043880 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80437b6:	430b      	orrs	r3, r1
 80437b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80437ba:	e003      	b.n	80437c4 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80437bc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80437c0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80437c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80437c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80437cc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80437d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80437d2:	2300      	movs	r3, #0
 80437d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80437d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80437da:	460b      	mov	r3, r1
 80437dc:	4313      	orrs	r3, r2
 80437de:	d00c      	beq.n	80437fa <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80437e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80437e4:	3328      	adds	r3, #40	; 0x28
 80437e6:	2102      	movs	r1, #2
 80437e8:	4618      	mov	r0, r3
 80437ea:	f000 fd25 	bl	8044238 <RCCEx_PLL3_Config>
 80437ee:	4603      	mov	r3, r0
 80437f0:	2b00      	cmp	r3, #0
 80437f2:	d002      	beq.n	80437fa <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 80437f4:	2301      	movs	r3, #1
 80437f6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80437fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80437fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043802:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8043806:	663b      	str	r3, [r7, #96]	; 0x60
 8043808:	2300      	movs	r3, #0
 804380a:	667b      	str	r3, [r7, #100]	; 0x64
 804380c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8043810:	460b      	mov	r3, r1
 8043812:	4313      	orrs	r3, r2
 8043814:	d03a      	beq.n	804388c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8043816:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804381a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804381e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8043822:	d018      	beq.n	8043856 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8043824:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8043828:	d811      	bhi.n	804384e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 804382a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804382e:	d014      	beq.n	804385a <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8043830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8043834:	d80b      	bhi.n	804384e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8043836:	2b00      	cmp	r3, #0
 8043838:	d011      	beq.n	804385e <HAL_RCCEx_PeriphCLKConfig+0x119a>
 804383a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804383e:	d106      	bne.n	804384e <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8043840:	4b0f      	ldr	r3, [pc, #60]	; (8043880 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8043842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043844:	4a0e      	ldr	r2, [pc, #56]	; (8043880 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8043846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804384a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 804384c:	e008      	b.n	8043860 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 804384e:	2301      	movs	r3, #1
 8043850:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8043854:	e004      	b.n	8043860 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8043856:	bf00      	nop
 8043858:	e002      	b.n	8043860 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 804385a:	bf00      	nop
 804385c:	e000      	b.n	8043860 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 804385e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8043860:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043864:	2b00      	cmp	r3, #0
 8043866:	d10d      	bne.n	8043884 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8043868:	4b05      	ldr	r3, [pc, #20]	; (8043880 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 804386a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804386c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8043870:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8043878:	4a01      	ldr	r2, [pc, #4]	; (8043880 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 804387a:	430b      	orrs	r3, r1
 804387c:	6553      	str	r3, [r2, #84]	; 0x54
 804387e:	e005      	b.n	804388c <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8043880:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043884:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043888:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 804388c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043894:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8043898:	65bb      	str	r3, [r7, #88]	; 0x58
 804389a:	2300      	movs	r3, #0
 804389c:	65fb      	str	r3, [r7, #92]	; 0x5c
 804389e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80438a2:	460b      	mov	r3, r1
 80438a4:	4313      	orrs	r3, r2
 80438a6:	d009      	beq.n	80438bc <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80438a8:	4baa      	ldr	r3, [pc, #680]	; (8043b54 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80438aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80438ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80438b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80438b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80438b6:	4aa7      	ldr	r2, [pc, #668]	; (8043b54 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80438b8:	430b      	orrs	r3, r1
 80438ba:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80438bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80438c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80438c4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80438c8:	653b      	str	r3, [r7, #80]	; 0x50
 80438ca:	2300      	movs	r3, #0
 80438cc:	657b      	str	r3, [r7, #84]	; 0x54
 80438ce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80438d2:	460b      	mov	r3, r1
 80438d4:	4313      	orrs	r3, r2
 80438d6:	d00a      	beq.n	80438ee <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80438d8:	4b9e      	ldr	r3, [pc, #632]	; (8043b54 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80438da:	691b      	ldr	r3, [r3, #16]
 80438dc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80438e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80438e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80438e8:	4a9a      	ldr	r2, [pc, #616]	; (8043b54 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80438ea:	430b      	orrs	r3, r1
 80438ec:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80438ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80438f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80438f6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80438fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80438fc:	2300      	movs	r3, #0
 80438fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8043900:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8043904:	460b      	mov	r3, r1
 8043906:	4313      	orrs	r3, r2
 8043908:	d009      	beq.n	804391e <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 804390a:	4b92      	ldr	r3, [pc, #584]	; (8043b54 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 804390c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804390e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8043912:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8043918:	4a8e      	ldr	r2, [pc, #568]	; (8043b54 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 804391a:	430b      	orrs	r3, r1
 804391c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 804391e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043926:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 804392a:	643b      	str	r3, [r7, #64]	; 0x40
 804392c:	2300      	movs	r3, #0
 804392e:	647b      	str	r3, [r7, #68]	; 0x44
 8043930:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8043934:	460b      	mov	r3, r1
 8043936:	4313      	orrs	r3, r2
 8043938:	d00e      	beq.n	8043958 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 804393a:	4b86      	ldr	r3, [pc, #536]	; (8043b54 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 804393c:	691b      	ldr	r3, [r3, #16]
 804393e:	4a85      	ldr	r2, [pc, #532]	; (8043b54 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8043940:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8043944:	6113      	str	r3, [r2, #16]
 8043946:	4b83      	ldr	r3, [pc, #524]	; (8043b54 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8043948:	6919      	ldr	r1, [r3, #16]
 804394a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804394e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8043952:	4a80      	ldr	r2, [pc, #512]	; (8043b54 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8043954:	430b      	orrs	r3, r1
 8043956:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8043958:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804395c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043960:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8043964:	63bb      	str	r3, [r7, #56]	; 0x38
 8043966:	2300      	movs	r3, #0
 8043968:	63fb      	str	r3, [r7, #60]	; 0x3c
 804396a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 804396e:	460b      	mov	r3, r1
 8043970:	4313      	orrs	r3, r2
 8043972:	d009      	beq.n	8043988 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8043974:	4b77      	ldr	r3, [pc, #476]	; (8043b54 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8043976:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8043978:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 804397c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8043982:	4a74      	ldr	r2, [pc, #464]	; (8043b54 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8043984:	430b      	orrs	r3, r1
 8043986:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8043988:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804398c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043990:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8043994:	633b      	str	r3, [r7, #48]	; 0x30
 8043996:	2300      	movs	r3, #0
 8043998:	637b      	str	r3, [r7, #52]	; 0x34
 804399a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 804399e:	460b      	mov	r3, r1
 80439a0:	4313      	orrs	r3, r2
 80439a2:	d00a      	beq.n	80439ba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80439a4:	4b6b      	ldr	r3, [pc, #428]	; (8043b54 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80439a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80439a8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80439ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80439b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80439b4:	4a67      	ldr	r2, [pc, #412]	; (8043b54 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80439b6:	430b      	orrs	r3, r1
 80439b8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80439ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80439be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80439c2:	2100      	movs	r1, #0
 80439c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80439c6:	f003 0301 	and.w	r3, r3, #1
 80439ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80439cc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80439d0:	460b      	mov	r3, r1
 80439d2:	4313      	orrs	r3, r2
 80439d4:	d011      	beq.n	80439fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80439d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80439da:	3308      	adds	r3, #8
 80439dc:	2100      	movs	r1, #0
 80439de:	4618      	mov	r0, r3
 80439e0:	f000 fb78 	bl	80440d4 <RCCEx_PLL2_Config>
 80439e4:	4603      	mov	r3, r0
 80439e6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80439ea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80439ee:	2b00      	cmp	r3, #0
 80439f0:	d003      	beq.n	80439fa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80439f2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80439f6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80439fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80439fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043a02:	2100      	movs	r1, #0
 8043a04:	6239      	str	r1, [r7, #32]
 8043a06:	f003 0302 	and.w	r3, r3, #2
 8043a0a:	627b      	str	r3, [r7, #36]	; 0x24
 8043a0c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8043a10:	460b      	mov	r3, r1
 8043a12:	4313      	orrs	r3, r2
 8043a14:	d011      	beq.n	8043a3a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8043a16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043a1a:	3308      	adds	r3, #8
 8043a1c:	2101      	movs	r1, #1
 8043a1e:	4618      	mov	r0, r3
 8043a20:	f000 fb58 	bl	80440d4 <RCCEx_PLL2_Config>
 8043a24:	4603      	mov	r3, r0
 8043a26:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8043a2a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043a2e:	2b00      	cmp	r3, #0
 8043a30:	d003      	beq.n	8043a3a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043a32:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043a36:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8043a3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043a42:	2100      	movs	r1, #0
 8043a44:	61b9      	str	r1, [r7, #24]
 8043a46:	f003 0304 	and.w	r3, r3, #4
 8043a4a:	61fb      	str	r3, [r7, #28]
 8043a4c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8043a50:	460b      	mov	r3, r1
 8043a52:	4313      	orrs	r3, r2
 8043a54:	d011      	beq.n	8043a7a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8043a56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043a5a:	3308      	adds	r3, #8
 8043a5c:	2102      	movs	r1, #2
 8043a5e:	4618      	mov	r0, r3
 8043a60:	f000 fb38 	bl	80440d4 <RCCEx_PLL2_Config>
 8043a64:	4603      	mov	r3, r0
 8043a66:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8043a6a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043a6e:	2b00      	cmp	r3, #0
 8043a70:	d003      	beq.n	8043a7a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043a72:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043a76:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8043a7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043a82:	2100      	movs	r1, #0
 8043a84:	6139      	str	r1, [r7, #16]
 8043a86:	f003 0308 	and.w	r3, r3, #8
 8043a8a:	617b      	str	r3, [r7, #20]
 8043a8c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8043a90:	460b      	mov	r3, r1
 8043a92:	4313      	orrs	r3, r2
 8043a94:	d011      	beq.n	8043aba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8043a96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043a9a:	3328      	adds	r3, #40	; 0x28
 8043a9c:	2100      	movs	r1, #0
 8043a9e:	4618      	mov	r0, r3
 8043aa0:	f000 fbca 	bl	8044238 <RCCEx_PLL3_Config>
 8043aa4:	4603      	mov	r3, r0
 8043aa6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 8043aaa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043aae:	2b00      	cmp	r3, #0
 8043ab0:	d003      	beq.n	8043aba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043ab2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043ab6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8043aba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043ac2:	2100      	movs	r1, #0
 8043ac4:	60b9      	str	r1, [r7, #8]
 8043ac6:	f003 0310 	and.w	r3, r3, #16
 8043aca:	60fb      	str	r3, [r7, #12]
 8043acc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8043ad0:	460b      	mov	r3, r1
 8043ad2:	4313      	orrs	r3, r2
 8043ad4:	d011      	beq.n	8043afa <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8043ad6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043ada:	3328      	adds	r3, #40	; 0x28
 8043adc:	2101      	movs	r1, #1
 8043ade:	4618      	mov	r0, r3
 8043ae0:	f000 fbaa 	bl	8044238 <RCCEx_PLL3_Config>
 8043ae4:	4603      	mov	r3, r0
 8043ae6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8043aea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043aee:	2b00      	cmp	r3, #0
 8043af0:	d003      	beq.n	8043afa <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043af2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043af6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8043afa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043b02:	2100      	movs	r1, #0
 8043b04:	6039      	str	r1, [r7, #0]
 8043b06:	f003 0320 	and.w	r3, r3, #32
 8043b0a:	607b      	str	r3, [r7, #4]
 8043b0c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8043b10:	460b      	mov	r3, r1
 8043b12:	4313      	orrs	r3, r2
 8043b14:	d011      	beq.n	8043b3a <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8043b16:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043b1a:	3328      	adds	r3, #40	; 0x28
 8043b1c:	2102      	movs	r1, #2
 8043b1e:	4618      	mov	r0, r3
 8043b20:	f000 fb8a 	bl	8044238 <RCCEx_PLL3_Config>
 8043b24:	4603      	mov	r3, r0
 8043b26:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8043b2a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043b2e:	2b00      	cmp	r3, #0
 8043b30:	d003      	beq.n	8043b3a <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043b32:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043b36:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 8043b3a:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8043b3e:	2b00      	cmp	r3, #0
 8043b40:	d101      	bne.n	8043b46 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8043b42:	2300      	movs	r3, #0
 8043b44:	e000      	b.n	8043b48 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8043b46:	2301      	movs	r3, #1
}
 8043b48:	4618      	mov	r0, r3
 8043b4a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8043b4e:	46bd      	mov	sp, r7
 8043b50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8043b54:	58024400 	.word	0x58024400

08043b58 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8043b58:	b580      	push	{r7, lr}
 8043b5a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8043b5c:	f7fe fd56 	bl	804260c <HAL_RCC_GetHCLKFreq>
 8043b60:	4602      	mov	r2, r0
 8043b62:	4b06      	ldr	r3, [pc, #24]	; (8043b7c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8043b64:	6a1b      	ldr	r3, [r3, #32]
 8043b66:	091b      	lsrs	r3, r3, #4
 8043b68:	f003 0307 	and.w	r3, r3, #7
 8043b6c:	4904      	ldr	r1, [pc, #16]	; (8043b80 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8043b6e:	5ccb      	ldrb	r3, [r1, r3]
 8043b70:	f003 031f 	and.w	r3, r3, #31
 8043b74:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8043b78:	4618      	mov	r0, r3
 8043b7a:	bd80      	pop	{r7, pc}
 8043b7c:	58024400 	.word	0x58024400
 8043b80:	08046724 	.word	0x08046724

08043b84 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8043b84:	b480      	push	{r7}
 8043b86:	b089      	sub	sp, #36	; 0x24
 8043b88:	af00      	add	r7, sp, #0
 8043b8a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8043b8c:	4ba1      	ldr	r3, [pc, #644]	; (8043e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043b90:	f003 0303 	and.w	r3, r3, #3
 8043b94:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8043b96:	4b9f      	ldr	r3, [pc, #636]	; (8043e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043b9a:	0b1b      	lsrs	r3, r3, #12
 8043b9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8043ba0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8043ba2:	4b9c      	ldr	r3, [pc, #624]	; (8043e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043ba6:	091b      	lsrs	r3, r3, #4
 8043ba8:	f003 0301 	and.w	r3, r3, #1
 8043bac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8043bae:	4b99      	ldr	r3, [pc, #612]	; (8043e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043bb2:	08db      	lsrs	r3, r3, #3
 8043bb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8043bb8:	693a      	ldr	r2, [r7, #16]
 8043bba:	fb02 f303 	mul.w	r3, r2, r3
 8043bbe:	ee07 3a90 	vmov	s15, r3
 8043bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043bc6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8043bca:	697b      	ldr	r3, [r7, #20]
 8043bcc:	2b00      	cmp	r3, #0
 8043bce:	f000 8111 	beq.w	8043df4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8043bd2:	69bb      	ldr	r3, [r7, #24]
 8043bd4:	2b02      	cmp	r3, #2
 8043bd6:	f000 8083 	beq.w	8043ce0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8043bda:	69bb      	ldr	r3, [r7, #24]
 8043bdc:	2b02      	cmp	r3, #2
 8043bde:	f200 80a1 	bhi.w	8043d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8043be2:	69bb      	ldr	r3, [r7, #24]
 8043be4:	2b00      	cmp	r3, #0
 8043be6:	d003      	beq.n	8043bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8043be8:	69bb      	ldr	r3, [r7, #24]
 8043bea:	2b01      	cmp	r3, #1
 8043bec:	d056      	beq.n	8043c9c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8043bee:	e099      	b.n	8043d24 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8043bf0:	4b88      	ldr	r3, [pc, #544]	; (8043e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043bf2:	681b      	ldr	r3, [r3, #0]
 8043bf4:	f003 0320 	and.w	r3, r3, #32
 8043bf8:	2b00      	cmp	r3, #0
 8043bfa:	d02d      	beq.n	8043c58 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8043bfc:	4b85      	ldr	r3, [pc, #532]	; (8043e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043bfe:	681b      	ldr	r3, [r3, #0]
 8043c00:	08db      	lsrs	r3, r3, #3
 8043c02:	f003 0303 	and.w	r3, r3, #3
 8043c06:	4a84      	ldr	r2, [pc, #528]	; (8043e18 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8043c08:	fa22 f303 	lsr.w	r3, r2, r3
 8043c0c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8043c0e:	68bb      	ldr	r3, [r7, #8]
 8043c10:	ee07 3a90 	vmov	s15, r3
 8043c14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043c18:	697b      	ldr	r3, [r7, #20]
 8043c1a:	ee07 3a90 	vmov	s15, r3
 8043c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043c26:	4b7b      	ldr	r3, [pc, #492]	; (8043e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8043c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043c2e:	ee07 3a90 	vmov	s15, r3
 8043c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043c36:	ed97 6a03 	vldr	s12, [r7, #12]
 8043c3a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8043e1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8043c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043c46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8043c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043c52:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8043c56:	e087      	b.n	8043d68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8043c58:	697b      	ldr	r3, [r7, #20]
 8043c5a:	ee07 3a90 	vmov	s15, r3
 8043c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043c62:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8043e20 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8043c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043c6a:	4b6a      	ldr	r3, [pc, #424]	; (8043e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8043c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043c72:	ee07 3a90 	vmov	s15, r3
 8043c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043c7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8043c7e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8043e1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8043c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8043c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043c96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8043c9a:	e065      	b.n	8043d68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8043c9c:	697b      	ldr	r3, [r7, #20]
 8043c9e:	ee07 3a90 	vmov	s15, r3
 8043ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043ca6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8043e24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8043caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043cae:	4b59      	ldr	r3, [pc, #356]	; (8043e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8043cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043cb6:	ee07 3a90 	vmov	s15, r3
 8043cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043cbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8043cc2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8043e1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8043cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8043cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043cda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8043cde:	e043      	b.n	8043d68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8043ce0:	697b      	ldr	r3, [r7, #20]
 8043ce2:	ee07 3a90 	vmov	s15, r3
 8043ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043cea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8043e28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8043cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043cf2:	4b48      	ldr	r3, [pc, #288]	; (8043e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8043cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043cfa:	ee07 3a90 	vmov	s15, r3
 8043cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8043d06:	eddf 5a45 	vldr	s11, [pc, #276]	; 8043e1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8043d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8043d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8043d22:	e021      	b.n	8043d68 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8043d24:	697b      	ldr	r3, [r7, #20]
 8043d26:	ee07 3a90 	vmov	s15, r3
 8043d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043d2e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8043e24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8043d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043d36:	4b37      	ldr	r3, [pc, #220]	; (8043e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8043d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043d3e:	ee07 3a90 	vmov	s15, r3
 8043d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043d46:	ed97 6a03 	vldr	s12, [r7, #12]
 8043d4a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8043e1c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8043d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8043d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043d62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8043d66:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8043d68:	4b2a      	ldr	r3, [pc, #168]	; (8043e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8043d6c:	0a5b      	lsrs	r3, r3, #9
 8043d6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8043d72:	ee07 3a90 	vmov	s15, r3
 8043d76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043d7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8043d7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8043d82:	edd7 6a07 	vldr	s13, [r7, #28]
 8043d86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8043d8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8043d8e:	ee17 2a90 	vmov	r2, s15
 8043d92:	687b      	ldr	r3, [r7, #4]
 8043d94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8043d96:	4b1f      	ldr	r3, [pc, #124]	; (8043e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8043d9a:	0c1b      	lsrs	r3, r3, #16
 8043d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8043da0:	ee07 3a90 	vmov	s15, r3
 8043da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043da8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8043dac:	ee37 7a87 	vadd.f32	s14, s15, s14
 8043db0:	edd7 6a07 	vldr	s13, [r7, #28]
 8043db4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8043db8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8043dbc:	ee17 2a90 	vmov	r2, s15
 8043dc0:	687b      	ldr	r3, [r7, #4]
 8043dc2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8043dc4:	4b13      	ldr	r3, [pc, #76]	; (8043e14 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8043dc8:	0e1b      	lsrs	r3, r3, #24
 8043dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8043dce:	ee07 3a90 	vmov	s15, r3
 8043dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043dd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8043dda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8043dde:	edd7 6a07 	vldr	s13, [r7, #28]
 8043de2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8043de6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8043dea:	ee17 2a90 	vmov	r2, s15
 8043dee:	687b      	ldr	r3, [r7, #4]
 8043df0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8043df2:	e008      	b.n	8043e06 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8043df4:	687b      	ldr	r3, [r7, #4]
 8043df6:	2200      	movs	r2, #0
 8043df8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8043dfa:	687b      	ldr	r3, [r7, #4]
 8043dfc:	2200      	movs	r2, #0
 8043dfe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8043e00:	687b      	ldr	r3, [r7, #4]
 8043e02:	2200      	movs	r2, #0
 8043e04:	609a      	str	r2, [r3, #8]
}
 8043e06:	bf00      	nop
 8043e08:	3724      	adds	r7, #36	; 0x24
 8043e0a:	46bd      	mov	sp, r7
 8043e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043e10:	4770      	bx	lr
 8043e12:	bf00      	nop
 8043e14:	58024400 	.word	0x58024400
 8043e18:	03d09000 	.word	0x03d09000
 8043e1c:	46000000 	.word	0x46000000
 8043e20:	4c742400 	.word	0x4c742400
 8043e24:	4a742400 	.word	0x4a742400
 8043e28:	4bbebc20 	.word	0x4bbebc20

08043e2c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8043e2c:	b480      	push	{r7}
 8043e2e:	b089      	sub	sp, #36	; 0x24
 8043e30:	af00      	add	r7, sp, #0
 8043e32:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8043e34:	4ba1      	ldr	r3, [pc, #644]	; (80440bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043e38:	f003 0303 	and.w	r3, r3, #3
 8043e3c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8043e3e:	4b9f      	ldr	r3, [pc, #636]	; (80440bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043e42:	0d1b      	lsrs	r3, r3, #20
 8043e44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8043e48:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8043e4a:	4b9c      	ldr	r3, [pc, #624]	; (80440bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043e4e:	0a1b      	lsrs	r3, r3, #8
 8043e50:	f003 0301 	and.w	r3, r3, #1
 8043e54:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8043e56:	4b99      	ldr	r3, [pc, #612]	; (80440bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8043e5a:	08db      	lsrs	r3, r3, #3
 8043e5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8043e60:	693a      	ldr	r2, [r7, #16]
 8043e62:	fb02 f303 	mul.w	r3, r2, r3
 8043e66:	ee07 3a90 	vmov	s15, r3
 8043e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043e6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8043e72:	697b      	ldr	r3, [r7, #20]
 8043e74:	2b00      	cmp	r3, #0
 8043e76:	f000 8111 	beq.w	804409c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8043e7a:	69bb      	ldr	r3, [r7, #24]
 8043e7c:	2b02      	cmp	r3, #2
 8043e7e:	f000 8083 	beq.w	8043f88 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8043e82:	69bb      	ldr	r3, [r7, #24]
 8043e84:	2b02      	cmp	r3, #2
 8043e86:	f200 80a1 	bhi.w	8043fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8043e8a:	69bb      	ldr	r3, [r7, #24]
 8043e8c:	2b00      	cmp	r3, #0
 8043e8e:	d003      	beq.n	8043e98 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8043e90:	69bb      	ldr	r3, [r7, #24]
 8043e92:	2b01      	cmp	r3, #1
 8043e94:	d056      	beq.n	8043f44 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8043e96:	e099      	b.n	8043fcc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8043e98:	4b88      	ldr	r3, [pc, #544]	; (80440bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043e9a:	681b      	ldr	r3, [r3, #0]
 8043e9c:	f003 0320 	and.w	r3, r3, #32
 8043ea0:	2b00      	cmp	r3, #0
 8043ea2:	d02d      	beq.n	8043f00 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8043ea4:	4b85      	ldr	r3, [pc, #532]	; (80440bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043ea6:	681b      	ldr	r3, [r3, #0]
 8043ea8:	08db      	lsrs	r3, r3, #3
 8043eaa:	f003 0303 	and.w	r3, r3, #3
 8043eae:	4a84      	ldr	r2, [pc, #528]	; (80440c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8043eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8043eb4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8043eb6:	68bb      	ldr	r3, [r7, #8]
 8043eb8:	ee07 3a90 	vmov	s15, r3
 8043ebc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043ec0:	697b      	ldr	r3, [r7, #20]
 8043ec2:	ee07 3a90 	vmov	s15, r3
 8043ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043ece:	4b7b      	ldr	r3, [pc, #492]	; (80440bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043ed6:	ee07 3a90 	vmov	s15, r3
 8043eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043ede:	ed97 6a03 	vldr	s12, [r7, #12]
 8043ee2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80440c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8043ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8043ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043efa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8043efe:	e087      	b.n	8044010 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8043f00:	697b      	ldr	r3, [r7, #20]
 8043f02:	ee07 3a90 	vmov	s15, r3
 8043f06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043f0a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80440c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8043f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043f12:	4b6a      	ldr	r3, [pc, #424]	; (80440bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043f16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043f1a:	ee07 3a90 	vmov	s15, r3
 8043f1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043f22:	ed97 6a03 	vldr	s12, [r7, #12]
 8043f26:	eddf 5a67 	vldr	s11, [pc, #412]	; 80440c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8043f2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043f2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043f32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8043f36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043f3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043f3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8043f42:	e065      	b.n	8044010 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8043f44:	697b      	ldr	r3, [r7, #20]
 8043f46:	ee07 3a90 	vmov	s15, r3
 8043f4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043f4e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80440cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8043f52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043f56:	4b59      	ldr	r3, [pc, #356]	; (80440bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043f5e:	ee07 3a90 	vmov	s15, r3
 8043f62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043f66:	ed97 6a03 	vldr	s12, [r7, #12]
 8043f6a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80440c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8043f6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043f72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043f76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8043f7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043f7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043f82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8043f86:	e043      	b.n	8044010 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8043f88:	697b      	ldr	r3, [r7, #20]
 8043f8a:	ee07 3a90 	vmov	s15, r3
 8043f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043f92:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80440d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8043f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043f9a:	4b48      	ldr	r3, [pc, #288]	; (80440bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043fa2:	ee07 3a90 	vmov	s15, r3
 8043fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043faa:	ed97 6a03 	vldr	s12, [r7, #12]
 8043fae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80440c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8043fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8043fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043fc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8043fca:	e021      	b.n	8044010 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8043fcc:	697b      	ldr	r3, [r7, #20]
 8043fce:	ee07 3a90 	vmov	s15, r3
 8043fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043fd6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80440cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8043fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043fde:	4b37      	ldr	r3, [pc, #220]	; (80440bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043fe6:	ee07 3a90 	vmov	s15, r3
 8043fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043fee:	ed97 6a03 	vldr	s12, [r7, #12]
 8043ff2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80440c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8043ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043ffe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8044002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8044006:	ee67 7a27 	vmul.f32	s15, s14, s15
 804400a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 804400e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8044010:	4b2a      	ldr	r3, [pc, #168]	; (80440bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8044012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044014:	0a5b      	lsrs	r3, r3, #9
 8044016:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 804401a:	ee07 3a90 	vmov	s15, r3
 804401e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8044022:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8044026:	ee37 7a87 	vadd.f32	s14, s15, s14
 804402a:	edd7 6a07 	vldr	s13, [r7, #28]
 804402e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8044032:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8044036:	ee17 2a90 	vmov	r2, s15
 804403a:	687b      	ldr	r3, [r7, #4]
 804403c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 804403e:	4b1f      	ldr	r3, [pc, #124]	; (80440bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8044040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044042:	0c1b      	lsrs	r3, r3, #16
 8044044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8044048:	ee07 3a90 	vmov	s15, r3
 804404c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8044050:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8044054:	ee37 7a87 	vadd.f32	s14, s15, s14
 8044058:	edd7 6a07 	vldr	s13, [r7, #28]
 804405c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8044060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8044064:	ee17 2a90 	vmov	r2, s15
 8044068:	687b      	ldr	r3, [r7, #4]
 804406a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 804406c:	4b13      	ldr	r3, [pc, #76]	; (80440bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 804406e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044070:	0e1b      	lsrs	r3, r3, #24
 8044072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8044076:	ee07 3a90 	vmov	s15, r3
 804407a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 804407e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8044082:	ee37 7a87 	vadd.f32	s14, s15, s14
 8044086:	edd7 6a07 	vldr	s13, [r7, #28]
 804408a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 804408e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8044092:	ee17 2a90 	vmov	r2, s15
 8044096:	687b      	ldr	r3, [r7, #4]
 8044098:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 804409a:	e008      	b.n	80440ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 804409c:	687b      	ldr	r3, [r7, #4]
 804409e:	2200      	movs	r2, #0
 80440a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80440a2:	687b      	ldr	r3, [r7, #4]
 80440a4:	2200      	movs	r2, #0
 80440a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80440a8:	687b      	ldr	r3, [r7, #4]
 80440aa:	2200      	movs	r2, #0
 80440ac:	609a      	str	r2, [r3, #8]
}
 80440ae:	bf00      	nop
 80440b0:	3724      	adds	r7, #36	; 0x24
 80440b2:	46bd      	mov	sp, r7
 80440b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80440b8:	4770      	bx	lr
 80440ba:	bf00      	nop
 80440bc:	58024400 	.word	0x58024400
 80440c0:	03d09000 	.word	0x03d09000
 80440c4:	46000000 	.word	0x46000000
 80440c8:	4c742400 	.word	0x4c742400
 80440cc:	4a742400 	.word	0x4a742400
 80440d0:	4bbebc20 	.word	0x4bbebc20

080440d4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80440d4:	b580      	push	{r7, lr}
 80440d6:	b084      	sub	sp, #16
 80440d8:	af00      	add	r7, sp, #0
 80440da:	6078      	str	r0, [r7, #4]
 80440dc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80440de:	2300      	movs	r3, #0
 80440e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80440e2:	4b53      	ldr	r3, [pc, #332]	; (8044230 <RCCEx_PLL2_Config+0x15c>)
 80440e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80440e6:	f003 0303 	and.w	r3, r3, #3
 80440ea:	2b03      	cmp	r3, #3
 80440ec:	d101      	bne.n	80440f2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80440ee:	2301      	movs	r3, #1
 80440f0:	e099      	b.n	8044226 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80440f2:	4b4f      	ldr	r3, [pc, #316]	; (8044230 <RCCEx_PLL2_Config+0x15c>)
 80440f4:	681b      	ldr	r3, [r3, #0]
 80440f6:	4a4e      	ldr	r2, [pc, #312]	; (8044230 <RCCEx_PLL2_Config+0x15c>)
 80440f8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80440fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80440fe:	f7fc ff05 	bl	8040f0c <HAL_GetTick>
 8044102:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8044104:	e008      	b.n	8044118 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8044106:	f7fc ff01 	bl	8040f0c <HAL_GetTick>
 804410a:	4602      	mov	r2, r0
 804410c:	68bb      	ldr	r3, [r7, #8]
 804410e:	1ad3      	subs	r3, r2, r3
 8044110:	2b02      	cmp	r3, #2
 8044112:	d901      	bls.n	8044118 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8044114:	2303      	movs	r3, #3
 8044116:	e086      	b.n	8044226 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8044118:	4b45      	ldr	r3, [pc, #276]	; (8044230 <RCCEx_PLL2_Config+0x15c>)
 804411a:	681b      	ldr	r3, [r3, #0]
 804411c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8044120:	2b00      	cmp	r3, #0
 8044122:	d1f0      	bne.n	8044106 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8044124:	4b42      	ldr	r3, [pc, #264]	; (8044230 <RCCEx_PLL2_Config+0x15c>)
 8044126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8044128:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 804412c:	687b      	ldr	r3, [r7, #4]
 804412e:	681b      	ldr	r3, [r3, #0]
 8044130:	031b      	lsls	r3, r3, #12
 8044132:	493f      	ldr	r1, [pc, #252]	; (8044230 <RCCEx_PLL2_Config+0x15c>)
 8044134:	4313      	orrs	r3, r2
 8044136:	628b      	str	r3, [r1, #40]	; 0x28
 8044138:	687b      	ldr	r3, [r7, #4]
 804413a:	685b      	ldr	r3, [r3, #4]
 804413c:	3b01      	subs	r3, #1
 804413e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8044142:	687b      	ldr	r3, [r7, #4]
 8044144:	689b      	ldr	r3, [r3, #8]
 8044146:	3b01      	subs	r3, #1
 8044148:	025b      	lsls	r3, r3, #9
 804414a:	b29b      	uxth	r3, r3
 804414c:	431a      	orrs	r2, r3
 804414e:	687b      	ldr	r3, [r7, #4]
 8044150:	68db      	ldr	r3, [r3, #12]
 8044152:	3b01      	subs	r3, #1
 8044154:	041b      	lsls	r3, r3, #16
 8044156:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 804415a:	431a      	orrs	r2, r3
 804415c:	687b      	ldr	r3, [r7, #4]
 804415e:	691b      	ldr	r3, [r3, #16]
 8044160:	3b01      	subs	r3, #1
 8044162:	061b      	lsls	r3, r3, #24
 8044164:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8044168:	4931      	ldr	r1, [pc, #196]	; (8044230 <RCCEx_PLL2_Config+0x15c>)
 804416a:	4313      	orrs	r3, r2
 804416c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 804416e:	4b30      	ldr	r3, [pc, #192]	; (8044230 <RCCEx_PLL2_Config+0x15c>)
 8044170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044172:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8044176:	687b      	ldr	r3, [r7, #4]
 8044178:	695b      	ldr	r3, [r3, #20]
 804417a:	492d      	ldr	r1, [pc, #180]	; (8044230 <RCCEx_PLL2_Config+0x15c>)
 804417c:	4313      	orrs	r3, r2
 804417e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8044180:	4b2b      	ldr	r3, [pc, #172]	; (8044230 <RCCEx_PLL2_Config+0x15c>)
 8044182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044184:	f023 0220 	bic.w	r2, r3, #32
 8044188:	687b      	ldr	r3, [r7, #4]
 804418a:	699b      	ldr	r3, [r3, #24]
 804418c:	4928      	ldr	r1, [pc, #160]	; (8044230 <RCCEx_PLL2_Config+0x15c>)
 804418e:	4313      	orrs	r3, r2
 8044190:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8044192:	4b27      	ldr	r3, [pc, #156]	; (8044230 <RCCEx_PLL2_Config+0x15c>)
 8044194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044196:	4a26      	ldr	r2, [pc, #152]	; (8044230 <RCCEx_PLL2_Config+0x15c>)
 8044198:	f023 0310 	bic.w	r3, r3, #16
 804419c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 804419e:	4b24      	ldr	r3, [pc, #144]	; (8044230 <RCCEx_PLL2_Config+0x15c>)
 80441a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80441a2:	4b24      	ldr	r3, [pc, #144]	; (8044234 <RCCEx_PLL2_Config+0x160>)
 80441a4:	4013      	ands	r3, r2
 80441a6:	687a      	ldr	r2, [r7, #4]
 80441a8:	69d2      	ldr	r2, [r2, #28]
 80441aa:	00d2      	lsls	r2, r2, #3
 80441ac:	4920      	ldr	r1, [pc, #128]	; (8044230 <RCCEx_PLL2_Config+0x15c>)
 80441ae:	4313      	orrs	r3, r2
 80441b0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80441b2:	4b1f      	ldr	r3, [pc, #124]	; (8044230 <RCCEx_PLL2_Config+0x15c>)
 80441b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80441b6:	4a1e      	ldr	r2, [pc, #120]	; (8044230 <RCCEx_PLL2_Config+0x15c>)
 80441b8:	f043 0310 	orr.w	r3, r3, #16
 80441bc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80441be:	683b      	ldr	r3, [r7, #0]
 80441c0:	2b00      	cmp	r3, #0
 80441c2:	d106      	bne.n	80441d2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80441c4:	4b1a      	ldr	r3, [pc, #104]	; (8044230 <RCCEx_PLL2_Config+0x15c>)
 80441c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80441c8:	4a19      	ldr	r2, [pc, #100]	; (8044230 <RCCEx_PLL2_Config+0x15c>)
 80441ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80441ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80441d0:	e00f      	b.n	80441f2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80441d2:	683b      	ldr	r3, [r7, #0]
 80441d4:	2b01      	cmp	r3, #1
 80441d6:	d106      	bne.n	80441e6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80441d8:	4b15      	ldr	r3, [pc, #84]	; (8044230 <RCCEx_PLL2_Config+0x15c>)
 80441da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80441dc:	4a14      	ldr	r2, [pc, #80]	; (8044230 <RCCEx_PLL2_Config+0x15c>)
 80441de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80441e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80441e4:	e005      	b.n	80441f2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80441e6:	4b12      	ldr	r3, [pc, #72]	; (8044230 <RCCEx_PLL2_Config+0x15c>)
 80441e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80441ea:	4a11      	ldr	r2, [pc, #68]	; (8044230 <RCCEx_PLL2_Config+0x15c>)
 80441ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80441f0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80441f2:	4b0f      	ldr	r3, [pc, #60]	; (8044230 <RCCEx_PLL2_Config+0x15c>)
 80441f4:	681b      	ldr	r3, [r3, #0]
 80441f6:	4a0e      	ldr	r2, [pc, #56]	; (8044230 <RCCEx_PLL2_Config+0x15c>)
 80441f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80441fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80441fe:	f7fc fe85 	bl	8040f0c <HAL_GetTick>
 8044202:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8044204:	e008      	b.n	8044218 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8044206:	f7fc fe81 	bl	8040f0c <HAL_GetTick>
 804420a:	4602      	mov	r2, r0
 804420c:	68bb      	ldr	r3, [r7, #8]
 804420e:	1ad3      	subs	r3, r2, r3
 8044210:	2b02      	cmp	r3, #2
 8044212:	d901      	bls.n	8044218 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8044214:	2303      	movs	r3, #3
 8044216:	e006      	b.n	8044226 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8044218:	4b05      	ldr	r3, [pc, #20]	; (8044230 <RCCEx_PLL2_Config+0x15c>)
 804421a:	681b      	ldr	r3, [r3, #0]
 804421c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8044220:	2b00      	cmp	r3, #0
 8044222:	d0f0      	beq.n	8044206 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8044224:	7bfb      	ldrb	r3, [r7, #15]
}
 8044226:	4618      	mov	r0, r3
 8044228:	3710      	adds	r7, #16
 804422a:	46bd      	mov	sp, r7
 804422c:	bd80      	pop	{r7, pc}
 804422e:	bf00      	nop
 8044230:	58024400 	.word	0x58024400
 8044234:	ffff0007 	.word	0xffff0007

08044238 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8044238:	b580      	push	{r7, lr}
 804423a:	b084      	sub	sp, #16
 804423c:	af00      	add	r7, sp, #0
 804423e:	6078      	str	r0, [r7, #4]
 8044240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8044242:	2300      	movs	r3, #0
 8044244:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8044246:	4b53      	ldr	r3, [pc, #332]	; (8044394 <RCCEx_PLL3_Config+0x15c>)
 8044248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804424a:	f003 0303 	and.w	r3, r3, #3
 804424e:	2b03      	cmp	r3, #3
 8044250:	d101      	bne.n	8044256 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8044252:	2301      	movs	r3, #1
 8044254:	e099      	b.n	804438a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8044256:	4b4f      	ldr	r3, [pc, #316]	; (8044394 <RCCEx_PLL3_Config+0x15c>)
 8044258:	681b      	ldr	r3, [r3, #0]
 804425a:	4a4e      	ldr	r2, [pc, #312]	; (8044394 <RCCEx_PLL3_Config+0x15c>)
 804425c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8044260:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8044262:	f7fc fe53 	bl	8040f0c <HAL_GetTick>
 8044266:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8044268:	e008      	b.n	804427c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 804426a:	f7fc fe4f 	bl	8040f0c <HAL_GetTick>
 804426e:	4602      	mov	r2, r0
 8044270:	68bb      	ldr	r3, [r7, #8]
 8044272:	1ad3      	subs	r3, r2, r3
 8044274:	2b02      	cmp	r3, #2
 8044276:	d901      	bls.n	804427c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8044278:	2303      	movs	r3, #3
 804427a:	e086      	b.n	804438a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 804427c:	4b45      	ldr	r3, [pc, #276]	; (8044394 <RCCEx_PLL3_Config+0x15c>)
 804427e:	681b      	ldr	r3, [r3, #0]
 8044280:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8044284:	2b00      	cmp	r3, #0
 8044286:	d1f0      	bne.n	804426a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8044288:	4b42      	ldr	r3, [pc, #264]	; (8044394 <RCCEx_PLL3_Config+0x15c>)
 804428a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804428c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8044290:	687b      	ldr	r3, [r7, #4]
 8044292:	681b      	ldr	r3, [r3, #0]
 8044294:	051b      	lsls	r3, r3, #20
 8044296:	493f      	ldr	r1, [pc, #252]	; (8044394 <RCCEx_PLL3_Config+0x15c>)
 8044298:	4313      	orrs	r3, r2
 804429a:	628b      	str	r3, [r1, #40]	; 0x28
 804429c:	687b      	ldr	r3, [r7, #4]
 804429e:	685b      	ldr	r3, [r3, #4]
 80442a0:	3b01      	subs	r3, #1
 80442a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80442a6:	687b      	ldr	r3, [r7, #4]
 80442a8:	689b      	ldr	r3, [r3, #8]
 80442aa:	3b01      	subs	r3, #1
 80442ac:	025b      	lsls	r3, r3, #9
 80442ae:	b29b      	uxth	r3, r3
 80442b0:	431a      	orrs	r2, r3
 80442b2:	687b      	ldr	r3, [r7, #4]
 80442b4:	68db      	ldr	r3, [r3, #12]
 80442b6:	3b01      	subs	r3, #1
 80442b8:	041b      	lsls	r3, r3, #16
 80442ba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80442be:	431a      	orrs	r2, r3
 80442c0:	687b      	ldr	r3, [r7, #4]
 80442c2:	691b      	ldr	r3, [r3, #16]
 80442c4:	3b01      	subs	r3, #1
 80442c6:	061b      	lsls	r3, r3, #24
 80442c8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80442cc:	4931      	ldr	r1, [pc, #196]	; (8044394 <RCCEx_PLL3_Config+0x15c>)
 80442ce:	4313      	orrs	r3, r2
 80442d0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80442d2:	4b30      	ldr	r3, [pc, #192]	; (8044394 <RCCEx_PLL3_Config+0x15c>)
 80442d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80442d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80442da:	687b      	ldr	r3, [r7, #4]
 80442dc:	695b      	ldr	r3, [r3, #20]
 80442de:	492d      	ldr	r1, [pc, #180]	; (8044394 <RCCEx_PLL3_Config+0x15c>)
 80442e0:	4313      	orrs	r3, r2
 80442e2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80442e4:	4b2b      	ldr	r3, [pc, #172]	; (8044394 <RCCEx_PLL3_Config+0x15c>)
 80442e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80442e8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80442ec:	687b      	ldr	r3, [r7, #4]
 80442ee:	699b      	ldr	r3, [r3, #24]
 80442f0:	4928      	ldr	r1, [pc, #160]	; (8044394 <RCCEx_PLL3_Config+0x15c>)
 80442f2:	4313      	orrs	r3, r2
 80442f4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80442f6:	4b27      	ldr	r3, [pc, #156]	; (8044394 <RCCEx_PLL3_Config+0x15c>)
 80442f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80442fa:	4a26      	ldr	r2, [pc, #152]	; (8044394 <RCCEx_PLL3_Config+0x15c>)
 80442fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8044300:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8044302:	4b24      	ldr	r3, [pc, #144]	; (8044394 <RCCEx_PLL3_Config+0x15c>)
 8044304:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8044306:	4b24      	ldr	r3, [pc, #144]	; (8044398 <RCCEx_PLL3_Config+0x160>)
 8044308:	4013      	ands	r3, r2
 804430a:	687a      	ldr	r2, [r7, #4]
 804430c:	69d2      	ldr	r2, [r2, #28]
 804430e:	00d2      	lsls	r2, r2, #3
 8044310:	4920      	ldr	r1, [pc, #128]	; (8044394 <RCCEx_PLL3_Config+0x15c>)
 8044312:	4313      	orrs	r3, r2
 8044314:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8044316:	4b1f      	ldr	r3, [pc, #124]	; (8044394 <RCCEx_PLL3_Config+0x15c>)
 8044318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804431a:	4a1e      	ldr	r2, [pc, #120]	; (8044394 <RCCEx_PLL3_Config+0x15c>)
 804431c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8044320:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8044322:	683b      	ldr	r3, [r7, #0]
 8044324:	2b00      	cmp	r3, #0
 8044326:	d106      	bne.n	8044336 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8044328:	4b1a      	ldr	r3, [pc, #104]	; (8044394 <RCCEx_PLL3_Config+0x15c>)
 804432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804432c:	4a19      	ldr	r2, [pc, #100]	; (8044394 <RCCEx_PLL3_Config+0x15c>)
 804432e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8044332:	62d3      	str	r3, [r2, #44]	; 0x2c
 8044334:	e00f      	b.n	8044356 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8044336:	683b      	ldr	r3, [r7, #0]
 8044338:	2b01      	cmp	r3, #1
 804433a:	d106      	bne.n	804434a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 804433c:	4b15      	ldr	r3, [pc, #84]	; (8044394 <RCCEx_PLL3_Config+0x15c>)
 804433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044340:	4a14      	ldr	r2, [pc, #80]	; (8044394 <RCCEx_PLL3_Config+0x15c>)
 8044342:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8044346:	62d3      	str	r3, [r2, #44]	; 0x2c
 8044348:	e005      	b.n	8044356 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 804434a:	4b12      	ldr	r3, [pc, #72]	; (8044394 <RCCEx_PLL3_Config+0x15c>)
 804434c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804434e:	4a11      	ldr	r2, [pc, #68]	; (8044394 <RCCEx_PLL3_Config+0x15c>)
 8044350:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8044354:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8044356:	4b0f      	ldr	r3, [pc, #60]	; (8044394 <RCCEx_PLL3_Config+0x15c>)
 8044358:	681b      	ldr	r3, [r3, #0]
 804435a:	4a0e      	ldr	r2, [pc, #56]	; (8044394 <RCCEx_PLL3_Config+0x15c>)
 804435c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8044360:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8044362:	f7fc fdd3 	bl	8040f0c <HAL_GetTick>
 8044366:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8044368:	e008      	b.n	804437c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 804436a:	f7fc fdcf 	bl	8040f0c <HAL_GetTick>
 804436e:	4602      	mov	r2, r0
 8044370:	68bb      	ldr	r3, [r7, #8]
 8044372:	1ad3      	subs	r3, r2, r3
 8044374:	2b02      	cmp	r3, #2
 8044376:	d901      	bls.n	804437c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8044378:	2303      	movs	r3, #3
 804437a:	e006      	b.n	804438a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 804437c:	4b05      	ldr	r3, [pc, #20]	; (8044394 <RCCEx_PLL3_Config+0x15c>)
 804437e:	681b      	ldr	r3, [r3, #0]
 8044380:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8044384:	2b00      	cmp	r3, #0
 8044386:	d0f0      	beq.n	804436a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8044388:	7bfb      	ldrb	r3, [r7, #15]
}
 804438a:	4618      	mov	r0, r3
 804438c:	3710      	adds	r7, #16
 804438e:	46bd      	mov	sp, r7
 8044390:	bd80      	pop	{r7, pc}
 8044392:	bf00      	nop
 8044394:	58024400 	.word	0x58024400
 8044398:	ffff0007 	.word	0xffff0007

0804439c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 804439c:	b580      	push	{r7, lr}
 804439e:	b082      	sub	sp, #8
 80443a0:	af00      	add	r7, sp, #0
 80443a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80443a4:	687b      	ldr	r3, [r7, #4]
 80443a6:	2b00      	cmp	r3, #0
 80443a8:	d101      	bne.n	80443ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80443aa:	2301      	movs	r3, #1
 80443ac:	e042      	b.n	8044434 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80443ae:	687b      	ldr	r3, [r7, #4]
 80443b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80443b4:	2b00      	cmp	r3, #0
 80443b6:	d106      	bne.n	80443c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80443b8:	687b      	ldr	r3, [r7, #4]
 80443ba:	2200      	movs	r2, #0
 80443bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80443c0:	6878      	ldr	r0, [r7, #4]
 80443c2:	f7fc fbbb 	bl	8040b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80443c6:	687b      	ldr	r3, [r7, #4]
 80443c8:	2224      	movs	r2, #36	; 0x24
 80443ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80443ce:	687b      	ldr	r3, [r7, #4]
 80443d0:	681b      	ldr	r3, [r3, #0]
 80443d2:	681a      	ldr	r2, [r3, #0]
 80443d4:	687b      	ldr	r3, [r7, #4]
 80443d6:	681b      	ldr	r3, [r3, #0]
 80443d8:	f022 0201 	bic.w	r2, r2, #1
 80443dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80443de:	6878      	ldr	r0, [r7, #4]
 80443e0:	f000 f8ba 	bl	8044558 <UART_SetConfig>
 80443e4:	4603      	mov	r3, r0
 80443e6:	2b01      	cmp	r3, #1
 80443e8:	d101      	bne.n	80443ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80443ea:	2301      	movs	r3, #1
 80443ec:	e022      	b.n	8044434 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80443ee:	687b      	ldr	r3, [r7, #4]
 80443f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80443f2:	2b00      	cmp	r3, #0
 80443f4:	d002      	beq.n	80443fc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80443f6:	6878      	ldr	r0, [r7, #4]
 80443f8:	f000 fe16 	bl	8045028 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80443fc:	687b      	ldr	r3, [r7, #4]
 80443fe:	681b      	ldr	r3, [r3, #0]
 8044400:	685a      	ldr	r2, [r3, #4]
 8044402:	687b      	ldr	r3, [r7, #4]
 8044404:	681b      	ldr	r3, [r3, #0]
 8044406:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 804440a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 804440c:	687b      	ldr	r3, [r7, #4]
 804440e:	681b      	ldr	r3, [r3, #0]
 8044410:	689a      	ldr	r2, [r3, #8]
 8044412:	687b      	ldr	r3, [r7, #4]
 8044414:	681b      	ldr	r3, [r3, #0]
 8044416:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 804441a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 804441c:	687b      	ldr	r3, [r7, #4]
 804441e:	681b      	ldr	r3, [r3, #0]
 8044420:	681a      	ldr	r2, [r3, #0]
 8044422:	687b      	ldr	r3, [r7, #4]
 8044424:	681b      	ldr	r3, [r3, #0]
 8044426:	f042 0201 	orr.w	r2, r2, #1
 804442a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 804442c:	6878      	ldr	r0, [r7, #4]
 804442e:	f000 fe9d 	bl	804516c <UART_CheckIdleState>
 8044432:	4603      	mov	r3, r0
}
 8044434:	4618      	mov	r0, r3
 8044436:	3708      	adds	r7, #8
 8044438:	46bd      	mov	sp, r7
 804443a:	bd80      	pop	{r7, pc}

0804443c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 804443c:	b580      	push	{r7, lr}
 804443e:	b08a      	sub	sp, #40	; 0x28
 8044440:	af02      	add	r7, sp, #8
 8044442:	60f8      	str	r0, [r7, #12]
 8044444:	60b9      	str	r1, [r7, #8]
 8044446:	603b      	str	r3, [r7, #0]
 8044448:	4613      	mov	r3, r2
 804444a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 804444c:	68fb      	ldr	r3, [r7, #12]
 804444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8044452:	2b20      	cmp	r3, #32
 8044454:	d17b      	bne.n	804454e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8044456:	68bb      	ldr	r3, [r7, #8]
 8044458:	2b00      	cmp	r3, #0
 804445a:	d002      	beq.n	8044462 <HAL_UART_Transmit+0x26>
 804445c:	88fb      	ldrh	r3, [r7, #6]
 804445e:	2b00      	cmp	r3, #0
 8044460:	d101      	bne.n	8044466 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8044462:	2301      	movs	r3, #1
 8044464:	e074      	b.n	8044550 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8044466:	68fb      	ldr	r3, [r7, #12]
 8044468:	2200      	movs	r2, #0
 804446a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 804446e:	68fb      	ldr	r3, [r7, #12]
 8044470:	2221      	movs	r2, #33	; 0x21
 8044472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8044476:	f7fc fd49 	bl	8040f0c <HAL_GetTick>
 804447a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 804447c:	68fb      	ldr	r3, [r7, #12]
 804447e:	88fa      	ldrh	r2, [r7, #6]
 8044480:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8044484:	68fb      	ldr	r3, [r7, #12]
 8044486:	88fa      	ldrh	r2, [r7, #6]
 8044488:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 804448c:	68fb      	ldr	r3, [r7, #12]
 804448e:	689b      	ldr	r3, [r3, #8]
 8044490:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8044494:	d108      	bne.n	80444a8 <HAL_UART_Transmit+0x6c>
 8044496:	68fb      	ldr	r3, [r7, #12]
 8044498:	691b      	ldr	r3, [r3, #16]
 804449a:	2b00      	cmp	r3, #0
 804449c:	d104      	bne.n	80444a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 804449e:	2300      	movs	r3, #0
 80444a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80444a2:	68bb      	ldr	r3, [r7, #8]
 80444a4:	61bb      	str	r3, [r7, #24]
 80444a6:	e003      	b.n	80444b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80444a8:	68bb      	ldr	r3, [r7, #8]
 80444aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80444ac:	2300      	movs	r3, #0
 80444ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80444b0:	e030      	b.n	8044514 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80444b2:	683b      	ldr	r3, [r7, #0]
 80444b4:	9300      	str	r3, [sp, #0]
 80444b6:	697b      	ldr	r3, [r7, #20]
 80444b8:	2200      	movs	r2, #0
 80444ba:	2180      	movs	r1, #128	; 0x80
 80444bc:	68f8      	ldr	r0, [r7, #12]
 80444be:	f000 feff 	bl	80452c0 <UART_WaitOnFlagUntilTimeout>
 80444c2:	4603      	mov	r3, r0
 80444c4:	2b00      	cmp	r3, #0
 80444c6:	d005      	beq.n	80444d4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80444c8:	68fb      	ldr	r3, [r7, #12]
 80444ca:	2220      	movs	r2, #32
 80444cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80444d0:	2303      	movs	r3, #3
 80444d2:	e03d      	b.n	8044550 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80444d4:	69fb      	ldr	r3, [r7, #28]
 80444d6:	2b00      	cmp	r3, #0
 80444d8:	d10b      	bne.n	80444f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80444da:	69bb      	ldr	r3, [r7, #24]
 80444dc:	881b      	ldrh	r3, [r3, #0]
 80444de:	461a      	mov	r2, r3
 80444e0:	68fb      	ldr	r3, [r7, #12]
 80444e2:	681b      	ldr	r3, [r3, #0]
 80444e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80444e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80444ea:	69bb      	ldr	r3, [r7, #24]
 80444ec:	3302      	adds	r3, #2
 80444ee:	61bb      	str	r3, [r7, #24]
 80444f0:	e007      	b.n	8044502 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80444f2:	69fb      	ldr	r3, [r7, #28]
 80444f4:	781a      	ldrb	r2, [r3, #0]
 80444f6:	68fb      	ldr	r3, [r7, #12]
 80444f8:	681b      	ldr	r3, [r3, #0]
 80444fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80444fc:	69fb      	ldr	r3, [r7, #28]
 80444fe:	3301      	adds	r3, #1
 8044500:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8044502:	68fb      	ldr	r3, [r7, #12]
 8044504:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8044508:	b29b      	uxth	r3, r3
 804450a:	3b01      	subs	r3, #1
 804450c:	b29a      	uxth	r2, r3
 804450e:	68fb      	ldr	r3, [r7, #12]
 8044510:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8044514:	68fb      	ldr	r3, [r7, #12]
 8044516:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 804451a:	b29b      	uxth	r3, r3
 804451c:	2b00      	cmp	r3, #0
 804451e:	d1c8      	bne.n	80444b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8044520:	683b      	ldr	r3, [r7, #0]
 8044522:	9300      	str	r3, [sp, #0]
 8044524:	697b      	ldr	r3, [r7, #20]
 8044526:	2200      	movs	r2, #0
 8044528:	2140      	movs	r1, #64	; 0x40
 804452a:	68f8      	ldr	r0, [r7, #12]
 804452c:	f000 fec8 	bl	80452c0 <UART_WaitOnFlagUntilTimeout>
 8044530:	4603      	mov	r3, r0
 8044532:	2b00      	cmp	r3, #0
 8044534:	d005      	beq.n	8044542 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8044536:	68fb      	ldr	r3, [r7, #12]
 8044538:	2220      	movs	r2, #32
 804453a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 804453e:	2303      	movs	r3, #3
 8044540:	e006      	b.n	8044550 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8044542:	68fb      	ldr	r3, [r7, #12]
 8044544:	2220      	movs	r2, #32
 8044546:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 804454a:	2300      	movs	r3, #0
 804454c:	e000      	b.n	8044550 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 804454e:	2302      	movs	r3, #2
  }
}
 8044550:	4618      	mov	r0, r3
 8044552:	3720      	adds	r7, #32
 8044554:	46bd      	mov	sp, r7
 8044556:	bd80      	pop	{r7, pc}

08044558 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8044558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 804455c:	b092      	sub	sp, #72	; 0x48
 804455e:	af00      	add	r7, sp, #0
 8044560:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8044562:	2300      	movs	r3, #0
 8044564:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8044568:	697b      	ldr	r3, [r7, #20]
 804456a:	689a      	ldr	r2, [r3, #8]
 804456c:	697b      	ldr	r3, [r7, #20]
 804456e:	691b      	ldr	r3, [r3, #16]
 8044570:	431a      	orrs	r2, r3
 8044572:	697b      	ldr	r3, [r7, #20]
 8044574:	695b      	ldr	r3, [r3, #20]
 8044576:	431a      	orrs	r2, r3
 8044578:	697b      	ldr	r3, [r7, #20]
 804457a:	69db      	ldr	r3, [r3, #28]
 804457c:	4313      	orrs	r3, r2
 804457e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8044580:	697b      	ldr	r3, [r7, #20]
 8044582:	681b      	ldr	r3, [r3, #0]
 8044584:	681a      	ldr	r2, [r3, #0]
 8044586:	4bbe      	ldr	r3, [pc, #760]	; (8044880 <UART_SetConfig+0x328>)
 8044588:	4013      	ands	r3, r2
 804458a:	697a      	ldr	r2, [r7, #20]
 804458c:	6812      	ldr	r2, [r2, #0]
 804458e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8044590:	430b      	orrs	r3, r1
 8044592:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8044594:	697b      	ldr	r3, [r7, #20]
 8044596:	681b      	ldr	r3, [r3, #0]
 8044598:	685b      	ldr	r3, [r3, #4]
 804459a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 804459e:	697b      	ldr	r3, [r7, #20]
 80445a0:	68da      	ldr	r2, [r3, #12]
 80445a2:	697b      	ldr	r3, [r7, #20]
 80445a4:	681b      	ldr	r3, [r3, #0]
 80445a6:	430a      	orrs	r2, r1
 80445a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80445aa:	697b      	ldr	r3, [r7, #20]
 80445ac:	699b      	ldr	r3, [r3, #24]
 80445ae:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80445b0:	697b      	ldr	r3, [r7, #20]
 80445b2:	681b      	ldr	r3, [r3, #0]
 80445b4:	4ab3      	ldr	r2, [pc, #716]	; (8044884 <UART_SetConfig+0x32c>)
 80445b6:	4293      	cmp	r3, r2
 80445b8:	d004      	beq.n	80445c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80445ba:	697b      	ldr	r3, [r7, #20]
 80445bc:	6a1b      	ldr	r3, [r3, #32]
 80445be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80445c0:	4313      	orrs	r3, r2
 80445c2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80445c4:	697b      	ldr	r3, [r7, #20]
 80445c6:	681b      	ldr	r3, [r3, #0]
 80445c8:	689a      	ldr	r2, [r3, #8]
 80445ca:	4baf      	ldr	r3, [pc, #700]	; (8044888 <UART_SetConfig+0x330>)
 80445cc:	4013      	ands	r3, r2
 80445ce:	697a      	ldr	r2, [r7, #20]
 80445d0:	6812      	ldr	r2, [r2, #0]
 80445d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80445d4:	430b      	orrs	r3, r1
 80445d6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80445d8:	697b      	ldr	r3, [r7, #20]
 80445da:	681b      	ldr	r3, [r3, #0]
 80445dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80445de:	f023 010f 	bic.w	r1, r3, #15
 80445e2:	697b      	ldr	r3, [r7, #20]
 80445e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80445e6:	697b      	ldr	r3, [r7, #20]
 80445e8:	681b      	ldr	r3, [r3, #0]
 80445ea:	430a      	orrs	r2, r1
 80445ec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80445ee:	697b      	ldr	r3, [r7, #20]
 80445f0:	681b      	ldr	r3, [r3, #0]
 80445f2:	4aa6      	ldr	r2, [pc, #664]	; (804488c <UART_SetConfig+0x334>)
 80445f4:	4293      	cmp	r3, r2
 80445f6:	d177      	bne.n	80446e8 <UART_SetConfig+0x190>
 80445f8:	4ba5      	ldr	r3, [pc, #660]	; (8044890 <UART_SetConfig+0x338>)
 80445fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80445fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8044600:	2b28      	cmp	r3, #40	; 0x28
 8044602:	d86d      	bhi.n	80446e0 <UART_SetConfig+0x188>
 8044604:	a201      	add	r2, pc, #4	; (adr r2, 804460c <UART_SetConfig+0xb4>)
 8044606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804460a:	bf00      	nop
 804460c:	080446b1 	.word	0x080446b1
 8044610:	080446e1 	.word	0x080446e1
 8044614:	080446e1 	.word	0x080446e1
 8044618:	080446e1 	.word	0x080446e1
 804461c:	080446e1 	.word	0x080446e1
 8044620:	080446e1 	.word	0x080446e1
 8044624:	080446e1 	.word	0x080446e1
 8044628:	080446e1 	.word	0x080446e1
 804462c:	080446b9 	.word	0x080446b9
 8044630:	080446e1 	.word	0x080446e1
 8044634:	080446e1 	.word	0x080446e1
 8044638:	080446e1 	.word	0x080446e1
 804463c:	080446e1 	.word	0x080446e1
 8044640:	080446e1 	.word	0x080446e1
 8044644:	080446e1 	.word	0x080446e1
 8044648:	080446e1 	.word	0x080446e1
 804464c:	080446c1 	.word	0x080446c1
 8044650:	080446e1 	.word	0x080446e1
 8044654:	080446e1 	.word	0x080446e1
 8044658:	080446e1 	.word	0x080446e1
 804465c:	080446e1 	.word	0x080446e1
 8044660:	080446e1 	.word	0x080446e1
 8044664:	080446e1 	.word	0x080446e1
 8044668:	080446e1 	.word	0x080446e1
 804466c:	080446c9 	.word	0x080446c9
 8044670:	080446e1 	.word	0x080446e1
 8044674:	080446e1 	.word	0x080446e1
 8044678:	080446e1 	.word	0x080446e1
 804467c:	080446e1 	.word	0x080446e1
 8044680:	080446e1 	.word	0x080446e1
 8044684:	080446e1 	.word	0x080446e1
 8044688:	080446e1 	.word	0x080446e1
 804468c:	080446d1 	.word	0x080446d1
 8044690:	080446e1 	.word	0x080446e1
 8044694:	080446e1 	.word	0x080446e1
 8044698:	080446e1 	.word	0x080446e1
 804469c:	080446e1 	.word	0x080446e1
 80446a0:	080446e1 	.word	0x080446e1
 80446a4:	080446e1 	.word	0x080446e1
 80446a8:	080446e1 	.word	0x080446e1
 80446ac:	080446d9 	.word	0x080446d9
 80446b0:	2301      	movs	r3, #1
 80446b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80446b6:	e222      	b.n	8044afe <UART_SetConfig+0x5a6>
 80446b8:	2304      	movs	r3, #4
 80446ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80446be:	e21e      	b.n	8044afe <UART_SetConfig+0x5a6>
 80446c0:	2308      	movs	r3, #8
 80446c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80446c6:	e21a      	b.n	8044afe <UART_SetConfig+0x5a6>
 80446c8:	2310      	movs	r3, #16
 80446ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80446ce:	e216      	b.n	8044afe <UART_SetConfig+0x5a6>
 80446d0:	2320      	movs	r3, #32
 80446d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80446d6:	e212      	b.n	8044afe <UART_SetConfig+0x5a6>
 80446d8:	2340      	movs	r3, #64	; 0x40
 80446da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80446de:	e20e      	b.n	8044afe <UART_SetConfig+0x5a6>
 80446e0:	2380      	movs	r3, #128	; 0x80
 80446e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80446e6:	e20a      	b.n	8044afe <UART_SetConfig+0x5a6>
 80446e8:	697b      	ldr	r3, [r7, #20]
 80446ea:	681b      	ldr	r3, [r3, #0]
 80446ec:	4a69      	ldr	r2, [pc, #420]	; (8044894 <UART_SetConfig+0x33c>)
 80446ee:	4293      	cmp	r3, r2
 80446f0:	d130      	bne.n	8044754 <UART_SetConfig+0x1fc>
 80446f2:	4b67      	ldr	r3, [pc, #412]	; (8044890 <UART_SetConfig+0x338>)
 80446f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80446f6:	f003 0307 	and.w	r3, r3, #7
 80446fa:	2b05      	cmp	r3, #5
 80446fc:	d826      	bhi.n	804474c <UART_SetConfig+0x1f4>
 80446fe:	a201      	add	r2, pc, #4	; (adr r2, 8044704 <UART_SetConfig+0x1ac>)
 8044700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044704:	0804471d 	.word	0x0804471d
 8044708:	08044725 	.word	0x08044725
 804470c:	0804472d 	.word	0x0804472d
 8044710:	08044735 	.word	0x08044735
 8044714:	0804473d 	.word	0x0804473d
 8044718:	08044745 	.word	0x08044745
 804471c:	2300      	movs	r3, #0
 804471e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044722:	e1ec      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044724:	2304      	movs	r3, #4
 8044726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804472a:	e1e8      	b.n	8044afe <UART_SetConfig+0x5a6>
 804472c:	2308      	movs	r3, #8
 804472e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044732:	e1e4      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044734:	2310      	movs	r3, #16
 8044736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804473a:	e1e0      	b.n	8044afe <UART_SetConfig+0x5a6>
 804473c:	2320      	movs	r3, #32
 804473e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044742:	e1dc      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044744:	2340      	movs	r3, #64	; 0x40
 8044746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804474a:	e1d8      	b.n	8044afe <UART_SetConfig+0x5a6>
 804474c:	2380      	movs	r3, #128	; 0x80
 804474e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044752:	e1d4      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044754:	697b      	ldr	r3, [r7, #20]
 8044756:	681b      	ldr	r3, [r3, #0]
 8044758:	4a4f      	ldr	r2, [pc, #316]	; (8044898 <UART_SetConfig+0x340>)
 804475a:	4293      	cmp	r3, r2
 804475c:	d130      	bne.n	80447c0 <UART_SetConfig+0x268>
 804475e:	4b4c      	ldr	r3, [pc, #304]	; (8044890 <UART_SetConfig+0x338>)
 8044760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8044762:	f003 0307 	and.w	r3, r3, #7
 8044766:	2b05      	cmp	r3, #5
 8044768:	d826      	bhi.n	80447b8 <UART_SetConfig+0x260>
 804476a:	a201      	add	r2, pc, #4	; (adr r2, 8044770 <UART_SetConfig+0x218>)
 804476c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044770:	08044789 	.word	0x08044789
 8044774:	08044791 	.word	0x08044791
 8044778:	08044799 	.word	0x08044799
 804477c:	080447a1 	.word	0x080447a1
 8044780:	080447a9 	.word	0x080447a9
 8044784:	080447b1 	.word	0x080447b1
 8044788:	2300      	movs	r3, #0
 804478a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804478e:	e1b6      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044790:	2304      	movs	r3, #4
 8044792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044796:	e1b2      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044798:	2308      	movs	r3, #8
 804479a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804479e:	e1ae      	b.n	8044afe <UART_SetConfig+0x5a6>
 80447a0:	2310      	movs	r3, #16
 80447a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80447a6:	e1aa      	b.n	8044afe <UART_SetConfig+0x5a6>
 80447a8:	2320      	movs	r3, #32
 80447aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80447ae:	e1a6      	b.n	8044afe <UART_SetConfig+0x5a6>
 80447b0:	2340      	movs	r3, #64	; 0x40
 80447b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80447b6:	e1a2      	b.n	8044afe <UART_SetConfig+0x5a6>
 80447b8:	2380      	movs	r3, #128	; 0x80
 80447ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80447be:	e19e      	b.n	8044afe <UART_SetConfig+0x5a6>
 80447c0:	697b      	ldr	r3, [r7, #20]
 80447c2:	681b      	ldr	r3, [r3, #0]
 80447c4:	4a35      	ldr	r2, [pc, #212]	; (804489c <UART_SetConfig+0x344>)
 80447c6:	4293      	cmp	r3, r2
 80447c8:	d130      	bne.n	804482c <UART_SetConfig+0x2d4>
 80447ca:	4b31      	ldr	r3, [pc, #196]	; (8044890 <UART_SetConfig+0x338>)
 80447cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80447ce:	f003 0307 	and.w	r3, r3, #7
 80447d2:	2b05      	cmp	r3, #5
 80447d4:	d826      	bhi.n	8044824 <UART_SetConfig+0x2cc>
 80447d6:	a201      	add	r2, pc, #4	; (adr r2, 80447dc <UART_SetConfig+0x284>)
 80447d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80447dc:	080447f5 	.word	0x080447f5
 80447e0:	080447fd 	.word	0x080447fd
 80447e4:	08044805 	.word	0x08044805
 80447e8:	0804480d 	.word	0x0804480d
 80447ec:	08044815 	.word	0x08044815
 80447f0:	0804481d 	.word	0x0804481d
 80447f4:	2300      	movs	r3, #0
 80447f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80447fa:	e180      	b.n	8044afe <UART_SetConfig+0x5a6>
 80447fc:	2304      	movs	r3, #4
 80447fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044802:	e17c      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044804:	2308      	movs	r3, #8
 8044806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804480a:	e178      	b.n	8044afe <UART_SetConfig+0x5a6>
 804480c:	2310      	movs	r3, #16
 804480e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044812:	e174      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044814:	2320      	movs	r3, #32
 8044816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804481a:	e170      	b.n	8044afe <UART_SetConfig+0x5a6>
 804481c:	2340      	movs	r3, #64	; 0x40
 804481e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044822:	e16c      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044824:	2380      	movs	r3, #128	; 0x80
 8044826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804482a:	e168      	b.n	8044afe <UART_SetConfig+0x5a6>
 804482c:	697b      	ldr	r3, [r7, #20]
 804482e:	681b      	ldr	r3, [r3, #0]
 8044830:	4a1b      	ldr	r2, [pc, #108]	; (80448a0 <UART_SetConfig+0x348>)
 8044832:	4293      	cmp	r3, r2
 8044834:	d142      	bne.n	80448bc <UART_SetConfig+0x364>
 8044836:	4b16      	ldr	r3, [pc, #88]	; (8044890 <UART_SetConfig+0x338>)
 8044838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804483a:	f003 0307 	and.w	r3, r3, #7
 804483e:	2b05      	cmp	r3, #5
 8044840:	d838      	bhi.n	80448b4 <UART_SetConfig+0x35c>
 8044842:	a201      	add	r2, pc, #4	; (adr r2, 8044848 <UART_SetConfig+0x2f0>)
 8044844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044848:	08044861 	.word	0x08044861
 804484c:	08044869 	.word	0x08044869
 8044850:	08044871 	.word	0x08044871
 8044854:	08044879 	.word	0x08044879
 8044858:	080448a5 	.word	0x080448a5
 804485c:	080448ad 	.word	0x080448ad
 8044860:	2300      	movs	r3, #0
 8044862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044866:	e14a      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044868:	2304      	movs	r3, #4
 804486a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804486e:	e146      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044870:	2308      	movs	r3, #8
 8044872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044876:	e142      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044878:	2310      	movs	r3, #16
 804487a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804487e:	e13e      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044880:	cfff69f3 	.word	0xcfff69f3
 8044884:	58000c00 	.word	0x58000c00
 8044888:	11fff4ff 	.word	0x11fff4ff
 804488c:	40011000 	.word	0x40011000
 8044890:	58024400 	.word	0x58024400
 8044894:	40004400 	.word	0x40004400
 8044898:	40004800 	.word	0x40004800
 804489c:	40004c00 	.word	0x40004c00
 80448a0:	40005000 	.word	0x40005000
 80448a4:	2320      	movs	r3, #32
 80448a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80448aa:	e128      	b.n	8044afe <UART_SetConfig+0x5a6>
 80448ac:	2340      	movs	r3, #64	; 0x40
 80448ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80448b2:	e124      	b.n	8044afe <UART_SetConfig+0x5a6>
 80448b4:	2380      	movs	r3, #128	; 0x80
 80448b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80448ba:	e120      	b.n	8044afe <UART_SetConfig+0x5a6>
 80448bc:	697b      	ldr	r3, [r7, #20]
 80448be:	681b      	ldr	r3, [r3, #0]
 80448c0:	4acb      	ldr	r2, [pc, #812]	; (8044bf0 <UART_SetConfig+0x698>)
 80448c2:	4293      	cmp	r3, r2
 80448c4:	d176      	bne.n	80449b4 <UART_SetConfig+0x45c>
 80448c6:	4bcb      	ldr	r3, [pc, #812]	; (8044bf4 <UART_SetConfig+0x69c>)
 80448c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80448ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80448ce:	2b28      	cmp	r3, #40	; 0x28
 80448d0:	d86c      	bhi.n	80449ac <UART_SetConfig+0x454>
 80448d2:	a201      	add	r2, pc, #4	; (adr r2, 80448d8 <UART_SetConfig+0x380>)
 80448d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80448d8:	0804497d 	.word	0x0804497d
 80448dc:	080449ad 	.word	0x080449ad
 80448e0:	080449ad 	.word	0x080449ad
 80448e4:	080449ad 	.word	0x080449ad
 80448e8:	080449ad 	.word	0x080449ad
 80448ec:	080449ad 	.word	0x080449ad
 80448f0:	080449ad 	.word	0x080449ad
 80448f4:	080449ad 	.word	0x080449ad
 80448f8:	08044985 	.word	0x08044985
 80448fc:	080449ad 	.word	0x080449ad
 8044900:	080449ad 	.word	0x080449ad
 8044904:	080449ad 	.word	0x080449ad
 8044908:	080449ad 	.word	0x080449ad
 804490c:	080449ad 	.word	0x080449ad
 8044910:	080449ad 	.word	0x080449ad
 8044914:	080449ad 	.word	0x080449ad
 8044918:	0804498d 	.word	0x0804498d
 804491c:	080449ad 	.word	0x080449ad
 8044920:	080449ad 	.word	0x080449ad
 8044924:	080449ad 	.word	0x080449ad
 8044928:	080449ad 	.word	0x080449ad
 804492c:	080449ad 	.word	0x080449ad
 8044930:	080449ad 	.word	0x080449ad
 8044934:	080449ad 	.word	0x080449ad
 8044938:	08044995 	.word	0x08044995
 804493c:	080449ad 	.word	0x080449ad
 8044940:	080449ad 	.word	0x080449ad
 8044944:	080449ad 	.word	0x080449ad
 8044948:	080449ad 	.word	0x080449ad
 804494c:	080449ad 	.word	0x080449ad
 8044950:	080449ad 	.word	0x080449ad
 8044954:	080449ad 	.word	0x080449ad
 8044958:	0804499d 	.word	0x0804499d
 804495c:	080449ad 	.word	0x080449ad
 8044960:	080449ad 	.word	0x080449ad
 8044964:	080449ad 	.word	0x080449ad
 8044968:	080449ad 	.word	0x080449ad
 804496c:	080449ad 	.word	0x080449ad
 8044970:	080449ad 	.word	0x080449ad
 8044974:	080449ad 	.word	0x080449ad
 8044978:	080449a5 	.word	0x080449a5
 804497c:	2301      	movs	r3, #1
 804497e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044982:	e0bc      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044984:	2304      	movs	r3, #4
 8044986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804498a:	e0b8      	b.n	8044afe <UART_SetConfig+0x5a6>
 804498c:	2308      	movs	r3, #8
 804498e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044992:	e0b4      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044994:	2310      	movs	r3, #16
 8044996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804499a:	e0b0      	b.n	8044afe <UART_SetConfig+0x5a6>
 804499c:	2320      	movs	r3, #32
 804499e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80449a2:	e0ac      	b.n	8044afe <UART_SetConfig+0x5a6>
 80449a4:	2340      	movs	r3, #64	; 0x40
 80449a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80449aa:	e0a8      	b.n	8044afe <UART_SetConfig+0x5a6>
 80449ac:	2380      	movs	r3, #128	; 0x80
 80449ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80449b2:	e0a4      	b.n	8044afe <UART_SetConfig+0x5a6>
 80449b4:	697b      	ldr	r3, [r7, #20]
 80449b6:	681b      	ldr	r3, [r3, #0]
 80449b8:	4a8f      	ldr	r2, [pc, #572]	; (8044bf8 <UART_SetConfig+0x6a0>)
 80449ba:	4293      	cmp	r3, r2
 80449bc:	d130      	bne.n	8044a20 <UART_SetConfig+0x4c8>
 80449be:	4b8d      	ldr	r3, [pc, #564]	; (8044bf4 <UART_SetConfig+0x69c>)
 80449c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80449c2:	f003 0307 	and.w	r3, r3, #7
 80449c6:	2b05      	cmp	r3, #5
 80449c8:	d826      	bhi.n	8044a18 <UART_SetConfig+0x4c0>
 80449ca:	a201      	add	r2, pc, #4	; (adr r2, 80449d0 <UART_SetConfig+0x478>)
 80449cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80449d0:	080449e9 	.word	0x080449e9
 80449d4:	080449f1 	.word	0x080449f1
 80449d8:	080449f9 	.word	0x080449f9
 80449dc:	08044a01 	.word	0x08044a01
 80449e0:	08044a09 	.word	0x08044a09
 80449e4:	08044a11 	.word	0x08044a11
 80449e8:	2300      	movs	r3, #0
 80449ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80449ee:	e086      	b.n	8044afe <UART_SetConfig+0x5a6>
 80449f0:	2304      	movs	r3, #4
 80449f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80449f6:	e082      	b.n	8044afe <UART_SetConfig+0x5a6>
 80449f8:	2308      	movs	r3, #8
 80449fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80449fe:	e07e      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044a00:	2310      	movs	r3, #16
 8044a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044a06:	e07a      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044a08:	2320      	movs	r3, #32
 8044a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044a0e:	e076      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044a10:	2340      	movs	r3, #64	; 0x40
 8044a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044a16:	e072      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044a18:	2380      	movs	r3, #128	; 0x80
 8044a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044a1e:	e06e      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044a20:	697b      	ldr	r3, [r7, #20]
 8044a22:	681b      	ldr	r3, [r3, #0]
 8044a24:	4a75      	ldr	r2, [pc, #468]	; (8044bfc <UART_SetConfig+0x6a4>)
 8044a26:	4293      	cmp	r3, r2
 8044a28:	d130      	bne.n	8044a8c <UART_SetConfig+0x534>
 8044a2a:	4b72      	ldr	r3, [pc, #456]	; (8044bf4 <UART_SetConfig+0x69c>)
 8044a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8044a2e:	f003 0307 	and.w	r3, r3, #7
 8044a32:	2b05      	cmp	r3, #5
 8044a34:	d826      	bhi.n	8044a84 <UART_SetConfig+0x52c>
 8044a36:	a201      	add	r2, pc, #4	; (adr r2, 8044a3c <UART_SetConfig+0x4e4>)
 8044a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044a3c:	08044a55 	.word	0x08044a55
 8044a40:	08044a5d 	.word	0x08044a5d
 8044a44:	08044a65 	.word	0x08044a65
 8044a48:	08044a6d 	.word	0x08044a6d
 8044a4c:	08044a75 	.word	0x08044a75
 8044a50:	08044a7d 	.word	0x08044a7d
 8044a54:	2300      	movs	r3, #0
 8044a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044a5a:	e050      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044a5c:	2304      	movs	r3, #4
 8044a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044a62:	e04c      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044a64:	2308      	movs	r3, #8
 8044a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044a6a:	e048      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044a6c:	2310      	movs	r3, #16
 8044a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044a72:	e044      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044a74:	2320      	movs	r3, #32
 8044a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044a7a:	e040      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044a7c:	2340      	movs	r3, #64	; 0x40
 8044a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044a82:	e03c      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044a84:	2380      	movs	r3, #128	; 0x80
 8044a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044a8a:	e038      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044a8c:	697b      	ldr	r3, [r7, #20]
 8044a8e:	681b      	ldr	r3, [r3, #0]
 8044a90:	4a5b      	ldr	r2, [pc, #364]	; (8044c00 <UART_SetConfig+0x6a8>)
 8044a92:	4293      	cmp	r3, r2
 8044a94:	d130      	bne.n	8044af8 <UART_SetConfig+0x5a0>
 8044a96:	4b57      	ldr	r3, [pc, #348]	; (8044bf4 <UART_SetConfig+0x69c>)
 8044a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8044a9a:	f003 0307 	and.w	r3, r3, #7
 8044a9e:	2b05      	cmp	r3, #5
 8044aa0:	d826      	bhi.n	8044af0 <UART_SetConfig+0x598>
 8044aa2:	a201      	add	r2, pc, #4	; (adr r2, 8044aa8 <UART_SetConfig+0x550>)
 8044aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044aa8:	08044ac1 	.word	0x08044ac1
 8044aac:	08044ac9 	.word	0x08044ac9
 8044ab0:	08044ad1 	.word	0x08044ad1
 8044ab4:	08044ad9 	.word	0x08044ad9
 8044ab8:	08044ae1 	.word	0x08044ae1
 8044abc:	08044ae9 	.word	0x08044ae9
 8044ac0:	2302      	movs	r3, #2
 8044ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044ac6:	e01a      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044ac8:	2304      	movs	r3, #4
 8044aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044ace:	e016      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044ad0:	2308      	movs	r3, #8
 8044ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044ad6:	e012      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044ad8:	2310      	movs	r3, #16
 8044ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044ade:	e00e      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044ae0:	2320      	movs	r3, #32
 8044ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044ae6:	e00a      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044ae8:	2340      	movs	r3, #64	; 0x40
 8044aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044aee:	e006      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044af0:	2380      	movs	r3, #128	; 0x80
 8044af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044af6:	e002      	b.n	8044afe <UART_SetConfig+0x5a6>
 8044af8:	2380      	movs	r3, #128	; 0x80
 8044afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8044afe:	697b      	ldr	r3, [r7, #20]
 8044b00:	681b      	ldr	r3, [r3, #0]
 8044b02:	4a3f      	ldr	r2, [pc, #252]	; (8044c00 <UART_SetConfig+0x6a8>)
 8044b04:	4293      	cmp	r3, r2
 8044b06:	f040 80f8 	bne.w	8044cfa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8044b0a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8044b0e:	2b20      	cmp	r3, #32
 8044b10:	dc46      	bgt.n	8044ba0 <UART_SetConfig+0x648>
 8044b12:	2b02      	cmp	r3, #2
 8044b14:	f2c0 8082 	blt.w	8044c1c <UART_SetConfig+0x6c4>
 8044b18:	3b02      	subs	r3, #2
 8044b1a:	2b1e      	cmp	r3, #30
 8044b1c:	d87e      	bhi.n	8044c1c <UART_SetConfig+0x6c4>
 8044b1e:	a201      	add	r2, pc, #4	; (adr r2, 8044b24 <UART_SetConfig+0x5cc>)
 8044b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044b24:	08044ba7 	.word	0x08044ba7
 8044b28:	08044c1d 	.word	0x08044c1d
 8044b2c:	08044baf 	.word	0x08044baf
 8044b30:	08044c1d 	.word	0x08044c1d
 8044b34:	08044c1d 	.word	0x08044c1d
 8044b38:	08044c1d 	.word	0x08044c1d
 8044b3c:	08044bbf 	.word	0x08044bbf
 8044b40:	08044c1d 	.word	0x08044c1d
 8044b44:	08044c1d 	.word	0x08044c1d
 8044b48:	08044c1d 	.word	0x08044c1d
 8044b4c:	08044c1d 	.word	0x08044c1d
 8044b50:	08044c1d 	.word	0x08044c1d
 8044b54:	08044c1d 	.word	0x08044c1d
 8044b58:	08044c1d 	.word	0x08044c1d
 8044b5c:	08044bcf 	.word	0x08044bcf
 8044b60:	08044c1d 	.word	0x08044c1d
 8044b64:	08044c1d 	.word	0x08044c1d
 8044b68:	08044c1d 	.word	0x08044c1d
 8044b6c:	08044c1d 	.word	0x08044c1d
 8044b70:	08044c1d 	.word	0x08044c1d
 8044b74:	08044c1d 	.word	0x08044c1d
 8044b78:	08044c1d 	.word	0x08044c1d
 8044b7c:	08044c1d 	.word	0x08044c1d
 8044b80:	08044c1d 	.word	0x08044c1d
 8044b84:	08044c1d 	.word	0x08044c1d
 8044b88:	08044c1d 	.word	0x08044c1d
 8044b8c:	08044c1d 	.word	0x08044c1d
 8044b90:	08044c1d 	.word	0x08044c1d
 8044b94:	08044c1d 	.word	0x08044c1d
 8044b98:	08044c1d 	.word	0x08044c1d
 8044b9c:	08044c0f 	.word	0x08044c0f
 8044ba0:	2b40      	cmp	r3, #64	; 0x40
 8044ba2:	d037      	beq.n	8044c14 <UART_SetConfig+0x6bc>
 8044ba4:	e03a      	b.n	8044c1c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8044ba6:	f7fe ffd7 	bl	8043b58 <HAL_RCCEx_GetD3PCLK1Freq>
 8044baa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8044bac:	e03c      	b.n	8044c28 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8044bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8044bb2:	4618      	mov	r0, r3
 8044bb4:	f7fe ffe6 	bl	8043b84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8044bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8044bba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044bbc:	e034      	b.n	8044c28 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8044bbe:	f107 0318 	add.w	r3, r7, #24
 8044bc2:	4618      	mov	r0, r3
 8044bc4:	f7ff f932 	bl	8043e2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8044bc8:	69fb      	ldr	r3, [r7, #28]
 8044bca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044bcc:	e02c      	b.n	8044c28 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8044bce:	4b09      	ldr	r3, [pc, #36]	; (8044bf4 <UART_SetConfig+0x69c>)
 8044bd0:	681b      	ldr	r3, [r3, #0]
 8044bd2:	f003 0320 	and.w	r3, r3, #32
 8044bd6:	2b00      	cmp	r3, #0
 8044bd8:	d016      	beq.n	8044c08 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8044bda:	4b06      	ldr	r3, [pc, #24]	; (8044bf4 <UART_SetConfig+0x69c>)
 8044bdc:	681b      	ldr	r3, [r3, #0]
 8044bde:	08db      	lsrs	r3, r3, #3
 8044be0:	f003 0303 	and.w	r3, r3, #3
 8044be4:	4a07      	ldr	r2, [pc, #28]	; (8044c04 <UART_SetConfig+0x6ac>)
 8044be6:	fa22 f303 	lsr.w	r3, r2, r3
 8044bea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8044bec:	e01c      	b.n	8044c28 <UART_SetConfig+0x6d0>
 8044bee:	bf00      	nop
 8044bf0:	40011400 	.word	0x40011400
 8044bf4:	58024400 	.word	0x58024400
 8044bf8:	40007800 	.word	0x40007800
 8044bfc:	40007c00 	.word	0x40007c00
 8044c00:	58000c00 	.word	0x58000c00
 8044c04:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8044c08:	4b9d      	ldr	r3, [pc, #628]	; (8044e80 <UART_SetConfig+0x928>)
 8044c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044c0c:	e00c      	b.n	8044c28 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8044c0e:	4b9d      	ldr	r3, [pc, #628]	; (8044e84 <UART_SetConfig+0x92c>)
 8044c10:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044c12:	e009      	b.n	8044c28 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8044c14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8044c18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044c1a:	e005      	b.n	8044c28 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8044c1c:	2300      	movs	r3, #0
 8044c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8044c20:	2301      	movs	r3, #1
 8044c22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8044c26:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8044c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8044c2a:	2b00      	cmp	r3, #0
 8044c2c:	f000 81de 	beq.w	8044fec <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8044c30:	697b      	ldr	r3, [r7, #20]
 8044c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8044c34:	4a94      	ldr	r2, [pc, #592]	; (8044e88 <UART_SetConfig+0x930>)
 8044c36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8044c3a:	461a      	mov	r2, r3
 8044c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8044c3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8044c42:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8044c44:	697b      	ldr	r3, [r7, #20]
 8044c46:	685a      	ldr	r2, [r3, #4]
 8044c48:	4613      	mov	r3, r2
 8044c4a:	005b      	lsls	r3, r3, #1
 8044c4c:	4413      	add	r3, r2
 8044c4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8044c50:	429a      	cmp	r2, r3
 8044c52:	d305      	bcc.n	8044c60 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8044c54:	697b      	ldr	r3, [r7, #20]
 8044c56:	685b      	ldr	r3, [r3, #4]
 8044c58:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8044c5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8044c5c:	429a      	cmp	r2, r3
 8044c5e:	d903      	bls.n	8044c68 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8044c60:	2301      	movs	r3, #1
 8044c62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8044c66:	e1c1      	b.n	8044fec <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8044c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8044c6a:	2200      	movs	r2, #0
 8044c6c:	60bb      	str	r3, [r7, #8]
 8044c6e:	60fa      	str	r2, [r7, #12]
 8044c70:	697b      	ldr	r3, [r7, #20]
 8044c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8044c74:	4a84      	ldr	r2, [pc, #528]	; (8044e88 <UART_SetConfig+0x930>)
 8044c76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8044c7a:	b29b      	uxth	r3, r3
 8044c7c:	2200      	movs	r2, #0
 8044c7e:	603b      	str	r3, [r7, #0]
 8044c80:	607a      	str	r2, [r7, #4]
 8044c82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8044c86:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8044c8a:	f7fb fb79 	bl	8040380 <__aeabi_uldivmod>
 8044c8e:	4602      	mov	r2, r0
 8044c90:	460b      	mov	r3, r1
 8044c92:	4610      	mov	r0, r2
 8044c94:	4619      	mov	r1, r3
 8044c96:	f04f 0200 	mov.w	r2, #0
 8044c9a:	f04f 0300 	mov.w	r3, #0
 8044c9e:	020b      	lsls	r3, r1, #8
 8044ca0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8044ca4:	0202      	lsls	r2, r0, #8
 8044ca6:	6979      	ldr	r1, [r7, #20]
 8044ca8:	6849      	ldr	r1, [r1, #4]
 8044caa:	0849      	lsrs	r1, r1, #1
 8044cac:	2000      	movs	r0, #0
 8044cae:	460c      	mov	r4, r1
 8044cb0:	4605      	mov	r5, r0
 8044cb2:	eb12 0804 	adds.w	r8, r2, r4
 8044cb6:	eb43 0905 	adc.w	r9, r3, r5
 8044cba:	697b      	ldr	r3, [r7, #20]
 8044cbc:	685b      	ldr	r3, [r3, #4]
 8044cbe:	2200      	movs	r2, #0
 8044cc0:	469a      	mov	sl, r3
 8044cc2:	4693      	mov	fp, r2
 8044cc4:	4652      	mov	r2, sl
 8044cc6:	465b      	mov	r3, fp
 8044cc8:	4640      	mov	r0, r8
 8044cca:	4649      	mov	r1, r9
 8044ccc:	f7fb fb58 	bl	8040380 <__aeabi_uldivmod>
 8044cd0:	4602      	mov	r2, r0
 8044cd2:	460b      	mov	r3, r1
 8044cd4:	4613      	mov	r3, r2
 8044cd6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8044cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8044cda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8044cde:	d308      	bcc.n	8044cf2 <UART_SetConfig+0x79a>
 8044ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8044ce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8044ce6:	d204      	bcs.n	8044cf2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8044ce8:	697b      	ldr	r3, [r7, #20]
 8044cea:	681b      	ldr	r3, [r3, #0]
 8044cec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8044cee:	60da      	str	r2, [r3, #12]
 8044cf0:	e17c      	b.n	8044fec <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8044cf2:	2301      	movs	r3, #1
 8044cf4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8044cf8:	e178      	b.n	8044fec <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8044cfa:	697b      	ldr	r3, [r7, #20]
 8044cfc:	69db      	ldr	r3, [r3, #28]
 8044cfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8044d02:	f040 80c5 	bne.w	8044e90 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8044d06:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8044d0a:	2b20      	cmp	r3, #32
 8044d0c:	dc48      	bgt.n	8044da0 <UART_SetConfig+0x848>
 8044d0e:	2b00      	cmp	r3, #0
 8044d10:	db7b      	blt.n	8044e0a <UART_SetConfig+0x8b2>
 8044d12:	2b20      	cmp	r3, #32
 8044d14:	d879      	bhi.n	8044e0a <UART_SetConfig+0x8b2>
 8044d16:	a201      	add	r2, pc, #4	; (adr r2, 8044d1c <UART_SetConfig+0x7c4>)
 8044d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044d1c:	08044da7 	.word	0x08044da7
 8044d20:	08044daf 	.word	0x08044daf
 8044d24:	08044e0b 	.word	0x08044e0b
 8044d28:	08044e0b 	.word	0x08044e0b
 8044d2c:	08044db7 	.word	0x08044db7
 8044d30:	08044e0b 	.word	0x08044e0b
 8044d34:	08044e0b 	.word	0x08044e0b
 8044d38:	08044e0b 	.word	0x08044e0b
 8044d3c:	08044dc7 	.word	0x08044dc7
 8044d40:	08044e0b 	.word	0x08044e0b
 8044d44:	08044e0b 	.word	0x08044e0b
 8044d48:	08044e0b 	.word	0x08044e0b
 8044d4c:	08044e0b 	.word	0x08044e0b
 8044d50:	08044e0b 	.word	0x08044e0b
 8044d54:	08044e0b 	.word	0x08044e0b
 8044d58:	08044e0b 	.word	0x08044e0b
 8044d5c:	08044dd7 	.word	0x08044dd7
 8044d60:	08044e0b 	.word	0x08044e0b
 8044d64:	08044e0b 	.word	0x08044e0b
 8044d68:	08044e0b 	.word	0x08044e0b
 8044d6c:	08044e0b 	.word	0x08044e0b
 8044d70:	08044e0b 	.word	0x08044e0b
 8044d74:	08044e0b 	.word	0x08044e0b
 8044d78:	08044e0b 	.word	0x08044e0b
 8044d7c:	08044e0b 	.word	0x08044e0b
 8044d80:	08044e0b 	.word	0x08044e0b
 8044d84:	08044e0b 	.word	0x08044e0b
 8044d88:	08044e0b 	.word	0x08044e0b
 8044d8c:	08044e0b 	.word	0x08044e0b
 8044d90:	08044e0b 	.word	0x08044e0b
 8044d94:	08044e0b 	.word	0x08044e0b
 8044d98:	08044e0b 	.word	0x08044e0b
 8044d9c:	08044dfd 	.word	0x08044dfd
 8044da0:	2b40      	cmp	r3, #64	; 0x40
 8044da2:	d02e      	beq.n	8044e02 <UART_SetConfig+0x8aa>
 8044da4:	e031      	b.n	8044e0a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8044da6:	f7fd fc61 	bl	804266c <HAL_RCC_GetPCLK1Freq>
 8044daa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8044dac:	e033      	b.n	8044e16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8044dae:	f7fd fc73 	bl	8042698 <HAL_RCC_GetPCLK2Freq>
 8044db2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8044db4:	e02f      	b.n	8044e16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8044db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8044dba:	4618      	mov	r0, r3
 8044dbc:	f7fe fee2 	bl	8043b84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8044dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8044dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044dc4:	e027      	b.n	8044e16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8044dc6:	f107 0318 	add.w	r3, r7, #24
 8044dca:	4618      	mov	r0, r3
 8044dcc:	f7ff f82e 	bl	8043e2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8044dd0:	69fb      	ldr	r3, [r7, #28]
 8044dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044dd4:	e01f      	b.n	8044e16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8044dd6:	4b2d      	ldr	r3, [pc, #180]	; (8044e8c <UART_SetConfig+0x934>)
 8044dd8:	681b      	ldr	r3, [r3, #0]
 8044dda:	f003 0320 	and.w	r3, r3, #32
 8044dde:	2b00      	cmp	r3, #0
 8044de0:	d009      	beq.n	8044df6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8044de2:	4b2a      	ldr	r3, [pc, #168]	; (8044e8c <UART_SetConfig+0x934>)
 8044de4:	681b      	ldr	r3, [r3, #0]
 8044de6:	08db      	lsrs	r3, r3, #3
 8044de8:	f003 0303 	and.w	r3, r3, #3
 8044dec:	4a24      	ldr	r2, [pc, #144]	; (8044e80 <UART_SetConfig+0x928>)
 8044dee:	fa22 f303 	lsr.w	r3, r2, r3
 8044df2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8044df4:	e00f      	b.n	8044e16 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8044df6:	4b22      	ldr	r3, [pc, #136]	; (8044e80 <UART_SetConfig+0x928>)
 8044df8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044dfa:	e00c      	b.n	8044e16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8044dfc:	4b21      	ldr	r3, [pc, #132]	; (8044e84 <UART_SetConfig+0x92c>)
 8044dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044e00:	e009      	b.n	8044e16 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8044e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8044e06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044e08:	e005      	b.n	8044e16 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8044e0a:	2300      	movs	r3, #0
 8044e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8044e0e:	2301      	movs	r3, #1
 8044e10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8044e14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8044e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8044e18:	2b00      	cmp	r3, #0
 8044e1a:	f000 80e7 	beq.w	8044fec <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8044e1e:	697b      	ldr	r3, [r7, #20]
 8044e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8044e22:	4a19      	ldr	r2, [pc, #100]	; (8044e88 <UART_SetConfig+0x930>)
 8044e24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8044e28:	461a      	mov	r2, r3
 8044e2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8044e2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8044e30:	005a      	lsls	r2, r3, #1
 8044e32:	697b      	ldr	r3, [r7, #20]
 8044e34:	685b      	ldr	r3, [r3, #4]
 8044e36:	085b      	lsrs	r3, r3, #1
 8044e38:	441a      	add	r2, r3
 8044e3a:	697b      	ldr	r3, [r7, #20]
 8044e3c:	685b      	ldr	r3, [r3, #4]
 8044e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8044e42:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8044e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8044e46:	2b0f      	cmp	r3, #15
 8044e48:	d916      	bls.n	8044e78 <UART_SetConfig+0x920>
 8044e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8044e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8044e50:	d212      	bcs.n	8044e78 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8044e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8044e54:	b29b      	uxth	r3, r3
 8044e56:	f023 030f 	bic.w	r3, r3, #15
 8044e5a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8044e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8044e5e:	085b      	lsrs	r3, r3, #1
 8044e60:	b29b      	uxth	r3, r3
 8044e62:	f003 0307 	and.w	r3, r3, #7
 8044e66:	b29a      	uxth	r2, r3
 8044e68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8044e6a:	4313      	orrs	r3, r2
 8044e6c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8044e6e:	697b      	ldr	r3, [r7, #20]
 8044e70:	681b      	ldr	r3, [r3, #0]
 8044e72:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8044e74:	60da      	str	r2, [r3, #12]
 8044e76:	e0b9      	b.n	8044fec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8044e78:	2301      	movs	r3, #1
 8044e7a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8044e7e:	e0b5      	b.n	8044fec <UART_SetConfig+0xa94>
 8044e80:	03d09000 	.word	0x03d09000
 8044e84:	003d0900 	.word	0x003d0900
 8044e88:	08046734 	.word	0x08046734
 8044e8c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8044e90:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8044e94:	2b20      	cmp	r3, #32
 8044e96:	dc49      	bgt.n	8044f2c <UART_SetConfig+0x9d4>
 8044e98:	2b00      	cmp	r3, #0
 8044e9a:	db7c      	blt.n	8044f96 <UART_SetConfig+0xa3e>
 8044e9c:	2b20      	cmp	r3, #32
 8044e9e:	d87a      	bhi.n	8044f96 <UART_SetConfig+0xa3e>
 8044ea0:	a201      	add	r2, pc, #4	; (adr r2, 8044ea8 <UART_SetConfig+0x950>)
 8044ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044ea6:	bf00      	nop
 8044ea8:	08044f33 	.word	0x08044f33
 8044eac:	08044f3b 	.word	0x08044f3b
 8044eb0:	08044f97 	.word	0x08044f97
 8044eb4:	08044f97 	.word	0x08044f97
 8044eb8:	08044f43 	.word	0x08044f43
 8044ebc:	08044f97 	.word	0x08044f97
 8044ec0:	08044f97 	.word	0x08044f97
 8044ec4:	08044f97 	.word	0x08044f97
 8044ec8:	08044f53 	.word	0x08044f53
 8044ecc:	08044f97 	.word	0x08044f97
 8044ed0:	08044f97 	.word	0x08044f97
 8044ed4:	08044f97 	.word	0x08044f97
 8044ed8:	08044f97 	.word	0x08044f97
 8044edc:	08044f97 	.word	0x08044f97
 8044ee0:	08044f97 	.word	0x08044f97
 8044ee4:	08044f97 	.word	0x08044f97
 8044ee8:	08044f63 	.word	0x08044f63
 8044eec:	08044f97 	.word	0x08044f97
 8044ef0:	08044f97 	.word	0x08044f97
 8044ef4:	08044f97 	.word	0x08044f97
 8044ef8:	08044f97 	.word	0x08044f97
 8044efc:	08044f97 	.word	0x08044f97
 8044f00:	08044f97 	.word	0x08044f97
 8044f04:	08044f97 	.word	0x08044f97
 8044f08:	08044f97 	.word	0x08044f97
 8044f0c:	08044f97 	.word	0x08044f97
 8044f10:	08044f97 	.word	0x08044f97
 8044f14:	08044f97 	.word	0x08044f97
 8044f18:	08044f97 	.word	0x08044f97
 8044f1c:	08044f97 	.word	0x08044f97
 8044f20:	08044f97 	.word	0x08044f97
 8044f24:	08044f97 	.word	0x08044f97
 8044f28:	08044f89 	.word	0x08044f89
 8044f2c:	2b40      	cmp	r3, #64	; 0x40
 8044f2e:	d02e      	beq.n	8044f8e <UART_SetConfig+0xa36>
 8044f30:	e031      	b.n	8044f96 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8044f32:	f7fd fb9b 	bl	804266c <HAL_RCC_GetPCLK1Freq>
 8044f36:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8044f38:	e033      	b.n	8044fa2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8044f3a:	f7fd fbad 	bl	8042698 <HAL_RCC_GetPCLK2Freq>
 8044f3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8044f40:	e02f      	b.n	8044fa2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8044f42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8044f46:	4618      	mov	r0, r3
 8044f48:	f7fe fe1c 	bl	8043b84 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8044f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8044f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044f50:	e027      	b.n	8044fa2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8044f52:	f107 0318 	add.w	r3, r7, #24
 8044f56:	4618      	mov	r0, r3
 8044f58:	f7fe ff68 	bl	8043e2c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8044f5c:	69fb      	ldr	r3, [r7, #28]
 8044f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044f60:	e01f      	b.n	8044fa2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8044f62:	4b2d      	ldr	r3, [pc, #180]	; (8045018 <UART_SetConfig+0xac0>)
 8044f64:	681b      	ldr	r3, [r3, #0]
 8044f66:	f003 0320 	and.w	r3, r3, #32
 8044f6a:	2b00      	cmp	r3, #0
 8044f6c:	d009      	beq.n	8044f82 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8044f6e:	4b2a      	ldr	r3, [pc, #168]	; (8045018 <UART_SetConfig+0xac0>)
 8044f70:	681b      	ldr	r3, [r3, #0]
 8044f72:	08db      	lsrs	r3, r3, #3
 8044f74:	f003 0303 	and.w	r3, r3, #3
 8044f78:	4a28      	ldr	r2, [pc, #160]	; (804501c <UART_SetConfig+0xac4>)
 8044f7a:	fa22 f303 	lsr.w	r3, r2, r3
 8044f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8044f80:	e00f      	b.n	8044fa2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8044f82:	4b26      	ldr	r3, [pc, #152]	; (804501c <UART_SetConfig+0xac4>)
 8044f84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044f86:	e00c      	b.n	8044fa2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8044f88:	4b25      	ldr	r3, [pc, #148]	; (8045020 <UART_SetConfig+0xac8>)
 8044f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044f8c:	e009      	b.n	8044fa2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8044f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8044f92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044f94:	e005      	b.n	8044fa2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8044f96:	2300      	movs	r3, #0
 8044f98:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8044f9a:	2301      	movs	r3, #1
 8044f9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8044fa0:	bf00      	nop
    }

    if (pclk != 0U)
 8044fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8044fa4:	2b00      	cmp	r3, #0
 8044fa6:	d021      	beq.n	8044fec <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8044fa8:	697b      	ldr	r3, [r7, #20]
 8044faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8044fac:	4a1d      	ldr	r2, [pc, #116]	; (8045024 <UART_SetConfig+0xacc>)
 8044fae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8044fb2:	461a      	mov	r2, r3
 8044fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8044fb6:	fbb3 f2f2 	udiv	r2, r3, r2
 8044fba:	697b      	ldr	r3, [r7, #20]
 8044fbc:	685b      	ldr	r3, [r3, #4]
 8044fbe:	085b      	lsrs	r3, r3, #1
 8044fc0:	441a      	add	r2, r3
 8044fc2:	697b      	ldr	r3, [r7, #20]
 8044fc4:	685b      	ldr	r3, [r3, #4]
 8044fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8044fca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8044fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8044fce:	2b0f      	cmp	r3, #15
 8044fd0:	d909      	bls.n	8044fe6 <UART_SetConfig+0xa8e>
 8044fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8044fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8044fd8:	d205      	bcs.n	8044fe6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8044fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8044fdc:	b29a      	uxth	r2, r3
 8044fde:	697b      	ldr	r3, [r7, #20]
 8044fe0:	681b      	ldr	r3, [r3, #0]
 8044fe2:	60da      	str	r2, [r3, #12]
 8044fe4:	e002      	b.n	8044fec <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8044fe6:	2301      	movs	r3, #1
 8044fe8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8044fec:	697b      	ldr	r3, [r7, #20]
 8044fee:	2201      	movs	r2, #1
 8044ff0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8044ff4:	697b      	ldr	r3, [r7, #20]
 8044ff6:	2201      	movs	r2, #1
 8044ff8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8044ffc:	697b      	ldr	r3, [r7, #20]
 8044ffe:	2200      	movs	r2, #0
 8045000:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8045002:	697b      	ldr	r3, [r7, #20]
 8045004:	2200      	movs	r2, #0
 8045006:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8045008:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 804500c:	4618      	mov	r0, r3
 804500e:	3748      	adds	r7, #72	; 0x48
 8045010:	46bd      	mov	sp, r7
 8045012:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8045016:	bf00      	nop
 8045018:	58024400 	.word	0x58024400
 804501c:	03d09000 	.word	0x03d09000
 8045020:	003d0900 	.word	0x003d0900
 8045024:	08046734 	.word	0x08046734

08045028 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8045028:	b480      	push	{r7}
 804502a:	b083      	sub	sp, #12
 804502c:	af00      	add	r7, sp, #0
 804502e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8045030:	687b      	ldr	r3, [r7, #4]
 8045032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8045034:	f003 0301 	and.w	r3, r3, #1
 8045038:	2b00      	cmp	r3, #0
 804503a:	d00a      	beq.n	8045052 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 804503c:	687b      	ldr	r3, [r7, #4]
 804503e:	681b      	ldr	r3, [r3, #0]
 8045040:	685b      	ldr	r3, [r3, #4]
 8045042:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8045046:	687b      	ldr	r3, [r7, #4]
 8045048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804504a:	687b      	ldr	r3, [r7, #4]
 804504c:	681b      	ldr	r3, [r3, #0]
 804504e:	430a      	orrs	r2, r1
 8045050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8045052:	687b      	ldr	r3, [r7, #4]
 8045054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8045056:	f003 0302 	and.w	r3, r3, #2
 804505a:	2b00      	cmp	r3, #0
 804505c:	d00a      	beq.n	8045074 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 804505e:	687b      	ldr	r3, [r7, #4]
 8045060:	681b      	ldr	r3, [r3, #0]
 8045062:	685b      	ldr	r3, [r3, #4]
 8045064:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8045068:	687b      	ldr	r3, [r7, #4]
 804506a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804506c:	687b      	ldr	r3, [r7, #4]
 804506e:	681b      	ldr	r3, [r3, #0]
 8045070:	430a      	orrs	r2, r1
 8045072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8045074:	687b      	ldr	r3, [r7, #4]
 8045076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8045078:	f003 0304 	and.w	r3, r3, #4
 804507c:	2b00      	cmp	r3, #0
 804507e:	d00a      	beq.n	8045096 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8045080:	687b      	ldr	r3, [r7, #4]
 8045082:	681b      	ldr	r3, [r3, #0]
 8045084:	685b      	ldr	r3, [r3, #4]
 8045086:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 804508a:	687b      	ldr	r3, [r7, #4]
 804508c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 804508e:	687b      	ldr	r3, [r7, #4]
 8045090:	681b      	ldr	r3, [r3, #0]
 8045092:	430a      	orrs	r2, r1
 8045094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8045096:	687b      	ldr	r3, [r7, #4]
 8045098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804509a:	f003 0308 	and.w	r3, r3, #8
 804509e:	2b00      	cmp	r3, #0
 80450a0:	d00a      	beq.n	80450b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80450a2:	687b      	ldr	r3, [r7, #4]
 80450a4:	681b      	ldr	r3, [r3, #0]
 80450a6:	685b      	ldr	r3, [r3, #4]
 80450a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80450ac:	687b      	ldr	r3, [r7, #4]
 80450ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80450b0:	687b      	ldr	r3, [r7, #4]
 80450b2:	681b      	ldr	r3, [r3, #0]
 80450b4:	430a      	orrs	r2, r1
 80450b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80450b8:	687b      	ldr	r3, [r7, #4]
 80450ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80450bc:	f003 0310 	and.w	r3, r3, #16
 80450c0:	2b00      	cmp	r3, #0
 80450c2:	d00a      	beq.n	80450da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80450c4:	687b      	ldr	r3, [r7, #4]
 80450c6:	681b      	ldr	r3, [r3, #0]
 80450c8:	689b      	ldr	r3, [r3, #8]
 80450ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80450ce:	687b      	ldr	r3, [r7, #4]
 80450d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80450d2:	687b      	ldr	r3, [r7, #4]
 80450d4:	681b      	ldr	r3, [r3, #0]
 80450d6:	430a      	orrs	r2, r1
 80450d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80450da:	687b      	ldr	r3, [r7, #4]
 80450dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80450de:	f003 0320 	and.w	r3, r3, #32
 80450e2:	2b00      	cmp	r3, #0
 80450e4:	d00a      	beq.n	80450fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80450e6:	687b      	ldr	r3, [r7, #4]
 80450e8:	681b      	ldr	r3, [r3, #0]
 80450ea:	689b      	ldr	r3, [r3, #8]
 80450ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80450f0:	687b      	ldr	r3, [r7, #4]
 80450f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80450f4:	687b      	ldr	r3, [r7, #4]
 80450f6:	681b      	ldr	r3, [r3, #0]
 80450f8:	430a      	orrs	r2, r1
 80450fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80450fc:	687b      	ldr	r3, [r7, #4]
 80450fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8045100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045104:	2b00      	cmp	r3, #0
 8045106:	d01a      	beq.n	804513e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8045108:	687b      	ldr	r3, [r7, #4]
 804510a:	681b      	ldr	r3, [r3, #0]
 804510c:	685b      	ldr	r3, [r3, #4]
 804510e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8045112:	687b      	ldr	r3, [r7, #4]
 8045114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8045116:	687b      	ldr	r3, [r7, #4]
 8045118:	681b      	ldr	r3, [r3, #0]
 804511a:	430a      	orrs	r2, r1
 804511c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 804511e:	687b      	ldr	r3, [r7, #4]
 8045120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8045122:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8045126:	d10a      	bne.n	804513e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8045128:	687b      	ldr	r3, [r7, #4]
 804512a:	681b      	ldr	r3, [r3, #0]
 804512c:	685b      	ldr	r3, [r3, #4]
 804512e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8045132:	687b      	ldr	r3, [r7, #4]
 8045134:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8045136:	687b      	ldr	r3, [r7, #4]
 8045138:	681b      	ldr	r3, [r3, #0]
 804513a:	430a      	orrs	r2, r1
 804513c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 804513e:	687b      	ldr	r3, [r7, #4]
 8045140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8045142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8045146:	2b00      	cmp	r3, #0
 8045148:	d00a      	beq.n	8045160 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 804514a:	687b      	ldr	r3, [r7, #4]
 804514c:	681b      	ldr	r3, [r3, #0]
 804514e:	685b      	ldr	r3, [r3, #4]
 8045150:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8045154:	687b      	ldr	r3, [r7, #4]
 8045156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8045158:	687b      	ldr	r3, [r7, #4]
 804515a:	681b      	ldr	r3, [r3, #0]
 804515c:	430a      	orrs	r2, r1
 804515e:	605a      	str	r2, [r3, #4]
  }
}
 8045160:	bf00      	nop
 8045162:	370c      	adds	r7, #12
 8045164:	46bd      	mov	sp, r7
 8045166:	f85d 7b04 	ldr.w	r7, [sp], #4
 804516a:	4770      	bx	lr

0804516c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 804516c:	b580      	push	{r7, lr}
 804516e:	b098      	sub	sp, #96	; 0x60
 8045170:	af02      	add	r7, sp, #8
 8045172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8045174:	687b      	ldr	r3, [r7, #4]
 8045176:	2200      	movs	r2, #0
 8045178:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 804517c:	f7fb fec6 	bl	8040f0c <HAL_GetTick>
 8045180:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8045182:	687b      	ldr	r3, [r7, #4]
 8045184:	681b      	ldr	r3, [r3, #0]
 8045186:	681b      	ldr	r3, [r3, #0]
 8045188:	f003 0308 	and.w	r3, r3, #8
 804518c:	2b08      	cmp	r3, #8
 804518e:	d12f      	bne.n	80451f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8045190:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8045194:	9300      	str	r3, [sp, #0]
 8045196:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8045198:	2200      	movs	r2, #0
 804519a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 804519e:	6878      	ldr	r0, [r7, #4]
 80451a0:	f000 f88e 	bl	80452c0 <UART_WaitOnFlagUntilTimeout>
 80451a4:	4603      	mov	r3, r0
 80451a6:	2b00      	cmp	r3, #0
 80451a8:	d022      	beq.n	80451f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80451aa:	687b      	ldr	r3, [r7, #4]
 80451ac:	681b      	ldr	r3, [r3, #0]
 80451ae:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80451b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80451b2:	e853 3f00 	ldrex	r3, [r3]
 80451b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80451b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80451ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80451be:	653b      	str	r3, [r7, #80]	; 0x50
 80451c0:	687b      	ldr	r3, [r7, #4]
 80451c2:	681b      	ldr	r3, [r3, #0]
 80451c4:	461a      	mov	r2, r3
 80451c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80451c8:	647b      	str	r3, [r7, #68]	; 0x44
 80451ca:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80451cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80451ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80451d0:	e841 2300 	strex	r3, r2, [r1]
 80451d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80451d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80451d8:	2b00      	cmp	r3, #0
 80451da:	d1e6      	bne.n	80451aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80451dc:	687b      	ldr	r3, [r7, #4]
 80451de:	2220      	movs	r2, #32
 80451e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80451e4:	687b      	ldr	r3, [r7, #4]
 80451e6:	2200      	movs	r2, #0
 80451e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80451ec:	2303      	movs	r3, #3
 80451ee:	e063      	b.n	80452b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80451f0:	687b      	ldr	r3, [r7, #4]
 80451f2:	681b      	ldr	r3, [r3, #0]
 80451f4:	681b      	ldr	r3, [r3, #0]
 80451f6:	f003 0304 	and.w	r3, r3, #4
 80451fa:	2b04      	cmp	r3, #4
 80451fc:	d149      	bne.n	8045292 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80451fe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8045202:	9300      	str	r3, [sp, #0]
 8045204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8045206:	2200      	movs	r2, #0
 8045208:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 804520c:	6878      	ldr	r0, [r7, #4]
 804520e:	f000 f857 	bl	80452c0 <UART_WaitOnFlagUntilTimeout>
 8045212:	4603      	mov	r3, r0
 8045214:	2b00      	cmp	r3, #0
 8045216:	d03c      	beq.n	8045292 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8045218:	687b      	ldr	r3, [r7, #4]
 804521a:	681b      	ldr	r3, [r3, #0]
 804521c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804521e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8045220:	e853 3f00 	ldrex	r3, [r3]
 8045224:	623b      	str	r3, [r7, #32]
   return(result);
 8045226:	6a3b      	ldr	r3, [r7, #32]
 8045228:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 804522c:	64fb      	str	r3, [r7, #76]	; 0x4c
 804522e:	687b      	ldr	r3, [r7, #4]
 8045230:	681b      	ldr	r3, [r3, #0]
 8045232:	461a      	mov	r2, r3
 8045234:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8045236:	633b      	str	r3, [r7, #48]	; 0x30
 8045238:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804523a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 804523c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 804523e:	e841 2300 	strex	r3, r2, [r1]
 8045242:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8045244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8045246:	2b00      	cmp	r3, #0
 8045248:	d1e6      	bne.n	8045218 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804524a:	687b      	ldr	r3, [r7, #4]
 804524c:	681b      	ldr	r3, [r3, #0]
 804524e:	3308      	adds	r3, #8
 8045250:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8045252:	693b      	ldr	r3, [r7, #16]
 8045254:	e853 3f00 	ldrex	r3, [r3]
 8045258:	60fb      	str	r3, [r7, #12]
   return(result);
 804525a:	68fb      	ldr	r3, [r7, #12]
 804525c:	f023 0301 	bic.w	r3, r3, #1
 8045260:	64bb      	str	r3, [r7, #72]	; 0x48
 8045262:	687b      	ldr	r3, [r7, #4]
 8045264:	681b      	ldr	r3, [r3, #0]
 8045266:	3308      	adds	r3, #8
 8045268:	6cba      	ldr	r2, [r7, #72]	; 0x48
 804526a:	61fa      	str	r2, [r7, #28]
 804526c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804526e:	69b9      	ldr	r1, [r7, #24]
 8045270:	69fa      	ldr	r2, [r7, #28]
 8045272:	e841 2300 	strex	r3, r2, [r1]
 8045276:	617b      	str	r3, [r7, #20]
   return(result);
 8045278:	697b      	ldr	r3, [r7, #20]
 804527a:	2b00      	cmp	r3, #0
 804527c:	d1e5      	bne.n	804524a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 804527e:	687b      	ldr	r3, [r7, #4]
 8045280:	2220      	movs	r2, #32
 8045282:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8045286:	687b      	ldr	r3, [r7, #4]
 8045288:	2200      	movs	r2, #0
 804528a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 804528e:	2303      	movs	r3, #3
 8045290:	e012      	b.n	80452b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8045292:	687b      	ldr	r3, [r7, #4]
 8045294:	2220      	movs	r2, #32
 8045296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 804529a:	687b      	ldr	r3, [r7, #4]
 804529c:	2220      	movs	r2, #32
 804529e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80452a2:	687b      	ldr	r3, [r7, #4]
 80452a4:	2200      	movs	r2, #0
 80452a6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80452a8:	687b      	ldr	r3, [r7, #4]
 80452aa:	2200      	movs	r2, #0
 80452ac:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80452ae:	687b      	ldr	r3, [r7, #4]
 80452b0:	2200      	movs	r2, #0
 80452b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80452b6:	2300      	movs	r3, #0
}
 80452b8:	4618      	mov	r0, r3
 80452ba:	3758      	adds	r7, #88	; 0x58
 80452bc:	46bd      	mov	sp, r7
 80452be:	bd80      	pop	{r7, pc}

080452c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80452c0:	b580      	push	{r7, lr}
 80452c2:	b084      	sub	sp, #16
 80452c4:	af00      	add	r7, sp, #0
 80452c6:	60f8      	str	r0, [r7, #12]
 80452c8:	60b9      	str	r1, [r7, #8]
 80452ca:	603b      	str	r3, [r7, #0]
 80452cc:	4613      	mov	r3, r2
 80452ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80452d0:	e049      	b.n	8045366 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80452d2:	69bb      	ldr	r3, [r7, #24]
 80452d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80452d8:	d045      	beq.n	8045366 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80452da:	f7fb fe17 	bl	8040f0c <HAL_GetTick>
 80452de:	4602      	mov	r2, r0
 80452e0:	683b      	ldr	r3, [r7, #0]
 80452e2:	1ad3      	subs	r3, r2, r3
 80452e4:	69ba      	ldr	r2, [r7, #24]
 80452e6:	429a      	cmp	r2, r3
 80452e8:	d302      	bcc.n	80452f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80452ea:	69bb      	ldr	r3, [r7, #24]
 80452ec:	2b00      	cmp	r3, #0
 80452ee:	d101      	bne.n	80452f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80452f0:	2303      	movs	r3, #3
 80452f2:	e048      	b.n	8045386 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80452f4:	68fb      	ldr	r3, [r7, #12]
 80452f6:	681b      	ldr	r3, [r3, #0]
 80452f8:	681b      	ldr	r3, [r3, #0]
 80452fa:	f003 0304 	and.w	r3, r3, #4
 80452fe:	2b00      	cmp	r3, #0
 8045300:	d031      	beq.n	8045366 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8045302:	68fb      	ldr	r3, [r7, #12]
 8045304:	681b      	ldr	r3, [r3, #0]
 8045306:	69db      	ldr	r3, [r3, #28]
 8045308:	f003 0308 	and.w	r3, r3, #8
 804530c:	2b08      	cmp	r3, #8
 804530e:	d110      	bne.n	8045332 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8045310:	68fb      	ldr	r3, [r7, #12]
 8045312:	681b      	ldr	r3, [r3, #0]
 8045314:	2208      	movs	r2, #8
 8045316:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8045318:	68f8      	ldr	r0, [r7, #12]
 804531a:	f000 f839 	bl	8045390 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 804531e:	68fb      	ldr	r3, [r7, #12]
 8045320:	2208      	movs	r2, #8
 8045322:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8045326:	68fb      	ldr	r3, [r7, #12]
 8045328:	2200      	movs	r2, #0
 804532a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 804532e:	2301      	movs	r3, #1
 8045330:	e029      	b.n	8045386 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8045332:	68fb      	ldr	r3, [r7, #12]
 8045334:	681b      	ldr	r3, [r3, #0]
 8045336:	69db      	ldr	r3, [r3, #28]
 8045338:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804533c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8045340:	d111      	bne.n	8045366 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8045342:	68fb      	ldr	r3, [r7, #12]
 8045344:	681b      	ldr	r3, [r3, #0]
 8045346:	f44f 6200 	mov.w	r2, #2048	; 0x800
 804534a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 804534c:	68f8      	ldr	r0, [r7, #12]
 804534e:	f000 f81f 	bl	8045390 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8045352:	68fb      	ldr	r3, [r7, #12]
 8045354:	2220      	movs	r2, #32
 8045356:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 804535a:	68fb      	ldr	r3, [r7, #12]
 804535c:	2200      	movs	r2, #0
 804535e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8045362:	2303      	movs	r3, #3
 8045364:	e00f      	b.n	8045386 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8045366:	68fb      	ldr	r3, [r7, #12]
 8045368:	681b      	ldr	r3, [r3, #0]
 804536a:	69da      	ldr	r2, [r3, #28]
 804536c:	68bb      	ldr	r3, [r7, #8]
 804536e:	4013      	ands	r3, r2
 8045370:	68ba      	ldr	r2, [r7, #8]
 8045372:	429a      	cmp	r2, r3
 8045374:	bf0c      	ite	eq
 8045376:	2301      	moveq	r3, #1
 8045378:	2300      	movne	r3, #0
 804537a:	b2db      	uxtb	r3, r3
 804537c:	461a      	mov	r2, r3
 804537e:	79fb      	ldrb	r3, [r7, #7]
 8045380:	429a      	cmp	r2, r3
 8045382:	d0a6      	beq.n	80452d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8045384:	2300      	movs	r3, #0
}
 8045386:	4618      	mov	r0, r3
 8045388:	3710      	adds	r7, #16
 804538a:	46bd      	mov	sp, r7
 804538c:	bd80      	pop	{r7, pc}
	...

08045390 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8045390:	b480      	push	{r7}
 8045392:	b095      	sub	sp, #84	; 0x54
 8045394:	af00      	add	r7, sp, #0
 8045396:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8045398:	687b      	ldr	r3, [r7, #4]
 804539a:	681b      	ldr	r3, [r3, #0]
 804539c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804539e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80453a0:	e853 3f00 	ldrex	r3, [r3]
 80453a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80453a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80453a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80453ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80453ae:	687b      	ldr	r3, [r7, #4]
 80453b0:	681b      	ldr	r3, [r3, #0]
 80453b2:	461a      	mov	r2, r3
 80453b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80453b6:	643b      	str	r3, [r7, #64]	; 0x40
 80453b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80453ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80453bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80453be:	e841 2300 	strex	r3, r2, [r1]
 80453c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80453c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80453c6:	2b00      	cmp	r3, #0
 80453c8:	d1e6      	bne.n	8045398 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80453ca:	687b      	ldr	r3, [r7, #4]
 80453cc:	681b      	ldr	r3, [r3, #0]
 80453ce:	3308      	adds	r3, #8
 80453d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80453d2:	6a3b      	ldr	r3, [r7, #32]
 80453d4:	e853 3f00 	ldrex	r3, [r3]
 80453d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80453da:	69fa      	ldr	r2, [r7, #28]
 80453dc:	4b1e      	ldr	r3, [pc, #120]	; (8045458 <UART_EndRxTransfer+0xc8>)
 80453de:	4013      	ands	r3, r2
 80453e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80453e2:	687b      	ldr	r3, [r7, #4]
 80453e4:	681b      	ldr	r3, [r3, #0]
 80453e6:	3308      	adds	r3, #8
 80453e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80453ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80453ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80453ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80453f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80453f2:	e841 2300 	strex	r3, r2, [r1]
 80453f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80453f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80453fa:	2b00      	cmp	r3, #0
 80453fc:	d1e5      	bne.n	80453ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80453fe:	687b      	ldr	r3, [r7, #4]
 8045400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8045402:	2b01      	cmp	r3, #1
 8045404:	d118      	bne.n	8045438 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8045406:	687b      	ldr	r3, [r7, #4]
 8045408:	681b      	ldr	r3, [r3, #0]
 804540a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804540c:	68fb      	ldr	r3, [r7, #12]
 804540e:	e853 3f00 	ldrex	r3, [r3]
 8045412:	60bb      	str	r3, [r7, #8]
   return(result);
 8045414:	68bb      	ldr	r3, [r7, #8]
 8045416:	f023 0310 	bic.w	r3, r3, #16
 804541a:	647b      	str	r3, [r7, #68]	; 0x44
 804541c:	687b      	ldr	r3, [r7, #4]
 804541e:	681b      	ldr	r3, [r3, #0]
 8045420:	461a      	mov	r2, r3
 8045422:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8045424:	61bb      	str	r3, [r7, #24]
 8045426:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8045428:	6979      	ldr	r1, [r7, #20]
 804542a:	69ba      	ldr	r2, [r7, #24]
 804542c:	e841 2300 	strex	r3, r2, [r1]
 8045430:	613b      	str	r3, [r7, #16]
   return(result);
 8045432:	693b      	ldr	r3, [r7, #16]
 8045434:	2b00      	cmp	r3, #0
 8045436:	d1e6      	bne.n	8045406 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8045438:	687b      	ldr	r3, [r7, #4]
 804543a:	2220      	movs	r2, #32
 804543c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8045440:	687b      	ldr	r3, [r7, #4]
 8045442:	2200      	movs	r2, #0
 8045444:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8045446:	687b      	ldr	r3, [r7, #4]
 8045448:	2200      	movs	r2, #0
 804544a:	675a      	str	r2, [r3, #116]	; 0x74
}
 804544c:	bf00      	nop
 804544e:	3754      	adds	r7, #84	; 0x54
 8045450:	46bd      	mov	sp, r7
 8045452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045456:	4770      	bx	lr
 8045458:	effffffe 	.word	0xeffffffe

0804545c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 804545c:	b480      	push	{r7}
 804545e:	b085      	sub	sp, #20
 8045460:	af00      	add	r7, sp, #0
 8045462:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8045464:	687b      	ldr	r3, [r7, #4]
 8045466:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 804546a:	2b01      	cmp	r3, #1
 804546c:	d101      	bne.n	8045472 <HAL_UARTEx_DisableFifoMode+0x16>
 804546e:	2302      	movs	r3, #2
 8045470:	e027      	b.n	80454c2 <HAL_UARTEx_DisableFifoMode+0x66>
 8045472:	687b      	ldr	r3, [r7, #4]
 8045474:	2201      	movs	r2, #1
 8045476:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 804547a:	687b      	ldr	r3, [r7, #4]
 804547c:	2224      	movs	r2, #36	; 0x24
 804547e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8045482:	687b      	ldr	r3, [r7, #4]
 8045484:	681b      	ldr	r3, [r3, #0]
 8045486:	681b      	ldr	r3, [r3, #0]
 8045488:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 804548a:	687b      	ldr	r3, [r7, #4]
 804548c:	681b      	ldr	r3, [r3, #0]
 804548e:	681a      	ldr	r2, [r3, #0]
 8045490:	687b      	ldr	r3, [r7, #4]
 8045492:	681b      	ldr	r3, [r3, #0]
 8045494:	f022 0201 	bic.w	r2, r2, #1
 8045498:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 804549a:	68fb      	ldr	r3, [r7, #12]
 804549c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80454a0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80454a2:	687b      	ldr	r3, [r7, #4]
 80454a4:	2200      	movs	r2, #0
 80454a6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80454a8:	687b      	ldr	r3, [r7, #4]
 80454aa:	681b      	ldr	r3, [r3, #0]
 80454ac:	68fa      	ldr	r2, [r7, #12]
 80454ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80454b0:	687b      	ldr	r3, [r7, #4]
 80454b2:	2220      	movs	r2, #32
 80454b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80454b8:	687b      	ldr	r3, [r7, #4]
 80454ba:	2200      	movs	r2, #0
 80454bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80454c0:	2300      	movs	r3, #0
}
 80454c2:	4618      	mov	r0, r3
 80454c4:	3714      	adds	r7, #20
 80454c6:	46bd      	mov	sp, r7
 80454c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80454cc:	4770      	bx	lr

080454ce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80454ce:	b580      	push	{r7, lr}
 80454d0:	b084      	sub	sp, #16
 80454d2:	af00      	add	r7, sp, #0
 80454d4:	6078      	str	r0, [r7, #4]
 80454d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80454d8:	687b      	ldr	r3, [r7, #4]
 80454da:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80454de:	2b01      	cmp	r3, #1
 80454e0:	d101      	bne.n	80454e6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80454e2:	2302      	movs	r3, #2
 80454e4:	e02d      	b.n	8045542 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80454e6:	687b      	ldr	r3, [r7, #4]
 80454e8:	2201      	movs	r2, #1
 80454ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80454ee:	687b      	ldr	r3, [r7, #4]
 80454f0:	2224      	movs	r2, #36	; 0x24
 80454f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80454f6:	687b      	ldr	r3, [r7, #4]
 80454f8:	681b      	ldr	r3, [r3, #0]
 80454fa:	681b      	ldr	r3, [r3, #0]
 80454fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80454fe:	687b      	ldr	r3, [r7, #4]
 8045500:	681b      	ldr	r3, [r3, #0]
 8045502:	681a      	ldr	r2, [r3, #0]
 8045504:	687b      	ldr	r3, [r7, #4]
 8045506:	681b      	ldr	r3, [r3, #0]
 8045508:	f022 0201 	bic.w	r2, r2, #1
 804550c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 804550e:	687b      	ldr	r3, [r7, #4]
 8045510:	681b      	ldr	r3, [r3, #0]
 8045512:	689b      	ldr	r3, [r3, #8]
 8045514:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8045518:	687b      	ldr	r3, [r7, #4]
 804551a:	681b      	ldr	r3, [r3, #0]
 804551c:	683a      	ldr	r2, [r7, #0]
 804551e:	430a      	orrs	r2, r1
 8045520:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8045522:	6878      	ldr	r0, [r7, #4]
 8045524:	f000 f850 	bl	80455c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8045528:	687b      	ldr	r3, [r7, #4]
 804552a:	681b      	ldr	r3, [r3, #0]
 804552c:	68fa      	ldr	r2, [r7, #12]
 804552e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8045530:	687b      	ldr	r3, [r7, #4]
 8045532:	2220      	movs	r2, #32
 8045534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8045538:	687b      	ldr	r3, [r7, #4]
 804553a:	2200      	movs	r2, #0
 804553c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8045540:	2300      	movs	r3, #0
}
 8045542:	4618      	mov	r0, r3
 8045544:	3710      	adds	r7, #16
 8045546:	46bd      	mov	sp, r7
 8045548:	bd80      	pop	{r7, pc}

0804554a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 804554a:	b580      	push	{r7, lr}
 804554c:	b084      	sub	sp, #16
 804554e:	af00      	add	r7, sp, #0
 8045550:	6078      	str	r0, [r7, #4]
 8045552:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8045554:	687b      	ldr	r3, [r7, #4]
 8045556:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 804555a:	2b01      	cmp	r3, #1
 804555c:	d101      	bne.n	8045562 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 804555e:	2302      	movs	r3, #2
 8045560:	e02d      	b.n	80455be <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8045562:	687b      	ldr	r3, [r7, #4]
 8045564:	2201      	movs	r2, #1
 8045566:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 804556a:	687b      	ldr	r3, [r7, #4]
 804556c:	2224      	movs	r2, #36	; 0x24
 804556e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8045572:	687b      	ldr	r3, [r7, #4]
 8045574:	681b      	ldr	r3, [r3, #0]
 8045576:	681b      	ldr	r3, [r3, #0]
 8045578:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 804557a:	687b      	ldr	r3, [r7, #4]
 804557c:	681b      	ldr	r3, [r3, #0]
 804557e:	681a      	ldr	r2, [r3, #0]
 8045580:	687b      	ldr	r3, [r7, #4]
 8045582:	681b      	ldr	r3, [r3, #0]
 8045584:	f022 0201 	bic.w	r2, r2, #1
 8045588:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 804558a:	687b      	ldr	r3, [r7, #4]
 804558c:	681b      	ldr	r3, [r3, #0]
 804558e:	689b      	ldr	r3, [r3, #8]
 8045590:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8045594:	687b      	ldr	r3, [r7, #4]
 8045596:	681b      	ldr	r3, [r3, #0]
 8045598:	683a      	ldr	r2, [r7, #0]
 804559a:	430a      	orrs	r2, r1
 804559c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 804559e:	6878      	ldr	r0, [r7, #4]
 80455a0:	f000 f812 	bl	80455c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80455a4:	687b      	ldr	r3, [r7, #4]
 80455a6:	681b      	ldr	r3, [r3, #0]
 80455a8:	68fa      	ldr	r2, [r7, #12]
 80455aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80455ac:	687b      	ldr	r3, [r7, #4]
 80455ae:	2220      	movs	r2, #32
 80455b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80455b4:	687b      	ldr	r3, [r7, #4]
 80455b6:	2200      	movs	r2, #0
 80455b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80455bc:	2300      	movs	r3, #0
}
 80455be:	4618      	mov	r0, r3
 80455c0:	3710      	adds	r7, #16
 80455c2:	46bd      	mov	sp, r7
 80455c4:	bd80      	pop	{r7, pc}
	...

080455c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80455c8:	b480      	push	{r7}
 80455ca:	b085      	sub	sp, #20
 80455cc:	af00      	add	r7, sp, #0
 80455ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80455d0:	687b      	ldr	r3, [r7, #4]
 80455d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80455d4:	2b00      	cmp	r3, #0
 80455d6:	d108      	bne.n	80455ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80455d8:	687b      	ldr	r3, [r7, #4]
 80455da:	2201      	movs	r2, #1
 80455dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80455e0:	687b      	ldr	r3, [r7, #4]
 80455e2:	2201      	movs	r2, #1
 80455e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80455e8:	e031      	b.n	804564e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80455ea:	2310      	movs	r3, #16
 80455ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80455ee:	2310      	movs	r3, #16
 80455f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80455f2:	687b      	ldr	r3, [r7, #4]
 80455f4:	681b      	ldr	r3, [r3, #0]
 80455f6:	689b      	ldr	r3, [r3, #8]
 80455f8:	0e5b      	lsrs	r3, r3, #25
 80455fa:	b2db      	uxtb	r3, r3
 80455fc:	f003 0307 	and.w	r3, r3, #7
 8045600:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8045602:	687b      	ldr	r3, [r7, #4]
 8045604:	681b      	ldr	r3, [r3, #0]
 8045606:	689b      	ldr	r3, [r3, #8]
 8045608:	0f5b      	lsrs	r3, r3, #29
 804560a:	b2db      	uxtb	r3, r3
 804560c:	f003 0307 	and.w	r3, r3, #7
 8045610:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8045612:	7bbb      	ldrb	r3, [r7, #14]
 8045614:	7b3a      	ldrb	r2, [r7, #12]
 8045616:	4911      	ldr	r1, [pc, #68]	; (804565c <UARTEx_SetNbDataToProcess+0x94>)
 8045618:	5c8a      	ldrb	r2, [r1, r2]
 804561a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 804561e:	7b3a      	ldrb	r2, [r7, #12]
 8045620:	490f      	ldr	r1, [pc, #60]	; (8045660 <UARTEx_SetNbDataToProcess+0x98>)
 8045622:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8045624:	fb93 f3f2 	sdiv	r3, r3, r2
 8045628:	b29a      	uxth	r2, r3
 804562a:	687b      	ldr	r3, [r7, #4]
 804562c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8045630:	7bfb      	ldrb	r3, [r7, #15]
 8045632:	7b7a      	ldrb	r2, [r7, #13]
 8045634:	4909      	ldr	r1, [pc, #36]	; (804565c <UARTEx_SetNbDataToProcess+0x94>)
 8045636:	5c8a      	ldrb	r2, [r1, r2]
 8045638:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 804563c:	7b7a      	ldrb	r2, [r7, #13]
 804563e:	4908      	ldr	r1, [pc, #32]	; (8045660 <UARTEx_SetNbDataToProcess+0x98>)
 8045640:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8045642:	fb93 f3f2 	sdiv	r3, r3, r2
 8045646:	b29a      	uxth	r2, r3
 8045648:	687b      	ldr	r3, [r7, #4]
 804564a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 804564e:	bf00      	nop
 8045650:	3714      	adds	r7, #20
 8045652:	46bd      	mov	sp, r7
 8045654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045658:	4770      	bx	lr
 804565a:	bf00      	nop
 804565c:	0804674c 	.word	0x0804674c
 8045660:	08046754 	.word	0x08046754

08045664 <__errno>:
 8045664:	4b01      	ldr	r3, [pc, #4]	; (804566c <__errno+0x8>)
 8045666:	6818      	ldr	r0, [r3, #0]
 8045668:	4770      	bx	lr
 804566a:	bf00      	nop
 804566c:	24000010 	.word	0x24000010

08045670 <__libc_init_array>:
 8045670:	b570      	push	{r4, r5, r6, lr}
 8045672:	4d0d      	ldr	r5, [pc, #52]	; (80456a8 <__libc_init_array+0x38>)
 8045674:	4c0d      	ldr	r4, [pc, #52]	; (80456ac <__libc_init_array+0x3c>)
 8045676:	1b64      	subs	r4, r4, r5
 8045678:	10a4      	asrs	r4, r4, #2
 804567a:	2600      	movs	r6, #0
 804567c:	42a6      	cmp	r6, r4
 804567e:	d109      	bne.n	8045694 <__libc_init_array+0x24>
 8045680:	4d0b      	ldr	r5, [pc, #44]	; (80456b0 <__libc_init_array+0x40>)
 8045682:	4c0c      	ldr	r4, [pc, #48]	; (80456b4 <__libc_init_array+0x44>)
 8045684:	f001 f824 	bl	80466d0 <_init>
 8045688:	1b64      	subs	r4, r4, r5
 804568a:	10a4      	asrs	r4, r4, #2
 804568c:	2600      	movs	r6, #0
 804568e:	42a6      	cmp	r6, r4
 8045690:	d105      	bne.n	804569e <__libc_init_array+0x2e>
 8045692:	bd70      	pop	{r4, r5, r6, pc}
 8045694:	f855 3b04 	ldr.w	r3, [r5], #4
 8045698:	4798      	blx	r3
 804569a:	3601      	adds	r6, #1
 804569c:	e7ee      	b.n	804567c <__libc_init_array+0xc>
 804569e:	f855 3b04 	ldr.w	r3, [r5], #4
 80456a2:	4798      	blx	r3
 80456a4:	3601      	adds	r6, #1
 80456a6:	e7f2      	b.n	804568e <__libc_init_array+0x1e>
 80456a8:	080467fc 	.word	0x080467fc
 80456ac:	080467fc 	.word	0x080467fc
 80456b0:	080467fc 	.word	0x080467fc
 80456b4:	08046800 	.word	0x08046800

080456b8 <memset>:
 80456b8:	4402      	add	r2, r0
 80456ba:	4603      	mov	r3, r0
 80456bc:	4293      	cmp	r3, r2
 80456be:	d100      	bne.n	80456c2 <memset+0xa>
 80456c0:	4770      	bx	lr
 80456c2:	f803 1b01 	strb.w	r1, [r3], #1
 80456c6:	e7f9      	b.n	80456bc <memset+0x4>

080456c8 <iprintf>:
 80456c8:	b40f      	push	{r0, r1, r2, r3}
 80456ca:	4b0a      	ldr	r3, [pc, #40]	; (80456f4 <iprintf+0x2c>)
 80456cc:	b513      	push	{r0, r1, r4, lr}
 80456ce:	681c      	ldr	r4, [r3, #0]
 80456d0:	b124      	cbz	r4, 80456dc <iprintf+0x14>
 80456d2:	69a3      	ldr	r3, [r4, #24]
 80456d4:	b913      	cbnz	r3, 80456dc <iprintf+0x14>
 80456d6:	4620      	mov	r0, r4
 80456d8:	f000 fa5e 	bl	8045b98 <__sinit>
 80456dc:	ab05      	add	r3, sp, #20
 80456de:	9a04      	ldr	r2, [sp, #16]
 80456e0:	68a1      	ldr	r1, [r4, #8]
 80456e2:	9301      	str	r3, [sp, #4]
 80456e4:	4620      	mov	r0, r4
 80456e6:	f000 fc67 	bl	8045fb8 <_vfiprintf_r>
 80456ea:	b002      	add	sp, #8
 80456ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80456f0:	b004      	add	sp, #16
 80456f2:	4770      	bx	lr
 80456f4:	24000010 	.word	0x24000010

080456f8 <_puts_r>:
 80456f8:	b570      	push	{r4, r5, r6, lr}
 80456fa:	460e      	mov	r6, r1
 80456fc:	4605      	mov	r5, r0
 80456fe:	b118      	cbz	r0, 8045708 <_puts_r+0x10>
 8045700:	6983      	ldr	r3, [r0, #24]
 8045702:	b90b      	cbnz	r3, 8045708 <_puts_r+0x10>
 8045704:	f000 fa48 	bl	8045b98 <__sinit>
 8045708:	69ab      	ldr	r3, [r5, #24]
 804570a:	68ac      	ldr	r4, [r5, #8]
 804570c:	b913      	cbnz	r3, 8045714 <_puts_r+0x1c>
 804570e:	4628      	mov	r0, r5
 8045710:	f000 fa42 	bl	8045b98 <__sinit>
 8045714:	4b2c      	ldr	r3, [pc, #176]	; (80457c8 <_puts_r+0xd0>)
 8045716:	429c      	cmp	r4, r3
 8045718:	d120      	bne.n	804575c <_puts_r+0x64>
 804571a:	686c      	ldr	r4, [r5, #4]
 804571c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804571e:	07db      	lsls	r3, r3, #31
 8045720:	d405      	bmi.n	804572e <_puts_r+0x36>
 8045722:	89a3      	ldrh	r3, [r4, #12]
 8045724:	0598      	lsls	r0, r3, #22
 8045726:	d402      	bmi.n	804572e <_puts_r+0x36>
 8045728:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804572a:	f000 fad3 	bl	8045cd4 <__retarget_lock_acquire_recursive>
 804572e:	89a3      	ldrh	r3, [r4, #12]
 8045730:	0719      	lsls	r1, r3, #28
 8045732:	d51d      	bpl.n	8045770 <_puts_r+0x78>
 8045734:	6923      	ldr	r3, [r4, #16]
 8045736:	b1db      	cbz	r3, 8045770 <_puts_r+0x78>
 8045738:	3e01      	subs	r6, #1
 804573a:	68a3      	ldr	r3, [r4, #8]
 804573c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8045740:	3b01      	subs	r3, #1
 8045742:	60a3      	str	r3, [r4, #8]
 8045744:	bb39      	cbnz	r1, 8045796 <_puts_r+0x9e>
 8045746:	2b00      	cmp	r3, #0
 8045748:	da38      	bge.n	80457bc <_puts_r+0xc4>
 804574a:	4622      	mov	r2, r4
 804574c:	210a      	movs	r1, #10
 804574e:	4628      	mov	r0, r5
 8045750:	f000 f848 	bl	80457e4 <__swbuf_r>
 8045754:	3001      	adds	r0, #1
 8045756:	d011      	beq.n	804577c <_puts_r+0x84>
 8045758:	250a      	movs	r5, #10
 804575a:	e011      	b.n	8045780 <_puts_r+0x88>
 804575c:	4b1b      	ldr	r3, [pc, #108]	; (80457cc <_puts_r+0xd4>)
 804575e:	429c      	cmp	r4, r3
 8045760:	d101      	bne.n	8045766 <_puts_r+0x6e>
 8045762:	68ac      	ldr	r4, [r5, #8]
 8045764:	e7da      	b.n	804571c <_puts_r+0x24>
 8045766:	4b1a      	ldr	r3, [pc, #104]	; (80457d0 <_puts_r+0xd8>)
 8045768:	429c      	cmp	r4, r3
 804576a:	bf08      	it	eq
 804576c:	68ec      	ldreq	r4, [r5, #12]
 804576e:	e7d5      	b.n	804571c <_puts_r+0x24>
 8045770:	4621      	mov	r1, r4
 8045772:	4628      	mov	r0, r5
 8045774:	f000 f888 	bl	8045888 <__swsetup_r>
 8045778:	2800      	cmp	r0, #0
 804577a:	d0dd      	beq.n	8045738 <_puts_r+0x40>
 804577c:	f04f 35ff 	mov.w	r5, #4294967295
 8045780:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8045782:	07da      	lsls	r2, r3, #31
 8045784:	d405      	bmi.n	8045792 <_puts_r+0x9a>
 8045786:	89a3      	ldrh	r3, [r4, #12]
 8045788:	059b      	lsls	r3, r3, #22
 804578a:	d402      	bmi.n	8045792 <_puts_r+0x9a>
 804578c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804578e:	f000 faa2 	bl	8045cd6 <__retarget_lock_release_recursive>
 8045792:	4628      	mov	r0, r5
 8045794:	bd70      	pop	{r4, r5, r6, pc}
 8045796:	2b00      	cmp	r3, #0
 8045798:	da04      	bge.n	80457a4 <_puts_r+0xac>
 804579a:	69a2      	ldr	r2, [r4, #24]
 804579c:	429a      	cmp	r2, r3
 804579e:	dc06      	bgt.n	80457ae <_puts_r+0xb6>
 80457a0:	290a      	cmp	r1, #10
 80457a2:	d004      	beq.n	80457ae <_puts_r+0xb6>
 80457a4:	6823      	ldr	r3, [r4, #0]
 80457a6:	1c5a      	adds	r2, r3, #1
 80457a8:	6022      	str	r2, [r4, #0]
 80457aa:	7019      	strb	r1, [r3, #0]
 80457ac:	e7c5      	b.n	804573a <_puts_r+0x42>
 80457ae:	4622      	mov	r2, r4
 80457b0:	4628      	mov	r0, r5
 80457b2:	f000 f817 	bl	80457e4 <__swbuf_r>
 80457b6:	3001      	adds	r0, #1
 80457b8:	d1bf      	bne.n	804573a <_puts_r+0x42>
 80457ba:	e7df      	b.n	804577c <_puts_r+0x84>
 80457bc:	6823      	ldr	r3, [r4, #0]
 80457be:	250a      	movs	r5, #10
 80457c0:	1c5a      	adds	r2, r3, #1
 80457c2:	6022      	str	r2, [r4, #0]
 80457c4:	701d      	strb	r5, [r3, #0]
 80457c6:	e7db      	b.n	8045780 <_puts_r+0x88>
 80457c8:	08046780 	.word	0x08046780
 80457cc:	080467a0 	.word	0x080467a0
 80457d0:	08046760 	.word	0x08046760

080457d4 <puts>:
 80457d4:	4b02      	ldr	r3, [pc, #8]	; (80457e0 <puts+0xc>)
 80457d6:	4601      	mov	r1, r0
 80457d8:	6818      	ldr	r0, [r3, #0]
 80457da:	f7ff bf8d 	b.w	80456f8 <_puts_r>
 80457de:	bf00      	nop
 80457e0:	24000010 	.word	0x24000010

080457e4 <__swbuf_r>:
 80457e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80457e6:	460e      	mov	r6, r1
 80457e8:	4614      	mov	r4, r2
 80457ea:	4605      	mov	r5, r0
 80457ec:	b118      	cbz	r0, 80457f6 <__swbuf_r+0x12>
 80457ee:	6983      	ldr	r3, [r0, #24]
 80457f0:	b90b      	cbnz	r3, 80457f6 <__swbuf_r+0x12>
 80457f2:	f000 f9d1 	bl	8045b98 <__sinit>
 80457f6:	4b21      	ldr	r3, [pc, #132]	; (804587c <__swbuf_r+0x98>)
 80457f8:	429c      	cmp	r4, r3
 80457fa:	d12b      	bne.n	8045854 <__swbuf_r+0x70>
 80457fc:	686c      	ldr	r4, [r5, #4]
 80457fe:	69a3      	ldr	r3, [r4, #24]
 8045800:	60a3      	str	r3, [r4, #8]
 8045802:	89a3      	ldrh	r3, [r4, #12]
 8045804:	071a      	lsls	r2, r3, #28
 8045806:	d52f      	bpl.n	8045868 <__swbuf_r+0x84>
 8045808:	6923      	ldr	r3, [r4, #16]
 804580a:	b36b      	cbz	r3, 8045868 <__swbuf_r+0x84>
 804580c:	6923      	ldr	r3, [r4, #16]
 804580e:	6820      	ldr	r0, [r4, #0]
 8045810:	1ac0      	subs	r0, r0, r3
 8045812:	6963      	ldr	r3, [r4, #20]
 8045814:	b2f6      	uxtb	r6, r6
 8045816:	4283      	cmp	r3, r0
 8045818:	4637      	mov	r7, r6
 804581a:	dc04      	bgt.n	8045826 <__swbuf_r+0x42>
 804581c:	4621      	mov	r1, r4
 804581e:	4628      	mov	r0, r5
 8045820:	f000 f926 	bl	8045a70 <_fflush_r>
 8045824:	bb30      	cbnz	r0, 8045874 <__swbuf_r+0x90>
 8045826:	68a3      	ldr	r3, [r4, #8]
 8045828:	3b01      	subs	r3, #1
 804582a:	60a3      	str	r3, [r4, #8]
 804582c:	6823      	ldr	r3, [r4, #0]
 804582e:	1c5a      	adds	r2, r3, #1
 8045830:	6022      	str	r2, [r4, #0]
 8045832:	701e      	strb	r6, [r3, #0]
 8045834:	6963      	ldr	r3, [r4, #20]
 8045836:	3001      	adds	r0, #1
 8045838:	4283      	cmp	r3, r0
 804583a:	d004      	beq.n	8045846 <__swbuf_r+0x62>
 804583c:	89a3      	ldrh	r3, [r4, #12]
 804583e:	07db      	lsls	r3, r3, #31
 8045840:	d506      	bpl.n	8045850 <__swbuf_r+0x6c>
 8045842:	2e0a      	cmp	r6, #10
 8045844:	d104      	bne.n	8045850 <__swbuf_r+0x6c>
 8045846:	4621      	mov	r1, r4
 8045848:	4628      	mov	r0, r5
 804584a:	f000 f911 	bl	8045a70 <_fflush_r>
 804584e:	b988      	cbnz	r0, 8045874 <__swbuf_r+0x90>
 8045850:	4638      	mov	r0, r7
 8045852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8045854:	4b0a      	ldr	r3, [pc, #40]	; (8045880 <__swbuf_r+0x9c>)
 8045856:	429c      	cmp	r4, r3
 8045858:	d101      	bne.n	804585e <__swbuf_r+0x7a>
 804585a:	68ac      	ldr	r4, [r5, #8]
 804585c:	e7cf      	b.n	80457fe <__swbuf_r+0x1a>
 804585e:	4b09      	ldr	r3, [pc, #36]	; (8045884 <__swbuf_r+0xa0>)
 8045860:	429c      	cmp	r4, r3
 8045862:	bf08      	it	eq
 8045864:	68ec      	ldreq	r4, [r5, #12]
 8045866:	e7ca      	b.n	80457fe <__swbuf_r+0x1a>
 8045868:	4621      	mov	r1, r4
 804586a:	4628      	mov	r0, r5
 804586c:	f000 f80c 	bl	8045888 <__swsetup_r>
 8045870:	2800      	cmp	r0, #0
 8045872:	d0cb      	beq.n	804580c <__swbuf_r+0x28>
 8045874:	f04f 37ff 	mov.w	r7, #4294967295
 8045878:	e7ea      	b.n	8045850 <__swbuf_r+0x6c>
 804587a:	bf00      	nop
 804587c:	08046780 	.word	0x08046780
 8045880:	080467a0 	.word	0x080467a0
 8045884:	08046760 	.word	0x08046760

08045888 <__swsetup_r>:
 8045888:	4b32      	ldr	r3, [pc, #200]	; (8045954 <__swsetup_r+0xcc>)
 804588a:	b570      	push	{r4, r5, r6, lr}
 804588c:	681d      	ldr	r5, [r3, #0]
 804588e:	4606      	mov	r6, r0
 8045890:	460c      	mov	r4, r1
 8045892:	b125      	cbz	r5, 804589e <__swsetup_r+0x16>
 8045894:	69ab      	ldr	r3, [r5, #24]
 8045896:	b913      	cbnz	r3, 804589e <__swsetup_r+0x16>
 8045898:	4628      	mov	r0, r5
 804589a:	f000 f97d 	bl	8045b98 <__sinit>
 804589e:	4b2e      	ldr	r3, [pc, #184]	; (8045958 <__swsetup_r+0xd0>)
 80458a0:	429c      	cmp	r4, r3
 80458a2:	d10f      	bne.n	80458c4 <__swsetup_r+0x3c>
 80458a4:	686c      	ldr	r4, [r5, #4]
 80458a6:	89a3      	ldrh	r3, [r4, #12]
 80458a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80458ac:	0719      	lsls	r1, r3, #28
 80458ae:	d42c      	bmi.n	804590a <__swsetup_r+0x82>
 80458b0:	06dd      	lsls	r5, r3, #27
 80458b2:	d411      	bmi.n	80458d8 <__swsetup_r+0x50>
 80458b4:	2309      	movs	r3, #9
 80458b6:	6033      	str	r3, [r6, #0]
 80458b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80458bc:	81a3      	strh	r3, [r4, #12]
 80458be:	f04f 30ff 	mov.w	r0, #4294967295
 80458c2:	e03e      	b.n	8045942 <__swsetup_r+0xba>
 80458c4:	4b25      	ldr	r3, [pc, #148]	; (804595c <__swsetup_r+0xd4>)
 80458c6:	429c      	cmp	r4, r3
 80458c8:	d101      	bne.n	80458ce <__swsetup_r+0x46>
 80458ca:	68ac      	ldr	r4, [r5, #8]
 80458cc:	e7eb      	b.n	80458a6 <__swsetup_r+0x1e>
 80458ce:	4b24      	ldr	r3, [pc, #144]	; (8045960 <__swsetup_r+0xd8>)
 80458d0:	429c      	cmp	r4, r3
 80458d2:	bf08      	it	eq
 80458d4:	68ec      	ldreq	r4, [r5, #12]
 80458d6:	e7e6      	b.n	80458a6 <__swsetup_r+0x1e>
 80458d8:	0758      	lsls	r0, r3, #29
 80458da:	d512      	bpl.n	8045902 <__swsetup_r+0x7a>
 80458dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80458de:	b141      	cbz	r1, 80458f2 <__swsetup_r+0x6a>
 80458e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80458e4:	4299      	cmp	r1, r3
 80458e6:	d002      	beq.n	80458ee <__swsetup_r+0x66>
 80458e8:	4630      	mov	r0, r6
 80458ea:	f000 fa5b 	bl	8045da4 <_free_r>
 80458ee:	2300      	movs	r3, #0
 80458f0:	6363      	str	r3, [r4, #52]	; 0x34
 80458f2:	89a3      	ldrh	r3, [r4, #12]
 80458f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80458f8:	81a3      	strh	r3, [r4, #12]
 80458fa:	2300      	movs	r3, #0
 80458fc:	6063      	str	r3, [r4, #4]
 80458fe:	6923      	ldr	r3, [r4, #16]
 8045900:	6023      	str	r3, [r4, #0]
 8045902:	89a3      	ldrh	r3, [r4, #12]
 8045904:	f043 0308 	orr.w	r3, r3, #8
 8045908:	81a3      	strh	r3, [r4, #12]
 804590a:	6923      	ldr	r3, [r4, #16]
 804590c:	b94b      	cbnz	r3, 8045922 <__swsetup_r+0x9a>
 804590e:	89a3      	ldrh	r3, [r4, #12]
 8045910:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8045914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8045918:	d003      	beq.n	8045922 <__swsetup_r+0x9a>
 804591a:	4621      	mov	r1, r4
 804591c:	4630      	mov	r0, r6
 804591e:	f000 fa01 	bl	8045d24 <__smakebuf_r>
 8045922:	89a0      	ldrh	r0, [r4, #12]
 8045924:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8045928:	f010 0301 	ands.w	r3, r0, #1
 804592c:	d00a      	beq.n	8045944 <__swsetup_r+0xbc>
 804592e:	2300      	movs	r3, #0
 8045930:	60a3      	str	r3, [r4, #8]
 8045932:	6963      	ldr	r3, [r4, #20]
 8045934:	425b      	negs	r3, r3
 8045936:	61a3      	str	r3, [r4, #24]
 8045938:	6923      	ldr	r3, [r4, #16]
 804593a:	b943      	cbnz	r3, 804594e <__swsetup_r+0xc6>
 804593c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8045940:	d1ba      	bne.n	80458b8 <__swsetup_r+0x30>
 8045942:	bd70      	pop	{r4, r5, r6, pc}
 8045944:	0781      	lsls	r1, r0, #30
 8045946:	bf58      	it	pl
 8045948:	6963      	ldrpl	r3, [r4, #20]
 804594a:	60a3      	str	r3, [r4, #8]
 804594c:	e7f4      	b.n	8045938 <__swsetup_r+0xb0>
 804594e:	2000      	movs	r0, #0
 8045950:	e7f7      	b.n	8045942 <__swsetup_r+0xba>
 8045952:	bf00      	nop
 8045954:	24000010 	.word	0x24000010
 8045958:	08046780 	.word	0x08046780
 804595c:	080467a0 	.word	0x080467a0
 8045960:	08046760 	.word	0x08046760

08045964 <__sflush_r>:
 8045964:	898a      	ldrh	r2, [r1, #12]
 8045966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804596a:	4605      	mov	r5, r0
 804596c:	0710      	lsls	r0, r2, #28
 804596e:	460c      	mov	r4, r1
 8045970:	d458      	bmi.n	8045a24 <__sflush_r+0xc0>
 8045972:	684b      	ldr	r3, [r1, #4]
 8045974:	2b00      	cmp	r3, #0
 8045976:	dc05      	bgt.n	8045984 <__sflush_r+0x20>
 8045978:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 804597a:	2b00      	cmp	r3, #0
 804597c:	dc02      	bgt.n	8045984 <__sflush_r+0x20>
 804597e:	2000      	movs	r0, #0
 8045980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8045984:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8045986:	2e00      	cmp	r6, #0
 8045988:	d0f9      	beq.n	804597e <__sflush_r+0x1a>
 804598a:	2300      	movs	r3, #0
 804598c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8045990:	682f      	ldr	r7, [r5, #0]
 8045992:	602b      	str	r3, [r5, #0]
 8045994:	d032      	beq.n	80459fc <__sflush_r+0x98>
 8045996:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8045998:	89a3      	ldrh	r3, [r4, #12]
 804599a:	075a      	lsls	r2, r3, #29
 804599c:	d505      	bpl.n	80459aa <__sflush_r+0x46>
 804599e:	6863      	ldr	r3, [r4, #4]
 80459a0:	1ac0      	subs	r0, r0, r3
 80459a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80459a4:	b10b      	cbz	r3, 80459aa <__sflush_r+0x46>
 80459a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80459a8:	1ac0      	subs	r0, r0, r3
 80459aa:	2300      	movs	r3, #0
 80459ac:	4602      	mov	r2, r0
 80459ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80459b0:	6a21      	ldr	r1, [r4, #32]
 80459b2:	4628      	mov	r0, r5
 80459b4:	47b0      	blx	r6
 80459b6:	1c43      	adds	r3, r0, #1
 80459b8:	89a3      	ldrh	r3, [r4, #12]
 80459ba:	d106      	bne.n	80459ca <__sflush_r+0x66>
 80459bc:	6829      	ldr	r1, [r5, #0]
 80459be:	291d      	cmp	r1, #29
 80459c0:	d82c      	bhi.n	8045a1c <__sflush_r+0xb8>
 80459c2:	4a2a      	ldr	r2, [pc, #168]	; (8045a6c <__sflush_r+0x108>)
 80459c4:	40ca      	lsrs	r2, r1
 80459c6:	07d6      	lsls	r6, r2, #31
 80459c8:	d528      	bpl.n	8045a1c <__sflush_r+0xb8>
 80459ca:	2200      	movs	r2, #0
 80459cc:	6062      	str	r2, [r4, #4]
 80459ce:	04d9      	lsls	r1, r3, #19
 80459d0:	6922      	ldr	r2, [r4, #16]
 80459d2:	6022      	str	r2, [r4, #0]
 80459d4:	d504      	bpl.n	80459e0 <__sflush_r+0x7c>
 80459d6:	1c42      	adds	r2, r0, #1
 80459d8:	d101      	bne.n	80459de <__sflush_r+0x7a>
 80459da:	682b      	ldr	r3, [r5, #0]
 80459dc:	b903      	cbnz	r3, 80459e0 <__sflush_r+0x7c>
 80459de:	6560      	str	r0, [r4, #84]	; 0x54
 80459e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80459e2:	602f      	str	r7, [r5, #0]
 80459e4:	2900      	cmp	r1, #0
 80459e6:	d0ca      	beq.n	804597e <__sflush_r+0x1a>
 80459e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80459ec:	4299      	cmp	r1, r3
 80459ee:	d002      	beq.n	80459f6 <__sflush_r+0x92>
 80459f0:	4628      	mov	r0, r5
 80459f2:	f000 f9d7 	bl	8045da4 <_free_r>
 80459f6:	2000      	movs	r0, #0
 80459f8:	6360      	str	r0, [r4, #52]	; 0x34
 80459fa:	e7c1      	b.n	8045980 <__sflush_r+0x1c>
 80459fc:	6a21      	ldr	r1, [r4, #32]
 80459fe:	2301      	movs	r3, #1
 8045a00:	4628      	mov	r0, r5
 8045a02:	47b0      	blx	r6
 8045a04:	1c41      	adds	r1, r0, #1
 8045a06:	d1c7      	bne.n	8045998 <__sflush_r+0x34>
 8045a08:	682b      	ldr	r3, [r5, #0]
 8045a0a:	2b00      	cmp	r3, #0
 8045a0c:	d0c4      	beq.n	8045998 <__sflush_r+0x34>
 8045a0e:	2b1d      	cmp	r3, #29
 8045a10:	d001      	beq.n	8045a16 <__sflush_r+0xb2>
 8045a12:	2b16      	cmp	r3, #22
 8045a14:	d101      	bne.n	8045a1a <__sflush_r+0xb6>
 8045a16:	602f      	str	r7, [r5, #0]
 8045a18:	e7b1      	b.n	804597e <__sflush_r+0x1a>
 8045a1a:	89a3      	ldrh	r3, [r4, #12]
 8045a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8045a20:	81a3      	strh	r3, [r4, #12]
 8045a22:	e7ad      	b.n	8045980 <__sflush_r+0x1c>
 8045a24:	690f      	ldr	r7, [r1, #16]
 8045a26:	2f00      	cmp	r7, #0
 8045a28:	d0a9      	beq.n	804597e <__sflush_r+0x1a>
 8045a2a:	0793      	lsls	r3, r2, #30
 8045a2c:	680e      	ldr	r6, [r1, #0]
 8045a2e:	bf08      	it	eq
 8045a30:	694b      	ldreq	r3, [r1, #20]
 8045a32:	600f      	str	r7, [r1, #0]
 8045a34:	bf18      	it	ne
 8045a36:	2300      	movne	r3, #0
 8045a38:	eba6 0807 	sub.w	r8, r6, r7
 8045a3c:	608b      	str	r3, [r1, #8]
 8045a3e:	f1b8 0f00 	cmp.w	r8, #0
 8045a42:	dd9c      	ble.n	804597e <__sflush_r+0x1a>
 8045a44:	6a21      	ldr	r1, [r4, #32]
 8045a46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8045a48:	4643      	mov	r3, r8
 8045a4a:	463a      	mov	r2, r7
 8045a4c:	4628      	mov	r0, r5
 8045a4e:	47b0      	blx	r6
 8045a50:	2800      	cmp	r0, #0
 8045a52:	dc06      	bgt.n	8045a62 <__sflush_r+0xfe>
 8045a54:	89a3      	ldrh	r3, [r4, #12]
 8045a56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8045a5a:	81a3      	strh	r3, [r4, #12]
 8045a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8045a60:	e78e      	b.n	8045980 <__sflush_r+0x1c>
 8045a62:	4407      	add	r7, r0
 8045a64:	eba8 0800 	sub.w	r8, r8, r0
 8045a68:	e7e9      	b.n	8045a3e <__sflush_r+0xda>
 8045a6a:	bf00      	nop
 8045a6c:	20400001 	.word	0x20400001

08045a70 <_fflush_r>:
 8045a70:	b538      	push	{r3, r4, r5, lr}
 8045a72:	690b      	ldr	r3, [r1, #16]
 8045a74:	4605      	mov	r5, r0
 8045a76:	460c      	mov	r4, r1
 8045a78:	b913      	cbnz	r3, 8045a80 <_fflush_r+0x10>
 8045a7a:	2500      	movs	r5, #0
 8045a7c:	4628      	mov	r0, r5
 8045a7e:	bd38      	pop	{r3, r4, r5, pc}
 8045a80:	b118      	cbz	r0, 8045a8a <_fflush_r+0x1a>
 8045a82:	6983      	ldr	r3, [r0, #24]
 8045a84:	b90b      	cbnz	r3, 8045a8a <_fflush_r+0x1a>
 8045a86:	f000 f887 	bl	8045b98 <__sinit>
 8045a8a:	4b14      	ldr	r3, [pc, #80]	; (8045adc <_fflush_r+0x6c>)
 8045a8c:	429c      	cmp	r4, r3
 8045a8e:	d11b      	bne.n	8045ac8 <_fflush_r+0x58>
 8045a90:	686c      	ldr	r4, [r5, #4]
 8045a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8045a96:	2b00      	cmp	r3, #0
 8045a98:	d0ef      	beq.n	8045a7a <_fflush_r+0xa>
 8045a9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8045a9c:	07d0      	lsls	r0, r2, #31
 8045a9e:	d404      	bmi.n	8045aaa <_fflush_r+0x3a>
 8045aa0:	0599      	lsls	r1, r3, #22
 8045aa2:	d402      	bmi.n	8045aaa <_fflush_r+0x3a>
 8045aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8045aa6:	f000 f915 	bl	8045cd4 <__retarget_lock_acquire_recursive>
 8045aaa:	4628      	mov	r0, r5
 8045aac:	4621      	mov	r1, r4
 8045aae:	f7ff ff59 	bl	8045964 <__sflush_r>
 8045ab2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8045ab4:	07da      	lsls	r2, r3, #31
 8045ab6:	4605      	mov	r5, r0
 8045ab8:	d4e0      	bmi.n	8045a7c <_fflush_r+0xc>
 8045aba:	89a3      	ldrh	r3, [r4, #12]
 8045abc:	059b      	lsls	r3, r3, #22
 8045abe:	d4dd      	bmi.n	8045a7c <_fflush_r+0xc>
 8045ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8045ac2:	f000 f908 	bl	8045cd6 <__retarget_lock_release_recursive>
 8045ac6:	e7d9      	b.n	8045a7c <_fflush_r+0xc>
 8045ac8:	4b05      	ldr	r3, [pc, #20]	; (8045ae0 <_fflush_r+0x70>)
 8045aca:	429c      	cmp	r4, r3
 8045acc:	d101      	bne.n	8045ad2 <_fflush_r+0x62>
 8045ace:	68ac      	ldr	r4, [r5, #8]
 8045ad0:	e7df      	b.n	8045a92 <_fflush_r+0x22>
 8045ad2:	4b04      	ldr	r3, [pc, #16]	; (8045ae4 <_fflush_r+0x74>)
 8045ad4:	429c      	cmp	r4, r3
 8045ad6:	bf08      	it	eq
 8045ad8:	68ec      	ldreq	r4, [r5, #12]
 8045ada:	e7da      	b.n	8045a92 <_fflush_r+0x22>
 8045adc:	08046780 	.word	0x08046780
 8045ae0:	080467a0 	.word	0x080467a0
 8045ae4:	08046760 	.word	0x08046760

08045ae8 <std>:
 8045ae8:	2300      	movs	r3, #0
 8045aea:	b510      	push	{r4, lr}
 8045aec:	4604      	mov	r4, r0
 8045aee:	e9c0 3300 	strd	r3, r3, [r0]
 8045af2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8045af6:	6083      	str	r3, [r0, #8]
 8045af8:	8181      	strh	r1, [r0, #12]
 8045afa:	6643      	str	r3, [r0, #100]	; 0x64
 8045afc:	81c2      	strh	r2, [r0, #14]
 8045afe:	6183      	str	r3, [r0, #24]
 8045b00:	4619      	mov	r1, r3
 8045b02:	2208      	movs	r2, #8
 8045b04:	305c      	adds	r0, #92	; 0x5c
 8045b06:	f7ff fdd7 	bl	80456b8 <memset>
 8045b0a:	4b05      	ldr	r3, [pc, #20]	; (8045b20 <std+0x38>)
 8045b0c:	6263      	str	r3, [r4, #36]	; 0x24
 8045b0e:	4b05      	ldr	r3, [pc, #20]	; (8045b24 <std+0x3c>)
 8045b10:	62a3      	str	r3, [r4, #40]	; 0x28
 8045b12:	4b05      	ldr	r3, [pc, #20]	; (8045b28 <std+0x40>)
 8045b14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8045b16:	4b05      	ldr	r3, [pc, #20]	; (8045b2c <std+0x44>)
 8045b18:	6224      	str	r4, [r4, #32]
 8045b1a:	6323      	str	r3, [r4, #48]	; 0x30
 8045b1c:	bd10      	pop	{r4, pc}
 8045b1e:	bf00      	nop
 8045b20:	08046561 	.word	0x08046561
 8045b24:	08046583 	.word	0x08046583
 8045b28:	080465bb 	.word	0x080465bb
 8045b2c:	080465df 	.word	0x080465df

08045b30 <_cleanup_r>:
 8045b30:	4901      	ldr	r1, [pc, #4]	; (8045b38 <_cleanup_r+0x8>)
 8045b32:	f000 b8af 	b.w	8045c94 <_fwalk_reent>
 8045b36:	bf00      	nop
 8045b38:	08045a71 	.word	0x08045a71

08045b3c <__sfmoreglue>:
 8045b3c:	b570      	push	{r4, r5, r6, lr}
 8045b3e:	2268      	movs	r2, #104	; 0x68
 8045b40:	1e4d      	subs	r5, r1, #1
 8045b42:	4355      	muls	r5, r2
 8045b44:	460e      	mov	r6, r1
 8045b46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8045b4a:	f000 f997 	bl	8045e7c <_malloc_r>
 8045b4e:	4604      	mov	r4, r0
 8045b50:	b140      	cbz	r0, 8045b64 <__sfmoreglue+0x28>
 8045b52:	2100      	movs	r1, #0
 8045b54:	e9c0 1600 	strd	r1, r6, [r0]
 8045b58:	300c      	adds	r0, #12
 8045b5a:	60a0      	str	r0, [r4, #8]
 8045b5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8045b60:	f7ff fdaa 	bl	80456b8 <memset>
 8045b64:	4620      	mov	r0, r4
 8045b66:	bd70      	pop	{r4, r5, r6, pc}

08045b68 <__sfp_lock_acquire>:
 8045b68:	4801      	ldr	r0, [pc, #4]	; (8045b70 <__sfp_lock_acquire+0x8>)
 8045b6a:	f000 b8b3 	b.w	8045cd4 <__retarget_lock_acquire_recursive>
 8045b6e:	bf00      	nop
 8045b70:	2400012d 	.word	0x2400012d

08045b74 <__sfp_lock_release>:
 8045b74:	4801      	ldr	r0, [pc, #4]	; (8045b7c <__sfp_lock_release+0x8>)
 8045b76:	f000 b8ae 	b.w	8045cd6 <__retarget_lock_release_recursive>
 8045b7a:	bf00      	nop
 8045b7c:	2400012d 	.word	0x2400012d

08045b80 <__sinit_lock_acquire>:
 8045b80:	4801      	ldr	r0, [pc, #4]	; (8045b88 <__sinit_lock_acquire+0x8>)
 8045b82:	f000 b8a7 	b.w	8045cd4 <__retarget_lock_acquire_recursive>
 8045b86:	bf00      	nop
 8045b88:	2400012e 	.word	0x2400012e

08045b8c <__sinit_lock_release>:
 8045b8c:	4801      	ldr	r0, [pc, #4]	; (8045b94 <__sinit_lock_release+0x8>)
 8045b8e:	f000 b8a2 	b.w	8045cd6 <__retarget_lock_release_recursive>
 8045b92:	bf00      	nop
 8045b94:	2400012e 	.word	0x2400012e

08045b98 <__sinit>:
 8045b98:	b510      	push	{r4, lr}
 8045b9a:	4604      	mov	r4, r0
 8045b9c:	f7ff fff0 	bl	8045b80 <__sinit_lock_acquire>
 8045ba0:	69a3      	ldr	r3, [r4, #24]
 8045ba2:	b11b      	cbz	r3, 8045bac <__sinit+0x14>
 8045ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8045ba8:	f7ff bff0 	b.w	8045b8c <__sinit_lock_release>
 8045bac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8045bb0:	6523      	str	r3, [r4, #80]	; 0x50
 8045bb2:	4b13      	ldr	r3, [pc, #76]	; (8045c00 <__sinit+0x68>)
 8045bb4:	4a13      	ldr	r2, [pc, #76]	; (8045c04 <__sinit+0x6c>)
 8045bb6:	681b      	ldr	r3, [r3, #0]
 8045bb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8045bba:	42a3      	cmp	r3, r4
 8045bbc:	bf04      	itt	eq
 8045bbe:	2301      	moveq	r3, #1
 8045bc0:	61a3      	streq	r3, [r4, #24]
 8045bc2:	4620      	mov	r0, r4
 8045bc4:	f000 f820 	bl	8045c08 <__sfp>
 8045bc8:	6060      	str	r0, [r4, #4]
 8045bca:	4620      	mov	r0, r4
 8045bcc:	f000 f81c 	bl	8045c08 <__sfp>
 8045bd0:	60a0      	str	r0, [r4, #8]
 8045bd2:	4620      	mov	r0, r4
 8045bd4:	f000 f818 	bl	8045c08 <__sfp>
 8045bd8:	2200      	movs	r2, #0
 8045bda:	60e0      	str	r0, [r4, #12]
 8045bdc:	2104      	movs	r1, #4
 8045bde:	6860      	ldr	r0, [r4, #4]
 8045be0:	f7ff ff82 	bl	8045ae8 <std>
 8045be4:	68a0      	ldr	r0, [r4, #8]
 8045be6:	2201      	movs	r2, #1
 8045be8:	2109      	movs	r1, #9
 8045bea:	f7ff ff7d 	bl	8045ae8 <std>
 8045bee:	68e0      	ldr	r0, [r4, #12]
 8045bf0:	2202      	movs	r2, #2
 8045bf2:	2112      	movs	r1, #18
 8045bf4:	f7ff ff78 	bl	8045ae8 <std>
 8045bf8:	2301      	movs	r3, #1
 8045bfa:	61a3      	str	r3, [r4, #24]
 8045bfc:	e7d2      	b.n	8045ba4 <__sinit+0xc>
 8045bfe:	bf00      	nop
 8045c00:	0804675c 	.word	0x0804675c
 8045c04:	08045b31 	.word	0x08045b31

08045c08 <__sfp>:
 8045c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8045c0a:	4607      	mov	r7, r0
 8045c0c:	f7ff ffac 	bl	8045b68 <__sfp_lock_acquire>
 8045c10:	4b1e      	ldr	r3, [pc, #120]	; (8045c8c <__sfp+0x84>)
 8045c12:	681e      	ldr	r6, [r3, #0]
 8045c14:	69b3      	ldr	r3, [r6, #24]
 8045c16:	b913      	cbnz	r3, 8045c1e <__sfp+0x16>
 8045c18:	4630      	mov	r0, r6
 8045c1a:	f7ff ffbd 	bl	8045b98 <__sinit>
 8045c1e:	3648      	adds	r6, #72	; 0x48
 8045c20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8045c24:	3b01      	subs	r3, #1
 8045c26:	d503      	bpl.n	8045c30 <__sfp+0x28>
 8045c28:	6833      	ldr	r3, [r6, #0]
 8045c2a:	b30b      	cbz	r3, 8045c70 <__sfp+0x68>
 8045c2c:	6836      	ldr	r6, [r6, #0]
 8045c2e:	e7f7      	b.n	8045c20 <__sfp+0x18>
 8045c30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8045c34:	b9d5      	cbnz	r5, 8045c6c <__sfp+0x64>
 8045c36:	4b16      	ldr	r3, [pc, #88]	; (8045c90 <__sfp+0x88>)
 8045c38:	60e3      	str	r3, [r4, #12]
 8045c3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8045c3e:	6665      	str	r5, [r4, #100]	; 0x64
 8045c40:	f000 f847 	bl	8045cd2 <__retarget_lock_init_recursive>
 8045c44:	f7ff ff96 	bl	8045b74 <__sfp_lock_release>
 8045c48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8045c4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8045c50:	6025      	str	r5, [r4, #0]
 8045c52:	61a5      	str	r5, [r4, #24]
 8045c54:	2208      	movs	r2, #8
 8045c56:	4629      	mov	r1, r5
 8045c58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8045c5c:	f7ff fd2c 	bl	80456b8 <memset>
 8045c60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8045c64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8045c68:	4620      	mov	r0, r4
 8045c6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8045c6c:	3468      	adds	r4, #104	; 0x68
 8045c6e:	e7d9      	b.n	8045c24 <__sfp+0x1c>
 8045c70:	2104      	movs	r1, #4
 8045c72:	4638      	mov	r0, r7
 8045c74:	f7ff ff62 	bl	8045b3c <__sfmoreglue>
 8045c78:	4604      	mov	r4, r0
 8045c7a:	6030      	str	r0, [r6, #0]
 8045c7c:	2800      	cmp	r0, #0
 8045c7e:	d1d5      	bne.n	8045c2c <__sfp+0x24>
 8045c80:	f7ff ff78 	bl	8045b74 <__sfp_lock_release>
 8045c84:	230c      	movs	r3, #12
 8045c86:	603b      	str	r3, [r7, #0]
 8045c88:	e7ee      	b.n	8045c68 <__sfp+0x60>
 8045c8a:	bf00      	nop
 8045c8c:	0804675c 	.word	0x0804675c
 8045c90:	ffff0001 	.word	0xffff0001

08045c94 <_fwalk_reent>:
 8045c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8045c98:	4606      	mov	r6, r0
 8045c9a:	4688      	mov	r8, r1
 8045c9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8045ca0:	2700      	movs	r7, #0
 8045ca2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8045ca6:	f1b9 0901 	subs.w	r9, r9, #1
 8045caa:	d505      	bpl.n	8045cb8 <_fwalk_reent+0x24>
 8045cac:	6824      	ldr	r4, [r4, #0]
 8045cae:	2c00      	cmp	r4, #0
 8045cb0:	d1f7      	bne.n	8045ca2 <_fwalk_reent+0xe>
 8045cb2:	4638      	mov	r0, r7
 8045cb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8045cb8:	89ab      	ldrh	r3, [r5, #12]
 8045cba:	2b01      	cmp	r3, #1
 8045cbc:	d907      	bls.n	8045cce <_fwalk_reent+0x3a>
 8045cbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8045cc2:	3301      	adds	r3, #1
 8045cc4:	d003      	beq.n	8045cce <_fwalk_reent+0x3a>
 8045cc6:	4629      	mov	r1, r5
 8045cc8:	4630      	mov	r0, r6
 8045cca:	47c0      	blx	r8
 8045ccc:	4307      	orrs	r7, r0
 8045cce:	3568      	adds	r5, #104	; 0x68
 8045cd0:	e7e9      	b.n	8045ca6 <_fwalk_reent+0x12>

08045cd2 <__retarget_lock_init_recursive>:
 8045cd2:	4770      	bx	lr

08045cd4 <__retarget_lock_acquire_recursive>:
 8045cd4:	4770      	bx	lr

08045cd6 <__retarget_lock_release_recursive>:
 8045cd6:	4770      	bx	lr

08045cd8 <__swhatbuf_r>:
 8045cd8:	b570      	push	{r4, r5, r6, lr}
 8045cda:	460e      	mov	r6, r1
 8045cdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8045ce0:	2900      	cmp	r1, #0
 8045ce2:	b096      	sub	sp, #88	; 0x58
 8045ce4:	4614      	mov	r4, r2
 8045ce6:	461d      	mov	r5, r3
 8045ce8:	da08      	bge.n	8045cfc <__swhatbuf_r+0x24>
 8045cea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8045cee:	2200      	movs	r2, #0
 8045cf0:	602a      	str	r2, [r5, #0]
 8045cf2:	061a      	lsls	r2, r3, #24
 8045cf4:	d410      	bmi.n	8045d18 <__swhatbuf_r+0x40>
 8045cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8045cfa:	e00e      	b.n	8045d1a <__swhatbuf_r+0x42>
 8045cfc:	466a      	mov	r2, sp
 8045cfe:	f000 fc95 	bl	804662c <_fstat_r>
 8045d02:	2800      	cmp	r0, #0
 8045d04:	dbf1      	blt.n	8045cea <__swhatbuf_r+0x12>
 8045d06:	9a01      	ldr	r2, [sp, #4]
 8045d08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8045d0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8045d10:	425a      	negs	r2, r3
 8045d12:	415a      	adcs	r2, r3
 8045d14:	602a      	str	r2, [r5, #0]
 8045d16:	e7ee      	b.n	8045cf6 <__swhatbuf_r+0x1e>
 8045d18:	2340      	movs	r3, #64	; 0x40
 8045d1a:	2000      	movs	r0, #0
 8045d1c:	6023      	str	r3, [r4, #0]
 8045d1e:	b016      	add	sp, #88	; 0x58
 8045d20:	bd70      	pop	{r4, r5, r6, pc}
	...

08045d24 <__smakebuf_r>:
 8045d24:	898b      	ldrh	r3, [r1, #12]
 8045d26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8045d28:	079d      	lsls	r5, r3, #30
 8045d2a:	4606      	mov	r6, r0
 8045d2c:	460c      	mov	r4, r1
 8045d2e:	d507      	bpl.n	8045d40 <__smakebuf_r+0x1c>
 8045d30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8045d34:	6023      	str	r3, [r4, #0]
 8045d36:	6123      	str	r3, [r4, #16]
 8045d38:	2301      	movs	r3, #1
 8045d3a:	6163      	str	r3, [r4, #20]
 8045d3c:	b002      	add	sp, #8
 8045d3e:	bd70      	pop	{r4, r5, r6, pc}
 8045d40:	ab01      	add	r3, sp, #4
 8045d42:	466a      	mov	r2, sp
 8045d44:	f7ff ffc8 	bl	8045cd8 <__swhatbuf_r>
 8045d48:	9900      	ldr	r1, [sp, #0]
 8045d4a:	4605      	mov	r5, r0
 8045d4c:	4630      	mov	r0, r6
 8045d4e:	f000 f895 	bl	8045e7c <_malloc_r>
 8045d52:	b948      	cbnz	r0, 8045d68 <__smakebuf_r+0x44>
 8045d54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8045d58:	059a      	lsls	r2, r3, #22
 8045d5a:	d4ef      	bmi.n	8045d3c <__smakebuf_r+0x18>
 8045d5c:	f023 0303 	bic.w	r3, r3, #3
 8045d60:	f043 0302 	orr.w	r3, r3, #2
 8045d64:	81a3      	strh	r3, [r4, #12]
 8045d66:	e7e3      	b.n	8045d30 <__smakebuf_r+0xc>
 8045d68:	4b0d      	ldr	r3, [pc, #52]	; (8045da0 <__smakebuf_r+0x7c>)
 8045d6a:	62b3      	str	r3, [r6, #40]	; 0x28
 8045d6c:	89a3      	ldrh	r3, [r4, #12]
 8045d6e:	6020      	str	r0, [r4, #0]
 8045d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8045d74:	81a3      	strh	r3, [r4, #12]
 8045d76:	9b00      	ldr	r3, [sp, #0]
 8045d78:	6163      	str	r3, [r4, #20]
 8045d7a:	9b01      	ldr	r3, [sp, #4]
 8045d7c:	6120      	str	r0, [r4, #16]
 8045d7e:	b15b      	cbz	r3, 8045d98 <__smakebuf_r+0x74>
 8045d80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8045d84:	4630      	mov	r0, r6
 8045d86:	f000 fc63 	bl	8046650 <_isatty_r>
 8045d8a:	b128      	cbz	r0, 8045d98 <__smakebuf_r+0x74>
 8045d8c:	89a3      	ldrh	r3, [r4, #12]
 8045d8e:	f023 0303 	bic.w	r3, r3, #3
 8045d92:	f043 0301 	orr.w	r3, r3, #1
 8045d96:	81a3      	strh	r3, [r4, #12]
 8045d98:	89a0      	ldrh	r0, [r4, #12]
 8045d9a:	4305      	orrs	r5, r0
 8045d9c:	81a5      	strh	r5, [r4, #12]
 8045d9e:	e7cd      	b.n	8045d3c <__smakebuf_r+0x18>
 8045da0:	08045b31 	.word	0x08045b31

08045da4 <_free_r>:
 8045da4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8045da6:	2900      	cmp	r1, #0
 8045da8:	d044      	beq.n	8045e34 <_free_r+0x90>
 8045daa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8045dae:	9001      	str	r0, [sp, #4]
 8045db0:	2b00      	cmp	r3, #0
 8045db2:	f1a1 0404 	sub.w	r4, r1, #4
 8045db6:	bfb8      	it	lt
 8045db8:	18e4      	addlt	r4, r4, r3
 8045dba:	f000 fc6b 	bl	8046694 <__malloc_lock>
 8045dbe:	4a1e      	ldr	r2, [pc, #120]	; (8045e38 <_free_r+0x94>)
 8045dc0:	9801      	ldr	r0, [sp, #4]
 8045dc2:	6813      	ldr	r3, [r2, #0]
 8045dc4:	b933      	cbnz	r3, 8045dd4 <_free_r+0x30>
 8045dc6:	6063      	str	r3, [r4, #4]
 8045dc8:	6014      	str	r4, [r2, #0]
 8045dca:	b003      	add	sp, #12
 8045dcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8045dd0:	f000 bc66 	b.w	80466a0 <__malloc_unlock>
 8045dd4:	42a3      	cmp	r3, r4
 8045dd6:	d908      	bls.n	8045dea <_free_r+0x46>
 8045dd8:	6825      	ldr	r5, [r4, #0]
 8045dda:	1961      	adds	r1, r4, r5
 8045ddc:	428b      	cmp	r3, r1
 8045dde:	bf01      	itttt	eq
 8045de0:	6819      	ldreq	r1, [r3, #0]
 8045de2:	685b      	ldreq	r3, [r3, #4]
 8045de4:	1949      	addeq	r1, r1, r5
 8045de6:	6021      	streq	r1, [r4, #0]
 8045de8:	e7ed      	b.n	8045dc6 <_free_r+0x22>
 8045dea:	461a      	mov	r2, r3
 8045dec:	685b      	ldr	r3, [r3, #4]
 8045dee:	b10b      	cbz	r3, 8045df4 <_free_r+0x50>
 8045df0:	42a3      	cmp	r3, r4
 8045df2:	d9fa      	bls.n	8045dea <_free_r+0x46>
 8045df4:	6811      	ldr	r1, [r2, #0]
 8045df6:	1855      	adds	r5, r2, r1
 8045df8:	42a5      	cmp	r5, r4
 8045dfa:	d10b      	bne.n	8045e14 <_free_r+0x70>
 8045dfc:	6824      	ldr	r4, [r4, #0]
 8045dfe:	4421      	add	r1, r4
 8045e00:	1854      	adds	r4, r2, r1
 8045e02:	42a3      	cmp	r3, r4
 8045e04:	6011      	str	r1, [r2, #0]
 8045e06:	d1e0      	bne.n	8045dca <_free_r+0x26>
 8045e08:	681c      	ldr	r4, [r3, #0]
 8045e0a:	685b      	ldr	r3, [r3, #4]
 8045e0c:	6053      	str	r3, [r2, #4]
 8045e0e:	4421      	add	r1, r4
 8045e10:	6011      	str	r1, [r2, #0]
 8045e12:	e7da      	b.n	8045dca <_free_r+0x26>
 8045e14:	d902      	bls.n	8045e1c <_free_r+0x78>
 8045e16:	230c      	movs	r3, #12
 8045e18:	6003      	str	r3, [r0, #0]
 8045e1a:	e7d6      	b.n	8045dca <_free_r+0x26>
 8045e1c:	6825      	ldr	r5, [r4, #0]
 8045e1e:	1961      	adds	r1, r4, r5
 8045e20:	428b      	cmp	r3, r1
 8045e22:	bf04      	itt	eq
 8045e24:	6819      	ldreq	r1, [r3, #0]
 8045e26:	685b      	ldreq	r3, [r3, #4]
 8045e28:	6063      	str	r3, [r4, #4]
 8045e2a:	bf04      	itt	eq
 8045e2c:	1949      	addeq	r1, r1, r5
 8045e2e:	6021      	streq	r1, [r4, #0]
 8045e30:	6054      	str	r4, [r2, #4]
 8045e32:	e7ca      	b.n	8045dca <_free_r+0x26>
 8045e34:	b003      	add	sp, #12
 8045e36:	bd30      	pop	{r4, r5, pc}
 8045e38:	24000130 	.word	0x24000130

08045e3c <sbrk_aligned>:
 8045e3c:	b570      	push	{r4, r5, r6, lr}
 8045e3e:	4e0e      	ldr	r6, [pc, #56]	; (8045e78 <sbrk_aligned+0x3c>)
 8045e40:	460c      	mov	r4, r1
 8045e42:	6831      	ldr	r1, [r6, #0]
 8045e44:	4605      	mov	r5, r0
 8045e46:	b911      	cbnz	r1, 8045e4e <sbrk_aligned+0x12>
 8045e48:	f000 fb7a 	bl	8046540 <_sbrk_r>
 8045e4c:	6030      	str	r0, [r6, #0]
 8045e4e:	4621      	mov	r1, r4
 8045e50:	4628      	mov	r0, r5
 8045e52:	f000 fb75 	bl	8046540 <_sbrk_r>
 8045e56:	1c43      	adds	r3, r0, #1
 8045e58:	d00a      	beq.n	8045e70 <sbrk_aligned+0x34>
 8045e5a:	1cc4      	adds	r4, r0, #3
 8045e5c:	f024 0403 	bic.w	r4, r4, #3
 8045e60:	42a0      	cmp	r0, r4
 8045e62:	d007      	beq.n	8045e74 <sbrk_aligned+0x38>
 8045e64:	1a21      	subs	r1, r4, r0
 8045e66:	4628      	mov	r0, r5
 8045e68:	f000 fb6a 	bl	8046540 <_sbrk_r>
 8045e6c:	3001      	adds	r0, #1
 8045e6e:	d101      	bne.n	8045e74 <sbrk_aligned+0x38>
 8045e70:	f04f 34ff 	mov.w	r4, #4294967295
 8045e74:	4620      	mov	r0, r4
 8045e76:	bd70      	pop	{r4, r5, r6, pc}
 8045e78:	24000134 	.word	0x24000134

08045e7c <_malloc_r>:
 8045e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8045e80:	1ccd      	adds	r5, r1, #3
 8045e82:	f025 0503 	bic.w	r5, r5, #3
 8045e86:	3508      	adds	r5, #8
 8045e88:	2d0c      	cmp	r5, #12
 8045e8a:	bf38      	it	cc
 8045e8c:	250c      	movcc	r5, #12
 8045e8e:	2d00      	cmp	r5, #0
 8045e90:	4607      	mov	r7, r0
 8045e92:	db01      	blt.n	8045e98 <_malloc_r+0x1c>
 8045e94:	42a9      	cmp	r1, r5
 8045e96:	d905      	bls.n	8045ea4 <_malloc_r+0x28>
 8045e98:	230c      	movs	r3, #12
 8045e9a:	603b      	str	r3, [r7, #0]
 8045e9c:	2600      	movs	r6, #0
 8045e9e:	4630      	mov	r0, r6
 8045ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8045ea4:	4e2e      	ldr	r6, [pc, #184]	; (8045f60 <_malloc_r+0xe4>)
 8045ea6:	f000 fbf5 	bl	8046694 <__malloc_lock>
 8045eaa:	6833      	ldr	r3, [r6, #0]
 8045eac:	461c      	mov	r4, r3
 8045eae:	bb34      	cbnz	r4, 8045efe <_malloc_r+0x82>
 8045eb0:	4629      	mov	r1, r5
 8045eb2:	4638      	mov	r0, r7
 8045eb4:	f7ff ffc2 	bl	8045e3c <sbrk_aligned>
 8045eb8:	1c43      	adds	r3, r0, #1
 8045eba:	4604      	mov	r4, r0
 8045ebc:	d14d      	bne.n	8045f5a <_malloc_r+0xde>
 8045ebe:	6834      	ldr	r4, [r6, #0]
 8045ec0:	4626      	mov	r6, r4
 8045ec2:	2e00      	cmp	r6, #0
 8045ec4:	d140      	bne.n	8045f48 <_malloc_r+0xcc>
 8045ec6:	6823      	ldr	r3, [r4, #0]
 8045ec8:	4631      	mov	r1, r6
 8045eca:	4638      	mov	r0, r7
 8045ecc:	eb04 0803 	add.w	r8, r4, r3
 8045ed0:	f000 fb36 	bl	8046540 <_sbrk_r>
 8045ed4:	4580      	cmp	r8, r0
 8045ed6:	d13a      	bne.n	8045f4e <_malloc_r+0xd2>
 8045ed8:	6821      	ldr	r1, [r4, #0]
 8045eda:	3503      	adds	r5, #3
 8045edc:	1a6d      	subs	r5, r5, r1
 8045ede:	f025 0503 	bic.w	r5, r5, #3
 8045ee2:	3508      	adds	r5, #8
 8045ee4:	2d0c      	cmp	r5, #12
 8045ee6:	bf38      	it	cc
 8045ee8:	250c      	movcc	r5, #12
 8045eea:	4629      	mov	r1, r5
 8045eec:	4638      	mov	r0, r7
 8045eee:	f7ff ffa5 	bl	8045e3c <sbrk_aligned>
 8045ef2:	3001      	adds	r0, #1
 8045ef4:	d02b      	beq.n	8045f4e <_malloc_r+0xd2>
 8045ef6:	6823      	ldr	r3, [r4, #0]
 8045ef8:	442b      	add	r3, r5
 8045efa:	6023      	str	r3, [r4, #0]
 8045efc:	e00e      	b.n	8045f1c <_malloc_r+0xa0>
 8045efe:	6822      	ldr	r2, [r4, #0]
 8045f00:	1b52      	subs	r2, r2, r5
 8045f02:	d41e      	bmi.n	8045f42 <_malloc_r+0xc6>
 8045f04:	2a0b      	cmp	r2, #11
 8045f06:	d916      	bls.n	8045f36 <_malloc_r+0xba>
 8045f08:	1961      	adds	r1, r4, r5
 8045f0a:	42a3      	cmp	r3, r4
 8045f0c:	6025      	str	r5, [r4, #0]
 8045f0e:	bf18      	it	ne
 8045f10:	6059      	strne	r1, [r3, #4]
 8045f12:	6863      	ldr	r3, [r4, #4]
 8045f14:	bf08      	it	eq
 8045f16:	6031      	streq	r1, [r6, #0]
 8045f18:	5162      	str	r2, [r4, r5]
 8045f1a:	604b      	str	r3, [r1, #4]
 8045f1c:	4638      	mov	r0, r7
 8045f1e:	f104 060b 	add.w	r6, r4, #11
 8045f22:	f000 fbbd 	bl	80466a0 <__malloc_unlock>
 8045f26:	f026 0607 	bic.w	r6, r6, #7
 8045f2a:	1d23      	adds	r3, r4, #4
 8045f2c:	1af2      	subs	r2, r6, r3
 8045f2e:	d0b6      	beq.n	8045e9e <_malloc_r+0x22>
 8045f30:	1b9b      	subs	r3, r3, r6
 8045f32:	50a3      	str	r3, [r4, r2]
 8045f34:	e7b3      	b.n	8045e9e <_malloc_r+0x22>
 8045f36:	6862      	ldr	r2, [r4, #4]
 8045f38:	42a3      	cmp	r3, r4
 8045f3a:	bf0c      	ite	eq
 8045f3c:	6032      	streq	r2, [r6, #0]
 8045f3e:	605a      	strne	r2, [r3, #4]
 8045f40:	e7ec      	b.n	8045f1c <_malloc_r+0xa0>
 8045f42:	4623      	mov	r3, r4
 8045f44:	6864      	ldr	r4, [r4, #4]
 8045f46:	e7b2      	b.n	8045eae <_malloc_r+0x32>
 8045f48:	4634      	mov	r4, r6
 8045f4a:	6876      	ldr	r6, [r6, #4]
 8045f4c:	e7b9      	b.n	8045ec2 <_malloc_r+0x46>
 8045f4e:	230c      	movs	r3, #12
 8045f50:	603b      	str	r3, [r7, #0]
 8045f52:	4638      	mov	r0, r7
 8045f54:	f000 fba4 	bl	80466a0 <__malloc_unlock>
 8045f58:	e7a1      	b.n	8045e9e <_malloc_r+0x22>
 8045f5a:	6025      	str	r5, [r4, #0]
 8045f5c:	e7de      	b.n	8045f1c <_malloc_r+0xa0>
 8045f5e:	bf00      	nop
 8045f60:	24000130 	.word	0x24000130

08045f64 <__sfputc_r>:
 8045f64:	6893      	ldr	r3, [r2, #8]
 8045f66:	3b01      	subs	r3, #1
 8045f68:	2b00      	cmp	r3, #0
 8045f6a:	b410      	push	{r4}
 8045f6c:	6093      	str	r3, [r2, #8]
 8045f6e:	da08      	bge.n	8045f82 <__sfputc_r+0x1e>
 8045f70:	6994      	ldr	r4, [r2, #24]
 8045f72:	42a3      	cmp	r3, r4
 8045f74:	db01      	blt.n	8045f7a <__sfputc_r+0x16>
 8045f76:	290a      	cmp	r1, #10
 8045f78:	d103      	bne.n	8045f82 <__sfputc_r+0x1e>
 8045f7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8045f7e:	f7ff bc31 	b.w	80457e4 <__swbuf_r>
 8045f82:	6813      	ldr	r3, [r2, #0]
 8045f84:	1c58      	adds	r0, r3, #1
 8045f86:	6010      	str	r0, [r2, #0]
 8045f88:	7019      	strb	r1, [r3, #0]
 8045f8a:	4608      	mov	r0, r1
 8045f8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8045f90:	4770      	bx	lr

08045f92 <__sfputs_r>:
 8045f92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8045f94:	4606      	mov	r6, r0
 8045f96:	460f      	mov	r7, r1
 8045f98:	4614      	mov	r4, r2
 8045f9a:	18d5      	adds	r5, r2, r3
 8045f9c:	42ac      	cmp	r4, r5
 8045f9e:	d101      	bne.n	8045fa4 <__sfputs_r+0x12>
 8045fa0:	2000      	movs	r0, #0
 8045fa2:	e007      	b.n	8045fb4 <__sfputs_r+0x22>
 8045fa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8045fa8:	463a      	mov	r2, r7
 8045faa:	4630      	mov	r0, r6
 8045fac:	f7ff ffda 	bl	8045f64 <__sfputc_r>
 8045fb0:	1c43      	adds	r3, r0, #1
 8045fb2:	d1f3      	bne.n	8045f9c <__sfputs_r+0xa>
 8045fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08045fb8 <_vfiprintf_r>:
 8045fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8045fbc:	460d      	mov	r5, r1
 8045fbe:	b09d      	sub	sp, #116	; 0x74
 8045fc0:	4614      	mov	r4, r2
 8045fc2:	4698      	mov	r8, r3
 8045fc4:	4606      	mov	r6, r0
 8045fc6:	b118      	cbz	r0, 8045fd0 <_vfiprintf_r+0x18>
 8045fc8:	6983      	ldr	r3, [r0, #24]
 8045fca:	b90b      	cbnz	r3, 8045fd0 <_vfiprintf_r+0x18>
 8045fcc:	f7ff fde4 	bl	8045b98 <__sinit>
 8045fd0:	4b89      	ldr	r3, [pc, #548]	; (80461f8 <_vfiprintf_r+0x240>)
 8045fd2:	429d      	cmp	r5, r3
 8045fd4:	d11b      	bne.n	804600e <_vfiprintf_r+0x56>
 8045fd6:	6875      	ldr	r5, [r6, #4]
 8045fd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8045fda:	07d9      	lsls	r1, r3, #31
 8045fdc:	d405      	bmi.n	8045fea <_vfiprintf_r+0x32>
 8045fde:	89ab      	ldrh	r3, [r5, #12]
 8045fe0:	059a      	lsls	r2, r3, #22
 8045fe2:	d402      	bmi.n	8045fea <_vfiprintf_r+0x32>
 8045fe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8045fe6:	f7ff fe75 	bl	8045cd4 <__retarget_lock_acquire_recursive>
 8045fea:	89ab      	ldrh	r3, [r5, #12]
 8045fec:	071b      	lsls	r3, r3, #28
 8045fee:	d501      	bpl.n	8045ff4 <_vfiprintf_r+0x3c>
 8045ff0:	692b      	ldr	r3, [r5, #16]
 8045ff2:	b9eb      	cbnz	r3, 8046030 <_vfiprintf_r+0x78>
 8045ff4:	4629      	mov	r1, r5
 8045ff6:	4630      	mov	r0, r6
 8045ff8:	f7ff fc46 	bl	8045888 <__swsetup_r>
 8045ffc:	b1c0      	cbz	r0, 8046030 <_vfiprintf_r+0x78>
 8045ffe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8046000:	07dc      	lsls	r4, r3, #31
 8046002:	d50e      	bpl.n	8046022 <_vfiprintf_r+0x6a>
 8046004:	f04f 30ff 	mov.w	r0, #4294967295
 8046008:	b01d      	add	sp, #116	; 0x74
 804600a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804600e:	4b7b      	ldr	r3, [pc, #492]	; (80461fc <_vfiprintf_r+0x244>)
 8046010:	429d      	cmp	r5, r3
 8046012:	d101      	bne.n	8046018 <_vfiprintf_r+0x60>
 8046014:	68b5      	ldr	r5, [r6, #8]
 8046016:	e7df      	b.n	8045fd8 <_vfiprintf_r+0x20>
 8046018:	4b79      	ldr	r3, [pc, #484]	; (8046200 <_vfiprintf_r+0x248>)
 804601a:	429d      	cmp	r5, r3
 804601c:	bf08      	it	eq
 804601e:	68f5      	ldreq	r5, [r6, #12]
 8046020:	e7da      	b.n	8045fd8 <_vfiprintf_r+0x20>
 8046022:	89ab      	ldrh	r3, [r5, #12]
 8046024:	0598      	lsls	r0, r3, #22
 8046026:	d4ed      	bmi.n	8046004 <_vfiprintf_r+0x4c>
 8046028:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804602a:	f7ff fe54 	bl	8045cd6 <__retarget_lock_release_recursive>
 804602e:	e7e9      	b.n	8046004 <_vfiprintf_r+0x4c>
 8046030:	2300      	movs	r3, #0
 8046032:	9309      	str	r3, [sp, #36]	; 0x24
 8046034:	2320      	movs	r3, #32
 8046036:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804603a:	f8cd 800c 	str.w	r8, [sp, #12]
 804603e:	2330      	movs	r3, #48	; 0x30
 8046040:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8046204 <_vfiprintf_r+0x24c>
 8046044:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8046048:	f04f 0901 	mov.w	r9, #1
 804604c:	4623      	mov	r3, r4
 804604e:	469a      	mov	sl, r3
 8046050:	f813 2b01 	ldrb.w	r2, [r3], #1
 8046054:	b10a      	cbz	r2, 804605a <_vfiprintf_r+0xa2>
 8046056:	2a25      	cmp	r2, #37	; 0x25
 8046058:	d1f9      	bne.n	804604e <_vfiprintf_r+0x96>
 804605a:	ebba 0b04 	subs.w	fp, sl, r4
 804605e:	d00b      	beq.n	8046078 <_vfiprintf_r+0xc0>
 8046060:	465b      	mov	r3, fp
 8046062:	4622      	mov	r2, r4
 8046064:	4629      	mov	r1, r5
 8046066:	4630      	mov	r0, r6
 8046068:	f7ff ff93 	bl	8045f92 <__sfputs_r>
 804606c:	3001      	adds	r0, #1
 804606e:	f000 80aa 	beq.w	80461c6 <_vfiprintf_r+0x20e>
 8046072:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8046074:	445a      	add	r2, fp
 8046076:	9209      	str	r2, [sp, #36]	; 0x24
 8046078:	f89a 3000 	ldrb.w	r3, [sl]
 804607c:	2b00      	cmp	r3, #0
 804607e:	f000 80a2 	beq.w	80461c6 <_vfiprintf_r+0x20e>
 8046082:	2300      	movs	r3, #0
 8046084:	f04f 32ff 	mov.w	r2, #4294967295
 8046088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 804608c:	f10a 0a01 	add.w	sl, sl, #1
 8046090:	9304      	str	r3, [sp, #16]
 8046092:	9307      	str	r3, [sp, #28]
 8046094:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8046098:	931a      	str	r3, [sp, #104]	; 0x68
 804609a:	4654      	mov	r4, sl
 804609c:	2205      	movs	r2, #5
 804609e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80460a2:	4858      	ldr	r0, [pc, #352]	; (8046204 <_vfiprintf_r+0x24c>)
 80460a4:	f7fa f91c 	bl	80402e0 <memchr>
 80460a8:	9a04      	ldr	r2, [sp, #16]
 80460aa:	b9d8      	cbnz	r0, 80460e4 <_vfiprintf_r+0x12c>
 80460ac:	06d1      	lsls	r1, r2, #27
 80460ae:	bf44      	itt	mi
 80460b0:	2320      	movmi	r3, #32
 80460b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80460b6:	0713      	lsls	r3, r2, #28
 80460b8:	bf44      	itt	mi
 80460ba:	232b      	movmi	r3, #43	; 0x2b
 80460bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80460c0:	f89a 3000 	ldrb.w	r3, [sl]
 80460c4:	2b2a      	cmp	r3, #42	; 0x2a
 80460c6:	d015      	beq.n	80460f4 <_vfiprintf_r+0x13c>
 80460c8:	9a07      	ldr	r2, [sp, #28]
 80460ca:	4654      	mov	r4, sl
 80460cc:	2000      	movs	r0, #0
 80460ce:	f04f 0c0a 	mov.w	ip, #10
 80460d2:	4621      	mov	r1, r4
 80460d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80460d8:	3b30      	subs	r3, #48	; 0x30
 80460da:	2b09      	cmp	r3, #9
 80460dc:	d94e      	bls.n	804617c <_vfiprintf_r+0x1c4>
 80460de:	b1b0      	cbz	r0, 804610e <_vfiprintf_r+0x156>
 80460e0:	9207      	str	r2, [sp, #28]
 80460e2:	e014      	b.n	804610e <_vfiprintf_r+0x156>
 80460e4:	eba0 0308 	sub.w	r3, r0, r8
 80460e8:	fa09 f303 	lsl.w	r3, r9, r3
 80460ec:	4313      	orrs	r3, r2
 80460ee:	9304      	str	r3, [sp, #16]
 80460f0:	46a2      	mov	sl, r4
 80460f2:	e7d2      	b.n	804609a <_vfiprintf_r+0xe2>
 80460f4:	9b03      	ldr	r3, [sp, #12]
 80460f6:	1d19      	adds	r1, r3, #4
 80460f8:	681b      	ldr	r3, [r3, #0]
 80460fa:	9103      	str	r1, [sp, #12]
 80460fc:	2b00      	cmp	r3, #0
 80460fe:	bfbb      	ittet	lt
 8046100:	425b      	neglt	r3, r3
 8046102:	f042 0202 	orrlt.w	r2, r2, #2
 8046106:	9307      	strge	r3, [sp, #28]
 8046108:	9307      	strlt	r3, [sp, #28]
 804610a:	bfb8      	it	lt
 804610c:	9204      	strlt	r2, [sp, #16]
 804610e:	7823      	ldrb	r3, [r4, #0]
 8046110:	2b2e      	cmp	r3, #46	; 0x2e
 8046112:	d10c      	bne.n	804612e <_vfiprintf_r+0x176>
 8046114:	7863      	ldrb	r3, [r4, #1]
 8046116:	2b2a      	cmp	r3, #42	; 0x2a
 8046118:	d135      	bne.n	8046186 <_vfiprintf_r+0x1ce>
 804611a:	9b03      	ldr	r3, [sp, #12]
 804611c:	1d1a      	adds	r2, r3, #4
 804611e:	681b      	ldr	r3, [r3, #0]
 8046120:	9203      	str	r2, [sp, #12]
 8046122:	2b00      	cmp	r3, #0
 8046124:	bfb8      	it	lt
 8046126:	f04f 33ff 	movlt.w	r3, #4294967295
 804612a:	3402      	adds	r4, #2
 804612c:	9305      	str	r3, [sp, #20]
 804612e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8046214 <_vfiprintf_r+0x25c>
 8046132:	7821      	ldrb	r1, [r4, #0]
 8046134:	2203      	movs	r2, #3
 8046136:	4650      	mov	r0, sl
 8046138:	f7fa f8d2 	bl	80402e0 <memchr>
 804613c:	b140      	cbz	r0, 8046150 <_vfiprintf_r+0x198>
 804613e:	2340      	movs	r3, #64	; 0x40
 8046140:	eba0 000a 	sub.w	r0, r0, sl
 8046144:	fa03 f000 	lsl.w	r0, r3, r0
 8046148:	9b04      	ldr	r3, [sp, #16]
 804614a:	4303      	orrs	r3, r0
 804614c:	3401      	adds	r4, #1
 804614e:	9304      	str	r3, [sp, #16]
 8046150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8046154:	482c      	ldr	r0, [pc, #176]	; (8046208 <_vfiprintf_r+0x250>)
 8046156:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 804615a:	2206      	movs	r2, #6
 804615c:	f7fa f8c0 	bl	80402e0 <memchr>
 8046160:	2800      	cmp	r0, #0
 8046162:	d03f      	beq.n	80461e4 <_vfiprintf_r+0x22c>
 8046164:	4b29      	ldr	r3, [pc, #164]	; (804620c <_vfiprintf_r+0x254>)
 8046166:	bb1b      	cbnz	r3, 80461b0 <_vfiprintf_r+0x1f8>
 8046168:	9b03      	ldr	r3, [sp, #12]
 804616a:	3307      	adds	r3, #7
 804616c:	f023 0307 	bic.w	r3, r3, #7
 8046170:	3308      	adds	r3, #8
 8046172:	9303      	str	r3, [sp, #12]
 8046174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8046176:	443b      	add	r3, r7
 8046178:	9309      	str	r3, [sp, #36]	; 0x24
 804617a:	e767      	b.n	804604c <_vfiprintf_r+0x94>
 804617c:	fb0c 3202 	mla	r2, ip, r2, r3
 8046180:	460c      	mov	r4, r1
 8046182:	2001      	movs	r0, #1
 8046184:	e7a5      	b.n	80460d2 <_vfiprintf_r+0x11a>
 8046186:	2300      	movs	r3, #0
 8046188:	3401      	adds	r4, #1
 804618a:	9305      	str	r3, [sp, #20]
 804618c:	4619      	mov	r1, r3
 804618e:	f04f 0c0a 	mov.w	ip, #10
 8046192:	4620      	mov	r0, r4
 8046194:	f810 2b01 	ldrb.w	r2, [r0], #1
 8046198:	3a30      	subs	r2, #48	; 0x30
 804619a:	2a09      	cmp	r2, #9
 804619c:	d903      	bls.n	80461a6 <_vfiprintf_r+0x1ee>
 804619e:	2b00      	cmp	r3, #0
 80461a0:	d0c5      	beq.n	804612e <_vfiprintf_r+0x176>
 80461a2:	9105      	str	r1, [sp, #20]
 80461a4:	e7c3      	b.n	804612e <_vfiprintf_r+0x176>
 80461a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80461aa:	4604      	mov	r4, r0
 80461ac:	2301      	movs	r3, #1
 80461ae:	e7f0      	b.n	8046192 <_vfiprintf_r+0x1da>
 80461b0:	ab03      	add	r3, sp, #12
 80461b2:	9300      	str	r3, [sp, #0]
 80461b4:	462a      	mov	r2, r5
 80461b6:	4b16      	ldr	r3, [pc, #88]	; (8046210 <_vfiprintf_r+0x258>)
 80461b8:	a904      	add	r1, sp, #16
 80461ba:	4630      	mov	r0, r6
 80461bc:	f3af 8000 	nop.w
 80461c0:	4607      	mov	r7, r0
 80461c2:	1c78      	adds	r0, r7, #1
 80461c4:	d1d6      	bne.n	8046174 <_vfiprintf_r+0x1bc>
 80461c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80461c8:	07d9      	lsls	r1, r3, #31
 80461ca:	d405      	bmi.n	80461d8 <_vfiprintf_r+0x220>
 80461cc:	89ab      	ldrh	r3, [r5, #12]
 80461ce:	059a      	lsls	r2, r3, #22
 80461d0:	d402      	bmi.n	80461d8 <_vfiprintf_r+0x220>
 80461d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80461d4:	f7ff fd7f 	bl	8045cd6 <__retarget_lock_release_recursive>
 80461d8:	89ab      	ldrh	r3, [r5, #12]
 80461da:	065b      	lsls	r3, r3, #25
 80461dc:	f53f af12 	bmi.w	8046004 <_vfiprintf_r+0x4c>
 80461e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80461e2:	e711      	b.n	8046008 <_vfiprintf_r+0x50>
 80461e4:	ab03      	add	r3, sp, #12
 80461e6:	9300      	str	r3, [sp, #0]
 80461e8:	462a      	mov	r2, r5
 80461ea:	4b09      	ldr	r3, [pc, #36]	; (8046210 <_vfiprintf_r+0x258>)
 80461ec:	a904      	add	r1, sp, #16
 80461ee:	4630      	mov	r0, r6
 80461f0:	f000 f880 	bl	80462f4 <_printf_i>
 80461f4:	e7e4      	b.n	80461c0 <_vfiprintf_r+0x208>
 80461f6:	bf00      	nop
 80461f8:	08046780 	.word	0x08046780
 80461fc:	080467a0 	.word	0x080467a0
 8046200:	08046760 	.word	0x08046760
 8046204:	080467c0 	.word	0x080467c0
 8046208:	080467ca 	.word	0x080467ca
 804620c:	00000000 	.word	0x00000000
 8046210:	08045f93 	.word	0x08045f93
 8046214:	080467c6 	.word	0x080467c6

08046218 <_printf_common>:
 8046218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804621c:	4616      	mov	r6, r2
 804621e:	4699      	mov	r9, r3
 8046220:	688a      	ldr	r2, [r1, #8]
 8046222:	690b      	ldr	r3, [r1, #16]
 8046224:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8046228:	4293      	cmp	r3, r2
 804622a:	bfb8      	it	lt
 804622c:	4613      	movlt	r3, r2
 804622e:	6033      	str	r3, [r6, #0]
 8046230:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8046234:	4607      	mov	r7, r0
 8046236:	460c      	mov	r4, r1
 8046238:	b10a      	cbz	r2, 804623e <_printf_common+0x26>
 804623a:	3301      	adds	r3, #1
 804623c:	6033      	str	r3, [r6, #0]
 804623e:	6823      	ldr	r3, [r4, #0]
 8046240:	0699      	lsls	r1, r3, #26
 8046242:	bf42      	ittt	mi
 8046244:	6833      	ldrmi	r3, [r6, #0]
 8046246:	3302      	addmi	r3, #2
 8046248:	6033      	strmi	r3, [r6, #0]
 804624a:	6825      	ldr	r5, [r4, #0]
 804624c:	f015 0506 	ands.w	r5, r5, #6
 8046250:	d106      	bne.n	8046260 <_printf_common+0x48>
 8046252:	f104 0a19 	add.w	sl, r4, #25
 8046256:	68e3      	ldr	r3, [r4, #12]
 8046258:	6832      	ldr	r2, [r6, #0]
 804625a:	1a9b      	subs	r3, r3, r2
 804625c:	42ab      	cmp	r3, r5
 804625e:	dc26      	bgt.n	80462ae <_printf_common+0x96>
 8046260:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8046264:	1e13      	subs	r3, r2, #0
 8046266:	6822      	ldr	r2, [r4, #0]
 8046268:	bf18      	it	ne
 804626a:	2301      	movne	r3, #1
 804626c:	0692      	lsls	r2, r2, #26
 804626e:	d42b      	bmi.n	80462c8 <_printf_common+0xb0>
 8046270:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8046274:	4649      	mov	r1, r9
 8046276:	4638      	mov	r0, r7
 8046278:	47c0      	blx	r8
 804627a:	3001      	adds	r0, #1
 804627c:	d01e      	beq.n	80462bc <_printf_common+0xa4>
 804627e:	6823      	ldr	r3, [r4, #0]
 8046280:	68e5      	ldr	r5, [r4, #12]
 8046282:	6832      	ldr	r2, [r6, #0]
 8046284:	f003 0306 	and.w	r3, r3, #6
 8046288:	2b04      	cmp	r3, #4
 804628a:	bf08      	it	eq
 804628c:	1aad      	subeq	r5, r5, r2
 804628e:	68a3      	ldr	r3, [r4, #8]
 8046290:	6922      	ldr	r2, [r4, #16]
 8046292:	bf0c      	ite	eq
 8046294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8046298:	2500      	movne	r5, #0
 804629a:	4293      	cmp	r3, r2
 804629c:	bfc4      	itt	gt
 804629e:	1a9b      	subgt	r3, r3, r2
 80462a0:	18ed      	addgt	r5, r5, r3
 80462a2:	2600      	movs	r6, #0
 80462a4:	341a      	adds	r4, #26
 80462a6:	42b5      	cmp	r5, r6
 80462a8:	d11a      	bne.n	80462e0 <_printf_common+0xc8>
 80462aa:	2000      	movs	r0, #0
 80462ac:	e008      	b.n	80462c0 <_printf_common+0xa8>
 80462ae:	2301      	movs	r3, #1
 80462b0:	4652      	mov	r2, sl
 80462b2:	4649      	mov	r1, r9
 80462b4:	4638      	mov	r0, r7
 80462b6:	47c0      	blx	r8
 80462b8:	3001      	adds	r0, #1
 80462ba:	d103      	bne.n	80462c4 <_printf_common+0xac>
 80462bc:	f04f 30ff 	mov.w	r0, #4294967295
 80462c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80462c4:	3501      	adds	r5, #1
 80462c6:	e7c6      	b.n	8046256 <_printf_common+0x3e>
 80462c8:	18e1      	adds	r1, r4, r3
 80462ca:	1c5a      	adds	r2, r3, #1
 80462cc:	2030      	movs	r0, #48	; 0x30
 80462ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80462d2:	4422      	add	r2, r4
 80462d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80462d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80462dc:	3302      	adds	r3, #2
 80462de:	e7c7      	b.n	8046270 <_printf_common+0x58>
 80462e0:	2301      	movs	r3, #1
 80462e2:	4622      	mov	r2, r4
 80462e4:	4649      	mov	r1, r9
 80462e6:	4638      	mov	r0, r7
 80462e8:	47c0      	blx	r8
 80462ea:	3001      	adds	r0, #1
 80462ec:	d0e6      	beq.n	80462bc <_printf_common+0xa4>
 80462ee:	3601      	adds	r6, #1
 80462f0:	e7d9      	b.n	80462a6 <_printf_common+0x8e>
	...

080462f4 <_printf_i>:
 80462f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80462f8:	7e0f      	ldrb	r7, [r1, #24]
 80462fa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80462fc:	2f78      	cmp	r7, #120	; 0x78
 80462fe:	4691      	mov	r9, r2
 8046300:	4680      	mov	r8, r0
 8046302:	460c      	mov	r4, r1
 8046304:	469a      	mov	sl, r3
 8046306:	f101 0243 	add.w	r2, r1, #67	; 0x43
 804630a:	d807      	bhi.n	804631c <_printf_i+0x28>
 804630c:	2f62      	cmp	r7, #98	; 0x62
 804630e:	d80a      	bhi.n	8046326 <_printf_i+0x32>
 8046310:	2f00      	cmp	r7, #0
 8046312:	f000 80d8 	beq.w	80464c6 <_printf_i+0x1d2>
 8046316:	2f58      	cmp	r7, #88	; 0x58
 8046318:	f000 80a3 	beq.w	8046462 <_printf_i+0x16e>
 804631c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8046320:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8046324:	e03a      	b.n	804639c <_printf_i+0xa8>
 8046326:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 804632a:	2b15      	cmp	r3, #21
 804632c:	d8f6      	bhi.n	804631c <_printf_i+0x28>
 804632e:	a101      	add	r1, pc, #4	; (adr r1, 8046334 <_printf_i+0x40>)
 8046330:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8046334:	0804638d 	.word	0x0804638d
 8046338:	080463a1 	.word	0x080463a1
 804633c:	0804631d 	.word	0x0804631d
 8046340:	0804631d 	.word	0x0804631d
 8046344:	0804631d 	.word	0x0804631d
 8046348:	0804631d 	.word	0x0804631d
 804634c:	080463a1 	.word	0x080463a1
 8046350:	0804631d 	.word	0x0804631d
 8046354:	0804631d 	.word	0x0804631d
 8046358:	0804631d 	.word	0x0804631d
 804635c:	0804631d 	.word	0x0804631d
 8046360:	080464ad 	.word	0x080464ad
 8046364:	080463d1 	.word	0x080463d1
 8046368:	0804648f 	.word	0x0804648f
 804636c:	0804631d 	.word	0x0804631d
 8046370:	0804631d 	.word	0x0804631d
 8046374:	080464cf 	.word	0x080464cf
 8046378:	0804631d 	.word	0x0804631d
 804637c:	080463d1 	.word	0x080463d1
 8046380:	0804631d 	.word	0x0804631d
 8046384:	0804631d 	.word	0x0804631d
 8046388:	08046497 	.word	0x08046497
 804638c:	682b      	ldr	r3, [r5, #0]
 804638e:	1d1a      	adds	r2, r3, #4
 8046390:	681b      	ldr	r3, [r3, #0]
 8046392:	602a      	str	r2, [r5, #0]
 8046394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8046398:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 804639c:	2301      	movs	r3, #1
 804639e:	e0a3      	b.n	80464e8 <_printf_i+0x1f4>
 80463a0:	6820      	ldr	r0, [r4, #0]
 80463a2:	6829      	ldr	r1, [r5, #0]
 80463a4:	0606      	lsls	r6, r0, #24
 80463a6:	f101 0304 	add.w	r3, r1, #4
 80463aa:	d50a      	bpl.n	80463c2 <_printf_i+0xce>
 80463ac:	680e      	ldr	r6, [r1, #0]
 80463ae:	602b      	str	r3, [r5, #0]
 80463b0:	2e00      	cmp	r6, #0
 80463b2:	da03      	bge.n	80463bc <_printf_i+0xc8>
 80463b4:	232d      	movs	r3, #45	; 0x2d
 80463b6:	4276      	negs	r6, r6
 80463b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80463bc:	485e      	ldr	r0, [pc, #376]	; (8046538 <_printf_i+0x244>)
 80463be:	230a      	movs	r3, #10
 80463c0:	e019      	b.n	80463f6 <_printf_i+0x102>
 80463c2:	680e      	ldr	r6, [r1, #0]
 80463c4:	602b      	str	r3, [r5, #0]
 80463c6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80463ca:	bf18      	it	ne
 80463cc:	b236      	sxthne	r6, r6
 80463ce:	e7ef      	b.n	80463b0 <_printf_i+0xbc>
 80463d0:	682b      	ldr	r3, [r5, #0]
 80463d2:	6820      	ldr	r0, [r4, #0]
 80463d4:	1d19      	adds	r1, r3, #4
 80463d6:	6029      	str	r1, [r5, #0]
 80463d8:	0601      	lsls	r1, r0, #24
 80463da:	d501      	bpl.n	80463e0 <_printf_i+0xec>
 80463dc:	681e      	ldr	r6, [r3, #0]
 80463de:	e002      	b.n	80463e6 <_printf_i+0xf2>
 80463e0:	0646      	lsls	r6, r0, #25
 80463e2:	d5fb      	bpl.n	80463dc <_printf_i+0xe8>
 80463e4:	881e      	ldrh	r6, [r3, #0]
 80463e6:	4854      	ldr	r0, [pc, #336]	; (8046538 <_printf_i+0x244>)
 80463e8:	2f6f      	cmp	r7, #111	; 0x6f
 80463ea:	bf0c      	ite	eq
 80463ec:	2308      	moveq	r3, #8
 80463ee:	230a      	movne	r3, #10
 80463f0:	2100      	movs	r1, #0
 80463f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80463f6:	6865      	ldr	r5, [r4, #4]
 80463f8:	60a5      	str	r5, [r4, #8]
 80463fa:	2d00      	cmp	r5, #0
 80463fc:	bfa2      	ittt	ge
 80463fe:	6821      	ldrge	r1, [r4, #0]
 8046400:	f021 0104 	bicge.w	r1, r1, #4
 8046404:	6021      	strge	r1, [r4, #0]
 8046406:	b90e      	cbnz	r6, 804640c <_printf_i+0x118>
 8046408:	2d00      	cmp	r5, #0
 804640a:	d04d      	beq.n	80464a8 <_printf_i+0x1b4>
 804640c:	4615      	mov	r5, r2
 804640e:	fbb6 f1f3 	udiv	r1, r6, r3
 8046412:	fb03 6711 	mls	r7, r3, r1, r6
 8046416:	5dc7      	ldrb	r7, [r0, r7]
 8046418:	f805 7d01 	strb.w	r7, [r5, #-1]!
 804641c:	4637      	mov	r7, r6
 804641e:	42bb      	cmp	r3, r7
 8046420:	460e      	mov	r6, r1
 8046422:	d9f4      	bls.n	804640e <_printf_i+0x11a>
 8046424:	2b08      	cmp	r3, #8
 8046426:	d10b      	bne.n	8046440 <_printf_i+0x14c>
 8046428:	6823      	ldr	r3, [r4, #0]
 804642a:	07de      	lsls	r6, r3, #31
 804642c:	d508      	bpl.n	8046440 <_printf_i+0x14c>
 804642e:	6923      	ldr	r3, [r4, #16]
 8046430:	6861      	ldr	r1, [r4, #4]
 8046432:	4299      	cmp	r1, r3
 8046434:	bfde      	ittt	le
 8046436:	2330      	movle	r3, #48	; 0x30
 8046438:	f805 3c01 	strble.w	r3, [r5, #-1]
 804643c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8046440:	1b52      	subs	r2, r2, r5
 8046442:	6122      	str	r2, [r4, #16]
 8046444:	f8cd a000 	str.w	sl, [sp]
 8046448:	464b      	mov	r3, r9
 804644a:	aa03      	add	r2, sp, #12
 804644c:	4621      	mov	r1, r4
 804644e:	4640      	mov	r0, r8
 8046450:	f7ff fee2 	bl	8046218 <_printf_common>
 8046454:	3001      	adds	r0, #1
 8046456:	d14c      	bne.n	80464f2 <_printf_i+0x1fe>
 8046458:	f04f 30ff 	mov.w	r0, #4294967295
 804645c:	b004      	add	sp, #16
 804645e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8046462:	4835      	ldr	r0, [pc, #212]	; (8046538 <_printf_i+0x244>)
 8046464:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8046468:	6829      	ldr	r1, [r5, #0]
 804646a:	6823      	ldr	r3, [r4, #0]
 804646c:	f851 6b04 	ldr.w	r6, [r1], #4
 8046470:	6029      	str	r1, [r5, #0]
 8046472:	061d      	lsls	r5, r3, #24
 8046474:	d514      	bpl.n	80464a0 <_printf_i+0x1ac>
 8046476:	07df      	lsls	r7, r3, #31
 8046478:	bf44      	itt	mi
 804647a:	f043 0320 	orrmi.w	r3, r3, #32
 804647e:	6023      	strmi	r3, [r4, #0]
 8046480:	b91e      	cbnz	r6, 804648a <_printf_i+0x196>
 8046482:	6823      	ldr	r3, [r4, #0]
 8046484:	f023 0320 	bic.w	r3, r3, #32
 8046488:	6023      	str	r3, [r4, #0]
 804648a:	2310      	movs	r3, #16
 804648c:	e7b0      	b.n	80463f0 <_printf_i+0xfc>
 804648e:	6823      	ldr	r3, [r4, #0]
 8046490:	f043 0320 	orr.w	r3, r3, #32
 8046494:	6023      	str	r3, [r4, #0]
 8046496:	2378      	movs	r3, #120	; 0x78
 8046498:	4828      	ldr	r0, [pc, #160]	; (804653c <_printf_i+0x248>)
 804649a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 804649e:	e7e3      	b.n	8046468 <_printf_i+0x174>
 80464a0:	0659      	lsls	r1, r3, #25
 80464a2:	bf48      	it	mi
 80464a4:	b2b6      	uxthmi	r6, r6
 80464a6:	e7e6      	b.n	8046476 <_printf_i+0x182>
 80464a8:	4615      	mov	r5, r2
 80464aa:	e7bb      	b.n	8046424 <_printf_i+0x130>
 80464ac:	682b      	ldr	r3, [r5, #0]
 80464ae:	6826      	ldr	r6, [r4, #0]
 80464b0:	6961      	ldr	r1, [r4, #20]
 80464b2:	1d18      	adds	r0, r3, #4
 80464b4:	6028      	str	r0, [r5, #0]
 80464b6:	0635      	lsls	r5, r6, #24
 80464b8:	681b      	ldr	r3, [r3, #0]
 80464ba:	d501      	bpl.n	80464c0 <_printf_i+0x1cc>
 80464bc:	6019      	str	r1, [r3, #0]
 80464be:	e002      	b.n	80464c6 <_printf_i+0x1d2>
 80464c0:	0670      	lsls	r0, r6, #25
 80464c2:	d5fb      	bpl.n	80464bc <_printf_i+0x1c8>
 80464c4:	8019      	strh	r1, [r3, #0]
 80464c6:	2300      	movs	r3, #0
 80464c8:	6123      	str	r3, [r4, #16]
 80464ca:	4615      	mov	r5, r2
 80464cc:	e7ba      	b.n	8046444 <_printf_i+0x150>
 80464ce:	682b      	ldr	r3, [r5, #0]
 80464d0:	1d1a      	adds	r2, r3, #4
 80464d2:	602a      	str	r2, [r5, #0]
 80464d4:	681d      	ldr	r5, [r3, #0]
 80464d6:	6862      	ldr	r2, [r4, #4]
 80464d8:	2100      	movs	r1, #0
 80464da:	4628      	mov	r0, r5
 80464dc:	f7f9 ff00 	bl	80402e0 <memchr>
 80464e0:	b108      	cbz	r0, 80464e6 <_printf_i+0x1f2>
 80464e2:	1b40      	subs	r0, r0, r5
 80464e4:	6060      	str	r0, [r4, #4]
 80464e6:	6863      	ldr	r3, [r4, #4]
 80464e8:	6123      	str	r3, [r4, #16]
 80464ea:	2300      	movs	r3, #0
 80464ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80464f0:	e7a8      	b.n	8046444 <_printf_i+0x150>
 80464f2:	6923      	ldr	r3, [r4, #16]
 80464f4:	462a      	mov	r2, r5
 80464f6:	4649      	mov	r1, r9
 80464f8:	4640      	mov	r0, r8
 80464fa:	47d0      	blx	sl
 80464fc:	3001      	adds	r0, #1
 80464fe:	d0ab      	beq.n	8046458 <_printf_i+0x164>
 8046500:	6823      	ldr	r3, [r4, #0]
 8046502:	079b      	lsls	r3, r3, #30
 8046504:	d413      	bmi.n	804652e <_printf_i+0x23a>
 8046506:	68e0      	ldr	r0, [r4, #12]
 8046508:	9b03      	ldr	r3, [sp, #12]
 804650a:	4298      	cmp	r0, r3
 804650c:	bfb8      	it	lt
 804650e:	4618      	movlt	r0, r3
 8046510:	e7a4      	b.n	804645c <_printf_i+0x168>
 8046512:	2301      	movs	r3, #1
 8046514:	4632      	mov	r2, r6
 8046516:	4649      	mov	r1, r9
 8046518:	4640      	mov	r0, r8
 804651a:	47d0      	blx	sl
 804651c:	3001      	adds	r0, #1
 804651e:	d09b      	beq.n	8046458 <_printf_i+0x164>
 8046520:	3501      	adds	r5, #1
 8046522:	68e3      	ldr	r3, [r4, #12]
 8046524:	9903      	ldr	r1, [sp, #12]
 8046526:	1a5b      	subs	r3, r3, r1
 8046528:	42ab      	cmp	r3, r5
 804652a:	dcf2      	bgt.n	8046512 <_printf_i+0x21e>
 804652c:	e7eb      	b.n	8046506 <_printf_i+0x212>
 804652e:	2500      	movs	r5, #0
 8046530:	f104 0619 	add.w	r6, r4, #25
 8046534:	e7f5      	b.n	8046522 <_printf_i+0x22e>
 8046536:	bf00      	nop
 8046538:	080467d1 	.word	0x080467d1
 804653c:	080467e2 	.word	0x080467e2

08046540 <_sbrk_r>:
 8046540:	b538      	push	{r3, r4, r5, lr}
 8046542:	4d06      	ldr	r5, [pc, #24]	; (804655c <_sbrk_r+0x1c>)
 8046544:	2300      	movs	r3, #0
 8046546:	4604      	mov	r4, r0
 8046548:	4608      	mov	r0, r1
 804654a:	602b      	str	r3, [r5, #0]
 804654c:	f7fa fbf8 	bl	8040d40 <_sbrk>
 8046550:	1c43      	adds	r3, r0, #1
 8046552:	d102      	bne.n	804655a <_sbrk_r+0x1a>
 8046554:	682b      	ldr	r3, [r5, #0]
 8046556:	b103      	cbz	r3, 804655a <_sbrk_r+0x1a>
 8046558:	6023      	str	r3, [r4, #0]
 804655a:	bd38      	pop	{r3, r4, r5, pc}
 804655c:	24000138 	.word	0x24000138

08046560 <__sread>:
 8046560:	b510      	push	{r4, lr}
 8046562:	460c      	mov	r4, r1
 8046564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8046568:	f000 f8a0 	bl	80466ac <_read_r>
 804656c:	2800      	cmp	r0, #0
 804656e:	bfab      	itete	ge
 8046570:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8046572:	89a3      	ldrhlt	r3, [r4, #12]
 8046574:	181b      	addge	r3, r3, r0
 8046576:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 804657a:	bfac      	ite	ge
 804657c:	6563      	strge	r3, [r4, #84]	; 0x54
 804657e:	81a3      	strhlt	r3, [r4, #12]
 8046580:	bd10      	pop	{r4, pc}

08046582 <__swrite>:
 8046582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8046586:	461f      	mov	r7, r3
 8046588:	898b      	ldrh	r3, [r1, #12]
 804658a:	05db      	lsls	r3, r3, #23
 804658c:	4605      	mov	r5, r0
 804658e:	460c      	mov	r4, r1
 8046590:	4616      	mov	r6, r2
 8046592:	d505      	bpl.n	80465a0 <__swrite+0x1e>
 8046594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8046598:	2302      	movs	r3, #2
 804659a:	2200      	movs	r2, #0
 804659c:	f000 f868 	bl	8046670 <_lseek_r>
 80465a0:	89a3      	ldrh	r3, [r4, #12]
 80465a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80465a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80465aa:	81a3      	strh	r3, [r4, #12]
 80465ac:	4632      	mov	r2, r6
 80465ae:	463b      	mov	r3, r7
 80465b0:	4628      	mov	r0, r5
 80465b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80465b6:	f000 b817 	b.w	80465e8 <_write_r>

080465ba <__sseek>:
 80465ba:	b510      	push	{r4, lr}
 80465bc:	460c      	mov	r4, r1
 80465be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80465c2:	f000 f855 	bl	8046670 <_lseek_r>
 80465c6:	1c43      	adds	r3, r0, #1
 80465c8:	89a3      	ldrh	r3, [r4, #12]
 80465ca:	bf15      	itete	ne
 80465cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80465ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80465d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80465d6:	81a3      	strheq	r3, [r4, #12]
 80465d8:	bf18      	it	ne
 80465da:	81a3      	strhne	r3, [r4, #12]
 80465dc:	bd10      	pop	{r4, pc}

080465de <__sclose>:
 80465de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80465e2:	f000 b813 	b.w	804660c <_close_r>
	...

080465e8 <_write_r>:
 80465e8:	b538      	push	{r3, r4, r5, lr}
 80465ea:	4d07      	ldr	r5, [pc, #28]	; (8046608 <_write_r+0x20>)
 80465ec:	4604      	mov	r4, r0
 80465ee:	4608      	mov	r0, r1
 80465f0:	4611      	mov	r1, r2
 80465f2:	2200      	movs	r2, #0
 80465f4:	602a      	str	r2, [r5, #0]
 80465f6:	461a      	mov	r2, r3
 80465f8:	f7fa fb51 	bl	8040c9e <_write>
 80465fc:	1c43      	adds	r3, r0, #1
 80465fe:	d102      	bne.n	8046606 <_write_r+0x1e>
 8046600:	682b      	ldr	r3, [r5, #0]
 8046602:	b103      	cbz	r3, 8046606 <_write_r+0x1e>
 8046604:	6023      	str	r3, [r4, #0]
 8046606:	bd38      	pop	{r3, r4, r5, pc}
 8046608:	24000138 	.word	0x24000138

0804660c <_close_r>:
 804660c:	b538      	push	{r3, r4, r5, lr}
 804660e:	4d06      	ldr	r5, [pc, #24]	; (8046628 <_close_r+0x1c>)
 8046610:	2300      	movs	r3, #0
 8046612:	4604      	mov	r4, r0
 8046614:	4608      	mov	r0, r1
 8046616:	602b      	str	r3, [r5, #0]
 8046618:	f7fa fb5d 	bl	8040cd6 <_close>
 804661c:	1c43      	adds	r3, r0, #1
 804661e:	d102      	bne.n	8046626 <_close_r+0x1a>
 8046620:	682b      	ldr	r3, [r5, #0]
 8046622:	b103      	cbz	r3, 8046626 <_close_r+0x1a>
 8046624:	6023      	str	r3, [r4, #0]
 8046626:	bd38      	pop	{r3, r4, r5, pc}
 8046628:	24000138 	.word	0x24000138

0804662c <_fstat_r>:
 804662c:	b538      	push	{r3, r4, r5, lr}
 804662e:	4d07      	ldr	r5, [pc, #28]	; (804664c <_fstat_r+0x20>)
 8046630:	2300      	movs	r3, #0
 8046632:	4604      	mov	r4, r0
 8046634:	4608      	mov	r0, r1
 8046636:	4611      	mov	r1, r2
 8046638:	602b      	str	r3, [r5, #0]
 804663a:	f7fa fb58 	bl	8040cee <_fstat>
 804663e:	1c43      	adds	r3, r0, #1
 8046640:	d102      	bne.n	8046648 <_fstat_r+0x1c>
 8046642:	682b      	ldr	r3, [r5, #0]
 8046644:	b103      	cbz	r3, 8046648 <_fstat_r+0x1c>
 8046646:	6023      	str	r3, [r4, #0]
 8046648:	bd38      	pop	{r3, r4, r5, pc}
 804664a:	bf00      	nop
 804664c:	24000138 	.word	0x24000138

08046650 <_isatty_r>:
 8046650:	b538      	push	{r3, r4, r5, lr}
 8046652:	4d06      	ldr	r5, [pc, #24]	; (804666c <_isatty_r+0x1c>)
 8046654:	2300      	movs	r3, #0
 8046656:	4604      	mov	r4, r0
 8046658:	4608      	mov	r0, r1
 804665a:	602b      	str	r3, [r5, #0]
 804665c:	f7fa fb57 	bl	8040d0e <_isatty>
 8046660:	1c43      	adds	r3, r0, #1
 8046662:	d102      	bne.n	804666a <_isatty_r+0x1a>
 8046664:	682b      	ldr	r3, [r5, #0]
 8046666:	b103      	cbz	r3, 804666a <_isatty_r+0x1a>
 8046668:	6023      	str	r3, [r4, #0]
 804666a:	bd38      	pop	{r3, r4, r5, pc}
 804666c:	24000138 	.word	0x24000138

08046670 <_lseek_r>:
 8046670:	b538      	push	{r3, r4, r5, lr}
 8046672:	4d07      	ldr	r5, [pc, #28]	; (8046690 <_lseek_r+0x20>)
 8046674:	4604      	mov	r4, r0
 8046676:	4608      	mov	r0, r1
 8046678:	4611      	mov	r1, r2
 804667a:	2200      	movs	r2, #0
 804667c:	602a      	str	r2, [r5, #0]
 804667e:	461a      	mov	r2, r3
 8046680:	f7fa fb50 	bl	8040d24 <_lseek>
 8046684:	1c43      	adds	r3, r0, #1
 8046686:	d102      	bne.n	804668e <_lseek_r+0x1e>
 8046688:	682b      	ldr	r3, [r5, #0]
 804668a:	b103      	cbz	r3, 804668e <_lseek_r+0x1e>
 804668c:	6023      	str	r3, [r4, #0]
 804668e:	bd38      	pop	{r3, r4, r5, pc}
 8046690:	24000138 	.word	0x24000138

08046694 <__malloc_lock>:
 8046694:	4801      	ldr	r0, [pc, #4]	; (804669c <__malloc_lock+0x8>)
 8046696:	f7ff bb1d 	b.w	8045cd4 <__retarget_lock_acquire_recursive>
 804669a:	bf00      	nop
 804669c:	2400012c 	.word	0x2400012c

080466a0 <__malloc_unlock>:
 80466a0:	4801      	ldr	r0, [pc, #4]	; (80466a8 <__malloc_unlock+0x8>)
 80466a2:	f7ff bb18 	b.w	8045cd6 <__retarget_lock_release_recursive>
 80466a6:	bf00      	nop
 80466a8:	2400012c 	.word	0x2400012c

080466ac <_read_r>:
 80466ac:	b538      	push	{r3, r4, r5, lr}
 80466ae:	4d07      	ldr	r5, [pc, #28]	; (80466cc <_read_r+0x20>)
 80466b0:	4604      	mov	r4, r0
 80466b2:	4608      	mov	r0, r1
 80466b4:	4611      	mov	r1, r2
 80466b6:	2200      	movs	r2, #0
 80466b8:	602a      	str	r2, [r5, #0]
 80466ba:	461a      	mov	r2, r3
 80466bc:	f7fa fad2 	bl	8040c64 <_read>
 80466c0:	1c43      	adds	r3, r0, #1
 80466c2:	d102      	bne.n	80466ca <_read_r+0x1e>
 80466c4:	682b      	ldr	r3, [r5, #0]
 80466c6:	b103      	cbz	r3, 80466ca <_read_r+0x1e>
 80466c8:	6023      	str	r3, [r4, #0]
 80466ca:	bd38      	pop	{r3, r4, r5, pc}
 80466cc:	24000138 	.word	0x24000138

080466d0 <_init>:
 80466d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80466d2:	bf00      	nop
 80466d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80466d6:	bc08      	pop	{r3}
 80466d8:	469e      	mov	lr, r3
 80466da:	4770      	bx	lr

080466dc <_fini>:
 80466dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80466de:	bf00      	nop
 80466e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80466e2:	bc08      	pop	{r3}
 80466e4:	469e      	mov	lr, r3
 80466e6:	4770      	bx	lr
