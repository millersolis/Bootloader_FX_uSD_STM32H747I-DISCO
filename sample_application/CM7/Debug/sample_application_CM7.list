
sample_application_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006498  080402a0  080402a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  08046738  08046738  00016738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08046844  08046844  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08046844  08046844  00016844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804684c  0804684c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804684c  0804684c  0001684c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08046850  08046850  00016850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08046854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  24000074  080468c8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400013c  080468c8  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010cab  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000203d  00000000  00000000  00030d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  00032d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af8  00000000  00000000  00033950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f272  00000000  00000000  00034448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6e4  00000000  00000000  000736ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00195f9f  00000000  00000000  00082d9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00218d3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000037d0  00000000  00000000  00218d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080402a0 <__do_global_dtors_aux>:
 80402a0:	b510      	push	{r4, lr}
 80402a2:	4c05      	ldr	r4, [pc, #20]	; (80402b8 <__do_global_dtors_aux+0x18>)
 80402a4:	7823      	ldrb	r3, [r4, #0]
 80402a6:	b933      	cbnz	r3, 80402b6 <__do_global_dtors_aux+0x16>
 80402a8:	4b04      	ldr	r3, [pc, #16]	; (80402bc <__do_global_dtors_aux+0x1c>)
 80402aa:	b113      	cbz	r3, 80402b2 <__do_global_dtors_aux+0x12>
 80402ac:	4804      	ldr	r0, [pc, #16]	; (80402c0 <__do_global_dtors_aux+0x20>)
 80402ae:	f3af 8000 	nop.w
 80402b2:	2301      	movs	r3, #1
 80402b4:	7023      	strb	r3, [r4, #0]
 80402b6:	bd10      	pop	{r4, pc}
 80402b8:	24000074 	.word	0x24000074
 80402bc:	00000000 	.word	0x00000000
 80402c0:	08046720 	.word	0x08046720

080402c4 <frame_dummy>:
 80402c4:	b508      	push	{r3, lr}
 80402c6:	4b03      	ldr	r3, [pc, #12]	; (80402d4 <frame_dummy+0x10>)
 80402c8:	b11b      	cbz	r3, 80402d2 <frame_dummy+0xe>
 80402ca:	4903      	ldr	r1, [pc, #12]	; (80402d8 <frame_dummy+0x14>)
 80402cc:	4803      	ldr	r0, [pc, #12]	; (80402dc <frame_dummy+0x18>)
 80402ce:	f3af 8000 	nop.w
 80402d2:	bd08      	pop	{r3, pc}
 80402d4:	00000000 	.word	0x00000000
 80402d8:	24000078 	.word	0x24000078
 80402dc:	08046720 	.word	0x08046720

080402e0 <memchr>:
 80402e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80402e4:	2a10      	cmp	r2, #16
 80402e6:	db2b      	blt.n	8040340 <memchr+0x60>
 80402e8:	f010 0f07 	tst.w	r0, #7
 80402ec:	d008      	beq.n	8040300 <memchr+0x20>
 80402ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80402f2:	3a01      	subs	r2, #1
 80402f4:	428b      	cmp	r3, r1
 80402f6:	d02d      	beq.n	8040354 <memchr+0x74>
 80402f8:	f010 0f07 	tst.w	r0, #7
 80402fc:	b342      	cbz	r2, 8040350 <memchr+0x70>
 80402fe:	d1f6      	bne.n	80402ee <memchr+0xe>
 8040300:	b4f0      	push	{r4, r5, r6, r7}
 8040302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8040306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 804030a:	f022 0407 	bic.w	r4, r2, #7
 804030e:	f07f 0700 	mvns.w	r7, #0
 8040312:	2300      	movs	r3, #0
 8040314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8040318:	3c08      	subs	r4, #8
 804031a:	ea85 0501 	eor.w	r5, r5, r1
 804031e:	ea86 0601 	eor.w	r6, r6, r1
 8040322:	fa85 f547 	uadd8	r5, r5, r7
 8040326:	faa3 f587 	sel	r5, r3, r7
 804032a:	fa86 f647 	uadd8	r6, r6, r7
 804032e:	faa5 f687 	sel	r6, r5, r7
 8040332:	b98e      	cbnz	r6, 8040358 <memchr+0x78>
 8040334:	d1ee      	bne.n	8040314 <memchr+0x34>
 8040336:	bcf0      	pop	{r4, r5, r6, r7}
 8040338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 804033c:	f002 0207 	and.w	r2, r2, #7
 8040340:	b132      	cbz	r2, 8040350 <memchr+0x70>
 8040342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8040346:	3a01      	subs	r2, #1
 8040348:	ea83 0301 	eor.w	r3, r3, r1
 804034c:	b113      	cbz	r3, 8040354 <memchr+0x74>
 804034e:	d1f8      	bne.n	8040342 <memchr+0x62>
 8040350:	2000      	movs	r0, #0
 8040352:	4770      	bx	lr
 8040354:	3801      	subs	r0, #1
 8040356:	4770      	bx	lr
 8040358:	2d00      	cmp	r5, #0
 804035a:	bf06      	itte	eq
 804035c:	4635      	moveq	r5, r6
 804035e:	3803      	subeq	r0, #3
 8040360:	3807      	subne	r0, #7
 8040362:	f015 0f01 	tst.w	r5, #1
 8040366:	d107      	bne.n	8040378 <memchr+0x98>
 8040368:	3001      	adds	r0, #1
 804036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 804036e:	bf02      	ittt	eq
 8040370:	3001      	addeq	r0, #1
 8040372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8040376:	3001      	addeq	r0, #1
 8040378:	bcf0      	pop	{r4, r5, r6, r7}
 804037a:	3801      	subs	r0, #1
 804037c:	4770      	bx	lr
 804037e:	bf00      	nop

08040380 <__aeabi_uldivmod>:
 8040380:	b953      	cbnz	r3, 8040398 <__aeabi_uldivmod+0x18>
 8040382:	b94a      	cbnz	r2, 8040398 <__aeabi_uldivmod+0x18>
 8040384:	2900      	cmp	r1, #0
 8040386:	bf08      	it	eq
 8040388:	2800      	cmpeq	r0, #0
 804038a:	bf1c      	itt	ne
 804038c:	f04f 31ff 	movne.w	r1, #4294967295
 8040390:	f04f 30ff 	movne.w	r0, #4294967295
 8040394:	f000 b974 	b.w	8040680 <__aeabi_idiv0>
 8040398:	f1ad 0c08 	sub.w	ip, sp, #8
 804039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80403a0:	f000 f806 	bl	80403b0 <__udivmoddi4>
 80403a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80403a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80403ac:	b004      	add	sp, #16
 80403ae:	4770      	bx	lr

080403b0 <__udivmoddi4>:
 80403b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80403b4:	9d08      	ldr	r5, [sp, #32]
 80403b6:	4604      	mov	r4, r0
 80403b8:	468e      	mov	lr, r1
 80403ba:	2b00      	cmp	r3, #0
 80403bc:	d14d      	bne.n	804045a <__udivmoddi4+0xaa>
 80403be:	428a      	cmp	r2, r1
 80403c0:	4694      	mov	ip, r2
 80403c2:	d969      	bls.n	8040498 <__udivmoddi4+0xe8>
 80403c4:	fab2 f282 	clz	r2, r2
 80403c8:	b152      	cbz	r2, 80403e0 <__udivmoddi4+0x30>
 80403ca:	fa01 f302 	lsl.w	r3, r1, r2
 80403ce:	f1c2 0120 	rsb	r1, r2, #32
 80403d2:	fa20 f101 	lsr.w	r1, r0, r1
 80403d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80403da:	ea41 0e03 	orr.w	lr, r1, r3
 80403de:	4094      	lsls	r4, r2
 80403e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80403e4:	0c21      	lsrs	r1, r4, #16
 80403e6:	fbbe f6f8 	udiv	r6, lr, r8
 80403ea:	fa1f f78c 	uxth.w	r7, ip
 80403ee:	fb08 e316 	mls	r3, r8, r6, lr
 80403f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80403f6:	fb06 f107 	mul.w	r1, r6, r7
 80403fa:	4299      	cmp	r1, r3
 80403fc:	d90a      	bls.n	8040414 <__udivmoddi4+0x64>
 80403fe:	eb1c 0303 	adds.w	r3, ip, r3
 8040402:	f106 30ff 	add.w	r0, r6, #4294967295
 8040406:	f080 811f 	bcs.w	8040648 <__udivmoddi4+0x298>
 804040a:	4299      	cmp	r1, r3
 804040c:	f240 811c 	bls.w	8040648 <__udivmoddi4+0x298>
 8040410:	3e02      	subs	r6, #2
 8040412:	4463      	add	r3, ip
 8040414:	1a5b      	subs	r3, r3, r1
 8040416:	b2a4      	uxth	r4, r4
 8040418:	fbb3 f0f8 	udiv	r0, r3, r8
 804041c:	fb08 3310 	mls	r3, r8, r0, r3
 8040420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8040424:	fb00 f707 	mul.w	r7, r0, r7
 8040428:	42a7      	cmp	r7, r4
 804042a:	d90a      	bls.n	8040442 <__udivmoddi4+0x92>
 804042c:	eb1c 0404 	adds.w	r4, ip, r4
 8040430:	f100 33ff 	add.w	r3, r0, #4294967295
 8040434:	f080 810a 	bcs.w	804064c <__udivmoddi4+0x29c>
 8040438:	42a7      	cmp	r7, r4
 804043a:	f240 8107 	bls.w	804064c <__udivmoddi4+0x29c>
 804043e:	4464      	add	r4, ip
 8040440:	3802      	subs	r0, #2
 8040442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8040446:	1be4      	subs	r4, r4, r7
 8040448:	2600      	movs	r6, #0
 804044a:	b11d      	cbz	r5, 8040454 <__udivmoddi4+0xa4>
 804044c:	40d4      	lsrs	r4, r2
 804044e:	2300      	movs	r3, #0
 8040450:	e9c5 4300 	strd	r4, r3, [r5]
 8040454:	4631      	mov	r1, r6
 8040456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 804045a:	428b      	cmp	r3, r1
 804045c:	d909      	bls.n	8040472 <__udivmoddi4+0xc2>
 804045e:	2d00      	cmp	r5, #0
 8040460:	f000 80ef 	beq.w	8040642 <__udivmoddi4+0x292>
 8040464:	2600      	movs	r6, #0
 8040466:	e9c5 0100 	strd	r0, r1, [r5]
 804046a:	4630      	mov	r0, r6
 804046c:	4631      	mov	r1, r6
 804046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8040472:	fab3 f683 	clz	r6, r3
 8040476:	2e00      	cmp	r6, #0
 8040478:	d14a      	bne.n	8040510 <__udivmoddi4+0x160>
 804047a:	428b      	cmp	r3, r1
 804047c:	d302      	bcc.n	8040484 <__udivmoddi4+0xd4>
 804047e:	4282      	cmp	r2, r0
 8040480:	f200 80f9 	bhi.w	8040676 <__udivmoddi4+0x2c6>
 8040484:	1a84      	subs	r4, r0, r2
 8040486:	eb61 0303 	sbc.w	r3, r1, r3
 804048a:	2001      	movs	r0, #1
 804048c:	469e      	mov	lr, r3
 804048e:	2d00      	cmp	r5, #0
 8040490:	d0e0      	beq.n	8040454 <__udivmoddi4+0xa4>
 8040492:	e9c5 4e00 	strd	r4, lr, [r5]
 8040496:	e7dd      	b.n	8040454 <__udivmoddi4+0xa4>
 8040498:	b902      	cbnz	r2, 804049c <__udivmoddi4+0xec>
 804049a:	deff      	udf	#255	; 0xff
 804049c:	fab2 f282 	clz	r2, r2
 80404a0:	2a00      	cmp	r2, #0
 80404a2:	f040 8092 	bne.w	80405ca <__udivmoddi4+0x21a>
 80404a6:	eba1 010c 	sub.w	r1, r1, ip
 80404aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80404ae:	fa1f fe8c 	uxth.w	lr, ip
 80404b2:	2601      	movs	r6, #1
 80404b4:	0c20      	lsrs	r0, r4, #16
 80404b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80404ba:	fb07 1113 	mls	r1, r7, r3, r1
 80404be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80404c2:	fb0e f003 	mul.w	r0, lr, r3
 80404c6:	4288      	cmp	r0, r1
 80404c8:	d908      	bls.n	80404dc <__udivmoddi4+0x12c>
 80404ca:	eb1c 0101 	adds.w	r1, ip, r1
 80404ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80404d2:	d202      	bcs.n	80404da <__udivmoddi4+0x12a>
 80404d4:	4288      	cmp	r0, r1
 80404d6:	f200 80cb 	bhi.w	8040670 <__udivmoddi4+0x2c0>
 80404da:	4643      	mov	r3, r8
 80404dc:	1a09      	subs	r1, r1, r0
 80404de:	b2a4      	uxth	r4, r4
 80404e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80404e4:	fb07 1110 	mls	r1, r7, r0, r1
 80404e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80404ec:	fb0e fe00 	mul.w	lr, lr, r0
 80404f0:	45a6      	cmp	lr, r4
 80404f2:	d908      	bls.n	8040506 <__udivmoddi4+0x156>
 80404f4:	eb1c 0404 	adds.w	r4, ip, r4
 80404f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80404fc:	d202      	bcs.n	8040504 <__udivmoddi4+0x154>
 80404fe:	45a6      	cmp	lr, r4
 8040500:	f200 80bb 	bhi.w	804067a <__udivmoddi4+0x2ca>
 8040504:	4608      	mov	r0, r1
 8040506:	eba4 040e 	sub.w	r4, r4, lr
 804050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 804050e:	e79c      	b.n	804044a <__udivmoddi4+0x9a>
 8040510:	f1c6 0720 	rsb	r7, r6, #32
 8040514:	40b3      	lsls	r3, r6
 8040516:	fa22 fc07 	lsr.w	ip, r2, r7
 804051a:	ea4c 0c03 	orr.w	ip, ip, r3
 804051e:	fa20 f407 	lsr.w	r4, r0, r7
 8040522:	fa01 f306 	lsl.w	r3, r1, r6
 8040526:	431c      	orrs	r4, r3
 8040528:	40f9      	lsrs	r1, r7
 804052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 804052e:	fa00 f306 	lsl.w	r3, r0, r6
 8040532:	fbb1 f8f9 	udiv	r8, r1, r9
 8040536:	0c20      	lsrs	r0, r4, #16
 8040538:	fa1f fe8c 	uxth.w	lr, ip
 804053c:	fb09 1118 	mls	r1, r9, r8, r1
 8040540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040544:	fb08 f00e 	mul.w	r0, r8, lr
 8040548:	4288      	cmp	r0, r1
 804054a:	fa02 f206 	lsl.w	r2, r2, r6
 804054e:	d90b      	bls.n	8040568 <__udivmoddi4+0x1b8>
 8040550:	eb1c 0101 	adds.w	r1, ip, r1
 8040554:	f108 3aff 	add.w	sl, r8, #4294967295
 8040558:	f080 8088 	bcs.w	804066c <__udivmoddi4+0x2bc>
 804055c:	4288      	cmp	r0, r1
 804055e:	f240 8085 	bls.w	804066c <__udivmoddi4+0x2bc>
 8040562:	f1a8 0802 	sub.w	r8, r8, #2
 8040566:	4461      	add	r1, ip
 8040568:	1a09      	subs	r1, r1, r0
 804056a:	b2a4      	uxth	r4, r4
 804056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8040570:	fb09 1110 	mls	r1, r9, r0, r1
 8040574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8040578:	fb00 fe0e 	mul.w	lr, r0, lr
 804057c:	458e      	cmp	lr, r1
 804057e:	d908      	bls.n	8040592 <__udivmoddi4+0x1e2>
 8040580:	eb1c 0101 	adds.w	r1, ip, r1
 8040584:	f100 34ff 	add.w	r4, r0, #4294967295
 8040588:	d26c      	bcs.n	8040664 <__udivmoddi4+0x2b4>
 804058a:	458e      	cmp	lr, r1
 804058c:	d96a      	bls.n	8040664 <__udivmoddi4+0x2b4>
 804058e:	3802      	subs	r0, #2
 8040590:	4461      	add	r1, ip
 8040592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8040596:	fba0 9402 	umull	r9, r4, r0, r2
 804059a:	eba1 010e 	sub.w	r1, r1, lr
 804059e:	42a1      	cmp	r1, r4
 80405a0:	46c8      	mov	r8, r9
 80405a2:	46a6      	mov	lr, r4
 80405a4:	d356      	bcc.n	8040654 <__udivmoddi4+0x2a4>
 80405a6:	d053      	beq.n	8040650 <__udivmoddi4+0x2a0>
 80405a8:	b15d      	cbz	r5, 80405c2 <__udivmoddi4+0x212>
 80405aa:	ebb3 0208 	subs.w	r2, r3, r8
 80405ae:	eb61 010e 	sbc.w	r1, r1, lr
 80405b2:	fa01 f707 	lsl.w	r7, r1, r7
 80405b6:	fa22 f306 	lsr.w	r3, r2, r6
 80405ba:	40f1      	lsrs	r1, r6
 80405bc:	431f      	orrs	r7, r3
 80405be:	e9c5 7100 	strd	r7, r1, [r5]
 80405c2:	2600      	movs	r6, #0
 80405c4:	4631      	mov	r1, r6
 80405c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80405ca:	f1c2 0320 	rsb	r3, r2, #32
 80405ce:	40d8      	lsrs	r0, r3
 80405d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80405d4:	fa21 f303 	lsr.w	r3, r1, r3
 80405d8:	4091      	lsls	r1, r2
 80405da:	4301      	orrs	r1, r0
 80405dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80405e0:	fa1f fe8c 	uxth.w	lr, ip
 80405e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80405e8:	fb07 3610 	mls	r6, r7, r0, r3
 80405ec:	0c0b      	lsrs	r3, r1, #16
 80405ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80405f2:	fb00 f60e 	mul.w	r6, r0, lr
 80405f6:	429e      	cmp	r6, r3
 80405f8:	fa04 f402 	lsl.w	r4, r4, r2
 80405fc:	d908      	bls.n	8040610 <__udivmoddi4+0x260>
 80405fe:	eb1c 0303 	adds.w	r3, ip, r3
 8040602:	f100 38ff 	add.w	r8, r0, #4294967295
 8040606:	d22f      	bcs.n	8040668 <__udivmoddi4+0x2b8>
 8040608:	429e      	cmp	r6, r3
 804060a:	d92d      	bls.n	8040668 <__udivmoddi4+0x2b8>
 804060c:	3802      	subs	r0, #2
 804060e:	4463      	add	r3, ip
 8040610:	1b9b      	subs	r3, r3, r6
 8040612:	b289      	uxth	r1, r1
 8040614:	fbb3 f6f7 	udiv	r6, r3, r7
 8040618:	fb07 3316 	mls	r3, r7, r6, r3
 804061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8040620:	fb06 f30e 	mul.w	r3, r6, lr
 8040624:	428b      	cmp	r3, r1
 8040626:	d908      	bls.n	804063a <__udivmoddi4+0x28a>
 8040628:	eb1c 0101 	adds.w	r1, ip, r1
 804062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8040630:	d216      	bcs.n	8040660 <__udivmoddi4+0x2b0>
 8040632:	428b      	cmp	r3, r1
 8040634:	d914      	bls.n	8040660 <__udivmoddi4+0x2b0>
 8040636:	3e02      	subs	r6, #2
 8040638:	4461      	add	r1, ip
 804063a:	1ac9      	subs	r1, r1, r3
 804063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8040640:	e738      	b.n	80404b4 <__udivmoddi4+0x104>
 8040642:	462e      	mov	r6, r5
 8040644:	4628      	mov	r0, r5
 8040646:	e705      	b.n	8040454 <__udivmoddi4+0xa4>
 8040648:	4606      	mov	r6, r0
 804064a:	e6e3      	b.n	8040414 <__udivmoddi4+0x64>
 804064c:	4618      	mov	r0, r3
 804064e:	e6f8      	b.n	8040442 <__udivmoddi4+0x92>
 8040650:	454b      	cmp	r3, r9
 8040652:	d2a9      	bcs.n	80405a8 <__udivmoddi4+0x1f8>
 8040654:	ebb9 0802 	subs.w	r8, r9, r2
 8040658:	eb64 0e0c 	sbc.w	lr, r4, ip
 804065c:	3801      	subs	r0, #1
 804065e:	e7a3      	b.n	80405a8 <__udivmoddi4+0x1f8>
 8040660:	4646      	mov	r6, r8
 8040662:	e7ea      	b.n	804063a <__udivmoddi4+0x28a>
 8040664:	4620      	mov	r0, r4
 8040666:	e794      	b.n	8040592 <__udivmoddi4+0x1e2>
 8040668:	4640      	mov	r0, r8
 804066a:	e7d1      	b.n	8040610 <__udivmoddi4+0x260>
 804066c:	46d0      	mov	r8, sl
 804066e:	e77b      	b.n	8040568 <__udivmoddi4+0x1b8>
 8040670:	3b02      	subs	r3, #2
 8040672:	4461      	add	r1, ip
 8040674:	e732      	b.n	80404dc <__udivmoddi4+0x12c>
 8040676:	4630      	mov	r0, r6
 8040678:	e709      	b.n	804048e <__udivmoddi4+0xde>
 804067a:	4464      	add	r4, ip
 804067c:	3802      	subs	r0, #2
 804067e:	e742      	b.n	8040506 <__udivmoddi4+0x156>

08040680 <__aeabi_idiv0>:
 8040680:	4770      	bx	lr
 8040682:	bf00      	nop

08040684 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8040684:	b480      	push	{r7}
 8040686:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8040688:	4b3f      	ldr	r3, [pc, #252]	; (8040788 <SystemInit+0x104>)
 804068a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804068e:	4a3e      	ldr	r2, [pc, #248]	; (8040788 <SystemInit+0x104>)
 8040690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8040694:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8040698:	4b3b      	ldr	r3, [pc, #236]	; (8040788 <SystemInit+0x104>)
 804069a:	691b      	ldr	r3, [r3, #16]
 804069c:	4a3a      	ldr	r2, [pc, #232]	; (8040788 <SystemInit+0x104>)
 804069e:	f043 0310 	orr.w	r3, r3, #16
 80406a2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80406a4:	4b39      	ldr	r3, [pc, #228]	; (804078c <SystemInit+0x108>)
 80406a6:	681b      	ldr	r3, [r3, #0]
 80406a8:	f003 030f 	and.w	r3, r3, #15
 80406ac:	2b06      	cmp	r3, #6
 80406ae:	d807      	bhi.n	80406c0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80406b0:	4b36      	ldr	r3, [pc, #216]	; (804078c <SystemInit+0x108>)
 80406b2:	681b      	ldr	r3, [r3, #0]
 80406b4:	f023 030f 	bic.w	r3, r3, #15
 80406b8:	4a34      	ldr	r2, [pc, #208]	; (804078c <SystemInit+0x108>)
 80406ba:	f043 0307 	orr.w	r3, r3, #7
 80406be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80406c0:	4b33      	ldr	r3, [pc, #204]	; (8040790 <SystemInit+0x10c>)
 80406c2:	681b      	ldr	r3, [r3, #0]
 80406c4:	4a32      	ldr	r2, [pc, #200]	; (8040790 <SystemInit+0x10c>)
 80406c6:	f043 0301 	orr.w	r3, r3, #1
 80406ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80406cc:	4b30      	ldr	r3, [pc, #192]	; (8040790 <SystemInit+0x10c>)
 80406ce:	2200      	movs	r2, #0
 80406d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80406d2:	4b2f      	ldr	r3, [pc, #188]	; (8040790 <SystemInit+0x10c>)
 80406d4:	681a      	ldr	r2, [r3, #0]
 80406d6:	492e      	ldr	r1, [pc, #184]	; (8040790 <SystemInit+0x10c>)
 80406d8:	4b2e      	ldr	r3, [pc, #184]	; (8040794 <SystemInit+0x110>)
 80406da:	4013      	ands	r3, r2
 80406dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80406de:	4b2b      	ldr	r3, [pc, #172]	; (804078c <SystemInit+0x108>)
 80406e0:	681b      	ldr	r3, [r3, #0]
 80406e2:	f003 0308 	and.w	r3, r3, #8
 80406e6:	2b00      	cmp	r3, #0
 80406e8:	d007      	beq.n	80406fa <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80406ea:	4b28      	ldr	r3, [pc, #160]	; (804078c <SystemInit+0x108>)
 80406ec:	681b      	ldr	r3, [r3, #0]
 80406ee:	f023 030f 	bic.w	r3, r3, #15
 80406f2:	4a26      	ldr	r2, [pc, #152]	; (804078c <SystemInit+0x108>)
 80406f4:	f043 0307 	orr.w	r3, r3, #7
 80406f8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80406fa:	4b25      	ldr	r3, [pc, #148]	; (8040790 <SystemInit+0x10c>)
 80406fc:	2200      	movs	r2, #0
 80406fe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8040700:	4b23      	ldr	r3, [pc, #140]	; (8040790 <SystemInit+0x10c>)
 8040702:	2200      	movs	r2, #0
 8040704:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8040706:	4b22      	ldr	r3, [pc, #136]	; (8040790 <SystemInit+0x10c>)
 8040708:	2200      	movs	r2, #0
 804070a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 804070c:	4b20      	ldr	r3, [pc, #128]	; (8040790 <SystemInit+0x10c>)
 804070e:	4a22      	ldr	r2, [pc, #136]	; (8040798 <SystemInit+0x114>)
 8040710:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8040712:	4b1f      	ldr	r3, [pc, #124]	; (8040790 <SystemInit+0x10c>)
 8040714:	4a21      	ldr	r2, [pc, #132]	; (804079c <SystemInit+0x118>)
 8040716:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8040718:	4b1d      	ldr	r3, [pc, #116]	; (8040790 <SystemInit+0x10c>)
 804071a:	4a21      	ldr	r2, [pc, #132]	; (80407a0 <SystemInit+0x11c>)
 804071c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 804071e:	4b1c      	ldr	r3, [pc, #112]	; (8040790 <SystemInit+0x10c>)
 8040720:	2200      	movs	r2, #0
 8040722:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8040724:	4b1a      	ldr	r3, [pc, #104]	; (8040790 <SystemInit+0x10c>)
 8040726:	4a1e      	ldr	r2, [pc, #120]	; (80407a0 <SystemInit+0x11c>)
 8040728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 804072a:	4b19      	ldr	r3, [pc, #100]	; (8040790 <SystemInit+0x10c>)
 804072c:	2200      	movs	r2, #0
 804072e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8040730:	4b17      	ldr	r3, [pc, #92]	; (8040790 <SystemInit+0x10c>)
 8040732:	4a1b      	ldr	r2, [pc, #108]	; (80407a0 <SystemInit+0x11c>)
 8040734:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8040736:	4b16      	ldr	r3, [pc, #88]	; (8040790 <SystemInit+0x10c>)
 8040738:	2200      	movs	r2, #0
 804073a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 804073c:	4b14      	ldr	r3, [pc, #80]	; (8040790 <SystemInit+0x10c>)
 804073e:	681b      	ldr	r3, [r3, #0]
 8040740:	4a13      	ldr	r2, [pc, #76]	; (8040790 <SystemInit+0x10c>)
 8040742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8040746:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8040748:	4b11      	ldr	r3, [pc, #68]	; (8040790 <SystemInit+0x10c>)
 804074a:	2200      	movs	r2, #0
 804074c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 804074e:	4b15      	ldr	r3, [pc, #84]	; (80407a4 <SystemInit+0x120>)
 8040750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8040752:	4a14      	ldr	r2, [pc, #80]	; (80407a4 <SystemInit+0x120>)
 8040754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8040758:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 804075a:	4b13      	ldr	r3, [pc, #76]	; (80407a8 <SystemInit+0x124>)
 804075c:	681a      	ldr	r2, [r3, #0]
 804075e:	4b13      	ldr	r3, [pc, #76]	; (80407ac <SystemInit+0x128>)
 8040760:	4013      	ands	r3, r2
 8040762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8040766:	d202      	bcs.n	804076e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8040768:	4b11      	ldr	r3, [pc, #68]	; (80407b0 <SystemInit+0x12c>)
 804076a:	2201      	movs	r2, #1
 804076c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 804076e:	4b11      	ldr	r3, [pc, #68]	; (80407b4 <SystemInit+0x130>)
 8040770:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8040774:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
 8040776:	4b04      	ldr	r3, [pc, #16]	; (8040788 <SystemInit+0x104>)
 8040778:	4a0f      	ldr	r2, [pc, #60]	; (80407b8 <SystemInit+0x134>)
 804077a:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 804077c:	bf00      	nop
 804077e:	46bd      	mov	sp, r7
 8040780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040784:	4770      	bx	lr
 8040786:	bf00      	nop
 8040788:	e000ed00 	.word	0xe000ed00
 804078c:	52002000 	.word	0x52002000
 8040790:	58024400 	.word	0x58024400
 8040794:	eaf6ed7f 	.word	0xeaf6ed7f
 8040798:	02020200 	.word	0x02020200
 804079c:	01ff0000 	.word	0x01ff0000
 80407a0:	01010280 	.word	0x01010280
 80407a4:	580000c0 	.word	0x580000c0
 80407a8:	5c001000 	.word	0x5c001000
 80407ac:	ffff0000 	.word	0xffff0000
 80407b0:	51008108 	.word	0x51008108
 80407b4:	52004000 	.word	0x52004000
 80407b8:	08040000 	.word	0x08040000

080407bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80407bc:	b580      	push	{r7, lr}
 80407be:	b082      	sub	sp, #8
 80407c0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80407c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80407c6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80407c8:	bf00      	nop
 80407ca:	4b3a      	ldr	r3, [pc, #232]	; (80408b4 <main+0xf8>)
 80407cc:	681b      	ldr	r3, [r3, #0]
 80407ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80407d2:	2b00      	cmp	r3, #0
 80407d4:	d004      	beq.n	80407e0 <main+0x24>
 80407d6:	687b      	ldr	r3, [r7, #4]
 80407d8:	1e5a      	subs	r2, r3, #1
 80407da:	607a      	str	r2, [r7, #4]
 80407dc:	2b00      	cmp	r3, #0
 80407de:	dcf4      	bgt.n	80407ca <main+0xe>
  if ( timeout < 0 )
 80407e0:	687b      	ldr	r3, [r7, #4]
 80407e2:	2b00      	cmp	r3, #0
 80407e4:	da01      	bge.n	80407ea <main+0x2e>
  {
  Error_Handler();
 80407e6:	f000 f9b1 	bl	8040b4c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80407ea:	f000 fb31 	bl	8040e50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80407ee:	f000 f869 	bl	80408c4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80407f2:	4b30      	ldr	r3, [pc, #192]	; (80408b4 <main+0xf8>)
 80407f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80407f8:	4a2e      	ldr	r2, [pc, #184]	; (80408b4 <main+0xf8>)
 80407fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80407fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8040802:	4b2c      	ldr	r3, [pc, #176]	; (80408b4 <main+0xf8>)
 8040804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804080c:	603b      	str	r3, [r7, #0]
 804080e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8040810:	2000      	movs	r0, #0
 8040812:	f000 fea7 	bl	8041564 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8040816:	2100      	movs	r1, #0
 8040818:	2000      	movs	r0, #0
 804081a:	f000 febd 	bl	8041598 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 804081e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8040822:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8040824:	bf00      	nop
 8040826:	4b23      	ldr	r3, [pc, #140]	; (80408b4 <main+0xf8>)
 8040828:	681b      	ldr	r3, [r3, #0]
 804082a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 804082e:	2b00      	cmp	r3, #0
 8040830:	d104      	bne.n	804083c <main+0x80>
 8040832:	687b      	ldr	r3, [r7, #4]
 8040834:	1e5a      	subs	r2, r3, #1
 8040836:	607a      	str	r2, [r7, #4]
 8040838:	2b00      	cmp	r3, #0
 804083a:	dcf4      	bgt.n	8040826 <main+0x6a>
if ( timeout < 0 )
 804083c:	687b      	ldr	r3, [r7, #4]
 804083e:	2b00      	cmp	r3, #0
 8040840:	da01      	bge.n	8040846 <main+0x8a>
{
Error_Handler();
 8040842:	f000 f983 	bl	8040b4c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8040846:	f000 f8f7 	bl	8040a38 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 804084a:	f000 f8a9 	bl	80409a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Starting Application v%d.%d (CM7)\r\n",application_ver[0], application_ver[1]);
 804084e:	2300      	movs	r3, #0
 8040850:	2201      	movs	r2, #1
 8040852:	4619      	mov	r1, r3
 8040854:	4818      	ldr	r0, [pc, #96]	; (80408b8 <main+0xfc>)
 8040856:	f004 ff5f 	bl	8045718 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 804085a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 804085e:	4817      	ldr	r0, [pc, #92]	; (80408bc <main+0x100>)
 8040860:	f000 fe65 	bl	804152e <HAL_GPIO_TogglePin>
	  HAL_Delay(300);
 8040864:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8040868:	f000 fb84 	bl	8040f74 <HAL_Delay>

	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 804086c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8040870:	4812      	ldr	r0, [pc, #72]	; (80408bc <main+0x100>)
 8040872:	f000 fe5c 	bl	804152e <HAL_GPIO_TogglePin>
	  HAL_Delay(300);
 8040876:	f44f 7096 	mov.w	r0, #300	; 0x12c
 804087a:	f000 fb7b 	bl	8040f74 <HAL_Delay>

	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 804087e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8040882:	480e      	ldr	r0, [pc, #56]	; (80408bc <main+0x100>)
 8040884:	f000 fe53 	bl	804152e <HAL_GPIO_TogglePin>
	  HAL_Delay(300);
 8040888:	f44f 7096 	mov.w	r0, #300	; 0x12c
 804088c:	f000 fb72 	bl	8040f74 <HAL_Delay>

	  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8040890:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8040894:	4809      	ldr	r0, [pc, #36]	; (80408bc <main+0x100>)
 8040896:	f000 fe4a 	bl	804152e <HAL_GPIO_TogglePin>
	  HAL_Delay(300);
 804089a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 804089e:	f000 fb69 	bl	8040f74 <HAL_Delay>

	  printf("Application running...\r\n");
 80408a2:	4807      	ldr	r0, [pc, #28]	; (80408c0 <main+0x104>)
 80408a4:	f004 ffbe 	bl	8045824 <puts>
	  HAL_Delay(600);
 80408a8:	f44f 7016 	mov.w	r0, #600	; 0x258
 80408ac:	f000 fb62 	bl	8040f74 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80408b0:	e7d3      	b.n	804085a <main+0x9e>
 80408b2:	bf00      	nop
 80408b4:	58024400 	.word	0x58024400
 80408b8:	08046738 	.word	0x08046738
 80408bc:	58022000 	.word	0x58022000
 80408c0:	0804675c 	.word	0x0804675c

080408c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80408c4:	b580      	push	{r7, lr}
 80408c6:	b09c      	sub	sp, #112	; 0x70
 80408c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80408ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80408ce:	224c      	movs	r2, #76	; 0x4c
 80408d0:	2100      	movs	r1, #0
 80408d2:	4618      	mov	r0, r3
 80408d4:	f004 ff18 	bl	8045708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80408d8:	1d3b      	adds	r3, r7, #4
 80408da:	2220      	movs	r2, #32
 80408dc:	2100      	movs	r1, #0
 80408de:	4618      	mov	r0, r3
 80408e0:	f004 ff12 	bl	8045708 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80408e4:	2004      	movs	r0, #4
 80408e6:	f000 fe6b 	bl	80415c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80408ea:	2300      	movs	r3, #0
 80408ec:	603b      	str	r3, [r7, #0]
 80408ee:	4b2a      	ldr	r3, [pc, #168]	; (8040998 <SystemClock_Config+0xd4>)
 80408f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80408f2:	4a29      	ldr	r2, [pc, #164]	; (8040998 <SystemClock_Config+0xd4>)
 80408f4:	f023 0301 	bic.w	r3, r3, #1
 80408f8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80408fa:	4b27      	ldr	r3, [pc, #156]	; (8040998 <SystemClock_Config+0xd4>)
 80408fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80408fe:	f003 0301 	and.w	r3, r3, #1
 8040902:	603b      	str	r3, [r7, #0]
 8040904:	4b25      	ldr	r3, [pc, #148]	; (804099c <SystemClock_Config+0xd8>)
 8040906:	699b      	ldr	r3, [r3, #24]
 8040908:	4a24      	ldr	r2, [pc, #144]	; (804099c <SystemClock_Config+0xd8>)
 804090a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 804090e:	6193      	str	r3, [r2, #24]
 8040910:	4b22      	ldr	r3, [pc, #136]	; (804099c <SystemClock_Config+0xd8>)
 8040912:	699b      	ldr	r3, [r3, #24]
 8040914:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8040918:	603b      	str	r3, [r7, #0]
 804091a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 804091c:	bf00      	nop
 804091e:	4b1f      	ldr	r3, [pc, #124]	; (804099c <SystemClock_Config+0xd8>)
 8040920:	699b      	ldr	r3, [r3, #24]
 8040922:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8040926:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 804092a:	d1f8      	bne.n	804091e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 804092c:	2302      	movs	r3, #2
 804092e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8040930:	2301      	movs	r3, #1
 8040932:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8040934:	2340      	movs	r3, #64	; 0x40
 8040936:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8040938:	2300      	movs	r3, #0
 804093a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 804093c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8040940:	4618      	mov	r0, r3
 8040942:	f000 fe97 	bl	8041674 <HAL_RCC_OscConfig>
 8040946:	4603      	mov	r3, r0
 8040948:	2b00      	cmp	r3, #0
 804094a:	d001      	beq.n	8040950 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 804094c:	f000 f8fe 	bl	8040b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8040950:	233f      	movs	r3, #63	; 0x3f
 8040952:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8040954:	2300      	movs	r3, #0
 8040956:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8040958:	2300      	movs	r3, #0
 804095a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 804095c:	2300      	movs	r3, #0
 804095e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8040960:	2300      	movs	r3, #0
 8040962:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8040964:	2300      	movs	r3, #0
 8040966:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8040968:	2300      	movs	r3, #0
 804096a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 804096c:	2300      	movs	r3, #0
 804096e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8040970:	1d3b      	adds	r3, r7, #4
 8040972:	2100      	movs	r1, #0
 8040974:	4618      	mov	r0, r3
 8040976:	f001 fad7 	bl	8041f28 <HAL_RCC_ClockConfig>
 804097a:	4603      	mov	r3, r0
 804097c:	2b00      	cmp	r3, #0
 804097e:	d001      	beq.n	8040984 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8040980:	f000 f8e4 	bl	8040b4c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8040984:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8040988:	2100      	movs	r1, #0
 804098a:	2000      	movs	r0, #0
 804098c:	f001 fc82 	bl	8042294 <HAL_RCC_MCOConfig>
}
 8040990:	bf00      	nop
 8040992:	3770      	adds	r7, #112	; 0x70
 8040994:	46bd      	mov	sp, r7
 8040996:	bd80      	pop	{r7, pc}
 8040998:	58000400 	.word	0x58000400
 804099c:	58024800 	.word	0x58024800

080409a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80409a0:	b580      	push	{r7, lr}
 80409a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80409a4:	4b22      	ldr	r3, [pc, #136]	; (8040a30 <MX_USART1_UART_Init+0x90>)
 80409a6:	4a23      	ldr	r2, [pc, #140]	; (8040a34 <MX_USART1_UART_Init+0x94>)
 80409a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80409aa:	4b21      	ldr	r3, [pc, #132]	; (8040a30 <MX_USART1_UART_Init+0x90>)
 80409ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80409b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80409b2:	4b1f      	ldr	r3, [pc, #124]	; (8040a30 <MX_USART1_UART_Init+0x90>)
 80409b4:	2200      	movs	r2, #0
 80409b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80409b8:	4b1d      	ldr	r3, [pc, #116]	; (8040a30 <MX_USART1_UART_Init+0x90>)
 80409ba:	2200      	movs	r2, #0
 80409bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80409be:	4b1c      	ldr	r3, [pc, #112]	; (8040a30 <MX_USART1_UART_Init+0x90>)
 80409c0:	2200      	movs	r2, #0
 80409c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80409c4:	4b1a      	ldr	r3, [pc, #104]	; (8040a30 <MX_USART1_UART_Init+0x90>)
 80409c6:	220c      	movs	r2, #12
 80409c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80409ca:	4b19      	ldr	r3, [pc, #100]	; (8040a30 <MX_USART1_UART_Init+0x90>)
 80409cc:	2200      	movs	r2, #0
 80409ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80409d0:	4b17      	ldr	r3, [pc, #92]	; (8040a30 <MX_USART1_UART_Init+0x90>)
 80409d2:	2200      	movs	r2, #0
 80409d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80409d6:	4b16      	ldr	r3, [pc, #88]	; (8040a30 <MX_USART1_UART_Init+0x90>)
 80409d8:	2200      	movs	r2, #0
 80409da:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80409dc:	4b14      	ldr	r3, [pc, #80]	; (8040a30 <MX_USART1_UART_Init+0x90>)
 80409de:	2200      	movs	r2, #0
 80409e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80409e2:	4b13      	ldr	r3, [pc, #76]	; (8040a30 <MX_USART1_UART_Init+0x90>)
 80409e4:	2200      	movs	r2, #0
 80409e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80409e8:	4811      	ldr	r0, [pc, #68]	; (8040a30 <MX_USART1_UART_Init+0x90>)
 80409ea:	f003 fcff 	bl	80443ec <HAL_UART_Init>
 80409ee:	4603      	mov	r3, r0
 80409f0:	2b00      	cmp	r3, #0
 80409f2:	d001      	beq.n	80409f8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80409f4:	f000 f8aa 	bl	8040b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80409f8:	2100      	movs	r1, #0
 80409fa:	480d      	ldr	r0, [pc, #52]	; (8040a30 <MX_USART1_UART_Init+0x90>)
 80409fc:	f004 fd8f 	bl	804551e <HAL_UARTEx_SetTxFifoThreshold>
 8040a00:	4603      	mov	r3, r0
 8040a02:	2b00      	cmp	r3, #0
 8040a04:	d001      	beq.n	8040a0a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8040a06:	f000 f8a1 	bl	8040b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8040a0a:	2100      	movs	r1, #0
 8040a0c:	4808      	ldr	r0, [pc, #32]	; (8040a30 <MX_USART1_UART_Init+0x90>)
 8040a0e:	f004 fdc4 	bl	804559a <HAL_UARTEx_SetRxFifoThreshold>
 8040a12:	4603      	mov	r3, r0
 8040a14:	2b00      	cmp	r3, #0
 8040a16:	d001      	beq.n	8040a1c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8040a18:	f000 f898 	bl	8040b4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8040a1c:	4804      	ldr	r0, [pc, #16]	; (8040a30 <MX_USART1_UART_Init+0x90>)
 8040a1e:	f004 fd45 	bl	80454ac <HAL_UARTEx_DisableFifoMode>
 8040a22:	4603      	mov	r3, r0
 8040a24:	2b00      	cmp	r3, #0
 8040a26:	d001      	beq.n	8040a2c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8040a28:	f000 f890 	bl	8040b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8040a2c:	bf00      	nop
 8040a2e:	bd80      	pop	{r7, pc}
 8040a30:	24000090 	.word	0x24000090
 8040a34:	40011000 	.word	0x40011000

08040a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040a38:	b580      	push	{r7, lr}
 8040a3a:	b08a      	sub	sp, #40	; 0x28
 8040a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040a3e:	f107 0314 	add.w	r3, r7, #20
 8040a42:	2200      	movs	r2, #0
 8040a44:	601a      	str	r2, [r3, #0]
 8040a46:	605a      	str	r2, [r3, #4]
 8040a48:	609a      	str	r2, [r3, #8]
 8040a4a:	60da      	str	r2, [r3, #12]
 8040a4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8040a4e:	4b33      	ldr	r3, [pc, #204]	; (8040b1c <MX_GPIO_Init+0xe4>)
 8040a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040a54:	4a31      	ldr	r2, [pc, #196]	; (8040b1c <MX_GPIO_Init+0xe4>)
 8040a56:	f043 0304 	orr.w	r3, r3, #4
 8040a5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8040a5e:	4b2f      	ldr	r3, [pc, #188]	; (8040b1c <MX_GPIO_Init+0xe4>)
 8040a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040a64:	f003 0304 	and.w	r3, r3, #4
 8040a68:	613b      	str	r3, [r7, #16]
 8040a6a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8040a6c:	4b2b      	ldr	r3, [pc, #172]	; (8040b1c <MX_GPIO_Init+0xe4>)
 8040a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040a72:	4a2a      	ldr	r2, [pc, #168]	; (8040b1c <MX_GPIO_Init+0xe4>)
 8040a74:	f043 0301 	orr.w	r3, r3, #1
 8040a78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8040a7c:	4b27      	ldr	r3, [pc, #156]	; (8040b1c <MX_GPIO_Init+0xe4>)
 8040a7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040a82:	f003 0301 	and.w	r3, r3, #1
 8040a86:	60fb      	str	r3, [r7, #12]
 8040a88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8040a8a:	4b24      	ldr	r3, [pc, #144]	; (8040b1c <MX_GPIO_Init+0xe4>)
 8040a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040a90:	4a22      	ldr	r2, [pc, #136]	; (8040b1c <MX_GPIO_Init+0xe4>)
 8040a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8040a96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8040a9a:	4b20      	ldr	r3, [pc, #128]	; (8040b1c <MX_GPIO_Init+0xe4>)
 8040a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8040aa4:	60bb      	str	r3, [r7, #8]
 8040aa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8040aa8:	4b1c      	ldr	r3, [pc, #112]	; (8040b1c <MX_GPIO_Init+0xe4>)
 8040aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040aae:	4a1b      	ldr	r2, [pc, #108]	; (8040b1c <MX_GPIO_Init+0xe4>)
 8040ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8040ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8040ab8:	4b18      	ldr	r3, [pc, #96]	; (8040b1c <MX_GPIO_Init+0xe4>)
 8040aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8040ac2:	607b      	str	r3, [r7, #4]
 8040ac4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8040ac6:	2200      	movs	r2, #0
 8040ac8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8040acc:	4814      	ldr	r0, [pc, #80]	; (8040b20 <MX_GPIO_Init+0xe8>)
 8040ace:	f000 fd15 	bl	80414fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8040ad2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8040ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040ad8:	2302      	movs	r3, #2
 8040ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040adc:	2300      	movs	r3, #0
 8040ade:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040ae0:	2300      	movs	r3, #0
 8040ae2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8040ae4:	2300      	movs	r3, #0
 8040ae6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8040ae8:	f107 0314 	add.w	r3, r7, #20
 8040aec:	4619      	mov	r1, r3
 8040aee:	480d      	ldr	r0, [pc, #52]	; (8040b24 <MX_GPIO_Init+0xec>)
 8040af0:	f000 fb54 	bl	804119c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8040af4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8040af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040afa:	2301      	movs	r3, #1
 8040afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8040afe:	2301      	movs	r3, #1
 8040b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040b02:	2300      	movs	r3, #0
 8040b04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8040b06:	f107 0314 	add.w	r3, r7, #20
 8040b0a:	4619      	mov	r1, r3
 8040b0c:	4804      	ldr	r0, [pc, #16]	; (8040b20 <MX_GPIO_Init+0xe8>)
 8040b0e:	f000 fb45 	bl	804119c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8040b12:	bf00      	nop
 8040b14:	3728      	adds	r7, #40	; 0x28
 8040b16:	46bd      	mov	sp, r7
 8040b18:	bd80      	pop	{r7, pc}
 8040b1a:	bf00      	nop
 8040b1c:	58024400 	.word	0x58024400
 8040b20:	58022000 	.word	0x58022000
 8040b24:	58020000 	.word	0x58020000

08040b28 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8040b28:	b580      	push	{r7, lr}
 8040b2a:	b082      	sub	sp, #8
 8040b2c:	af00      	add	r7, sp, #0
 8040b2e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8040b30:	1d39      	adds	r1, r7, #4
 8040b32:	f04f 33ff 	mov.w	r3, #4294967295
 8040b36:	2201      	movs	r2, #1
 8040b38:	4803      	ldr	r0, [pc, #12]	; (8040b48 <__io_putchar+0x20>)
 8040b3a:	f003 fca7 	bl	804448c <HAL_UART_Transmit>

  return ch;
 8040b3e:	687b      	ldr	r3, [r7, #4]
}
 8040b40:	4618      	mov	r0, r3
 8040b42:	3708      	adds	r7, #8
 8040b44:	46bd      	mov	sp, r7
 8040b46:	bd80      	pop	{r7, pc}
 8040b48:	24000090 	.word	0x24000090

08040b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040b4c:	b480      	push	{r7}
 8040b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040b50:	b672      	cpsid	i
}
 8040b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040b54:	e7fe      	b.n	8040b54 <Error_Handler+0x8>
	...

08040b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040b58:	b480      	push	{r7}
 8040b5a:	b083      	sub	sp, #12
 8040b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040b5e:	4b0a      	ldr	r3, [pc, #40]	; (8040b88 <HAL_MspInit+0x30>)
 8040b60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8040b64:	4a08      	ldr	r2, [pc, #32]	; (8040b88 <HAL_MspInit+0x30>)
 8040b66:	f043 0302 	orr.w	r3, r3, #2
 8040b6a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8040b6e:	4b06      	ldr	r3, [pc, #24]	; (8040b88 <HAL_MspInit+0x30>)
 8040b70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8040b74:	f003 0302 	and.w	r3, r3, #2
 8040b78:	607b      	str	r3, [r7, #4]
 8040b7a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040b7c:	bf00      	nop
 8040b7e:	370c      	adds	r7, #12
 8040b80:	46bd      	mov	sp, r7
 8040b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b86:	4770      	bx	lr
 8040b88:	58024400 	.word	0x58024400

08040b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8040b8c:	b580      	push	{r7, lr}
 8040b8e:	b0bc      	sub	sp, #240	; 0xf0
 8040b90:	af00      	add	r7, sp, #0
 8040b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040b94:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8040b98:	2200      	movs	r2, #0
 8040b9a:	601a      	str	r2, [r3, #0]
 8040b9c:	605a      	str	r2, [r3, #4]
 8040b9e:	609a      	str	r2, [r3, #8]
 8040ba0:	60da      	str	r2, [r3, #12]
 8040ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8040ba4:	f107 0310 	add.w	r3, r7, #16
 8040ba8:	22c8      	movs	r2, #200	; 0xc8
 8040baa:	2100      	movs	r1, #0
 8040bac:	4618      	mov	r0, r3
 8040bae:	f004 fdab 	bl	8045708 <memset>
  if(huart->Instance==USART1)
 8040bb2:	687b      	ldr	r3, [r7, #4]
 8040bb4:	681b      	ldr	r3, [r3, #0]
 8040bb6:	4a27      	ldr	r2, [pc, #156]	; (8040c54 <HAL_UART_MspInit+0xc8>)
 8040bb8:	4293      	cmp	r3, r2
 8040bba:	d146      	bne.n	8040c4a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8040bbc:	f04f 0201 	mov.w	r2, #1
 8040bc0:	f04f 0300 	mov.w	r3, #0
 8040bc4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8040bc8:	2300      	movs	r3, #0
 8040bca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8040bce:	f107 0310 	add.w	r3, r7, #16
 8040bd2:	4618      	mov	r0, r3
 8040bd4:	f001 fd9e 	bl	8042714 <HAL_RCCEx_PeriphCLKConfig>
 8040bd8:	4603      	mov	r3, r0
 8040bda:	2b00      	cmp	r3, #0
 8040bdc:	d001      	beq.n	8040be2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8040bde:	f7ff ffb5 	bl	8040b4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8040be2:	4b1d      	ldr	r3, [pc, #116]	; (8040c58 <HAL_UART_MspInit+0xcc>)
 8040be4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8040be8:	4a1b      	ldr	r2, [pc, #108]	; (8040c58 <HAL_UART_MspInit+0xcc>)
 8040bea:	f043 0310 	orr.w	r3, r3, #16
 8040bee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8040bf2:	4b19      	ldr	r3, [pc, #100]	; (8040c58 <HAL_UART_MspInit+0xcc>)
 8040bf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8040bf8:	f003 0310 	and.w	r3, r3, #16
 8040bfc:	60fb      	str	r3, [r7, #12]
 8040bfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8040c00:	4b15      	ldr	r3, [pc, #84]	; (8040c58 <HAL_UART_MspInit+0xcc>)
 8040c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040c06:	4a14      	ldr	r2, [pc, #80]	; (8040c58 <HAL_UART_MspInit+0xcc>)
 8040c08:	f043 0301 	orr.w	r3, r3, #1
 8040c0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8040c10:	4b11      	ldr	r3, [pc, #68]	; (8040c58 <HAL_UART_MspInit+0xcc>)
 8040c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8040c16:	f003 0301 	and.w	r3, r3, #1
 8040c1a:	60bb      	str	r3, [r7, #8]
 8040c1c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8040c1e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8040c22:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040c26:	2302      	movs	r3, #2
 8040c28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040c2c:	2300      	movs	r3, #0
 8040c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040c32:	2300      	movs	r3, #0
 8040c34:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8040c38:	2307      	movs	r3, #7
 8040c3a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040c3e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8040c42:	4619      	mov	r1, r3
 8040c44:	4805      	ldr	r0, [pc, #20]	; (8040c5c <HAL_UART_MspInit+0xd0>)
 8040c46:	f000 faa9 	bl	804119c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8040c4a:	bf00      	nop
 8040c4c:	37f0      	adds	r7, #240	; 0xf0
 8040c4e:	46bd      	mov	sp, r7
 8040c50:	bd80      	pop	{r7, pc}
 8040c52:	bf00      	nop
 8040c54:	40011000 	.word	0x40011000
 8040c58:	58024400 	.word	0x58024400
 8040c5c:	58020000 	.word	0x58020000

08040c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8040c60:	b480      	push	{r7}
 8040c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8040c64:	e7fe      	b.n	8040c64 <NMI_Handler+0x4>

08040c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8040c66:	b480      	push	{r7}
 8040c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8040c6a:	e7fe      	b.n	8040c6a <HardFault_Handler+0x4>

08040c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040c6c:	b480      	push	{r7}
 8040c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040c70:	e7fe      	b.n	8040c70 <MemManage_Handler+0x4>

08040c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8040c72:	b480      	push	{r7}
 8040c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8040c76:	e7fe      	b.n	8040c76 <BusFault_Handler+0x4>

08040c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040c78:	b480      	push	{r7}
 8040c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8040c7c:	e7fe      	b.n	8040c7c <UsageFault_Handler+0x4>

08040c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8040c7e:	b480      	push	{r7}
 8040c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8040c82:	bf00      	nop
 8040c84:	46bd      	mov	sp, r7
 8040c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c8a:	4770      	bx	lr

08040c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8040c8c:	b480      	push	{r7}
 8040c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8040c90:	bf00      	nop
 8040c92:	46bd      	mov	sp, r7
 8040c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c98:	4770      	bx	lr

08040c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8040c9a:	b480      	push	{r7}
 8040c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8040c9e:	bf00      	nop
 8040ca0:	46bd      	mov	sp, r7
 8040ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ca6:	4770      	bx	lr

08040ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040ca8:	b580      	push	{r7, lr}
 8040caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8040cac:	f000 f942 	bl	8040f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8040cb0:	bf00      	nop
 8040cb2:	bd80      	pop	{r7, pc}

08040cb4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8040cb4:	b580      	push	{r7, lr}
 8040cb6:	b086      	sub	sp, #24
 8040cb8:	af00      	add	r7, sp, #0
 8040cba:	60f8      	str	r0, [r7, #12]
 8040cbc:	60b9      	str	r1, [r7, #8]
 8040cbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040cc0:	2300      	movs	r3, #0
 8040cc2:	617b      	str	r3, [r7, #20]
 8040cc4:	e00a      	b.n	8040cdc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8040cc6:	f3af 8000 	nop.w
 8040cca:	4601      	mov	r1, r0
 8040ccc:	68bb      	ldr	r3, [r7, #8]
 8040cce:	1c5a      	adds	r2, r3, #1
 8040cd0:	60ba      	str	r2, [r7, #8]
 8040cd2:	b2ca      	uxtb	r2, r1
 8040cd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040cd6:	697b      	ldr	r3, [r7, #20]
 8040cd8:	3301      	adds	r3, #1
 8040cda:	617b      	str	r3, [r7, #20]
 8040cdc:	697a      	ldr	r2, [r7, #20]
 8040cde:	687b      	ldr	r3, [r7, #4]
 8040ce0:	429a      	cmp	r2, r3
 8040ce2:	dbf0      	blt.n	8040cc6 <_read+0x12>
  }

  return len;
 8040ce4:	687b      	ldr	r3, [r7, #4]
}
 8040ce6:	4618      	mov	r0, r3
 8040ce8:	3718      	adds	r7, #24
 8040cea:	46bd      	mov	sp, r7
 8040cec:	bd80      	pop	{r7, pc}

08040cee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8040cee:	b580      	push	{r7, lr}
 8040cf0:	b086      	sub	sp, #24
 8040cf2:	af00      	add	r7, sp, #0
 8040cf4:	60f8      	str	r0, [r7, #12]
 8040cf6:	60b9      	str	r1, [r7, #8]
 8040cf8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040cfa:	2300      	movs	r3, #0
 8040cfc:	617b      	str	r3, [r7, #20]
 8040cfe:	e009      	b.n	8040d14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8040d00:	68bb      	ldr	r3, [r7, #8]
 8040d02:	1c5a      	adds	r2, r3, #1
 8040d04:	60ba      	str	r2, [r7, #8]
 8040d06:	781b      	ldrb	r3, [r3, #0]
 8040d08:	4618      	mov	r0, r3
 8040d0a:	f7ff ff0d 	bl	8040b28 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040d0e:	697b      	ldr	r3, [r7, #20]
 8040d10:	3301      	adds	r3, #1
 8040d12:	617b      	str	r3, [r7, #20]
 8040d14:	697a      	ldr	r2, [r7, #20]
 8040d16:	687b      	ldr	r3, [r7, #4]
 8040d18:	429a      	cmp	r2, r3
 8040d1a:	dbf1      	blt.n	8040d00 <_write+0x12>
  }
  return len;
 8040d1c:	687b      	ldr	r3, [r7, #4]
}
 8040d1e:	4618      	mov	r0, r3
 8040d20:	3718      	adds	r7, #24
 8040d22:	46bd      	mov	sp, r7
 8040d24:	bd80      	pop	{r7, pc}

08040d26 <_close>:

int _close(int file)
{
 8040d26:	b480      	push	{r7}
 8040d28:	b083      	sub	sp, #12
 8040d2a:	af00      	add	r7, sp, #0
 8040d2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8040d2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8040d32:	4618      	mov	r0, r3
 8040d34:	370c      	adds	r7, #12
 8040d36:	46bd      	mov	sp, r7
 8040d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d3c:	4770      	bx	lr

08040d3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8040d3e:	b480      	push	{r7}
 8040d40:	b083      	sub	sp, #12
 8040d42:	af00      	add	r7, sp, #0
 8040d44:	6078      	str	r0, [r7, #4]
 8040d46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8040d48:	683b      	ldr	r3, [r7, #0]
 8040d4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8040d4e:	605a      	str	r2, [r3, #4]
  return 0;
 8040d50:	2300      	movs	r3, #0
}
 8040d52:	4618      	mov	r0, r3
 8040d54:	370c      	adds	r7, #12
 8040d56:	46bd      	mov	sp, r7
 8040d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d5c:	4770      	bx	lr

08040d5e <_isatty>:

int _isatty(int file)
{
 8040d5e:	b480      	push	{r7}
 8040d60:	b083      	sub	sp, #12
 8040d62:	af00      	add	r7, sp, #0
 8040d64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8040d66:	2301      	movs	r3, #1
}
 8040d68:	4618      	mov	r0, r3
 8040d6a:	370c      	adds	r7, #12
 8040d6c:	46bd      	mov	sp, r7
 8040d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d72:	4770      	bx	lr

08040d74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8040d74:	b480      	push	{r7}
 8040d76:	b085      	sub	sp, #20
 8040d78:	af00      	add	r7, sp, #0
 8040d7a:	60f8      	str	r0, [r7, #12]
 8040d7c:	60b9      	str	r1, [r7, #8]
 8040d7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8040d80:	2300      	movs	r3, #0
}
 8040d82:	4618      	mov	r0, r3
 8040d84:	3714      	adds	r7, #20
 8040d86:	46bd      	mov	sp, r7
 8040d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d8c:	4770      	bx	lr
	...

08040d90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8040d90:	b580      	push	{r7, lr}
 8040d92:	b086      	sub	sp, #24
 8040d94:	af00      	add	r7, sp, #0
 8040d96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8040d98:	4a14      	ldr	r2, [pc, #80]	; (8040dec <_sbrk+0x5c>)
 8040d9a:	4b15      	ldr	r3, [pc, #84]	; (8040df0 <_sbrk+0x60>)
 8040d9c:	1ad3      	subs	r3, r2, r3
 8040d9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8040da0:	697b      	ldr	r3, [r7, #20]
 8040da2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8040da4:	4b13      	ldr	r3, [pc, #76]	; (8040df4 <_sbrk+0x64>)
 8040da6:	681b      	ldr	r3, [r3, #0]
 8040da8:	2b00      	cmp	r3, #0
 8040daa:	d102      	bne.n	8040db2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8040dac:	4b11      	ldr	r3, [pc, #68]	; (8040df4 <_sbrk+0x64>)
 8040dae:	4a12      	ldr	r2, [pc, #72]	; (8040df8 <_sbrk+0x68>)
 8040db0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8040db2:	4b10      	ldr	r3, [pc, #64]	; (8040df4 <_sbrk+0x64>)
 8040db4:	681a      	ldr	r2, [r3, #0]
 8040db6:	687b      	ldr	r3, [r7, #4]
 8040db8:	4413      	add	r3, r2
 8040dba:	693a      	ldr	r2, [r7, #16]
 8040dbc:	429a      	cmp	r2, r3
 8040dbe:	d207      	bcs.n	8040dd0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8040dc0:	f004 fc78 	bl	80456b4 <__errno>
 8040dc4:	4603      	mov	r3, r0
 8040dc6:	220c      	movs	r2, #12
 8040dc8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8040dca:	f04f 33ff 	mov.w	r3, #4294967295
 8040dce:	e009      	b.n	8040de4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8040dd0:	4b08      	ldr	r3, [pc, #32]	; (8040df4 <_sbrk+0x64>)
 8040dd2:	681b      	ldr	r3, [r3, #0]
 8040dd4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8040dd6:	4b07      	ldr	r3, [pc, #28]	; (8040df4 <_sbrk+0x64>)
 8040dd8:	681a      	ldr	r2, [r3, #0]
 8040dda:	687b      	ldr	r3, [r7, #4]
 8040ddc:	4413      	add	r3, r2
 8040dde:	4a05      	ldr	r2, [pc, #20]	; (8040df4 <_sbrk+0x64>)
 8040de0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8040de2:	68fb      	ldr	r3, [r7, #12]
}
 8040de4:	4618      	mov	r0, r3
 8040de6:	3718      	adds	r7, #24
 8040de8:	46bd      	mov	sp, r7
 8040dea:	bd80      	pop	{r7, pc}
 8040dec:	24080000 	.word	0x24080000
 8040df0:	00000400 	.word	0x00000400
 8040df4:	24000124 	.word	0x24000124
 8040df8:	24000140 	.word	0x24000140

08040dfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8040dfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8040e34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8040e00:	f7ff fc40 	bl	8040684 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8040e04:	480c      	ldr	r0, [pc, #48]	; (8040e38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8040e06:	490d      	ldr	r1, [pc, #52]	; (8040e3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8040e08:	4a0d      	ldr	r2, [pc, #52]	; (8040e40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8040e0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8040e0c:	e002      	b.n	8040e14 <LoopCopyDataInit>

08040e0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8040e0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8040e10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8040e12:	3304      	adds	r3, #4

08040e14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8040e14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8040e16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8040e18:	d3f9      	bcc.n	8040e0e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8040e1a:	4a0a      	ldr	r2, [pc, #40]	; (8040e44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8040e1c:	4c0a      	ldr	r4, [pc, #40]	; (8040e48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8040e1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8040e20:	e001      	b.n	8040e26 <LoopFillZerobss>

08040e22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8040e22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8040e24:	3204      	adds	r2, #4

08040e26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8040e26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8040e28:	d3fb      	bcc.n	8040e22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8040e2a:	f004 fc49 	bl	80456c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8040e2e:	f7ff fcc5 	bl	80407bc <main>
  bx  lr
 8040e32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8040e34:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8040e38:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8040e3c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8040e40:	08046854 	.word	0x08046854
  ldr r2, =_sbss
 8040e44:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8040e48:	2400013c 	.word	0x2400013c

08040e4c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8040e4c:	e7fe      	b.n	8040e4c <ADC3_IRQHandler>
	...

08040e50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040e50:	b580      	push	{r7, lr}
 8040e52:	b082      	sub	sp, #8
 8040e54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8040e56:	2003      	movs	r0, #3
 8040e58:	f000 f96e 	bl	8041138 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8040e5c:	f001 fa84 	bl	8042368 <HAL_RCC_GetSysClockFreq>
 8040e60:	4602      	mov	r2, r0
 8040e62:	4b15      	ldr	r3, [pc, #84]	; (8040eb8 <HAL_Init+0x68>)
 8040e64:	699b      	ldr	r3, [r3, #24]
 8040e66:	0a1b      	lsrs	r3, r3, #8
 8040e68:	f003 030f 	and.w	r3, r3, #15
 8040e6c:	4913      	ldr	r1, [pc, #76]	; (8040ebc <HAL_Init+0x6c>)
 8040e6e:	5ccb      	ldrb	r3, [r1, r3]
 8040e70:	f003 031f 	and.w	r3, r3, #31
 8040e74:	fa22 f303 	lsr.w	r3, r2, r3
 8040e78:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8040e7a:	4b0f      	ldr	r3, [pc, #60]	; (8040eb8 <HAL_Init+0x68>)
 8040e7c:	699b      	ldr	r3, [r3, #24]
 8040e7e:	f003 030f 	and.w	r3, r3, #15
 8040e82:	4a0e      	ldr	r2, [pc, #56]	; (8040ebc <HAL_Init+0x6c>)
 8040e84:	5cd3      	ldrb	r3, [r2, r3]
 8040e86:	f003 031f 	and.w	r3, r3, #31
 8040e8a:	687a      	ldr	r2, [r7, #4]
 8040e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8040e90:	4a0b      	ldr	r2, [pc, #44]	; (8040ec0 <HAL_Init+0x70>)
 8040e92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8040e94:	4a0b      	ldr	r2, [pc, #44]	; (8040ec4 <HAL_Init+0x74>)
 8040e96:	687b      	ldr	r3, [r7, #4]
 8040e98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8040e9a:	2000      	movs	r0, #0
 8040e9c:	f000 f814 	bl	8040ec8 <HAL_InitTick>
 8040ea0:	4603      	mov	r3, r0
 8040ea2:	2b00      	cmp	r3, #0
 8040ea4:	d001      	beq.n	8040eaa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8040ea6:	2301      	movs	r3, #1
 8040ea8:	e002      	b.n	8040eb0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8040eaa:	f7ff fe55 	bl	8040b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8040eae:	2300      	movs	r3, #0
}
 8040eb0:	4618      	mov	r0, r3
 8040eb2:	3708      	adds	r7, #8
 8040eb4:	46bd      	mov	sp, r7
 8040eb6:	bd80      	pop	{r7, pc}
 8040eb8:	58024400 	.word	0x58024400
 8040ebc:	08046774 	.word	0x08046774
 8040ec0:	24000004 	.word	0x24000004
 8040ec4:	24000000 	.word	0x24000000

08040ec8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040ec8:	b580      	push	{r7, lr}
 8040eca:	b082      	sub	sp, #8
 8040ecc:	af00      	add	r7, sp, #0
 8040ece:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8040ed0:	4b15      	ldr	r3, [pc, #84]	; (8040f28 <HAL_InitTick+0x60>)
 8040ed2:	781b      	ldrb	r3, [r3, #0]
 8040ed4:	2b00      	cmp	r3, #0
 8040ed6:	d101      	bne.n	8040edc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8040ed8:	2301      	movs	r3, #1
 8040eda:	e021      	b.n	8040f20 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8040edc:	4b13      	ldr	r3, [pc, #76]	; (8040f2c <HAL_InitTick+0x64>)
 8040ede:	681a      	ldr	r2, [r3, #0]
 8040ee0:	4b11      	ldr	r3, [pc, #68]	; (8040f28 <HAL_InitTick+0x60>)
 8040ee2:	781b      	ldrb	r3, [r3, #0]
 8040ee4:	4619      	mov	r1, r3
 8040ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8040eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8040eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8040ef2:	4618      	mov	r0, r3
 8040ef4:	f000 f945 	bl	8041182 <HAL_SYSTICK_Config>
 8040ef8:	4603      	mov	r3, r0
 8040efa:	2b00      	cmp	r3, #0
 8040efc:	d001      	beq.n	8040f02 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8040efe:	2301      	movs	r3, #1
 8040f00:	e00e      	b.n	8040f20 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040f02:	687b      	ldr	r3, [r7, #4]
 8040f04:	2b0f      	cmp	r3, #15
 8040f06:	d80a      	bhi.n	8040f1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8040f08:	2200      	movs	r2, #0
 8040f0a:	6879      	ldr	r1, [r7, #4]
 8040f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8040f10:	f000 f91d 	bl	804114e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8040f14:	4a06      	ldr	r2, [pc, #24]	; (8040f30 <HAL_InitTick+0x68>)
 8040f16:	687b      	ldr	r3, [r7, #4]
 8040f18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8040f1a:	2300      	movs	r3, #0
 8040f1c:	e000      	b.n	8040f20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8040f1e:	2301      	movs	r3, #1
}
 8040f20:	4618      	mov	r0, r3
 8040f22:	3708      	adds	r7, #8
 8040f24:	46bd      	mov	sp, r7
 8040f26:	bd80      	pop	{r7, pc}
 8040f28:	2400000c 	.word	0x2400000c
 8040f2c:	24000000 	.word	0x24000000
 8040f30:	24000008 	.word	0x24000008

08040f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040f34:	b480      	push	{r7}
 8040f36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8040f38:	4b06      	ldr	r3, [pc, #24]	; (8040f54 <HAL_IncTick+0x20>)
 8040f3a:	781b      	ldrb	r3, [r3, #0]
 8040f3c:	461a      	mov	r2, r3
 8040f3e:	4b06      	ldr	r3, [pc, #24]	; (8040f58 <HAL_IncTick+0x24>)
 8040f40:	681b      	ldr	r3, [r3, #0]
 8040f42:	4413      	add	r3, r2
 8040f44:	4a04      	ldr	r2, [pc, #16]	; (8040f58 <HAL_IncTick+0x24>)
 8040f46:	6013      	str	r3, [r2, #0]
}
 8040f48:	bf00      	nop
 8040f4a:	46bd      	mov	sp, r7
 8040f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f50:	4770      	bx	lr
 8040f52:	bf00      	nop
 8040f54:	2400000c 	.word	0x2400000c
 8040f58:	24000128 	.word	0x24000128

08040f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040f5c:	b480      	push	{r7}
 8040f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8040f60:	4b03      	ldr	r3, [pc, #12]	; (8040f70 <HAL_GetTick+0x14>)
 8040f62:	681b      	ldr	r3, [r3, #0]
}
 8040f64:	4618      	mov	r0, r3
 8040f66:	46bd      	mov	sp, r7
 8040f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040f6c:	4770      	bx	lr
 8040f6e:	bf00      	nop
 8040f70:	24000128 	.word	0x24000128

08040f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8040f74:	b580      	push	{r7, lr}
 8040f76:	b084      	sub	sp, #16
 8040f78:	af00      	add	r7, sp, #0
 8040f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8040f7c:	f7ff ffee 	bl	8040f5c <HAL_GetTick>
 8040f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8040f82:	687b      	ldr	r3, [r7, #4]
 8040f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8040f86:	68fb      	ldr	r3, [r7, #12]
 8040f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8040f8c:	d005      	beq.n	8040f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8040f8e:	4b0a      	ldr	r3, [pc, #40]	; (8040fb8 <HAL_Delay+0x44>)
 8040f90:	781b      	ldrb	r3, [r3, #0]
 8040f92:	461a      	mov	r2, r3
 8040f94:	68fb      	ldr	r3, [r7, #12]
 8040f96:	4413      	add	r3, r2
 8040f98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8040f9a:	bf00      	nop
 8040f9c:	f7ff ffde 	bl	8040f5c <HAL_GetTick>
 8040fa0:	4602      	mov	r2, r0
 8040fa2:	68bb      	ldr	r3, [r7, #8]
 8040fa4:	1ad3      	subs	r3, r2, r3
 8040fa6:	68fa      	ldr	r2, [r7, #12]
 8040fa8:	429a      	cmp	r2, r3
 8040faa:	d8f7      	bhi.n	8040f9c <HAL_Delay+0x28>
  {
  }
}
 8040fac:	bf00      	nop
 8040fae:	bf00      	nop
 8040fb0:	3710      	adds	r7, #16
 8040fb2:	46bd      	mov	sp, r7
 8040fb4:	bd80      	pop	{r7, pc}
 8040fb6:	bf00      	nop
 8040fb8:	2400000c 	.word	0x2400000c

08040fbc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8040fbc:	b480      	push	{r7}
 8040fbe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8040fc0:	4b03      	ldr	r3, [pc, #12]	; (8040fd0 <HAL_GetREVID+0x14>)
 8040fc2:	681b      	ldr	r3, [r3, #0]
 8040fc4:	0c1b      	lsrs	r3, r3, #16
}
 8040fc6:	4618      	mov	r0, r3
 8040fc8:	46bd      	mov	sp, r7
 8040fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040fce:	4770      	bx	lr
 8040fd0:	5c001000 	.word	0x5c001000

08040fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040fd4:	b480      	push	{r7}
 8040fd6:	b085      	sub	sp, #20
 8040fd8:	af00      	add	r7, sp, #0
 8040fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040fdc:	687b      	ldr	r3, [r7, #4]
 8040fde:	f003 0307 	and.w	r3, r3, #7
 8040fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040fe4:	4b0b      	ldr	r3, [pc, #44]	; (8041014 <__NVIC_SetPriorityGrouping+0x40>)
 8040fe6:	68db      	ldr	r3, [r3, #12]
 8040fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040fea:	68ba      	ldr	r2, [r7, #8]
 8040fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8040ff0:	4013      	ands	r3, r2
 8040ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040ff4:	68fb      	ldr	r3, [r7, #12]
 8040ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040ff8:	68bb      	ldr	r3, [r7, #8]
 8040ffa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8040ffc:	4b06      	ldr	r3, [pc, #24]	; (8041018 <__NVIC_SetPriorityGrouping+0x44>)
 8040ffe:	4313      	orrs	r3, r2
 8041000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8041002:	4a04      	ldr	r2, [pc, #16]	; (8041014 <__NVIC_SetPriorityGrouping+0x40>)
 8041004:	68bb      	ldr	r3, [r7, #8]
 8041006:	60d3      	str	r3, [r2, #12]
}
 8041008:	bf00      	nop
 804100a:	3714      	adds	r7, #20
 804100c:	46bd      	mov	sp, r7
 804100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041012:	4770      	bx	lr
 8041014:	e000ed00 	.word	0xe000ed00
 8041018:	05fa0000 	.word	0x05fa0000

0804101c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 804101c:	b480      	push	{r7}
 804101e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8041020:	4b04      	ldr	r3, [pc, #16]	; (8041034 <__NVIC_GetPriorityGrouping+0x18>)
 8041022:	68db      	ldr	r3, [r3, #12]
 8041024:	0a1b      	lsrs	r3, r3, #8
 8041026:	f003 0307 	and.w	r3, r3, #7
}
 804102a:	4618      	mov	r0, r3
 804102c:	46bd      	mov	sp, r7
 804102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041032:	4770      	bx	lr
 8041034:	e000ed00 	.word	0xe000ed00

08041038 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8041038:	b480      	push	{r7}
 804103a:	b083      	sub	sp, #12
 804103c:	af00      	add	r7, sp, #0
 804103e:	4603      	mov	r3, r0
 8041040:	6039      	str	r1, [r7, #0]
 8041042:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8041044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8041048:	2b00      	cmp	r3, #0
 804104a:	db0a      	blt.n	8041062 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 804104c:	683b      	ldr	r3, [r7, #0]
 804104e:	b2da      	uxtb	r2, r3
 8041050:	490c      	ldr	r1, [pc, #48]	; (8041084 <__NVIC_SetPriority+0x4c>)
 8041052:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8041056:	0112      	lsls	r2, r2, #4
 8041058:	b2d2      	uxtb	r2, r2
 804105a:	440b      	add	r3, r1
 804105c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8041060:	e00a      	b.n	8041078 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8041062:	683b      	ldr	r3, [r7, #0]
 8041064:	b2da      	uxtb	r2, r3
 8041066:	4908      	ldr	r1, [pc, #32]	; (8041088 <__NVIC_SetPriority+0x50>)
 8041068:	88fb      	ldrh	r3, [r7, #6]
 804106a:	f003 030f 	and.w	r3, r3, #15
 804106e:	3b04      	subs	r3, #4
 8041070:	0112      	lsls	r2, r2, #4
 8041072:	b2d2      	uxtb	r2, r2
 8041074:	440b      	add	r3, r1
 8041076:	761a      	strb	r2, [r3, #24]
}
 8041078:	bf00      	nop
 804107a:	370c      	adds	r7, #12
 804107c:	46bd      	mov	sp, r7
 804107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041082:	4770      	bx	lr
 8041084:	e000e100 	.word	0xe000e100
 8041088:	e000ed00 	.word	0xe000ed00

0804108c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 804108c:	b480      	push	{r7}
 804108e:	b089      	sub	sp, #36	; 0x24
 8041090:	af00      	add	r7, sp, #0
 8041092:	60f8      	str	r0, [r7, #12]
 8041094:	60b9      	str	r1, [r7, #8]
 8041096:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8041098:	68fb      	ldr	r3, [r7, #12]
 804109a:	f003 0307 	and.w	r3, r3, #7
 804109e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80410a0:	69fb      	ldr	r3, [r7, #28]
 80410a2:	f1c3 0307 	rsb	r3, r3, #7
 80410a6:	2b04      	cmp	r3, #4
 80410a8:	bf28      	it	cs
 80410aa:	2304      	movcs	r3, #4
 80410ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80410ae:	69fb      	ldr	r3, [r7, #28]
 80410b0:	3304      	adds	r3, #4
 80410b2:	2b06      	cmp	r3, #6
 80410b4:	d902      	bls.n	80410bc <NVIC_EncodePriority+0x30>
 80410b6:	69fb      	ldr	r3, [r7, #28]
 80410b8:	3b03      	subs	r3, #3
 80410ba:	e000      	b.n	80410be <NVIC_EncodePriority+0x32>
 80410bc:	2300      	movs	r3, #0
 80410be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80410c0:	f04f 32ff 	mov.w	r2, #4294967295
 80410c4:	69bb      	ldr	r3, [r7, #24]
 80410c6:	fa02 f303 	lsl.w	r3, r2, r3
 80410ca:	43da      	mvns	r2, r3
 80410cc:	68bb      	ldr	r3, [r7, #8]
 80410ce:	401a      	ands	r2, r3
 80410d0:	697b      	ldr	r3, [r7, #20]
 80410d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80410d4:	f04f 31ff 	mov.w	r1, #4294967295
 80410d8:	697b      	ldr	r3, [r7, #20]
 80410da:	fa01 f303 	lsl.w	r3, r1, r3
 80410de:	43d9      	mvns	r1, r3
 80410e0:	687b      	ldr	r3, [r7, #4]
 80410e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80410e4:	4313      	orrs	r3, r2
         );
}
 80410e6:	4618      	mov	r0, r3
 80410e8:	3724      	adds	r7, #36	; 0x24
 80410ea:	46bd      	mov	sp, r7
 80410ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80410f0:	4770      	bx	lr
	...

080410f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80410f4:	b580      	push	{r7, lr}
 80410f6:	b082      	sub	sp, #8
 80410f8:	af00      	add	r7, sp, #0
 80410fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80410fc:	687b      	ldr	r3, [r7, #4]
 80410fe:	3b01      	subs	r3, #1
 8041100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8041104:	d301      	bcc.n	804110a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8041106:	2301      	movs	r3, #1
 8041108:	e00f      	b.n	804112a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 804110a:	4a0a      	ldr	r2, [pc, #40]	; (8041134 <SysTick_Config+0x40>)
 804110c:	687b      	ldr	r3, [r7, #4]
 804110e:	3b01      	subs	r3, #1
 8041110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8041112:	210f      	movs	r1, #15
 8041114:	f04f 30ff 	mov.w	r0, #4294967295
 8041118:	f7ff ff8e 	bl	8041038 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 804111c:	4b05      	ldr	r3, [pc, #20]	; (8041134 <SysTick_Config+0x40>)
 804111e:	2200      	movs	r2, #0
 8041120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8041122:	4b04      	ldr	r3, [pc, #16]	; (8041134 <SysTick_Config+0x40>)
 8041124:	2207      	movs	r2, #7
 8041126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8041128:	2300      	movs	r3, #0
}
 804112a:	4618      	mov	r0, r3
 804112c:	3708      	adds	r7, #8
 804112e:	46bd      	mov	sp, r7
 8041130:	bd80      	pop	{r7, pc}
 8041132:	bf00      	nop
 8041134:	e000e010 	.word	0xe000e010

08041138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8041138:	b580      	push	{r7, lr}
 804113a:	b082      	sub	sp, #8
 804113c:	af00      	add	r7, sp, #0
 804113e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8041140:	6878      	ldr	r0, [r7, #4]
 8041142:	f7ff ff47 	bl	8040fd4 <__NVIC_SetPriorityGrouping>
}
 8041146:	bf00      	nop
 8041148:	3708      	adds	r7, #8
 804114a:	46bd      	mov	sp, r7
 804114c:	bd80      	pop	{r7, pc}

0804114e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 804114e:	b580      	push	{r7, lr}
 8041150:	b086      	sub	sp, #24
 8041152:	af00      	add	r7, sp, #0
 8041154:	4603      	mov	r3, r0
 8041156:	60b9      	str	r1, [r7, #8]
 8041158:	607a      	str	r2, [r7, #4]
 804115a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 804115c:	f7ff ff5e 	bl	804101c <__NVIC_GetPriorityGrouping>
 8041160:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8041162:	687a      	ldr	r2, [r7, #4]
 8041164:	68b9      	ldr	r1, [r7, #8]
 8041166:	6978      	ldr	r0, [r7, #20]
 8041168:	f7ff ff90 	bl	804108c <NVIC_EncodePriority>
 804116c:	4602      	mov	r2, r0
 804116e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8041172:	4611      	mov	r1, r2
 8041174:	4618      	mov	r0, r3
 8041176:	f7ff ff5f 	bl	8041038 <__NVIC_SetPriority>
}
 804117a:	bf00      	nop
 804117c:	3718      	adds	r7, #24
 804117e:	46bd      	mov	sp, r7
 8041180:	bd80      	pop	{r7, pc}

08041182 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8041182:	b580      	push	{r7, lr}
 8041184:	b082      	sub	sp, #8
 8041186:	af00      	add	r7, sp, #0
 8041188:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 804118a:	6878      	ldr	r0, [r7, #4]
 804118c:	f7ff ffb2 	bl	80410f4 <SysTick_Config>
 8041190:	4603      	mov	r3, r0
}
 8041192:	4618      	mov	r0, r3
 8041194:	3708      	adds	r7, #8
 8041196:	46bd      	mov	sp, r7
 8041198:	bd80      	pop	{r7, pc}
	...

0804119c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 804119c:	b480      	push	{r7}
 804119e:	b089      	sub	sp, #36	; 0x24
 80411a0:	af00      	add	r7, sp, #0
 80411a2:	6078      	str	r0, [r7, #4]
 80411a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80411a6:	2300      	movs	r3, #0
 80411a8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80411aa:	4b89      	ldr	r3, [pc, #548]	; (80413d0 <HAL_GPIO_Init+0x234>)
 80411ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80411ae:	e194      	b.n	80414da <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80411b0:	683b      	ldr	r3, [r7, #0]
 80411b2:	681a      	ldr	r2, [r3, #0]
 80411b4:	2101      	movs	r1, #1
 80411b6:	69fb      	ldr	r3, [r7, #28]
 80411b8:	fa01 f303 	lsl.w	r3, r1, r3
 80411bc:	4013      	ands	r3, r2
 80411be:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80411c0:	693b      	ldr	r3, [r7, #16]
 80411c2:	2b00      	cmp	r3, #0
 80411c4:	f000 8186 	beq.w	80414d4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80411c8:	683b      	ldr	r3, [r7, #0]
 80411ca:	685b      	ldr	r3, [r3, #4]
 80411cc:	f003 0303 	and.w	r3, r3, #3
 80411d0:	2b01      	cmp	r3, #1
 80411d2:	d005      	beq.n	80411e0 <HAL_GPIO_Init+0x44>
 80411d4:	683b      	ldr	r3, [r7, #0]
 80411d6:	685b      	ldr	r3, [r3, #4]
 80411d8:	f003 0303 	and.w	r3, r3, #3
 80411dc:	2b02      	cmp	r3, #2
 80411de:	d130      	bne.n	8041242 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80411e0:	687b      	ldr	r3, [r7, #4]
 80411e2:	689b      	ldr	r3, [r3, #8]
 80411e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80411e6:	69fb      	ldr	r3, [r7, #28]
 80411e8:	005b      	lsls	r3, r3, #1
 80411ea:	2203      	movs	r2, #3
 80411ec:	fa02 f303 	lsl.w	r3, r2, r3
 80411f0:	43db      	mvns	r3, r3
 80411f2:	69ba      	ldr	r2, [r7, #24]
 80411f4:	4013      	ands	r3, r2
 80411f6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80411f8:	683b      	ldr	r3, [r7, #0]
 80411fa:	68da      	ldr	r2, [r3, #12]
 80411fc:	69fb      	ldr	r3, [r7, #28]
 80411fe:	005b      	lsls	r3, r3, #1
 8041200:	fa02 f303 	lsl.w	r3, r2, r3
 8041204:	69ba      	ldr	r2, [r7, #24]
 8041206:	4313      	orrs	r3, r2
 8041208:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 804120a:	687b      	ldr	r3, [r7, #4]
 804120c:	69ba      	ldr	r2, [r7, #24]
 804120e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8041210:	687b      	ldr	r3, [r7, #4]
 8041212:	685b      	ldr	r3, [r3, #4]
 8041214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8041216:	2201      	movs	r2, #1
 8041218:	69fb      	ldr	r3, [r7, #28]
 804121a:	fa02 f303 	lsl.w	r3, r2, r3
 804121e:	43db      	mvns	r3, r3
 8041220:	69ba      	ldr	r2, [r7, #24]
 8041222:	4013      	ands	r3, r2
 8041224:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8041226:	683b      	ldr	r3, [r7, #0]
 8041228:	685b      	ldr	r3, [r3, #4]
 804122a:	091b      	lsrs	r3, r3, #4
 804122c:	f003 0201 	and.w	r2, r3, #1
 8041230:	69fb      	ldr	r3, [r7, #28]
 8041232:	fa02 f303 	lsl.w	r3, r2, r3
 8041236:	69ba      	ldr	r2, [r7, #24]
 8041238:	4313      	orrs	r3, r2
 804123a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 804123c:	687b      	ldr	r3, [r7, #4]
 804123e:	69ba      	ldr	r2, [r7, #24]
 8041240:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8041242:	683b      	ldr	r3, [r7, #0]
 8041244:	685b      	ldr	r3, [r3, #4]
 8041246:	f003 0303 	and.w	r3, r3, #3
 804124a:	2b03      	cmp	r3, #3
 804124c:	d017      	beq.n	804127e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 804124e:	687b      	ldr	r3, [r7, #4]
 8041250:	68db      	ldr	r3, [r3, #12]
 8041252:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8041254:	69fb      	ldr	r3, [r7, #28]
 8041256:	005b      	lsls	r3, r3, #1
 8041258:	2203      	movs	r2, #3
 804125a:	fa02 f303 	lsl.w	r3, r2, r3
 804125e:	43db      	mvns	r3, r3
 8041260:	69ba      	ldr	r2, [r7, #24]
 8041262:	4013      	ands	r3, r2
 8041264:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8041266:	683b      	ldr	r3, [r7, #0]
 8041268:	689a      	ldr	r2, [r3, #8]
 804126a:	69fb      	ldr	r3, [r7, #28]
 804126c:	005b      	lsls	r3, r3, #1
 804126e:	fa02 f303 	lsl.w	r3, r2, r3
 8041272:	69ba      	ldr	r2, [r7, #24]
 8041274:	4313      	orrs	r3, r2
 8041276:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8041278:	687b      	ldr	r3, [r7, #4]
 804127a:	69ba      	ldr	r2, [r7, #24]
 804127c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 804127e:	683b      	ldr	r3, [r7, #0]
 8041280:	685b      	ldr	r3, [r3, #4]
 8041282:	f003 0303 	and.w	r3, r3, #3
 8041286:	2b02      	cmp	r3, #2
 8041288:	d123      	bne.n	80412d2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 804128a:	69fb      	ldr	r3, [r7, #28]
 804128c:	08da      	lsrs	r2, r3, #3
 804128e:	687b      	ldr	r3, [r7, #4]
 8041290:	3208      	adds	r2, #8
 8041292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8041296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8041298:	69fb      	ldr	r3, [r7, #28]
 804129a:	f003 0307 	and.w	r3, r3, #7
 804129e:	009b      	lsls	r3, r3, #2
 80412a0:	220f      	movs	r2, #15
 80412a2:	fa02 f303 	lsl.w	r3, r2, r3
 80412a6:	43db      	mvns	r3, r3
 80412a8:	69ba      	ldr	r2, [r7, #24]
 80412aa:	4013      	ands	r3, r2
 80412ac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80412ae:	683b      	ldr	r3, [r7, #0]
 80412b0:	691a      	ldr	r2, [r3, #16]
 80412b2:	69fb      	ldr	r3, [r7, #28]
 80412b4:	f003 0307 	and.w	r3, r3, #7
 80412b8:	009b      	lsls	r3, r3, #2
 80412ba:	fa02 f303 	lsl.w	r3, r2, r3
 80412be:	69ba      	ldr	r2, [r7, #24]
 80412c0:	4313      	orrs	r3, r2
 80412c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80412c4:	69fb      	ldr	r3, [r7, #28]
 80412c6:	08da      	lsrs	r2, r3, #3
 80412c8:	687b      	ldr	r3, [r7, #4]
 80412ca:	3208      	adds	r2, #8
 80412cc:	69b9      	ldr	r1, [r7, #24]
 80412ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80412d2:	687b      	ldr	r3, [r7, #4]
 80412d4:	681b      	ldr	r3, [r3, #0]
 80412d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80412d8:	69fb      	ldr	r3, [r7, #28]
 80412da:	005b      	lsls	r3, r3, #1
 80412dc:	2203      	movs	r2, #3
 80412de:	fa02 f303 	lsl.w	r3, r2, r3
 80412e2:	43db      	mvns	r3, r3
 80412e4:	69ba      	ldr	r2, [r7, #24]
 80412e6:	4013      	ands	r3, r2
 80412e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80412ea:	683b      	ldr	r3, [r7, #0]
 80412ec:	685b      	ldr	r3, [r3, #4]
 80412ee:	f003 0203 	and.w	r2, r3, #3
 80412f2:	69fb      	ldr	r3, [r7, #28]
 80412f4:	005b      	lsls	r3, r3, #1
 80412f6:	fa02 f303 	lsl.w	r3, r2, r3
 80412fa:	69ba      	ldr	r2, [r7, #24]
 80412fc:	4313      	orrs	r3, r2
 80412fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8041300:	687b      	ldr	r3, [r7, #4]
 8041302:	69ba      	ldr	r2, [r7, #24]
 8041304:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8041306:	683b      	ldr	r3, [r7, #0]
 8041308:	685b      	ldr	r3, [r3, #4]
 804130a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 804130e:	2b00      	cmp	r3, #0
 8041310:	f000 80e0 	beq.w	80414d4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8041314:	4b2f      	ldr	r3, [pc, #188]	; (80413d4 <HAL_GPIO_Init+0x238>)
 8041316:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 804131a:	4a2e      	ldr	r2, [pc, #184]	; (80413d4 <HAL_GPIO_Init+0x238>)
 804131c:	f043 0302 	orr.w	r3, r3, #2
 8041320:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8041324:	4b2b      	ldr	r3, [pc, #172]	; (80413d4 <HAL_GPIO_Init+0x238>)
 8041326:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 804132a:	f003 0302 	and.w	r3, r3, #2
 804132e:	60fb      	str	r3, [r7, #12]
 8041330:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8041332:	4a29      	ldr	r2, [pc, #164]	; (80413d8 <HAL_GPIO_Init+0x23c>)
 8041334:	69fb      	ldr	r3, [r7, #28]
 8041336:	089b      	lsrs	r3, r3, #2
 8041338:	3302      	adds	r3, #2
 804133a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 804133e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8041340:	69fb      	ldr	r3, [r7, #28]
 8041342:	f003 0303 	and.w	r3, r3, #3
 8041346:	009b      	lsls	r3, r3, #2
 8041348:	220f      	movs	r2, #15
 804134a:	fa02 f303 	lsl.w	r3, r2, r3
 804134e:	43db      	mvns	r3, r3
 8041350:	69ba      	ldr	r2, [r7, #24]
 8041352:	4013      	ands	r3, r2
 8041354:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8041356:	687b      	ldr	r3, [r7, #4]
 8041358:	4a20      	ldr	r2, [pc, #128]	; (80413dc <HAL_GPIO_Init+0x240>)
 804135a:	4293      	cmp	r3, r2
 804135c:	d052      	beq.n	8041404 <HAL_GPIO_Init+0x268>
 804135e:	687b      	ldr	r3, [r7, #4]
 8041360:	4a1f      	ldr	r2, [pc, #124]	; (80413e0 <HAL_GPIO_Init+0x244>)
 8041362:	4293      	cmp	r3, r2
 8041364:	d031      	beq.n	80413ca <HAL_GPIO_Init+0x22e>
 8041366:	687b      	ldr	r3, [r7, #4]
 8041368:	4a1e      	ldr	r2, [pc, #120]	; (80413e4 <HAL_GPIO_Init+0x248>)
 804136a:	4293      	cmp	r3, r2
 804136c:	d02b      	beq.n	80413c6 <HAL_GPIO_Init+0x22a>
 804136e:	687b      	ldr	r3, [r7, #4]
 8041370:	4a1d      	ldr	r2, [pc, #116]	; (80413e8 <HAL_GPIO_Init+0x24c>)
 8041372:	4293      	cmp	r3, r2
 8041374:	d025      	beq.n	80413c2 <HAL_GPIO_Init+0x226>
 8041376:	687b      	ldr	r3, [r7, #4]
 8041378:	4a1c      	ldr	r2, [pc, #112]	; (80413ec <HAL_GPIO_Init+0x250>)
 804137a:	4293      	cmp	r3, r2
 804137c:	d01f      	beq.n	80413be <HAL_GPIO_Init+0x222>
 804137e:	687b      	ldr	r3, [r7, #4]
 8041380:	4a1b      	ldr	r2, [pc, #108]	; (80413f0 <HAL_GPIO_Init+0x254>)
 8041382:	4293      	cmp	r3, r2
 8041384:	d019      	beq.n	80413ba <HAL_GPIO_Init+0x21e>
 8041386:	687b      	ldr	r3, [r7, #4]
 8041388:	4a1a      	ldr	r2, [pc, #104]	; (80413f4 <HAL_GPIO_Init+0x258>)
 804138a:	4293      	cmp	r3, r2
 804138c:	d013      	beq.n	80413b6 <HAL_GPIO_Init+0x21a>
 804138e:	687b      	ldr	r3, [r7, #4]
 8041390:	4a19      	ldr	r2, [pc, #100]	; (80413f8 <HAL_GPIO_Init+0x25c>)
 8041392:	4293      	cmp	r3, r2
 8041394:	d00d      	beq.n	80413b2 <HAL_GPIO_Init+0x216>
 8041396:	687b      	ldr	r3, [r7, #4]
 8041398:	4a18      	ldr	r2, [pc, #96]	; (80413fc <HAL_GPIO_Init+0x260>)
 804139a:	4293      	cmp	r3, r2
 804139c:	d007      	beq.n	80413ae <HAL_GPIO_Init+0x212>
 804139e:	687b      	ldr	r3, [r7, #4]
 80413a0:	4a17      	ldr	r2, [pc, #92]	; (8041400 <HAL_GPIO_Init+0x264>)
 80413a2:	4293      	cmp	r3, r2
 80413a4:	d101      	bne.n	80413aa <HAL_GPIO_Init+0x20e>
 80413a6:	2309      	movs	r3, #9
 80413a8:	e02d      	b.n	8041406 <HAL_GPIO_Init+0x26a>
 80413aa:	230a      	movs	r3, #10
 80413ac:	e02b      	b.n	8041406 <HAL_GPIO_Init+0x26a>
 80413ae:	2308      	movs	r3, #8
 80413b0:	e029      	b.n	8041406 <HAL_GPIO_Init+0x26a>
 80413b2:	2307      	movs	r3, #7
 80413b4:	e027      	b.n	8041406 <HAL_GPIO_Init+0x26a>
 80413b6:	2306      	movs	r3, #6
 80413b8:	e025      	b.n	8041406 <HAL_GPIO_Init+0x26a>
 80413ba:	2305      	movs	r3, #5
 80413bc:	e023      	b.n	8041406 <HAL_GPIO_Init+0x26a>
 80413be:	2304      	movs	r3, #4
 80413c0:	e021      	b.n	8041406 <HAL_GPIO_Init+0x26a>
 80413c2:	2303      	movs	r3, #3
 80413c4:	e01f      	b.n	8041406 <HAL_GPIO_Init+0x26a>
 80413c6:	2302      	movs	r3, #2
 80413c8:	e01d      	b.n	8041406 <HAL_GPIO_Init+0x26a>
 80413ca:	2301      	movs	r3, #1
 80413cc:	e01b      	b.n	8041406 <HAL_GPIO_Init+0x26a>
 80413ce:	bf00      	nop
 80413d0:	58000080 	.word	0x58000080
 80413d4:	58024400 	.word	0x58024400
 80413d8:	58000400 	.word	0x58000400
 80413dc:	58020000 	.word	0x58020000
 80413e0:	58020400 	.word	0x58020400
 80413e4:	58020800 	.word	0x58020800
 80413e8:	58020c00 	.word	0x58020c00
 80413ec:	58021000 	.word	0x58021000
 80413f0:	58021400 	.word	0x58021400
 80413f4:	58021800 	.word	0x58021800
 80413f8:	58021c00 	.word	0x58021c00
 80413fc:	58022000 	.word	0x58022000
 8041400:	58022400 	.word	0x58022400
 8041404:	2300      	movs	r3, #0
 8041406:	69fa      	ldr	r2, [r7, #28]
 8041408:	f002 0203 	and.w	r2, r2, #3
 804140c:	0092      	lsls	r2, r2, #2
 804140e:	4093      	lsls	r3, r2
 8041410:	69ba      	ldr	r2, [r7, #24]
 8041412:	4313      	orrs	r3, r2
 8041414:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8041416:	4938      	ldr	r1, [pc, #224]	; (80414f8 <HAL_GPIO_Init+0x35c>)
 8041418:	69fb      	ldr	r3, [r7, #28]
 804141a:	089b      	lsrs	r3, r3, #2
 804141c:	3302      	adds	r3, #2
 804141e:	69ba      	ldr	r2, [r7, #24]
 8041420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8041424:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8041428:	681b      	ldr	r3, [r3, #0]
 804142a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 804142c:	693b      	ldr	r3, [r7, #16]
 804142e:	43db      	mvns	r3, r3
 8041430:	69ba      	ldr	r2, [r7, #24]
 8041432:	4013      	ands	r3, r2
 8041434:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8041436:	683b      	ldr	r3, [r7, #0]
 8041438:	685b      	ldr	r3, [r3, #4]
 804143a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 804143e:	2b00      	cmp	r3, #0
 8041440:	d003      	beq.n	804144a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8041442:	69ba      	ldr	r2, [r7, #24]
 8041444:	693b      	ldr	r3, [r7, #16]
 8041446:	4313      	orrs	r3, r2
 8041448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 804144a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 804144e:	69bb      	ldr	r3, [r7, #24]
 8041450:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8041452:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8041456:	685b      	ldr	r3, [r3, #4]
 8041458:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 804145a:	693b      	ldr	r3, [r7, #16]
 804145c:	43db      	mvns	r3, r3
 804145e:	69ba      	ldr	r2, [r7, #24]
 8041460:	4013      	ands	r3, r2
 8041462:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8041464:	683b      	ldr	r3, [r7, #0]
 8041466:	685b      	ldr	r3, [r3, #4]
 8041468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 804146c:	2b00      	cmp	r3, #0
 804146e:	d003      	beq.n	8041478 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8041470:	69ba      	ldr	r2, [r7, #24]
 8041472:	693b      	ldr	r3, [r7, #16]
 8041474:	4313      	orrs	r3, r2
 8041476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8041478:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 804147c:	69bb      	ldr	r3, [r7, #24]
 804147e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8041480:	697b      	ldr	r3, [r7, #20]
 8041482:	685b      	ldr	r3, [r3, #4]
 8041484:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8041486:	693b      	ldr	r3, [r7, #16]
 8041488:	43db      	mvns	r3, r3
 804148a:	69ba      	ldr	r2, [r7, #24]
 804148c:	4013      	ands	r3, r2
 804148e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8041490:	683b      	ldr	r3, [r7, #0]
 8041492:	685b      	ldr	r3, [r3, #4]
 8041494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041498:	2b00      	cmp	r3, #0
 804149a:	d003      	beq.n	80414a4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 804149c:	69ba      	ldr	r2, [r7, #24]
 804149e:	693b      	ldr	r3, [r7, #16]
 80414a0:	4313      	orrs	r3, r2
 80414a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80414a4:	697b      	ldr	r3, [r7, #20]
 80414a6:	69ba      	ldr	r2, [r7, #24]
 80414a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80414aa:	697b      	ldr	r3, [r7, #20]
 80414ac:	681b      	ldr	r3, [r3, #0]
 80414ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80414b0:	693b      	ldr	r3, [r7, #16]
 80414b2:	43db      	mvns	r3, r3
 80414b4:	69ba      	ldr	r2, [r7, #24]
 80414b6:	4013      	ands	r3, r2
 80414b8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80414ba:	683b      	ldr	r3, [r7, #0]
 80414bc:	685b      	ldr	r3, [r3, #4]
 80414be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80414c2:	2b00      	cmp	r3, #0
 80414c4:	d003      	beq.n	80414ce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80414c6:	69ba      	ldr	r2, [r7, #24]
 80414c8:	693b      	ldr	r3, [r7, #16]
 80414ca:	4313      	orrs	r3, r2
 80414cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80414ce:	697b      	ldr	r3, [r7, #20]
 80414d0:	69ba      	ldr	r2, [r7, #24]
 80414d2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80414d4:	69fb      	ldr	r3, [r7, #28]
 80414d6:	3301      	adds	r3, #1
 80414d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80414da:	683b      	ldr	r3, [r7, #0]
 80414dc:	681a      	ldr	r2, [r3, #0]
 80414de:	69fb      	ldr	r3, [r7, #28]
 80414e0:	fa22 f303 	lsr.w	r3, r2, r3
 80414e4:	2b00      	cmp	r3, #0
 80414e6:	f47f ae63 	bne.w	80411b0 <HAL_GPIO_Init+0x14>
  }
}
 80414ea:	bf00      	nop
 80414ec:	bf00      	nop
 80414ee:	3724      	adds	r7, #36	; 0x24
 80414f0:	46bd      	mov	sp, r7
 80414f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80414f6:	4770      	bx	lr
 80414f8:	58000400 	.word	0x58000400

080414fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80414fc:	b480      	push	{r7}
 80414fe:	b083      	sub	sp, #12
 8041500:	af00      	add	r7, sp, #0
 8041502:	6078      	str	r0, [r7, #4]
 8041504:	460b      	mov	r3, r1
 8041506:	807b      	strh	r3, [r7, #2]
 8041508:	4613      	mov	r3, r2
 804150a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 804150c:	787b      	ldrb	r3, [r7, #1]
 804150e:	2b00      	cmp	r3, #0
 8041510:	d003      	beq.n	804151a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8041512:	887a      	ldrh	r2, [r7, #2]
 8041514:	687b      	ldr	r3, [r7, #4]
 8041516:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8041518:	e003      	b.n	8041522 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 804151a:	887b      	ldrh	r3, [r7, #2]
 804151c:	041a      	lsls	r2, r3, #16
 804151e:	687b      	ldr	r3, [r7, #4]
 8041520:	619a      	str	r2, [r3, #24]
}
 8041522:	bf00      	nop
 8041524:	370c      	adds	r7, #12
 8041526:	46bd      	mov	sp, r7
 8041528:	f85d 7b04 	ldr.w	r7, [sp], #4
 804152c:	4770      	bx	lr

0804152e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 804152e:	b480      	push	{r7}
 8041530:	b085      	sub	sp, #20
 8041532:	af00      	add	r7, sp, #0
 8041534:	6078      	str	r0, [r7, #4]
 8041536:	460b      	mov	r3, r1
 8041538:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 804153a:	687b      	ldr	r3, [r7, #4]
 804153c:	695b      	ldr	r3, [r3, #20]
 804153e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8041540:	887a      	ldrh	r2, [r7, #2]
 8041542:	68fb      	ldr	r3, [r7, #12]
 8041544:	4013      	ands	r3, r2
 8041546:	041a      	lsls	r2, r3, #16
 8041548:	68fb      	ldr	r3, [r7, #12]
 804154a:	43d9      	mvns	r1, r3
 804154c:	887b      	ldrh	r3, [r7, #2]
 804154e:	400b      	ands	r3, r1
 8041550:	431a      	orrs	r2, r3
 8041552:	687b      	ldr	r3, [r7, #4]
 8041554:	619a      	str	r2, [r3, #24]
}
 8041556:	bf00      	nop
 8041558:	3714      	adds	r7, #20
 804155a:	46bd      	mov	sp, r7
 804155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041560:	4770      	bx	lr
	...

08041564 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8041564:	b480      	push	{r7}
 8041566:	b083      	sub	sp, #12
 8041568:	af00      	add	r7, sp, #0
 804156a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 804156c:	4a08      	ldr	r2, [pc, #32]	; (8041590 <HAL_HSEM_FastTake+0x2c>)
 804156e:	687b      	ldr	r3, [r7, #4]
 8041570:	3320      	adds	r3, #32
 8041572:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041576:	4a07      	ldr	r2, [pc, #28]	; (8041594 <HAL_HSEM_FastTake+0x30>)
 8041578:	4293      	cmp	r3, r2
 804157a:	d101      	bne.n	8041580 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 804157c:	2300      	movs	r3, #0
 804157e:	e000      	b.n	8041582 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8041580:	2301      	movs	r3, #1
}
 8041582:	4618      	mov	r0, r3
 8041584:	370c      	adds	r7, #12
 8041586:	46bd      	mov	sp, r7
 8041588:	f85d 7b04 	ldr.w	r7, [sp], #4
 804158c:	4770      	bx	lr
 804158e:	bf00      	nop
 8041590:	58026400 	.word	0x58026400
 8041594:	80000300 	.word	0x80000300

08041598 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8041598:	b480      	push	{r7}
 804159a:	b083      	sub	sp, #12
 804159c:	af00      	add	r7, sp, #0
 804159e:	6078      	str	r0, [r7, #4]
 80415a0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80415a2:	4906      	ldr	r1, [pc, #24]	; (80415bc <HAL_HSEM_Release+0x24>)
 80415a4:	683b      	ldr	r3, [r7, #0]
 80415a6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80415aa:	687b      	ldr	r3, [r7, #4]
 80415ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80415b0:	bf00      	nop
 80415b2:	370c      	adds	r7, #12
 80415b4:	46bd      	mov	sp, r7
 80415b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80415ba:	4770      	bx	lr
 80415bc:	58026400 	.word	0x58026400

080415c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80415c0:	b580      	push	{r7, lr}
 80415c2:	b084      	sub	sp, #16
 80415c4:	af00      	add	r7, sp, #0
 80415c6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80415c8:	4b29      	ldr	r3, [pc, #164]	; (8041670 <HAL_PWREx_ConfigSupply+0xb0>)
 80415ca:	68db      	ldr	r3, [r3, #12]
 80415cc:	f003 0307 	and.w	r3, r3, #7
 80415d0:	2b06      	cmp	r3, #6
 80415d2:	d00a      	beq.n	80415ea <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80415d4:	4b26      	ldr	r3, [pc, #152]	; (8041670 <HAL_PWREx_ConfigSupply+0xb0>)
 80415d6:	68db      	ldr	r3, [r3, #12]
 80415d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80415dc:	687a      	ldr	r2, [r7, #4]
 80415de:	429a      	cmp	r2, r3
 80415e0:	d001      	beq.n	80415e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80415e2:	2301      	movs	r3, #1
 80415e4:	e040      	b.n	8041668 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80415e6:	2300      	movs	r3, #0
 80415e8:	e03e      	b.n	8041668 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80415ea:	4b21      	ldr	r3, [pc, #132]	; (8041670 <HAL_PWREx_ConfigSupply+0xb0>)
 80415ec:	68db      	ldr	r3, [r3, #12]
 80415ee:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80415f2:	491f      	ldr	r1, [pc, #124]	; (8041670 <HAL_PWREx_ConfigSupply+0xb0>)
 80415f4:	687b      	ldr	r3, [r7, #4]
 80415f6:	4313      	orrs	r3, r2
 80415f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80415fa:	f7ff fcaf 	bl	8040f5c <HAL_GetTick>
 80415fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8041600:	e009      	b.n	8041616 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8041602:	f7ff fcab 	bl	8040f5c <HAL_GetTick>
 8041606:	4602      	mov	r2, r0
 8041608:	68fb      	ldr	r3, [r7, #12]
 804160a:	1ad3      	subs	r3, r2, r3
 804160c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8041610:	d901      	bls.n	8041616 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8041612:	2301      	movs	r3, #1
 8041614:	e028      	b.n	8041668 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8041616:	4b16      	ldr	r3, [pc, #88]	; (8041670 <HAL_PWREx_ConfigSupply+0xb0>)
 8041618:	685b      	ldr	r3, [r3, #4]
 804161a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 804161e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8041622:	d1ee      	bne.n	8041602 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8041624:	687b      	ldr	r3, [r7, #4]
 8041626:	2b1e      	cmp	r3, #30
 8041628:	d008      	beq.n	804163c <HAL_PWREx_ConfigSupply+0x7c>
 804162a:	687b      	ldr	r3, [r7, #4]
 804162c:	2b2e      	cmp	r3, #46	; 0x2e
 804162e:	d005      	beq.n	804163c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8041630:	687b      	ldr	r3, [r7, #4]
 8041632:	2b1d      	cmp	r3, #29
 8041634:	d002      	beq.n	804163c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8041636:	687b      	ldr	r3, [r7, #4]
 8041638:	2b2d      	cmp	r3, #45	; 0x2d
 804163a:	d114      	bne.n	8041666 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 804163c:	f7ff fc8e 	bl	8040f5c <HAL_GetTick>
 8041640:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8041642:	e009      	b.n	8041658 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8041644:	f7ff fc8a 	bl	8040f5c <HAL_GetTick>
 8041648:	4602      	mov	r2, r0
 804164a:	68fb      	ldr	r3, [r7, #12]
 804164c:	1ad3      	subs	r3, r2, r3
 804164e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8041652:	d901      	bls.n	8041658 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8041654:	2301      	movs	r3, #1
 8041656:	e007      	b.n	8041668 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8041658:	4b05      	ldr	r3, [pc, #20]	; (8041670 <HAL_PWREx_ConfigSupply+0xb0>)
 804165a:	68db      	ldr	r3, [r3, #12]
 804165c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8041664:	d1ee      	bne.n	8041644 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8041666:	2300      	movs	r3, #0
}
 8041668:	4618      	mov	r0, r3
 804166a:	3710      	adds	r7, #16
 804166c:	46bd      	mov	sp, r7
 804166e:	bd80      	pop	{r7, pc}
 8041670:	58024800 	.word	0x58024800

08041674 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8041674:	b580      	push	{r7, lr}
 8041676:	b08c      	sub	sp, #48	; 0x30
 8041678:	af00      	add	r7, sp, #0
 804167a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 804167c:	687b      	ldr	r3, [r7, #4]
 804167e:	2b00      	cmp	r3, #0
 8041680:	d102      	bne.n	8041688 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8041682:	2301      	movs	r3, #1
 8041684:	f000 bc48 	b.w	8041f18 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8041688:	687b      	ldr	r3, [r7, #4]
 804168a:	681b      	ldr	r3, [r3, #0]
 804168c:	f003 0301 	and.w	r3, r3, #1
 8041690:	2b00      	cmp	r3, #0
 8041692:	f000 8088 	beq.w	80417a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8041696:	4b99      	ldr	r3, [pc, #612]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 8041698:	691b      	ldr	r3, [r3, #16]
 804169a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 804169e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80416a0:	4b96      	ldr	r3, [pc, #600]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 80416a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80416a4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80416a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80416a8:	2b10      	cmp	r3, #16
 80416aa:	d007      	beq.n	80416bc <HAL_RCC_OscConfig+0x48>
 80416ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80416ae:	2b18      	cmp	r3, #24
 80416b0:	d111      	bne.n	80416d6 <HAL_RCC_OscConfig+0x62>
 80416b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80416b4:	f003 0303 	and.w	r3, r3, #3
 80416b8:	2b02      	cmp	r3, #2
 80416ba:	d10c      	bne.n	80416d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80416bc:	4b8f      	ldr	r3, [pc, #572]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 80416be:	681b      	ldr	r3, [r3, #0]
 80416c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80416c4:	2b00      	cmp	r3, #0
 80416c6:	d06d      	beq.n	80417a4 <HAL_RCC_OscConfig+0x130>
 80416c8:	687b      	ldr	r3, [r7, #4]
 80416ca:	685b      	ldr	r3, [r3, #4]
 80416cc:	2b00      	cmp	r3, #0
 80416ce:	d169      	bne.n	80417a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80416d0:	2301      	movs	r3, #1
 80416d2:	f000 bc21 	b.w	8041f18 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80416d6:	687b      	ldr	r3, [r7, #4]
 80416d8:	685b      	ldr	r3, [r3, #4]
 80416da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80416de:	d106      	bne.n	80416ee <HAL_RCC_OscConfig+0x7a>
 80416e0:	4b86      	ldr	r3, [pc, #536]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 80416e2:	681b      	ldr	r3, [r3, #0]
 80416e4:	4a85      	ldr	r2, [pc, #532]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 80416e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80416ea:	6013      	str	r3, [r2, #0]
 80416ec:	e02e      	b.n	804174c <HAL_RCC_OscConfig+0xd8>
 80416ee:	687b      	ldr	r3, [r7, #4]
 80416f0:	685b      	ldr	r3, [r3, #4]
 80416f2:	2b00      	cmp	r3, #0
 80416f4:	d10c      	bne.n	8041710 <HAL_RCC_OscConfig+0x9c>
 80416f6:	4b81      	ldr	r3, [pc, #516]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 80416f8:	681b      	ldr	r3, [r3, #0]
 80416fa:	4a80      	ldr	r2, [pc, #512]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 80416fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8041700:	6013      	str	r3, [r2, #0]
 8041702:	4b7e      	ldr	r3, [pc, #504]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 8041704:	681b      	ldr	r3, [r3, #0]
 8041706:	4a7d      	ldr	r2, [pc, #500]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 8041708:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 804170c:	6013      	str	r3, [r2, #0]
 804170e:	e01d      	b.n	804174c <HAL_RCC_OscConfig+0xd8>
 8041710:	687b      	ldr	r3, [r7, #4]
 8041712:	685b      	ldr	r3, [r3, #4]
 8041714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8041718:	d10c      	bne.n	8041734 <HAL_RCC_OscConfig+0xc0>
 804171a:	4b78      	ldr	r3, [pc, #480]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 804171c:	681b      	ldr	r3, [r3, #0]
 804171e:	4a77      	ldr	r2, [pc, #476]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 8041720:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8041724:	6013      	str	r3, [r2, #0]
 8041726:	4b75      	ldr	r3, [pc, #468]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 8041728:	681b      	ldr	r3, [r3, #0]
 804172a:	4a74      	ldr	r2, [pc, #464]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 804172c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041730:	6013      	str	r3, [r2, #0]
 8041732:	e00b      	b.n	804174c <HAL_RCC_OscConfig+0xd8>
 8041734:	4b71      	ldr	r3, [pc, #452]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 8041736:	681b      	ldr	r3, [r3, #0]
 8041738:	4a70      	ldr	r2, [pc, #448]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 804173a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 804173e:	6013      	str	r3, [r2, #0]
 8041740:	4b6e      	ldr	r3, [pc, #440]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 8041742:	681b      	ldr	r3, [r3, #0]
 8041744:	4a6d      	ldr	r2, [pc, #436]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 8041746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 804174a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 804174c:	687b      	ldr	r3, [r7, #4]
 804174e:	685b      	ldr	r3, [r3, #4]
 8041750:	2b00      	cmp	r3, #0
 8041752:	d013      	beq.n	804177c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041754:	f7ff fc02 	bl	8040f5c <HAL_GetTick>
 8041758:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 804175a:	e008      	b.n	804176e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 804175c:	f7ff fbfe 	bl	8040f5c <HAL_GetTick>
 8041760:	4602      	mov	r2, r0
 8041762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041764:	1ad3      	subs	r3, r2, r3
 8041766:	2b64      	cmp	r3, #100	; 0x64
 8041768:	d901      	bls.n	804176e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 804176a:	2303      	movs	r3, #3
 804176c:	e3d4      	b.n	8041f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 804176e:	4b63      	ldr	r3, [pc, #396]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 8041770:	681b      	ldr	r3, [r3, #0]
 8041772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041776:	2b00      	cmp	r3, #0
 8041778:	d0f0      	beq.n	804175c <HAL_RCC_OscConfig+0xe8>
 804177a:	e014      	b.n	80417a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804177c:	f7ff fbee 	bl	8040f5c <HAL_GetTick>
 8041780:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8041782:	e008      	b.n	8041796 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8041784:	f7ff fbea 	bl	8040f5c <HAL_GetTick>
 8041788:	4602      	mov	r2, r0
 804178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804178c:	1ad3      	subs	r3, r2, r3
 804178e:	2b64      	cmp	r3, #100	; 0x64
 8041790:	d901      	bls.n	8041796 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8041792:	2303      	movs	r3, #3
 8041794:	e3c0      	b.n	8041f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8041796:	4b59      	ldr	r3, [pc, #356]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 8041798:	681b      	ldr	r3, [r3, #0]
 804179a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804179e:	2b00      	cmp	r3, #0
 80417a0:	d1f0      	bne.n	8041784 <HAL_RCC_OscConfig+0x110>
 80417a2:	e000      	b.n	80417a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80417a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80417a6:	687b      	ldr	r3, [r7, #4]
 80417a8:	681b      	ldr	r3, [r3, #0]
 80417aa:	f003 0302 	and.w	r3, r3, #2
 80417ae:	2b00      	cmp	r3, #0
 80417b0:	f000 80ca 	beq.w	8041948 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80417b4:	4b51      	ldr	r3, [pc, #324]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 80417b6:	691b      	ldr	r3, [r3, #16]
 80417b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80417bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80417be:	4b4f      	ldr	r3, [pc, #316]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 80417c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80417c2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80417c4:	6a3b      	ldr	r3, [r7, #32]
 80417c6:	2b00      	cmp	r3, #0
 80417c8:	d007      	beq.n	80417da <HAL_RCC_OscConfig+0x166>
 80417ca:	6a3b      	ldr	r3, [r7, #32]
 80417cc:	2b18      	cmp	r3, #24
 80417ce:	d156      	bne.n	804187e <HAL_RCC_OscConfig+0x20a>
 80417d0:	69fb      	ldr	r3, [r7, #28]
 80417d2:	f003 0303 	and.w	r3, r3, #3
 80417d6:	2b00      	cmp	r3, #0
 80417d8:	d151      	bne.n	804187e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80417da:	4b48      	ldr	r3, [pc, #288]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 80417dc:	681b      	ldr	r3, [r3, #0]
 80417de:	f003 0304 	and.w	r3, r3, #4
 80417e2:	2b00      	cmp	r3, #0
 80417e4:	d005      	beq.n	80417f2 <HAL_RCC_OscConfig+0x17e>
 80417e6:	687b      	ldr	r3, [r7, #4]
 80417e8:	68db      	ldr	r3, [r3, #12]
 80417ea:	2b00      	cmp	r3, #0
 80417ec:	d101      	bne.n	80417f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80417ee:	2301      	movs	r3, #1
 80417f0:	e392      	b.n	8041f18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80417f2:	4b42      	ldr	r3, [pc, #264]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 80417f4:	681b      	ldr	r3, [r3, #0]
 80417f6:	f023 0219 	bic.w	r2, r3, #25
 80417fa:	687b      	ldr	r3, [r7, #4]
 80417fc:	68db      	ldr	r3, [r3, #12]
 80417fe:	493f      	ldr	r1, [pc, #252]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 8041800:	4313      	orrs	r3, r2
 8041802:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041804:	f7ff fbaa 	bl	8040f5c <HAL_GetTick>
 8041808:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 804180a:	e008      	b.n	804181e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 804180c:	f7ff fba6 	bl	8040f5c <HAL_GetTick>
 8041810:	4602      	mov	r2, r0
 8041812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041814:	1ad3      	subs	r3, r2, r3
 8041816:	2b02      	cmp	r3, #2
 8041818:	d901      	bls.n	804181e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 804181a:	2303      	movs	r3, #3
 804181c:	e37c      	b.n	8041f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 804181e:	4b37      	ldr	r3, [pc, #220]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 8041820:	681b      	ldr	r3, [r3, #0]
 8041822:	f003 0304 	and.w	r3, r3, #4
 8041826:	2b00      	cmp	r3, #0
 8041828:	d0f0      	beq.n	804180c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 804182a:	f7ff fbc7 	bl	8040fbc <HAL_GetREVID>
 804182e:	4603      	mov	r3, r0
 8041830:	f241 0203 	movw	r2, #4099	; 0x1003
 8041834:	4293      	cmp	r3, r2
 8041836:	d817      	bhi.n	8041868 <HAL_RCC_OscConfig+0x1f4>
 8041838:	687b      	ldr	r3, [r7, #4]
 804183a:	691b      	ldr	r3, [r3, #16]
 804183c:	2b40      	cmp	r3, #64	; 0x40
 804183e:	d108      	bne.n	8041852 <HAL_RCC_OscConfig+0x1de>
 8041840:	4b2e      	ldr	r3, [pc, #184]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 8041842:	685b      	ldr	r3, [r3, #4]
 8041844:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8041848:	4a2c      	ldr	r2, [pc, #176]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 804184a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804184e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8041850:	e07a      	b.n	8041948 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041852:	4b2a      	ldr	r3, [pc, #168]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 8041854:	685b      	ldr	r3, [r3, #4]
 8041856:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 804185a:	687b      	ldr	r3, [r7, #4]
 804185c:	691b      	ldr	r3, [r3, #16]
 804185e:	031b      	lsls	r3, r3, #12
 8041860:	4926      	ldr	r1, [pc, #152]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 8041862:	4313      	orrs	r3, r2
 8041864:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8041866:	e06f      	b.n	8041948 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041868:	4b24      	ldr	r3, [pc, #144]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 804186a:	685b      	ldr	r3, [r3, #4]
 804186c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8041870:	687b      	ldr	r3, [r7, #4]
 8041872:	691b      	ldr	r3, [r3, #16]
 8041874:	061b      	lsls	r3, r3, #24
 8041876:	4921      	ldr	r1, [pc, #132]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 8041878:	4313      	orrs	r3, r2
 804187a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 804187c:	e064      	b.n	8041948 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 804187e:	687b      	ldr	r3, [r7, #4]
 8041880:	68db      	ldr	r3, [r3, #12]
 8041882:	2b00      	cmp	r3, #0
 8041884:	d047      	beq.n	8041916 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8041886:	4b1d      	ldr	r3, [pc, #116]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 8041888:	681b      	ldr	r3, [r3, #0]
 804188a:	f023 0219 	bic.w	r2, r3, #25
 804188e:	687b      	ldr	r3, [r7, #4]
 8041890:	68db      	ldr	r3, [r3, #12]
 8041892:	491a      	ldr	r1, [pc, #104]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 8041894:	4313      	orrs	r3, r2
 8041896:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041898:	f7ff fb60 	bl	8040f5c <HAL_GetTick>
 804189c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 804189e:	e008      	b.n	80418b2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80418a0:	f7ff fb5c 	bl	8040f5c <HAL_GetTick>
 80418a4:	4602      	mov	r2, r0
 80418a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80418a8:	1ad3      	subs	r3, r2, r3
 80418aa:	2b02      	cmp	r3, #2
 80418ac:	d901      	bls.n	80418b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80418ae:	2303      	movs	r3, #3
 80418b0:	e332      	b.n	8041f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80418b2:	4b12      	ldr	r3, [pc, #72]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 80418b4:	681b      	ldr	r3, [r3, #0]
 80418b6:	f003 0304 	and.w	r3, r3, #4
 80418ba:	2b00      	cmp	r3, #0
 80418bc:	d0f0      	beq.n	80418a0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80418be:	f7ff fb7d 	bl	8040fbc <HAL_GetREVID>
 80418c2:	4603      	mov	r3, r0
 80418c4:	f241 0203 	movw	r2, #4099	; 0x1003
 80418c8:	4293      	cmp	r3, r2
 80418ca:	d819      	bhi.n	8041900 <HAL_RCC_OscConfig+0x28c>
 80418cc:	687b      	ldr	r3, [r7, #4]
 80418ce:	691b      	ldr	r3, [r3, #16]
 80418d0:	2b40      	cmp	r3, #64	; 0x40
 80418d2:	d108      	bne.n	80418e6 <HAL_RCC_OscConfig+0x272>
 80418d4:	4b09      	ldr	r3, [pc, #36]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 80418d6:	685b      	ldr	r3, [r3, #4]
 80418d8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80418dc:	4a07      	ldr	r2, [pc, #28]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 80418de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80418e2:	6053      	str	r3, [r2, #4]
 80418e4:	e030      	b.n	8041948 <HAL_RCC_OscConfig+0x2d4>
 80418e6:	4b05      	ldr	r3, [pc, #20]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 80418e8:	685b      	ldr	r3, [r3, #4]
 80418ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80418ee:	687b      	ldr	r3, [r7, #4]
 80418f0:	691b      	ldr	r3, [r3, #16]
 80418f2:	031b      	lsls	r3, r3, #12
 80418f4:	4901      	ldr	r1, [pc, #4]	; (80418fc <HAL_RCC_OscConfig+0x288>)
 80418f6:	4313      	orrs	r3, r2
 80418f8:	604b      	str	r3, [r1, #4]
 80418fa:	e025      	b.n	8041948 <HAL_RCC_OscConfig+0x2d4>
 80418fc:	58024400 	.word	0x58024400
 8041900:	4b9a      	ldr	r3, [pc, #616]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 8041902:	685b      	ldr	r3, [r3, #4]
 8041904:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8041908:	687b      	ldr	r3, [r7, #4]
 804190a:	691b      	ldr	r3, [r3, #16]
 804190c:	061b      	lsls	r3, r3, #24
 804190e:	4997      	ldr	r1, [pc, #604]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 8041910:	4313      	orrs	r3, r2
 8041912:	604b      	str	r3, [r1, #4]
 8041914:	e018      	b.n	8041948 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8041916:	4b95      	ldr	r3, [pc, #596]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 8041918:	681b      	ldr	r3, [r3, #0]
 804191a:	4a94      	ldr	r2, [pc, #592]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 804191c:	f023 0301 	bic.w	r3, r3, #1
 8041920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041922:	f7ff fb1b 	bl	8040f5c <HAL_GetTick>
 8041926:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8041928:	e008      	b.n	804193c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 804192a:	f7ff fb17 	bl	8040f5c <HAL_GetTick>
 804192e:	4602      	mov	r2, r0
 8041930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041932:	1ad3      	subs	r3, r2, r3
 8041934:	2b02      	cmp	r3, #2
 8041936:	d901      	bls.n	804193c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8041938:	2303      	movs	r3, #3
 804193a:	e2ed      	b.n	8041f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 804193c:	4b8b      	ldr	r3, [pc, #556]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 804193e:	681b      	ldr	r3, [r3, #0]
 8041940:	f003 0304 	and.w	r3, r3, #4
 8041944:	2b00      	cmp	r3, #0
 8041946:	d1f0      	bne.n	804192a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8041948:	687b      	ldr	r3, [r7, #4]
 804194a:	681b      	ldr	r3, [r3, #0]
 804194c:	f003 0310 	and.w	r3, r3, #16
 8041950:	2b00      	cmp	r3, #0
 8041952:	f000 80a9 	beq.w	8041aa8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8041956:	4b85      	ldr	r3, [pc, #532]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 8041958:	691b      	ldr	r3, [r3, #16]
 804195a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 804195e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8041960:	4b82      	ldr	r3, [pc, #520]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 8041962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041964:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8041966:	69bb      	ldr	r3, [r7, #24]
 8041968:	2b08      	cmp	r3, #8
 804196a:	d007      	beq.n	804197c <HAL_RCC_OscConfig+0x308>
 804196c:	69bb      	ldr	r3, [r7, #24]
 804196e:	2b18      	cmp	r3, #24
 8041970:	d13a      	bne.n	80419e8 <HAL_RCC_OscConfig+0x374>
 8041972:	697b      	ldr	r3, [r7, #20]
 8041974:	f003 0303 	and.w	r3, r3, #3
 8041978:	2b01      	cmp	r3, #1
 804197a:	d135      	bne.n	80419e8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 804197c:	4b7b      	ldr	r3, [pc, #492]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 804197e:	681b      	ldr	r3, [r3, #0]
 8041980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041984:	2b00      	cmp	r3, #0
 8041986:	d005      	beq.n	8041994 <HAL_RCC_OscConfig+0x320>
 8041988:	687b      	ldr	r3, [r7, #4]
 804198a:	69db      	ldr	r3, [r3, #28]
 804198c:	2b80      	cmp	r3, #128	; 0x80
 804198e:	d001      	beq.n	8041994 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8041990:	2301      	movs	r3, #1
 8041992:	e2c1      	b.n	8041f18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8041994:	f7ff fb12 	bl	8040fbc <HAL_GetREVID>
 8041998:	4603      	mov	r3, r0
 804199a:	f241 0203 	movw	r2, #4099	; 0x1003
 804199e:	4293      	cmp	r3, r2
 80419a0:	d817      	bhi.n	80419d2 <HAL_RCC_OscConfig+0x35e>
 80419a2:	687b      	ldr	r3, [r7, #4]
 80419a4:	6a1b      	ldr	r3, [r3, #32]
 80419a6:	2b20      	cmp	r3, #32
 80419a8:	d108      	bne.n	80419bc <HAL_RCC_OscConfig+0x348>
 80419aa:	4b70      	ldr	r3, [pc, #448]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 80419ac:	685b      	ldr	r3, [r3, #4]
 80419ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80419b2:	4a6e      	ldr	r2, [pc, #440]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 80419b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80419b8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80419ba:	e075      	b.n	8041aa8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80419bc:	4b6b      	ldr	r3, [pc, #428]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 80419be:	685b      	ldr	r3, [r3, #4]
 80419c0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80419c4:	687b      	ldr	r3, [r7, #4]
 80419c6:	6a1b      	ldr	r3, [r3, #32]
 80419c8:	069b      	lsls	r3, r3, #26
 80419ca:	4968      	ldr	r1, [pc, #416]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 80419cc:	4313      	orrs	r3, r2
 80419ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80419d0:	e06a      	b.n	8041aa8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80419d2:	4b66      	ldr	r3, [pc, #408]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 80419d4:	68db      	ldr	r3, [r3, #12]
 80419d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80419da:	687b      	ldr	r3, [r7, #4]
 80419dc:	6a1b      	ldr	r3, [r3, #32]
 80419de:	061b      	lsls	r3, r3, #24
 80419e0:	4962      	ldr	r1, [pc, #392]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 80419e2:	4313      	orrs	r3, r2
 80419e4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80419e6:	e05f      	b.n	8041aa8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80419e8:	687b      	ldr	r3, [r7, #4]
 80419ea:	69db      	ldr	r3, [r3, #28]
 80419ec:	2b00      	cmp	r3, #0
 80419ee:	d042      	beq.n	8041a76 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80419f0:	4b5e      	ldr	r3, [pc, #376]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 80419f2:	681b      	ldr	r3, [r3, #0]
 80419f4:	4a5d      	ldr	r2, [pc, #372]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 80419f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80419fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80419fc:	f7ff faae 	bl	8040f5c <HAL_GetTick>
 8041a00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8041a02:	e008      	b.n	8041a16 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8041a04:	f7ff faaa 	bl	8040f5c <HAL_GetTick>
 8041a08:	4602      	mov	r2, r0
 8041a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041a0c:	1ad3      	subs	r3, r2, r3
 8041a0e:	2b02      	cmp	r3, #2
 8041a10:	d901      	bls.n	8041a16 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8041a12:	2303      	movs	r3, #3
 8041a14:	e280      	b.n	8041f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8041a16:	4b55      	ldr	r3, [pc, #340]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 8041a18:	681b      	ldr	r3, [r3, #0]
 8041a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041a1e:	2b00      	cmp	r3, #0
 8041a20:	d0f0      	beq.n	8041a04 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8041a22:	f7ff facb 	bl	8040fbc <HAL_GetREVID>
 8041a26:	4603      	mov	r3, r0
 8041a28:	f241 0203 	movw	r2, #4099	; 0x1003
 8041a2c:	4293      	cmp	r3, r2
 8041a2e:	d817      	bhi.n	8041a60 <HAL_RCC_OscConfig+0x3ec>
 8041a30:	687b      	ldr	r3, [r7, #4]
 8041a32:	6a1b      	ldr	r3, [r3, #32]
 8041a34:	2b20      	cmp	r3, #32
 8041a36:	d108      	bne.n	8041a4a <HAL_RCC_OscConfig+0x3d6>
 8041a38:	4b4c      	ldr	r3, [pc, #304]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 8041a3a:	685b      	ldr	r3, [r3, #4]
 8041a3c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8041a40:	4a4a      	ldr	r2, [pc, #296]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 8041a42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8041a46:	6053      	str	r3, [r2, #4]
 8041a48:	e02e      	b.n	8041aa8 <HAL_RCC_OscConfig+0x434>
 8041a4a:	4b48      	ldr	r3, [pc, #288]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 8041a4c:	685b      	ldr	r3, [r3, #4]
 8041a4e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8041a52:	687b      	ldr	r3, [r7, #4]
 8041a54:	6a1b      	ldr	r3, [r3, #32]
 8041a56:	069b      	lsls	r3, r3, #26
 8041a58:	4944      	ldr	r1, [pc, #272]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 8041a5a:	4313      	orrs	r3, r2
 8041a5c:	604b      	str	r3, [r1, #4]
 8041a5e:	e023      	b.n	8041aa8 <HAL_RCC_OscConfig+0x434>
 8041a60:	4b42      	ldr	r3, [pc, #264]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 8041a62:	68db      	ldr	r3, [r3, #12]
 8041a64:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8041a68:	687b      	ldr	r3, [r7, #4]
 8041a6a:	6a1b      	ldr	r3, [r3, #32]
 8041a6c:	061b      	lsls	r3, r3, #24
 8041a6e:	493f      	ldr	r1, [pc, #252]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 8041a70:	4313      	orrs	r3, r2
 8041a72:	60cb      	str	r3, [r1, #12]
 8041a74:	e018      	b.n	8041aa8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8041a76:	4b3d      	ldr	r3, [pc, #244]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 8041a78:	681b      	ldr	r3, [r3, #0]
 8041a7a:	4a3c      	ldr	r2, [pc, #240]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 8041a7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8041a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041a82:	f7ff fa6b 	bl	8040f5c <HAL_GetTick>
 8041a86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8041a88:	e008      	b.n	8041a9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8041a8a:	f7ff fa67 	bl	8040f5c <HAL_GetTick>
 8041a8e:	4602      	mov	r2, r0
 8041a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041a92:	1ad3      	subs	r3, r2, r3
 8041a94:	2b02      	cmp	r3, #2
 8041a96:	d901      	bls.n	8041a9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8041a98:	2303      	movs	r3, #3
 8041a9a:	e23d      	b.n	8041f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8041a9c:	4b33      	ldr	r3, [pc, #204]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 8041a9e:	681b      	ldr	r3, [r3, #0]
 8041aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041aa4:	2b00      	cmp	r3, #0
 8041aa6:	d1f0      	bne.n	8041a8a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8041aa8:	687b      	ldr	r3, [r7, #4]
 8041aaa:	681b      	ldr	r3, [r3, #0]
 8041aac:	f003 0308 	and.w	r3, r3, #8
 8041ab0:	2b00      	cmp	r3, #0
 8041ab2:	d036      	beq.n	8041b22 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8041ab4:	687b      	ldr	r3, [r7, #4]
 8041ab6:	695b      	ldr	r3, [r3, #20]
 8041ab8:	2b00      	cmp	r3, #0
 8041aba:	d019      	beq.n	8041af0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8041abc:	4b2b      	ldr	r3, [pc, #172]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 8041abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8041ac0:	4a2a      	ldr	r2, [pc, #168]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 8041ac2:	f043 0301 	orr.w	r3, r3, #1
 8041ac6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041ac8:	f7ff fa48 	bl	8040f5c <HAL_GetTick>
 8041acc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8041ace:	e008      	b.n	8041ae2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8041ad0:	f7ff fa44 	bl	8040f5c <HAL_GetTick>
 8041ad4:	4602      	mov	r2, r0
 8041ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041ad8:	1ad3      	subs	r3, r2, r3
 8041ada:	2b02      	cmp	r3, #2
 8041adc:	d901      	bls.n	8041ae2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8041ade:	2303      	movs	r3, #3
 8041ae0:	e21a      	b.n	8041f18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8041ae2:	4b22      	ldr	r3, [pc, #136]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 8041ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8041ae6:	f003 0302 	and.w	r3, r3, #2
 8041aea:	2b00      	cmp	r3, #0
 8041aec:	d0f0      	beq.n	8041ad0 <HAL_RCC_OscConfig+0x45c>
 8041aee:	e018      	b.n	8041b22 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8041af0:	4b1e      	ldr	r3, [pc, #120]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 8041af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8041af4:	4a1d      	ldr	r2, [pc, #116]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 8041af6:	f023 0301 	bic.w	r3, r3, #1
 8041afa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041afc:	f7ff fa2e 	bl	8040f5c <HAL_GetTick>
 8041b00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8041b02:	e008      	b.n	8041b16 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8041b04:	f7ff fa2a 	bl	8040f5c <HAL_GetTick>
 8041b08:	4602      	mov	r2, r0
 8041b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041b0c:	1ad3      	subs	r3, r2, r3
 8041b0e:	2b02      	cmp	r3, #2
 8041b10:	d901      	bls.n	8041b16 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8041b12:	2303      	movs	r3, #3
 8041b14:	e200      	b.n	8041f18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8041b16:	4b15      	ldr	r3, [pc, #84]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 8041b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8041b1a:	f003 0302 	and.w	r3, r3, #2
 8041b1e:	2b00      	cmp	r3, #0
 8041b20:	d1f0      	bne.n	8041b04 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8041b22:	687b      	ldr	r3, [r7, #4]
 8041b24:	681b      	ldr	r3, [r3, #0]
 8041b26:	f003 0320 	and.w	r3, r3, #32
 8041b2a:	2b00      	cmp	r3, #0
 8041b2c:	d039      	beq.n	8041ba2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8041b2e:	687b      	ldr	r3, [r7, #4]
 8041b30:	699b      	ldr	r3, [r3, #24]
 8041b32:	2b00      	cmp	r3, #0
 8041b34:	d01c      	beq.n	8041b70 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8041b36:	4b0d      	ldr	r3, [pc, #52]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 8041b38:	681b      	ldr	r3, [r3, #0]
 8041b3a:	4a0c      	ldr	r2, [pc, #48]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 8041b3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8041b40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8041b42:	f7ff fa0b 	bl	8040f5c <HAL_GetTick>
 8041b46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8041b48:	e008      	b.n	8041b5c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8041b4a:	f7ff fa07 	bl	8040f5c <HAL_GetTick>
 8041b4e:	4602      	mov	r2, r0
 8041b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041b52:	1ad3      	subs	r3, r2, r3
 8041b54:	2b02      	cmp	r3, #2
 8041b56:	d901      	bls.n	8041b5c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8041b58:	2303      	movs	r3, #3
 8041b5a:	e1dd      	b.n	8041f18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8041b5c:	4b03      	ldr	r3, [pc, #12]	; (8041b6c <HAL_RCC_OscConfig+0x4f8>)
 8041b5e:	681b      	ldr	r3, [r3, #0]
 8041b60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8041b64:	2b00      	cmp	r3, #0
 8041b66:	d0f0      	beq.n	8041b4a <HAL_RCC_OscConfig+0x4d6>
 8041b68:	e01b      	b.n	8041ba2 <HAL_RCC_OscConfig+0x52e>
 8041b6a:	bf00      	nop
 8041b6c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8041b70:	4b9b      	ldr	r3, [pc, #620]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041b72:	681b      	ldr	r3, [r3, #0]
 8041b74:	4a9a      	ldr	r2, [pc, #616]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041b76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8041b7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8041b7c:	f7ff f9ee 	bl	8040f5c <HAL_GetTick>
 8041b80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8041b82:	e008      	b.n	8041b96 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8041b84:	f7ff f9ea 	bl	8040f5c <HAL_GetTick>
 8041b88:	4602      	mov	r2, r0
 8041b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041b8c:	1ad3      	subs	r3, r2, r3
 8041b8e:	2b02      	cmp	r3, #2
 8041b90:	d901      	bls.n	8041b96 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8041b92:	2303      	movs	r3, #3
 8041b94:	e1c0      	b.n	8041f18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8041b96:	4b92      	ldr	r3, [pc, #584]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041b98:	681b      	ldr	r3, [r3, #0]
 8041b9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8041b9e:	2b00      	cmp	r3, #0
 8041ba0:	d1f0      	bne.n	8041b84 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8041ba2:	687b      	ldr	r3, [r7, #4]
 8041ba4:	681b      	ldr	r3, [r3, #0]
 8041ba6:	f003 0304 	and.w	r3, r3, #4
 8041baa:	2b00      	cmp	r3, #0
 8041bac:	f000 8081 	beq.w	8041cb2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8041bb0:	4b8c      	ldr	r3, [pc, #560]	; (8041de4 <HAL_RCC_OscConfig+0x770>)
 8041bb2:	681b      	ldr	r3, [r3, #0]
 8041bb4:	4a8b      	ldr	r2, [pc, #556]	; (8041de4 <HAL_RCC_OscConfig+0x770>)
 8041bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041bba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8041bbc:	f7ff f9ce 	bl	8040f5c <HAL_GetTick>
 8041bc0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8041bc2:	e008      	b.n	8041bd6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8041bc4:	f7ff f9ca 	bl	8040f5c <HAL_GetTick>
 8041bc8:	4602      	mov	r2, r0
 8041bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041bcc:	1ad3      	subs	r3, r2, r3
 8041bce:	2b64      	cmp	r3, #100	; 0x64
 8041bd0:	d901      	bls.n	8041bd6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8041bd2:	2303      	movs	r3, #3
 8041bd4:	e1a0      	b.n	8041f18 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8041bd6:	4b83      	ldr	r3, [pc, #524]	; (8041de4 <HAL_RCC_OscConfig+0x770>)
 8041bd8:	681b      	ldr	r3, [r3, #0]
 8041bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041bde:	2b00      	cmp	r3, #0
 8041be0:	d0f0      	beq.n	8041bc4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8041be2:	687b      	ldr	r3, [r7, #4]
 8041be4:	689b      	ldr	r3, [r3, #8]
 8041be6:	2b01      	cmp	r3, #1
 8041be8:	d106      	bne.n	8041bf8 <HAL_RCC_OscConfig+0x584>
 8041bea:	4b7d      	ldr	r3, [pc, #500]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041bee:	4a7c      	ldr	r2, [pc, #496]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041bf0:	f043 0301 	orr.w	r3, r3, #1
 8041bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8041bf6:	e02d      	b.n	8041c54 <HAL_RCC_OscConfig+0x5e0>
 8041bf8:	687b      	ldr	r3, [r7, #4]
 8041bfa:	689b      	ldr	r3, [r3, #8]
 8041bfc:	2b00      	cmp	r3, #0
 8041bfe:	d10c      	bne.n	8041c1a <HAL_RCC_OscConfig+0x5a6>
 8041c00:	4b77      	ldr	r3, [pc, #476]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041c04:	4a76      	ldr	r2, [pc, #472]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041c06:	f023 0301 	bic.w	r3, r3, #1
 8041c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8041c0c:	4b74      	ldr	r3, [pc, #464]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041c10:	4a73      	ldr	r2, [pc, #460]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041c12:	f023 0304 	bic.w	r3, r3, #4
 8041c16:	6713      	str	r3, [r2, #112]	; 0x70
 8041c18:	e01c      	b.n	8041c54 <HAL_RCC_OscConfig+0x5e0>
 8041c1a:	687b      	ldr	r3, [r7, #4]
 8041c1c:	689b      	ldr	r3, [r3, #8]
 8041c1e:	2b05      	cmp	r3, #5
 8041c20:	d10c      	bne.n	8041c3c <HAL_RCC_OscConfig+0x5c8>
 8041c22:	4b6f      	ldr	r3, [pc, #444]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041c26:	4a6e      	ldr	r2, [pc, #440]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041c28:	f043 0304 	orr.w	r3, r3, #4
 8041c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8041c2e:	4b6c      	ldr	r3, [pc, #432]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041c32:	4a6b      	ldr	r2, [pc, #428]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041c34:	f043 0301 	orr.w	r3, r3, #1
 8041c38:	6713      	str	r3, [r2, #112]	; 0x70
 8041c3a:	e00b      	b.n	8041c54 <HAL_RCC_OscConfig+0x5e0>
 8041c3c:	4b68      	ldr	r3, [pc, #416]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041c40:	4a67      	ldr	r2, [pc, #412]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041c42:	f023 0301 	bic.w	r3, r3, #1
 8041c46:	6713      	str	r3, [r2, #112]	; 0x70
 8041c48:	4b65      	ldr	r3, [pc, #404]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041c4c:	4a64      	ldr	r2, [pc, #400]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041c4e:	f023 0304 	bic.w	r3, r3, #4
 8041c52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8041c54:	687b      	ldr	r3, [r7, #4]
 8041c56:	689b      	ldr	r3, [r3, #8]
 8041c58:	2b00      	cmp	r3, #0
 8041c5a:	d015      	beq.n	8041c88 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041c5c:	f7ff f97e 	bl	8040f5c <HAL_GetTick>
 8041c60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8041c62:	e00a      	b.n	8041c7a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041c64:	f7ff f97a 	bl	8040f5c <HAL_GetTick>
 8041c68:	4602      	mov	r2, r0
 8041c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041c6c:	1ad3      	subs	r3, r2, r3
 8041c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8041c72:	4293      	cmp	r3, r2
 8041c74:	d901      	bls.n	8041c7a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8041c76:	2303      	movs	r3, #3
 8041c78:	e14e      	b.n	8041f18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8041c7a:	4b59      	ldr	r3, [pc, #356]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041c7e:	f003 0302 	and.w	r3, r3, #2
 8041c82:	2b00      	cmp	r3, #0
 8041c84:	d0ee      	beq.n	8041c64 <HAL_RCC_OscConfig+0x5f0>
 8041c86:	e014      	b.n	8041cb2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041c88:	f7ff f968 	bl	8040f5c <HAL_GetTick>
 8041c8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8041c8e:	e00a      	b.n	8041ca6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041c90:	f7ff f964 	bl	8040f5c <HAL_GetTick>
 8041c94:	4602      	mov	r2, r0
 8041c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041c98:	1ad3      	subs	r3, r2, r3
 8041c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8041c9e:	4293      	cmp	r3, r2
 8041ca0:	d901      	bls.n	8041ca6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8041ca2:	2303      	movs	r3, #3
 8041ca4:	e138      	b.n	8041f18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8041ca6:	4b4e      	ldr	r3, [pc, #312]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041caa:	f003 0302 	and.w	r3, r3, #2
 8041cae:	2b00      	cmp	r3, #0
 8041cb0:	d1ee      	bne.n	8041c90 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8041cb2:	687b      	ldr	r3, [r7, #4]
 8041cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041cb6:	2b00      	cmp	r3, #0
 8041cb8:	f000 812d 	beq.w	8041f16 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8041cbc:	4b48      	ldr	r3, [pc, #288]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041cbe:	691b      	ldr	r3, [r3, #16]
 8041cc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8041cc4:	2b18      	cmp	r3, #24
 8041cc6:	f000 80bd 	beq.w	8041e44 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8041cca:	687b      	ldr	r3, [r7, #4]
 8041ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041cce:	2b02      	cmp	r3, #2
 8041cd0:	f040 809e 	bne.w	8041e10 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041cd4:	4b42      	ldr	r3, [pc, #264]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041cd6:	681b      	ldr	r3, [r3, #0]
 8041cd8:	4a41      	ldr	r2, [pc, #260]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8041cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041ce0:	f7ff f93c 	bl	8040f5c <HAL_GetTick>
 8041ce4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8041ce6:	e008      	b.n	8041cfa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041ce8:	f7ff f938 	bl	8040f5c <HAL_GetTick>
 8041cec:	4602      	mov	r2, r0
 8041cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041cf0:	1ad3      	subs	r3, r2, r3
 8041cf2:	2b02      	cmp	r3, #2
 8041cf4:	d901      	bls.n	8041cfa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8041cf6:	2303      	movs	r3, #3
 8041cf8:	e10e      	b.n	8041f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8041cfa:	4b39      	ldr	r3, [pc, #228]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041cfc:	681b      	ldr	r3, [r3, #0]
 8041cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041d02:	2b00      	cmp	r3, #0
 8041d04:	d1f0      	bne.n	8041ce8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8041d06:	4b36      	ldr	r3, [pc, #216]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041d08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8041d0a:	4b37      	ldr	r3, [pc, #220]	; (8041de8 <HAL_RCC_OscConfig+0x774>)
 8041d0c:	4013      	ands	r3, r2
 8041d0e:	687a      	ldr	r2, [r7, #4]
 8041d10:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8041d12:	687a      	ldr	r2, [r7, #4]
 8041d14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8041d16:	0112      	lsls	r2, r2, #4
 8041d18:	430a      	orrs	r2, r1
 8041d1a:	4931      	ldr	r1, [pc, #196]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041d1c:	4313      	orrs	r3, r2
 8041d1e:	628b      	str	r3, [r1, #40]	; 0x28
 8041d20:	687b      	ldr	r3, [r7, #4]
 8041d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041d24:	3b01      	subs	r3, #1
 8041d26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8041d2a:	687b      	ldr	r3, [r7, #4]
 8041d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8041d2e:	3b01      	subs	r3, #1
 8041d30:	025b      	lsls	r3, r3, #9
 8041d32:	b29b      	uxth	r3, r3
 8041d34:	431a      	orrs	r2, r3
 8041d36:	687b      	ldr	r3, [r7, #4]
 8041d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8041d3a:	3b01      	subs	r3, #1
 8041d3c:	041b      	lsls	r3, r3, #16
 8041d3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8041d42:	431a      	orrs	r2, r3
 8041d44:	687b      	ldr	r3, [r7, #4]
 8041d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041d48:	3b01      	subs	r3, #1
 8041d4a:	061b      	lsls	r3, r3, #24
 8041d4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8041d50:	4923      	ldr	r1, [pc, #140]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041d52:	4313      	orrs	r3, r2
 8041d54:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8041d56:	4b22      	ldr	r3, [pc, #136]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041d5a:	4a21      	ldr	r2, [pc, #132]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041d5c:	f023 0301 	bic.w	r3, r3, #1
 8041d60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8041d62:	4b1f      	ldr	r3, [pc, #124]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8041d66:	4b21      	ldr	r3, [pc, #132]	; (8041dec <HAL_RCC_OscConfig+0x778>)
 8041d68:	4013      	ands	r3, r2
 8041d6a:	687a      	ldr	r2, [r7, #4]
 8041d6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8041d6e:	00d2      	lsls	r2, r2, #3
 8041d70:	491b      	ldr	r1, [pc, #108]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041d72:	4313      	orrs	r3, r2
 8041d74:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8041d76:	4b1a      	ldr	r3, [pc, #104]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041d7a:	f023 020c 	bic.w	r2, r3, #12
 8041d7e:	687b      	ldr	r3, [r7, #4]
 8041d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041d82:	4917      	ldr	r1, [pc, #92]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041d84:	4313      	orrs	r3, r2
 8041d86:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8041d88:	4b15      	ldr	r3, [pc, #84]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041d8c:	f023 0202 	bic.w	r2, r3, #2
 8041d90:	687b      	ldr	r3, [r7, #4]
 8041d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041d94:	4912      	ldr	r1, [pc, #72]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041d96:	4313      	orrs	r3, r2
 8041d98:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8041d9a:	4b11      	ldr	r3, [pc, #68]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041d9e:	4a10      	ldr	r2, [pc, #64]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041da4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8041da6:	4b0e      	ldr	r3, [pc, #56]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041daa:	4a0d      	ldr	r2, [pc, #52]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8041db0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8041db2:	4b0b      	ldr	r3, [pc, #44]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041db6:	4a0a      	ldr	r2, [pc, #40]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8041dbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8041dbe:	4b08      	ldr	r3, [pc, #32]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041dc2:	4a07      	ldr	r2, [pc, #28]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041dc4:	f043 0301 	orr.w	r3, r3, #1
 8041dc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8041dca:	4b05      	ldr	r3, [pc, #20]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041dcc:	681b      	ldr	r3, [r3, #0]
 8041dce:	4a04      	ldr	r2, [pc, #16]	; (8041de0 <HAL_RCC_OscConfig+0x76c>)
 8041dd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8041dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041dd6:	f7ff f8c1 	bl	8040f5c <HAL_GetTick>
 8041dda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8041ddc:	e011      	b.n	8041e02 <HAL_RCC_OscConfig+0x78e>
 8041dde:	bf00      	nop
 8041de0:	58024400 	.word	0x58024400
 8041de4:	58024800 	.word	0x58024800
 8041de8:	fffffc0c 	.word	0xfffffc0c
 8041dec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041df0:	f7ff f8b4 	bl	8040f5c <HAL_GetTick>
 8041df4:	4602      	mov	r2, r0
 8041df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041df8:	1ad3      	subs	r3, r2, r3
 8041dfa:	2b02      	cmp	r3, #2
 8041dfc:	d901      	bls.n	8041e02 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8041dfe:	2303      	movs	r3, #3
 8041e00:	e08a      	b.n	8041f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8041e02:	4b47      	ldr	r3, [pc, #284]	; (8041f20 <HAL_RCC_OscConfig+0x8ac>)
 8041e04:	681b      	ldr	r3, [r3, #0]
 8041e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041e0a:	2b00      	cmp	r3, #0
 8041e0c:	d0f0      	beq.n	8041df0 <HAL_RCC_OscConfig+0x77c>
 8041e0e:	e082      	b.n	8041f16 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041e10:	4b43      	ldr	r3, [pc, #268]	; (8041f20 <HAL_RCC_OscConfig+0x8ac>)
 8041e12:	681b      	ldr	r3, [r3, #0]
 8041e14:	4a42      	ldr	r2, [pc, #264]	; (8041f20 <HAL_RCC_OscConfig+0x8ac>)
 8041e16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8041e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041e1c:	f7ff f89e 	bl	8040f5c <HAL_GetTick>
 8041e20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8041e22:	e008      	b.n	8041e36 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041e24:	f7ff f89a 	bl	8040f5c <HAL_GetTick>
 8041e28:	4602      	mov	r2, r0
 8041e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041e2c:	1ad3      	subs	r3, r2, r3
 8041e2e:	2b02      	cmp	r3, #2
 8041e30:	d901      	bls.n	8041e36 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8041e32:	2303      	movs	r3, #3
 8041e34:	e070      	b.n	8041f18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8041e36:	4b3a      	ldr	r3, [pc, #232]	; (8041f20 <HAL_RCC_OscConfig+0x8ac>)
 8041e38:	681b      	ldr	r3, [r3, #0]
 8041e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041e3e:	2b00      	cmp	r3, #0
 8041e40:	d1f0      	bne.n	8041e24 <HAL_RCC_OscConfig+0x7b0>
 8041e42:	e068      	b.n	8041f16 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8041e44:	4b36      	ldr	r3, [pc, #216]	; (8041f20 <HAL_RCC_OscConfig+0x8ac>)
 8041e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041e48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8041e4a:	4b35      	ldr	r3, [pc, #212]	; (8041f20 <HAL_RCC_OscConfig+0x8ac>)
 8041e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041e4e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8041e50:	687b      	ldr	r3, [r7, #4]
 8041e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041e54:	2b01      	cmp	r3, #1
 8041e56:	d031      	beq.n	8041ebc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8041e58:	693b      	ldr	r3, [r7, #16]
 8041e5a:	f003 0203 	and.w	r2, r3, #3
 8041e5e:	687b      	ldr	r3, [r7, #4]
 8041e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8041e62:	429a      	cmp	r2, r3
 8041e64:	d12a      	bne.n	8041ebc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8041e66:	693b      	ldr	r3, [r7, #16]
 8041e68:	091b      	lsrs	r3, r3, #4
 8041e6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8041e6e:	687b      	ldr	r3, [r7, #4]
 8041e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8041e72:	429a      	cmp	r2, r3
 8041e74:	d122      	bne.n	8041ebc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8041e76:	68fb      	ldr	r3, [r7, #12]
 8041e78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8041e7c:	687b      	ldr	r3, [r7, #4]
 8041e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041e80:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8041e82:	429a      	cmp	r2, r3
 8041e84:	d11a      	bne.n	8041ebc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8041e86:	68fb      	ldr	r3, [r7, #12]
 8041e88:	0a5b      	lsrs	r3, r3, #9
 8041e8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8041e8e:	687b      	ldr	r3, [r7, #4]
 8041e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8041e92:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8041e94:	429a      	cmp	r2, r3
 8041e96:	d111      	bne.n	8041ebc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8041e98:	68fb      	ldr	r3, [r7, #12]
 8041e9a:	0c1b      	lsrs	r3, r3, #16
 8041e9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8041ea0:	687b      	ldr	r3, [r7, #4]
 8041ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8041ea4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8041ea6:	429a      	cmp	r2, r3
 8041ea8:	d108      	bne.n	8041ebc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8041eaa:	68fb      	ldr	r3, [r7, #12]
 8041eac:	0e1b      	lsrs	r3, r3, #24
 8041eae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8041eb2:	687b      	ldr	r3, [r7, #4]
 8041eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041eb6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8041eb8:	429a      	cmp	r2, r3
 8041eba:	d001      	beq.n	8041ec0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8041ebc:	2301      	movs	r3, #1
 8041ebe:	e02b      	b.n	8041f18 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8041ec0:	4b17      	ldr	r3, [pc, #92]	; (8041f20 <HAL_RCC_OscConfig+0x8ac>)
 8041ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8041ec4:	08db      	lsrs	r3, r3, #3
 8041ec6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8041eca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8041ecc:	687b      	ldr	r3, [r7, #4]
 8041ece:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8041ed0:	693a      	ldr	r2, [r7, #16]
 8041ed2:	429a      	cmp	r2, r3
 8041ed4:	d01f      	beq.n	8041f16 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8041ed6:	4b12      	ldr	r3, [pc, #72]	; (8041f20 <HAL_RCC_OscConfig+0x8ac>)
 8041ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041eda:	4a11      	ldr	r2, [pc, #68]	; (8041f20 <HAL_RCC_OscConfig+0x8ac>)
 8041edc:	f023 0301 	bic.w	r3, r3, #1
 8041ee0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8041ee2:	f7ff f83b 	bl	8040f5c <HAL_GetTick>
 8041ee6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8041ee8:	bf00      	nop
 8041eea:	f7ff f837 	bl	8040f5c <HAL_GetTick>
 8041eee:	4602      	mov	r2, r0
 8041ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8041ef2:	4293      	cmp	r3, r2
 8041ef4:	d0f9      	beq.n	8041eea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8041ef6:	4b0a      	ldr	r3, [pc, #40]	; (8041f20 <HAL_RCC_OscConfig+0x8ac>)
 8041ef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8041efa:	4b0a      	ldr	r3, [pc, #40]	; (8041f24 <HAL_RCC_OscConfig+0x8b0>)
 8041efc:	4013      	ands	r3, r2
 8041efe:	687a      	ldr	r2, [r7, #4]
 8041f00:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8041f02:	00d2      	lsls	r2, r2, #3
 8041f04:	4906      	ldr	r1, [pc, #24]	; (8041f20 <HAL_RCC_OscConfig+0x8ac>)
 8041f06:	4313      	orrs	r3, r2
 8041f08:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8041f0a:	4b05      	ldr	r3, [pc, #20]	; (8041f20 <HAL_RCC_OscConfig+0x8ac>)
 8041f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041f0e:	4a04      	ldr	r2, [pc, #16]	; (8041f20 <HAL_RCC_OscConfig+0x8ac>)
 8041f10:	f043 0301 	orr.w	r3, r3, #1
 8041f14:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8041f16:	2300      	movs	r3, #0
}
 8041f18:	4618      	mov	r0, r3
 8041f1a:	3730      	adds	r7, #48	; 0x30
 8041f1c:	46bd      	mov	sp, r7
 8041f1e:	bd80      	pop	{r7, pc}
 8041f20:	58024400 	.word	0x58024400
 8041f24:	ffff0007 	.word	0xffff0007

08041f28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8041f28:	b580      	push	{r7, lr}
 8041f2a:	b086      	sub	sp, #24
 8041f2c:	af00      	add	r7, sp, #0
 8041f2e:	6078      	str	r0, [r7, #4]
 8041f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8041f32:	687b      	ldr	r3, [r7, #4]
 8041f34:	2b00      	cmp	r3, #0
 8041f36:	d101      	bne.n	8041f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8041f38:	2301      	movs	r3, #1
 8041f3a:	e19c      	b.n	8042276 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8041f3c:	4b8a      	ldr	r3, [pc, #552]	; (8042168 <HAL_RCC_ClockConfig+0x240>)
 8041f3e:	681b      	ldr	r3, [r3, #0]
 8041f40:	f003 030f 	and.w	r3, r3, #15
 8041f44:	683a      	ldr	r2, [r7, #0]
 8041f46:	429a      	cmp	r2, r3
 8041f48:	d910      	bls.n	8041f6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041f4a:	4b87      	ldr	r3, [pc, #540]	; (8042168 <HAL_RCC_ClockConfig+0x240>)
 8041f4c:	681b      	ldr	r3, [r3, #0]
 8041f4e:	f023 020f 	bic.w	r2, r3, #15
 8041f52:	4985      	ldr	r1, [pc, #532]	; (8042168 <HAL_RCC_ClockConfig+0x240>)
 8041f54:	683b      	ldr	r3, [r7, #0]
 8041f56:	4313      	orrs	r3, r2
 8041f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8041f5a:	4b83      	ldr	r3, [pc, #524]	; (8042168 <HAL_RCC_ClockConfig+0x240>)
 8041f5c:	681b      	ldr	r3, [r3, #0]
 8041f5e:	f003 030f 	and.w	r3, r3, #15
 8041f62:	683a      	ldr	r2, [r7, #0]
 8041f64:	429a      	cmp	r2, r3
 8041f66:	d001      	beq.n	8041f6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8041f68:	2301      	movs	r3, #1
 8041f6a:	e184      	b.n	8042276 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8041f6c:	687b      	ldr	r3, [r7, #4]
 8041f6e:	681b      	ldr	r3, [r3, #0]
 8041f70:	f003 0304 	and.w	r3, r3, #4
 8041f74:	2b00      	cmp	r3, #0
 8041f76:	d010      	beq.n	8041f9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8041f78:	687b      	ldr	r3, [r7, #4]
 8041f7a:	691a      	ldr	r2, [r3, #16]
 8041f7c:	4b7b      	ldr	r3, [pc, #492]	; (804216c <HAL_RCC_ClockConfig+0x244>)
 8041f7e:	699b      	ldr	r3, [r3, #24]
 8041f80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8041f84:	429a      	cmp	r2, r3
 8041f86:	d908      	bls.n	8041f9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8041f88:	4b78      	ldr	r3, [pc, #480]	; (804216c <HAL_RCC_ClockConfig+0x244>)
 8041f8a:	699b      	ldr	r3, [r3, #24]
 8041f8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8041f90:	687b      	ldr	r3, [r7, #4]
 8041f92:	691b      	ldr	r3, [r3, #16]
 8041f94:	4975      	ldr	r1, [pc, #468]	; (804216c <HAL_RCC_ClockConfig+0x244>)
 8041f96:	4313      	orrs	r3, r2
 8041f98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8041f9a:	687b      	ldr	r3, [r7, #4]
 8041f9c:	681b      	ldr	r3, [r3, #0]
 8041f9e:	f003 0308 	and.w	r3, r3, #8
 8041fa2:	2b00      	cmp	r3, #0
 8041fa4:	d010      	beq.n	8041fc8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8041fa6:	687b      	ldr	r3, [r7, #4]
 8041fa8:	695a      	ldr	r2, [r3, #20]
 8041faa:	4b70      	ldr	r3, [pc, #448]	; (804216c <HAL_RCC_ClockConfig+0x244>)
 8041fac:	69db      	ldr	r3, [r3, #28]
 8041fae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8041fb2:	429a      	cmp	r2, r3
 8041fb4:	d908      	bls.n	8041fc8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8041fb6:	4b6d      	ldr	r3, [pc, #436]	; (804216c <HAL_RCC_ClockConfig+0x244>)
 8041fb8:	69db      	ldr	r3, [r3, #28]
 8041fba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8041fbe:	687b      	ldr	r3, [r7, #4]
 8041fc0:	695b      	ldr	r3, [r3, #20]
 8041fc2:	496a      	ldr	r1, [pc, #424]	; (804216c <HAL_RCC_ClockConfig+0x244>)
 8041fc4:	4313      	orrs	r3, r2
 8041fc6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8041fc8:	687b      	ldr	r3, [r7, #4]
 8041fca:	681b      	ldr	r3, [r3, #0]
 8041fcc:	f003 0310 	and.w	r3, r3, #16
 8041fd0:	2b00      	cmp	r3, #0
 8041fd2:	d010      	beq.n	8041ff6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8041fd4:	687b      	ldr	r3, [r7, #4]
 8041fd6:	699a      	ldr	r2, [r3, #24]
 8041fd8:	4b64      	ldr	r3, [pc, #400]	; (804216c <HAL_RCC_ClockConfig+0x244>)
 8041fda:	69db      	ldr	r3, [r3, #28]
 8041fdc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8041fe0:	429a      	cmp	r2, r3
 8041fe2:	d908      	bls.n	8041ff6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8041fe4:	4b61      	ldr	r3, [pc, #388]	; (804216c <HAL_RCC_ClockConfig+0x244>)
 8041fe6:	69db      	ldr	r3, [r3, #28]
 8041fe8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8041fec:	687b      	ldr	r3, [r7, #4]
 8041fee:	699b      	ldr	r3, [r3, #24]
 8041ff0:	495e      	ldr	r1, [pc, #376]	; (804216c <HAL_RCC_ClockConfig+0x244>)
 8041ff2:	4313      	orrs	r3, r2
 8041ff4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8041ff6:	687b      	ldr	r3, [r7, #4]
 8041ff8:	681b      	ldr	r3, [r3, #0]
 8041ffa:	f003 0320 	and.w	r3, r3, #32
 8041ffe:	2b00      	cmp	r3, #0
 8042000:	d010      	beq.n	8042024 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8042002:	687b      	ldr	r3, [r7, #4]
 8042004:	69da      	ldr	r2, [r3, #28]
 8042006:	4b59      	ldr	r3, [pc, #356]	; (804216c <HAL_RCC_ClockConfig+0x244>)
 8042008:	6a1b      	ldr	r3, [r3, #32]
 804200a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 804200e:	429a      	cmp	r2, r3
 8042010:	d908      	bls.n	8042024 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8042012:	4b56      	ldr	r3, [pc, #344]	; (804216c <HAL_RCC_ClockConfig+0x244>)
 8042014:	6a1b      	ldr	r3, [r3, #32]
 8042016:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 804201a:	687b      	ldr	r3, [r7, #4]
 804201c:	69db      	ldr	r3, [r3, #28]
 804201e:	4953      	ldr	r1, [pc, #332]	; (804216c <HAL_RCC_ClockConfig+0x244>)
 8042020:	4313      	orrs	r3, r2
 8042022:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8042024:	687b      	ldr	r3, [r7, #4]
 8042026:	681b      	ldr	r3, [r3, #0]
 8042028:	f003 0302 	and.w	r3, r3, #2
 804202c:	2b00      	cmp	r3, #0
 804202e:	d010      	beq.n	8042052 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8042030:	687b      	ldr	r3, [r7, #4]
 8042032:	68da      	ldr	r2, [r3, #12]
 8042034:	4b4d      	ldr	r3, [pc, #308]	; (804216c <HAL_RCC_ClockConfig+0x244>)
 8042036:	699b      	ldr	r3, [r3, #24]
 8042038:	f003 030f 	and.w	r3, r3, #15
 804203c:	429a      	cmp	r2, r3
 804203e:	d908      	bls.n	8042052 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8042040:	4b4a      	ldr	r3, [pc, #296]	; (804216c <HAL_RCC_ClockConfig+0x244>)
 8042042:	699b      	ldr	r3, [r3, #24]
 8042044:	f023 020f 	bic.w	r2, r3, #15
 8042048:	687b      	ldr	r3, [r7, #4]
 804204a:	68db      	ldr	r3, [r3, #12]
 804204c:	4947      	ldr	r1, [pc, #284]	; (804216c <HAL_RCC_ClockConfig+0x244>)
 804204e:	4313      	orrs	r3, r2
 8042050:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8042052:	687b      	ldr	r3, [r7, #4]
 8042054:	681b      	ldr	r3, [r3, #0]
 8042056:	f003 0301 	and.w	r3, r3, #1
 804205a:	2b00      	cmp	r3, #0
 804205c:	d055      	beq.n	804210a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 804205e:	4b43      	ldr	r3, [pc, #268]	; (804216c <HAL_RCC_ClockConfig+0x244>)
 8042060:	699b      	ldr	r3, [r3, #24]
 8042062:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8042066:	687b      	ldr	r3, [r7, #4]
 8042068:	689b      	ldr	r3, [r3, #8]
 804206a:	4940      	ldr	r1, [pc, #256]	; (804216c <HAL_RCC_ClockConfig+0x244>)
 804206c:	4313      	orrs	r3, r2
 804206e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8042070:	687b      	ldr	r3, [r7, #4]
 8042072:	685b      	ldr	r3, [r3, #4]
 8042074:	2b02      	cmp	r3, #2
 8042076:	d107      	bne.n	8042088 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8042078:	4b3c      	ldr	r3, [pc, #240]	; (804216c <HAL_RCC_ClockConfig+0x244>)
 804207a:	681b      	ldr	r3, [r3, #0]
 804207c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8042080:	2b00      	cmp	r3, #0
 8042082:	d121      	bne.n	80420c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8042084:	2301      	movs	r3, #1
 8042086:	e0f6      	b.n	8042276 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8042088:	687b      	ldr	r3, [r7, #4]
 804208a:	685b      	ldr	r3, [r3, #4]
 804208c:	2b03      	cmp	r3, #3
 804208e:	d107      	bne.n	80420a0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8042090:	4b36      	ldr	r3, [pc, #216]	; (804216c <HAL_RCC_ClockConfig+0x244>)
 8042092:	681b      	ldr	r3, [r3, #0]
 8042094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8042098:	2b00      	cmp	r3, #0
 804209a:	d115      	bne.n	80420c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 804209c:	2301      	movs	r3, #1
 804209e:	e0ea      	b.n	8042276 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80420a0:	687b      	ldr	r3, [r7, #4]
 80420a2:	685b      	ldr	r3, [r3, #4]
 80420a4:	2b01      	cmp	r3, #1
 80420a6:	d107      	bne.n	80420b8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80420a8:	4b30      	ldr	r3, [pc, #192]	; (804216c <HAL_RCC_ClockConfig+0x244>)
 80420aa:	681b      	ldr	r3, [r3, #0]
 80420ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80420b0:	2b00      	cmp	r3, #0
 80420b2:	d109      	bne.n	80420c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80420b4:	2301      	movs	r3, #1
 80420b6:	e0de      	b.n	8042276 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80420b8:	4b2c      	ldr	r3, [pc, #176]	; (804216c <HAL_RCC_ClockConfig+0x244>)
 80420ba:	681b      	ldr	r3, [r3, #0]
 80420bc:	f003 0304 	and.w	r3, r3, #4
 80420c0:	2b00      	cmp	r3, #0
 80420c2:	d101      	bne.n	80420c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80420c4:	2301      	movs	r3, #1
 80420c6:	e0d6      	b.n	8042276 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80420c8:	4b28      	ldr	r3, [pc, #160]	; (804216c <HAL_RCC_ClockConfig+0x244>)
 80420ca:	691b      	ldr	r3, [r3, #16]
 80420cc:	f023 0207 	bic.w	r2, r3, #7
 80420d0:	687b      	ldr	r3, [r7, #4]
 80420d2:	685b      	ldr	r3, [r3, #4]
 80420d4:	4925      	ldr	r1, [pc, #148]	; (804216c <HAL_RCC_ClockConfig+0x244>)
 80420d6:	4313      	orrs	r3, r2
 80420d8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80420da:	f7fe ff3f 	bl	8040f5c <HAL_GetTick>
 80420de:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80420e0:	e00a      	b.n	80420f8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80420e2:	f7fe ff3b 	bl	8040f5c <HAL_GetTick>
 80420e6:	4602      	mov	r2, r0
 80420e8:	697b      	ldr	r3, [r7, #20]
 80420ea:	1ad3      	subs	r3, r2, r3
 80420ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80420f0:	4293      	cmp	r3, r2
 80420f2:	d901      	bls.n	80420f8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80420f4:	2303      	movs	r3, #3
 80420f6:	e0be      	b.n	8042276 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80420f8:	4b1c      	ldr	r3, [pc, #112]	; (804216c <HAL_RCC_ClockConfig+0x244>)
 80420fa:	691b      	ldr	r3, [r3, #16]
 80420fc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8042100:	687b      	ldr	r3, [r7, #4]
 8042102:	685b      	ldr	r3, [r3, #4]
 8042104:	00db      	lsls	r3, r3, #3
 8042106:	429a      	cmp	r2, r3
 8042108:	d1eb      	bne.n	80420e2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 804210a:	687b      	ldr	r3, [r7, #4]
 804210c:	681b      	ldr	r3, [r3, #0]
 804210e:	f003 0302 	and.w	r3, r3, #2
 8042112:	2b00      	cmp	r3, #0
 8042114:	d010      	beq.n	8042138 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8042116:	687b      	ldr	r3, [r7, #4]
 8042118:	68da      	ldr	r2, [r3, #12]
 804211a:	4b14      	ldr	r3, [pc, #80]	; (804216c <HAL_RCC_ClockConfig+0x244>)
 804211c:	699b      	ldr	r3, [r3, #24]
 804211e:	f003 030f 	and.w	r3, r3, #15
 8042122:	429a      	cmp	r2, r3
 8042124:	d208      	bcs.n	8042138 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8042126:	4b11      	ldr	r3, [pc, #68]	; (804216c <HAL_RCC_ClockConfig+0x244>)
 8042128:	699b      	ldr	r3, [r3, #24]
 804212a:	f023 020f 	bic.w	r2, r3, #15
 804212e:	687b      	ldr	r3, [r7, #4]
 8042130:	68db      	ldr	r3, [r3, #12]
 8042132:	490e      	ldr	r1, [pc, #56]	; (804216c <HAL_RCC_ClockConfig+0x244>)
 8042134:	4313      	orrs	r3, r2
 8042136:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8042138:	4b0b      	ldr	r3, [pc, #44]	; (8042168 <HAL_RCC_ClockConfig+0x240>)
 804213a:	681b      	ldr	r3, [r3, #0]
 804213c:	f003 030f 	and.w	r3, r3, #15
 8042140:	683a      	ldr	r2, [r7, #0]
 8042142:	429a      	cmp	r2, r3
 8042144:	d214      	bcs.n	8042170 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8042146:	4b08      	ldr	r3, [pc, #32]	; (8042168 <HAL_RCC_ClockConfig+0x240>)
 8042148:	681b      	ldr	r3, [r3, #0]
 804214a:	f023 020f 	bic.w	r2, r3, #15
 804214e:	4906      	ldr	r1, [pc, #24]	; (8042168 <HAL_RCC_ClockConfig+0x240>)
 8042150:	683b      	ldr	r3, [r7, #0]
 8042152:	4313      	orrs	r3, r2
 8042154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8042156:	4b04      	ldr	r3, [pc, #16]	; (8042168 <HAL_RCC_ClockConfig+0x240>)
 8042158:	681b      	ldr	r3, [r3, #0]
 804215a:	f003 030f 	and.w	r3, r3, #15
 804215e:	683a      	ldr	r2, [r7, #0]
 8042160:	429a      	cmp	r2, r3
 8042162:	d005      	beq.n	8042170 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8042164:	2301      	movs	r3, #1
 8042166:	e086      	b.n	8042276 <HAL_RCC_ClockConfig+0x34e>
 8042168:	52002000 	.word	0x52002000
 804216c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8042170:	687b      	ldr	r3, [r7, #4]
 8042172:	681b      	ldr	r3, [r3, #0]
 8042174:	f003 0304 	and.w	r3, r3, #4
 8042178:	2b00      	cmp	r3, #0
 804217a:	d010      	beq.n	804219e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 804217c:	687b      	ldr	r3, [r7, #4]
 804217e:	691a      	ldr	r2, [r3, #16]
 8042180:	4b3f      	ldr	r3, [pc, #252]	; (8042280 <HAL_RCC_ClockConfig+0x358>)
 8042182:	699b      	ldr	r3, [r3, #24]
 8042184:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8042188:	429a      	cmp	r2, r3
 804218a:	d208      	bcs.n	804219e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 804218c:	4b3c      	ldr	r3, [pc, #240]	; (8042280 <HAL_RCC_ClockConfig+0x358>)
 804218e:	699b      	ldr	r3, [r3, #24]
 8042190:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8042194:	687b      	ldr	r3, [r7, #4]
 8042196:	691b      	ldr	r3, [r3, #16]
 8042198:	4939      	ldr	r1, [pc, #228]	; (8042280 <HAL_RCC_ClockConfig+0x358>)
 804219a:	4313      	orrs	r3, r2
 804219c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 804219e:	687b      	ldr	r3, [r7, #4]
 80421a0:	681b      	ldr	r3, [r3, #0]
 80421a2:	f003 0308 	and.w	r3, r3, #8
 80421a6:	2b00      	cmp	r3, #0
 80421a8:	d010      	beq.n	80421cc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80421aa:	687b      	ldr	r3, [r7, #4]
 80421ac:	695a      	ldr	r2, [r3, #20]
 80421ae:	4b34      	ldr	r3, [pc, #208]	; (8042280 <HAL_RCC_ClockConfig+0x358>)
 80421b0:	69db      	ldr	r3, [r3, #28]
 80421b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80421b6:	429a      	cmp	r2, r3
 80421b8:	d208      	bcs.n	80421cc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80421ba:	4b31      	ldr	r3, [pc, #196]	; (8042280 <HAL_RCC_ClockConfig+0x358>)
 80421bc:	69db      	ldr	r3, [r3, #28]
 80421be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80421c2:	687b      	ldr	r3, [r7, #4]
 80421c4:	695b      	ldr	r3, [r3, #20]
 80421c6:	492e      	ldr	r1, [pc, #184]	; (8042280 <HAL_RCC_ClockConfig+0x358>)
 80421c8:	4313      	orrs	r3, r2
 80421ca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80421cc:	687b      	ldr	r3, [r7, #4]
 80421ce:	681b      	ldr	r3, [r3, #0]
 80421d0:	f003 0310 	and.w	r3, r3, #16
 80421d4:	2b00      	cmp	r3, #0
 80421d6:	d010      	beq.n	80421fa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80421d8:	687b      	ldr	r3, [r7, #4]
 80421da:	699a      	ldr	r2, [r3, #24]
 80421dc:	4b28      	ldr	r3, [pc, #160]	; (8042280 <HAL_RCC_ClockConfig+0x358>)
 80421de:	69db      	ldr	r3, [r3, #28]
 80421e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80421e4:	429a      	cmp	r2, r3
 80421e6:	d208      	bcs.n	80421fa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80421e8:	4b25      	ldr	r3, [pc, #148]	; (8042280 <HAL_RCC_ClockConfig+0x358>)
 80421ea:	69db      	ldr	r3, [r3, #28]
 80421ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80421f0:	687b      	ldr	r3, [r7, #4]
 80421f2:	699b      	ldr	r3, [r3, #24]
 80421f4:	4922      	ldr	r1, [pc, #136]	; (8042280 <HAL_RCC_ClockConfig+0x358>)
 80421f6:	4313      	orrs	r3, r2
 80421f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80421fa:	687b      	ldr	r3, [r7, #4]
 80421fc:	681b      	ldr	r3, [r3, #0]
 80421fe:	f003 0320 	and.w	r3, r3, #32
 8042202:	2b00      	cmp	r3, #0
 8042204:	d010      	beq.n	8042228 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8042206:	687b      	ldr	r3, [r7, #4]
 8042208:	69da      	ldr	r2, [r3, #28]
 804220a:	4b1d      	ldr	r3, [pc, #116]	; (8042280 <HAL_RCC_ClockConfig+0x358>)
 804220c:	6a1b      	ldr	r3, [r3, #32]
 804220e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8042212:	429a      	cmp	r2, r3
 8042214:	d208      	bcs.n	8042228 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8042216:	4b1a      	ldr	r3, [pc, #104]	; (8042280 <HAL_RCC_ClockConfig+0x358>)
 8042218:	6a1b      	ldr	r3, [r3, #32]
 804221a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 804221e:	687b      	ldr	r3, [r7, #4]
 8042220:	69db      	ldr	r3, [r3, #28]
 8042222:	4917      	ldr	r1, [pc, #92]	; (8042280 <HAL_RCC_ClockConfig+0x358>)
 8042224:	4313      	orrs	r3, r2
 8042226:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8042228:	f000 f89e 	bl	8042368 <HAL_RCC_GetSysClockFreq>
 804222c:	4602      	mov	r2, r0
 804222e:	4b14      	ldr	r3, [pc, #80]	; (8042280 <HAL_RCC_ClockConfig+0x358>)
 8042230:	699b      	ldr	r3, [r3, #24]
 8042232:	0a1b      	lsrs	r3, r3, #8
 8042234:	f003 030f 	and.w	r3, r3, #15
 8042238:	4912      	ldr	r1, [pc, #72]	; (8042284 <HAL_RCC_ClockConfig+0x35c>)
 804223a:	5ccb      	ldrb	r3, [r1, r3]
 804223c:	f003 031f 	and.w	r3, r3, #31
 8042240:	fa22 f303 	lsr.w	r3, r2, r3
 8042244:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8042246:	4b0e      	ldr	r3, [pc, #56]	; (8042280 <HAL_RCC_ClockConfig+0x358>)
 8042248:	699b      	ldr	r3, [r3, #24]
 804224a:	f003 030f 	and.w	r3, r3, #15
 804224e:	4a0d      	ldr	r2, [pc, #52]	; (8042284 <HAL_RCC_ClockConfig+0x35c>)
 8042250:	5cd3      	ldrb	r3, [r2, r3]
 8042252:	f003 031f 	and.w	r3, r3, #31
 8042256:	693a      	ldr	r2, [r7, #16]
 8042258:	fa22 f303 	lsr.w	r3, r2, r3
 804225c:	4a0a      	ldr	r2, [pc, #40]	; (8042288 <HAL_RCC_ClockConfig+0x360>)
 804225e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8042260:	4a0a      	ldr	r2, [pc, #40]	; (804228c <HAL_RCC_ClockConfig+0x364>)
 8042262:	693b      	ldr	r3, [r7, #16]
 8042264:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8042266:	4b0a      	ldr	r3, [pc, #40]	; (8042290 <HAL_RCC_ClockConfig+0x368>)
 8042268:	681b      	ldr	r3, [r3, #0]
 804226a:	4618      	mov	r0, r3
 804226c:	f7fe fe2c 	bl	8040ec8 <HAL_InitTick>
 8042270:	4603      	mov	r3, r0
 8042272:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8042274:	7bfb      	ldrb	r3, [r7, #15]
}
 8042276:	4618      	mov	r0, r3
 8042278:	3718      	adds	r7, #24
 804227a:	46bd      	mov	sp, r7
 804227c:	bd80      	pop	{r7, pc}
 804227e:	bf00      	nop
 8042280:	58024400 	.word	0x58024400
 8042284:	08046774 	.word	0x08046774
 8042288:	24000004 	.word	0x24000004
 804228c:	24000000 	.word	0x24000000
 8042290:	24000008 	.word	0x24000008

08042294 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8042294:	b580      	push	{r7, lr}
 8042296:	b08c      	sub	sp, #48	; 0x30
 8042298:	af00      	add	r7, sp, #0
 804229a:	60f8      	str	r0, [r7, #12]
 804229c:	60b9      	str	r1, [r7, #8]
 804229e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80422a0:	68fb      	ldr	r3, [r7, #12]
 80422a2:	2b00      	cmp	r3, #0
 80422a4:	d12a      	bne.n	80422fc <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80422a6:	4b2d      	ldr	r3, [pc, #180]	; (804235c <HAL_RCC_MCOConfig+0xc8>)
 80422a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80422ac:	4a2b      	ldr	r2, [pc, #172]	; (804235c <HAL_RCC_MCOConfig+0xc8>)
 80422ae:	f043 0301 	orr.w	r3, r3, #1
 80422b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80422b6:	4b29      	ldr	r3, [pc, #164]	; (804235c <HAL_RCC_MCOConfig+0xc8>)
 80422b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80422bc:	f003 0301 	and.w	r3, r3, #1
 80422c0:	61bb      	str	r3, [r7, #24]
 80422c2:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80422c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80422c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80422ca:	2302      	movs	r3, #2
 80422cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80422ce:	2303      	movs	r3, #3
 80422d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80422d2:	2300      	movs	r3, #0
 80422d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80422d6:	2300      	movs	r3, #0
 80422d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80422da:	f107 031c 	add.w	r3, r7, #28
 80422de:	4619      	mov	r1, r3
 80422e0:	481f      	ldr	r0, [pc, #124]	; (8042360 <HAL_RCC_MCOConfig+0xcc>)
 80422e2:	f7fe ff5b 	bl	804119c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80422e6:	4b1d      	ldr	r3, [pc, #116]	; (804235c <HAL_RCC_MCOConfig+0xc8>)
 80422e8:	691b      	ldr	r3, [r3, #16]
 80422ea:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 80422ee:	68b9      	ldr	r1, [r7, #8]
 80422f0:	687b      	ldr	r3, [r7, #4]
 80422f2:	430b      	orrs	r3, r1
 80422f4:	4919      	ldr	r1, [pc, #100]	; (804235c <HAL_RCC_MCOConfig+0xc8>)
 80422f6:	4313      	orrs	r3, r2
 80422f8:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80422fa:	e02a      	b.n	8042352 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80422fc:	4b17      	ldr	r3, [pc, #92]	; (804235c <HAL_RCC_MCOConfig+0xc8>)
 80422fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8042302:	4a16      	ldr	r2, [pc, #88]	; (804235c <HAL_RCC_MCOConfig+0xc8>)
 8042304:	f043 0304 	orr.w	r3, r3, #4
 8042308:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 804230c:	4b13      	ldr	r3, [pc, #76]	; (804235c <HAL_RCC_MCOConfig+0xc8>)
 804230e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8042312:	f003 0304 	and.w	r3, r3, #4
 8042316:	617b      	str	r3, [r7, #20]
 8042318:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 804231a:	f44f 7300 	mov.w	r3, #512	; 0x200
 804231e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8042320:	2302      	movs	r3, #2
 8042322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8042324:	2303      	movs	r3, #3
 8042326:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8042328:	2300      	movs	r3, #0
 804232a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 804232c:	2300      	movs	r3, #0
 804232e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8042330:	f107 031c 	add.w	r3, r7, #28
 8042334:	4619      	mov	r1, r3
 8042336:	480b      	ldr	r0, [pc, #44]	; (8042364 <HAL_RCC_MCOConfig+0xd0>)
 8042338:	f7fe ff30 	bl	804119c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 804233c:	4b07      	ldr	r3, [pc, #28]	; (804235c <HAL_RCC_MCOConfig+0xc8>)
 804233e:	691b      	ldr	r3, [r3, #16]
 8042340:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8042344:	687b      	ldr	r3, [r7, #4]
 8042346:	01d9      	lsls	r1, r3, #7
 8042348:	68bb      	ldr	r3, [r7, #8]
 804234a:	430b      	orrs	r3, r1
 804234c:	4903      	ldr	r1, [pc, #12]	; (804235c <HAL_RCC_MCOConfig+0xc8>)
 804234e:	4313      	orrs	r3, r2
 8042350:	610b      	str	r3, [r1, #16]
}
 8042352:	bf00      	nop
 8042354:	3730      	adds	r7, #48	; 0x30
 8042356:	46bd      	mov	sp, r7
 8042358:	bd80      	pop	{r7, pc}
 804235a:	bf00      	nop
 804235c:	58024400 	.word	0x58024400
 8042360:	58020000 	.word	0x58020000
 8042364:	58020800 	.word	0x58020800

08042368 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8042368:	b480      	push	{r7}
 804236a:	b089      	sub	sp, #36	; 0x24
 804236c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 804236e:	4bb3      	ldr	r3, [pc, #716]	; (804263c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042370:	691b      	ldr	r3, [r3, #16]
 8042372:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8042376:	2b18      	cmp	r3, #24
 8042378:	f200 8155 	bhi.w	8042626 <HAL_RCC_GetSysClockFreq+0x2be>
 804237c:	a201      	add	r2, pc, #4	; (adr r2, 8042384 <HAL_RCC_GetSysClockFreq+0x1c>)
 804237e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042382:	bf00      	nop
 8042384:	080423e9 	.word	0x080423e9
 8042388:	08042627 	.word	0x08042627
 804238c:	08042627 	.word	0x08042627
 8042390:	08042627 	.word	0x08042627
 8042394:	08042627 	.word	0x08042627
 8042398:	08042627 	.word	0x08042627
 804239c:	08042627 	.word	0x08042627
 80423a0:	08042627 	.word	0x08042627
 80423a4:	0804240f 	.word	0x0804240f
 80423a8:	08042627 	.word	0x08042627
 80423ac:	08042627 	.word	0x08042627
 80423b0:	08042627 	.word	0x08042627
 80423b4:	08042627 	.word	0x08042627
 80423b8:	08042627 	.word	0x08042627
 80423bc:	08042627 	.word	0x08042627
 80423c0:	08042627 	.word	0x08042627
 80423c4:	08042415 	.word	0x08042415
 80423c8:	08042627 	.word	0x08042627
 80423cc:	08042627 	.word	0x08042627
 80423d0:	08042627 	.word	0x08042627
 80423d4:	08042627 	.word	0x08042627
 80423d8:	08042627 	.word	0x08042627
 80423dc:	08042627 	.word	0x08042627
 80423e0:	08042627 	.word	0x08042627
 80423e4:	0804241b 	.word	0x0804241b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80423e8:	4b94      	ldr	r3, [pc, #592]	; (804263c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80423ea:	681b      	ldr	r3, [r3, #0]
 80423ec:	f003 0320 	and.w	r3, r3, #32
 80423f0:	2b00      	cmp	r3, #0
 80423f2:	d009      	beq.n	8042408 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80423f4:	4b91      	ldr	r3, [pc, #580]	; (804263c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80423f6:	681b      	ldr	r3, [r3, #0]
 80423f8:	08db      	lsrs	r3, r3, #3
 80423fa:	f003 0303 	and.w	r3, r3, #3
 80423fe:	4a90      	ldr	r2, [pc, #576]	; (8042640 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8042400:	fa22 f303 	lsr.w	r3, r2, r3
 8042404:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8042406:	e111      	b.n	804262c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8042408:	4b8d      	ldr	r3, [pc, #564]	; (8042640 <HAL_RCC_GetSysClockFreq+0x2d8>)
 804240a:	61bb      	str	r3, [r7, #24]
      break;
 804240c:	e10e      	b.n	804262c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 804240e:	4b8d      	ldr	r3, [pc, #564]	; (8042644 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8042410:	61bb      	str	r3, [r7, #24]
      break;
 8042412:	e10b      	b.n	804262c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8042414:	4b8c      	ldr	r3, [pc, #560]	; (8042648 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8042416:	61bb      	str	r3, [r7, #24]
      break;
 8042418:	e108      	b.n	804262c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 804241a:	4b88      	ldr	r3, [pc, #544]	; (804263c <HAL_RCC_GetSysClockFreq+0x2d4>)
 804241c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804241e:	f003 0303 	and.w	r3, r3, #3
 8042422:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8042424:	4b85      	ldr	r3, [pc, #532]	; (804263c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042428:	091b      	lsrs	r3, r3, #4
 804242a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 804242e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8042430:	4b82      	ldr	r3, [pc, #520]	; (804263c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042434:	f003 0301 	and.w	r3, r3, #1
 8042438:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 804243a:	4b80      	ldr	r3, [pc, #512]	; (804263c <HAL_RCC_GetSysClockFreq+0x2d4>)
 804243c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804243e:	08db      	lsrs	r3, r3, #3
 8042440:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8042444:	68fa      	ldr	r2, [r7, #12]
 8042446:	fb02 f303 	mul.w	r3, r2, r3
 804244a:	ee07 3a90 	vmov	s15, r3
 804244e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8042452:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8042456:	693b      	ldr	r3, [r7, #16]
 8042458:	2b00      	cmp	r3, #0
 804245a:	f000 80e1 	beq.w	8042620 <HAL_RCC_GetSysClockFreq+0x2b8>
 804245e:	697b      	ldr	r3, [r7, #20]
 8042460:	2b02      	cmp	r3, #2
 8042462:	f000 8083 	beq.w	804256c <HAL_RCC_GetSysClockFreq+0x204>
 8042466:	697b      	ldr	r3, [r7, #20]
 8042468:	2b02      	cmp	r3, #2
 804246a:	f200 80a1 	bhi.w	80425b0 <HAL_RCC_GetSysClockFreq+0x248>
 804246e:	697b      	ldr	r3, [r7, #20]
 8042470:	2b00      	cmp	r3, #0
 8042472:	d003      	beq.n	804247c <HAL_RCC_GetSysClockFreq+0x114>
 8042474:	697b      	ldr	r3, [r7, #20]
 8042476:	2b01      	cmp	r3, #1
 8042478:	d056      	beq.n	8042528 <HAL_RCC_GetSysClockFreq+0x1c0>
 804247a:	e099      	b.n	80425b0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 804247c:	4b6f      	ldr	r3, [pc, #444]	; (804263c <HAL_RCC_GetSysClockFreq+0x2d4>)
 804247e:	681b      	ldr	r3, [r3, #0]
 8042480:	f003 0320 	and.w	r3, r3, #32
 8042484:	2b00      	cmp	r3, #0
 8042486:	d02d      	beq.n	80424e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8042488:	4b6c      	ldr	r3, [pc, #432]	; (804263c <HAL_RCC_GetSysClockFreq+0x2d4>)
 804248a:	681b      	ldr	r3, [r3, #0]
 804248c:	08db      	lsrs	r3, r3, #3
 804248e:	f003 0303 	and.w	r3, r3, #3
 8042492:	4a6b      	ldr	r2, [pc, #428]	; (8042640 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8042494:	fa22 f303 	lsr.w	r3, r2, r3
 8042498:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 804249a:	687b      	ldr	r3, [r7, #4]
 804249c:	ee07 3a90 	vmov	s15, r3
 80424a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80424a4:	693b      	ldr	r3, [r7, #16]
 80424a6:	ee07 3a90 	vmov	s15, r3
 80424aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80424ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80424b2:	4b62      	ldr	r3, [pc, #392]	; (804263c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80424b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80424b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80424ba:	ee07 3a90 	vmov	s15, r3
 80424be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80424c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80424c6:	eddf 5a61 	vldr	s11, [pc, #388]	; 804264c <HAL_RCC_GetSysClockFreq+0x2e4>
 80424ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80424ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80424d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80424d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80424da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80424de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80424e2:	e087      	b.n	80425f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80424e4:	693b      	ldr	r3, [r7, #16]
 80424e6:	ee07 3a90 	vmov	s15, r3
 80424ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80424ee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8042650 <HAL_RCC_GetSysClockFreq+0x2e8>
 80424f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80424f6:	4b51      	ldr	r3, [pc, #324]	; (804263c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80424f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80424fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80424fe:	ee07 3a90 	vmov	s15, r3
 8042502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8042506:	ed97 6a02 	vldr	s12, [r7, #8]
 804250a:	eddf 5a50 	vldr	s11, [pc, #320]	; 804264c <HAL_RCC_GetSysClockFreq+0x2e4>
 804250e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8042512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8042516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 804251a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 804251e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8042522:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8042526:	e065      	b.n	80425f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8042528:	693b      	ldr	r3, [r7, #16]
 804252a:	ee07 3a90 	vmov	s15, r3
 804252e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8042532:	eddf 6a48 	vldr	s13, [pc, #288]	; 8042654 <HAL_RCC_GetSysClockFreq+0x2ec>
 8042536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 804253a:	4b40      	ldr	r3, [pc, #256]	; (804263c <HAL_RCC_GetSysClockFreq+0x2d4>)
 804253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 804253e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8042542:	ee07 3a90 	vmov	s15, r3
 8042546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804254a:	ed97 6a02 	vldr	s12, [r7, #8]
 804254e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 804264c <HAL_RCC_GetSysClockFreq+0x2e4>
 8042552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8042556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804255a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 804255e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8042562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8042566:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 804256a:	e043      	b.n	80425f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 804256c:	693b      	ldr	r3, [r7, #16]
 804256e:	ee07 3a90 	vmov	s15, r3
 8042572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8042576:	eddf 6a38 	vldr	s13, [pc, #224]	; 8042658 <HAL_RCC_GetSysClockFreq+0x2f0>
 804257a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 804257e:	4b2f      	ldr	r3, [pc, #188]	; (804263c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8042580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8042586:	ee07 3a90 	vmov	s15, r3
 804258a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804258e:	ed97 6a02 	vldr	s12, [r7, #8]
 8042592:	eddf 5a2e 	vldr	s11, [pc, #184]	; 804264c <HAL_RCC_GetSysClockFreq+0x2e4>
 8042596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 804259a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804259e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80425a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80425a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80425aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80425ae:	e021      	b.n	80425f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80425b0:	693b      	ldr	r3, [r7, #16]
 80425b2:	ee07 3a90 	vmov	s15, r3
 80425b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80425ba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8042654 <HAL_RCC_GetSysClockFreq+0x2ec>
 80425be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80425c2:	4b1e      	ldr	r3, [pc, #120]	; (804263c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80425c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80425c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80425ca:	ee07 3a90 	vmov	s15, r3
 80425ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80425d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80425d6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 804264c <HAL_RCC_GetSysClockFreq+0x2e4>
 80425da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80425de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80425e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80425e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80425ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80425ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80425f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80425f4:	4b11      	ldr	r3, [pc, #68]	; (804263c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80425f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80425f8:	0a5b      	lsrs	r3, r3, #9
 80425fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80425fe:	3301      	adds	r3, #1
 8042600:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8042602:	683b      	ldr	r3, [r7, #0]
 8042604:	ee07 3a90 	vmov	s15, r3
 8042608:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 804260c:	edd7 6a07 	vldr	s13, [r7, #28]
 8042610:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8042614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8042618:	ee17 3a90 	vmov	r3, s15
 804261c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 804261e:	e005      	b.n	804262c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8042620:	2300      	movs	r3, #0
 8042622:	61bb      	str	r3, [r7, #24]
      break;
 8042624:	e002      	b.n	804262c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8042626:	4b07      	ldr	r3, [pc, #28]	; (8042644 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8042628:	61bb      	str	r3, [r7, #24]
      break;
 804262a:	bf00      	nop
  }

  return sysclockfreq;
 804262c:	69bb      	ldr	r3, [r7, #24]
}
 804262e:	4618      	mov	r0, r3
 8042630:	3724      	adds	r7, #36	; 0x24
 8042632:	46bd      	mov	sp, r7
 8042634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042638:	4770      	bx	lr
 804263a:	bf00      	nop
 804263c:	58024400 	.word	0x58024400
 8042640:	03d09000 	.word	0x03d09000
 8042644:	003d0900 	.word	0x003d0900
 8042648:	017d7840 	.word	0x017d7840
 804264c:	46000000 	.word	0x46000000
 8042650:	4c742400 	.word	0x4c742400
 8042654:	4a742400 	.word	0x4a742400
 8042658:	4bbebc20 	.word	0x4bbebc20

0804265c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 804265c:	b580      	push	{r7, lr}
 804265e:	b082      	sub	sp, #8
 8042660:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8042662:	f7ff fe81 	bl	8042368 <HAL_RCC_GetSysClockFreq>
 8042666:	4602      	mov	r2, r0
 8042668:	4b10      	ldr	r3, [pc, #64]	; (80426ac <HAL_RCC_GetHCLKFreq+0x50>)
 804266a:	699b      	ldr	r3, [r3, #24]
 804266c:	0a1b      	lsrs	r3, r3, #8
 804266e:	f003 030f 	and.w	r3, r3, #15
 8042672:	490f      	ldr	r1, [pc, #60]	; (80426b0 <HAL_RCC_GetHCLKFreq+0x54>)
 8042674:	5ccb      	ldrb	r3, [r1, r3]
 8042676:	f003 031f 	and.w	r3, r3, #31
 804267a:	fa22 f303 	lsr.w	r3, r2, r3
 804267e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8042680:	4b0a      	ldr	r3, [pc, #40]	; (80426ac <HAL_RCC_GetHCLKFreq+0x50>)
 8042682:	699b      	ldr	r3, [r3, #24]
 8042684:	f003 030f 	and.w	r3, r3, #15
 8042688:	4a09      	ldr	r2, [pc, #36]	; (80426b0 <HAL_RCC_GetHCLKFreq+0x54>)
 804268a:	5cd3      	ldrb	r3, [r2, r3]
 804268c:	f003 031f 	and.w	r3, r3, #31
 8042690:	687a      	ldr	r2, [r7, #4]
 8042692:	fa22 f303 	lsr.w	r3, r2, r3
 8042696:	4a07      	ldr	r2, [pc, #28]	; (80426b4 <HAL_RCC_GetHCLKFreq+0x58>)
 8042698:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 804269a:	4a07      	ldr	r2, [pc, #28]	; (80426b8 <HAL_RCC_GetHCLKFreq+0x5c>)
 804269c:	687b      	ldr	r3, [r7, #4]
 804269e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80426a0:	4b04      	ldr	r3, [pc, #16]	; (80426b4 <HAL_RCC_GetHCLKFreq+0x58>)
 80426a2:	681b      	ldr	r3, [r3, #0]
}
 80426a4:	4618      	mov	r0, r3
 80426a6:	3708      	adds	r7, #8
 80426a8:	46bd      	mov	sp, r7
 80426aa:	bd80      	pop	{r7, pc}
 80426ac:	58024400 	.word	0x58024400
 80426b0:	08046774 	.word	0x08046774
 80426b4:	24000004 	.word	0x24000004
 80426b8:	24000000 	.word	0x24000000

080426bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80426bc:	b580      	push	{r7, lr}
 80426be:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80426c0:	f7ff ffcc 	bl	804265c <HAL_RCC_GetHCLKFreq>
 80426c4:	4602      	mov	r2, r0
 80426c6:	4b06      	ldr	r3, [pc, #24]	; (80426e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80426c8:	69db      	ldr	r3, [r3, #28]
 80426ca:	091b      	lsrs	r3, r3, #4
 80426cc:	f003 0307 	and.w	r3, r3, #7
 80426d0:	4904      	ldr	r1, [pc, #16]	; (80426e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80426d2:	5ccb      	ldrb	r3, [r1, r3]
 80426d4:	f003 031f 	and.w	r3, r3, #31
 80426d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80426dc:	4618      	mov	r0, r3
 80426de:	bd80      	pop	{r7, pc}
 80426e0:	58024400 	.word	0x58024400
 80426e4:	08046774 	.word	0x08046774

080426e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80426e8:	b580      	push	{r7, lr}
 80426ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80426ec:	f7ff ffb6 	bl	804265c <HAL_RCC_GetHCLKFreq>
 80426f0:	4602      	mov	r2, r0
 80426f2:	4b06      	ldr	r3, [pc, #24]	; (804270c <HAL_RCC_GetPCLK2Freq+0x24>)
 80426f4:	69db      	ldr	r3, [r3, #28]
 80426f6:	0a1b      	lsrs	r3, r3, #8
 80426f8:	f003 0307 	and.w	r3, r3, #7
 80426fc:	4904      	ldr	r1, [pc, #16]	; (8042710 <HAL_RCC_GetPCLK2Freq+0x28>)
 80426fe:	5ccb      	ldrb	r3, [r1, r3]
 8042700:	f003 031f 	and.w	r3, r3, #31
 8042704:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8042708:	4618      	mov	r0, r3
 804270a:	bd80      	pop	{r7, pc}
 804270c:	58024400 	.word	0x58024400
 8042710:	08046774 	.word	0x08046774

08042714 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8042714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8042718:	b0cc      	sub	sp, #304	; 0x130
 804271a:	af00      	add	r7, sp, #0
 804271c:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8042720:	2300      	movs	r3, #0
 8042722:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8042726:	2300      	movs	r3, #0
 8042728:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 804272c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042734:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8042738:	2500      	movs	r5, #0
 804273a:	ea54 0305 	orrs.w	r3, r4, r5
 804273e:	d049      	beq.n	80427d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8042740:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8042746:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 804274a:	d02f      	beq.n	80427ac <HAL_RCCEx_PeriphCLKConfig+0x98>
 804274c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8042750:	d828      	bhi.n	80427a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8042752:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8042756:	d01a      	beq.n	804278e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8042758:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 804275c:	d822      	bhi.n	80427a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 804275e:	2b00      	cmp	r3, #0
 8042760:	d003      	beq.n	804276a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8042762:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8042766:	d007      	beq.n	8042778 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8042768:	e01c      	b.n	80427a4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804276a:	4bb8      	ldr	r3, [pc, #736]	; (8042a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 804276c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804276e:	4ab7      	ldr	r2, [pc, #732]	; (8042a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8042770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8042774:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8042776:	e01a      	b.n	80427ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8042778:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804277c:	3308      	adds	r3, #8
 804277e:	2102      	movs	r1, #2
 8042780:	4618      	mov	r0, r3
 8042782:	f001 fccf 	bl	8044124 <RCCEx_PLL2_Config>
 8042786:	4603      	mov	r3, r0
 8042788:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 804278c:	e00f      	b.n	80427ae <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 804278e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042792:	3328      	adds	r3, #40	; 0x28
 8042794:	2102      	movs	r1, #2
 8042796:	4618      	mov	r0, r3
 8042798:	f001 fd76 	bl	8044288 <RCCEx_PLL3_Config>
 804279c:	4603      	mov	r3, r0
 804279e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80427a2:	e004      	b.n	80427ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80427a4:	2301      	movs	r3, #1
 80427a6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80427aa:	e000      	b.n	80427ae <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80427ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80427ae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80427b2:	2b00      	cmp	r3, #0
 80427b4:	d10a      	bne.n	80427cc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80427b6:	4ba5      	ldr	r3, [pc, #660]	; (8042a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80427b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80427ba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80427be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80427c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80427c4:	4aa1      	ldr	r2, [pc, #644]	; (8042a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80427c6:	430b      	orrs	r3, r1
 80427c8:	6513      	str	r3, [r2, #80]	; 0x50
 80427ca:	e003      	b.n	80427d4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80427cc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80427d0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80427d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80427d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80427dc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80427e0:	f04f 0900 	mov.w	r9, #0
 80427e4:	ea58 0309 	orrs.w	r3, r8, r9
 80427e8:	d047      	beq.n	804287a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80427ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80427ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80427f0:	2b04      	cmp	r3, #4
 80427f2:	d82a      	bhi.n	804284a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80427f4:	a201      	add	r2, pc, #4	; (adr r2, 80427fc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80427f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80427fa:	bf00      	nop
 80427fc:	08042811 	.word	0x08042811
 8042800:	0804281f 	.word	0x0804281f
 8042804:	08042835 	.word	0x08042835
 8042808:	08042853 	.word	0x08042853
 804280c:	08042853 	.word	0x08042853
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8042810:	4b8e      	ldr	r3, [pc, #568]	; (8042a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8042812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042814:	4a8d      	ldr	r2, [pc, #564]	; (8042a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8042816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804281a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 804281c:	e01a      	b.n	8042854 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 804281e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042822:	3308      	adds	r3, #8
 8042824:	2100      	movs	r1, #0
 8042826:	4618      	mov	r0, r3
 8042828:	f001 fc7c 	bl	8044124 <RCCEx_PLL2_Config>
 804282c:	4603      	mov	r3, r0
 804282e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8042832:	e00f      	b.n	8042854 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8042834:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042838:	3328      	adds	r3, #40	; 0x28
 804283a:	2100      	movs	r1, #0
 804283c:	4618      	mov	r0, r3
 804283e:	f001 fd23 	bl	8044288 <RCCEx_PLL3_Config>
 8042842:	4603      	mov	r3, r0
 8042844:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8042848:	e004      	b.n	8042854 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 804284a:	2301      	movs	r3, #1
 804284c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8042850:	e000      	b.n	8042854 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8042852:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042854:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042858:	2b00      	cmp	r3, #0
 804285a:	d10a      	bne.n	8042872 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 804285c:	4b7b      	ldr	r3, [pc, #492]	; (8042a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 804285e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042860:	f023 0107 	bic.w	r1, r3, #7
 8042864:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804286a:	4a78      	ldr	r2, [pc, #480]	; (8042a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 804286c:	430b      	orrs	r3, r1
 804286e:	6513      	str	r3, [r2, #80]	; 0x50
 8042870:	e003      	b.n	804287a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042872:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042876:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 804287a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804287e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042882:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8042886:	f04f 0b00 	mov.w	fp, #0
 804288a:	ea5a 030b 	orrs.w	r3, sl, fp
 804288e:	d04c      	beq.n	804292a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8042890:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8042896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804289a:	d030      	beq.n	80428fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 804289c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80428a0:	d829      	bhi.n	80428f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80428a2:	2bc0      	cmp	r3, #192	; 0xc0
 80428a4:	d02d      	beq.n	8042902 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80428a6:	2bc0      	cmp	r3, #192	; 0xc0
 80428a8:	d825      	bhi.n	80428f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80428aa:	2b80      	cmp	r3, #128	; 0x80
 80428ac:	d018      	beq.n	80428e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80428ae:	2b80      	cmp	r3, #128	; 0x80
 80428b0:	d821      	bhi.n	80428f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80428b2:	2b00      	cmp	r3, #0
 80428b4:	d002      	beq.n	80428bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80428b6:	2b40      	cmp	r3, #64	; 0x40
 80428b8:	d007      	beq.n	80428ca <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80428ba:	e01c      	b.n	80428f6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80428bc:	4b63      	ldr	r3, [pc, #396]	; (8042a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80428be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80428c0:	4a62      	ldr	r2, [pc, #392]	; (8042a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80428c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80428c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80428c8:	e01c      	b.n	8042904 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80428ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80428ce:	3308      	adds	r3, #8
 80428d0:	2100      	movs	r1, #0
 80428d2:	4618      	mov	r0, r3
 80428d4:	f001 fc26 	bl	8044124 <RCCEx_PLL2_Config>
 80428d8:	4603      	mov	r3, r0
 80428da:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80428de:	e011      	b.n	8042904 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80428e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80428e4:	3328      	adds	r3, #40	; 0x28
 80428e6:	2100      	movs	r1, #0
 80428e8:	4618      	mov	r0, r3
 80428ea:	f001 fccd 	bl	8044288 <RCCEx_PLL3_Config>
 80428ee:	4603      	mov	r3, r0
 80428f0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80428f4:	e006      	b.n	8042904 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80428f6:	2301      	movs	r3, #1
 80428f8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80428fc:	e002      	b.n	8042904 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80428fe:	bf00      	nop
 8042900:	e000      	b.n	8042904 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8042902:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042904:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042908:	2b00      	cmp	r3, #0
 804290a:	d10a      	bne.n	8042922 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 804290c:	4b4f      	ldr	r3, [pc, #316]	; (8042a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 804290e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042910:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8042914:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804291a:	4a4c      	ldr	r2, [pc, #304]	; (8042a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 804291c:	430b      	orrs	r3, r1
 804291e:	6513      	str	r3, [r2, #80]	; 0x50
 8042920:	e003      	b.n	804292a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042922:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042926:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 804292a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804292e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042932:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8042936:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 804293a:	2300      	movs	r3, #0
 804293c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8042940:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8042944:	460b      	mov	r3, r1
 8042946:	4313      	orrs	r3, r2
 8042948:	d053      	beq.n	80429f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 804294a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804294e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8042952:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8042956:	d035      	beq.n	80429c4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8042958:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 804295c:	d82e      	bhi.n	80429bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 804295e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8042962:	d031      	beq.n	80429c8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8042964:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8042968:	d828      	bhi.n	80429bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 804296a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 804296e:	d01a      	beq.n	80429a6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8042970:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8042974:	d822      	bhi.n	80429bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8042976:	2b00      	cmp	r3, #0
 8042978:	d003      	beq.n	8042982 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 804297a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 804297e:	d007      	beq.n	8042990 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8042980:	e01c      	b.n	80429bc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8042982:	4b32      	ldr	r3, [pc, #200]	; (8042a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8042984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042986:	4a31      	ldr	r2, [pc, #196]	; (8042a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8042988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804298c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 804298e:	e01c      	b.n	80429ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8042990:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042994:	3308      	adds	r3, #8
 8042996:	2100      	movs	r1, #0
 8042998:	4618      	mov	r0, r3
 804299a:	f001 fbc3 	bl	8044124 <RCCEx_PLL2_Config>
 804299e:	4603      	mov	r3, r0
 80429a0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80429a4:	e011      	b.n	80429ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80429a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80429aa:	3328      	adds	r3, #40	; 0x28
 80429ac:	2100      	movs	r1, #0
 80429ae:	4618      	mov	r0, r3
 80429b0:	f001 fc6a 	bl	8044288 <RCCEx_PLL3_Config>
 80429b4:	4603      	mov	r3, r0
 80429b6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80429ba:	e006      	b.n	80429ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80429bc:	2301      	movs	r3, #1
 80429be:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80429c2:	e002      	b.n	80429ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80429c4:	bf00      	nop
 80429c6:	e000      	b.n	80429ca <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80429c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80429ca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80429ce:	2b00      	cmp	r3, #0
 80429d0:	d10b      	bne.n	80429ea <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80429d2:	4b1e      	ldr	r3, [pc, #120]	; (8042a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80429d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80429d6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80429da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80429de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80429e2:	4a1a      	ldr	r2, [pc, #104]	; (8042a4c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80429e4:	430b      	orrs	r3, r1
 80429e6:	6593      	str	r3, [r2, #88]	; 0x58
 80429e8:	e003      	b.n	80429f2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80429ea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80429ee:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80429f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80429f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80429fa:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80429fe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8042a02:	2300      	movs	r3, #0
 8042a04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8042a08:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8042a0c:	460b      	mov	r3, r1
 8042a0e:	4313      	orrs	r3, r2
 8042a10:	d056      	beq.n	8042ac0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8042a12:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042a16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8042a1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8042a1e:	d038      	beq.n	8042a92 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8042a20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8042a24:	d831      	bhi.n	8042a8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8042a26:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8042a2a:	d034      	beq.n	8042a96 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8042a2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8042a30:	d82b      	bhi.n	8042a8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8042a32:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8042a36:	d01d      	beq.n	8042a74 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8042a38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8042a3c:	d825      	bhi.n	8042a8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8042a3e:	2b00      	cmp	r3, #0
 8042a40:	d006      	beq.n	8042a50 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8042a42:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8042a46:	d00a      	beq.n	8042a5e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8042a48:	e01f      	b.n	8042a8a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8042a4a:	bf00      	nop
 8042a4c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8042a50:	4ba2      	ldr	r3, [pc, #648]	; (8042cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042a54:	4aa1      	ldr	r2, [pc, #644]	; (8042cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8042a5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8042a5c:	e01c      	b.n	8042a98 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8042a5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042a62:	3308      	adds	r3, #8
 8042a64:	2100      	movs	r1, #0
 8042a66:	4618      	mov	r0, r3
 8042a68:	f001 fb5c 	bl	8044124 <RCCEx_PLL2_Config>
 8042a6c:	4603      	mov	r3, r0
 8042a6e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8042a72:	e011      	b.n	8042a98 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8042a74:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042a78:	3328      	adds	r3, #40	; 0x28
 8042a7a:	2100      	movs	r1, #0
 8042a7c:	4618      	mov	r0, r3
 8042a7e:	f001 fc03 	bl	8044288 <RCCEx_PLL3_Config>
 8042a82:	4603      	mov	r3, r0
 8042a84:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8042a88:	e006      	b.n	8042a98 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8042a8a:	2301      	movs	r3, #1
 8042a8c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8042a90:	e002      	b.n	8042a98 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8042a92:	bf00      	nop
 8042a94:	e000      	b.n	8042a98 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8042a96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042a98:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042a9c:	2b00      	cmp	r3, #0
 8042a9e:	d10b      	bne.n	8042ab8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8042aa0:	4b8e      	ldr	r3, [pc, #568]	; (8042cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042aa4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8042aa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042aac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8042ab0:	4a8a      	ldr	r2, [pc, #552]	; (8042cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042ab2:	430b      	orrs	r3, r1
 8042ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8042ab6:	e003      	b.n	8042ac0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042ab8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042abc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8042ac0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042ac8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8042acc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8042ad0:	2300      	movs	r3, #0
 8042ad2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8042ad6:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8042ada:	460b      	mov	r3, r1
 8042adc:	4313      	orrs	r3, r2
 8042ade:	d03a      	beq.n	8042b56 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8042ae0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042ae6:	2b30      	cmp	r3, #48	; 0x30
 8042ae8:	d01f      	beq.n	8042b2a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8042aea:	2b30      	cmp	r3, #48	; 0x30
 8042aec:	d819      	bhi.n	8042b22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8042aee:	2b20      	cmp	r3, #32
 8042af0:	d00c      	beq.n	8042b0c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8042af2:	2b20      	cmp	r3, #32
 8042af4:	d815      	bhi.n	8042b22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8042af6:	2b00      	cmp	r3, #0
 8042af8:	d019      	beq.n	8042b2e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8042afa:	2b10      	cmp	r3, #16
 8042afc:	d111      	bne.n	8042b22 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8042afe:	4b77      	ldr	r3, [pc, #476]	; (8042cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042b02:	4a76      	ldr	r2, [pc, #472]	; (8042cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8042b08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8042b0a:	e011      	b.n	8042b30 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8042b0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042b10:	3308      	adds	r3, #8
 8042b12:	2102      	movs	r1, #2
 8042b14:	4618      	mov	r0, r3
 8042b16:	f001 fb05 	bl	8044124 <RCCEx_PLL2_Config>
 8042b1a:	4603      	mov	r3, r0
 8042b1c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8042b20:	e006      	b.n	8042b30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8042b22:	2301      	movs	r3, #1
 8042b24:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8042b28:	e002      	b.n	8042b30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8042b2a:	bf00      	nop
 8042b2c:	e000      	b.n	8042b30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8042b2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042b30:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042b34:	2b00      	cmp	r3, #0
 8042b36:	d10a      	bne.n	8042b4e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8042b38:	4b68      	ldr	r3, [pc, #416]	; (8042cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042b3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042b3c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8042b40:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042b46:	4a65      	ldr	r2, [pc, #404]	; (8042cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042b48:	430b      	orrs	r3, r1
 8042b4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8042b4c:	e003      	b.n	8042b56 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042b4e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042b52:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8042b56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042b5e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8042b62:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8042b66:	2300      	movs	r3, #0
 8042b68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8042b6c:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8042b70:	460b      	mov	r3, r1
 8042b72:	4313      	orrs	r3, r2
 8042b74:	d051      	beq.n	8042c1a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8042b76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042b7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8042b7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8042b80:	d035      	beq.n	8042bee <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8042b82:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8042b86:	d82e      	bhi.n	8042be6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8042b88:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8042b8c:	d031      	beq.n	8042bf2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8042b8e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8042b92:	d828      	bhi.n	8042be6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8042b94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8042b98:	d01a      	beq.n	8042bd0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8042b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8042b9e:	d822      	bhi.n	8042be6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8042ba0:	2b00      	cmp	r3, #0
 8042ba2:	d003      	beq.n	8042bac <HAL_RCCEx_PeriphCLKConfig+0x498>
 8042ba4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8042ba8:	d007      	beq.n	8042bba <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8042baa:	e01c      	b.n	8042be6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8042bac:	4b4b      	ldr	r3, [pc, #300]	; (8042cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042bb0:	4a4a      	ldr	r2, [pc, #296]	; (8042cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8042bb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8042bb8:	e01c      	b.n	8042bf4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8042bba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042bbe:	3308      	adds	r3, #8
 8042bc0:	2100      	movs	r1, #0
 8042bc2:	4618      	mov	r0, r3
 8042bc4:	f001 faae 	bl	8044124 <RCCEx_PLL2_Config>
 8042bc8:	4603      	mov	r3, r0
 8042bca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8042bce:	e011      	b.n	8042bf4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8042bd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042bd4:	3328      	adds	r3, #40	; 0x28
 8042bd6:	2100      	movs	r1, #0
 8042bd8:	4618      	mov	r0, r3
 8042bda:	f001 fb55 	bl	8044288 <RCCEx_PLL3_Config>
 8042bde:	4603      	mov	r3, r0
 8042be0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8042be4:	e006      	b.n	8042bf4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8042be6:	2301      	movs	r3, #1
 8042be8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8042bec:	e002      	b.n	8042bf4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8042bee:	bf00      	nop
 8042bf0:	e000      	b.n	8042bf4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8042bf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042bf4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042bf8:	2b00      	cmp	r3, #0
 8042bfa:	d10a      	bne.n	8042c12 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8042bfc:	4b37      	ldr	r3, [pc, #220]	; (8042cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042c00:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8042c04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042c08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8042c0a:	4a34      	ldr	r2, [pc, #208]	; (8042cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042c0c:	430b      	orrs	r3, r1
 8042c0e:	6513      	str	r3, [r2, #80]	; 0x50
 8042c10:	e003      	b.n	8042c1a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042c12:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042c16:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8042c1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042c22:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8042c26:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8042c2a:	2300      	movs	r3, #0
 8042c2c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8042c30:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8042c34:	460b      	mov	r3, r1
 8042c36:	4313      	orrs	r3, r2
 8042c38:	d056      	beq.n	8042ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8042c3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042c3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8042c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8042c44:	d033      	beq.n	8042cae <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8042c46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8042c4a:	d82c      	bhi.n	8042ca6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8042c4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8042c50:	d02f      	beq.n	8042cb2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8042c52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8042c56:	d826      	bhi.n	8042ca6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8042c58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8042c5c:	d02b      	beq.n	8042cb6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8042c5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8042c62:	d820      	bhi.n	8042ca6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8042c64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8042c68:	d012      	beq.n	8042c90 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8042c6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8042c6e:	d81a      	bhi.n	8042ca6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8042c70:	2b00      	cmp	r3, #0
 8042c72:	d022      	beq.n	8042cba <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8042c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8042c78:	d115      	bne.n	8042ca6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8042c7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042c7e:	3308      	adds	r3, #8
 8042c80:	2101      	movs	r1, #1
 8042c82:	4618      	mov	r0, r3
 8042c84:	f001 fa4e 	bl	8044124 <RCCEx_PLL2_Config>
 8042c88:	4603      	mov	r3, r0
 8042c8a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8042c8e:	e015      	b.n	8042cbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8042c90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042c94:	3328      	adds	r3, #40	; 0x28
 8042c96:	2101      	movs	r1, #1
 8042c98:	4618      	mov	r0, r3
 8042c9a:	f001 faf5 	bl	8044288 <RCCEx_PLL3_Config>
 8042c9e:	4603      	mov	r3, r0
 8042ca0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8042ca4:	e00a      	b.n	8042cbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8042ca6:	2301      	movs	r3, #1
 8042ca8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8042cac:	e006      	b.n	8042cbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8042cae:	bf00      	nop
 8042cb0:	e004      	b.n	8042cbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8042cb2:	bf00      	nop
 8042cb4:	e002      	b.n	8042cbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8042cb6:	bf00      	nop
 8042cb8:	e000      	b.n	8042cbc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8042cba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042cbc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042cc0:	2b00      	cmp	r3, #0
 8042cc2:	d10d      	bne.n	8042ce0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8042cc4:	4b05      	ldr	r3, [pc, #20]	; (8042cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042cc8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8042ccc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042cd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8042cd2:	4a02      	ldr	r2, [pc, #8]	; (8042cdc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8042cd4:	430b      	orrs	r3, r1
 8042cd6:	6513      	str	r3, [r2, #80]	; 0x50
 8042cd8:	e006      	b.n	8042ce8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8042cda:	bf00      	nop
 8042cdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042ce0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042ce4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8042ce8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042cf0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8042cf4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8042cf8:	2300      	movs	r3, #0
 8042cfa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8042cfe:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8042d02:	460b      	mov	r3, r1
 8042d04:	4313      	orrs	r3, r2
 8042d06:	d055      	beq.n	8042db4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8042d08:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042d0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8042d10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8042d14:	d033      	beq.n	8042d7e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8042d16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8042d1a:	d82c      	bhi.n	8042d76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8042d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8042d20:	d02f      	beq.n	8042d82 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8042d22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8042d26:	d826      	bhi.n	8042d76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8042d28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8042d2c:	d02b      	beq.n	8042d86 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8042d2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8042d32:	d820      	bhi.n	8042d76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8042d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8042d38:	d012      	beq.n	8042d60 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8042d3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8042d3e:	d81a      	bhi.n	8042d76 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8042d40:	2b00      	cmp	r3, #0
 8042d42:	d022      	beq.n	8042d8a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8042d44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8042d48:	d115      	bne.n	8042d76 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8042d4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042d4e:	3308      	adds	r3, #8
 8042d50:	2101      	movs	r1, #1
 8042d52:	4618      	mov	r0, r3
 8042d54:	f001 f9e6 	bl	8044124 <RCCEx_PLL2_Config>
 8042d58:	4603      	mov	r3, r0
 8042d5a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8042d5e:	e015      	b.n	8042d8c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8042d60:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042d64:	3328      	adds	r3, #40	; 0x28
 8042d66:	2101      	movs	r1, #1
 8042d68:	4618      	mov	r0, r3
 8042d6a:	f001 fa8d 	bl	8044288 <RCCEx_PLL3_Config>
 8042d6e:	4603      	mov	r3, r0
 8042d70:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8042d74:	e00a      	b.n	8042d8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8042d76:	2301      	movs	r3, #1
 8042d78:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8042d7c:	e006      	b.n	8042d8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8042d7e:	bf00      	nop
 8042d80:	e004      	b.n	8042d8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8042d82:	bf00      	nop
 8042d84:	e002      	b.n	8042d8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8042d86:	bf00      	nop
 8042d88:	e000      	b.n	8042d8c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8042d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042d8c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042d90:	2b00      	cmp	r3, #0
 8042d92:	d10b      	bne.n	8042dac <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8042d94:	4bb6      	ldr	r3, [pc, #728]	; (8043070 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042d98:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8042d9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042da0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8042da4:	4ab2      	ldr	r2, [pc, #712]	; (8043070 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042da6:	430b      	orrs	r3, r1
 8042da8:	6593      	str	r3, [r2, #88]	; 0x58
 8042daa:	e003      	b.n	8042db4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042dac:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042db0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8042db4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042dbc:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8042dc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8042dc4:	2300      	movs	r3, #0
 8042dc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8042dca:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8042dce:	460b      	mov	r3, r1
 8042dd0:	4313      	orrs	r3, r2
 8042dd2:	d02a      	beq.n	8042e2a <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8042dd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042dda:	2b00      	cmp	r3, #0
 8042ddc:	d011      	beq.n	8042e02 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8042dde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8042de2:	d10a      	bne.n	8042dfa <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8042de4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042de8:	3308      	adds	r3, #8
 8042dea:	2101      	movs	r1, #1
 8042dec:	4618      	mov	r0, r3
 8042dee:	f001 f999 	bl	8044124 <RCCEx_PLL2_Config>
 8042df2:	4603      	mov	r3, r0
 8042df4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8042df8:	e004      	b.n	8042e04 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8042dfa:	2301      	movs	r3, #1
 8042dfc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8042e00:	e000      	b.n	8042e04 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8042e02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042e04:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042e08:	2b00      	cmp	r3, #0
 8042e0a:	d10a      	bne.n	8042e22 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8042e0c:	4b98      	ldr	r3, [pc, #608]	; (8043070 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042e10:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8042e14:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042e1a:	4a95      	ldr	r2, [pc, #596]	; (8043070 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042e1c:	430b      	orrs	r3, r1
 8042e1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8042e20:	e003      	b.n	8042e2a <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042e22:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042e26:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8042e2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042e32:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8042e36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8042e3a:	2300      	movs	r3, #0
 8042e3c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8042e40:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8042e44:	460b      	mov	r3, r1
 8042e46:	4313      	orrs	r3, r2
 8042e48:	d037      	beq.n	8042eba <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8042e4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8042e50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8042e54:	d00e      	beq.n	8042e74 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8042e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8042e5a:	d816      	bhi.n	8042e8a <HAL_RCCEx_PeriphCLKConfig+0x776>
 8042e5c:	2b00      	cmp	r3, #0
 8042e5e:	d018      	beq.n	8042e92 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8042e60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8042e64:	d111      	bne.n	8042e8a <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8042e66:	4b82      	ldr	r3, [pc, #520]	; (8043070 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042e6a:	4a81      	ldr	r2, [pc, #516]	; (8043070 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042e6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8042e70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8042e72:	e00f      	b.n	8042e94 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8042e74:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042e78:	3308      	adds	r3, #8
 8042e7a:	2101      	movs	r1, #1
 8042e7c:	4618      	mov	r0, r3
 8042e7e:	f001 f951 	bl	8044124 <RCCEx_PLL2_Config>
 8042e82:	4603      	mov	r3, r0
 8042e84:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8042e88:	e004      	b.n	8042e94 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8042e8a:	2301      	movs	r3, #1
 8042e8c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8042e90:	e000      	b.n	8042e94 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8042e92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042e94:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042e98:	2b00      	cmp	r3, #0
 8042e9a:	d10a      	bne.n	8042eb2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8042e9c:	4b74      	ldr	r3, [pc, #464]	; (8043070 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8042ea0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8042ea4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042ea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8042eaa:	4a71      	ldr	r2, [pc, #452]	; (8043070 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042eac:	430b      	orrs	r3, r1
 8042eae:	6513      	str	r3, [r2, #80]	; 0x50
 8042eb0:	e003      	b.n	8042eba <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042eb2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042eb6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8042eba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042ec2:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8042ec6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8042eca:	2300      	movs	r3, #0
 8042ecc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8042ed0:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8042ed4:	460b      	mov	r3, r1
 8042ed6:	4313      	orrs	r3, r2
 8042ed8:	d03a      	beq.n	8042f50 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8042eda:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8042ee0:	2b03      	cmp	r3, #3
 8042ee2:	d81d      	bhi.n	8042f20 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8042ee4:	a201      	add	r2, pc, #4	; (adr r2, 8042eec <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8042ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042eea:	bf00      	nop
 8042eec:	08042f29 	.word	0x08042f29
 8042ef0:	08042efd 	.word	0x08042efd
 8042ef4:	08042f0b 	.word	0x08042f0b
 8042ef8:	08042f29 	.word	0x08042f29
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8042efc:	4b5c      	ldr	r3, [pc, #368]	; (8043070 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042f00:	4a5b      	ldr	r2, [pc, #364]	; (8043070 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8042f06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8042f08:	e00f      	b.n	8042f2a <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8042f0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042f0e:	3308      	adds	r3, #8
 8042f10:	2102      	movs	r1, #2
 8042f12:	4618      	mov	r0, r3
 8042f14:	f001 f906 	bl	8044124 <RCCEx_PLL2_Config>
 8042f18:	4603      	mov	r3, r0
 8042f1a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8042f1e:	e004      	b.n	8042f2a <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8042f20:	2301      	movs	r3, #1
 8042f22:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8042f26:	e000      	b.n	8042f2a <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8042f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042f2a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042f2e:	2b00      	cmp	r3, #0
 8042f30:	d10a      	bne.n	8042f48 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8042f32:	4b4f      	ldr	r3, [pc, #316]	; (8043070 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042f36:	f023 0103 	bic.w	r1, r3, #3
 8042f3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8042f40:	4a4b      	ldr	r2, [pc, #300]	; (8043070 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042f42:	430b      	orrs	r3, r1
 8042f44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8042f46:	e003      	b.n	8042f50 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042f48:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042f4c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8042f50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8042f58:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8042f5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8042f60:	2300      	movs	r3, #0
 8042f62:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8042f66:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8042f6a:	460b      	mov	r3, r1
 8042f6c:	4313      	orrs	r3, r2
 8042f6e:	f000 80a0 	beq.w	80430b2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8042f72:	4b40      	ldr	r3, [pc, #256]	; (8043074 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8042f74:	681b      	ldr	r3, [r3, #0]
 8042f76:	4a3f      	ldr	r2, [pc, #252]	; (8043074 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8042f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8042f7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8042f7e:	f7fd ffed 	bl	8040f5c <HAL_GetTick>
 8042f82:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8042f86:	e00b      	b.n	8042fa0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8042f88:	f7fd ffe8 	bl	8040f5c <HAL_GetTick>
 8042f8c:	4602      	mov	r2, r0
 8042f8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8042f92:	1ad3      	subs	r3, r2, r3
 8042f94:	2b64      	cmp	r3, #100	; 0x64
 8042f96:	d903      	bls.n	8042fa0 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8042f98:	2303      	movs	r3, #3
 8042f9a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8042f9e:	e005      	b.n	8042fac <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8042fa0:	4b34      	ldr	r3, [pc, #208]	; (8043074 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8042fa2:	681b      	ldr	r3, [r3, #0]
 8042fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8042fa8:	2b00      	cmp	r3, #0
 8042faa:	d0ed      	beq.n	8042f88 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8042fac:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8042fb0:	2b00      	cmp	r3, #0
 8042fb2:	d17a      	bne.n	80430aa <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8042fb4:	4b2e      	ldr	r3, [pc, #184]	; (8043070 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042fb6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8042fb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042fbc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8042fc0:	4053      	eors	r3, r2
 8042fc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8042fc6:	2b00      	cmp	r3, #0
 8042fc8:	d015      	beq.n	8042ff6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8042fca:	4b29      	ldr	r3, [pc, #164]	; (8043070 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8042fd2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8042fd6:	4b26      	ldr	r3, [pc, #152]	; (8043070 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042fda:	4a25      	ldr	r2, [pc, #148]	; (8043070 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8042fe0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8042fe2:	4b23      	ldr	r3, [pc, #140]	; (8043070 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8042fe6:	4a22      	ldr	r2, [pc, #136]	; (8043070 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8042fec:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8042fee:	4a20      	ldr	r2, [pc, #128]	; (8043070 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8042ff0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8042ff4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8042ff6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8042ffa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8042ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8043002:	d118      	bne.n	8043036 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043004:	f7fd ffaa 	bl	8040f5c <HAL_GetTick>
 8043008:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 804300c:	e00d      	b.n	804302a <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 804300e:	f7fd ffa5 	bl	8040f5c <HAL_GetTick>
 8043012:	4602      	mov	r2, r0
 8043014:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8043018:	1ad2      	subs	r2, r2, r3
 804301a:	f241 3388 	movw	r3, #5000	; 0x1388
 804301e:	429a      	cmp	r2, r3
 8043020:	d903      	bls.n	804302a <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8043022:	2303      	movs	r3, #3
 8043024:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8043028:	e005      	b.n	8043036 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 804302a:	4b11      	ldr	r3, [pc, #68]	; (8043070 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 804302c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804302e:	f003 0302 	and.w	r3, r3, #2
 8043032:	2b00      	cmp	r3, #0
 8043034:	d0eb      	beq.n	804300e <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8043036:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 804303a:	2b00      	cmp	r3, #0
 804303c:	d130      	bne.n	80430a0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 804303e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043042:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8043046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 804304a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804304e:	d115      	bne.n	804307c <HAL_RCCEx_PeriphCLKConfig+0x968>
 8043050:	4b07      	ldr	r3, [pc, #28]	; (8043070 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8043052:	691b      	ldr	r3, [r3, #16]
 8043054:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8043058:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804305c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8043060:	091a      	lsrs	r2, r3, #4
 8043062:	4b05      	ldr	r3, [pc, #20]	; (8043078 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8043064:	4013      	ands	r3, r2
 8043066:	4a02      	ldr	r2, [pc, #8]	; (8043070 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8043068:	430b      	orrs	r3, r1
 804306a:	6113      	str	r3, [r2, #16]
 804306c:	e00c      	b.n	8043088 <HAL_RCCEx_PeriphCLKConfig+0x974>
 804306e:	bf00      	nop
 8043070:	58024400 	.word	0x58024400
 8043074:	58024800 	.word	0x58024800
 8043078:	00ffffcf 	.word	0x00ffffcf
 804307c:	4bd4      	ldr	r3, [pc, #848]	; (80433d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 804307e:	691b      	ldr	r3, [r3, #16]
 8043080:	4ad3      	ldr	r2, [pc, #844]	; (80433d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8043082:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8043086:	6113      	str	r3, [r2, #16]
 8043088:	4bd1      	ldr	r3, [pc, #836]	; (80433d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 804308a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 804308c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043090:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8043094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8043098:	4acd      	ldr	r2, [pc, #820]	; (80433d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 804309a:	430b      	orrs	r3, r1
 804309c:	6713      	str	r3, [r2, #112]	; 0x70
 804309e:	e008      	b.n	80430b2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80430a0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80430a4:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 80430a8:	e003      	b.n	80430b2 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80430aa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80430ae:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80430b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80430b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80430ba:	f002 0301 	and.w	r3, r2, #1
 80430be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80430c2:	2300      	movs	r3, #0
 80430c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80430c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80430cc:	460b      	mov	r3, r1
 80430ce:	4313      	orrs	r3, r2
 80430d0:	f000 808b 	beq.w	80431ea <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80430d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80430d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80430dc:	2b28      	cmp	r3, #40	; 0x28
 80430de:	d86b      	bhi.n	80431b8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 80430e0:	a201      	add	r2, pc, #4	; (adr r2, 80430e8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 80430e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80430e6:	bf00      	nop
 80430e8:	080431c1 	.word	0x080431c1
 80430ec:	080431b9 	.word	0x080431b9
 80430f0:	080431b9 	.word	0x080431b9
 80430f4:	080431b9 	.word	0x080431b9
 80430f8:	080431b9 	.word	0x080431b9
 80430fc:	080431b9 	.word	0x080431b9
 8043100:	080431b9 	.word	0x080431b9
 8043104:	080431b9 	.word	0x080431b9
 8043108:	0804318d 	.word	0x0804318d
 804310c:	080431b9 	.word	0x080431b9
 8043110:	080431b9 	.word	0x080431b9
 8043114:	080431b9 	.word	0x080431b9
 8043118:	080431b9 	.word	0x080431b9
 804311c:	080431b9 	.word	0x080431b9
 8043120:	080431b9 	.word	0x080431b9
 8043124:	080431b9 	.word	0x080431b9
 8043128:	080431a3 	.word	0x080431a3
 804312c:	080431b9 	.word	0x080431b9
 8043130:	080431b9 	.word	0x080431b9
 8043134:	080431b9 	.word	0x080431b9
 8043138:	080431b9 	.word	0x080431b9
 804313c:	080431b9 	.word	0x080431b9
 8043140:	080431b9 	.word	0x080431b9
 8043144:	080431b9 	.word	0x080431b9
 8043148:	080431c1 	.word	0x080431c1
 804314c:	080431b9 	.word	0x080431b9
 8043150:	080431b9 	.word	0x080431b9
 8043154:	080431b9 	.word	0x080431b9
 8043158:	080431b9 	.word	0x080431b9
 804315c:	080431b9 	.word	0x080431b9
 8043160:	080431b9 	.word	0x080431b9
 8043164:	080431b9 	.word	0x080431b9
 8043168:	080431c1 	.word	0x080431c1
 804316c:	080431b9 	.word	0x080431b9
 8043170:	080431b9 	.word	0x080431b9
 8043174:	080431b9 	.word	0x080431b9
 8043178:	080431b9 	.word	0x080431b9
 804317c:	080431b9 	.word	0x080431b9
 8043180:	080431b9 	.word	0x080431b9
 8043184:	080431b9 	.word	0x080431b9
 8043188:	080431c1 	.word	0x080431c1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 804318c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043190:	3308      	adds	r3, #8
 8043192:	2101      	movs	r1, #1
 8043194:	4618      	mov	r0, r3
 8043196:	f000 ffc5 	bl	8044124 <RCCEx_PLL2_Config>
 804319a:	4603      	mov	r3, r0
 804319c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80431a0:	e00f      	b.n	80431c2 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80431a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80431a6:	3328      	adds	r3, #40	; 0x28
 80431a8:	2101      	movs	r1, #1
 80431aa:	4618      	mov	r0, r3
 80431ac:	f001 f86c 	bl	8044288 <RCCEx_PLL3_Config>
 80431b0:	4603      	mov	r3, r0
 80431b2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80431b6:	e004      	b.n	80431c2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80431b8:	2301      	movs	r3, #1
 80431ba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80431be:	e000      	b.n	80431c2 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80431c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80431c2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80431c6:	2b00      	cmp	r3, #0
 80431c8:	d10b      	bne.n	80431e2 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80431ca:	4b81      	ldr	r3, [pc, #516]	; (80433d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80431cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80431ce:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80431d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80431d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80431da:	4a7d      	ldr	r2, [pc, #500]	; (80433d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80431dc:	430b      	orrs	r3, r1
 80431de:	6553      	str	r3, [r2, #84]	; 0x54
 80431e0:	e003      	b.n	80431ea <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80431e2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80431e6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80431ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80431ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80431f2:	f002 0302 	and.w	r3, r2, #2
 80431f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80431fa:	2300      	movs	r3, #0
 80431fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8043200:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8043204:	460b      	mov	r3, r1
 8043206:	4313      	orrs	r3, r2
 8043208:	d042      	beq.n	8043290 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 804320a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804320e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8043210:	2b05      	cmp	r3, #5
 8043212:	d825      	bhi.n	8043260 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8043214:	a201      	add	r2, pc, #4	; (adr r2, 804321c <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8043216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804321a:	bf00      	nop
 804321c:	08043269 	.word	0x08043269
 8043220:	08043235 	.word	0x08043235
 8043224:	0804324b 	.word	0x0804324b
 8043228:	08043269 	.word	0x08043269
 804322c:	08043269 	.word	0x08043269
 8043230:	08043269 	.word	0x08043269
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8043234:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043238:	3308      	adds	r3, #8
 804323a:	2101      	movs	r1, #1
 804323c:	4618      	mov	r0, r3
 804323e:	f000 ff71 	bl	8044124 <RCCEx_PLL2_Config>
 8043242:	4603      	mov	r3, r0
 8043244:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8043248:	e00f      	b.n	804326a <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 804324a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804324e:	3328      	adds	r3, #40	; 0x28
 8043250:	2101      	movs	r1, #1
 8043252:	4618      	mov	r0, r3
 8043254:	f001 f818 	bl	8044288 <RCCEx_PLL3_Config>
 8043258:	4603      	mov	r3, r0
 804325a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 804325e:	e004      	b.n	804326a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8043260:	2301      	movs	r3, #1
 8043262:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8043266:	e000      	b.n	804326a <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8043268:	bf00      	nop
    }

    if (ret == HAL_OK)
 804326a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 804326e:	2b00      	cmp	r3, #0
 8043270:	d10a      	bne.n	8043288 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8043272:	4b57      	ldr	r3, [pc, #348]	; (80433d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8043274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8043276:	f023 0107 	bic.w	r1, r3, #7
 804327a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804327e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8043280:	4a53      	ldr	r2, [pc, #332]	; (80433d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8043282:	430b      	orrs	r3, r1
 8043284:	6553      	str	r3, [r2, #84]	; 0x54
 8043286:	e003      	b.n	8043290 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043288:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 804328c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8043290:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043298:	f002 0304 	and.w	r3, r2, #4
 804329c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80432a0:	2300      	movs	r3, #0
 80432a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80432a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80432aa:	460b      	mov	r3, r1
 80432ac:	4313      	orrs	r3, r2
 80432ae:	d044      	beq.n	804333a <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80432b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80432b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80432b8:	2b05      	cmp	r3, #5
 80432ba:	d825      	bhi.n	8043308 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80432bc:	a201      	add	r2, pc, #4	; (adr r2, 80432c4 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80432be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80432c2:	bf00      	nop
 80432c4:	08043311 	.word	0x08043311
 80432c8:	080432dd 	.word	0x080432dd
 80432cc:	080432f3 	.word	0x080432f3
 80432d0:	08043311 	.word	0x08043311
 80432d4:	08043311 	.word	0x08043311
 80432d8:	08043311 	.word	0x08043311
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80432dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80432e0:	3308      	adds	r3, #8
 80432e2:	2101      	movs	r1, #1
 80432e4:	4618      	mov	r0, r3
 80432e6:	f000 ff1d 	bl	8044124 <RCCEx_PLL2_Config>
 80432ea:	4603      	mov	r3, r0
 80432ec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80432f0:	e00f      	b.n	8043312 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80432f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80432f6:	3328      	adds	r3, #40	; 0x28
 80432f8:	2101      	movs	r1, #1
 80432fa:	4618      	mov	r0, r3
 80432fc:	f000 ffc4 	bl	8044288 <RCCEx_PLL3_Config>
 8043300:	4603      	mov	r3, r0
 8043302:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8043306:	e004      	b.n	8043312 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8043308:	2301      	movs	r3, #1
 804330a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 804330e:	e000      	b.n	8043312 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8043310:	bf00      	nop
    }

    if (ret == HAL_OK)
 8043312:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043316:	2b00      	cmp	r3, #0
 8043318:	d10b      	bne.n	8043332 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 804331a:	4b2d      	ldr	r3, [pc, #180]	; (80433d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 804331c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804331e:	f023 0107 	bic.w	r1, r3, #7
 8043322:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043326:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 804332a:	4a29      	ldr	r2, [pc, #164]	; (80433d0 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 804332c:	430b      	orrs	r3, r1
 804332e:	6593      	str	r3, [r2, #88]	; 0x58
 8043330:	e003      	b.n	804333a <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043332:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043336:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 804333a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804333e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043342:	f002 0320 	and.w	r3, r2, #32
 8043346:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 804334a:	2300      	movs	r3, #0
 804334c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8043350:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8043354:	460b      	mov	r3, r1
 8043356:	4313      	orrs	r3, r2
 8043358:	d057      	beq.n	804340a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 804335a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804335e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8043362:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8043366:	d035      	beq.n	80433d4 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8043368:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 804336c:	d82c      	bhi.n	80433c8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 804336e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8043372:	d031      	beq.n	80433d8 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8043374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8043378:	d826      	bhi.n	80433c8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 804337a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 804337e:	d02d      	beq.n	80433dc <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8043380:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8043384:	d820      	bhi.n	80433c8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8043386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 804338a:	d012      	beq.n	80433b2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 804338c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8043390:	d81a      	bhi.n	80433c8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8043392:	2b00      	cmp	r3, #0
 8043394:	d024      	beq.n	80433e0 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8043396:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 804339a:	d115      	bne.n	80433c8 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 804339c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80433a0:	3308      	adds	r3, #8
 80433a2:	2100      	movs	r1, #0
 80433a4:	4618      	mov	r0, r3
 80433a6:	f000 febd 	bl	8044124 <RCCEx_PLL2_Config>
 80433aa:	4603      	mov	r3, r0
 80433ac:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80433b0:	e017      	b.n	80433e2 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80433b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80433b6:	3328      	adds	r3, #40	; 0x28
 80433b8:	2102      	movs	r1, #2
 80433ba:	4618      	mov	r0, r3
 80433bc:	f000 ff64 	bl	8044288 <RCCEx_PLL3_Config>
 80433c0:	4603      	mov	r3, r0
 80433c2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80433c6:	e00c      	b.n	80433e2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80433c8:	2301      	movs	r3, #1
 80433ca:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80433ce:	e008      	b.n	80433e2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80433d0:	58024400 	.word	0x58024400
        break;
 80433d4:	bf00      	nop
 80433d6:	e004      	b.n	80433e2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80433d8:	bf00      	nop
 80433da:	e002      	b.n	80433e2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80433dc:	bf00      	nop
 80433de:	e000      	b.n	80433e2 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80433e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80433e2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80433e6:	2b00      	cmp	r3, #0
 80433e8:	d10b      	bne.n	8043402 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80433ea:	4bc2      	ldr	r3, [pc, #776]	; (80436f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80433ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80433ee:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80433f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80433f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80433fa:	4abe      	ldr	r2, [pc, #760]	; (80436f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80433fc:	430b      	orrs	r3, r1
 80433fe:	6553      	str	r3, [r2, #84]	; 0x54
 8043400:	e003      	b.n	804340a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043402:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043406:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 804340a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804340e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043412:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8043416:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 804341a:	2300      	movs	r3, #0
 804341c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8043420:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8043424:	460b      	mov	r3, r1
 8043426:	4313      	orrs	r3, r2
 8043428:	d055      	beq.n	80434d6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 804342a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804342e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8043432:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8043436:	d033      	beq.n	80434a0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8043438:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 804343c:	d82c      	bhi.n	8043498 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 804343e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8043442:	d02f      	beq.n	80434a4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8043444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8043448:	d826      	bhi.n	8043498 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 804344a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 804344e:	d02b      	beq.n	80434a8 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8043450:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8043454:	d820      	bhi.n	8043498 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8043456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 804345a:	d012      	beq.n	8043482 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 804345c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8043460:	d81a      	bhi.n	8043498 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8043462:	2b00      	cmp	r3, #0
 8043464:	d022      	beq.n	80434ac <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8043466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804346a:	d115      	bne.n	8043498 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 804346c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043470:	3308      	adds	r3, #8
 8043472:	2100      	movs	r1, #0
 8043474:	4618      	mov	r0, r3
 8043476:	f000 fe55 	bl	8044124 <RCCEx_PLL2_Config>
 804347a:	4603      	mov	r3, r0
 804347c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8043480:	e015      	b.n	80434ae <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8043482:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043486:	3328      	adds	r3, #40	; 0x28
 8043488:	2102      	movs	r1, #2
 804348a:	4618      	mov	r0, r3
 804348c:	f000 fefc 	bl	8044288 <RCCEx_PLL3_Config>
 8043490:	4603      	mov	r3, r0
 8043492:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8043496:	e00a      	b.n	80434ae <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8043498:	2301      	movs	r3, #1
 804349a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 804349e:	e006      	b.n	80434ae <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80434a0:	bf00      	nop
 80434a2:	e004      	b.n	80434ae <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80434a4:	bf00      	nop
 80434a6:	e002      	b.n	80434ae <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80434a8:	bf00      	nop
 80434aa:	e000      	b.n	80434ae <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80434ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80434ae:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80434b2:	2b00      	cmp	r3, #0
 80434b4:	d10b      	bne.n	80434ce <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80434b6:	4b8f      	ldr	r3, [pc, #572]	; (80436f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80434b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80434ba:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80434be:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80434c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80434c6:	4a8b      	ldr	r2, [pc, #556]	; (80436f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80434c8:	430b      	orrs	r3, r1
 80434ca:	6593      	str	r3, [r2, #88]	; 0x58
 80434cc:	e003      	b.n	80434d6 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80434ce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80434d2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80434d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80434da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80434de:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80434e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80434e6:	2300      	movs	r3, #0
 80434e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80434ec:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80434f0:	460b      	mov	r3, r1
 80434f2:	4313      	orrs	r3, r2
 80434f4:	d055      	beq.n	80435a2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80434f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80434fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80434fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8043502:	d033      	beq.n	804356c <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8043504:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8043508:	d82c      	bhi.n	8043564 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 804350a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804350e:	d02f      	beq.n	8043570 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8043510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8043514:	d826      	bhi.n	8043564 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8043516:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 804351a:	d02b      	beq.n	8043574 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 804351c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8043520:	d820      	bhi.n	8043564 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8043522:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8043526:	d012      	beq.n	804354e <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8043528:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 804352c:	d81a      	bhi.n	8043564 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 804352e:	2b00      	cmp	r3, #0
 8043530:	d022      	beq.n	8043578 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8043532:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8043536:	d115      	bne.n	8043564 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8043538:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804353c:	3308      	adds	r3, #8
 804353e:	2100      	movs	r1, #0
 8043540:	4618      	mov	r0, r3
 8043542:	f000 fdef 	bl	8044124 <RCCEx_PLL2_Config>
 8043546:	4603      	mov	r3, r0
 8043548:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 804354c:	e015      	b.n	804357a <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 804354e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043552:	3328      	adds	r3, #40	; 0x28
 8043554:	2102      	movs	r1, #2
 8043556:	4618      	mov	r0, r3
 8043558:	f000 fe96 	bl	8044288 <RCCEx_PLL3_Config>
 804355c:	4603      	mov	r3, r0
 804355e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8043562:	e00a      	b.n	804357a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8043564:	2301      	movs	r3, #1
 8043566:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 804356a:	e006      	b.n	804357a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 804356c:	bf00      	nop
 804356e:	e004      	b.n	804357a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8043570:	bf00      	nop
 8043572:	e002      	b.n	804357a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8043574:	bf00      	nop
 8043576:	e000      	b.n	804357a <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8043578:	bf00      	nop
    }

    if (ret == HAL_OK)
 804357a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 804357e:	2b00      	cmp	r3, #0
 8043580:	d10b      	bne.n	804359a <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8043582:	4b5c      	ldr	r3, [pc, #368]	; (80436f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8043584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8043586:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 804358a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804358e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8043592:	4a58      	ldr	r2, [pc, #352]	; (80436f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8043594:	430b      	orrs	r3, r1
 8043596:	6593      	str	r3, [r2, #88]	; 0x58
 8043598:	e003      	b.n	80435a2 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804359a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 804359e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80435a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80435a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80435aa:	f002 0308 	and.w	r3, r2, #8
 80435ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80435b2:	2300      	movs	r3, #0
 80435b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80435b8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80435bc:	460b      	mov	r3, r1
 80435be:	4313      	orrs	r3, r2
 80435c0:	d01e      	beq.n	8043600 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80435c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80435c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80435ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80435ce:	d10c      	bne.n	80435ea <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80435d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80435d4:	3328      	adds	r3, #40	; 0x28
 80435d6:	2102      	movs	r1, #2
 80435d8:	4618      	mov	r0, r3
 80435da:	f000 fe55 	bl	8044288 <RCCEx_PLL3_Config>
 80435de:	4603      	mov	r3, r0
 80435e0:	2b00      	cmp	r3, #0
 80435e2:	d002      	beq.n	80435ea <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80435e4:	2301      	movs	r3, #1
 80435e6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80435ea:	4b42      	ldr	r3, [pc, #264]	; (80436f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80435ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80435ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80435f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80435f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80435fa:	4a3e      	ldr	r2, [pc, #248]	; (80436f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80435fc:	430b      	orrs	r3, r1
 80435fe:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8043600:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043608:	f002 0310 	and.w	r3, r2, #16
 804360c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8043610:	2300      	movs	r3, #0
 8043612:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8043616:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 804361a:	460b      	mov	r3, r1
 804361c:	4313      	orrs	r3, r2
 804361e:	d01e      	beq.n	804365e <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8043620:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043624:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8043628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804362c:	d10c      	bne.n	8043648 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 804362e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043632:	3328      	adds	r3, #40	; 0x28
 8043634:	2102      	movs	r1, #2
 8043636:	4618      	mov	r0, r3
 8043638:	f000 fe26 	bl	8044288 <RCCEx_PLL3_Config>
 804363c:	4603      	mov	r3, r0
 804363e:	2b00      	cmp	r3, #0
 8043640:	d002      	beq.n	8043648 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8043642:	2301      	movs	r3, #1
 8043644:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8043648:	4b2a      	ldr	r3, [pc, #168]	; (80436f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 804364a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804364c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8043650:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043654:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8043658:	4a26      	ldr	r2, [pc, #152]	; (80436f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 804365a:	430b      	orrs	r3, r1
 804365c:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 804365e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043666:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 804366a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 804366e:	2300      	movs	r3, #0
 8043670:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8043674:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8043678:	460b      	mov	r3, r1
 804367a:	4313      	orrs	r3, r2
 804367c:	d040      	beq.n	8043700 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 804367e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043682:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8043686:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 804368a:	d022      	beq.n	80436d2 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 804368c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8043690:	d81b      	bhi.n	80436ca <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8043692:	2b00      	cmp	r3, #0
 8043694:	d003      	beq.n	804369e <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8043696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804369a:	d00b      	beq.n	80436b4 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 804369c:	e015      	b.n	80436ca <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 804369e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80436a2:	3308      	adds	r3, #8
 80436a4:	2100      	movs	r1, #0
 80436a6:	4618      	mov	r0, r3
 80436a8:	f000 fd3c 	bl	8044124 <RCCEx_PLL2_Config>
 80436ac:	4603      	mov	r3, r0
 80436ae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80436b2:	e00f      	b.n	80436d4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80436b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80436b8:	3328      	adds	r3, #40	; 0x28
 80436ba:	2102      	movs	r1, #2
 80436bc:	4618      	mov	r0, r3
 80436be:	f000 fde3 	bl	8044288 <RCCEx_PLL3_Config>
 80436c2:	4603      	mov	r3, r0
 80436c4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80436c8:	e004      	b.n	80436d4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80436ca:	2301      	movs	r3, #1
 80436cc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80436d0:	e000      	b.n	80436d4 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80436d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80436d4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80436d8:	2b00      	cmp	r3, #0
 80436da:	d10d      	bne.n	80436f8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80436dc:	4b05      	ldr	r3, [pc, #20]	; (80436f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80436de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80436e0:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80436e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80436e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80436ec:	4a01      	ldr	r2, [pc, #4]	; (80436f4 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80436ee:	430b      	orrs	r3, r1
 80436f0:	6593      	str	r3, [r2, #88]	; 0x58
 80436f2:	e005      	b.n	8043700 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80436f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80436f8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80436fc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8043700:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043708:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 804370c:	67bb      	str	r3, [r7, #120]	; 0x78
 804370e:	2300      	movs	r3, #0
 8043710:	67fb      	str	r3, [r7, #124]	; 0x7c
 8043712:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8043716:	460b      	mov	r3, r1
 8043718:	4313      	orrs	r3, r2
 804371a:	d03b      	beq.n	8043794 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 804371c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8043724:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8043728:	d01f      	beq.n	804376a <HAL_RCCEx_PeriphCLKConfig+0x1056>
 804372a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 804372e:	d818      	bhi.n	8043762 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8043730:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8043734:	d003      	beq.n	804373e <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8043736:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 804373a:	d007      	beq.n	804374c <HAL_RCCEx_PeriphCLKConfig+0x1038>
 804373c:	e011      	b.n	8043762 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 804373e:	4b64      	ldr	r3, [pc, #400]	; (80438d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8043740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043742:	4a63      	ldr	r2, [pc, #396]	; (80438d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8043744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8043748:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 804374a:	e00f      	b.n	804376c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 804374c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043750:	3328      	adds	r3, #40	; 0x28
 8043752:	2101      	movs	r1, #1
 8043754:	4618      	mov	r0, r3
 8043756:	f000 fd97 	bl	8044288 <RCCEx_PLL3_Config>
 804375a:	4603      	mov	r3, r0
 804375c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8043760:	e004      	b.n	804376c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8043762:	2301      	movs	r3, #1
 8043764:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8043768:	e000      	b.n	804376c <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 804376a:	bf00      	nop
    }

    if (ret == HAL_OK)
 804376c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043770:	2b00      	cmp	r3, #0
 8043772:	d10b      	bne.n	804378c <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8043774:	4b56      	ldr	r3, [pc, #344]	; (80438d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8043776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8043778:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 804377c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8043784:	4a52      	ldr	r2, [pc, #328]	; (80438d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8043786:	430b      	orrs	r3, r1
 8043788:	6553      	str	r3, [r2, #84]	; 0x54
 804378a:	e003      	b.n	8043794 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804378c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043790:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8043794:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043798:	e9d3 2300 	ldrd	r2, r3, [r3]
 804379c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80437a0:	673b      	str	r3, [r7, #112]	; 0x70
 80437a2:	2300      	movs	r3, #0
 80437a4:	677b      	str	r3, [r7, #116]	; 0x74
 80437a6:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80437aa:	460b      	mov	r3, r1
 80437ac:	4313      	orrs	r3, r2
 80437ae:	d031      	beq.n	8043814 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80437b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80437b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80437b6:	2b00      	cmp	r3, #0
 80437b8:	d003      	beq.n	80437c2 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80437ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80437be:	d007      	beq.n	80437d0 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80437c0:	e011      	b.n	80437e6 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80437c2:	4b43      	ldr	r3, [pc, #268]	; (80438d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80437c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80437c6:	4a42      	ldr	r2, [pc, #264]	; (80438d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80437c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80437cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80437ce:	e00e      	b.n	80437ee <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80437d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80437d4:	3308      	adds	r3, #8
 80437d6:	2102      	movs	r1, #2
 80437d8:	4618      	mov	r0, r3
 80437da:	f000 fca3 	bl	8044124 <RCCEx_PLL2_Config>
 80437de:	4603      	mov	r3, r0
 80437e0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80437e4:	e003      	b.n	80437ee <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80437e6:	2301      	movs	r3, #1
 80437e8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80437ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80437ee:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80437f2:	2b00      	cmp	r3, #0
 80437f4:	d10a      	bne.n	804380c <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80437f6:	4b36      	ldr	r3, [pc, #216]	; (80438d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80437f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80437fa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80437fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8043804:	4a32      	ldr	r2, [pc, #200]	; (80438d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8043806:	430b      	orrs	r3, r1
 8043808:	64d3      	str	r3, [r2, #76]	; 0x4c
 804380a:	e003      	b.n	8043814 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804380c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043810:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8043814:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043818:	e9d3 2300 	ldrd	r2, r3, [r3]
 804381c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8043820:	66bb      	str	r3, [r7, #104]	; 0x68
 8043822:	2300      	movs	r3, #0
 8043824:	66fb      	str	r3, [r7, #108]	; 0x6c
 8043826:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 804382a:	460b      	mov	r3, r1
 804382c:	4313      	orrs	r3, r2
 804382e:	d00c      	beq.n	804384a <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8043830:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043834:	3328      	adds	r3, #40	; 0x28
 8043836:	2102      	movs	r1, #2
 8043838:	4618      	mov	r0, r3
 804383a:	f000 fd25 	bl	8044288 <RCCEx_PLL3_Config>
 804383e:	4603      	mov	r3, r0
 8043840:	2b00      	cmp	r3, #0
 8043842:	d002      	beq.n	804384a <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8043844:	2301      	movs	r3, #1
 8043846:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 804384a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804384e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043852:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8043856:	663b      	str	r3, [r7, #96]	; 0x60
 8043858:	2300      	movs	r3, #0
 804385a:	667b      	str	r3, [r7, #100]	; 0x64
 804385c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8043860:	460b      	mov	r3, r1
 8043862:	4313      	orrs	r3, r2
 8043864:	d03a      	beq.n	80438dc <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8043866:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804386a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 804386e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8043872:	d018      	beq.n	80438a6 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8043874:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8043878:	d811      	bhi.n	804389e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 804387a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804387e:	d014      	beq.n	80438aa <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8043880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8043884:	d80b      	bhi.n	804389e <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8043886:	2b00      	cmp	r3, #0
 8043888:	d011      	beq.n	80438ae <HAL_RCCEx_PeriphCLKConfig+0x119a>
 804388a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804388e:	d106      	bne.n	804389e <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8043890:	4b0f      	ldr	r3, [pc, #60]	; (80438d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8043892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043894:	4a0e      	ldr	r2, [pc, #56]	; (80438d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8043896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804389a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 804389c:	e008      	b.n	80438b0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 804389e:	2301      	movs	r3, #1
 80438a0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80438a4:	e004      	b.n	80438b0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80438a6:	bf00      	nop
 80438a8:	e002      	b.n	80438b0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80438aa:	bf00      	nop
 80438ac:	e000      	b.n	80438b0 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80438ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80438b0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80438b4:	2b00      	cmp	r3, #0
 80438b6:	d10d      	bne.n	80438d4 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80438b8:	4b05      	ldr	r3, [pc, #20]	; (80438d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80438ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80438bc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80438c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80438c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80438c8:	4a01      	ldr	r2, [pc, #4]	; (80438d0 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80438ca:	430b      	orrs	r3, r1
 80438cc:	6553      	str	r3, [r2, #84]	; 0x54
 80438ce:	e005      	b.n	80438dc <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80438d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80438d4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80438d8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80438dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80438e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80438e4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80438e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80438ea:	2300      	movs	r3, #0
 80438ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80438ee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80438f2:	460b      	mov	r3, r1
 80438f4:	4313      	orrs	r3, r2
 80438f6:	d009      	beq.n	804390c <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80438f8:	4baa      	ldr	r3, [pc, #680]	; (8043ba4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80438fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80438fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8043900:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8043906:	4aa7      	ldr	r2, [pc, #668]	; (8043ba4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8043908:	430b      	orrs	r3, r1
 804390a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 804390c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043914:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8043918:	653b      	str	r3, [r7, #80]	; 0x50
 804391a:	2300      	movs	r3, #0
 804391c:	657b      	str	r3, [r7, #84]	; 0x54
 804391e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8043922:	460b      	mov	r3, r1
 8043924:	4313      	orrs	r3, r2
 8043926:	d00a      	beq.n	804393e <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8043928:	4b9e      	ldr	r3, [pc, #632]	; (8043ba4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 804392a:	691b      	ldr	r3, [r3, #16]
 804392c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8043930:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043934:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8043938:	4a9a      	ldr	r2, [pc, #616]	; (8043ba4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 804393a:	430b      	orrs	r3, r1
 804393c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 804393e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043946:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 804394a:	64bb      	str	r3, [r7, #72]	; 0x48
 804394c:	2300      	movs	r3, #0
 804394e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8043950:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8043954:	460b      	mov	r3, r1
 8043956:	4313      	orrs	r3, r2
 8043958:	d009      	beq.n	804396e <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 804395a:	4b92      	ldr	r3, [pc, #584]	; (8043ba4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 804395c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804395e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8043962:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8043968:	4a8e      	ldr	r2, [pc, #568]	; (8043ba4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 804396a:	430b      	orrs	r3, r1
 804396c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 804396e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043976:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 804397a:	643b      	str	r3, [r7, #64]	; 0x40
 804397c:	2300      	movs	r3, #0
 804397e:	647b      	str	r3, [r7, #68]	; 0x44
 8043980:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8043984:	460b      	mov	r3, r1
 8043986:	4313      	orrs	r3, r2
 8043988:	d00e      	beq.n	80439a8 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 804398a:	4b86      	ldr	r3, [pc, #536]	; (8043ba4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 804398c:	691b      	ldr	r3, [r3, #16]
 804398e:	4a85      	ldr	r2, [pc, #532]	; (8043ba4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8043990:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8043994:	6113      	str	r3, [r2, #16]
 8043996:	4b83      	ldr	r3, [pc, #524]	; (8043ba4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8043998:	6919      	ldr	r1, [r3, #16]
 804399a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 804399e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80439a2:	4a80      	ldr	r2, [pc, #512]	; (8043ba4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80439a4:	430b      	orrs	r3, r1
 80439a6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80439a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80439ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80439b0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80439b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80439b6:	2300      	movs	r3, #0
 80439b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80439ba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80439be:	460b      	mov	r3, r1
 80439c0:	4313      	orrs	r3, r2
 80439c2:	d009      	beq.n	80439d8 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80439c4:	4b77      	ldr	r3, [pc, #476]	; (8043ba4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80439c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80439c8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80439cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80439d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80439d2:	4a74      	ldr	r2, [pc, #464]	; (8043ba4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80439d4:	430b      	orrs	r3, r1
 80439d6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80439d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80439dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80439e0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80439e4:	633b      	str	r3, [r7, #48]	; 0x30
 80439e6:	2300      	movs	r3, #0
 80439e8:	637b      	str	r3, [r7, #52]	; 0x34
 80439ea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80439ee:	460b      	mov	r3, r1
 80439f0:	4313      	orrs	r3, r2
 80439f2:	d00a      	beq.n	8043a0a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80439f4:	4b6b      	ldr	r3, [pc, #428]	; (8043ba4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80439f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80439f8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80439fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043a04:	4a67      	ldr	r2, [pc, #412]	; (8043ba4 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8043a06:	430b      	orrs	r3, r1
 8043a08:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8043a0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043a12:	2100      	movs	r1, #0
 8043a14:	62b9      	str	r1, [r7, #40]	; 0x28
 8043a16:	f003 0301 	and.w	r3, r3, #1
 8043a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8043a1c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8043a20:	460b      	mov	r3, r1
 8043a22:	4313      	orrs	r3, r2
 8043a24:	d011      	beq.n	8043a4a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8043a26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043a2a:	3308      	adds	r3, #8
 8043a2c:	2100      	movs	r1, #0
 8043a2e:	4618      	mov	r0, r3
 8043a30:	f000 fb78 	bl	8044124 <RCCEx_PLL2_Config>
 8043a34:	4603      	mov	r3, r0
 8043a36:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8043a3a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043a3e:	2b00      	cmp	r3, #0
 8043a40:	d003      	beq.n	8043a4a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043a42:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043a46:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8043a4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043a52:	2100      	movs	r1, #0
 8043a54:	6239      	str	r1, [r7, #32]
 8043a56:	f003 0302 	and.w	r3, r3, #2
 8043a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8043a5c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8043a60:	460b      	mov	r3, r1
 8043a62:	4313      	orrs	r3, r2
 8043a64:	d011      	beq.n	8043a8a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8043a66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043a6a:	3308      	adds	r3, #8
 8043a6c:	2101      	movs	r1, #1
 8043a6e:	4618      	mov	r0, r3
 8043a70:	f000 fb58 	bl	8044124 <RCCEx_PLL2_Config>
 8043a74:	4603      	mov	r3, r0
 8043a76:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8043a7a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043a7e:	2b00      	cmp	r3, #0
 8043a80:	d003      	beq.n	8043a8a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043a82:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043a86:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8043a8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043a92:	2100      	movs	r1, #0
 8043a94:	61b9      	str	r1, [r7, #24]
 8043a96:	f003 0304 	and.w	r3, r3, #4
 8043a9a:	61fb      	str	r3, [r7, #28]
 8043a9c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8043aa0:	460b      	mov	r3, r1
 8043aa2:	4313      	orrs	r3, r2
 8043aa4:	d011      	beq.n	8043aca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8043aa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043aaa:	3308      	adds	r3, #8
 8043aac:	2102      	movs	r1, #2
 8043aae:	4618      	mov	r0, r3
 8043ab0:	f000 fb38 	bl	8044124 <RCCEx_PLL2_Config>
 8043ab4:	4603      	mov	r3, r0
 8043ab6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8043aba:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043abe:	2b00      	cmp	r3, #0
 8043ac0:	d003      	beq.n	8043aca <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043ac2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043ac6:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8043aca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043ad2:	2100      	movs	r1, #0
 8043ad4:	6139      	str	r1, [r7, #16]
 8043ad6:	f003 0308 	and.w	r3, r3, #8
 8043ada:	617b      	str	r3, [r7, #20]
 8043adc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8043ae0:	460b      	mov	r3, r1
 8043ae2:	4313      	orrs	r3, r2
 8043ae4:	d011      	beq.n	8043b0a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8043ae6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043aea:	3328      	adds	r3, #40	; 0x28
 8043aec:	2100      	movs	r1, #0
 8043aee:	4618      	mov	r0, r3
 8043af0:	f000 fbca 	bl	8044288 <RCCEx_PLL3_Config>
 8043af4:	4603      	mov	r3, r0
 8043af6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 8043afa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043afe:	2b00      	cmp	r3, #0
 8043b00:	d003      	beq.n	8043b0a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043b02:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043b06:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8043b0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043b12:	2100      	movs	r1, #0
 8043b14:	60b9      	str	r1, [r7, #8]
 8043b16:	f003 0310 	and.w	r3, r3, #16
 8043b1a:	60fb      	str	r3, [r7, #12]
 8043b1c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8043b20:	460b      	mov	r3, r1
 8043b22:	4313      	orrs	r3, r2
 8043b24:	d011      	beq.n	8043b4a <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8043b26:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043b2a:	3328      	adds	r3, #40	; 0x28
 8043b2c:	2101      	movs	r1, #1
 8043b2e:	4618      	mov	r0, r3
 8043b30:	f000 fbaa 	bl	8044288 <RCCEx_PLL3_Config>
 8043b34:	4603      	mov	r3, r0
 8043b36:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8043b3a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043b3e:	2b00      	cmp	r3, #0
 8043b40:	d003      	beq.n	8043b4a <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043b42:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043b46:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8043b4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8043b52:	2100      	movs	r1, #0
 8043b54:	6039      	str	r1, [r7, #0]
 8043b56:	f003 0320 	and.w	r3, r3, #32
 8043b5a:	607b      	str	r3, [r7, #4]
 8043b5c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8043b60:	460b      	mov	r3, r1
 8043b62:	4313      	orrs	r3, r2
 8043b64:	d011      	beq.n	8043b8a <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8043b66:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8043b6a:	3328      	adds	r3, #40	; 0x28
 8043b6c:	2102      	movs	r1, #2
 8043b6e:	4618      	mov	r0, r3
 8043b70:	f000 fb8a 	bl	8044288 <RCCEx_PLL3_Config>
 8043b74:	4603      	mov	r3, r0
 8043b76:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8043b7a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043b7e:	2b00      	cmp	r3, #0
 8043b80:	d003      	beq.n	8043b8a <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8043b82:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8043b86:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 8043b8a:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8043b8e:	2b00      	cmp	r3, #0
 8043b90:	d101      	bne.n	8043b96 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8043b92:	2300      	movs	r3, #0
 8043b94:	e000      	b.n	8043b98 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8043b96:	2301      	movs	r3, #1
}
 8043b98:	4618      	mov	r0, r3
 8043b9a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8043b9e:	46bd      	mov	sp, r7
 8043ba0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8043ba4:	58024400 	.word	0x58024400

08043ba8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8043ba8:	b580      	push	{r7, lr}
 8043baa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8043bac:	f7fe fd56 	bl	804265c <HAL_RCC_GetHCLKFreq>
 8043bb0:	4602      	mov	r2, r0
 8043bb2:	4b06      	ldr	r3, [pc, #24]	; (8043bcc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8043bb4:	6a1b      	ldr	r3, [r3, #32]
 8043bb6:	091b      	lsrs	r3, r3, #4
 8043bb8:	f003 0307 	and.w	r3, r3, #7
 8043bbc:	4904      	ldr	r1, [pc, #16]	; (8043bd0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8043bbe:	5ccb      	ldrb	r3, [r1, r3]
 8043bc0:	f003 031f 	and.w	r3, r3, #31
 8043bc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8043bc8:	4618      	mov	r0, r3
 8043bca:	bd80      	pop	{r7, pc}
 8043bcc:	58024400 	.word	0x58024400
 8043bd0:	08046774 	.word	0x08046774

08043bd4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8043bd4:	b480      	push	{r7}
 8043bd6:	b089      	sub	sp, #36	; 0x24
 8043bd8:	af00      	add	r7, sp, #0
 8043bda:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8043bdc:	4ba1      	ldr	r3, [pc, #644]	; (8043e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043be0:	f003 0303 	and.w	r3, r3, #3
 8043be4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8043be6:	4b9f      	ldr	r3, [pc, #636]	; (8043e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043bea:	0b1b      	lsrs	r3, r3, #12
 8043bec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8043bf0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8043bf2:	4b9c      	ldr	r3, [pc, #624]	; (8043e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043bf6:	091b      	lsrs	r3, r3, #4
 8043bf8:	f003 0301 	and.w	r3, r3, #1
 8043bfc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8043bfe:	4b99      	ldr	r3, [pc, #612]	; (8043e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043c02:	08db      	lsrs	r3, r3, #3
 8043c04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8043c08:	693a      	ldr	r2, [r7, #16]
 8043c0a:	fb02 f303 	mul.w	r3, r2, r3
 8043c0e:	ee07 3a90 	vmov	s15, r3
 8043c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043c16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8043c1a:	697b      	ldr	r3, [r7, #20]
 8043c1c:	2b00      	cmp	r3, #0
 8043c1e:	f000 8111 	beq.w	8043e44 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8043c22:	69bb      	ldr	r3, [r7, #24]
 8043c24:	2b02      	cmp	r3, #2
 8043c26:	f000 8083 	beq.w	8043d30 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8043c2a:	69bb      	ldr	r3, [r7, #24]
 8043c2c:	2b02      	cmp	r3, #2
 8043c2e:	f200 80a1 	bhi.w	8043d74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8043c32:	69bb      	ldr	r3, [r7, #24]
 8043c34:	2b00      	cmp	r3, #0
 8043c36:	d003      	beq.n	8043c40 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8043c38:	69bb      	ldr	r3, [r7, #24]
 8043c3a:	2b01      	cmp	r3, #1
 8043c3c:	d056      	beq.n	8043cec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8043c3e:	e099      	b.n	8043d74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8043c40:	4b88      	ldr	r3, [pc, #544]	; (8043e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043c42:	681b      	ldr	r3, [r3, #0]
 8043c44:	f003 0320 	and.w	r3, r3, #32
 8043c48:	2b00      	cmp	r3, #0
 8043c4a:	d02d      	beq.n	8043ca8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8043c4c:	4b85      	ldr	r3, [pc, #532]	; (8043e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043c4e:	681b      	ldr	r3, [r3, #0]
 8043c50:	08db      	lsrs	r3, r3, #3
 8043c52:	f003 0303 	and.w	r3, r3, #3
 8043c56:	4a84      	ldr	r2, [pc, #528]	; (8043e68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8043c58:	fa22 f303 	lsr.w	r3, r2, r3
 8043c5c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8043c5e:	68bb      	ldr	r3, [r7, #8]
 8043c60:	ee07 3a90 	vmov	s15, r3
 8043c64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043c68:	697b      	ldr	r3, [r7, #20]
 8043c6a:	ee07 3a90 	vmov	s15, r3
 8043c6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043c76:	4b7b      	ldr	r3, [pc, #492]	; (8043e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8043c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043c7e:	ee07 3a90 	vmov	s15, r3
 8043c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043c86:	ed97 6a03 	vldr	s12, [r7, #12]
 8043c8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8043e6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8043c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8043c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043ca2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8043ca6:	e087      	b.n	8043db8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8043ca8:	697b      	ldr	r3, [r7, #20]
 8043caa:	ee07 3a90 	vmov	s15, r3
 8043cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043cb2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8043e70 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8043cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043cba:	4b6a      	ldr	r3, [pc, #424]	; (8043e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8043cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043cc2:	ee07 3a90 	vmov	s15, r3
 8043cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043cca:	ed97 6a03 	vldr	s12, [r7, #12]
 8043cce:	eddf 5a67 	vldr	s11, [pc, #412]	; 8043e6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8043cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043cda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8043cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043ce6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8043cea:	e065      	b.n	8043db8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8043cec:	697b      	ldr	r3, [r7, #20]
 8043cee:	ee07 3a90 	vmov	s15, r3
 8043cf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043cf6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8043e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8043cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043cfe:	4b59      	ldr	r3, [pc, #356]	; (8043e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8043d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043d06:	ee07 3a90 	vmov	s15, r3
 8043d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8043d12:	eddf 5a56 	vldr	s11, [pc, #344]	; 8043e6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8043d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8043d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043d2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8043d2e:	e043      	b.n	8043db8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8043d30:	697b      	ldr	r3, [r7, #20]
 8043d32:	ee07 3a90 	vmov	s15, r3
 8043d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043d3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8043e78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8043d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043d42:	4b48      	ldr	r3, [pc, #288]	; (8043e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8043d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043d4a:	ee07 3a90 	vmov	s15, r3
 8043d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8043d56:	eddf 5a45 	vldr	s11, [pc, #276]	; 8043e6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8043d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043d62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8043d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043d6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8043d72:	e021      	b.n	8043db8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8043d74:	697b      	ldr	r3, [r7, #20]
 8043d76:	ee07 3a90 	vmov	s15, r3
 8043d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043d7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8043e74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8043d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043d86:	4b37      	ldr	r3, [pc, #220]	; (8043e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8043d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043d8e:	ee07 3a90 	vmov	s15, r3
 8043d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8043d9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8043e6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8043d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8043daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043db2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8043db6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8043db8:	4b2a      	ldr	r3, [pc, #168]	; (8043e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8043dbc:	0a5b      	lsrs	r3, r3, #9
 8043dbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8043dc2:	ee07 3a90 	vmov	s15, r3
 8043dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043dca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8043dce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8043dd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8043dd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8043dda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8043dde:	ee17 2a90 	vmov	r2, s15
 8043de2:	687b      	ldr	r3, [r7, #4]
 8043de4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8043de6:	4b1f      	ldr	r3, [pc, #124]	; (8043e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8043dea:	0c1b      	lsrs	r3, r3, #16
 8043dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8043df0:	ee07 3a90 	vmov	s15, r3
 8043df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043df8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8043dfc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8043e00:	edd7 6a07 	vldr	s13, [r7, #28]
 8043e04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8043e08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8043e0c:	ee17 2a90 	vmov	r2, s15
 8043e10:	687b      	ldr	r3, [r7, #4]
 8043e12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8043e14:	4b13      	ldr	r3, [pc, #76]	; (8043e64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8043e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8043e18:	0e1b      	lsrs	r3, r3, #24
 8043e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8043e1e:	ee07 3a90 	vmov	s15, r3
 8043e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043e26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8043e2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8043e2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8043e32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8043e36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8043e3a:	ee17 2a90 	vmov	r2, s15
 8043e3e:	687b      	ldr	r3, [r7, #4]
 8043e40:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8043e42:	e008      	b.n	8043e56 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8043e44:	687b      	ldr	r3, [r7, #4]
 8043e46:	2200      	movs	r2, #0
 8043e48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8043e4a:	687b      	ldr	r3, [r7, #4]
 8043e4c:	2200      	movs	r2, #0
 8043e4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8043e50:	687b      	ldr	r3, [r7, #4]
 8043e52:	2200      	movs	r2, #0
 8043e54:	609a      	str	r2, [r3, #8]
}
 8043e56:	bf00      	nop
 8043e58:	3724      	adds	r7, #36	; 0x24
 8043e5a:	46bd      	mov	sp, r7
 8043e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043e60:	4770      	bx	lr
 8043e62:	bf00      	nop
 8043e64:	58024400 	.word	0x58024400
 8043e68:	03d09000 	.word	0x03d09000
 8043e6c:	46000000 	.word	0x46000000
 8043e70:	4c742400 	.word	0x4c742400
 8043e74:	4a742400 	.word	0x4a742400
 8043e78:	4bbebc20 	.word	0x4bbebc20

08043e7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8043e7c:	b480      	push	{r7}
 8043e7e:	b089      	sub	sp, #36	; 0x24
 8043e80:	af00      	add	r7, sp, #0
 8043e82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8043e84:	4ba1      	ldr	r3, [pc, #644]	; (804410c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043e88:	f003 0303 	and.w	r3, r3, #3
 8043e8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8043e8e:	4b9f      	ldr	r3, [pc, #636]	; (804410c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043e92:	0d1b      	lsrs	r3, r3, #20
 8043e94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8043e98:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8043e9a:	4b9c      	ldr	r3, [pc, #624]	; (804410c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043e9e:	0a1b      	lsrs	r3, r3, #8
 8043ea0:	f003 0301 	and.w	r3, r3, #1
 8043ea4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8043ea6:	4b99      	ldr	r3, [pc, #612]	; (804410c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8043eaa:	08db      	lsrs	r3, r3, #3
 8043eac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8043eb0:	693a      	ldr	r2, [r7, #16]
 8043eb2:	fb02 f303 	mul.w	r3, r2, r3
 8043eb6:	ee07 3a90 	vmov	s15, r3
 8043eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043ebe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8043ec2:	697b      	ldr	r3, [r7, #20]
 8043ec4:	2b00      	cmp	r3, #0
 8043ec6:	f000 8111 	beq.w	80440ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8043eca:	69bb      	ldr	r3, [r7, #24]
 8043ecc:	2b02      	cmp	r3, #2
 8043ece:	f000 8083 	beq.w	8043fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8043ed2:	69bb      	ldr	r3, [r7, #24]
 8043ed4:	2b02      	cmp	r3, #2
 8043ed6:	f200 80a1 	bhi.w	804401c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8043eda:	69bb      	ldr	r3, [r7, #24]
 8043edc:	2b00      	cmp	r3, #0
 8043ede:	d003      	beq.n	8043ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8043ee0:	69bb      	ldr	r3, [r7, #24]
 8043ee2:	2b01      	cmp	r3, #1
 8043ee4:	d056      	beq.n	8043f94 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8043ee6:	e099      	b.n	804401c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8043ee8:	4b88      	ldr	r3, [pc, #544]	; (804410c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043eea:	681b      	ldr	r3, [r3, #0]
 8043eec:	f003 0320 	and.w	r3, r3, #32
 8043ef0:	2b00      	cmp	r3, #0
 8043ef2:	d02d      	beq.n	8043f50 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8043ef4:	4b85      	ldr	r3, [pc, #532]	; (804410c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043ef6:	681b      	ldr	r3, [r3, #0]
 8043ef8:	08db      	lsrs	r3, r3, #3
 8043efa:	f003 0303 	and.w	r3, r3, #3
 8043efe:	4a84      	ldr	r2, [pc, #528]	; (8044110 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8043f00:	fa22 f303 	lsr.w	r3, r2, r3
 8043f04:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8043f06:	68bb      	ldr	r3, [r7, #8]
 8043f08:	ee07 3a90 	vmov	s15, r3
 8043f0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043f10:	697b      	ldr	r3, [r7, #20]
 8043f12:	ee07 3a90 	vmov	s15, r3
 8043f16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043f1e:	4b7b      	ldr	r3, [pc, #492]	; (804410c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043f26:	ee07 3a90 	vmov	s15, r3
 8043f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043f2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8043f32:	eddf 5a78 	vldr	s11, [pc, #480]	; 8044114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8043f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043f3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8043f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043f4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8043f4e:	e087      	b.n	8044060 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8043f50:	697b      	ldr	r3, [r7, #20]
 8043f52:	ee07 3a90 	vmov	s15, r3
 8043f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043f5a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8044118 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8043f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043f62:	4b6a      	ldr	r3, [pc, #424]	; (804410c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043f6a:	ee07 3a90 	vmov	s15, r3
 8043f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043f72:	ed97 6a03 	vldr	s12, [r7, #12]
 8043f76:	eddf 5a67 	vldr	s11, [pc, #412]	; 8044114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8043f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043f82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8043f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043f8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8043f92:	e065      	b.n	8044060 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8043f94:	697b      	ldr	r3, [r7, #20]
 8043f96:	ee07 3a90 	vmov	s15, r3
 8043f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043f9e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 804411c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8043fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043fa6:	4b59      	ldr	r3, [pc, #356]	; (804410c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043fae:	ee07 3a90 	vmov	s15, r3
 8043fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043fb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8043fba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8044114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8043fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8043fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8043fc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8043fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8043fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8043fd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8043fd6:	e043      	b.n	8044060 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8043fd8:	697b      	ldr	r3, [r7, #20]
 8043fda:	ee07 3a90 	vmov	s15, r3
 8043fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8043fe2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8044120 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8043fe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8043fea:	4b48      	ldr	r3, [pc, #288]	; (804410c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8043fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8043ff2:	ee07 3a90 	vmov	s15, r3
 8043ff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8043ffa:	ed97 6a03 	vldr	s12, [r7, #12]
 8043ffe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8044114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8044002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8044006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804400a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 804400e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8044012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8044016:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 804401a:	e021      	b.n	8044060 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 804401c:	697b      	ldr	r3, [r7, #20]
 804401e:	ee07 3a90 	vmov	s15, r3
 8044022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8044026:	eddf 6a3d 	vldr	s13, [pc, #244]	; 804411c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 804402a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 804402e:	4b37      	ldr	r3, [pc, #220]	; (804410c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8044030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8044036:	ee07 3a90 	vmov	s15, r3
 804403a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 804403e:	ed97 6a03 	vldr	s12, [r7, #12]
 8044042:	eddf 5a34 	vldr	s11, [pc, #208]	; 8044114 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8044046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 804404a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 804404e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8044052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8044056:	ee67 7a27 	vmul.f32	s15, s14, s15
 804405a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 804405e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8044060:	4b2a      	ldr	r3, [pc, #168]	; (804410c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8044062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044064:	0a5b      	lsrs	r3, r3, #9
 8044066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 804406a:	ee07 3a90 	vmov	s15, r3
 804406e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8044072:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8044076:	ee37 7a87 	vadd.f32	s14, s15, s14
 804407a:	edd7 6a07 	vldr	s13, [r7, #28]
 804407e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8044082:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8044086:	ee17 2a90 	vmov	r2, s15
 804408a:	687b      	ldr	r3, [r7, #4]
 804408c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 804408e:	4b1f      	ldr	r3, [pc, #124]	; (804410c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8044090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044092:	0c1b      	lsrs	r3, r3, #16
 8044094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8044098:	ee07 3a90 	vmov	s15, r3
 804409c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80440a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80440a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80440a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80440ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80440b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80440b4:	ee17 2a90 	vmov	r2, s15
 80440b8:	687b      	ldr	r3, [r7, #4]
 80440ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80440bc:	4b13      	ldr	r3, [pc, #76]	; (804410c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80440be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80440c0:	0e1b      	lsrs	r3, r3, #24
 80440c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80440c6:	ee07 3a90 	vmov	s15, r3
 80440ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80440ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80440d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80440d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80440da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80440de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80440e2:	ee17 2a90 	vmov	r2, s15
 80440e6:	687b      	ldr	r3, [r7, #4]
 80440e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80440ea:	e008      	b.n	80440fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80440ec:	687b      	ldr	r3, [r7, #4]
 80440ee:	2200      	movs	r2, #0
 80440f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80440f2:	687b      	ldr	r3, [r7, #4]
 80440f4:	2200      	movs	r2, #0
 80440f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80440f8:	687b      	ldr	r3, [r7, #4]
 80440fa:	2200      	movs	r2, #0
 80440fc:	609a      	str	r2, [r3, #8]
}
 80440fe:	bf00      	nop
 8044100:	3724      	adds	r7, #36	; 0x24
 8044102:	46bd      	mov	sp, r7
 8044104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044108:	4770      	bx	lr
 804410a:	bf00      	nop
 804410c:	58024400 	.word	0x58024400
 8044110:	03d09000 	.word	0x03d09000
 8044114:	46000000 	.word	0x46000000
 8044118:	4c742400 	.word	0x4c742400
 804411c:	4a742400 	.word	0x4a742400
 8044120:	4bbebc20 	.word	0x4bbebc20

08044124 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8044124:	b580      	push	{r7, lr}
 8044126:	b084      	sub	sp, #16
 8044128:	af00      	add	r7, sp, #0
 804412a:	6078      	str	r0, [r7, #4]
 804412c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 804412e:	2300      	movs	r3, #0
 8044130:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8044132:	4b53      	ldr	r3, [pc, #332]	; (8044280 <RCCEx_PLL2_Config+0x15c>)
 8044134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8044136:	f003 0303 	and.w	r3, r3, #3
 804413a:	2b03      	cmp	r3, #3
 804413c:	d101      	bne.n	8044142 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 804413e:	2301      	movs	r3, #1
 8044140:	e099      	b.n	8044276 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8044142:	4b4f      	ldr	r3, [pc, #316]	; (8044280 <RCCEx_PLL2_Config+0x15c>)
 8044144:	681b      	ldr	r3, [r3, #0]
 8044146:	4a4e      	ldr	r2, [pc, #312]	; (8044280 <RCCEx_PLL2_Config+0x15c>)
 8044148:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 804414c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 804414e:	f7fc ff05 	bl	8040f5c <HAL_GetTick>
 8044152:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8044154:	e008      	b.n	8044168 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8044156:	f7fc ff01 	bl	8040f5c <HAL_GetTick>
 804415a:	4602      	mov	r2, r0
 804415c:	68bb      	ldr	r3, [r7, #8]
 804415e:	1ad3      	subs	r3, r2, r3
 8044160:	2b02      	cmp	r3, #2
 8044162:	d901      	bls.n	8044168 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8044164:	2303      	movs	r3, #3
 8044166:	e086      	b.n	8044276 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8044168:	4b45      	ldr	r3, [pc, #276]	; (8044280 <RCCEx_PLL2_Config+0x15c>)
 804416a:	681b      	ldr	r3, [r3, #0]
 804416c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8044170:	2b00      	cmp	r3, #0
 8044172:	d1f0      	bne.n	8044156 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8044174:	4b42      	ldr	r3, [pc, #264]	; (8044280 <RCCEx_PLL2_Config+0x15c>)
 8044176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8044178:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 804417c:	687b      	ldr	r3, [r7, #4]
 804417e:	681b      	ldr	r3, [r3, #0]
 8044180:	031b      	lsls	r3, r3, #12
 8044182:	493f      	ldr	r1, [pc, #252]	; (8044280 <RCCEx_PLL2_Config+0x15c>)
 8044184:	4313      	orrs	r3, r2
 8044186:	628b      	str	r3, [r1, #40]	; 0x28
 8044188:	687b      	ldr	r3, [r7, #4]
 804418a:	685b      	ldr	r3, [r3, #4]
 804418c:	3b01      	subs	r3, #1
 804418e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8044192:	687b      	ldr	r3, [r7, #4]
 8044194:	689b      	ldr	r3, [r3, #8]
 8044196:	3b01      	subs	r3, #1
 8044198:	025b      	lsls	r3, r3, #9
 804419a:	b29b      	uxth	r3, r3
 804419c:	431a      	orrs	r2, r3
 804419e:	687b      	ldr	r3, [r7, #4]
 80441a0:	68db      	ldr	r3, [r3, #12]
 80441a2:	3b01      	subs	r3, #1
 80441a4:	041b      	lsls	r3, r3, #16
 80441a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80441aa:	431a      	orrs	r2, r3
 80441ac:	687b      	ldr	r3, [r7, #4]
 80441ae:	691b      	ldr	r3, [r3, #16]
 80441b0:	3b01      	subs	r3, #1
 80441b2:	061b      	lsls	r3, r3, #24
 80441b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80441b8:	4931      	ldr	r1, [pc, #196]	; (8044280 <RCCEx_PLL2_Config+0x15c>)
 80441ba:	4313      	orrs	r3, r2
 80441bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80441be:	4b30      	ldr	r3, [pc, #192]	; (8044280 <RCCEx_PLL2_Config+0x15c>)
 80441c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80441c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80441c6:	687b      	ldr	r3, [r7, #4]
 80441c8:	695b      	ldr	r3, [r3, #20]
 80441ca:	492d      	ldr	r1, [pc, #180]	; (8044280 <RCCEx_PLL2_Config+0x15c>)
 80441cc:	4313      	orrs	r3, r2
 80441ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80441d0:	4b2b      	ldr	r3, [pc, #172]	; (8044280 <RCCEx_PLL2_Config+0x15c>)
 80441d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80441d4:	f023 0220 	bic.w	r2, r3, #32
 80441d8:	687b      	ldr	r3, [r7, #4]
 80441da:	699b      	ldr	r3, [r3, #24]
 80441dc:	4928      	ldr	r1, [pc, #160]	; (8044280 <RCCEx_PLL2_Config+0x15c>)
 80441de:	4313      	orrs	r3, r2
 80441e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80441e2:	4b27      	ldr	r3, [pc, #156]	; (8044280 <RCCEx_PLL2_Config+0x15c>)
 80441e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80441e6:	4a26      	ldr	r2, [pc, #152]	; (8044280 <RCCEx_PLL2_Config+0x15c>)
 80441e8:	f023 0310 	bic.w	r3, r3, #16
 80441ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80441ee:	4b24      	ldr	r3, [pc, #144]	; (8044280 <RCCEx_PLL2_Config+0x15c>)
 80441f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80441f2:	4b24      	ldr	r3, [pc, #144]	; (8044284 <RCCEx_PLL2_Config+0x160>)
 80441f4:	4013      	ands	r3, r2
 80441f6:	687a      	ldr	r2, [r7, #4]
 80441f8:	69d2      	ldr	r2, [r2, #28]
 80441fa:	00d2      	lsls	r2, r2, #3
 80441fc:	4920      	ldr	r1, [pc, #128]	; (8044280 <RCCEx_PLL2_Config+0x15c>)
 80441fe:	4313      	orrs	r3, r2
 8044200:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8044202:	4b1f      	ldr	r3, [pc, #124]	; (8044280 <RCCEx_PLL2_Config+0x15c>)
 8044204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044206:	4a1e      	ldr	r2, [pc, #120]	; (8044280 <RCCEx_PLL2_Config+0x15c>)
 8044208:	f043 0310 	orr.w	r3, r3, #16
 804420c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 804420e:	683b      	ldr	r3, [r7, #0]
 8044210:	2b00      	cmp	r3, #0
 8044212:	d106      	bne.n	8044222 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8044214:	4b1a      	ldr	r3, [pc, #104]	; (8044280 <RCCEx_PLL2_Config+0x15c>)
 8044216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044218:	4a19      	ldr	r2, [pc, #100]	; (8044280 <RCCEx_PLL2_Config+0x15c>)
 804421a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 804421e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8044220:	e00f      	b.n	8044242 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8044222:	683b      	ldr	r3, [r7, #0]
 8044224:	2b01      	cmp	r3, #1
 8044226:	d106      	bne.n	8044236 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8044228:	4b15      	ldr	r3, [pc, #84]	; (8044280 <RCCEx_PLL2_Config+0x15c>)
 804422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804422c:	4a14      	ldr	r2, [pc, #80]	; (8044280 <RCCEx_PLL2_Config+0x15c>)
 804422e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8044232:	62d3      	str	r3, [r2, #44]	; 0x2c
 8044234:	e005      	b.n	8044242 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8044236:	4b12      	ldr	r3, [pc, #72]	; (8044280 <RCCEx_PLL2_Config+0x15c>)
 8044238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804423a:	4a11      	ldr	r2, [pc, #68]	; (8044280 <RCCEx_PLL2_Config+0x15c>)
 804423c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8044240:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8044242:	4b0f      	ldr	r3, [pc, #60]	; (8044280 <RCCEx_PLL2_Config+0x15c>)
 8044244:	681b      	ldr	r3, [r3, #0]
 8044246:	4a0e      	ldr	r2, [pc, #56]	; (8044280 <RCCEx_PLL2_Config+0x15c>)
 8044248:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 804424c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 804424e:	f7fc fe85 	bl	8040f5c <HAL_GetTick>
 8044252:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8044254:	e008      	b.n	8044268 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8044256:	f7fc fe81 	bl	8040f5c <HAL_GetTick>
 804425a:	4602      	mov	r2, r0
 804425c:	68bb      	ldr	r3, [r7, #8]
 804425e:	1ad3      	subs	r3, r2, r3
 8044260:	2b02      	cmp	r3, #2
 8044262:	d901      	bls.n	8044268 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8044264:	2303      	movs	r3, #3
 8044266:	e006      	b.n	8044276 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8044268:	4b05      	ldr	r3, [pc, #20]	; (8044280 <RCCEx_PLL2_Config+0x15c>)
 804426a:	681b      	ldr	r3, [r3, #0]
 804426c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8044270:	2b00      	cmp	r3, #0
 8044272:	d0f0      	beq.n	8044256 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8044274:	7bfb      	ldrb	r3, [r7, #15]
}
 8044276:	4618      	mov	r0, r3
 8044278:	3710      	adds	r7, #16
 804427a:	46bd      	mov	sp, r7
 804427c:	bd80      	pop	{r7, pc}
 804427e:	bf00      	nop
 8044280:	58024400 	.word	0x58024400
 8044284:	ffff0007 	.word	0xffff0007

08044288 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8044288:	b580      	push	{r7, lr}
 804428a:	b084      	sub	sp, #16
 804428c:	af00      	add	r7, sp, #0
 804428e:	6078      	str	r0, [r7, #4]
 8044290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8044292:	2300      	movs	r3, #0
 8044294:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8044296:	4b53      	ldr	r3, [pc, #332]	; (80443e4 <RCCEx_PLL3_Config+0x15c>)
 8044298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804429a:	f003 0303 	and.w	r3, r3, #3
 804429e:	2b03      	cmp	r3, #3
 80442a0:	d101      	bne.n	80442a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80442a2:	2301      	movs	r3, #1
 80442a4:	e099      	b.n	80443da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80442a6:	4b4f      	ldr	r3, [pc, #316]	; (80443e4 <RCCEx_PLL3_Config+0x15c>)
 80442a8:	681b      	ldr	r3, [r3, #0]
 80442aa:	4a4e      	ldr	r2, [pc, #312]	; (80443e4 <RCCEx_PLL3_Config+0x15c>)
 80442ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80442b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80442b2:	f7fc fe53 	bl	8040f5c <HAL_GetTick>
 80442b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80442b8:	e008      	b.n	80442cc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80442ba:	f7fc fe4f 	bl	8040f5c <HAL_GetTick>
 80442be:	4602      	mov	r2, r0
 80442c0:	68bb      	ldr	r3, [r7, #8]
 80442c2:	1ad3      	subs	r3, r2, r3
 80442c4:	2b02      	cmp	r3, #2
 80442c6:	d901      	bls.n	80442cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80442c8:	2303      	movs	r3, #3
 80442ca:	e086      	b.n	80443da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80442cc:	4b45      	ldr	r3, [pc, #276]	; (80443e4 <RCCEx_PLL3_Config+0x15c>)
 80442ce:	681b      	ldr	r3, [r3, #0]
 80442d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80442d4:	2b00      	cmp	r3, #0
 80442d6:	d1f0      	bne.n	80442ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80442d8:	4b42      	ldr	r3, [pc, #264]	; (80443e4 <RCCEx_PLL3_Config+0x15c>)
 80442da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80442dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80442e0:	687b      	ldr	r3, [r7, #4]
 80442e2:	681b      	ldr	r3, [r3, #0]
 80442e4:	051b      	lsls	r3, r3, #20
 80442e6:	493f      	ldr	r1, [pc, #252]	; (80443e4 <RCCEx_PLL3_Config+0x15c>)
 80442e8:	4313      	orrs	r3, r2
 80442ea:	628b      	str	r3, [r1, #40]	; 0x28
 80442ec:	687b      	ldr	r3, [r7, #4]
 80442ee:	685b      	ldr	r3, [r3, #4]
 80442f0:	3b01      	subs	r3, #1
 80442f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80442f6:	687b      	ldr	r3, [r7, #4]
 80442f8:	689b      	ldr	r3, [r3, #8]
 80442fa:	3b01      	subs	r3, #1
 80442fc:	025b      	lsls	r3, r3, #9
 80442fe:	b29b      	uxth	r3, r3
 8044300:	431a      	orrs	r2, r3
 8044302:	687b      	ldr	r3, [r7, #4]
 8044304:	68db      	ldr	r3, [r3, #12]
 8044306:	3b01      	subs	r3, #1
 8044308:	041b      	lsls	r3, r3, #16
 804430a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 804430e:	431a      	orrs	r2, r3
 8044310:	687b      	ldr	r3, [r7, #4]
 8044312:	691b      	ldr	r3, [r3, #16]
 8044314:	3b01      	subs	r3, #1
 8044316:	061b      	lsls	r3, r3, #24
 8044318:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 804431c:	4931      	ldr	r1, [pc, #196]	; (80443e4 <RCCEx_PLL3_Config+0x15c>)
 804431e:	4313      	orrs	r3, r2
 8044320:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8044322:	4b30      	ldr	r3, [pc, #192]	; (80443e4 <RCCEx_PLL3_Config+0x15c>)
 8044324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044326:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 804432a:	687b      	ldr	r3, [r7, #4]
 804432c:	695b      	ldr	r3, [r3, #20]
 804432e:	492d      	ldr	r1, [pc, #180]	; (80443e4 <RCCEx_PLL3_Config+0x15c>)
 8044330:	4313      	orrs	r3, r2
 8044332:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8044334:	4b2b      	ldr	r3, [pc, #172]	; (80443e4 <RCCEx_PLL3_Config+0x15c>)
 8044336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044338:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 804433c:	687b      	ldr	r3, [r7, #4]
 804433e:	699b      	ldr	r3, [r3, #24]
 8044340:	4928      	ldr	r1, [pc, #160]	; (80443e4 <RCCEx_PLL3_Config+0x15c>)
 8044342:	4313      	orrs	r3, r2
 8044344:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8044346:	4b27      	ldr	r3, [pc, #156]	; (80443e4 <RCCEx_PLL3_Config+0x15c>)
 8044348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804434a:	4a26      	ldr	r2, [pc, #152]	; (80443e4 <RCCEx_PLL3_Config+0x15c>)
 804434c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8044350:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8044352:	4b24      	ldr	r3, [pc, #144]	; (80443e4 <RCCEx_PLL3_Config+0x15c>)
 8044354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8044356:	4b24      	ldr	r3, [pc, #144]	; (80443e8 <RCCEx_PLL3_Config+0x160>)
 8044358:	4013      	ands	r3, r2
 804435a:	687a      	ldr	r2, [r7, #4]
 804435c:	69d2      	ldr	r2, [r2, #28]
 804435e:	00d2      	lsls	r2, r2, #3
 8044360:	4920      	ldr	r1, [pc, #128]	; (80443e4 <RCCEx_PLL3_Config+0x15c>)
 8044362:	4313      	orrs	r3, r2
 8044364:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8044366:	4b1f      	ldr	r3, [pc, #124]	; (80443e4 <RCCEx_PLL3_Config+0x15c>)
 8044368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804436a:	4a1e      	ldr	r2, [pc, #120]	; (80443e4 <RCCEx_PLL3_Config+0x15c>)
 804436c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8044370:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8044372:	683b      	ldr	r3, [r7, #0]
 8044374:	2b00      	cmp	r3, #0
 8044376:	d106      	bne.n	8044386 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8044378:	4b1a      	ldr	r3, [pc, #104]	; (80443e4 <RCCEx_PLL3_Config+0x15c>)
 804437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804437c:	4a19      	ldr	r2, [pc, #100]	; (80443e4 <RCCEx_PLL3_Config+0x15c>)
 804437e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8044382:	62d3      	str	r3, [r2, #44]	; 0x2c
 8044384:	e00f      	b.n	80443a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8044386:	683b      	ldr	r3, [r7, #0]
 8044388:	2b01      	cmp	r3, #1
 804438a:	d106      	bne.n	804439a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 804438c:	4b15      	ldr	r3, [pc, #84]	; (80443e4 <RCCEx_PLL3_Config+0x15c>)
 804438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8044390:	4a14      	ldr	r2, [pc, #80]	; (80443e4 <RCCEx_PLL3_Config+0x15c>)
 8044392:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8044396:	62d3      	str	r3, [r2, #44]	; 0x2c
 8044398:	e005      	b.n	80443a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 804439a:	4b12      	ldr	r3, [pc, #72]	; (80443e4 <RCCEx_PLL3_Config+0x15c>)
 804439c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804439e:	4a11      	ldr	r2, [pc, #68]	; (80443e4 <RCCEx_PLL3_Config+0x15c>)
 80443a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80443a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80443a6:	4b0f      	ldr	r3, [pc, #60]	; (80443e4 <RCCEx_PLL3_Config+0x15c>)
 80443a8:	681b      	ldr	r3, [r3, #0]
 80443aa:	4a0e      	ldr	r2, [pc, #56]	; (80443e4 <RCCEx_PLL3_Config+0x15c>)
 80443ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80443b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80443b2:	f7fc fdd3 	bl	8040f5c <HAL_GetTick>
 80443b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80443b8:	e008      	b.n	80443cc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80443ba:	f7fc fdcf 	bl	8040f5c <HAL_GetTick>
 80443be:	4602      	mov	r2, r0
 80443c0:	68bb      	ldr	r3, [r7, #8]
 80443c2:	1ad3      	subs	r3, r2, r3
 80443c4:	2b02      	cmp	r3, #2
 80443c6:	d901      	bls.n	80443cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80443c8:	2303      	movs	r3, #3
 80443ca:	e006      	b.n	80443da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80443cc:	4b05      	ldr	r3, [pc, #20]	; (80443e4 <RCCEx_PLL3_Config+0x15c>)
 80443ce:	681b      	ldr	r3, [r3, #0]
 80443d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80443d4:	2b00      	cmp	r3, #0
 80443d6:	d0f0      	beq.n	80443ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80443d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80443da:	4618      	mov	r0, r3
 80443dc:	3710      	adds	r7, #16
 80443de:	46bd      	mov	sp, r7
 80443e0:	bd80      	pop	{r7, pc}
 80443e2:	bf00      	nop
 80443e4:	58024400 	.word	0x58024400
 80443e8:	ffff0007 	.word	0xffff0007

080443ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80443ec:	b580      	push	{r7, lr}
 80443ee:	b082      	sub	sp, #8
 80443f0:	af00      	add	r7, sp, #0
 80443f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80443f4:	687b      	ldr	r3, [r7, #4]
 80443f6:	2b00      	cmp	r3, #0
 80443f8:	d101      	bne.n	80443fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80443fa:	2301      	movs	r3, #1
 80443fc:	e042      	b.n	8044484 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80443fe:	687b      	ldr	r3, [r7, #4]
 8044400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8044404:	2b00      	cmp	r3, #0
 8044406:	d106      	bne.n	8044416 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8044408:	687b      	ldr	r3, [r7, #4]
 804440a:	2200      	movs	r2, #0
 804440c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8044410:	6878      	ldr	r0, [r7, #4]
 8044412:	f7fc fbbb 	bl	8040b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8044416:	687b      	ldr	r3, [r7, #4]
 8044418:	2224      	movs	r2, #36	; 0x24
 804441a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 804441e:	687b      	ldr	r3, [r7, #4]
 8044420:	681b      	ldr	r3, [r3, #0]
 8044422:	681a      	ldr	r2, [r3, #0]
 8044424:	687b      	ldr	r3, [r7, #4]
 8044426:	681b      	ldr	r3, [r3, #0]
 8044428:	f022 0201 	bic.w	r2, r2, #1
 804442c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 804442e:	6878      	ldr	r0, [r7, #4]
 8044430:	f000 f8ba 	bl	80445a8 <UART_SetConfig>
 8044434:	4603      	mov	r3, r0
 8044436:	2b01      	cmp	r3, #1
 8044438:	d101      	bne.n	804443e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 804443a:	2301      	movs	r3, #1
 804443c:	e022      	b.n	8044484 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 804443e:	687b      	ldr	r3, [r7, #4]
 8044440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8044442:	2b00      	cmp	r3, #0
 8044444:	d002      	beq.n	804444c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8044446:	6878      	ldr	r0, [r7, #4]
 8044448:	f000 fe16 	bl	8045078 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 804444c:	687b      	ldr	r3, [r7, #4]
 804444e:	681b      	ldr	r3, [r3, #0]
 8044450:	685a      	ldr	r2, [r3, #4]
 8044452:	687b      	ldr	r3, [r7, #4]
 8044454:	681b      	ldr	r3, [r3, #0]
 8044456:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 804445a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 804445c:	687b      	ldr	r3, [r7, #4]
 804445e:	681b      	ldr	r3, [r3, #0]
 8044460:	689a      	ldr	r2, [r3, #8]
 8044462:	687b      	ldr	r3, [r7, #4]
 8044464:	681b      	ldr	r3, [r3, #0]
 8044466:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 804446a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 804446c:	687b      	ldr	r3, [r7, #4]
 804446e:	681b      	ldr	r3, [r3, #0]
 8044470:	681a      	ldr	r2, [r3, #0]
 8044472:	687b      	ldr	r3, [r7, #4]
 8044474:	681b      	ldr	r3, [r3, #0]
 8044476:	f042 0201 	orr.w	r2, r2, #1
 804447a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 804447c:	6878      	ldr	r0, [r7, #4]
 804447e:	f000 fe9d 	bl	80451bc <UART_CheckIdleState>
 8044482:	4603      	mov	r3, r0
}
 8044484:	4618      	mov	r0, r3
 8044486:	3708      	adds	r7, #8
 8044488:	46bd      	mov	sp, r7
 804448a:	bd80      	pop	{r7, pc}

0804448c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 804448c:	b580      	push	{r7, lr}
 804448e:	b08a      	sub	sp, #40	; 0x28
 8044490:	af02      	add	r7, sp, #8
 8044492:	60f8      	str	r0, [r7, #12]
 8044494:	60b9      	str	r1, [r7, #8]
 8044496:	603b      	str	r3, [r7, #0]
 8044498:	4613      	mov	r3, r2
 804449a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 804449c:	68fb      	ldr	r3, [r7, #12]
 804449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80444a2:	2b20      	cmp	r3, #32
 80444a4:	d17b      	bne.n	804459e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80444a6:	68bb      	ldr	r3, [r7, #8]
 80444a8:	2b00      	cmp	r3, #0
 80444aa:	d002      	beq.n	80444b2 <HAL_UART_Transmit+0x26>
 80444ac:	88fb      	ldrh	r3, [r7, #6]
 80444ae:	2b00      	cmp	r3, #0
 80444b0:	d101      	bne.n	80444b6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80444b2:	2301      	movs	r3, #1
 80444b4:	e074      	b.n	80445a0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80444b6:	68fb      	ldr	r3, [r7, #12]
 80444b8:	2200      	movs	r2, #0
 80444ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80444be:	68fb      	ldr	r3, [r7, #12]
 80444c0:	2221      	movs	r2, #33	; 0x21
 80444c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80444c6:	f7fc fd49 	bl	8040f5c <HAL_GetTick>
 80444ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80444cc:	68fb      	ldr	r3, [r7, #12]
 80444ce:	88fa      	ldrh	r2, [r7, #6]
 80444d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80444d4:	68fb      	ldr	r3, [r7, #12]
 80444d6:	88fa      	ldrh	r2, [r7, #6]
 80444d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80444dc:	68fb      	ldr	r3, [r7, #12]
 80444de:	689b      	ldr	r3, [r3, #8]
 80444e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80444e4:	d108      	bne.n	80444f8 <HAL_UART_Transmit+0x6c>
 80444e6:	68fb      	ldr	r3, [r7, #12]
 80444e8:	691b      	ldr	r3, [r3, #16]
 80444ea:	2b00      	cmp	r3, #0
 80444ec:	d104      	bne.n	80444f8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80444ee:	2300      	movs	r3, #0
 80444f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80444f2:	68bb      	ldr	r3, [r7, #8]
 80444f4:	61bb      	str	r3, [r7, #24]
 80444f6:	e003      	b.n	8044500 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80444f8:	68bb      	ldr	r3, [r7, #8]
 80444fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80444fc:	2300      	movs	r3, #0
 80444fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8044500:	e030      	b.n	8044564 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8044502:	683b      	ldr	r3, [r7, #0]
 8044504:	9300      	str	r3, [sp, #0]
 8044506:	697b      	ldr	r3, [r7, #20]
 8044508:	2200      	movs	r2, #0
 804450a:	2180      	movs	r1, #128	; 0x80
 804450c:	68f8      	ldr	r0, [r7, #12]
 804450e:	f000 feff 	bl	8045310 <UART_WaitOnFlagUntilTimeout>
 8044512:	4603      	mov	r3, r0
 8044514:	2b00      	cmp	r3, #0
 8044516:	d005      	beq.n	8044524 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8044518:	68fb      	ldr	r3, [r7, #12]
 804451a:	2220      	movs	r2, #32
 804451c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8044520:	2303      	movs	r3, #3
 8044522:	e03d      	b.n	80445a0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8044524:	69fb      	ldr	r3, [r7, #28]
 8044526:	2b00      	cmp	r3, #0
 8044528:	d10b      	bne.n	8044542 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 804452a:	69bb      	ldr	r3, [r7, #24]
 804452c:	881b      	ldrh	r3, [r3, #0]
 804452e:	461a      	mov	r2, r3
 8044530:	68fb      	ldr	r3, [r7, #12]
 8044532:	681b      	ldr	r3, [r3, #0]
 8044534:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8044538:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 804453a:	69bb      	ldr	r3, [r7, #24]
 804453c:	3302      	adds	r3, #2
 804453e:	61bb      	str	r3, [r7, #24]
 8044540:	e007      	b.n	8044552 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8044542:	69fb      	ldr	r3, [r7, #28]
 8044544:	781a      	ldrb	r2, [r3, #0]
 8044546:	68fb      	ldr	r3, [r7, #12]
 8044548:	681b      	ldr	r3, [r3, #0]
 804454a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 804454c:	69fb      	ldr	r3, [r7, #28]
 804454e:	3301      	adds	r3, #1
 8044550:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8044552:	68fb      	ldr	r3, [r7, #12]
 8044554:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8044558:	b29b      	uxth	r3, r3
 804455a:	3b01      	subs	r3, #1
 804455c:	b29a      	uxth	r2, r3
 804455e:	68fb      	ldr	r3, [r7, #12]
 8044560:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8044564:	68fb      	ldr	r3, [r7, #12]
 8044566:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 804456a:	b29b      	uxth	r3, r3
 804456c:	2b00      	cmp	r3, #0
 804456e:	d1c8      	bne.n	8044502 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8044570:	683b      	ldr	r3, [r7, #0]
 8044572:	9300      	str	r3, [sp, #0]
 8044574:	697b      	ldr	r3, [r7, #20]
 8044576:	2200      	movs	r2, #0
 8044578:	2140      	movs	r1, #64	; 0x40
 804457a:	68f8      	ldr	r0, [r7, #12]
 804457c:	f000 fec8 	bl	8045310 <UART_WaitOnFlagUntilTimeout>
 8044580:	4603      	mov	r3, r0
 8044582:	2b00      	cmp	r3, #0
 8044584:	d005      	beq.n	8044592 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8044586:	68fb      	ldr	r3, [r7, #12]
 8044588:	2220      	movs	r2, #32
 804458a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 804458e:	2303      	movs	r3, #3
 8044590:	e006      	b.n	80445a0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8044592:	68fb      	ldr	r3, [r7, #12]
 8044594:	2220      	movs	r2, #32
 8044596:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 804459a:	2300      	movs	r3, #0
 804459c:	e000      	b.n	80445a0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 804459e:	2302      	movs	r3, #2
  }
}
 80445a0:	4618      	mov	r0, r3
 80445a2:	3720      	adds	r7, #32
 80445a4:	46bd      	mov	sp, r7
 80445a6:	bd80      	pop	{r7, pc}

080445a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80445a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80445ac:	b092      	sub	sp, #72	; 0x48
 80445ae:	af00      	add	r7, sp, #0
 80445b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80445b2:	2300      	movs	r3, #0
 80445b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80445b8:	697b      	ldr	r3, [r7, #20]
 80445ba:	689a      	ldr	r2, [r3, #8]
 80445bc:	697b      	ldr	r3, [r7, #20]
 80445be:	691b      	ldr	r3, [r3, #16]
 80445c0:	431a      	orrs	r2, r3
 80445c2:	697b      	ldr	r3, [r7, #20]
 80445c4:	695b      	ldr	r3, [r3, #20]
 80445c6:	431a      	orrs	r2, r3
 80445c8:	697b      	ldr	r3, [r7, #20]
 80445ca:	69db      	ldr	r3, [r3, #28]
 80445cc:	4313      	orrs	r3, r2
 80445ce:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80445d0:	697b      	ldr	r3, [r7, #20]
 80445d2:	681b      	ldr	r3, [r3, #0]
 80445d4:	681a      	ldr	r2, [r3, #0]
 80445d6:	4bbe      	ldr	r3, [pc, #760]	; (80448d0 <UART_SetConfig+0x328>)
 80445d8:	4013      	ands	r3, r2
 80445da:	697a      	ldr	r2, [r7, #20]
 80445dc:	6812      	ldr	r2, [r2, #0]
 80445de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80445e0:	430b      	orrs	r3, r1
 80445e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80445e4:	697b      	ldr	r3, [r7, #20]
 80445e6:	681b      	ldr	r3, [r3, #0]
 80445e8:	685b      	ldr	r3, [r3, #4]
 80445ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80445ee:	697b      	ldr	r3, [r7, #20]
 80445f0:	68da      	ldr	r2, [r3, #12]
 80445f2:	697b      	ldr	r3, [r7, #20]
 80445f4:	681b      	ldr	r3, [r3, #0]
 80445f6:	430a      	orrs	r2, r1
 80445f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80445fa:	697b      	ldr	r3, [r7, #20]
 80445fc:	699b      	ldr	r3, [r3, #24]
 80445fe:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8044600:	697b      	ldr	r3, [r7, #20]
 8044602:	681b      	ldr	r3, [r3, #0]
 8044604:	4ab3      	ldr	r2, [pc, #716]	; (80448d4 <UART_SetConfig+0x32c>)
 8044606:	4293      	cmp	r3, r2
 8044608:	d004      	beq.n	8044614 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 804460a:	697b      	ldr	r3, [r7, #20]
 804460c:	6a1b      	ldr	r3, [r3, #32]
 804460e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8044610:	4313      	orrs	r3, r2
 8044612:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8044614:	697b      	ldr	r3, [r7, #20]
 8044616:	681b      	ldr	r3, [r3, #0]
 8044618:	689a      	ldr	r2, [r3, #8]
 804461a:	4baf      	ldr	r3, [pc, #700]	; (80448d8 <UART_SetConfig+0x330>)
 804461c:	4013      	ands	r3, r2
 804461e:	697a      	ldr	r2, [r7, #20]
 8044620:	6812      	ldr	r2, [r2, #0]
 8044622:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8044624:	430b      	orrs	r3, r1
 8044626:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8044628:	697b      	ldr	r3, [r7, #20]
 804462a:	681b      	ldr	r3, [r3, #0]
 804462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 804462e:	f023 010f 	bic.w	r1, r3, #15
 8044632:	697b      	ldr	r3, [r7, #20]
 8044634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8044636:	697b      	ldr	r3, [r7, #20]
 8044638:	681b      	ldr	r3, [r3, #0]
 804463a:	430a      	orrs	r2, r1
 804463c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 804463e:	697b      	ldr	r3, [r7, #20]
 8044640:	681b      	ldr	r3, [r3, #0]
 8044642:	4aa6      	ldr	r2, [pc, #664]	; (80448dc <UART_SetConfig+0x334>)
 8044644:	4293      	cmp	r3, r2
 8044646:	d177      	bne.n	8044738 <UART_SetConfig+0x190>
 8044648:	4ba5      	ldr	r3, [pc, #660]	; (80448e0 <UART_SetConfig+0x338>)
 804464a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804464c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8044650:	2b28      	cmp	r3, #40	; 0x28
 8044652:	d86d      	bhi.n	8044730 <UART_SetConfig+0x188>
 8044654:	a201      	add	r2, pc, #4	; (adr r2, 804465c <UART_SetConfig+0xb4>)
 8044656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804465a:	bf00      	nop
 804465c:	08044701 	.word	0x08044701
 8044660:	08044731 	.word	0x08044731
 8044664:	08044731 	.word	0x08044731
 8044668:	08044731 	.word	0x08044731
 804466c:	08044731 	.word	0x08044731
 8044670:	08044731 	.word	0x08044731
 8044674:	08044731 	.word	0x08044731
 8044678:	08044731 	.word	0x08044731
 804467c:	08044709 	.word	0x08044709
 8044680:	08044731 	.word	0x08044731
 8044684:	08044731 	.word	0x08044731
 8044688:	08044731 	.word	0x08044731
 804468c:	08044731 	.word	0x08044731
 8044690:	08044731 	.word	0x08044731
 8044694:	08044731 	.word	0x08044731
 8044698:	08044731 	.word	0x08044731
 804469c:	08044711 	.word	0x08044711
 80446a0:	08044731 	.word	0x08044731
 80446a4:	08044731 	.word	0x08044731
 80446a8:	08044731 	.word	0x08044731
 80446ac:	08044731 	.word	0x08044731
 80446b0:	08044731 	.word	0x08044731
 80446b4:	08044731 	.word	0x08044731
 80446b8:	08044731 	.word	0x08044731
 80446bc:	08044719 	.word	0x08044719
 80446c0:	08044731 	.word	0x08044731
 80446c4:	08044731 	.word	0x08044731
 80446c8:	08044731 	.word	0x08044731
 80446cc:	08044731 	.word	0x08044731
 80446d0:	08044731 	.word	0x08044731
 80446d4:	08044731 	.word	0x08044731
 80446d8:	08044731 	.word	0x08044731
 80446dc:	08044721 	.word	0x08044721
 80446e0:	08044731 	.word	0x08044731
 80446e4:	08044731 	.word	0x08044731
 80446e8:	08044731 	.word	0x08044731
 80446ec:	08044731 	.word	0x08044731
 80446f0:	08044731 	.word	0x08044731
 80446f4:	08044731 	.word	0x08044731
 80446f8:	08044731 	.word	0x08044731
 80446fc:	08044729 	.word	0x08044729
 8044700:	2301      	movs	r3, #1
 8044702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044706:	e222      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044708:	2304      	movs	r3, #4
 804470a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804470e:	e21e      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044710:	2308      	movs	r3, #8
 8044712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044716:	e21a      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044718:	2310      	movs	r3, #16
 804471a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804471e:	e216      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044720:	2320      	movs	r3, #32
 8044722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044726:	e212      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044728:	2340      	movs	r3, #64	; 0x40
 804472a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804472e:	e20e      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044730:	2380      	movs	r3, #128	; 0x80
 8044732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044736:	e20a      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044738:	697b      	ldr	r3, [r7, #20]
 804473a:	681b      	ldr	r3, [r3, #0]
 804473c:	4a69      	ldr	r2, [pc, #420]	; (80448e4 <UART_SetConfig+0x33c>)
 804473e:	4293      	cmp	r3, r2
 8044740:	d130      	bne.n	80447a4 <UART_SetConfig+0x1fc>
 8044742:	4b67      	ldr	r3, [pc, #412]	; (80448e0 <UART_SetConfig+0x338>)
 8044744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8044746:	f003 0307 	and.w	r3, r3, #7
 804474a:	2b05      	cmp	r3, #5
 804474c:	d826      	bhi.n	804479c <UART_SetConfig+0x1f4>
 804474e:	a201      	add	r2, pc, #4	; (adr r2, 8044754 <UART_SetConfig+0x1ac>)
 8044750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044754:	0804476d 	.word	0x0804476d
 8044758:	08044775 	.word	0x08044775
 804475c:	0804477d 	.word	0x0804477d
 8044760:	08044785 	.word	0x08044785
 8044764:	0804478d 	.word	0x0804478d
 8044768:	08044795 	.word	0x08044795
 804476c:	2300      	movs	r3, #0
 804476e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044772:	e1ec      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044774:	2304      	movs	r3, #4
 8044776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804477a:	e1e8      	b.n	8044b4e <UART_SetConfig+0x5a6>
 804477c:	2308      	movs	r3, #8
 804477e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044782:	e1e4      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044784:	2310      	movs	r3, #16
 8044786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804478a:	e1e0      	b.n	8044b4e <UART_SetConfig+0x5a6>
 804478c:	2320      	movs	r3, #32
 804478e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044792:	e1dc      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044794:	2340      	movs	r3, #64	; 0x40
 8044796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804479a:	e1d8      	b.n	8044b4e <UART_SetConfig+0x5a6>
 804479c:	2380      	movs	r3, #128	; 0x80
 804479e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80447a2:	e1d4      	b.n	8044b4e <UART_SetConfig+0x5a6>
 80447a4:	697b      	ldr	r3, [r7, #20]
 80447a6:	681b      	ldr	r3, [r3, #0]
 80447a8:	4a4f      	ldr	r2, [pc, #316]	; (80448e8 <UART_SetConfig+0x340>)
 80447aa:	4293      	cmp	r3, r2
 80447ac:	d130      	bne.n	8044810 <UART_SetConfig+0x268>
 80447ae:	4b4c      	ldr	r3, [pc, #304]	; (80448e0 <UART_SetConfig+0x338>)
 80447b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80447b2:	f003 0307 	and.w	r3, r3, #7
 80447b6:	2b05      	cmp	r3, #5
 80447b8:	d826      	bhi.n	8044808 <UART_SetConfig+0x260>
 80447ba:	a201      	add	r2, pc, #4	; (adr r2, 80447c0 <UART_SetConfig+0x218>)
 80447bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80447c0:	080447d9 	.word	0x080447d9
 80447c4:	080447e1 	.word	0x080447e1
 80447c8:	080447e9 	.word	0x080447e9
 80447cc:	080447f1 	.word	0x080447f1
 80447d0:	080447f9 	.word	0x080447f9
 80447d4:	08044801 	.word	0x08044801
 80447d8:	2300      	movs	r3, #0
 80447da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80447de:	e1b6      	b.n	8044b4e <UART_SetConfig+0x5a6>
 80447e0:	2304      	movs	r3, #4
 80447e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80447e6:	e1b2      	b.n	8044b4e <UART_SetConfig+0x5a6>
 80447e8:	2308      	movs	r3, #8
 80447ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80447ee:	e1ae      	b.n	8044b4e <UART_SetConfig+0x5a6>
 80447f0:	2310      	movs	r3, #16
 80447f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80447f6:	e1aa      	b.n	8044b4e <UART_SetConfig+0x5a6>
 80447f8:	2320      	movs	r3, #32
 80447fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80447fe:	e1a6      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044800:	2340      	movs	r3, #64	; 0x40
 8044802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044806:	e1a2      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044808:	2380      	movs	r3, #128	; 0x80
 804480a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804480e:	e19e      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044810:	697b      	ldr	r3, [r7, #20]
 8044812:	681b      	ldr	r3, [r3, #0]
 8044814:	4a35      	ldr	r2, [pc, #212]	; (80448ec <UART_SetConfig+0x344>)
 8044816:	4293      	cmp	r3, r2
 8044818:	d130      	bne.n	804487c <UART_SetConfig+0x2d4>
 804481a:	4b31      	ldr	r3, [pc, #196]	; (80448e0 <UART_SetConfig+0x338>)
 804481c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804481e:	f003 0307 	and.w	r3, r3, #7
 8044822:	2b05      	cmp	r3, #5
 8044824:	d826      	bhi.n	8044874 <UART_SetConfig+0x2cc>
 8044826:	a201      	add	r2, pc, #4	; (adr r2, 804482c <UART_SetConfig+0x284>)
 8044828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804482c:	08044845 	.word	0x08044845
 8044830:	0804484d 	.word	0x0804484d
 8044834:	08044855 	.word	0x08044855
 8044838:	0804485d 	.word	0x0804485d
 804483c:	08044865 	.word	0x08044865
 8044840:	0804486d 	.word	0x0804486d
 8044844:	2300      	movs	r3, #0
 8044846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804484a:	e180      	b.n	8044b4e <UART_SetConfig+0x5a6>
 804484c:	2304      	movs	r3, #4
 804484e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044852:	e17c      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044854:	2308      	movs	r3, #8
 8044856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804485a:	e178      	b.n	8044b4e <UART_SetConfig+0x5a6>
 804485c:	2310      	movs	r3, #16
 804485e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044862:	e174      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044864:	2320      	movs	r3, #32
 8044866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804486a:	e170      	b.n	8044b4e <UART_SetConfig+0x5a6>
 804486c:	2340      	movs	r3, #64	; 0x40
 804486e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044872:	e16c      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044874:	2380      	movs	r3, #128	; 0x80
 8044876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804487a:	e168      	b.n	8044b4e <UART_SetConfig+0x5a6>
 804487c:	697b      	ldr	r3, [r7, #20]
 804487e:	681b      	ldr	r3, [r3, #0]
 8044880:	4a1b      	ldr	r2, [pc, #108]	; (80448f0 <UART_SetConfig+0x348>)
 8044882:	4293      	cmp	r3, r2
 8044884:	d142      	bne.n	804490c <UART_SetConfig+0x364>
 8044886:	4b16      	ldr	r3, [pc, #88]	; (80448e0 <UART_SetConfig+0x338>)
 8044888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804488a:	f003 0307 	and.w	r3, r3, #7
 804488e:	2b05      	cmp	r3, #5
 8044890:	d838      	bhi.n	8044904 <UART_SetConfig+0x35c>
 8044892:	a201      	add	r2, pc, #4	; (adr r2, 8044898 <UART_SetConfig+0x2f0>)
 8044894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044898:	080448b1 	.word	0x080448b1
 804489c:	080448b9 	.word	0x080448b9
 80448a0:	080448c1 	.word	0x080448c1
 80448a4:	080448c9 	.word	0x080448c9
 80448a8:	080448f5 	.word	0x080448f5
 80448ac:	080448fd 	.word	0x080448fd
 80448b0:	2300      	movs	r3, #0
 80448b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80448b6:	e14a      	b.n	8044b4e <UART_SetConfig+0x5a6>
 80448b8:	2304      	movs	r3, #4
 80448ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80448be:	e146      	b.n	8044b4e <UART_SetConfig+0x5a6>
 80448c0:	2308      	movs	r3, #8
 80448c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80448c6:	e142      	b.n	8044b4e <UART_SetConfig+0x5a6>
 80448c8:	2310      	movs	r3, #16
 80448ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80448ce:	e13e      	b.n	8044b4e <UART_SetConfig+0x5a6>
 80448d0:	cfff69f3 	.word	0xcfff69f3
 80448d4:	58000c00 	.word	0x58000c00
 80448d8:	11fff4ff 	.word	0x11fff4ff
 80448dc:	40011000 	.word	0x40011000
 80448e0:	58024400 	.word	0x58024400
 80448e4:	40004400 	.word	0x40004400
 80448e8:	40004800 	.word	0x40004800
 80448ec:	40004c00 	.word	0x40004c00
 80448f0:	40005000 	.word	0x40005000
 80448f4:	2320      	movs	r3, #32
 80448f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80448fa:	e128      	b.n	8044b4e <UART_SetConfig+0x5a6>
 80448fc:	2340      	movs	r3, #64	; 0x40
 80448fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044902:	e124      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044904:	2380      	movs	r3, #128	; 0x80
 8044906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 804490a:	e120      	b.n	8044b4e <UART_SetConfig+0x5a6>
 804490c:	697b      	ldr	r3, [r7, #20]
 804490e:	681b      	ldr	r3, [r3, #0]
 8044910:	4acb      	ldr	r2, [pc, #812]	; (8044c40 <UART_SetConfig+0x698>)
 8044912:	4293      	cmp	r3, r2
 8044914:	d176      	bne.n	8044a04 <UART_SetConfig+0x45c>
 8044916:	4bcb      	ldr	r3, [pc, #812]	; (8044c44 <UART_SetConfig+0x69c>)
 8044918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804491a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 804491e:	2b28      	cmp	r3, #40	; 0x28
 8044920:	d86c      	bhi.n	80449fc <UART_SetConfig+0x454>
 8044922:	a201      	add	r2, pc, #4	; (adr r2, 8044928 <UART_SetConfig+0x380>)
 8044924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044928:	080449cd 	.word	0x080449cd
 804492c:	080449fd 	.word	0x080449fd
 8044930:	080449fd 	.word	0x080449fd
 8044934:	080449fd 	.word	0x080449fd
 8044938:	080449fd 	.word	0x080449fd
 804493c:	080449fd 	.word	0x080449fd
 8044940:	080449fd 	.word	0x080449fd
 8044944:	080449fd 	.word	0x080449fd
 8044948:	080449d5 	.word	0x080449d5
 804494c:	080449fd 	.word	0x080449fd
 8044950:	080449fd 	.word	0x080449fd
 8044954:	080449fd 	.word	0x080449fd
 8044958:	080449fd 	.word	0x080449fd
 804495c:	080449fd 	.word	0x080449fd
 8044960:	080449fd 	.word	0x080449fd
 8044964:	080449fd 	.word	0x080449fd
 8044968:	080449dd 	.word	0x080449dd
 804496c:	080449fd 	.word	0x080449fd
 8044970:	080449fd 	.word	0x080449fd
 8044974:	080449fd 	.word	0x080449fd
 8044978:	080449fd 	.word	0x080449fd
 804497c:	080449fd 	.word	0x080449fd
 8044980:	080449fd 	.word	0x080449fd
 8044984:	080449fd 	.word	0x080449fd
 8044988:	080449e5 	.word	0x080449e5
 804498c:	080449fd 	.word	0x080449fd
 8044990:	080449fd 	.word	0x080449fd
 8044994:	080449fd 	.word	0x080449fd
 8044998:	080449fd 	.word	0x080449fd
 804499c:	080449fd 	.word	0x080449fd
 80449a0:	080449fd 	.word	0x080449fd
 80449a4:	080449fd 	.word	0x080449fd
 80449a8:	080449ed 	.word	0x080449ed
 80449ac:	080449fd 	.word	0x080449fd
 80449b0:	080449fd 	.word	0x080449fd
 80449b4:	080449fd 	.word	0x080449fd
 80449b8:	080449fd 	.word	0x080449fd
 80449bc:	080449fd 	.word	0x080449fd
 80449c0:	080449fd 	.word	0x080449fd
 80449c4:	080449fd 	.word	0x080449fd
 80449c8:	080449f5 	.word	0x080449f5
 80449cc:	2301      	movs	r3, #1
 80449ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80449d2:	e0bc      	b.n	8044b4e <UART_SetConfig+0x5a6>
 80449d4:	2304      	movs	r3, #4
 80449d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80449da:	e0b8      	b.n	8044b4e <UART_SetConfig+0x5a6>
 80449dc:	2308      	movs	r3, #8
 80449de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80449e2:	e0b4      	b.n	8044b4e <UART_SetConfig+0x5a6>
 80449e4:	2310      	movs	r3, #16
 80449e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80449ea:	e0b0      	b.n	8044b4e <UART_SetConfig+0x5a6>
 80449ec:	2320      	movs	r3, #32
 80449ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80449f2:	e0ac      	b.n	8044b4e <UART_SetConfig+0x5a6>
 80449f4:	2340      	movs	r3, #64	; 0x40
 80449f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80449fa:	e0a8      	b.n	8044b4e <UART_SetConfig+0x5a6>
 80449fc:	2380      	movs	r3, #128	; 0x80
 80449fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044a02:	e0a4      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044a04:	697b      	ldr	r3, [r7, #20]
 8044a06:	681b      	ldr	r3, [r3, #0]
 8044a08:	4a8f      	ldr	r2, [pc, #572]	; (8044c48 <UART_SetConfig+0x6a0>)
 8044a0a:	4293      	cmp	r3, r2
 8044a0c:	d130      	bne.n	8044a70 <UART_SetConfig+0x4c8>
 8044a0e:	4b8d      	ldr	r3, [pc, #564]	; (8044c44 <UART_SetConfig+0x69c>)
 8044a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8044a12:	f003 0307 	and.w	r3, r3, #7
 8044a16:	2b05      	cmp	r3, #5
 8044a18:	d826      	bhi.n	8044a68 <UART_SetConfig+0x4c0>
 8044a1a:	a201      	add	r2, pc, #4	; (adr r2, 8044a20 <UART_SetConfig+0x478>)
 8044a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044a20:	08044a39 	.word	0x08044a39
 8044a24:	08044a41 	.word	0x08044a41
 8044a28:	08044a49 	.word	0x08044a49
 8044a2c:	08044a51 	.word	0x08044a51
 8044a30:	08044a59 	.word	0x08044a59
 8044a34:	08044a61 	.word	0x08044a61
 8044a38:	2300      	movs	r3, #0
 8044a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044a3e:	e086      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044a40:	2304      	movs	r3, #4
 8044a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044a46:	e082      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044a48:	2308      	movs	r3, #8
 8044a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044a4e:	e07e      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044a50:	2310      	movs	r3, #16
 8044a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044a56:	e07a      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044a58:	2320      	movs	r3, #32
 8044a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044a5e:	e076      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044a60:	2340      	movs	r3, #64	; 0x40
 8044a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044a66:	e072      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044a68:	2380      	movs	r3, #128	; 0x80
 8044a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044a6e:	e06e      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044a70:	697b      	ldr	r3, [r7, #20]
 8044a72:	681b      	ldr	r3, [r3, #0]
 8044a74:	4a75      	ldr	r2, [pc, #468]	; (8044c4c <UART_SetConfig+0x6a4>)
 8044a76:	4293      	cmp	r3, r2
 8044a78:	d130      	bne.n	8044adc <UART_SetConfig+0x534>
 8044a7a:	4b72      	ldr	r3, [pc, #456]	; (8044c44 <UART_SetConfig+0x69c>)
 8044a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8044a7e:	f003 0307 	and.w	r3, r3, #7
 8044a82:	2b05      	cmp	r3, #5
 8044a84:	d826      	bhi.n	8044ad4 <UART_SetConfig+0x52c>
 8044a86:	a201      	add	r2, pc, #4	; (adr r2, 8044a8c <UART_SetConfig+0x4e4>)
 8044a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044a8c:	08044aa5 	.word	0x08044aa5
 8044a90:	08044aad 	.word	0x08044aad
 8044a94:	08044ab5 	.word	0x08044ab5
 8044a98:	08044abd 	.word	0x08044abd
 8044a9c:	08044ac5 	.word	0x08044ac5
 8044aa0:	08044acd 	.word	0x08044acd
 8044aa4:	2300      	movs	r3, #0
 8044aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044aaa:	e050      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044aac:	2304      	movs	r3, #4
 8044aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044ab2:	e04c      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044ab4:	2308      	movs	r3, #8
 8044ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044aba:	e048      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044abc:	2310      	movs	r3, #16
 8044abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044ac2:	e044      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044ac4:	2320      	movs	r3, #32
 8044ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044aca:	e040      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044acc:	2340      	movs	r3, #64	; 0x40
 8044ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044ad2:	e03c      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044ad4:	2380      	movs	r3, #128	; 0x80
 8044ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044ada:	e038      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044adc:	697b      	ldr	r3, [r7, #20]
 8044ade:	681b      	ldr	r3, [r3, #0]
 8044ae0:	4a5b      	ldr	r2, [pc, #364]	; (8044c50 <UART_SetConfig+0x6a8>)
 8044ae2:	4293      	cmp	r3, r2
 8044ae4:	d130      	bne.n	8044b48 <UART_SetConfig+0x5a0>
 8044ae6:	4b57      	ldr	r3, [pc, #348]	; (8044c44 <UART_SetConfig+0x69c>)
 8044ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8044aea:	f003 0307 	and.w	r3, r3, #7
 8044aee:	2b05      	cmp	r3, #5
 8044af0:	d826      	bhi.n	8044b40 <UART_SetConfig+0x598>
 8044af2:	a201      	add	r2, pc, #4	; (adr r2, 8044af8 <UART_SetConfig+0x550>)
 8044af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044af8:	08044b11 	.word	0x08044b11
 8044afc:	08044b19 	.word	0x08044b19
 8044b00:	08044b21 	.word	0x08044b21
 8044b04:	08044b29 	.word	0x08044b29
 8044b08:	08044b31 	.word	0x08044b31
 8044b0c:	08044b39 	.word	0x08044b39
 8044b10:	2302      	movs	r3, #2
 8044b12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044b16:	e01a      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044b18:	2304      	movs	r3, #4
 8044b1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044b1e:	e016      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044b20:	2308      	movs	r3, #8
 8044b22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044b26:	e012      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044b28:	2310      	movs	r3, #16
 8044b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044b2e:	e00e      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044b30:	2320      	movs	r3, #32
 8044b32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044b36:	e00a      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044b38:	2340      	movs	r3, #64	; 0x40
 8044b3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044b3e:	e006      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044b40:	2380      	movs	r3, #128	; 0x80
 8044b42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8044b46:	e002      	b.n	8044b4e <UART_SetConfig+0x5a6>
 8044b48:	2380      	movs	r3, #128	; 0x80
 8044b4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8044b4e:	697b      	ldr	r3, [r7, #20]
 8044b50:	681b      	ldr	r3, [r3, #0]
 8044b52:	4a3f      	ldr	r2, [pc, #252]	; (8044c50 <UART_SetConfig+0x6a8>)
 8044b54:	4293      	cmp	r3, r2
 8044b56:	f040 80f8 	bne.w	8044d4a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8044b5a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8044b5e:	2b20      	cmp	r3, #32
 8044b60:	dc46      	bgt.n	8044bf0 <UART_SetConfig+0x648>
 8044b62:	2b02      	cmp	r3, #2
 8044b64:	f2c0 8082 	blt.w	8044c6c <UART_SetConfig+0x6c4>
 8044b68:	3b02      	subs	r3, #2
 8044b6a:	2b1e      	cmp	r3, #30
 8044b6c:	d87e      	bhi.n	8044c6c <UART_SetConfig+0x6c4>
 8044b6e:	a201      	add	r2, pc, #4	; (adr r2, 8044b74 <UART_SetConfig+0x5cc>)
 8044b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044b74:	08044bf7 	.word	0x08044bf7
 8044b78:	08044c6d 	.word	0x08044c6d
 8044b7c:	08044bff 	.word	0x08044bff
 8044b80:	08044c6d 	.word	0x08044c6d
 8044b84:	08044c6d 	.word	0x08044c6d
 8044b88:	08044c6d 	.word	0x08044c6d
 8044b8c:	08044c0f 	.word	0x08044c0f
 8044b90:	08044c6d 	.word	0x08044c6d
 8044b94:	08044c6d 	.word	0x08044c6d
 8044b98:	08044c6d 	.word	0x08044c6d
 8044b9c:	08044c6d 	.word	0x08044c6d
 8044ba0:	08044c6d 	.word	0x08044c6d
 8044ba4:	08044c6d 	.word	0x08044c6d
 8044ba8:	08044c6d 	.word	0x08044c6d
 8044bac:	08044c1f 	.word	0x08044c1f
 8044bb0:	08044c6d 	.word	0x08044c6d
 8044bb4:	08044c6d 	.word	0x08044c6d
 8044bb8:	08044c6d 	.word	0x08044c6d
 8044bbc:	08044c6d 	.word	0x08044c6d
 8044bc0:	08044c6d 	.word	0x08044c6d
 8044bc4:	08044c6d 	.word	0x08044c6d
 8044bc8:	08044c6d 	.word	0x08044c6d
 8044bcc:	08044c6d 	.word	0x08044c6d
 8044bd0:	08044c6d 	.word	0x08044c6d
 8044bd4:	08044c6d 	.word	0x08044c6d
 8044bd8:	08044c6d 	.word	0x08044c6d
 8044bdc:	08044c6d 	.word	0x08044c6d
 8044be0:	08044c6d 	.word	0x08044c6d
 8044be4:	08044c6d 	.word	0x08044c6d
 8044be8:	08044c6d 	.word	0x08044c6d
 8044bec:	08044c5f 	.word	0x08044c5f
 8044bf0:	2b40      	cmp	r3, #64	; 0x40
 8044bf2:	d037      	beq.n	8044c64 <UART_SetConfig+0x6bc>
 8044bf4:	e03a      	b.n	8044c6c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8044bf6:	f7fe ffd7 	bl	8043ba8 <HAL_RCCEx_GetD3PCLK1Freq>
 8044bfa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8044bfc:	e03c      	b.n	8044c78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8044bfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8044c02:	4618      	mov	r0, r3
 8044c04:	f7fe ffe6 	bl	8043bd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8044c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8044c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044c0c:	e034      	b.n	8044c78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8044c0e:	f107 0318 	add.w	r3, r7, #24
 8044c12:	4618      	mov	r0, r3
 8044c14:	f7ff f932 	bl	8043e7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8044c18:	69fb      	ldr	r3, [r7, #28]
 8044c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044c1c:	e02c      	b.n	8044c78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8044c1e:	4b09      	ldr	r3, [pc, #36]	; (8044c44 <UART_SetConfig+0x69c>)
 8044c20:	681b      	ldr	r3, [r3, #0]
 8044c22:	f003 0320 	and.w	r3, r3, #32
 8044c26:	2b00      	cmp	r3, #0
 8044c28:	d016      	beq.n	8044c58 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8044c2a:	4b06      	ldr	r3, [pc, #24]	; (8044c44 <UART_SetConfig+0x69c>)
 8044c2c:	681b      	ldr	r3, [r3, #0]
 8044c2e:	08db      	lsrs	r3, r3, #3
 8044c30:	f003 0303 	and.w	r3, r3, #3
 8044c34:	4a07      	ldr	r2, [pc, #28]	; (8044c54 <UART_SetConfig+0x6ac>)
 8044c36:	fa22 f303 	lsr.w	r3, r2, r3
 8044c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8044c3c:	e01c      	b.n	8044c78 <UART_SetConfig+0x6d0>
 8044c3e:	bf00      	nop
 8044c40:	40011400 	.word	0x40011400
 8044c44:	58024400 	.word	0x58024400
 8044c48:	40007800 	.word	0x40007800
 8044c4c:	40007c00 	.word	0x40007c00
 8044c50:	58000c00 	.word	0x58000c00
 8044c54:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8044c58:	4b9d      	ldr	r3, [pc, #628]	; (8044ed0 <UART_SetConfig+0x928>)
 8044c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044c5c:	e00c      	b.n	8044c78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8044c5e:	4b9d      	ldr	r3, [pc, #628]	; (8044ed4 <UART_SetConfig+0x92c>)
 8044c60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044c62:	e009      	b.n	8044c78 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8044c64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8044c68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044c6a:	e005      	b.n	8044c78 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8044c6c:	2300      	movs	r3, #0
 8044c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8044c70:	2301      	movs	r3, #1
 8044c72:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8044c76:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8044c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8044c7a:	2b00      	cmp	r3, #0
 8044c7c:	f000 81de 	beq.w	804503c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8044c80:	697b      	ldr	r3, [r7, #20]
 8044c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8044c84:	4a94      	ldr	r2, [pc, #592]	; (8044ed8 <UART_SetConfig+0x930>)
 8044c86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8044c8a:	461a      	mov	r2, r3
 8044c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8044c8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8044c92:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8044c94:	697b      	ldr	r3, [r7, #20]
 8044c96:	685a      	ldr	r2, [r3, #4]
 8044c98:	4613      	mov	r3, r2
 8044c9a:	005b      	lsls	r3, r3, #1
 8044c9c:	4413      	add	r3, r2
 8044c9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8044ca0:	429a      	cmp	r2, r3
 8044ca2:	d305      	bcc.n	8044cb0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8044ca4:	697b      	ldr	r3, [r7, #20]
 8044ca6:	685b      	ldr	r3, [r3, #4]
 8044ca8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8044caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8044cac:	429a      	cmp	r2, r3
 8044cae:	d903      	bls.n	8044cb8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8044cb0:	2301      	movs	r3, #1
 8044cb2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8044cb6:	e1c1      	b.n	804503c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8044cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8044cba:	2200      	movs	r2, #0
 8044cbc:	60bb      	str	r3, [r7, #8]
 8044cbe:	60fa      	str	r2, [r7, #12]
 8044cc0:	697b      	ldr	r3, [r7, #20]
 8044cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8044cc4:	4a84      	ldr	r2, [pc, #528]	; (8044ed8 <UART_SetConfig+0x930>)
 8044cc6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8044cca:	b29b      	uxth	r3, r3
 8044ccc:	2200      	movs	r2, #0
 8044cce:	603b      	str	r3, [r7, #0]
 8044cd0:	607a      	str	r2, [r7, #4]
 8044cd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8044cd6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8044cda:	f7fb fb51 	bl	8040380 <__aeabi_uldivmod>
 8044cde:	4602      	mov	r2, r0
 8044ce0:	460b      	mov	r3, r1
 8044ce2:	4610      	mov	r0, r2
 8044ce4:	4619      	mov	r1, r3
 8044ce6:	f04f 0200 	mov.w	r2, #0
 8044cea:	f04f 0300 	mov.w	r3, #0
 8044cee:	020b      	lsls	r3, r1, #8
 8044cf0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8044cf4:	0202      	lsls	r2, r0, #8
 8044cf6:	6979      	ldr	r1, [r7, #20]
 8044cf8:	6849      	ldr	r1, [r1, #4]
 8044cfa:	0849      	lsrs	r1, r1, #1
 8044cfc:	2000      	movs	r0, #0
 8044cfe:	460c      	mov	r4, r1
 8044d00:	4605      	mov	r5, r0
 8044d02:	eb12 0804 	adds.w	r8, r2, r4
 8044d06:	eb43 0905 	adc.w	r9, r3, r5
 8044d0a:	697b      	ldr	r3, [r7, #20]
 8044d0c:	685b      	ldr	r3, [r3, #4]
 8044d0e:	2200      	movs	r2, #0
 8044d10:	469a      	mov	sl, r3
 8044d12:	4693      	mov	fp, r2
 8044d14:	4652      	mov	r2, sl
 8044d16:	465b      	mov	r3, fp
 8044d18:	4640      	mov	r0, r8
 8044d1a:	4649      	mov	r1, r9
 8044d1c:	f7fb fb30 	bl	8040380 <__aeabi_uldivmod>
 8044d20:	4602      	mov	r2, r0
 8044d22:	460b      	mov	r3, r1
 8044d24:	4613      	mov	r3, r2
 8044d26:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8044d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8044d2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8044d2e:	d308      	bcc.n	8044d42 <UART_SetConfig+0x79a>
 8044d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8044d32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8044d36:	d204      	bcs.n	8044d42 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8044d38:	697b      	ldr	r3, [r7, #20]
 8044d3a:	681b      	ldr	r3, [r3, #0]
 8044d3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8044d3e:	60da      	str	r2, [r3, #12]
 8044d40:	e17c      	b.n	804503c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8044d42:	2301      	movs	r3, #1
 8044d44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8044d48:	e178      	b.n	804503c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8044d4a:	697b      	ldr	r3, [r7, #20]
 8044d4c:	69db      	ldr	r3, [r3, #28]
 8044d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8044d52:	f040 80c5 	bne.w	8044ee0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8044d56:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8044d5a:	2b20      	cmp	r3, #32
 8044d5c:	dc48      	bgt.n	8044df0 <UART_SetConfig+0x848>
 8044d5e:	2b00      	cmp	r3, #0
 8044d60:	db7b      	blt.n	8044e5a <UART_SetConfig+0x8b2>
 8044d62:	2b20      	cmp	r3, #32
 8044d64:	d879      	bhi.n	8044e5a <UART_SetConfig+0x8b2>
 8044d66:	a201      	add	r2, pc, #4	; (adr r2, 8044d6c <UART_SetConfig+0x7c4>)
 8044d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044d6c:	08044df7 	.word	0x08044df7
 8044d70:	08044dff 	.word	0x08044dff
 8044d74:	08044e5b 	.word	0x08044e5b
 8044d78:	08044e5b 	.word	0x08044e5b
 8044d7c:	08044e07 	.word	0x08044e07
 8044d80:	08044e5b 	.word	0x08044e5b
 8044d84:	08044e5b 	.word	0x08044e5b
 8044d88:	08044e5b 	.word	0x08044e5b
 8044d8c:	08044e17 	.word	0x08044e17
 8044d90:	08044e5b 	.word	0x08044e5b
 8044d94:	08044e5b 	.word	0x08044e5b
 8044d98:	08044e5b 	.word	0x08044e5b
 8044d9c:	08044e5b 	.word	0x08044e5b
 8044da0:	08044e5b 	.word	0x08044e5b
 8044da4:	08044e5b 	.word	0x08044e5b
 8044da8:	08044e5b 	.word	0x08044e5b
 8044dac:	08044e27 	.word	0x08044e27
 8044db0:	08044e5b 	.word	0x08044e5b
 8044db4:	08044e5b 	.word	0x08044e5b
 8044db8:	08044e5b 	.word	0x08044e5b
 8044dbc:	08044e5b 	.word	0x08044e5b
 8044dc0:	08044e5b 	.word	0x08044e5b
 8044dc4:	08044e5b 	.word	0x08044e5b
 8044dc8:	08044e5b 	.word	0x08044e5b
 8044dcc:	08044e5b 	.word	0x08044e5b
 8044dd0:	08044e5b 	.word	0x08044e5b
 8044dd4:	08044e5b 	.word	0x08044e5b
 8044dd8:	08044e5b 	.word	0x08044e5b
 8044ddc:	08044e5b 	.word	0x08044e5b
 8044de0:	08044e5b 	.word	0x08044e5b
 8044de4:	08044e5b 	.word	0x08044e5b
 8044de8:	08044e5b 	.word	0x08044e5b
 8044dec:	08044e4d 	.word	0x08044e4d
 8044df0:	2b40      	cmp	r3, #64	; 0x40
 8044df2:	d02e      	beq.n	8044e52 <UART_SetConfig+0x8aa>
 8044df4:	e031      	b.n	8044e5a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8044df6:	f7fd fc61 	bl	80426bc <HAL_RCC_GetPCLK1Freq>
 8044dfa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8044dfc:	e033      	b.n	8044e66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8044dfe:	f7fd fc73 	bl	80426e8 <HAL_RCC_GetPCLK2Freq>
 8044e02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8044e04:	e02f      	b.n	8044e66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8044e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8044e0a:	4618      	mov	r0, r3
 8044e0c:	f7fe fee2 	bl	8043bd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8044e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8044e12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044e14:	e027      	b.n	8044e66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8044e16:	f107 0318 	add.w	r3, r7, #24
 8044e1a:	4618      	mov	r0, r3
 8044e1c:	f7ff f82e 	bl	8043e7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8044e20:	69fb      	ldr	r3, [r7, #28]
 8044e22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044e24:	e01f      	b.n	8044e66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8044e26:	4b2d      	ldr	r3, [pc, #180]	; (8044edc <UART_SetConfig+0x934>)
 8044e28:	681b      	ldr	r3, [r3, #0]
 8044e2a:	f003 0320 	and.w	r3, r3, #32
 8044e2e:	2b00      	cmp	r3, #0
 8044e30:	d009      	beq.n	8044e46 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8044e32:	4b2a      	ldr	r3, [pc, #168]	; (8044edc <UART_SetConfig+0x934>)
 8044e34:	681b      	ldr	r3, [r3, #0]
 8044e36:	08db      	lsrs	r3, r3, #3
 8044e38:	f003 0303 	and.w	r3, r3, #3
 8044e3c:	4a24      	ldr	r2, [pc, #144]	; (8044ed0 <UART_SetConfig+0x928>)
 8044e3e:	fa22 f303 	lsr.w	r3, r2, r3
 8044e42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8044e44:	e00f      	b.n	8044e66 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8044e46:	4b22      	ldr	r3, [pc, #136]	; (8044ed0 <UART_SetConfig+0x928>)
 8044e48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044e4a:	e00c      	b.n	8044e66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8044e4c:	4b21      	ldr	r3, [pc, #132]	; (8044ed4 <UART_SetConfig+0x92c>)
 8044e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044e50:	e009      	b.n	8044e66 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8044e52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8044e56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044e58:	e005      	b.n	8044e66 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8044e5a:	2300      	movs	r3, #0
 8044e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8044e5e:	2301      	movs	r3, #1
 8044e60:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8044e64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8044e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8044e68:	2b00      	cmp	r3, #0
 8044e6a:	f000 80e7 	beq.w	804503c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8044e6e:	697b      	ldr	r3, [r7, #20]
 8044e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8044e72:	4a19      	ldr	r2, [pc, #100]	; (8044ed8 <UART_SetConfig+0x930>)
 8044e74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8044e78:	461a      	mov	r2, r3
 8044e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8044e7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8044e80:	005a      	lsls	r2, r3, #1
 8044e82:	697b      	ldr	r3, [r7, #20]
 8044e84:	685b      	ldr	r3, [r3, #4]
 8044e86:	085b      	lsrs	r3, r3, #1
 8044e88:	441a      	add	r2, r3
 8044e8a:	697b      	ldr	r3, [r7, #20]
 8044e8c:	685b      	ldr	r3, [r3, #4]
 8044e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8044e92:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8044e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8044e96:	2b0f      	cmp	r3, #15
 8044e98:	d916      	bls.n	8044ec8 <UART_SetConfig+0x920>
 8044e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8044e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8044ea0:	d212      	bcs.n	8044ec8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8044ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8044ea4:	b29b      	uxth	r3, r3
 8044ea6:	f023 030f 	bic.w	r3, r3, #15
 8044eaa:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8044eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8044eae:	085b      	lsrs	r3, r3, #1
 8044eb0:	b29b      	uxth	r3, r3
 8044eb2:	f003 0307 	and.w	r3, r3, #7
 8044eb6:	b29a      	uxth	r2, r3
 8044eb8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8044eba:	4313      	orrs	r3, r2
 8044ebc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8044ebe:	697b      	ldr	r3, [r7, #20]
 8044ec0:	681b      	ldr	r3, [r3, #0]
 8044ec2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8044ec4:	60da      	str	r2, [r3, #12]
 8044ec6:	e0b9      	b.n	804503c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8044ec8:	2301      	movs	r3, #1
 8044eca:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8044ece:	e0b5      	b.n	804503c <UART_SetConfig+0xa94>
 8044ed0:	03d09000 	.word	0x03d09000
 8044ed4:	003d0900 	.word	0x003d0900
 8044ed8:	08046784 	.word	0x08046784
 8044edc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8044ee0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8044ee4:	2b20      	cmp	r3, #32
 8044ee6:	dc49      	bgt.n	8044f7c <UART_SetConfig+0x9d4>
 8044ee8:	2b00      	cmp	r3, #0
 8044eea:	db7c      	blt.n	8044fe6 <UART_SetConfig+0xa3e>
 8044eec:	2b20      	cmp	r3, #32
 8044eee:	d87a      	bhi.n	8044fe6 <UART_SetConfig+0xa3e>
 8044ef0:	a201      	add	r2, pc, #4	; (adr r2, 8044ef8 <UART_SetConfig+0x950>)
 8044ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044ef6:	bf00      	nop
 8044ef8:	08044f83 	.word	0x08044f83
 8044efc:	08044f8b 	.word	0x08044f8b
 8044f00:	08044fe7 	.word	0x08044fe7
 8044f04:	08044fe7 	.word	0x08044fe7
 8044f08:	08044f93 	.word	0x08044f93
 8044f0c:	08044fe7 	.word	0x08044fe7
 8044f10:	08044fe7 	.word	0x08044fe7
 8044f14:	08044fe7 	.word	0x08044fe7
 8044f18:	08044fa3 	.word	0x08044fa3
 8044f1c:	08044fe7 	.word	0x08044fe7
 8044f20:	08044fe7 	.word	0x08044fe7
 8044f24:	08044fe7 	.word	0x08044fe7
 8044f28:	08044fe7 	.word	0x08044fe7
 8044f2c:	08044fe7 	.word	0x08044fe7
 8044f30:	08044fe7 	.word	0x08044fe7
 8044f34:	08044fe7 	.word	0x08044fe7
 8044f38:	08044fb3 	.word	0x08044fb3
 8044f3c:	08044fe7 	.word	0x08044fe7
 8044f40:	08044fe7 	.word	0x08044fe7
 8044f44:	08044fe7 	.word	0x08044fe7
 8044f48:	08044fe7 	.word	0x08044fe7
 8044f4c:	08044fe7 	.word	0x08044fe7
 8044f50:	08044fe7 	.word	0x08044fe7
 8044f54:	08044fe7 	.word	0x08044fe7
 8044f58:	08044fe7 	.word	0x08044fe7
 8044f5c:	08044fe7 	.word	0x08044fe7
 8044f60:	08044fe7 	.word	0x08044fe7
 8044f64:	08044fe7 	.word	0x08044fe7
 8044f68:	08044fe7 	.word	0x08044fe7
 8044f6c:	08044fe7 	.word	0x08044fe7
 8044f70:	08044fe7 	.word	0x08044fe7
 8044f74:	08044fe7 	.word	0x08044fe7
 8044f78:	08044fd9 	.word	0x08044fd9
 8044f7c:	2b40      	cmp	r3, #64	; 0x40
 8044f7e:	d02e      	beq.n	8044fde <UART_SetConfig+0xa36>
 8044f80:	e031      	b.n	8044fe6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8044f82:	f7fd fb9b 	bl	80426bc <HAL_RCC_GetPCLK1Freq>
 8044f86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8044f88:	e033      	b.n	8044ff2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8044f8a:	f7fd fbad 	bl	80426e8 <HAL_RCC_GetPCLK2Freq>
 8044f8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8044f90:	e02f      	b.n	8044ff2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8044f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8044f96:	4618      	mov	r0, r3
 8044f98:	f7fe fe1c 	bl	8043bd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8044f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8044f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044fa0:	e027      	b.n	8044ff2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8044fa2:	f107 0318 	add.w	r3, r7, #24
 8044fa6:	4618      	mov	r0, r3
 8044fa8:	f7fe ff68 	bl	8043e7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8044fac:	69fb      	ldr	r3, [r7, #28]
 8044fae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044fb0:	e01f      	b.n	8044ff2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8044fb2:	4b2d      	ldr	r3, [pc, #180]	; (8045068 <UART_SetConfig+0xac0>)
 8044fb4:	681b      	ldr	r3, [r3, #0]
 8044fb6:	f003 0320 	and.w	r3, r3, #32
 8044fba:	2b00      	cmp	r3, #0
 8044fbc:	d009      	beq.n	8044fd2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8044fbe:	4b2a      	ldr	r3, [pc, #168]	; (8045068 <UART_SetConfig+0xac0>)
 8044fc0:	681b      	ldr	r3, [r3, #0]
 8044fc2:	08db      	lsrs	r3, r3, #3
 8044fc4:	f003 0303 	and.w	r3, r3, #3
 8044fc8:	4a28      	ldr	r2, [pc, #160]	; (804506c <UART_SetConfig+0xac4>)
 8044fca:	fa22 f303 	lsr.w	r3, r2, r3
 8044fce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8044fd0:	e00f      	b.n	8044ff2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8044fd2:	4b26      	ldr	r3, [pc, #152]	; (804506c <UART_SetConfig+0xac4>)
 8044fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044fd6:	e00c      	b.n	8044ff2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8044fd8:	4b25      	ldr	r3, [pc, #148]	; (8045070 <UART_SetConfig+0xac8>)
 8044fda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044fdc:	e009      	b.n	8044ff2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8044fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8044fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8044fe4:	e005      	b.n	8044ff2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8044fe6:	2300      	movs	r3, #0
 8044fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8044fea:	2301      	movs	r3, #1
 8044fec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8044ff0:	bf00      	nop
    }

    if (pclk != 0U)
 8044ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8044ff4:	2b00      	cmp	r3, #0
 8044ff6:	d021      	beq.n	804503c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8044ff8:	697b      	ldr	r3, [r7, #20]
 8044ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8044ffc:	4a1d      	ldr	r2, [pc, #116]	; (8045074 <UART_SetConfig+0xacc>)
 8044ffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8045002:	461a      	mov	r2, r3
 8045004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8045006:	fbb3 f2f2 	udiv	r2, r3, r2
 804500a:	697b      	ldr	r3, [r7, #20]
 804500c:	685b      	ldr	r3, [r3, #4]
 804500e:	085b      	lsrs	r3, r3, #1
 8045010:	441a      	add	r2, r3
 8045012:	697b      	ldr	r3, [r7, #20]
 8045014:	685b      	ldr	r3, [r3, #4]
 8045016:	fbb2 f3f3 	udiv	r3, r2, r3
 804501a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 804501c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804501e:	2b0f      	cmp	r3, #15
 8045020:	d909      	bls.n	8045036 <UART_SetConfig+0xa8e>
 8045022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8045024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8045028:	d205      	bcs.n	8045036 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 804502a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 804502c:	b29a      	uxth	r2, r3
 804502e:	697b      	ldr	r3, [r7, #20]
 8045030:	681b      	ldr	r3, [r3, #0]
 8045032:	60da      	str	r2, [r3, #12]
 8045034:	e002      	b.n	804503c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8045036:	2301      	movs	r3, #1
 8045038:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 804503c:	697b      	ldr	r3, [r7, #20]
 804503e:	2201      	movs	r2, #1
 8045040:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8045044:	697b      	ldr	r3, [r7, #20]
 8045046:	2201      	movs	r2, #1
 8045048:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 804504c:	697b      	ldr	r3, [r7, #20]
 804504e:	2200      	movs	r2, #0
 8045050:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8045052:	697b      	ldr	r3, [r7, #20]
 8045054:	2200      	movs	r2, #0
 8045056:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8045058:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 804505c:	4618      	mov	r0, r3
 804505e:	3748      	adds	r7, #72	; 0x48
 8045060:	46bd      	mov	sp, r7
 8045062:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8045066:	bf00      	nop
 8045068:	58024400 	.word	0x58024400
 804506c:	03d09000 	.word	0x03d09000
 8045070:	003d0900 	.word	0x003d0900
 8045074:	08046784 	.word	0x08046784

08045078 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8045078:	b480      	push	{r7}
 804507a:	b083      	sub	sp, #12
 804507c:	af00      	add	r7, sp, #0
 804507e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8045080:	687b      	ldr	r3, [r7, #4]
 8045082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8045084:	f003 0301 	and.w	r3, r3, #1
 8045088:	2b00      	cmp	r3, #0
 804508a:	d00a      	beq.n	80450a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 804508c:	687b      	ldr	r3, [r7, #4]
 804508e:	681b      	ldr	r3, [r3, #0]
 8045090:	685b      	ldr	r3, [r3, #4]
 8045092:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8045096:	687b      	ldr	r3, [r7, #4]
 8045098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804509a:	687b      	ldr	r3, [r7, #4]
 804509c:	681b      	ldr	r3, [r3, #0]
 804509e:	430a      	orrs	r2, r1
 80450a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80450a2:	687b      	ldr	r3, [r7, #4]
 80450a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80450a6:	f003 0302 	and.w	r3, r3, #2
 80450aa:	2b00      	cmp	r3, #0
 80450ac:	d00a      	beq.n	80450c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80450ae:	687b      	ldr	r3, [r7, #4]
 80450b0:	681b      	ldr	r3, [r3, #0]
 80450b2:	685b      	ldr	r3, [r3, #4]
 80450b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80450b8:	687b      	ldr	r3, [r7, #4]
 80450ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80450bc:	687b      	ldr	r3, [r7, #4]
 80450be:	681b      	ldr	r3, [r3, #0]
 80450c0:	430a      	orrs	r2, r1
 80450c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80450c4:	687b      	ldr	r3, [r7, #4]
 80450c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80450c8:	f003 0304 	and.w	r3, r3, #4
 80450cc:	2b00      	cmp	r3, #0
 80450ce:	d00a      	beq.n	80450e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80450d0:	687b      	ldr	r3, [r7, #4]
 80450d2:	681b      	ldr	r3, [r3, #0]
 80450d4:	685b      	ldr	r3, [r3, #4]
 80450d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80450da:	687b      	ldr	r3, [r7, #4]
 80450dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80450de:	687b      	ldr	r3, [r7, #4]
 80450e0:	681b      	ldr	r3, [r3, #0]
 80450e2:	430a      	orrs	r2, r1
 80450e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80450e6:	687b      	ldr	r3, [r7, #4]
 80450e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80450ea:	f003 0308 	and.w	r3, r3, #8
 80450ee:	2b00      	cmp	r3, #0
 80450f0:	d00a      	beq.n	8045108 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80450f2:	687b      	ldr	r3, [r7, #4]
 80450f4:	681b      	ldr	r3, [r3, #0]
 80450f6:	685b      	ldr	r3, [r3, #4]
 80450f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80450fc:	687b      	ldr	r3, [r7, #4]
 80450fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8045100:	687b      	ldr	r3, [r7, #4]
 8045102:	681b      	ldr	r3, [r3, #0]
 8045104:	430a      	orrs	r2, r1
 8045106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8045108:	687b      	ldr	r3, [r7, #4]
 804510a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804510c:	f003 0310 	and.w	r3, r3, #16
 8045110:	2b00      	cmp	r3, #0
 8045112:	d00a      	beq.n	804512a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8045114:	687b      	ldr	r3, [r7, #4]
 8045116:	681b      	ldr	r3, [r3, #0]
 8045118:	689b      	ldr	r3, [r3, #8]
 804511a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 804511e:	687b      	ldr	r3, [r7, #4]
 8045120:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8045122:	687b      	ldr	r3, [r7, #4]
 8045124:	681b      	ldr	r3, [r3, #0]
 8045126:	430a      	orrs	r2, r1
 8045128:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 804512a:	687b      	ldr	r3, [r7, #4]
 804512c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804512e:	f003 0320 	and.w	r3, r3, #32
 8045132:	2b00      	cmp	r3, #0
 8045134:	d00a      	beq.n	804514c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8045136:	687b      	ldr	r3, [r7, #4]
 8045138:	681b      	ldr	r3, [r3, #0]
 804513a:	689b      	ldr	r3, [r3, #8]
 804513c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8045140:	687b      	ldr	r3, [r7, #4]
 8045142:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8045144:	687b      	ldr	r3, [r7, #4]
 8045146:	681b      	ldr	r3, [r3, #0]
 8045148:	430a      	orrs	r2, r1
 804514a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 804514c:	687b      	ldr	r3, [r7, #4]
 804514e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8045150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8045154:	2b00      	cmp	r3, #0
 8045156:	d01a      	beq.n	804518e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8045158:	687b      	ldr	r3, [r7, #4]
 804515a:	681b      	ldr	r3, [r3, #0]
 804515c:	685b      	ldr	r3, [r3, #4]
 804515e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8045162:	687b      	ldr	r3, [r7, #4]
 8045164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8045166:	687b      	ldr	r3, [r7, #4]
 8045168:	681b      	ldr	r3, [r3, #0]
 804516a:	430a      	orrs	r2, r1
 804516c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 804516e:	687b      	ldr	r3, [r7, #4]
 8045170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8045172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8045176:	d10a      	bne.n	804518e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8045178:	687b      	ldr	r3, [r7, #4]
 804517a:	681b      	ldr	r3, [r3, #0]
 804517c:	685b      	ldr	r3, [r3, #4]
 804517e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8045182:	687b      	ldr	r3, [r7, #4]
 8045184:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8045186:	687b      	ldr	r3, [r7, #4]
 8045188:	681b      	ldr	r3, [r3, #0]
 804518a:	430a      	orrs	r2, r1
 804518c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 804518e:	687b      	ldr	r3, [r7, #4]
 8045190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8045192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8045196:	2b00      	cmp	r3, #0
 8045198:	d00a      	beq.n	80451b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 804519a:	687b      	ldr	r3, [r7, #4]
 804519c:	681b      	ldr	r3, [r3, #0]
 804519e:	685b      	ldr	r3, [r3, #4]
 80451a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80451a4:	687b      	ldr	r3, [r7, #4]
 80451a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80451a8:	687b      	ldr	r3, [r7, #4]
 80451aa:	681b      	ldr	r3, [r3, #0]
 80451ac:	430a      	orrs	r2, r1
 80451ae:	605a      	str	r2, [r3, #4]
  }
}
 80451b0:	bf00      	nop
 80451b2:	370c      	adds	r7, #12
 80451b4:	46bd      	mov	sp, r7
 80451b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80451ba:	4770      	bx	lr

080451bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80451bc:	b580      	push	{r7, lr}
 80451be:	b098      	sub	sp, #96	; 0x60
 80451c0:	af02      	add	r7, sp, #8
 80451c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80451c4:	687b      	ldr	r3, [r7, #4]
 80451c6:	2200      	movs	r2, #0
 80451c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80451cc:	f7fb fec6 	bl	8040f5c <HAL_GetTick>
 80451d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80451d2:	687b      	ldr	r3, [r7, #4]
 80451d4:	681b      	ldr	r3, [r3, #0]
 80451d6:	681b      	ldr	r3, [r3, #0]
 80451d8:	f003 0308 	and.w	r3, r3, #8
 80451dc:	2b08      	cmp	r3, #8
 80451de:	d12f      	bne.n	8045240 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80451e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80451e4:	9300      	str	r3, [sp, #0]
 80451e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80451e8:	2200      	movs	r2, #0
 80451ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80451ee:	6878      	ldr	r0, [r7, #4]
 80451f0:	f000 f88e 	bl	8045310 <UART_WaitOnFlagUntilTimeout>
 80451f4:	4603      	mov	r3, r0
 80451f6:	2b00      	cmp	r3, #0
 80451f8:	d022      	beq.n	8045240 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80451fa:	687b      	ldr	r3, [r7, #4]
 80451fc:	681b      	ldr	r3, [r3, #0]
 80451fe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8045200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8045202:	e853 3f00 	ldrex	r3, [r3]
 8045206:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8045208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804520a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 804520e:	653b      	str	r3, [r7, #80]	; 0x50
 8045210:	687b      	ldr	r3, [r7, #4]
 8045212:	681b      	ldr	r3, [r3, #0]
 8045214:	461a      	mov	r2, r3
 8045216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8045218:	647b      	str	r3, [r7, #68]	; 0x44
 804521a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804521c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 804521e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8045220:	e841 2300 	strex	r3, r2, [r1]
 8045224:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8045226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8045228:	2b00      	cmp	r3, #0
 804522a:	d1e6      	bne.n	80451fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 804522c:	687b      	ldr	r3, [r7, #4]
 804522e:	2220      	movs	r2, #32
 8045230:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8045234:	687b      	ldr	r3, [r7, #4]
 8045236:	2200      	movs	r2, #0
 8045238:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 804523c:	2303      	movs	r3, #3
 804523e:	e063      	b.n	8045308 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8045240:	687b      	ldr	r3, [r7, #4]
 8045242:	681b      	ldr	r3, [r3, #0]
 8045244:	681b      	ldr	r3, [r3, #0]
 8045246:	f003 0304 	and.w	r3, r3, #4
 804524a:	2b04      	cmp	r3, #4
 804524c:	d149      	bne.n	80452e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 804524e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8045252:	9300      	str	r3, [sp, #0]
 8045254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8045256:	2200      	movs	r2, #0
 8045258:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 804525c:	6878      	ldr	r0, [r7, #4]
 804525e:	f000 f857 	bl	8045310 <UART_WaitOnFlagUntilTimeout>
 8045262:	4603      	mov	r3, r0
 8045264:	2b00      	cmp	r3, #0
 8045266:	d03c      	beq.n	80452e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8045268:	687b      	ldr	r3, [r7, #4]
 804526a:	681b      	ldr	r3, [r3, #0]
 804526c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8045270:	e853 3f00 	ldrex	r3, [r3]
 8045274:	623b      	str	r3, [r7, #32]
   return(result);
 8045276:	6a3b      	ldr	r3, [r7, #32]
 8045278:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 804527c:	64fb      	str	r3, [r7, #76]	; 0x4c
 804527e:	687b      	ldr	r3, [r7, #4]
 8045280:	681b      	ldr	r3, [r3, #0]
 8045282:	461a      	mov	r2, r3
 8045284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8045286:	633b      	str	r3, [r7, #48]	; 0x30
 8045288:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804528a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 804528c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 804528e:	e841 2300 	strex	r3, r2, [r1]
 8045292:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8045294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8045296:	2b00      	cmp	r3, #0
 8045298:	d1e6      	bne.n	8045268 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804529a:	687b      	ldr	r3, [r7, #4]
 804529c:	681b      	ldr	r3, [r3, #0]
 804529e:	3308      	adds	r3, #8
 80452a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80452a2:	693b      	ldr	r3, [r7, #16]
 80452a4:	e853 3f00 	ldrex	r3, [r3]
 80452a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80452aa:	68fb      	ldr	r3, [r7, #12]
 80452ac:	f023 0301 	bic.w	r3, r3, #1
 80452b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80452b2:	687b      	ldr	r3, [r7, #4]
 80452b4:	681b      	ldr	r3, [r3, #0]
 80452b6:	3308      	adds	r3, #8
 80452b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80452ba:	61fa      	str	r2, [r7, #28]
 80452bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80452be:	69b9      	ldr	r1, [r7, #24]
 80452c0:	69fa      	ldr	r2, [r7, #28]
 80452c2:	e841 2300 	strex	r3, r2, [r1]
 80452c6:	617b      	str	r3, [r7, #20]
   return(result);
 80452c8:	697b      	ldr	r3, [r7, #20]
 80452ca:	2b00      	cmp	r3, #0
 80452cc:	d1e5      	bne.n	804529a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80452ce:	687b      	ldr	r3, [r7, #4]
 80452d0:	2220      	movs	r2, #32
 80452d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80452d6:	687b      	ldr	r3, [r7, #4]
 80452d8:	2200      	movs	r2, #0
 80452da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80452de:	2303      	movs	r3, #3
 80452e0:	e012      	b.n	8045308 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80452e2:	687b      	ldr	r3, [r7, #4]
 80452e4:	2220      	movs	r2, #32
 80452e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80452ea:	687b      	ldr	r3, [r7, #4]
 80452ec:	2220      	movs	r2, #32
 80452ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80452f2:	687b      	ldr	r3, [r7, #4]
 80452f4:	2200      	movs	r2, #0
 80452f6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80452f8:	687b      	ldr	r3, [r7, #4]
 80452fa:	2200      	movs	r2, #0
 80452fc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80452fe:	687b      	ldr	r3, [r7, #4]
 8045300:	2200      	movs	r2, #0
 8045302:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8045306:	2300      	movs	r3, #0
}
 8045308:	4618      	mov	r0, r3
 804530a:	3758      	adds	r7, #88	; 0x58
 804530c:	46bd      	mov	sp, r7
 804530e:	bd80      	pop	{r7, pc}

08045310 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8045310:	b580      	push	{r7, lr}
 8045312:	b084      	sub	sp, #16
 8045314:	af00      	add	r7, sp, #0
 8045316:	60f8      	str	r0, [r7, #12]
 8045318:	60b9      	str	r1, [r7, #8]
 804531a:	603b      	str	r3, [r7, #0]
 804531c:	4613      	mov	r3, r2
 804531e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8045320:	e049      	b.n	80453b6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8045322:	69bb      	ldr	r3, [r7, #24]
 8045324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8045328:	d045      	beq.n	80453b6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 804532a:	f7fb fe17 	bl	8040f5c <HAL_GetTick>
 804532e:	4602      	mov	r2, r0
 8045330:	683b      	ldr	r3, [r7, #0]
 8045332:	1ad3      	subs	r3, r2, r3
 8045334:	69ba      	ldr	r2, [r7, #24]
 8045336:	429a      	cmp	r2, r3
 8045338:	d302      	bcc.n	8045340 <UART_WaitOnFlagUntilTimeout+0x30>
 804533a:	69bb      	ldr	r3, [r7, #24]
 804533c:	2b00      	cmp	r3, #0
 804533e:	d101      	bne.n	8045344 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8045340:	2303      	movs	r3, #3
 8045342:	e048      	b.n	80453d6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8045344:	68fb      	ldr	r3, [r7, #12]
 8045346:	681b      	ldr	r3, [r3, #0]
 8045348:	681b      	ldr	r3, [r3, #0]
 804534a:	f003 0304 	and.w	r3, r3, #4
 804534e:	2b00      	cmp	r3, #0
 8045350:	d031      	beq.n	80453b6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8045352:	68fb      	ldr	r3, [r7, #12]
 8045354:	681b      	ldr	r3, [r3, #0]
 8045356:	69db      	ldr	r3, [r3, #28]
 8045358:	f003 0308 	and.w	r3, r3, #8
 804535c:	2b08      	cmp	r3, #8
 804535e:	d110      	bne.n	8045382 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8045360:	68fb      	ldr	r3, [r7, #12]
 8045362:	681b      	ldr	r3, [r3, #0]
 8045364:	2208      	movs	r2, #8
 8045366:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8045368:	68f8      	ldr	r0, [r7, #12]
 804536a:	f000 f839 	bl	80453e0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 804536e:	68fb      	ldr	r3, [r7, #12]
 8045370:	2208      	movs	r2, #8
 8045372:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8045376:	68fb      	ldr	r3, [r7, #12]
 8045378:	2200      	movs	r2, #0
 804537a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 804537e:	2301      	movs	r3, #1
 8045380:	e029      	b.n	80453d6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8045382:	68fb      	ldr	r3, [r7, #12]
 8045384:	681b      	ldr	r3, [r3, #0]
 8045386:	69db      	ldr	r3, [r3, #28]
 8045388:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804538c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8045390:	d111      	bne.n	80453b6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8045392:	68fb      	ldr	r3, [r7, #12]
 8045394:	681b      	ldr	r3, [r3, #0]
 8045396:	f44f 6200 	mov.w	r2, #2048	; 0x800
 804539a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 804539c:	68f8      	ldr	r0, [r7, #12]
 804539e:	f000 f81f 	bl	80453e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80453a2:	68fb      	ldr	r3, [r7, #12]
 80453a4:	2220      	movs	r2, #32
 80453a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80453aa:	68fb      	ldr	r3, [r7, #12]
 80453ac:	2200      	movs	r2, #0
 80453ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80453b2:	2303      	movs	r3, #3
 80453b4:	e00f      	b.n	80453d6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80453b6:	68fb      	ldr	r3, [r7, #12]
 80453b8:	681b      	ldr	r3, [r3, #0]
 80453ba:	69da      	ldr	r2, [r3, #28]
 80453bc:	68bb      	ldr	r3, [r7, #8]
 80453be:	4013      	ands	r3, r2
 80453c0:	68ba      	ldr	r2, [r7, #8]
 80453c2:	429a      	cmp	r2, r3
 80453c4:	bf0c      	ite	eq
 80453c6:	2301      	moveq	r3, #1
 80453c8:	2300      	movne	r3, #0
 80453ca:	b2db      	uxtb	r3, r3
 80453cc:	461a      	mov	r2, r3
 80453ce:	79fb      	ldrb	r3, [r7, #7]
 80453d0:	429a      	cmp	r2, r3
 80453d2:	d0a6      	beq.n	8045322 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80453d4:	2300      	movs	r3, #0
}
 80453d6:	4618      	mov	r0, r3
 80453d8:	3710      	adds	r7, #16
 80453da:	46bd      	mov	sp, r7
 80453dc:	bd80      	pop	{r7, pc}
	...

080453e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80453e0:	b480      	push	{r7}
 80453e2:	b095      	sub	sp, #84	; 0x54
 80453e4:	af00      	add	r7, sp, #0
 80453e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80453e8:	687b      	ldr	r3, [r7, #4]
 80453ea:	681b      	ldr	r3, [r3, #0]
 80453ec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80453ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80453f0:	e853 3f00 	ldrex	r3, [r3]
 80453f4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80453f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80453f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80453fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80453fe:	687b      	ldr	r3, [r7, #4]
 8045400:	681b      	ldr	r3, [r3, #0]
 8045402:	461a      	mov	r2, r3
 8045404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8045406:	643b      	str	r3, [r7, #64]	; 0x40
 8045408:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804540a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 804540c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 804540e:	e841 2300 	strex	r3, r2, [r1]
 8045412:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8045414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8045416:	2b00      	cmp	r3, #0
 8045418:	d1e6      	bne.n	80453e8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 804541a:	687b      	ldr	r3, [r7, #4]
 804541c:	681b      	ldr	r3, [r3, #0]
 804541e:	3308      	adds	r3, #8
 8045420:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8045422:	6a3b      	ldr	r3, [r7, #32]
 8045424:	e853 3f00 	ldrex	r3, [r3]
 8045428:	61fb      	str	r3, [r7, #28]
   return(result);
 804542a:	69fa      	ldr	r2, [r7, #28]
 804542c:	4b1e      	ldr	r3, [pc, #120]	; (80454a8 <UART_EndRxTransfer+0xc8>)
 804542e:	4013      	ands	r3, r2
 8045430:	64bb      	str	r3, [r7, #72]	; 0x48
 8045432:	687b      	ldr	r3, [r7, #4]
 8045434:	681b      	ldr	r3, [r3, #0]
 8045436:	3308      	adds	r3, #8
 8045438:	6cba      	ldr	r2, [r7, #72]	; 0x48
 804543a:	62fa      	str	r2, [r7, #44]	; 0x2c
 804543c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804543e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8045440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8045442:	e841 2300 	strex	r3, r2, [r1]
 8045446:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8045448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804544a:	2b00      	cmp	r3, #0
 804544c:	d1e5      	bne.n	804541a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 804544e:	687b      	ldr	r3, [r7, #4]
 8045450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8045452:	2b01      	cmp	r3, #1
 8045454:	d118      	bne.n	8045488 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8045456:	687b      	ldr	r3, [r7, #4]
 8045458:	681b      	ldr	r3, [r3, #0]
 804545a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804545c:	68fb      	ldr	r3, [r7, #12]
 804545e:	e853 3f00 	ldrex	r3, [r3]
 8045462:	60bb      	str	r3, [r7, #8]
   return(result);
 8045464:	68bb      	ldr	r3, [r7, #8]
 8045466:	f023 0310 	bic.w	r3, r3, #16
 804546a:	647b      	str	r3, [r7, #68]	; 0x44
 804546c:	687b      	ldr	r3, [r7, #4]
 804546e:	681b      	ldr	r3, [r3, #0]
 8045470:	461a      	mov	r2, r3
 8045472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8045474:	61bb      	str	r3, [r7, #24]
 8045476:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8045478:	6979      	ldr	r1, [r7, #20]
 804547a:	69ba      	ldr	r2, [r7, #24]
 804547c:	e841 2300 	strex	r3, r2, [r1]
 8045480:	613b      	str	r3, [r7, #16]
   return(result);
 8045482:	693b      	ldr	r3, [r7, #16]
 8045484:	2b00      	cmp	r3, #0
 8045486:	d1e6      	bne.n	8045456 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8045488:	687b      	ldr	r3, [r7, #4]
 804548a:	2220      	movs	r2, #32
 804548c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8045490:	687b      	ldr	r3, [r7, #4]
 8045492:	2200      	movs	r2, #0
 8045494:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8045496:	687b      	ldr	r3, [r7, #4]
 8045498:	2200      	movs	r2, #0
 804549a:	675a      	str	r2, [r3, #116]	; 0x74
}
 804549c:	bf00      	nop
 804549e:	3754      	adds	r7, #84	; 0x54
 80454a0:	46bd      	mov	sp, r7
 80454a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80454a6:	4770      	bx	lr
 80454a8:	effffffe 	.word	0xeffffffe

080454ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80454ac:	b480      	push	{r7}
 80454ae:	b085      	sub	sp, #20
 80454b0:	af00      	add	r7, sp, #0
 80454b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80454b4:	687b      	ldr	r3, [r7, #4]
 80454b6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80454ba:	2b01      	cmp	r3, #1
 80454bc:	d101      	bne.n	80454c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80454be:	2302      	movs	r3, #2
 80454c0:	e027      	b.n	8045512 <HAL_UARTEx_DisableFifoMode+0x66>
 80454c2:	687b      	ldr	r3, [r7, #4]
 80454c4:	2201      	movs	r2, #1
 80454c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80454ca:	687b      	ldr	r3, [r7, #4]
 80454cc:	2224      	movs	r2, #36	; 0x24
 80454ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80454d2:	687b      	ldr	r3, [r7, #4]
 80454d4:	681b      	ldr	r3, [r3, #0]
 80454d6:	681b      	ldr	r3, [r3, #0]
 80454d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80454da:	687b      	ldr	r3, [r7, #4]
 80454dc:	681b      	ldr	r3, [r3, #0]
 80454de:	681a      	ldr	r2, [r3, #0]
 80454e0:	687b      	ldr	r3, [r7, #4]
 80454e2:	681b      	ldr	r3, [r3, #0]
 80454e4:	f022 0201 	bic.w	r2, r2, #1
 80454e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80454ea:	68fb      	ldr	r3, [r7, #12]
 80454ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80454f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80454f2:	687b      	ldr	r3, [r7, #4]
 80454f4:	2200      	movs	r2, #0
 80454f6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80454f8:	687b      	ldr	r3, [r7, #4]
 80454fa:	681b      	ldr	r3, [r3, #0]
 80454fc:	68fa      	ldr	r2, [r7, #12]
 80454fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8045500:	687b      	ldr	r3, [r7, #4]
 8045502:	2220      	movs	r2, #32
 8045504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8045508:	687b      	ldr	r3, [r7, #4]
 804550a:	2200      	movs	r2, #0
 804550c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8045510:	2300      	movs	r3, #0
}
 8045512:	4618      	mov	r0, r3
 8045514:	3714      	adds	r7, #20
 8045516:	46bd      	mov	sp, r7
 8045518:	f85d 7b04 	ldr.w	r7, [sp], #4
 804551c:	4770      	bx	lr

0804551e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 804551e:	b580      	push	{r7, lr}
 8045520:	b084      	sub	sp, #16
 8045522:	af00      	add	r7, sp, #0
 8045524:	6078      	str	r0, [r7, #4]
 8045526:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8045528:	687b      	ldr	r3, [r7, #4]
 804552a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 804552e:	2b01      	cmp	r3, #1
 8045530:	d101      	bne.n	8045536 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8045532:	2302      	movs	r3, #2
 8045534:	e02d      	b.n	8045592 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8045536:	687b      	ldr	r3, [r7, #4]
 8045538:	2201      	movs	r2, #1
 804553a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 804553e:	687b      	ldr	r3, [r7, #4]
 8045540:	2224      	movs	r2, #36	; 0x24
 8045542:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8045546:	687b      	ldr	r3, [r7, #4]
 8045548:	681b      	ldr	r3, [r3, #0]
 804554a:	681b      	ldr	r3, [r3, #0]
 804554c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 804554e:	687b      	ldr	r3, [r7, #4]
 8045550:	681b      	ldr	r3, [r3, #0]
 8045552:	681a      	ldr	r2, [r3, #0]
 8045554:	687b      	ldr	r3, [r7, #4]
 8045556:	681b      	ldr	r3, [r3, #0]
 8045558:	f022 0201 	bic.w	r2, r2, #1
 804555c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 804555e:	687b      	ldr	r3, [r7, #4]
 8045560:	681b      	ldr	r3, [r3, #0]
 8045562:	689b      	ldr	r3, [r3, #8]
 8045564:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8045568:	687b      	ldr	r3, [r7, #4]
 804556a:	681b      	ldr	r3, [r3, #0]
 804556c:	683a      	ldr	r2, [r7, #0]
 804556e:	430a      	orrs	r2, r1
 8045570:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8045572:	6878      	ldr	r0, [r7, #4]
 8045574:	f000 f850 	bl	8045618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8045578:	687b      	ldr	r3, [r7, #4]
 804557a:	681b      	ldr	r3, [r3, #0]
 804557c:	68fa      	ldr	r2, [r7, #12]
 804557e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8045580:	687b      	ldr	r3, [r7, #4]
 8045582:	2220      	movs	r2, #32
 8045584:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8045588:	687b      	ldr	r3, [r7, #4]
 804558a:	2200      	movs	r2, #0
 804558c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8045590:	2300      	movs	r3, #0
}
 8045592:	4618      	mov	r0, r3
 8045594:	3710      	adds	r7, #16
 8045596:	46bd      	mov	sp, r7
 8045598:	bd80      	pop	{r7, pc}

0804559a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 804559a:	b580      	push	{r7, lr}
 804559c:	b084      	sub	sp, #16
 804559e:	af00      	add	r7, sp, #0
 80455a0:	6078      	str	r0, [r7, #4]
 80455a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80455a4:	687b      	ldr	r3, [r7, #4]
 80455a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80455aa:	2b01      	cmp	r3, #1
 80455ac:	d101      	bne.n	80455b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80455ae:	2302      	movs	r3, #2
 80455b0:	e02d      	b.n	804560e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80455b2:	687b      	ldr	r3, [r7, #4]
 80455b4:	2201      	movs	r2, #1
 80455b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80455ba:	687b      	ldr	r3, [r7, #4]
 80455bc:	2224      	movs	r2, #36	; 0x24
 80455be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80455c2:	687b      	ldr	r3, [r7, #4]
 80455c4:	681b      	ldr	r3, [r3, #0]
 80455c6:	681b      	ldr	r3, [r3, #0]
 80455c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80455ca:	687b      	ldr	r3, [r7, #4]
 80455cc:	681b      	ldr	r3, [r3, #0]
 80455ce:	681a      	ldr	r2, [r3, #0]
 80455d0:	687b      	ldr	r3, [r7, #4]
 80455d2:	681b      	ldr	r3, [r3, #0]
 80455d4:	f022 0201 	bic.w	r2, r2, #1
 80455d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80455da:	687b      	ldr	r3, [r7, #4]
 80455dc:	681b      	ldr	r3, [r3, #0]
 80455de:	689b      	ldr	r3, [r3, #8]
 80455e0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80455e4:	687b      	ldr	r3, [r7, #4]
 80455e6:	681b      	ldr	r3, [r3, #0]
 80455e8:	683a      	ldr	r2, [r7, #0]
 80455ea:	430a      	orrs	r2, r1
 80455ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80455ee:	6878      	ldr	r0, [r7, #4]
 80455f0:	f000 f812 	bl	8045618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80455f4:	687b      	ldr	r3, [r7, #4]
 80455f6:	681b      	ldr	r3, [r3, #0]
 80455f8:	68fa      	ldr	r2, [r7, #12]
 80455fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80455fc:	687b      	ldr	r3, [r7, #4]
 80455fe:	2220      	movs	r2, #32
 8045600:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8045604:	687b      	ldr	r3, [r7, #4]
 8045606:	2200      	movs	r2, #0
 8045608:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 804560c:	2300      	movs	r3, #0
}
 804560e:	4618      	mov	r0, r3
 8045610:	3710      	adds	r7, #16
 8045612:	46bd      	mov	sp, r7
 8045614:	bd80      	pop	{r7, pc}
	...

08045618 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8045618:	b480      	push	{r7}
 804561a:	b085      	sub	sp, #20
 804561c:	af00      	add	r7, sp, #0
 804561e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8045620:	687b      	ldr	r3, [r7, #4]
 8045622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8045624:	2b00      	cmp	r3, #0
 8045626:	d108      	bne.n	804563a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8045628:	687b      	ldr	r3, [r7, #4]
 804562a:	2201      	movs	r2, #1
 804562c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8045630:	687b      	ldr	r3, [r7, #4]
 8045632:	2201      	movs	r2, #1
 8045634:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8045638:	e031      	b.n	804569e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 804563a:	2310      	movs	r3, #16
 804563c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 804563e:	2310      	movs	r3, #16
 8045640:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8045642:	687b      	ldr	r3, [r7, #4]
 8045644:	681b      	ldr	r3, [r3, #0]
 8045646:	689b      	ldr	r3, [r3, #8]
 8045648:	0e5b      	lsrs	r3, r3, #25
 804564a:	b2db      	uxtb	r3, r3
 804564c:	f003 0307 	and.w	r3, r3, #7
 8045650:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8045652:	687b      	ldr	r3, [r7, #4]
 8045654:	681b      	ldr	r3, [r3, #0]
 8045656:	689b      	ldr	r3, [r3, #8]
 8045658:	0f5b      	lsrs	r3, r3, #29
 804565a:	b2db      	uxtb	r3, r3
 804565c:	f003 0307 	and.w	r3, r3, #7
 8045660:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8045662:	7bbb      	ldrb	r3, [r7, #14]
 8045664:	7b3a      	ldrb	r2, [r7, #12]
 8045666:	4911      	ldr	r1, [pc, #68]	; (80456ac <UARTEx_SetNbDataToProcess+0x94>)
 8045668:	5c8a      	ldrb	r2, [r1, r2]
 804566a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 804566e:	7b3a      	ldrb	r2, [r7, #12]
 8045670:	490f      	ldr	r1, [pc, #60]	; (80456b0 <UARTEx_SetNbDataToProcess+0x98>)
 8045672:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8045674:	fb93 f3f2 	sdiv	r3, r3, r2
 8045678:	b29a      	uxth	r2, r3
 804567a:	687b      	ldr	r3, [r7, #4]
 804567c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8045680:	7bfb      	ldrb	r3, [r7, #15]
 8045682:	7b7a      	ldrb	r2, [r7, #13]
 8045684:	4909      	ldr	r1, [pc, #36]	; (80456ac <UARTEx_SetNbDataToProcess+0x94>)
 8045686:	5c8a      	ldrb	r2, [r1, r2]
 8045688:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 804568c:	7b7a      	ldrb	r2, [r7, #13]
 804568e:	4908      	ldr	r1, [pc, #32]	; (80456b0 <UARTEx_SetNbDataToProcess+0x98>)
 8045690:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8045692:	fb93 f3f2 	sdiv	r3, r3, r2
 8045696:	b29a      	uxth	r2, r3
 8045698:	687b      	ldr	r3, [r7, #4]
 804569a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 804569e:	bf00      	nop
 80456a0:	3714      	adds	r7, #20
 80456a2:	46bd      	mov	sp, r7
 80456a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80456a8:	4770      	bx	lr
 80456aa:	bf00      	nop
 80456ac:	0804679c 	.word	0x0804679c
 80456b0:	080467a4 	.word	0x080467a4

080456b4 <__errno>:
 80456b4:	4b01      	ldr	r3, [pc, #4]	; (80456bc <__errno+0x8>)
 80456b6:	6818      	ldr	r0, [r3, #0]
 80456b8:	4770      	bx	lr
 80456ba:	bf00      	nop
 80456bc:	24000010 	.word	0x24000010

080456c0 <__libc_init_array>:
 80456c0:	b570      	push	{r4, r5, r6, lr}
 80456c2:	4d0d      	ldr	r5, [pc, #52]	; (80456f8 <__libc_init_array+0x38>)
 80456c4:	4c0d      	ldr	r4, [pc, #52]	; (80456fc <__libc_init_array+0x3c>)
 80456c6:	1b64      	subs	r4, r4, r5
 80456c8:	10a4      	asrs	r4, r4, #2
 80456ca:	2600      	movs	r6, #0
 80456cc:	42a6      	cmp	r6, r4
 80456ce:	d109      	bne.n	80456e4 <__libc_init_array+0x24>
 80456d0:	4d0b      	ldr	r5, [pc, #44]	; (8045700 <__libc_init_array+0x40>)
 80456d2:	4c0c      	ldr	r4, [pc, #48]	; (8045704 <__libc_init_array+0x44>)
 80456d4:	f001 f824 	bl	8046720 <_init>
 80456d8:	1b64      	subs	r4, r4, r5
 80456da:	10a4      	asrs	r4, r4, #2
 80456dc:	2600      	movs	r6, #0
 80456de:	42a6      	cmp	r6, r4
 80456e0:	d105      	bne.n	80456ee <__libc_init_array+0x2e>
 80456e2:	bd70      	pop	{r4, r5, r6, pc}
 80456e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80456e8:	4798      	blx	r3
 80456ea:	3601      	adds	r6, #1
 80456ec:	e7ee      	b.n	80456cc <__libc_init_array+0xc>
 80456ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80456f2:	4798      	blx	r3
 80456f4:	3601      	adds	r6, #1
 80456f6:	e7f2      	b.n	80456de <__libc_init_array+0x1e>
 80456f8:	0804684c 	.word	0x0804684c
 80456fc:	0804684c 	.word	0x0804684c
 8045700:	0804684c 	.word	0x0804684c
 8045704:	08046850 	.word	0x08046850

08045708 <memset>:
 8045708:	4402      	add	r2, r0
 804570a:	4603      	mov	r3, r0
 804570c:	4293      	cmp	r3, r2
 804570e:	d100      	bne.n	8045712 <memset+0xa>
 8045710:	4770      	bx	lr
 8045712:	f803 1b01 	strb.w	r1, [r3], #1
 8045716:	e7f9      	b.n	804570c <memset+0x4>

08045718 <iprintf>:
 8045718:	b40f      	push	{r0, r1, r2, r3}
 804571a:	4b0a      	ldr	r3, [pc, #40]	; (8045744 <iprintf+0x2c>)
 804571c:	b513      	push	{r0, r1, r4, lr}
 804571e:	681c      	ldr	r4, [r3, #0]
 8045720:	b124      	cbz	r4, 804572c <iprintf+0x14>
 8045722:	69a3      	ldr	r3, [r4, #24]
 8045724:	b913      	cbnz	r3, 804572c <iprintf+0x14>
 8045726:	4620      	mov	r0, r4
 8045728:	f000 fa5e 	bl	8045be8 <__sinit>
 804572c:	ab05      	add	r3, sp, #20
 804572e:	9a04      	ldr	r2, [sp, #16]
 8045730:	68a1      	ldr	r1, [r4, #8]
 8045732:	9301      	str	r3, [sp, #4]
 8045734:	4620      	mov	r0, r4
 8045736:	f000 fc67 	bl	8046008 <_vfiprintf_r>
 804573a:	b002      	add	sp, #8
 804573c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8045740:	b004      	add	sp, #16
 8045742:	4770      	bx	lr
 8045744:	24000010 	.word	0x24000010

08045748 <_puts_r>:
 8045748:	b570      	push	{r4, r5, r6, lr}
 804574a:	460e      	mov	r6, r1
 804574c:	4605      	mov	r5, r0
 804574e:	b118      	cbz	r0, 8045758 <_puts_r+0x10>
 8045750:	6983      	ldr	r3, [r0, #24]
 8045752:	b90b      	cbnz	r3, 8045758 <_puts_r+0x10>
 8045754:	f000 fa48 	bl	8045be8 <__sinit>
 8045758:	69ab      	ldr	r3, [r5, #24]
 804575a:	68ac      	ldr	r4, [r5, #8]
 804575c:	b913      	cbnz	r3, 8045764 <_puts_r+0x1c>
 804575e:	4628      	mov	r0, r5
 8045760:	f000 fa42 	bl	8045be8 <__sinit>
 8045764:	4b2c      	ldr	r3, [pc, #176]	; (8045818 <_puts_r+0xd0>)
 8045766:	429c      	cmp	r4, r3
 8045768:	d120      	bne.n	80457ac <_puts_r+0x64>
 804576a:	686c      	ldr	r4, [r5, #4]
 804576c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 804576e:	07db      	lsls	r3, r3, #31
 8045770:	d405      	bmi.n	804577e <_puts_r+0x36>
 8045772:	89a3      	ldrh	r3, [r4, #12]
 8045774:	0598      	lsls	r0, r3, #22
 8045776:	d402      	bmi.n	804577e <_puts_r+0x36>
 8045778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 804577a:	f000 fad3 	bl	8045d24 <__retarget_lock_acquire_recursive>
 804577e:	89a3      	ldrh	r3, [r4, #12]
 8045780:	0719      	lsls	r1, r3, #28
 8045782:	d51d      	bpl.n	80457c0 <_puts_r+0x78>
 8045784:	6923      	ldr	r3, [r4, #16]
 8045786:	b1db      	cbz	r3, 80457c0 <_puts_r+0x78>
 8045788:	3e01      	subs	r6, #1
 804578a:	68a3      	ldr	r3, [r4, #8]
 804578c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8045790:	3b01      	subs	r3, #1
 8045792:	60a3      	str	r3, [r4, #8]
 8045794:	bb39      	cbnz	r1, 80457e6 <_puts_r+0x9e>
 8045796:	2b00      	cmp	r3, #0
 8045798:	da38      	bge.n	804580c <_puts_r+0xc4>
 804579a:	4622      	mov	r2, r4
 804579c:	210a      	movs	r1, #10
 804579e:	4628      	mov	r0, r5
 80457a0:	f000 f848 	bl	8045834 <__swbuf_r>
 80457a4:	3001      	adds	r0, #1
 80457a6:	d011      	beq.n	80457cc <_puts_r+0x84>
 80457a8:	250a      	movs	r5, #10
 80457aa:	e011      	b.n	80457d0 <_puts_r+0x88>
 80457ac:	4b1b      	ldr	r3, [pc, #108]	; (804581c <_puts_r+0xd4>)
 80457ae:	429c      	cmp	r4, r3
 80457b0:	d101      	bne.n	80457b6 <_puts_r+0x6e>
 80457b2:	68ac      	ldr	r4, [r5, #8]
 80457b4:	e7da      	b.n	804576c <_puts_r+0x24>
 80457b6:	4b1a      	ldr	r3, [pc, #104]	; (8045820 <_puts_r+0xd8>)
 80457b8:	429c      	cmp	r4, r3
 80457ba:	bf08      	it	eq
 80457bc:	68ec      	ldreq	r4, [r5, #12]
 80457be:	e7d5      	b.n	804576c <_puts_r+0x24>
 80457c0:	4621      	mov	r1, r4
 80457c2:	4628      	mov	r0, r5
 80457c4:	f000 f888 	bl	80458d8 <__swsetup_r>
 80457c8:	2800      	cmp	r0, #0
 80457ca:	d0dd      	beq.n	8045788 <_puts_r+0x40>
 80457cc:	f04f 35ff 	mov.w	r5, #4294967295
 80457d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80457d2:	07da      	lsls	r2, r3, #31
 80457d4:	d405      	bmi.n	80457e2 <_puts_r+0x9a>
 80457d6:	89a3      	ldrh	r3, [r4, #12]
 80457d8:	059b      	lsls	r3, r3, #22
 80457da:	d402      	bmi.n	80457e2 <_puts_r+0x9a>
 80457dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80457de:	f000 faa2 	bl	8045d26 <__retarget_lock_release_recursive>
 80457e2:	4628      	mov	r0, r5
 80457e4:	bd70      	pop	{r4, r5, r6, pc}
 80457e6:	2b00      	cmp	r3, #0
 80457e8:	da04      	bge.n	80457f4 <_puts_r+0xac>
 80457ea:	69a2      	ldr	r2, [r4, #24]
 80457ec:	429a      	cmp	r2, r3
 80457ee:	dc06      	bgt.n	80457fe <_puts_r+0xb6>
 80457f0:	290a      	cmp	r1, #10
 80457f2:	d004      	beq.n	80457fe <_puts_r+0xb6>
 80457f4:	6823      	ldr	r3, [r4, #0]
 80457f6:	1c5a      	adds	r2, r3, #1
 80457f8:	6022      	str	r2, [r4, #0]
 80457fa:	7019      	strb	r1, [r3, #0]
 80457fc:	e7c5      	b.n	804578a <_puts_r+0x42>
 80457fe:	4622      	mov	r2, r4
 8045800:	4628      	mov	r0, r5
 8045802:	f000 f817 	bl	8045834 <__swbuf_r>
 8045806:	3001      	adds	r0, #1
 8045808:	d1bf      	bne.n	804578a <_puts_r+0x42>
 804580a:	e7df      	b.n	80457cc <_puts_r+0x84>
 804580c:	6823      	ldr	r3, [r4, #0]
 804580e:	250a      	movs	r5, #10
 8045810:	1c5a      	adds	r2, r3, #1
 8045812:	6022      	str	r2, [r4, #0]
 8045814:	701d      	strb	r5, [r3, #0]
 8045816:	e7db      	b.n	80457d0 <_puts_r+0x88>
 8045818:	080467d0 	.word	0x080467d0
 804581c:	080467f0 	.word	0x080467f0
 8045820:	080467b0 	.word	0x080467b0

08045824 <puts>:
 8045824:	4b02      	ldr	r3, [pc, #8]	; (8045830 <puts+0xc>)
 8045826:	4601      	mov	r1, r0
 8045828:	6818      	ldr	r0, [r3, #0]
 804582a:	f7ff bf8d 	b.w	8045748 <_puts_r>
 804582e:	bf00      	nop
 8045830:	24000010 	.word	0x24000010

08045834 <__swbuf_r>:
 8045834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8045836:	460e      	mov	r6, r1
 8045838:	4614      	mov	r4, r2
 804583a:	4605      	mov	r5, r0
 804583c:	b118      	cbz	r0, 8045846 <__swbuf_r+0x12>
 804583e:	6983      	ldr	r3, [r0, #24]
 8045840:	b90b      	cbnz	r3, 8045846 <__swbuf_r+0x12>
 8045842:	f000 f9d1 	bl	8045be8 <__sinit>
 8045846:	4b21      	ldr	r3, [pc, #132]	; (80458cc <__swbuf_r+0x98>)
 8045848:	429c      	cmp	r4, r3
 804584a:	d12b      	bne.n	80458a4 <__swbuf_r+0x70>
 804584c:	686c      	ldr	r4, [r5, #4]
 804584e:	69a3      	ldr	r3, [r4, #24]
 8045850:	60a3      	str	r3, [r4, #8]
 8045852:	89a3      	ldrh	r3, [r4, #12]
 8045854:	071a      	lsls	r2, r3, #28
 8045856:	d52f      	bpl.n	80458b8 <__swbuf_r+0x84>
 8045858:	6923      	ldr	r3, [r4, #16]
 804585a:	b36b      	cbz	r3, 80458b8 <__swbuf_r+0x84>
 804585c:	6923      	ldr	r3, [r4, #16]
 804585e:	6820      	ldr	r0, [r4, #0]
 8045860:	1ac0      	subs	r0, r0, r3
 8045862:	6963      	ldr	r3, [r4, #20]
 8045864:	b2f6      	uxtb	r6, r6
 8045866:	4283      	cmp	r3, r0
 8045868:	4637      	mov	r7, r6
 804586a:	dc04      	bgt.n	8045876 <__swbuf_r+0x42>
 804586c:	4621      	mov	r1, r4
 804586e:	4628      	mov	r0, r5
 8045870:	f000 f926 	bl	8045ac0 <_fflush_r>
 8045874:	bb30      	cbnz	r0, 80458c4 <__swbuf_r+0x90>
 8045876:	68a3      	ldr	r3, [r4, #8]
 8045878:	3b01      	subs	r3, #1
 804587a:	60a3      	str	r3, [r4, #8]
 804587c:	6823      	ldr	r3, [r4, #0]
 804587e:	1c5a      	adds	r2, r3, #1
 8045880:	6022      	str	r2, [r4, #0]
 8045882:	701e      	strb	r6, [r3, #0]
 8045884:	6963      	ldr	r3, [r4, #20]
 8045886:	3001      	adds	r0, #1
 8045888:	4283      	cmp	r3, r0
 804588a:	d004      	beq.n	8045896 <__swbuf_r+0x62>
 804588c:	89a3      	ldrh	r3, [r4, #12]
 804588e:	07db      	lsls	r3, r3, #31
 8045890:	d506      	bpl.n	80458a0 <__swbuf_r+0x6c>
 8045892:	2e0a      	cmp	r6, #10
 8045894:	d104      	bne.n	80458a0 <__swbuf_r+0x6c>
 8045896:	4621      	mov	r1, r4
 8045898:	4628      	mov	r0, r5
 804589a:	f000 f911 	bl	8045ac0 <_fflush_r>
 804589e:	b988      	cbnz	r0, 80458c4 <__swbuf_r+0x90>
 80458a0:	4638      	mov	r0, r7
 80458a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80458a4:	4b0a      	ldr	r3, [pc, #40]	; (80458d0 <__swbuf_r+0x9c>)
 80458a6:	429c      	cmp	r4, r3
 80458a8:	d101      	bne.n	80458ae <__swbuf_r+0x7a>
 80458aa:	68ac      	ldr	r4, [r5, #8]
 80458ac:	e7cf      	b.n	804584e <__swbuf_r+0x1a>
 80458ae:	4b09      	ldr	r3, [pc, #36]	; (80458d4 <__swbuf_r+0xa0>)
 80458b0:	429c      	cmp	r4, r3
 80458b2:	bf08      	it	eq
 80458b4:	68ec      	ldreq	r4, [r5, #12]
 80458b6:	e7ca      	b.n	804584e <__swbuf_r+0x1a>
 80458b8:	4621      	mov	r1, r4
 80458ba:	4628      	mov	r0, r5
 80458bc:	f000 f80c 	bl	80458d8 <__swsetup_r>
 80458c0:	2800      	cmp	r0, #0
 80458c2:	d0cb      	beq.n	804585c <__swbuf_r+0x28>
 80458c4:	f04f 37ff 	mov.w	r7, #4294967295
 80458c8:	e7ea      	b.n	80458a0 <__swbuf_r+0x6c>
 80458ca:	bf00      	nop
 80458cc:	080467d0 	.word	0x080467d0
 80458d0:	080467f0 	.word	0x080467f0
 80458d4:	080467b0 	.word	0x080467b0

080458d8 <__swsetup_r>:
 80458d8:	4b32      	ldr	r3, [pc, #200]	; (80459a4 <__swsetup_r+0xcc>)
 80458da:	b570      	push	{r4, r5, r6, lr}
 80458dc:	681d      	ldr	r5, [r3, #0]
 80458de:	4606      	mov	r6, r0
 80458e0:	460c      	mov	r4, r1
 80458e2:	b125      	cbz	r5, 80458ee <__swsetup_r+0x16>
 80458e4:	69ab      	ldr	r3, [r5, #24]
 80458e6:	b913      	cbnz	r3, 80458ee <__swsetup_r+0x16>
 80458e8:	4628      	mov	r0, r5
 80458ea:	f000 f97d 	bl	8045be8 <__sinit>
 80458ee:	4b2e      	ldr	r3, [pc, #184]	; (80459a8 <__swsetup_r+0xd0>)
 80458f0:	429c      	cmp	r4, r3
 80458f2:	d10f      	bne.n	8045914 <__swsetup_r+0x3c>
 80458f4:	686c      	ldr	r4, [r5, #4]
 80458f6:	89a3      	ldrh	r3, [r4, #12]
 80458f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80458fc:	0719      	lsls	r1, r3, #28
 80458fe:	d42c      	bmi.n	804595a <__swsetup_r+0x82>
 8045900:	06dd      	lsls	r5, r3, #27
 8045902:	d411      	bmi.n	8045928 <__swsetup_r+0x50>
 8045904:	2309      	movs	r3, #9
 8045906:	6033      	str	r3, [r6, #0]
 8045908:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 804590c:	81a3      	strh	r3, [r4, #12]
 804590e:	f04f 30ff 	mov.w	r0, #4294967295
 8045912:	e03e      	b.n	8045992 <__swsetup_r+0xba>
 8045914:	4b25      	ldr	r3, [pc, #148]	; (80459ac <__swsetup_r+0xd4>)
 8045916:	429c      	cmp	r4, r3
 8045918:	d101      	bne.n	804591e <__swsetup_r+0x46>
 804591a:	68ac      	ldr	r4, [r5, #8]
 804591c:	e7eb      	b.n	80458f6 <__swsetup_r+0x1e>
 804591e:	4b24      	ldr	r3, [pc, #144]	; (80459b0 <__swsetup_r+0xd8>)
 8045920:	429c      	cmp	r4, r3
 8045922:	bf08      	it	eq
 8045924:	68ec      	ldreq	r4, [r5, #12]
 8045926:	e7e6      	b.n	80458f6 <__swsetup_r+0x1e>
 8045928:	0758      	lsls	r0, r3, #29
 804592a:	d512      	bpl.n	8045952 <__swsetup_r+0x7a>
 804592c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 804592e:	b141      	cbz	r1, 8045942 <__swsetup_r+0x6a>
 8045930:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8045934:	4299      	cmp	r1, r3
 8045936:	d002      	beq.n	804593e <__swsetup_r+0x66>
 8045938:	4630      	mov	r0, r6
 804593a:	f000 fa5b 	bl	8045df4 <_free_r>
 804593e:	2300      	movs	r3, #0
 8045940:	6363      	str	r3, [r4, #52]	; 0x34
 8045942:	89a3      	ldrh	r3, [r4, #12]
 8045944:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8045948:	81a3      	strh	r3, [r4, #12]
 804594a:	2300      	movs	r3, #0
 804594c:	6063      	str	r3, [r4, #4]
 804594e:	6923      	ldr	r3, [r4, #16]
 8045950:	6023      	str	r3, [r4, #0]
 8045952:	89a3      	ldrh	r3, [r4, #12]
 8045954:	f043 0308 	orr.w	r3, r3, #8
 8045958:	81a3      	strh	r3, [r4, #12]
 804595a:	6923      	ldr	r3, [r4, #16]
 804595c:	b94b      	cbnz	r3, 8045972 <__swsetup_r+0x9a>
 804595e:	89a3      	ldrh	r3, [r4, #12]
 8045960:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8045964:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8045968:	d003      	beq.n	8045972 <__swsetup_r+0x9a>
 804596a:	4621      	mov	r1, r4
 804596c:	4630      	mov	r0, r6
 804596e:	f000 fa01 	bl	8045d74 <__smakebuf_r>
 8045972:	89a0      	ldrh	r0, [r4, #12]
 8045974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8045978:	f010 0301 	ands.w	r3, r0, #1
 804597c:	d00a      	beq.n	8045994 <__swsetup_r+0xbc>
 804597e:	2300      	movs	r3, #0
 8045980:	60a3      	str	r3, [r4, #8]
 8045982:	6963      	ldr	r3, [r4, #20]
 8045984:	425b      	negs	r3, r3
 8045986:	61a3      	str	r3, [r4, #24]
 8045988:	6923      	ldr	r3, [r4, #16]
 804598a:	b943      	cbnz	r3, 804599e <__swsetup_r+0xc6>
 804598c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8045990:	d1ba      	bne.n	8045908 <__swsetup_r+0x30>
 8045992:	bd70      	pop	{r4, r5, r6, pc}
 8045994:	0781      	lsls	r1, r0, #30
 8045996:	bf58      	it	pl
 8045998:	6963      	ldrpl	r3, [r4, #20]
 804599a:	60a3      	str	r3, [r4, #8]
 804599c:	e7f4      	b.n	8045988 <__swsetup_r+0xb0>
 804599e:	2000      	movs	r0, #0
 80459a0:	e7f7      	b.n	8045992 <__swsetup_r+0xba>
 80459a2:	bf00      	nop
 80459a4:	24000010 	.word	0x24000010
 80459a8:	080467d0 	.word	0x080467d0
 80459ac:	080467f0 	.word	0x080467f0
 80459b0:	080467b0 	.word	0x080467b0

080459b4 <__sflush_r>:
 80459b4:	898a      	ldrh	r2, [r1, #12]
 80459b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80459ba:	4605      	mov	r5, r0
 80459bc:	0710      	lsls	r0, r2, #28
 80459be:	460c      	mov	r4, r1
 80459c0:	d458      	bmi.n	8045a74 <__sflush_r+0xc0>
 80459c2:	684b      	ldr	r3, [r1, #4]
 80459c4:	2b00      	cmp	r3, #0
 80459c6:	dc05      	bgt.n	80459d4 <__sflush_r+0x20>
 80459c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80459ca:	2b00      	cmp	r3, #0
 80459cc:	dc02      	bgt.n	80459d4 <__sflush_r+0x20>
 80459ce:	2000      	movs	r0, #0
 80459d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80459d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80459d6:	2e00      	cmp	r6, #0
 80459d8:	d0f9      	beq.n	80459ce <__sflush_r+0x1a>
 80459da:	2300      	movs	r3, #0
 80459dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80459e0:	682f      	ldr	r7, [r5, #0]
 80459e2:	602b      	str	r3, [r5, #0]
 80459e4:	d032      	beq.n	8045a4c <__sflush_r+0x98>
 80459e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80459e8:	89a3      	ldrh	r3, [r4, #12]
 80459ea:	075a      	lsls	r2, r3, #29
 80459ec:	d505      	bpl.n	80459fa <__sflush_r+0x46>
 80459ee:	6863      	ldr	r3, [r4, #4]
 80459f0:	1ac0      	subs	r0, r0, r3
 80459f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80459f4:	b10b      	cbz	r3, 80459fa <__sflush_r+0x46>
 80459f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80459f8:	1ac0      	subs	r0, r0, r3
 80459fa:	2300      	movs	r3, #0
 80459fc:	4602      	mov	r2, r0
 80459fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8045a00:	6a21      	ldr	r1, [r4, #32]
 8045a02:	4628      	mov	r0, r5
 8045a04:	47b0      	blx	r6
 8045a06:	1c43      	adds	r3, r0, #1
 8045a08:	89a3      	ldrh	r3, [r4, #12]
 8045a0a:	d106      	bne.n	8045a1a <__sflush_r+0x66>
 8045a0c:	6829      	ldr	r1, [r5, #0]
 8045a0e:	291d      	cmp	r1, #29
 8045a10:	d82c      	bhi.n	8045a6c <__sflush_r+0xb8>
 8045a12:	4a2a      	ldr	r2, [pc, #168]	; (8045abc <__sflush_r+0x108>)
 8045a14:	40ca      	lsrs	r2, r1
 8045a16:	07d6      	lsls	r6, r2, #31
 8045a18:	d528      	bpl.n	8045a6c <__sflush_r+0xb8>
 8045a1a:	2200      	movs	r2, #0
 8045a1c:	6062      	str	r2, [r4, #4]
 8045a1e:	04d9      	lsls	r1, r3, #19
 8045a20:	6922      	ldr	r2, [r4, #16]
 8045a22:	6022      	str	r2, [r4, #0]
 8045a24:	d504      	bpl.n	8045a30 <__sflush_r+0x7c>
 8045a26:	1c42      	adds	r2, r0, #1
 8045a28:	d101      	bne.n	8045a2e <__sflush_r+0x7a>
 8045a2a:	682b      	ldr	r3, [r5, #0]
 8045a2c:	b903      	cbnz	r3, 8045a30 <__sflush_r+0x7c>
 8045a2e:	6560      	str	r0, [r4, #84]	; 0x54
 8045a30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8045a32:	602f      	str	r7, [r5, #0]
 8045a34:	2900      	cmp	r1, #0
 8045a36:	d0ca      	beq.n	80459ce <__sflush_r+0x1a>
 8045a38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8045a3c:	4299      	cmp	r1, r3
 8045a3e:	d002      	beq.n	8045a46 <__sflush_r+0x92>
 8045a40:	4628      	mov	r0, r5
 8045a42:	f000 f9d7 	bl	8045df4 <_free_r>
 8045a46:	2000      	movs	r0, #0
 8045a48:	6360      	str	r0, [r4, #52]	; 0x34
 8045a4a:	e7c1      	b.n	80459d0 <__sflush_r+0x1c>
 8045a4c:	6a21      	ldr	r1, [r4, #32]
 8045a4e:	2301      	movs	r3, #1
 8045a50:	4628      	mov	r0, r5
 8045a52:	47b0      	blx	r6
 8045a54:	1c41      	adds	r1, r0, #1
 8045a56:	d1c7      	bne.n	80459e8 <__sflush_r+0x34>
 8045a58:	682b      	ldr	r3, [r5, #0]
 8045a5a:	2b00      	cmp	r3, #0
 8045a5c:	d0c4      	beq.n	80459e8 <__sflush_r+0x34>
 8045a5e:	2b1d      	cmp	r3, #29
 8045a60:	d001      	beq.n	8045a66 <__sflush_r+0xb2>
 8045a62:	2b16      	cmp	r3, #22
 8045a64:	d101      	bne.n	8045a6a <__sflush_r+0xb6>
 8045a66:	602f      	str	r7, [r5, #0]
 8045a68:	e7b1      	b.n	80459ce <__sflush_r+0x1a>
 8045a6a:	89a3      	ldrh	r3, [r4, #12]
 8045a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8045a70:	81a3      	strh	r3, [r4, #12]
 8045a72:	e7ad      	b.n	80459d0 <__sflush_r+0x1c>
 8045a74:	690f      	ldr	r7, [r1, #16]
 8045a76:	2f00      	cmp	r7, #0
 8045a78:	d0a9      	beq.n	80459ce <__sflush_r+0x1a>
 8045a7a:	0793      	lsls	r3, r2, #30
 8045a7c:	680e      	ldr	r6, [r1, #0]
 8045a7e:	bf08      	it	eq
 8045a80:	694b      	ldreq	r3, [r1, #20]
 8045a82:	600f      	str	r7, [r1, #0]
 8045a84:	bf18      	it	ne
 8045a86:	2300      	movne	r3, #0
 8045a88:	eba6 0807 	sub.w	r8, r6, r7
 8045a8c:	608b      	str	r3, [r1, #8]
 8045a8e:	f1b8 0f00 	cmp.w	r8, #0
 8045a92:	dd9c      	ble.n	80459ce <__sflush_r+0x1a>
 8045a94:	6a21      	ldr	r1, [r4, #32]
 8045a96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8045a98:	4643      	mov	r3, r8
 8045a9a:	463a      	mov	r2, r7
 8045a9c:	4628      	mov	r0, r5
 8045a9e:	47b0      	blx	r6
 8045aa0:	2800      	cmp	r0, #0
 8045aa2:	dc06      	bgt.n	8045ab2 <__sflush_r+0xfe>
 8045aa4:	89a3      	ldrh	r3, [r4, #12]
 8045aa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8045aaa:	81a3      	strh	r3, [r4, #12]
 8045aac:	f04f 30ff 	mov.w	r0, #4294967295
 8045ab0:	e78e      	b.n	80459d0 <__sflush_r+0x1c>
 8045ab2:	4407      	add	r7, r0
 8045ab4:	eba8 0800 	sub.w	r8, r8, r0
 8045ab8:	e7e9      	b.n	8045a8e <__sflush_r+0xda>
 8045aba:	bf00      	nop
 8045abc:	20400001 	.word	0x20400001

08045ac0 <_fflush_r>:
 8045ac0:	b538      	push	{r3, r4, r5, lr}
 8045ac2:	690b      	ldr	r3, [r1, #16]
 8045ac4:	4605      	mov	r5, r0
 8045ac6:	460c      	mov	r4, r1
 8045ac8:	b913      	cbnz	r3, 8045ad0 <_fflush_r+0x10>
 8045aca:	2500      	movs	r5, #0
 8045acc:	4628      	mov	r0, r5
 8045ace:	bd38      	pop	{r3, r4, r5, pc}
 8045ad0:	b118      	cbz	r0, 8045ada <_fflush_r+0x1a>
 8045ad2:	6983      	ldr	r3, [r0, #24]
 8045ad4:	b90b      	cbnz	r3, 8045ada <_fflush_r+0x1a>
 8045ad6:	f000 f887 	bl	8045be8 <__sinit>
 8045ada:	4b14      	ldr	r3, [pc, #80]	; (8045b2c <_fflush_r+0x6c>)
 8045adc:	429c      	cmp	r4, r3
 8045ade:	d11b      	bne.n	8045b18 <_fflush_r+0x58>
 8045ae0:	686c      	ldr	r4, [r5, #4]
 8045ae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8045ae6:	2b00      	cmp	r3, #0
 8045ae8:	d0ef      	beq.n	8045aca <_fflush_r+0xa>
 8045aea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8045aec:	07d0      	lsls	r0, r2, #31
 8045aee:	d404      	bmi.n	8045afa <_fflush_r+0x3a>
 8045af0:	0599      	lsls	r1, r3, #22
 8045af2:	d402      	bmi.n	8045afa <_fflush_r+0x3a>
 8045af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8045af6:	f000 f915 	bl	8045d24 <__retarget_lock_acquire_recursive>
 8045afa:	4628      	mov	r0, r5
 8045afc:	4621      	mov	r1, r4
 8045afe:	f7ff ff59 	bl	80459b4 <__sflush_r>
 8045b02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8045b04:	07da      	lsls	r2, r3, #31
 8045b06:	4605      	mov	r5, r0
 8045b08:	d4e0      	bmi.n	8045acc <_fflush_r+0xc>
 8045b0a:	89a3      	ldrh	r3, [r4, #12]
 8045b0c:	059b      	lsls	r3, r3, #22
 8045b0e:	d4dd      	bmi.n	8045acc <_fflush_r+0xc>
 8045b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8045b12:	f000 f908 	bl	8045d26 <__retarget_lock_release_recursive>
 8045b16:	e7d9      	b.n	8045acc <_fflush_r+0xc>
 8045b18:	4b05      	ldr	r3, [pc, #20]	; (8045b30 <_fflush_r+0x70>)
 8045b1a:	429c      	cmp	r4, r3
 8045b1c:	d101      	bne.n	8045b22 <_fflush_r+0x62>
 8045b1e:	68ac      	ldr	r4, [r5, #8]
 8045b20:	e7df      	b.n	8045ae2 <_fflush_r+0x22>
 8045b22:	4b04      	ldr	r3, [pc, #16]	; (8045b34 <_fflush_r+0x74>)
 8045b24:	429c      	cmp	r4, r3
 8045b26:	bf08      	it	eq
 8045b28:	68ec      	ldreq	r4, [r5, #12]
 8045b2a:	e7da      	b.n	8045ae2 <_fflush_r+0x22>
 8045b2c:	080467d0 	.word	0x080467d0
 8045b30:	080467f0 	.word	0x080467f0
 8045b34:	080467b0 	.word	0x080467b0

08045b38 <std>:
 8045b38:	2300      	movs	r3, #0
 8045b3a:	b510      	push	{r4, lr}
 8045b3c:	4604      	mov	r4, r0
 8045b3e:	e9c0 3300 	strd	r3, r3, [r0]
 8045b42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8045b46:	6083      	str	r3, [r0, #8]
 8045b48:	8181      	strh	r1, [r0, #12]
 8045b4a:	6643      	str	r3, [r0, #100]	; 0x64
 8045b4c:	81c2      	strh	r2, [r0, #14]
 8045b4e:	6183      	str	r3, [r0, #24]
 8045b50:	4619      	mov	r1, r3
 8045b52:	2208      	movs	r2, #8
 8045b54:	305c      	adds	r0, #92	; 0x5c
 8045b56:	f7ff fdd7 	bl	8045708 <memset>
 8045b5a:	4b05      	ldr	r3, [pc, #20]	; (8045b70 <std+0x38>)
 8045b5c:	6263      	str	r3, [r4, #36]	; 0x24
 8045b5e:	4b05      	ldr	r3, [pc, #20]	; (8045b74 <std+0x3c>)
 8045b60:	62a3      	str	r3, [r4, #40]	; 0x28
 8045b62:	4b05      	ldr	r3, [pc, #20]	; (8045b78 <std+0x40>)
 8045b64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8045b66:	4b05      	ldr	r3, [pc, #20]	; (8045b7c <std+0x44>)
 8045b68:	6224      	str	r4, [r4, #32]
 8045b6a:	6323      	str	r3, [r4, #48]	; 0x30
 8045b6c:	bd10      	pop	{r4, pc}
 8045b6e:	bf00      	nop
 8045b70:	080465b1 	.word	0x080465b1
 8045b74:	080465d3 	.word	0x080465d3
 8045b78:	0804660b 	.word	0x0804660b
 8045b7c:	0804662f 	.word	0x0804662f

08045b80 <_cleanup_r>:
 8045b80:	4901      	ldr	r1, [pc, #4]	; (8045b88 <_cleanup_r+0x8>)
 8045b82:	f000 b8af 	b.w	8045ce4 <_fwalk_reent>
 8045b86:	bf00      	nop
 8045b88:	08045ac1 	.word	0x08045ac1

08045b8c <__sfmoreglue>:
 8045b8c:	b570      	push	{r4, r5, r6, lr}
 8045b8e:	2268      	movs	r2, #104	; 0x68
 8045b90:	1e4d      	subs	r5, r1, #1
 8045b92:	4355      	muls	r5, r2
 8045b94:	460e      	mov	r6, r1
 8045b96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8045b9a:	f000 f997 	bl	8045ecc <_malloc_r>
 8045b9e:	4604      	mov	r4, r0
 8045ba0:	b140      	cbz	r0, 8045bb4 <__sfmoreglue+0x28>
 8045ba2:	2100      	movs	r1, #0
 8045ba4:	e9c0 1600 	strd	r1, r6, [r0]
 8045ba8:	300c      	adds	r0, #12
 8045baa:	60a0      	str	r0, [r4, #8]
 8045bac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8045bb0:	f7ff fdaa 	bl	8045708 <memset>
 8045bb4:	4620      	mov	r0, r4
 8045bb6:	bd70      	pop	{r4, r5, r6, pc}

08045bb8 <__sfp_lock_acquire>:
 8045bb8:	4801      	ldr	r0, [pc, #4]	; (8045bc0 <__sfp_lock_acquire+0x8>)
 8045bba:	f000 b8b3 	b.w	8045d24 <__retarget_lock_acquire_recursive>
 8045bbe:	bf00      	nop
 8045bc0:	2400012d 	.word	0x2400012d

08045bc4 <__sfp_lock_release>:
 8045bc4:	4801      	ldr	r0, [pc, #4]	; (8045bcc <__sfp_lock_release+0x8>)
 8045bc6:	f000 b8ae 	b.w	8045d26 <__retarget_lock_release_recursive>
 8045bca:	bf00      	nop
 8045bcc:	2400012d 	.word	0x2400012d

08045bd0 <__sinit_lock_acquire>:
 8045bd0:	4801      	ldr	r0, [pc, #4]	; (8045bd8 <__sinit_lock_acquire+0x8>)
 8045bd2:	f000 b8a7 	b.w	8045d24 <__retarget_lock_acquire_recursive>
 8045bd6:	bf00      	nop
 8045bd8:	2400012e 	.word	0x2400012e

08045bdc <__sinit_lock_release>:
 8045bdc:	4801      	ldr	r0, [pc, #4]	; (8045be4 <__sinit_lock_release+0x8>)
 8045bde:	f000 b8a2 	b.w	8045d26 <__retarget_lock_release_recursive>
 8045be2:	bf00      	nop
 8045be4:	2400012e 	.word	0x2400012e

08045be8 <__sinit>:
 8045be8:	b510      	push	{r4, lr}
 8045bea:	4604      	mov	r4, r0
 8045bec:	f7ff fff0 	bl	8045bd0 <__sinit_lock_acquire>
 8045bf0:	69a3      	ldr	r3, [r4, #24]
 8045bf2:	b11b      	cbz	r3, 8045bfc <__sinit+0x14>
 8045bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8045bf8:	f7ff bff0 	b.w	8045bdc <__sinit_lock_release>
 8045bfc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8045c00:	6523      	str	r3, [r4, #80]	; 0x50
 8045c02:	4b13      	ldr	r3, [pc, #76]	; (8045c50 <__sinit+0x68>)
 8045c04:	4a13      	ldr	r2, [pc, #76]	; (8045c54 <__sinit+0x6c>)
 8045c06:	681b      	ldr	r3, [r3, #0]
 8045c08:	62a2      	str	r2, [r4, #40]	; 0x28
 8045c0a:	42a3      	cmp	r3, r4
 8045c0c:	bf04      	itt	eq
 8045c0e:	2301      	moveq	r3, #1
 8045c10:	61a3      	streq	r3, [r4, #24]
 8045c12:	4620      	mov	r0, r4
 8045c14:	f000 f820 	bl	8045c58 <__sfp>
 8045c18:	6060      	str	r0, [r4, #4]
 8045c1a:	4620      	mov	r0, r4
 8045c1c:	f000 f81c 	bl	8045c58 <__sfp>
 8045c20:	60a0      	str	r0, [r4, #8]
 8045c22:	4620      	mov	r0, r4
 8045c24:	f000 f818 	bl	8045c58 <__sfp>
 8045c28:	2200      	movs	r2, #0
 8045c2a:	60e0      	str	r0, [r4, #12]
 8045c2c:	2104      	movs	r1, #4
 8045c2e:	6860      	ldr	r0, [r4, #4]
 8045c30:	f7ff ff82 	bl	8045b38 <std>
 8045c34:	68a0      	ldr	r0, [r4, #8]
 8045c36:	2201      	movs	r2, #1
 8045c38:	2109      	movs	r1, #9
 8045c3a:	f7ff ff7d 	bl	8045b38 <std>
 8045c3e:	68e0      	ldr	r0, [r4, #12]
 8045c40:	2202      	movs	r2, #2
 8045c42:	2112      	movs	r1, #18
 8045c44:	f7ff ff78 	bl	8045b38 <std>
 8045c48:	2301      	movs	r3, #1
 8045c4a:	61a3      	str	r3, [r4, #24]
 8045c4c:	e7d2      	b.n	8045bf4 <__sinit+0xc>
 8045c4e:	bf00      	nop
 8045c50:	080467ac 	.word	0x080467ac
 8045c54:	08045b81 	.word	0x08045b81

08045c58 <__sfp>:
 8045c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8045c5a:	4607      	mov	r7, r0
 8045c5c:	f7ff ffac 	bl	8045bb8 <__sfp_lock_acquire>
 8045c60:	4b1e      	ldr	r3, [pc, #120]	; (8045cdc <__sfp+0x84>)
 8045c62:	681e      	ldr	r6, [r3, #0]
 8045c64:	69b3      	ldr	r3, [r6, #24]
 8045c66:	b913      	cbnz	r3, 8045c6e <__sfp+0x16>
 8045c68:	4630      	mov	r0, r6
 8045c6a:	f7ff ffbd 	bl	8045be8 <__sinit>
 8045c6e:	3648      	adds	r6, #72	; 0x48
 8045c70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8045c74:	3b01      	subs	r3, #1
 8045c76:	d503      	bpl.n	8045c80 <__sfp+0x28>
 8045c78:	6833      	ldr	r3, [r6, #0]
 8045c7a:	b30b      	cbz	r3, 8045cc0 <__sfp+0x68>
 8045c7c:	6836      	ldr	r6, [r6, #0]
 8045c7e:	e7f7      	b.n	8045c70 <__sfp+0x18>
 8045c80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8045c84:	b9d5      	cbnz	r5, 8045cbc <__sfp+0x64>
 8045c86:	4b16      	ldr	r3, [pc, #88]	; (8045ce0 <__sfp+0x88>)
 8045c88:	60e3      	str	r3, [r4, #12]
 8045c8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8045c8e:	6665      	str	r5, [r4, #100]	; 0x64
 8045c90:	f000 f847 	bl	8045d22 <__retarget_lock_init_recursive>
 8045c94:	f7ff ff96 	bl	8045bc4 <__sfp_lock_release>
 8045c98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8045c9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8045ca0:	6025      	str	r5, [r4, #0]
 8045ca2:	61a5      	str	r5, [r4, #24]
 8045ca4:	2208      	movs	r2, #8
 8045ca6:	4629      	mov	r1, r5
 8045ca8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8045cac:	f7ff fd2c 	bl	8045708 <memset>
 8045cb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8045cb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8045cb8:	4620      	mov	r0, r4
 8045cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8045cbc:	3468      	adds	r4, #104	; 0x68
 8045cbe:	e7d9      	b.n	8045c74 <__sfp+0x1c>
 8045cc0:	2104      	movs	r1, #4
 8045cc2:	4638      	mov	r0, r7
 8045cc4:	f7ff ff62 	bl	8045b8c <__sfmoreglue>
 8045cc8:	4604      	mov	r4, r0
 8045cca:	6030      	str	r0, [r6, #0]
 8045ccc:	2800      	cmp	r0, #0
 8045cce:	d1d5      	bne.n	8045c7c <__sfp+0x24>
 8045cd0:	f7ff ff78 	bl	8045bc4 <__sfp_lock_release>
 8045cd4:	230c      	movs	r3, #12
 8045cd6:	603b      	str	r3, [r7, #0]
 8045cd8:	e7ee      	b.n	8045cb8 <__sfp+0x60>
 8045cda:	bf00      	nop
 8045cdc:	080467ac 	.word	0x080467ac
 8045ce0:	ffff0001 	.word	0xffff0001

08045ce4 <_fwalk_reent>:
 8045ce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8045ce8:	4606      	mov	r6, r0
 8045cea:	4688      	mov	r8, r1
 8045cec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8045cf0:	2700      	movs	r7, #0
 8045cf2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8045cf6:	f1b9 0901 	subs.w	r9, r9, #1
 8045cfa:	d505      	bpl.n	8045d08 <_fwalk_reent+0x24>
 8045cfc:	6824      	ldr	r4, [r4, #0]
 8045cfe:	2c00      	cmp	r4, #0
 8045d00:	d1f7      	bne.n	8045cf2 <_fwalk_reent+0xe>
 8045d02:	4638      	mov	r0, r7
 8045d04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8045d08:	89ab      	ldrh	r3, [r5, #12]
 8045d0a:	2b01      	cmp	r3, #1
 8045d0c:	d907      	bls.n	8045d1e <_fwalk_reent+0x3a>
 8045d0e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8045d12:	3301      	adds	r3, #1
 8045d14:	d003      	beq.n	8045d1e <_fwalk_reent+0x3a>
 8045d16:	4629      	mov	r1, r5
 8045d18:	4630      	mov	r0, r6
 8045d1a:	47c0      	blx	r8
 8045d1c:	4307      	orrs	r7, r0
 8045d1e:	3568      	adds	r5, #104	; 0x68
 8045d20:	e7e9      	b.n	8045cf6 <_fwalk_reent+0x12>

08045d22 <__retarget_lock_init_recursive>:
 8045d22:	4770      	bx	lr

08045d24 <__retarget_lock_acquire_recursive>:
 8045d24:	4770      	bx	lr

08045d26 <__retarget_lock_release_recursive>:
 8045d26:	4770      	bx	lr

08045d28 <__swhatbuf_r>:
 8045d28:	b570      	push	{r4, r5, r6, lr}
 8045d2a:	460e      	mov	r6, r1
 8045d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8045d30:	2900      	cmp	r1, #0
 8045d32:	b096      	sub	sp, #88	; 0x58
 8045d34:	4614      	mov	r4, r2
 8045d36:	461d      	mov	r5, r3
 8045d38:	da08      	bge.n	8045d4c <__swhatbuf_r+0x24>
 8045d3a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8045d3e:	2200      	movs	r2, #0
 8045d40:	602a      	str	r2, [r5, #0]
 8045d42:	061a      	lsls	r2, r3, #24
 8045d44:	d410      	bmi.n	8045d68 <__swhatbuf_r+0x40>
 8045d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8045d4a:	e00e      	b.n	8045d6a <__swhatbuf_r+0x42>
 8045d4c:	466a      	mov	r2, sp
 8045d4e:	f000 fc95 	bl	804667c <_fstat_r>
 8045d52:	2800      	cmp	r0, #0
 8045d54:	dbf1      	blt.n	8045d3a <__swhatbuf_r+0x12>
 8045d56:	9a01      	ldr	r2, [sp, #4]
 8045d58:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8045d5c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8045d60:	425a      	negs	r2, r3
 8045d62:	415a      	adcs	r2, r3
 8045d64:	602a      	str	r2, [r5, #0]
 8045d66:	e7ee      	b.n	8045d46 <__swhatbuf_r+0x1e>
 8045d68:	2340      	movs	r3, #64	; 0x40
 8045d6a:	2000      	movs	r0, #0
 8045d6c:	6023      	str	r3, [r4, #0]
 8045d6e:	b016      	add	sp, #88	; 0x58
 8045d70:	bd70      	pop	{r4, r5, r6, pc}
	...

08045d74 <__smakebuf_r>:
 8045d74:	898b      	ldrh	r3, [r1, #12]
 8045d76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8045d78:	079d      	lsls	r5, r3, #30
 8045d7a:	4606      	mov	r6, r0
 8045d7c:	460c      	mov	r4, r1
 8045d7e:	d507      	bpl.n	8045d90 <__smakebuf_r+0x1c>
 8045d80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8045d84:	6023      	str	r3, [r4, #0]
 8045d86:	6123      	str	r3, [r4, #16]
 8045d88:	2301      	movs	r3, #1
 8045d8a:	6163      	str	r3, [r4, #20]
 8045d8c:	b002      	add	sp, #8
 8045d8e:	bd70      	pop	{r4, r5, r6, pc}
 8045d90:	ab01      	add	r3, sp, #4
 8045d92:	466a      	mov	r2, sp
 8045d94:	f7ff ffc8 	bl	8045d28 <__swhatbuf_r>
 8045d98:	9900      	ldr	r1, [sp, #0]
 8045d9a:	4605      	mov	r5, r0
 8045d9c:	4630      	mov	r0, r6
 8045d9e:	f000 f895 	bl	8045ecc <_malloc_r>
 8045da2:	b948      	cbnz	r0, 8045db8 <__smakebuf_r+0x44>
 8045da4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8045da8:	059a      	lsls	r2, r3, #22
 8045daa:	d4ef      	bmi.n	8045d8c <__smakebuf_r+0x18>
 8045dac:	f023 0303 	bic.w	r3, r3, #3
 8045db0:	f043 0302 	orr.w	r3, r3, #2
 8045db4:	81a3      	strh	r3, [r4, #12]
 8045db6:	e7e3      	b.n	8045d80 <__smakebuf_r+0xc>
 8045db8:	4b0d      	ldr	r3, [pc, #52]	; (8045df0 <__smakebuf_r+0x7c>)
 8045dba:	62b3      	str	r3, [r6, #40]	; 0x28
 8045dbc:	89a3      	ldrh	r3, [r4, #12]
 8045dbe:	6020      	str	r0, [r4, #0]
 8045dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8045dc4:	81a3      	strh	r3, [r4, #12]
 8045dc6:	9b00      	ldr	r3, [sp, #0]
 8045dc8:	6163      	str	r3, [r4, #20]
 8045dca:	9b01      	ldr	r3, [sp, #4]
 8045dcc:	6120      	str	r0, [r4, #16]
 8045dce:	b15b      	cbz	r3, 8045de8 <__smakebuf_r+0x74>
 8045dd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8045dd4:	4630      	mov	r0, r6
 8045dd6:	f000 fc63 	bl	80466a0 <_isatty_r>
 8045dda:	b128      	cbz	r0, 8045de8 <__smakebuf_r+0x74>
 8045ddc:	89a3      	ldrh	r3, [r4, #12]
 8045dde:	f023 0303 	bic.w	r3, r3, #3
 8045de2:	f043 0301 	orr.w	r3, r3, #1
 8045de6:	81a3      	strh	r3, [r4, #12]
 8045de8:	89a0      	ldrh	r0, [r4, #12]
 8045dea:	4305      	orrs	r5, r0
 8045dec:	81a5      	strh	r5, [r4, #12]
 8045dee:	e7cd      	b.n	8045d8c <__smakebuf_r+0x18>
 8045df0:	08045b81 	.word	0x08045b81

08045df4 <_free_r>:
 8045df4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8045df6:	2900      	cmp	r1, #0
 8045df8:	d044      	beq.n	8045e84 <_free_r+0x90>
 8045dfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8045dfe:	9001      	str	r0, [sp, #4]
 8045e00:	2b00      	cmp	r3, #0
 8045e02:	f1a1 0404 	sub.w	r4, r1, #4
 8045e06:	bfb8      	it	lt
 8045e08:	18e4      	addlt	r4, r4, r3
 8045e0a:	f000 fc6b 	bl	80466e4 <__malloc_lock>
 8045e0e:	4a1e      	ldr	r2, [pc, #120]	; (8045e88 <_free_r+0x94>)
 8045e10:	9801      	ldr	r0, [sp, #4]
 8045e12:	6813      	ldr	r3, [r2, #0]
 8045e14:	b933      	cbnz	r3, 8045e24 <_free_r+0x30>
 8045e16:	6063      	str	r3, [r4, #4]
 8045e18:	6014      	str	r4, [r2, #0]
 8045e1a:	b003      	add	sp, #12
 8045e1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8045e20:	f000 bc66 	b.w	80466f0 <__malloc_unlock>
 8045e24:	42a3      	cmp	r3, r4
 8045e26:	d908      	bls.n	8045e3a <_free_r+0x46>
 8045e28:	6825      	ldr	r5, [r4, #0]
 8045e2a:	1961      	adds	r1, r4, r5
 8045e2c:	428b      	cmp	r3, r1
 8045e2e:	bf01      	itttt	eq
 8045e30:	6819      	ldreq	r1, [r3, #0]
 8045e32:	685b      	ldreq	r3, [r3, #4]
 8045e34:	1949      	addeq	r1, r1, r5
 8045e36:	6021      	streq	r1, [r4, #0]
 8045e38:	e7ed      	b.n	8045e16 <_free_r+0x22>
 8045e3a:	461a      	mov	r2, r3
 8045e3c:	685b      	ldr	r3, [r3, #4]
 8045e3e:	b10b      	cbz	r3, 8045e44 <_free_r+0x50>
 8045e40:	42a3      	cmp	r3, r4
 8045e42:	d9fa      	bls.n	8045e3a <_free_r+0x46>
 8045e44:	6811      	ldr	r1, [r2, #0]
 8045e46:	1855      	adds	r5, r2, r1
 8045e48:	42a5      	cmp	r5, r4
 8045e4a:	d10b      	bne.n	8045e64 <_free_r+0x70>
 8045e4c:	6824      	ldr	r4, [r4, #0]
 8045e4e:	4421      	add	r1, r4
 8045e50:	1854      	adds	r4, r2, r1
 8045e52:	42a3      	cmp	r3, r4
 8045e54:	6011      	str	r1, [r2, #0]
 8045e56:	d1e0      	bne.n	8045e1a <_free_r+0x26>
 8045e58:	681c      	ldr	r4, [r3, #0]
 8045e5a:	685b      	ldr	r3, [r3, #4]
 8045e5c:	6053      	str	r3, [r2, #4]
 8045e5e:	4421      	add	r1, r4
 8045e60:	6011      	str	r1, [r2, #0]
 8045e62:	e7da      	b.n	8045e1a <_free_r+0x26>
 8045e64:	d902      	bls.n	8045e6c <_free_r+0x78>
 8045e66:	230c      	movs	r3, #12
 8045e68:	6003      	str	r3, [r0, #0]
 8045e6a:	e7d6      	b.n	8045e1a <_free_r+0x26>
 8045e6c:	6825      	ldr	r5, [r4, #0]
 8045e6e:	1961      	adds	r1, r4, r5
 8045e70:	428b      	cmp	r3, r1
 8045e72:	bf04      	itt	eq
 8045e74:	6819      	ldreq	r1, [r3, #0]
 8045e76:	685b      	ldreq	r3, [r3, #4]
 8045e78:	6063      	str	r3, [r4, #4]
 8045e7a:	bf04      	itt	eq
 8045e7c:	1949      	addeq	r1, r1, r5
 8045e7e:	6021      	streq	r1, [r4, #0]
 8045e80:	6054      	str	r4, [r2, #4]
 8045e82:	e7ca      	b.n	8045e1a <_free_r+0x26>
 8045e84:	b003      	add	sp, #12
 8045e86:	bd30      	pop	{r4, r5, pc}
 8045e88:	24000130 	.word	0x24000130

08045e8c <sbrk_aligned>:
 8045e8c:	b570      	push	{r4, r5, r6, lr}
 8045e8e:	4e0e      	ldr	r6, [pc, #56]	; (8045ec8 <sbrk_aligned+0x3c>)
 8045e90:	460c      	mov	r4, r1
 8045e92:	6831      	ldr	r1, [r6, #0]
 8045e94:	4605      	mov	r5, r0
 8045e96:	b911      	cbnz	r1, 8045e9e <sbrk_aligned+0x12>
 8045e98:	f000 fb7a 	bl	8046590 <_sbrk_r>
 8045e9c:	6030      	str	r0, [r6, #0]
 8045e9e:	4621      	mov	r1, r4
 8045ea0:	4628      	mov	r0, r5
 8045ea2:	f000 fb75 	bl	8046590 <_sbrk_r>
 8045ea6:	1c43      	adds	r3, r0, #1
 8045ea8:	d00a      	beq.n	8045ec0 <sbrk_aligned+0x34>
 8045eaa:	1cc4      	adds	r4, r0, #3
 8045eac:	f024 0403 	bic.w	r4, r4, #3
 8045eb0:	42a0      	cmp	r0, r4
 8045eb2:	d007      	beq.n	8045ec4 <sbrk_aligned+0x38>
 8045eb4:	1a21      	subs	r1, r4, r0
 8045eb6:	4628      	mov	r0, r5
 8045eb8:	f000 fb6a 	bl	8046590 <_sbrk_r>
 8045ebc:	3001      	adds	r0, #1
 8045ebe:	d101      	bne.n	8045ec4 <sbrk_aligned+0x38>
 8045ec0:	f04f 34ff 	mov.w	r4, #4294967295
 8045ec4:	4620      	mov	r0, r4
 8045ec6:	bd70      	pop	{r4, r5, r6, pc}
 8045ec8:	24000134 	.word	0x24000134

08045ecc <_malloc_r>:
 8045ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8045ed0:	1ccd      	adds	r5, r1, #3
 8045ed2:	f025 0503 	bic.w	r5, r5, #3
 8045ed6:	3508      	adds	r5, #8
 8045ed8:	2d0c      	cmp	r5, #12
 8045eda:	bf38      	it	cc
 8045edc:	250c      	movcc	r5, #12
 8045ede:	2d00      	cmp	r5, #0
 8045ee0:	4607      	mov	r7, r0
 8045ee2:	db01      	blt.n	8045ee8 <_malloc_r+0x1c>
 8045ee4:	42a9      	cmp	r1, r5
 8045ee6:	d905      	bls.n	8045ef4 <_malloc_r+0x28>
 8045ee8:	230c      	movs	r3, #12
 8045eea:	603b      	str	r3, [r7, #0]
 8045eec:	2600      	movs	r6, #0
 8045eee:	4630      	mov	r0, r6
 8045ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8045ef4:	4e2e      	ldr	r6, [pc, #184]	; (8045fb0 <_malloc_r+0xe4>)
 8045ef6:	f000 fbf5 	bl	80466e4 <__malloc_lock>
 8045efa:	6833      	ldr	r3, [r6, #0]
 8045efc:	461c      	mov	r4, r3
 8045efe:	bb34      	cbnz	r4, 8045f4e <_malloc_r+0x82>
 8045f00:	4629      	mov	r1, r5
 8045f02:	4638      	mov	r0, r7
 8045f04:	f7ff ffc2 	bl	8045e8c <sbrk_aligned>
 8045f08:	1c43      	adds	r3, r0, #1
 8045f0a:	4604      	mov	r4, r0
 8045f0c:	d14d      	bne.n	8045faa <_malloc_r+0xde>
 8045f0e:	6834      	ldr	r4, [r6, #0]
 8045f10:	4626      	mov	r6, r4
 8045f12:	2e00      	cmp	r6, #0
 8045f14:	d140      	bne.n	8045f98 <_malloc_r+0xcc>
 8045f16:	6823      	ldr	r3, [r4, #0]
 8045f18:	4631      	mov	r1, r6
 8045f1a:	4638      	mov	r0, r7
 8045f1c:	eb04 0803 	add.w	r8, r4, r3
 8045f20:	f000 fb36 	bl	8046590 <_sbrk_r>
 8045f24:	4580      	cmp	r8, r0
 8045f26:	d13a      	bne.n	8045f9e <_malloc_r+0xd2>
 8045f28:	6821      	ldr	r1, [r4, #0]
 8045f2a:	3503      	adds	r5, #3
 8045f2c:	1a6d      	subs	r5, r5, r1
 8045f2e:	f025 0503 	bic.w	r5, r5, #3
 8045f32:	3508      	adds	r5, #8
 8045f34:	2d0c      	cmp	r5, #12
 8045f36:	bf38      	it	cc
 8045f38:	250c      	movcc	r5, #12
 8045f3a:	4629      	mov	r1, r5
 8045f3c:	4638      	mov	r0, r7
 8045f3e:	f7ff ffa5 	bl	8045e8c <sbrk_aligned>
 8045f42:	3001      	adds	r0, #1
 8045f44:	d02b      	beq.n	8045f9e <_malloc_r+0xd2>
 8045f46:	6823      	ldr	r3, [r4, #0]
 8045f48:	442b      	add	r3, r5
 8045f4a:	6023      	str	r3, [r4, #0]
 8045f4c:	e00e      	b.n	8045f6c <_malloc_r+0xa0>
 8045f4e:	6822      	ldr	r2, [r4, #0]
 8045f50:	1b52      	subs	r2, r2, r5
 8045f52:	d41e      	bmi.n	8045f92 <_malloc_r+0xc6>
 8045f54:	2a0b      	cmp	r2, #11
 8045f56:	d916      	bls.n	8045f86 <_malloc_r+0xba>
 8045f58:	1961      	adds	r1, r4, r5
 8045f5a:	42a3      	cmp	r3, r4
 8045f5c:	6025      	str	r5, [r4, #0]
 8045f5e:	bf18      	it	ne
 8045f60:	6059      	strne	r1, [r3, #4]
 8045f62:	6863      	ldr	r3, [r4, #4]
 8045f64:	bf08      	it	eq
 8045f66:	6031      	streq	r1, [r6, #0]
 8045f68:	5162      	str	r2, [r4, r5]
 8045f6a:	604b      	str	r3, [r1, #4]
 8045f6c:	4638      	mov	r0, r7
 8045f6e:	f104 060b 	add.w	r6, r4, #11
 8045f72:	f000 fbbd 	bl	80466f0 <__malloc_unlock>
 8045f76:	f026 0607 	bic.w	r6, r6, #7
 8045f7a:	1d23      	adds	r3, r4, #4
 8045f7c:	1af2      	subs	r2, r6, r3
 8045f7e:	d0b6      	beq.n	8045eee <_malloc_r+0x22>
 8045f80:	1b9b      	subs	r3, r3, r6
 8045f82:	50a3      	str	r3, [r4, r2]
 8045f84:	e7b3      	b.n	8045eee <_malloc_r+0x22>
 8045f86:	6862      	ldr	r2, [r4, #4]
 8045f88:	42a3      	cmp	r3, r4
 8045f8a:	bf0c      	ite	eq
 8045f8c:	6032      	streq	r2, [r6, #0]
 8045f8e:	605a      	strne	r2, [r3, #4]
 8045f90:	e7ec      	b.n	8045f6c <_malloc_r+0xa0>
 8045f92:	4623      	mov	r3, r4
 8045f94:	6864      	ldr	r4, [r4, #4]
 8045f96:	e7b2      	b.n	8045efe <_malloc_r+0x32>
 8045f98:	4634      	mov	r4, r6
 8045f9a:	6876      	ldr	r6, [r6, #4]
 8045f9c:	e7b9      	b.n	8045f12 <_malloc_r+0x46>
 8045f9e:	230c      	movs	r3, #12
 8045fa0:	603b      	str	r3, [r7, #0]
 8045fa2:	4638      	mov	r0, r7
 8045fa4:	f000 fba4 	bl	80466f0 <__malloc_unlock>
 8045fa8:	e7a1      	b.n	8045eee <_malloc_r+0x22>
 8045faa:	6025      	str	r5, [r4, #0]
 8045fac:	e7de      	b.n	8045f6c <_malloc_r+0xa0>
 8045fae:	bf00      	nop
 8045fb0:	24000130 	.word	0x24000130

08045fb4 <__sfputc_r>:
 8045fb4:	6893      	ldr	r3, [r2, #8]
 8045fb6:	3b01      	subs	r3, #1
 8045fb8:	2b00      	cmp	r3, #0
 8045fba:	b410      	push	{r4}
 8045fbc:	6093      	str	r3, [r2, #8]
 8045fbe:	da08      	bge.n	8045fd2 <__sfputc_r+0x1e>
 8045fc0:	6994      	ldr	r4, [r2, #24]
 8045fc2:	42a3      	cmp	r3, r4
 8045fc4:	db01      	blt.n	8045fca <__sfputc_r+0x16>
 8045fc6:	290a      	cmp	r1, #10
 8045fc8:	d103      	bne.n	8045fd2 <__sfputc_r+0x1e>
 8045fca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8045fce:	f7ff bc31 	b.w	8045834 <__swbuf_r>
 8045fd2:	6813      	ldr	r3, [r2, #0]
 8045fd4:	1c58      	adds	r0, r3, #1
 8045fd6:	6010      	str	r0, [r2, #0]
 8045fd8:	7019      	strb	r1, [r3, #0]
 8045fda:	4608      	mov	r0, r1
 8045fdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8045fe0:	4770      	bx	lr

08045fe2 <__sfputs_r>:
 8045fe2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8045fe4:	4606      	mov	r6, r0
 8045fe6:	460f      	mov	r7, r1
 8045fe8:	4614      	mov	r4, r2
 8045fea:	18d5      	adds	r5, r2, r3
 8045fec:	42ac      	cmp	r4, r5
 8045fee:	d101      	bne.n	8045ff4 <__sfputs_r+0x12>
 8045ff0:	2000      	movs	r0, #0
 8045ff2:	e007      	b.n	8046004 <__sfputs_r+0x22>
 8045ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8045ff8:	463a      	mov	r2, r7
 8045ffa:	4630      	mov	r0, r6
 8045ffc:	f7ff ffda 	bl	8045fb4 <__sfputc_r>
 8046000:	1c43      	adds	r3, r0, #1
 8046002:	d1f3      	bne.n	8045fec <__sfputs_r+0xa>
 8046004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08046008 <_vfiprintf_r>:
 8046008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804600c:	460d      	mov	r5, r1
 804600e:	b09d      	sub	sp, #116	; 0x74
 8046010:	4614      	mov	r4, r2
 8046012:	4698      	mov	r8, r3
 8046014:	4606      	mov	r6, r0
 8046016:	b118      	cbz	r0, 8046020 <_vfiprintf_r+0x18>
 8046018:	6983      	ldr	r3, [r0, #24]
 804601a:	b90b      	cbnz	r3, 8046020 <_vfiprintf_r+0x18>
 804601c:	f7ff fde4 	bl	8045be8 <__sinit>
 8046020:	4b89      	ldr	r3, [pc, #548]	; (8046248 <_vfiprintf_r+0x240>)
 8046022:	429d      	cmp	r5, r3
 8046024:	d11b      	bne.n	804605e <_vfiprintf_r+0x56>
 8046026:	6875      	ldr	r5, [r6, #4]
 8046028:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 804602a:	07d9      	lsls	r1, r3, #31
 804602c:	d405      	bmi.n	804603a <_vfiprintf_r+0x32>
 804602e:	89ab      	ldrh	r3, [r5, #12]
 8046030:	059a      	lsls	r2, r3, #22
 8046032:	d402      	bmi.n	804603a <_vfiprintf_r+0x32>
 8046034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8046036:	f7ff fe75 	bl	8045d24 <__retarget_lock_acquire_recursive>
 804603a:	89ab      	ldrh	r3, [r5, #12]
 804603c:	071b      	lsls	r3, r3, #28
 804603e:	d501      	bpl.n	8046044 <_vfiprintf_r+0x3c>
 8046040:	692b      	ldr	r3, [r5, #16]
 8046042:	b9eb      	cbnz	r3, 8046080 <_vfiprintf_r+0x78>
 8046044:	4629      	mov	r1, r5
 8046046:	4630      	mov	r0, r6
 8046048:	f7ff fc46 	bl	80458d8 <__swsetup_r>
 804604c:	b1c0      	cbz	r0, 8046080 <_vfiprintf_r+0x78>
 804604e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8046050:	07dc      	lsls	r4, r3, #31
 8046052:	d50e      	bpl.n	8046072 <_vfiprintf_r+0x6a>
 8046054:	f04f 30ff 	mov.w	r0, #4294967295
 8046058:	b01d      	add	sp, #116	; 0x74
 804605a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 804605e:	4b7b      	ldr	r3, [pc, #492]	; (804624c <_vfiprintf_r+0x244>)
 8046060:	429d      	cmp	r5, r3
 8046062:	d101      	bne.n	8046068 <_vfiprintf_r+0x60>
 8046064:	68b5      	ldr	r5, [r6, #8]
 8046066:	e7df      	b.n	8046028 <_vfiprintf_r+0x20>
 8046068:	4b79      	ldr	r3, [pc, #484]	; (8046250 <_vfiprintf_r+0x248>)
 804606a:	429d      	cmp	r5, r3
 804606c:	bf08      	it	eq
 804606e:	68f5      	ldreq	r5, [r6, #12]
 8046070:	e7da      	b.n	8046028 <_vfiprintf_r+0x20>
 8046072:	89ab      	ldrh	r3, [r5, #12]
 8046074:	0598      	lsls	r0, r3, #22
 8046076:	d4ed      	bmi.n	8046054 <_vfiprintf_r+0x4c>
 8046078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 804607a:	f7ff fe54 	bl	8045d26 <__retarget_lock_release_recursive>
 804607e:	e7e9      	b.n	8046054 <_vfiprintf_r+0x4c>
 8046080:	2300      	movs	r3, #0
 8046082:	9309      	str	r3, [sp, #36]	; 0x24
 8046084:	2320      	movs	r3, #32
 8046086:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 804608a:	f8cd 800c 	str.w	r8, [sp, #12]
 804608e:	2330      	movs	r3, #48	; 0x30
 8046090:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8046254 <_vfiprintf_r+0x24c>
 8046094:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8046098:	f04f 0901 	mov.w	r9, #1
 804609c:	4623      	mov	r3, r4
 804609e:	469a      	mov	sl, r3
 80460a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80460a4:	b10a      	cbz	r2, 80460aa <_vfiprintf_r+0xa2>
 80460a6:	2a25      	cmp	r2, #37	; 0x25
 80460a8:	d1f9      	bne.n	804609e <_vfiprintf_r+0x96>
 80460aa:	ebba 0b04 	subs.w	fp, sl, r4
 80460ae:	d00b      	beq.n	80460c8 <_vfiprintf_r+0xc0>
 80460b0:	465b      	mov	r3, fp
 80460b2:	4622      	mov	r2, r4
 80460b4:	4629      	mov	r1, r5
 80460b6:	4630      	mov	r0, r6
 80460b8:	f7ff ff93 	bl	8045fe2 <__sfputs_r>
 80460bc:	3001      	adds	r0, #1
 80460be:	f000 80aa 	beq.w	8046216 <_vfiprintf_r+0x20e>
 80460c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80460c4:	445a      	add	r2, fp
 80460c6:	9209      	str	r2, [sp, #36]	; 0x24
 80460c8:	f89a 3000 	ldrb.w	r3, [sl]
 80460cc:	2b00      	cmp	r3, #0
 80460ce:	f000 80a2 	beq.w	8046216 <_vfiprintf_r+0x20e>
 80460d2:	2300      	movs	r3, #0
 80460d4:	f04f 32ff 	mov.w	r2, #4294967295
 80460d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80460dc:	f10a 0a01 	add.w	sl, sl, #1
 80460e0:	9304      	str	r3, [sp, #16]
 80460e2:	9307      	str	r3, [sp, #28]
 80460e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80460e8:	931a      	str	r3, [sp, #104]	; 0x68
 80460ea:	4654      	mov	r4, sl
 80460ec:	2205      	movs	r2, #5
 80460ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80460f2:	4858      	ldr	r0, [pc, #352]	; (8046254 <_vfiprintf_r+0x24c>)
 80460f4:	f7fa f8f4 	bl	80402e0 <memchr>
 80460f8:	9a04      	ldr	r2, [sp, #16]
 80460fa:	b9d8      	cbnz	r0, 8046134 <_vfiprintf_r+0x12c>
 80460fc:	06d1      	lsls	r1, r2, #27
 80460fe:	bf44      	itt	mi
 8046100:	2320      	movmi	r3, #32
 8046102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8046106:	0713      	lsls	r3, r2, #28
 8046108:	bf44      	itt	mi
 804610a:	232b      	movmi	r3, #43	; 0x2b
 804610c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8046110:	f89a 3000 	ldrb.w	r3, [sl]
 8046114:	2b2a      	cmp	r3, #42	; 0x2a
 8046116:	d015      	beq.n	8046144 <_vfiprintf_r+0x13c>
 8046118:	9a07      	ldr	r2, [sp, #28]
 804611a:	4654      	mov	r4, sl
 804611c:	2000      	movs	r0, #0
 804611e:	f04f 0c0a 	mov.w	ip, #10
 8046122:	4621      	mov	r1, r4
 8046124:	f811 3b01 	ldrb.w	r3, [r1], #1
 8046128:	3b30      	subs	r3, #48	; 0x30
 804612a:	2b09      	cmp	r3, #9
 804612c:	d94e      	bls.n	80461cc <_vfiprintf_r+0x1c4>
 804612e:	b1b0      	cbz	r0, 804615e <_vfiprintf_r+0x156>
 8046130:	9207      	str	r2, [sp, #28]
 8046132:	e014      	b.n	804615e <_vfiprintf_r+0x156>
 8046134:	eba0 0308 	sub.w	r3, r0, r8
 8046138:	fa09 f303 	lsl.w	r3, r9, r3
 804613c:	4313      	orrs	r3, r2
 804613e:	9304      	str	r3, [sp, #16]
 8046140:	46a2      	mov	sl, r4
 8046142:	e7d2      	b.n	80460ea <_vfiprintf_r+0xe2>
 8046144:	9b03      	ldr	r3, [sp, #12]
 8046146:	1d19      	adds	r1, r3, #4
 8046148:	681b      	ldr	r3, [r3, #0]
 804614a:	9103      	str	r1, [sp, #12]
 804614c:	2b00      	cmp	r3, #0
 804614e:	bfbb      	ittet	lt
 8046150:	425b      	neglt	r3, r3
 8046152:	f042 0202 	orrlt.w	r2, r2, #2
 8046156:	9307      	strge	r3, [sp, #28]
 8046158:	9307      	strlt	r3, [sp, #28]
 804615a:	bfb8      	it	lt
 804615c:	9204      	strlt	r2, [sp, #16]
 804615e:	7823      	ldrb	r3, [r4, #0]
 8046160:	2b2e      	cmp	r3, #46	; 0x2e
 8046162:	d10c      	bne.n	804617e <_vfiprintf_r+0x176>
 8046164:	7863      	ldrb	r3, [r4, #1]
 8046166:	2b2a      	cmp	r3, #42	; 0x2a
 8046168:	d135      	bne.n	80461d6 <_vfiprintf_r+0x1ce>
 804616a:	9b03      	ldr	r3, [sp, #12]
 804616c:	1d1a      	adds	r2, r3, #4
 804616e:	681b      	ldr	r3, [r3, #0]
 8046170:	9203      	str	r2, [sp, #12]
 8046172:	2b00      	cmp	r3, #0
 8046174:	bfb8      	it	lt
 8046176:	f04f 33ff 	movlt.w	r3, #4294967295
 804617a:	3402      	adds	r4, #2
 804617c:	9305      	str	r3, [sp, #20]
 804617e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8046264 <_vfiprintf_r+0x25c>
 8046182:	7821      	ldrb	r1, [r4, #0]
 8046184:	2203      	movs	r2, #3
 8046186:	4650      	mov	r0, sl
 8046188:	f7fa f8aa 	bl	80402e0 <memchr>
 804618c:	b140      	cbz	r0, 80461a0 <_vfiprintf_r+0x198>
 804618e:	2340      	movs	r3, #64	; 0x40
 8046190:	eba0 000a 	sub.w	r0, r0, sl
 8046194:	fa03 f000 	lsl.w	r0, r3, r0
 8046198:	9b04      	ldr	r3, [sp, #16]
 804619a:	4303      	orrs	r3, r0
 804619c:	3401      	adds	r4, #1
 804619e:	9304      	str	r3, [sp, #16]
 80461a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80461a4:	482c      	ldr	r0, [pc, #176]	; (8046258 <_vfiprintf_r+0x250>)
 80461a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80461aa:	2206      	movs	r2, #6
 80461ac:	f7fa f898 	bl	80402e0 <memchr>
 80461b0:	2800      	cmp	r0, #0
 80461b2:	d03f      	beq.n	8046234 <_vfiprintf_r+0x22c>
 80461b4:	4b29      	ldr	r3, [pc, #164]	; (804625c <_vfiprintf_r+0x254>)
 80461b6:	bb1b      	cbnz	r3, 8046200 <_vfiprintf_r+0x1f8>
 80461b8:	9b03      	ldr	r3, [sp, #12]
 80461ba:	3307      	adds	r3, #7
 80461bc:	f023 0307 	bic.w	r3, r3, #7
 80461c0:	3308      	adds	r3, #8
 80461c2:	9303      	str	r3, [sp, #12]
 80461c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80461c6:	443b      	add	r3, r7
 80461c8:	9309      	str	r3, [sp, #36]	; 0x24
 80461ca:	e767      	b.n	804609c <_vfiprintf_r+0x94>
 80461cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80461d0:	460c      	mov	r4, r1
 80461d2:	2001      	movs	r0, #1
 80461d4:	e7a5      	b.n	8046122 <_vfiprintf_r+0x11a>
 80461d6:	2300      	movs	r3, #0
 80461d8:	3401      	adds	r4, #1
 80461da:	9305      	str	r3, [sp, #20]
 80461dc:	4619      	mov	r1, r3
 80461de:	f04f 0c0a 	mov.w	ip, #10
 80461e2:	4620      	mov	r0, r4
 80461e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80461e8:	3a30      	subs	r2, #48	; 0x30
 80461ea:	2a09      	cmp	r2, #9
 80461ec:	d903      	bls.n	80461f6 <_vfiprintf_r+0x1ee>
 80461ee:	2b00      	cmp	r3, #0
 80461f0:	d0c5      	beq.n	804617e <_vfiprintf_r+0x176>
 80461f2:	9105      	str	r1, [sp, #20]
 80461f4:	e7c3      	b.n	804617e <_vfiprintf_r+0x176>
 80461f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80461fa:	4604      	mov	r4, r0
 80461fc:	2301      	movs	r3, #1
 80461fe:	e7f0      	b.n	80461e2 <_vfiprintf_r+0x1da>
 8046200:	ab03      	add	r3, sp, #12
 8046202:	9300      	str	r3, [sp, #0]
 8046204:	462a      	mov	r2, r5
 8046206:	4b16      	ldr	r3, [pc, #88]	; (8046260 <_vfiprintf_r+0x258>)
 8046208:	a904      	add	r1, sp, #16
 804620a:	4630      	mov	r0, r6
 804620c:	f3af 8000 	nop.w
 8046210:	4607      	mov	r7, r0
 8046212:	1c78      	adds	r0, r7, #1
 8046214:	d1d6      	bne.n	80461c4 <_vfiprintf_r+0x1bc>
 8046216:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8046218:	07d9      	lsls	r1, r3, #31
 804621a:	d405      	bmi.n	8046228 <_vfiprintf_r+0x220>
 804621c:	89ab      	ldrh	r3, [r5, #12]
 804621e:	059a      	lsls	r2, r3, #22
 8046220:	d402      	bmi.n	8046228 <_vfiprintf_r+0x220>
 8046222:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8046224:	f7ff fd7f 	bl	8045d26 <__retarget_lock_release_recursive>
 8046228:	89ab      	ldrh	r3, [r5, #12]
 804622a:	065b      	lsls	r3, r3, #25
 804622c:	f53f af12 	bmi.w	8046054 <_vfiprintf_r+0x4c>
 8046230:	9809      	ldr	r0, [sp, #36]	; 0x24
 8046232:	e711      	b.n	8046058 <_vfiprintf_r+0x50>
 8046234:	ab03      	add	r3, sp, #12
 8046236:	9300      	str	r3, [sp, #0]
 8046238:	462a      	mov	r2, r5
 804623a:	4b09      	ldr	r3, [pc, #36]	; (8046260 <_vfiprintf_r+0x258>)
 804623c:	a904      	add	r1, sp, #16
 804623e:	4630      	mov	r0, r6
 8046240:	f000 f880 	bl	8046344 <_printf_i>
 8046244:	e7e4      	b.n	8046210 <_vfiprintf_r+0x208>
 8046246:	bf00      	nop
 8046248:	080467d0 	.word	0x080467d0
 804624c:	080467f0 	.word	0x080467f0
 8046250:	080467b0 	.word	0x080467b0
 8046254:	08046810 	.word	0x08046810
 8046258:	0804681a 	.word	0x0804681a
 804625c:	00000000 	.word	0x00000000
 8046260:	08045fe3 	.word	0x08045fe3
 8046264:	08046816 	.word	0x08046816

08046268 <_printf_common>:
 8046268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 804626c:	4616      	mov	r6, r2
 804626e:	4699      	mov	r9, r3
 8046270:	688a      	ldr	r2, [r1, #8]
 8046272:	690b      	ldr	r3, [r1, #16]
 8046274:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8046278:	4293      	cmp	r3, r2
 804627a:	bfb8      	it	lt
 804627c:	4613      	movlt	r3, r2
 804627e:	6033      	str	r3, [r6, #0]
 8046280:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8046284:	4607      	mov	r7, r0
 8046286:	460c      	mov	r4, r1
 8046288:	b10a      	cbz	r2, 804628e <_printf_common+0x26>
 804628a:	3301      	adds	r3, #1
 804628c:	6033      	str	r3, [r6, #0]
 804628e:	6823      	ldr	r3, [r4, #0]
 8046290:	0699      	lsls	r1, r3, #26
 8046292:	bf42      	ittt	mi
 8046294:	6833      	ldrmi	r3, [r6, #0]
 8046296:	3302      	addmi	r3, #2
 8046298:	6033      	strmi	r3, [r6, #0]
 804629a:	6825      	ldr	r5, [r4, #0]
 804629c:	f015 0506 	ands.w	r5, r5, #6
 80462a0:	d106      	bne.n	80462b0 <_printf_common+0x48>
 80462a2:	f104 0a19 	add.w	sl, r4, #25
 80462a6:	68e3      	ldr	r3, [r4, #12]
 80462a8:	6832      	ldr	r2, [r6, #0]
 80462aa:	1a9b      	subs	r3, r3, r2
 80462ac:	42ab      	cmp	r3, r5
 80462ae:	dc26      	bgt.n	80462fe <_printf_common+0x96>
 80462b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80462b4:	1e13      	subs	r3, r2, #0
 80462b6:	6822      	ldr	r2, [r4, #0]
 80462b8:	bf18      	it	ne
 80462ba:	2301      	movne	r3, #1
 80462bc:	0692      	lsls	r2, r2, #26
 80462be:	d42b      	bmi.n	8046318 <_printf_common+0xb0>
 80462c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80462c4:	4649      	mov	r1, r9
 80462c6:	4638      	mov	r0, r7
 80462c8:	47c0      	blx	r8
 80462ca:	3001      	adds	r0, #1
 80462cc:	d01e      	beq.n	804630c <_printf_common+0xa4>
 80462ce:	6823      	ldr	r3, [r4, #0]
 80462d0:	68e5      	ldr	r5, [r4, #12]
 80462d2:	6832      	ldr	r2, [r6, #0]
 80462d4:	f003 0306 	and.w	r3, r3, #6
 80462d8:	2b04      	cmp	r3, #4
 80462da:	bf08      	it	eq
 80462dc:	1aad      	subeq	r5, r5, r2
 80462de:	68a3      	ldr	r3, [r4, #8]
 80462e0:	6922      	ldr	r2, [r4, #16]
 80462e2:	bf0c      	ite	eq
 80462e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80462e8:	2500      	movne	r5, #0
 80462ea:	4293      	cmp	r3, r2
 80462ec:	bfc4      	itt	gt
 80462ee:	1a9b      	subgt	r3, r3, r2
 80462f0:	18ed      	addgt	r5, r5, r3
 80462f2:	2600      	movs	r6, #0
 80462f4:	341a      	adds	r4, #26
 80462f6:	42b5      	cmp	r5, r6
 80462f8:	d11a      	bne.n	8046330 <_printf_common+0xc8>
 80462fa:	2000      	movs	r0, #0
 80462fc:	e008      	b.n	8046310 <_printf_common+0xa8>
 80462fe:	2301      	movs	r3, #1
 8046300:	4652      	mov	r2, sl
 8046302:	4649      	mov	r1, r9
 8046304:	4638      	mov	r0, r7
 8046306:	47c0      	blx	r8
 8046308:	3001      	adds	r0, #1
 804630a:	d103      	bne.n	8046314 <_printf_common+0xac>
 804630c:	f04f 30ff 	mov.w	r0, #4294967295
 8046310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8046314:	3501      	adds	r5, #1
 8046316:	e7c6      	b.n	80462a6 <_printf_common+0x3e>
 8046318:	18e1      	adds	r1, r4, r3
 804631a:	1c5a      	adds	r2, r3, #1
 804631c:	2030      	movs	r0, #48	; 0x30
 804631e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8046322:	4422      	add	r2, r4
 8046324:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8046328:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 804632c:	3302      	adds	r3, #2
 804632e:	e7c7      	b.n	80462c0 <_printf_common+0x58>
 8046330:	2301      	movs	r3, #1
 8046332:	4622      	mov	r2, r4
 8046334:	4649      	mov	r1, r9
 8046336:	4638      	mov	r0, r7
 8046338:	47c0      	blx	r8
 804633a:	3001      	adds	r0, #1
 804633c:	d0e6      	beq.n	804630c <_printf_common+0xa4>
 804633e:	3601      	adds	r6, #1
 8046340:	e7d9      	b.n	80462f6 <_printf_common+0x8e>
	...

08046344 <_printf_i>:
 8046344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8046348:	7e0f      	ldrb	r7, [r1, #24]
 804634a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 804634c:	2f78      	cmp	r7, #120	; 0x78
 804634e:	4691      	mov	r9, r2
 8046350:	4680      	mov	r8, r0
 8046352:	460c      	mov	r4, r1
 8046354:	469a      	mov	sl, r3
 8046356:	f101 0243 	add.w	r2, r1, #67	; 0x43
 804635a:	d807      	bhi.n	804636c <_printf_i+0x28>
 804635c:	2f62      	cmp	r7, #98	; 0x62
 804635e:	d80a      	bhi.n	8046376 <_printf_i+0x32>
 8046360:	2f00      	cmp	r7, #0
 8046362:	f000 80d8 	beq.w	8046516 <_printf_i+0x1d2>
 8046366:	2f58      	cmp	r7, #88	; 0x58
 8046368:	f000 80a3 	beq.w	80464b2 <_printf_i+0x16e>
 804636c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8046370:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8046374:	e03a      	b.n	80463ec <_printf_i+0xa8>
 8046376:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 804637a:	2b15      	cmp	r3, #21
 804637c:	d8f6      	bhi.n	804636c <_printf_i+0x28>
 804637e:	a101      	add	r1, pc, #4	; (adr r1, 8046384 <_printf_i+0x40>)
 8046380:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8046384:	080463dd 	.word	0x080463dd
 8046388:	080463f1 	.word	0x080463f1
 804638c:	0804636d 	.word	0x0804636d
 8046390:	0804636d 	.word	0x0804636d
 8046394:	0804636d 	.word	0x0804636d
 8046398:	0804636d 	.word	0x0804636d
 804639c:	080463f1 	.word	0x080463f1
 80463a0:	0804636d 	.word	0x0804636d
 80463a4:	0804636d 	.word	0x0804636d
 80463a8:	0804636d 	.word	0x0804636d
 80463ac:	0804636d 	.word	0x0804636d
 80463b0:	080464fd 	.word	0x080464fd
 80463b4:	08046421 	.word	0x08046421
 80463b8:	080464df 	.word	0x080464df
 80463bc:	0804636d 	.word	0x0804636d
 80463c0:	0804636d 	.word	0x0804636d
 80463c4:	0804651f 	.word	0x0804651f
 80463c8:	0804636d 	.word	0x0804636d
 80463cc:	08046421 	.word	0x08046421
 80463d0:	0804636d 	.word	0x0804636d
 80463d4:	0804636d 	.word	0x0804636d
 80463d8:	080464e7 	.word	0x080464e7
 80463dc:	682b      	ldr	r3, [r5, #0]
 80463de:	1d1a      	adds	r2, r3, #4
 80463e0:	681b      	ldr	r3, [r3, #0]
 80463e2:	602a      	str	r2, [r5, #0]
 80463e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80463e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80463ec:	2301      	movs	r3, #1
 80463ee:	e0a3      	b.n	8046538 <_printf_i+0x1f4>
 80463f0:	6820      	ldr	r0, [r4, #0]
 80463f2:	6829      	ldr	r1, [r5, #0]
 80463f4:	0606      	lsls	r6, r0, #24
 80463f6:	f101 0304 	add.w	r3, r1, #4
 80463fa:	d50a      	bpl.n	8046412 <_printf_i+0xce>
 80463fc:	680e      	ldr	r6, [r1, #0]
 80463fe:	602b      	str	r3, [r5, #0]
 8046400:	2e00      	cmp	r6, #0
 8046402:	da03      	bge.n	804640c <_printf_i+0xc8>
 8046404:	232d      	movs	r3, #45	; 0x2d
 8046406:	4276      	negs	r6, r6
 8046408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 804640c:	485e      	ldr	r0, [pc, #376]	; (8046588 <_printf_i+0x244>)
 804640e:	230a      	movs	r3, #10
 8046410:	e019      	b.n	8046446 <_printf_i+0x102>
 8046412:	680e      	ldr	r6, [r1, #0]
 8046414:	602b      	str	r3, [r5, #0]
 8046416:	f010 0f40 	tst.w	r0, #64	; 0x40
 804641a:	bf18      	it	ne
 804641c:	b236      	sxthne	r6, r6
 804641e:	e7ef      	b.n	8046400 <_printf_i+0xbc>
 8046420:	682b      	ldr	r3, [r5, #0]
 8046422:	6820      	ldr	r0, [r4, #0]
 8046424:	1d19      	adds	r1, r3, #4
 8046426:	6029      	str	r1, [r5, #0]
 8046428:	0601      	lsls	r1, r0, #24
 804642a:	d501      	bpl.n	8046430 <_printf_i+0xec>
 804642c:	681e      	ldr	r6, [r3, #0]
 804642e:	e002      	b.n	8046436 <_printf_i+0xf2>
 8046430:	0646      	lsls	r6, r0, #25
 8046432:	d5fb      	bpl.n	804642c <_printf_i+0xe8>
 8046434:	881e      	ldrh	r6, [r3, #0]
 8046436:	4854      	ldr	r0, [pc, #336]	; (8046588 <_printf_i+0x244>)
 8046438:	2f6f      	cmp	r7, #111	; 0x6f
 804643a:	bf0c      	ite	eq
 804643c:	2308      	moveq	r3, #8
 804643e:	230a      	movne	r3, #10
 8046440:	2100      	movs	r1, #0
 8046442:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8046446:	6865      	ldr	r5, [r4, #4]
 8046448:	60a5      	str	r5, [r4, #8]
 804644a:	2d00      	cmp	r5, #0
 804644c:	bfa2      	ittt	ge
 804644e:	6821      	ldrge	r1, [r4, #0]
 8046450:	f021 0104 	bicge.w	r1, r1, #4
 8046454:	6021      	strge	r1, [r4, #0]
 8046456:	b90e      	cbnz	r6, 804645c <_printf_i+0x118>
 8046458:	2d00      	cmp	r5, #0
 804645a:	d04d      	beq.n	80464f8 <_printf_i+0x1b4>
 804645c:	4615      	mov	r5, r2
 804645e:	fbb6 f1f3 	udiv	r1, r6, r3
 8046462:	fb03 6711 	mls	r7, r3, r1, r6
 8046466:	5dc7      	ldrb	r7, [r0, r7]
 8046468:	f805 7d01 	strb.w	r7, [r5, #-1]!
 804646c:	4637      	mov	r7, r6
 804646e:	42bb      	cmp	r3, r7
 8046470:	460e      	mov	r6, r1
 8046472:	d9f4      	bls.n	804645e <_printf_i+0x11a>
 8046474:	2b08      	cmp	r3, #8
 8046476:	d10b      	bne.n	8046490 <_printf_i+0x14c>
 8046478:	6823      	ldr	r3, [r4, #0]
 804647a:	07de      	lsls	r6, r3, #31
 804647c:	d508      	bpl.n	8046490 <_printf_i+0x14c>
 804647e:	6923      	ldr	r3, [r4, #16]
 8046480:	6861      	ldr	r1, [r4, #4]
 8046482:	4299      	cmp	r1, r3
 8046484:	bfde      	ittt	le
 8046486:	2330      	movle	r3, #48	; 0x30
 8046488:	f805 3c01 	strble.w	r3, [r5, #-1]
 804648c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8046490:	1b52      	subs	r2, r2, r5
 8046492:	6122      	str	r2, [r4, #16]
 8046494:	f8cd a000 	str.w	sl, [sp]
 8046498:	464b      	mov	r3, r9
 804649a:	aa03      	add	r2, sp, #12
 804649c:	4621      	mov	r1, r4
 804649e:	4640      	mov	r0, r8
 80464a0:	f7ff fee2 	bl	8046268 <_printf_common>
 80464a4:	3001      	adds	r0, #1
 80464a6:	d14c      	bne.n	8046542 <_printf_i+0x1fe>
 80464a8:	f04f 30ff 	mov.w	r0, #4294967295
 80464ac:	b004      	add	sp, #16
 80464ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80464b2:	4835      	ldr	r0, [pc, #212]	; (8046588 <_printf_i+0x244>)
 80464b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80464b8:	6829      	ldr	r1, [r5, #0]
 80464ba:	6823      	ldr	r3, [r4, #0]
 80464bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80464c0:	6029      	str	r1, [r5, #0]
 80464c2:	061d      	lsls	r5, r3, #24
 80464c4:	d514      	bpl.n	80464f0 <_printf_i+0x1ac>
 80464c6:	07df      	lsls	r7, r3, #31
 80464c8:	bf44      	itt	mi
 80464ca:	f043 0320 	orrmi.w	r3, r3, #32
 80464ce:	6023      	strmi	r3, [r4, #0]
 80464d0:	b91e      	cbnz	r6, 80464da <_printf_i+0x196>
 80464d2:	6823      	ldr	r3, [r4, #0]
 80464d4:	f023 0320 	bic.w	r3, r3, #32
 80464d8:	6023      	str	r3, [r4, #0]
 80464da:	2310      	movs	r3, #16
 80464dc:	e7b0      	b.n	8046440 <_printf_i+0xfc>
 80464de:	6823      	ldr	r3, [r4, #0]
 80464e0:	f043 0320 	orr.w	r3, r3, #32
 80464e4:	6023      	str	r3, [r4, #0]
 80464e6:	2378      	movs	r3, #120	; 0x78
 80464e8:	4828      	ldr	r0, [pc, #160]	; (804658c <_printf_i+0x248>)
 80464ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80464ee:	e7e3      	b.n	80464b8 <_printf_i+0x174>
 80464f0:	0659      	lsls	r1, r3, #25
 80464f2:	bf48      	it	mi
 80464f4:	b2b6      	uxthmi	r6, r6
 80464f6:	e7e6      	b.n	80464c6 <_printf_i+0x182>
 80464f8:	4615      	mov	r5, r2
 80464fa:	e7bb      	b.n	8046474 <_printf_i+0x130>
 80464fc:	682b      	ldr	r3, [r5, #0]
 80464fe:	6826      	ldr	r6, [r4, #0]
 8046500:	6961      	ldr	r1, [r4, #20]
 8046502:	1d18      	adds	r0, r3, #4
 8046504:	6028      	str	r0, [r5, #0]
 8046506:	0635      	lsls	r5, r6, #24
 8046508:	681b      	ldr	r3, [r3, #0]
 804650a:	d501      	bpl.n	8046510 <_printf_i+0x1cc>
 804650c:	6019      	str	r1, [r3, #0]
 804650e:	e002      	b.n	8046516 <_printf_i+0x1d2>
 8046510:	0670      	lsls	r0, r6, #25
 8046512:	d5fb      	bpl.n	804650c <_printf_i+0x1c8>
 8046514:	8019      	strh	r1, [r3, #0]
 8046516:	2300      	movs	r3, #0
 8046518:	6123      	str	r3, [r4, #16]
 804651a:	4615      	mov	r5, r2
 804651c:	e7ba      	b.n	8046494 <_printf_i+0x150>
 804651e:	682b      	ldr	r3, [r5, #0]
 8046520:	1d1a      	adds	r2, r3, #4
 8046522:	602a      	str	r2, [r5, #0]
 8046524:	681d      	ldr	r5, [r3, #0]
 8046526:	6862      	ldr	r2, [r4, #4]
 8046528:	2100      	movs	r1, #0
 804652a:	4628      	mov	r0, r5
 804652c:	f7f9 fed8 	bl	80402e0 <memchr>
 8046530:	b108      	cbz	r0, 8046536 <_printf_i+0x1f2>
 8046532:	1b40      	subs	r0, r0, r5
 8046534:	6060      	str	r0, [r4, #4]
 8046536:	6863      	ldr	r3, [r4, #4]
 8046538:	6123      	str	r3, [r4, #16]
 804653a:	2300      	movs	r3, #0
 804653c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8046540:	e7a8      	b.n	8046494 <_printf_i+0x150>
 8046542:	6923      	ldr	r3, [r4, #16]
 8046544:	462a      	mov	r2, r5
 8046546:	4649      	mov	r1, r9
 8046548:	4640      	mov	r0, r8
 804654a:	47d0      	blx	sl
 804654c:	3001      	adds	r0, #1
 804654e:	d0ab      	beq.n	80464a8 <_printf_i+0x164>
 8046550:	6823      	ldr	r3, [r4, #0]
 8046552:	079b      	lsls	r3, r3, #30
 8046554:	d413      	bmi.n	804657e <_printf_i+0x23a>
 8046556:	68e0      	ldr	r0, [r4, #12]
 8046558:	9b03      	ldr	r3, [sp, #12]
 804655a:	4298      	cmp	r0, r3
 804655c:	bfb8      	it	lt
 804655e:	4618      	movlt	r0, r3
 8046560:	e7a4      	b.n	80464ac <_printf_i+0x168>
 8046562:	2301      	movs	r3, #1
 8046564:	4632      	mov	r2, r6
 8046566:	4649      	mov	r1, r9
 8046568:	4640      	mov	r0, r8
 804656a:	47d0      	blx	sl
 804656c:	3001      	adds	r0, #1
 804656e:	d09b      	beq.n	80464a8 <_printf_i+0x164>
 8046570:	3501      	adds	r5, #1
 8046572:	68e3      	ldr	r3, [r4, #12]
 8046574:	9903      	ldr	r1, [sp, #12]
 8046576:	1a5b      	subs	r3, r3, r1
 8046578:	42ab      	cmp	r3, r5
 804657a:	dcf2      	bgt.n	8046562 <_printf_i+0x21e>
 804657c:	e7eb      	b.n	8046556 <_printf_i+0x212>
 804657e:	2500      	movs	r5, #0
 8046580:	f104 0619 	add.w	r6, r4, #25
 8046584:	e7f5      	b.n	8046572 <_printf_i+0x22e>
 8046586:	bf00      	nop
 8046588:	08046821 	.word	0x08046821
 804658c:	08046832 	.word	0x08046832

08046590 <_sbrk_r>:
 8046590:	b538      	push	{r3, r4, r5, lr}
 8046592:	4d06      	ldr	r5, [pc, #24]	; (80465ac <_sbrk_r+0x1c>)
 8046594:	2300      	movs	r3, #0
 8046596:	4604      	mov	r4, r0
 8046598:	4608      	mov	r0, r1
 804659a:	602b      	str	r3, [r5, #0]
 804659c:	f7fa fbf8 	bl	8040d90 <_sbrk>
 80465a0:	1c43      	adds	r3, r0, #1
 80465a2:	d102      	bne.n	80465aa <_sbrk_r+0x1a>
 80465a4:	682b      	ldr	r3, [r5, #0]
 80465a6:	b103      	cbz	r3, 80465aa <_sbrk_r+0x1a>
 80465a8:	6023      	str	r3, [r4, #0]
 80465aa:	bd38      	pop	{r3, r4, r5, pc}
 80465ac:	24000138 	.word	0x24000138

080465b0 <__sread>:
 80465b0:	b510      	push	{r4, lr}
 80465b2:	460c      	mov	r4, r1
 80465b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80465b8:	f000 f8a0 	bl	80466fc <_read_r>
 80465bc:	2800      	cmp	r0, #0
 80465be:	bfab      	itete	ge
 80465c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80465c2:	89a3      	ldrhlt	r3, [r4, #12]
 80465c4:	181b      	addge	r3, r3, r0
 80465c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80465ca:	bfac      	ite	ge
 80465cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80465ce:	81a3      	strhlt	r3, [r4, #12]
 80465d0:	bd10      	pop	{r4, pc}

080465d2 <__swrite>:
 80465d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80465d6:	461f      	mov	r7, r3
 80465d8:	898b      	ldrh	r3, [r1, #12]
 80465da:	05db      	lsls	r3, r3, #23
 80465dc:	4605      	mov	r5, r0
 80465de:	460c      	mov	r4, r1
 80465e0:	4616      	mov	r6, r2
 80465e2:	d505      	bpl.n	80465f0 <__swrite+0x1e>
 80465e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80465e8:	2302      	movs	r3, #2
 80465ea:	2200      	movs	r2, #0
 80465ec:	f000 f868 	bl	80466c0 <_lseek_r>
 80465f0:	89a3      	ldrh	r3, [r4, #12]
 80465f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80465f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80465fa:	81a3      	strh	r3, [r4, #12]
 80465fc:	4632      	mov	r2, r6
 80465fe:	463b      	mov	r3, r7
 8046600:	4628      	mov	r0, r5
 8046602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8046606:	f000 b817 	b.w	8046638 <_write_r>

0804660a <__sseek>:
 804660a:	b510      	push	{r4, lr}
 804660c:	460c      	mov	r4, r1
 804660e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8046612:	f000 f855 	bl	80466c0 <_lseek_r>
 8046616:	1c43      	adds	r3, r0, #1
 8046618:	89a3      	ldrh	r3, [r4, #12]
 804661a:	bf15      	itete	ne
 804661c:	6560      	strne	r0, [r4, #84]	; 0x54
 804661e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8046622:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8046626:	81a3      	strheq	r3, [r4, #12]
 8046628:	bf18      	it	ne
 804662a:	81a3      	strhne	r3, [r4, #12]
 804662c:	bd10      	pop	{r4, pc}

0804662e <__sclose>:
 804662e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8046632:	f000 b813 	b.w	804665c <_close_r>
	...

08046638 <_write_r>:
 8046638:	b538      	push	{r3, r4, r5, lr}
 804663a:	4d07      	ldr	r5, [pc, #28]	; (8046658 <_write_r+0x20>)
 804663c:	4604      	mov	r4, r0
 804663e:	4608      	mov	r0, r1
 8046640:	4611      	mov	r1, r2
 8046642:	2200      	movs	r2, #0
 8046644:	602a      	str	r2, [r5, #0]
 8046646:	461a      	mov	r2, r3
 8046648:	f7fa fb51 	bl	8040cee <_write>
 804664c:	1c43      	adds	r3, r0, #1
 804664e:	d102      	bne.n	8046656 <_write_r+0x1e>
 8046650:	682b      	ldr	r3, [r5, #0]
 8046652:	b103      	cbz	r3, 8046656 <_write_r+0x1e>
 8046654:	6023      	str	r3, [r4, #0]
 8046656:	bd38      	pop	{r3, r4, r5, pc}
 8046658:	24000138 	.word	0x24000138

0804665c <_close_r>:
 804665c:	b538      	push	{r3, r4, r5, lr}
 804665e:	4d06      	ldr	r5, [pc, #24]	; (8046678 <_close_r+0x1c>)
 8046660:	2300      	movs	r3, #0
 8046662:	4604      	mov	r4, r0
 8046664:	4608      	mov	r0, r1
 8046666:	602b      	str	r3, [r5, #0]
 8046668:	f7fa fb5d 	bl	8040d26 <_close>
 804666c:	1c43      	adds	r3, r0, #1
 804666e:	d102      	bne.n	8046676 <_close_r+0x1a>
 8046670:	682b      	ldr	r3, [r5, #0]
 8046672:	b103      	cbz	r3, 8046676 <_close_r+0x1a>
 8046674:	6023      	str	r3, [r4, #0]
 8046676:	bd38      	pop	{r3, r4, r5, pc}
 8046678:	24000138 	.word	0x24000138

0804667c <_fstat_r>:
 804667c:	b538      	push	{r3, r4, r5, lr}
 804667e:	4d07      	ldr	r5, [pc, #28]	; (804669c <_fstat_r+0x20>)
 8046680:	2300      	movs	r3, #0
 8046682:	4604      	mov	r4, r0
 8046684:	4608      	mov	r0, r1
 8046686:	4611      	mov	r1, r2
 8046688:	602b      	str	r3, [r5, #0]
 804668a:	f7fa fb58 	bl	8040d3e <_fstat>
 804668e:	1c43      	adds	r3, r0, #1
 8046690:	d102      	bne.n	8046698 <_fstat_r+0x1c>
 8046692:	682b      	ldr	r3, [r5, #0]
 8046694:	b103      	cbz	r3, 8046698 <_fstat_r+0x1c>
 8046696:	6023      	str	r3, [r4, #0]
 8046698:	bd38      	pop	{r3, r4, r5, pc}
 804669a:	bf00      	nop
 804669c:	24000138 	.word	0x24000138

080466a0 <_isatty_r>:
 80466a0:	b538      	push	{r3, r4, r5, lr}
 80466a2:	4d06      	ldr	r5, [pc, #24]	; (80466bc <_isatty_r+0x1c>)
 80466a4:	2300      	movs	r3, #0
 80466a6:	4604      	mov	r4, r0
 80466a8:	4608      	mov	r0, r1
 80466aa:	602b      	str	r3, [r5, #0]
 80466ac:	f7fa fb57 	bl	8040d5e <_isatty>
 80466b0:	1c43      	adds	r3, r0, #1
 80466b2:	d102      	bne.n	80466ba <_isatty_r+0x1a>
 80466b4:	682b      	ldr	r3, [r5, #0]
 80466b6:	b103      	cbz	r3, 80466ba <_isatty_r+0x1a>
 80466b8:	6023      	str	r3, [r4, #0]
 80466ba:	bd38      	pop	{r3, r4, r5, pc}
 80466bc:	24000138 	.word	0x24000138

080466c0 <_lseek_r>:
 80466c0:	b538      	push	{r3, r4, r5, lr}
 80466c2:	4d07      	ldr	r5, [pc, #28]	; (80466e0 <_lseek_r+0x20>)
 80466c4:	4604      	mov	r4, r0
 80466c6:	4608      	mov	r0, r1
 80466c8:	4611      	mov	r1, r2
 80466ca:	2200      	movs	r2, #0
 80466cc:	602a      	str	r2, [r5, #0]
 80466ce:	461a      	mov	r2, r3
 80466d0:	f7fa fb50 	bl	8040d74 <_lseek>
 80466d4:	1c43      	adds	r3, r0, #1
 80466d6:	d102      	bne.n	80466de <_lseek_r+0x1e>
 80466d8:	682b      	ldr	r3, [r5, #0]
 80466da:	b103      	cbz	r3, 80466de <_lseek_r+0x1e>
 80466dc:	6023      	str	r3, [r4, #0]
 80466de:	bd38      	pop	{r3, r4, r5, pc}
 80466e0:	24000138 	.word	0x24000138

080466e4 <__malloc_lock>:
 80466e4:	4801      	ldr	r0, [pc, #4]	; (80466ec <__malloc_lock+0x8>)
 80466e6:	f7ff bb1d 	b.w	8045d24 <__retarget_lock_acquire_recursive>
 80466ea:	bf00      	nop
 80466ec:	2400012c 	.word	0x2400012c

080466f0 <__malloc_unlock>:
 80466f0:	4801      	ldr	r0, [pc, #4]	; (80466f8 <__malloc_unlock+0x8>)
 80466f2:	f7ff bb18 	b.w	8045d26 <__retarget_lock_release_recursive>
 80466f6:	bf00      	nop
 80466f8:	2400012c 	.word	0x2400012c

080466fc <_read_r>:
 80466fc:	b538      	push	{r3, r4, r5, lr}
 80466fe:	4d07      	ldr	r5, [pc, #28]	; (804671c <_read_r+0x20>)
 8046700:	4604      	mov	r4, r0
 8046702:	4608      	mov	r0, r1
 8046704:	4611      	mov	r1, r2
 8046706:	2200      	movs	r2, #0
 8046708:	602a      	str	r2, [r5, #0]
 804670a:	461a      	mov	r2, r3
 804670c:	f7fa fad2 	bl	8040cb4 <_read>
 8046710:	1c43      	adds	r3, r0, #1
 8046712:	d102      	bne.n	804671a <_read_r+0x1e>
 8046714:	682b      	ldr	r3, [r5, #0]
 8046716:	b103      	cbz	r3, 804671a <_read_r+0x1e>
 8046718:	6023      	str	r3, [r4, #0]
 804671a:	bd38      	pop	{r3, r4, r5, pc}
 804671c:	24000138 	.word	0x24000138

08046720 <_init>:
 8046720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8046722:	bf00      	nop
 8046724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8046726:	bc08      	pop	{r3}
 8046728:	469e      	mov	lr, r3
 804672a:	4770      	bx	lr

0804672c <_fini>:
 804672c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 804672e:	bf00      	nop
 8046730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8046732:	bc08      	pop	{r3}
 8046734:	469e      	mov	lr, r3
 8046736:	4770      	bx	lr
